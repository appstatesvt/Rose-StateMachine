
StateMachine2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009700  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08009890  08009890  0000a890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a00  08009a00  0000b14c  2**0
                  CONTENTS
  4 .ARM          00000008  08009a00  08009a00  0000aa00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a08  08009a08  0000b14c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a08  08009a08  0000aa08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a0c  08009a0c  0000aa0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  08009a10  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b14c  2**0
                  CONTENTS
 10 .bss          00001ef4  2000014c  2000014c  0000b14c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002040  20002040  0000b14c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b14c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011a99  00000000  00000000  0000b17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003324  00000000  00000000  0001cc15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ef8  00000000  00000000  0001ff40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b2d  00000000  00000000  00020e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025bd6  00000000  00000000  00021965  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014028  00000000  00000000  0004753b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d754a  00000000  00000000  0005b563  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00132aad  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000041ac  00000000  00000000  00132af0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  00136c9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000014c 	.word	0x2000014c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009878 	.word	0x08009878

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000150 	.word	0x20000150
 80001cc:	08009878 	.word	0x08009878

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f001 faf8 	bl	8001b68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 fd78 	bl	800106c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f000 ff7e 	bl	800147c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000580:	f000 fdde 	bl	8001140 <MX_ADC1_Init>
  MX_DAC_Init();
 8000584:	f000 ff46 	bl	8001414 <MX_DAC_Init>
  MX_USB_DEVICE_Init();
 8000588:	f007 ffae 	bl	80084e8 <MX_USB_DEVICE_Init>
  MX_ADC2_Init();
 800058c:	f000 fe2a 	bl	80011e4 <MX_ADC2_Init>
  MX_CAN1_Init();
 8000590:	f000 fecc 	bl	800132c <MX_CAN1_Init>
  MX_ADC3_Init();
 8000594:	f000 fe78 	bl	8001288 <MX_ADC3_Init>


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  i_keyIGN 				= HAL_GPIO_ReadPin(keyIGNPort, keyIGN);
 8000598:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800059c:	483d      	ldr	r0, [pc, #244]	@ (8000694 <main+0x124>)
 800059e:	f002 fc71 	bl	8002e84 <HAL_GPIO_ReadPin>
 80005a2:	4603      	mov	r3, r0
 80005a4:	461a      	mov	r2, r3
 80005a6:	4b3c      	ldr	r3, [pc, #240]	@ (8000698 <main+0x128>)
 80005a8:	701a      	strb	r2, [r3, #0]
	  i_keyACC 				= HAL_GPIO_ReadPin(keyACCPort, keyACC);
 80005aa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005ae:	4839      	ldr	r0, [pc, #228]	@ (8000694 <main+0x124>)
 80005b0:	f002 fc68 	bl	8002e84 <HAL_GPIO_ReadPin>
 80005b4:	4603      	mov	r3, r0
 80005b6:	461a      	mov	r2, r3
 80005b8:	4b38      	ldr	r3, [pc, #224]	@ (800069c <main+0x12c>)
 80005ba:	701a      	strb	r2, [r3, #0]
	  i_killSwitch 			= !HAL_GPIO_ReadPin(killSwitchPort, killSwitch);
 80005bc:	2102      	movs	r1, #2
 80005be:	4838      	ldr	r0, [pc, #224]	@ (80006a0 <main+0x130>)
 80005c0:	f002 fc60 	bl	8002e84 <HAL_GPIO_ReadPin>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	bf0c      	ite	eq
 80005ca:	2301      	moveq	r3, #1
 80005cc:	2300      	movne	r3, #0
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	461a      	mov	r2, r3
 80005d2:	4b34      	ldr	r3, [pc, #208]	@ (80006a4 <main+0x134>)
 80005d4:	701a      	strb	r2, [r3, #0]
	  i_chargeContactor 	= !HAL_GPIO_ReadPin(chargeContactorPort, chargeContactor);
 80005d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005da:	482e      	ldr	r0, [pc, #184]	@ (8000694 <main+0x124>)
 80005dc:	f002 fc52 	bl	8002e84 <HAL_GPIO_ReadPin>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	bf0c      	ite	eq
 80005e6:	2301      	moveq	r3, #1
 80005e8:	2300      	movne	r3, #0
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	461a      	mov	r2, r3
 80005ee:	4b2e      	ldr	r3, [pc, #184]	@ (80006a8 <main+0x138>)
 80005f0:	701a      	strb	r2, [r3, #0]
	  i_chargeEnable 		= !HAL_GPIO_ReadPin(chargeEnablePort, chargeEnable);
 80005f2:	2108      	movs	r1, #8
 80005f4:	4827      	ldr	r0, [pc, #156]	@ (8000694 <main+0x124>)
 80005f6:	f002 fc45 	bl	8002e84 <HAL_GPIO_ReadPin>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	bf0c      	ite	eq
 8000600:	2301      	moveq	r3, #1
 8000602:	2300      	movne	r3, #0
 8000604:	b2db      	uxtb	r3, r3
 8000606:	461a      	mov	r2, r3
 8000608:	4b28      	ldr	r3, [pc, #160]	@ (80006ac <main+0x13c>)
 800060a:	701a      	strb	r2, [r3, #0]
	  i_disChargeEnable 	= !HAL_GPIO_ReadPin(disChargeEnablePort, disChargeEnable);
 800060c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000610:	4820      	ldr	r0, [pc, #128]	@ (8000694 <main+0x124>)
 8000612:	f002 fc37 	bl	8002e84 <HAL_GPIO_ReadPin>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	bf0c      	ite	eq
 800061c:	2301      	moveq	r3, #1
 800061e:	2300      	movne	r3, #0
 8000620:	b2db      	uxtb	r3, r3
 8000622:	461a      	mov	r2, r3
 8000624:	4b22      	ldr	r3, [pc, #136]	@ (80006b0 <main+0x140>)
 8000626:	701a      	strb	r2, [r3, #0]
	  i_brakeSwitchInput 	= HAL_GPIO_ReadPin(brakeSwitchInputPort, brakeSwitchInput);
 8000628:	2104      	movs	r1, #4
 800062a:	481d      	ldr	r0, [pc, #116]	@ (80006a0 <main+0x130>)
 800062c:	f002 fc2a 	bl	8002e84 <HAL_GPIO_ReadPin>
 8000630:	4603      	mov	r3, r0
 8000632:	461a      	mov	r2, r3
 8000634:	4b1f      	ldr	r3, [pc, #124]	@ (80006b4 <main+0x144>)
 8000636:	701a      	strb	r2, [r3, #0]


	switch(currentState) {
 8000638:	4b1f      	ldr	r3, [pc, #124]	@ (80006b8 <main+0x148>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b06      	cmp	r3, #6
 800063e:	d826      	bhi.n	800068e <main+0x11e>
 8000640:	a201      	add	r2, pc, #4	@ (adr r2, 8000648 <main+0xd8>)
 8000642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000646:	bf00      	nop
 8000648:	08000665 	.word	0x08000665
 800064c:	0800066b 	.word	0x0800066b
 8000650:	08000671 	.word	0x08000671
 8000654:	08000677 	.word	0x08000677
 8000658:	0800067d 	.word	0x0800067d
 800065c:	08000683 	.word	0x08000683
 8000660:	08000689 	.word	0x08000689
			case OFF:
				off_state();
 8000664:	f000 f82a 	bl	80006bc <off_state>
				break;
 8000668:	e011      	b.n	800068e <main+0x11e>
			case ACC:
				acc_state();
 800066a:	f000 f8a5 	bl	80007b8 <acc_state>
				break;
 800066e:	e00e      	b.n	800068e <main+0x11e>
			case IGN:
				ign_state();
 8000670:	f000 f91c 	bl	80008ac <ign_state>
				break;
 8000674:	e00b      	b.n	800068e <main+0x11e>
			case DCDC:
				dcdc_state();
 8000676:	f000 f9ad 	bl	80009d4 <dcdc_state>
				break;
 800067a:	e008      	b.n	800068e <main+0x11e>
			case ON:
				on_state();
 800067c:	f000 fa36 	bl	8000aec <on_state>
				break;
 8000680:	e005      	b.n	800068e <main+0x11e>
			case CHARGE:
				charge_state();
 8000682:	f000 faa7 	bl	8000bd4 <charge_state>
				break;
 8000686:	e002      	b.n	800068e <main+0x11e>
			case FAULT:
				fault_state();
 8000688:	f000 fb38 	bl	8000cfc <fault_state>
				break;
 800068c:	bf00      	nop
		}

	if (1)
	{
		debugMonitor();
 800068e:	f000 fba1 	bl	8000dd4 <debugMonitor>
	  i_keyIGN 				= HAL_GPIO_ReadPin(keyIGNPort, keyIGN);
 8000692:	e781      	b.n	8000598 <main+0x28>
 8000694:	40021000 	.word	0x40021000
 8000698:	2000028d 	.word	0x2000028d
 800069c:	2000028e 	.word	0x2000028e
 80006a0:	40020c00 	.word	0x40020c00
 80006a4:	2000028f 	.word	0x2000028f
 80006a8:	20000290 	.word	0x20000290
 80006ac:	20000291 	.word	0x20000291
 80006b0:	20000292 	.word	0x20000292
 80006b4:	20000293 	.word	0x20000293
 80006b8:	2000027c 	.word	0x2000027c

080006bc <off_state>:
}

//add brake lights

//Initial setting of bits
void off_state(void){		// State 0
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
	currentTime = HAL_GetTick();
 80006c0:	f001 fab8 	bl	8001c34 <HAL_GetTick>
 80006c4:	4603      	mov	r3, r0
 80006c6:	4a2b      	ldr	r2, [pc, #172]	@ (8000774 <off_state+0xb8>)
 80006c8:	6013      	str	r3, [r2, #0]
	lastState = ON;
 80006ca:	4b2b      	ldr	r3, [pc, #172]	@ (8000778 <off_state+0xbc>)
 80006cc:	2204      	movs	r2, #4
 80006ce:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(preChargeRelayPort,preChargeRelay,GPIO_PIN_RESET);
 80006d0:	2200      	movs	r2, #0
 80006d2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006d6:	4829      	ldr	r0, [pc, #164]	@ (800077c <off_state+0xc0>)
 80006d8:	f002 fbec 	bl	8002eb4 <HAL_GPIO_WritePin>
	o_preChargeRelay = GPIO_PIN_RESET;
 80006dc:	4b28      	ldr	r3, [pc, #160]	@ (8000780 <off_state+0xc4>)
 80006de:	2200      	movs	r2, #0
 80006e0:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(hvContactorPort,hvContactor,GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006e8:	4824      	ldr	r0, [pc, #144]	@ (800077c <off_state+0xc0>)
 80006ea:	f002 fbe3 	bl	8002eb4 <HAL_GPIO_WritePin>
	o_hvContactor = GPIO_PIN_RESET;
 80006ee:	4b25      	ldr	r3, [pc, #148]	@ (8000784 <off_state+0xc8>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(auxDCDCDisablePort,auxDCDCDisable,GPIO_PIN_RESET);
 80006f4:	2200      	movs	r2, #0
 80006f6:	2180      	movs	r1, #128	@ 0x80
 80006f8:	4820      	ldr	r0, [pc, #128]	@ (800077c <off_state+0xc0>)
 80006fa:	f002 fbdb 	bl	8002eb4 <HAL_GPIO_WritePin>
	o_auxDCDCDisable = GPIO_PIN_RESET;
 80006fe:	4b22      	ldr	r3, [pc, #136]	@ (8000788 <off_state+0xcc>)
 8000700:	2200      	movs	r2, #0
 8000702:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(hvDCDCEnablePort,hvDCDCEnable,GPIO_PIN_RESET);
 8000704:	2200      	movs	r2, #0
 8000706:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800070a:	481c      	ldr	r0, [pc, #112]	@ (800077c <off_state+0xc0>)
 800070c:	f002 fbd2 	bl	8002eb4 <HAL_GPIO_WritePin>
	o_hvDCDCEnable = GPIO_PIN_RESET;
 8000710:	4b1e      	ldr	r3, [pc, #120]	@ (800078c <off_state+0xd0>)
 8000712:	2200      	movs	r2, #0
 8000714:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(chargeIndicatorPort,chargeIndicator,RESET);
 8000716:	2200      	movs	r2, #0
 8000718:	2110      	movs	r1, #16
 800071a:	481d      	ldr	r0, [pc, #116]	@ (8000790 <off_state+0xd4>)
 800071c:	f002 fbca 	bl	8002eb4 <HAL_GPIO_WritePin>
	o_chargeIndicator = GPIO_PIN_RESET;
 8000720:	4b1c      	ldr	r3, [pc, #112]	@ (8000794 <off_state+0xd8>)
 8000722:	2200      	movs	r2, #0
 8000724:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(faultIndicatorPort,faultIndicator,RESET);
 8000726:	2200      	movs	r2, #0
 8000728:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800072c:	481a      	ldr	r0, [pc, #104]	@ (8000798 <off_state+0xdc>)
 800072e:	f002 fbc1 	bl	8002eb4 <HAL_GPIO_WritePin>
	o_faultIndicator = GPIO_PIN_RESET;
 8000732:	4b1a      	ldr	r3, [pc, #104]	@ (800079c <off_state+0xe0>)
 8000734:	2200      	movs	r2, #0
 8000736:	701a      	strb	r2, [r3, #0]

	updateAuxADC();
 8000738:	f000 fc52 	bl	8000fe0 <updateAuxADC>
	//Changes States
	if ((i_keyACC != 0 ) && (i_chargeEnable != 0) && (i_disChargeEnable != 0) && (i_killSwitch != 1) && (ai_auxVoltage > UNDERVOLTAGE)){
 800073c:	4b18      	ldr	r3, [pc, #96]	@ (80007a0 <off_state+0xe4>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d015      	beq.n	8000770 <off_state+0xb4>
 8000744:	4b17      	ldr	r3, [pc, #92]	@ (80007a4 <off_state+0xe8>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d011      	beq.n	8000770 <off_state+0xb4>
 800074c:	4b16      	ldr	r3, [pc, #88]	@ (80007a8 <off_state+0xec>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d00d      	beq.n	8000770 <off_state+0xb4>
 8000754:	4b15      	ldr	r3, [pc, #84]	@ (80007ac <off_state+0xf0>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	2b01      	cmp	r3, #1
 800075a:	d009      	beq.n	8000770 <off_state+0xb4>
 800075c:	4b14      	ldr	r3, [pc, #80]	@ (80007b0 <off_state+0xf4>)
 800075e:	881b      	ldrh	r3, [r3, #0]
 8000760:	461a      	mov	r2, r3
 8000762:	f640 438a 	movw	r3, #3210	@ 0xc8a
 8000766:	429a      	cmp	r2, r3
 8000768:	dd02      	ble.n	8000770 <off_state+0xb4>
		currentState = ACC;
 800076a:	4b12      	ldr	r3, [pc, #72]	@ (80007b4 <off_state+0xf8>)
 800076c:	2201      	movs	r2, #1
 800076e:	701a      	strb	r2, [r3, #0]
	}
}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000284 	.word	0x20000284
 8000778:	2000027d 	.word	0x2000027d
 800077c:	40021000 	.word	0x40021000
 8000780:	20000299 	.word	0x20000299
 8000784:	20000298 	.word	0x20000298
 8000788:	20000295 	.word	0x20000295
 800078c:	20000294 	.word	0x20000294
 8000790:	40020c00 	.word	0x40020c00
 8000794:	20000296 	.word	0x20000296
 8000798:	40020800 	.word	0x40020800
 800079c:	20000297 	.word	0x20000297
 80007a0:	2000028e 	.word	0x2000028e
 80007a4:	20000291 	.word	0x20000291
 80007a8:	20000292 	.word	0x20000292
 80007ac:	2000028f 	.word	0x2000028f
 80007b0:	2000029e 	.word	0x2000029e
 80007b4:	2000027c 	.word	0x2000027c

080007b8 <acc_state>:


void acc_state(void){		// State 1
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
	if( lastState != ACC)
 80007bc:	4b2d      	ldr	r3, [pc, #180]	@ (8000874 <acc_state+0xbc>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d027      	beq.n	8000814 <acc_state+0x5c>
	{
		enterStateTime = HAL_GetTick();
 80007c4:	f001 fa36 	bl	8001c34 <HAL_GetTick>
 80007c8:	4603      	mov	r3, r0
 80007ca:	4a2b      	ldr	r2, [pc, #172]	@ (8000878 <acc_state+0xc0>)
 80007cc:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(preChargeRelayPort,preChargeRelay,GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007d4:	4829      	ldr	r0, [pc, #164]	@ (800087c <acc_state+0xc4>)
 80007d6:	f002 fb6d 	bl	8002eb4 <HAL_GPIO_WritePin>
		o_preChargeRelay = GPIO_PIN_RESET;
 80007da:	4b29      	ldr	r3, [pc, #164]	@ (8000880 <acc_state+0xc8>)
 80007dc:	2200      	movs	r2, #0
 80007de:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(hvContactorPort,hvContactor,GPIO_PIN_RESET);
 80007e0:	2200      	movs	r2, #0
 80007e2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007e6:	4825      	ldr	r0, [pc, #148]	@ (800087c <acc_state+0xc4>)
 80007e8:	f002 fb64 	bl	8002eb4 <HAL_GPIO_WritePin>
		o_hvContactor = GPIO_PIN_RESET;
 80007ec:	4b25      	ldr	r3, [pc, #148]	@ (8000884 <acc_state+0xcc>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(auxDCDCDisablePort,auxDCDCDisable,GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2180      	movs	r1, #128	@ 0x80
 80007f6:	4821      	ldr	r0, [pc, #132]	@ (800087c <acc_state+0xc4>)
 80007f8:	f002 fb5c 	bl	8002eb4 <HAL_GPIO_WritePin>
		o_auxDCDCDisable = GPIO_PIN_RESET;
 80007fc:	4b22      	ldr	r3, [pc, #136]	@ (8000888 <acc_state+0xd0>)
 80007fe:	2200      	movs	r2, #0
 8000800:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(hvDCDCEnablePort,hvDCDCEnable,GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000808:	481c      	ldr	r0, [pc, #112]	@ (800087c <acc_state+0xc4>)
 800080a:	f002 fb53 	bl	8002eb4 <HAL_GPIO_WritePin>
		o_hvDCDCEnable = GPIO_PIN_RESET;
 800080e:	4b1f      	ldr	r3, [pc, #124]	@ (800088c <acc_state+0xd4>)
 8000810:	2200      	movs	r2, #0
 8000812:	701a      	strb	r2, [r3, #0]
	}
	lastState = ACC;
 8000814:	4b17      	ldr	r3, [pc, #92]	@ (8000874 <acc_state+0xbc>)
 8000816:	2201      	movs	r2, #1
 8000818:	701a      	strb	r2, [r3, #0]

	currentTime = HAL_GetTick();
 800081a:	f001 fa0b 	bl	8001c34 <HAL_GetTick>
 800081e:	4603      	mov	r3, r0
 8000820:	4a1b      	ldr	r2, [pc, #108]	@ (8000890 <acc_state+0xd8>)
 8000822:	6013      	str	r3, [r2, #0]
	// goes back to off if any one bit is wrong
	if((i_keyACC != 1) || (i_chargeEnable != 1) || (i_disChargeEnable != 1) || (i_killSwitch != 0))
 8000824:	4b1b      	ldr	r3, [pc, #108]	@ (8000894 <acc_state+0xdc>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2b01      	cmp	r3, #1
 800082a:	d10b      	bne.n	8000844 <acc_state+0x8c>
 800082c:	4b1a      	ldr	r3, [pc, #104]	@ (8000898 <acc_state+0xe0>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	2b01      	cmp	r3, #1
 8000832:	d107      	bne.n	8000844 <acc_state+0x8c>
 8000834:	4b19      	ldr	r3, [pc, #100]	@ (800089c <acc_state+0xe4>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	2b01      	cmp	r3, #1
 800083a:	d103      	bne.n	8000844 <acc_state+0x8c>
 800083c:	4b18      	ldr	r3, [pc, #96]	@ (80008a0 <acc_state+0xe8>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d002      	beq.n	800084a <acc_state+0x92>
		currentState = OFF; 			// No fault occurs
 8000844:	4b17      	ldr	r3, [pc, #92]	@ (80008a4 <acc_state+0xec>)
 8000846:	2200      	movs	r2, #0
 8000848:	701a      	strb	r2, [r3, #0]

	//Changes States
	if ((i_keyIGN != 0) && (i_disChargeEnable != 0) && (i_keyACC != 0) && (i_chargeEnable != 0))
 800084a:	4b17      	ldr	r3, [pc, #92]	@ (80008a8 <acc_state+0xf0>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d00e      	beq.n	8000870 <acc_state+0xb8>
 8000852:	4b12      	ldr	r3, [pc, #72]	@ (800089c <acc_state+0xe4>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d00a      	beq.n	8000870 <acc_state+0xb8>
 800085a:	4b0e      	ldr	r3, [pc, #56]	@ (8000894 <acc_state+0xdc>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d006      	beq.n	8000870 <acc_state+0xb8>
 8000862:	4b0d      	ldr	r3, [pc, #52]	@ (8000898 <acc_state+0xe0>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d002      	beq.n	8000870 <acc_state+0xb8>
	{
		currentState = IGN;
 800086a:	4b0e      	ldr	r3, [pc, #56]	@ (80008a4 <acc_state+0xec>)
 800086c:	2202      	movs	r2, #2
 800086e:	701a      	strb	r2, [r3, #0]
	}


}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}
 8000874:	2000027d 	.word	0x2000027d
 8000878:	20000280 	.word	0x20000280
 800087c:	40021000 	.word	0x40021000
 8000880:	20000299 	.word	0x20000299
 8000884:	20000298 	.word	0x20000298
 8000888:	20000295 	.word	0x20000295
 800088c:	20000294 	.word	0x20000294
 8000890:	20000284 	.word	0x20000284
 8000894:	2000028e 	.word	0x2000028e
 8000898:	20000291 	.word	0x20000291
 800089c:	20000292 	.word	0x20000292
 80008a0:	2000028f 	.word	0x2000028f
 80008a4:	2000027c 	.word	0x2000027c
 80008a8:	2000028d 	.word	0x2000028d

080008ac <ign_state>:


void ign_state(void){		// State 2
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0

	if( lastState == ACC )
 80008b0:	4b3a      	ldr	r3, [pc, #232]	@ (800099c <ign_state+0xf0>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d112      	bne.n	80008de <ign_state+0x32>
	{
		enterStateTime = HAL_GetTick();
 80008b8:	f001 f9bc 	bl	8001c34 <HAL_GetTick>
 80008bc:	4603      	mov	r3, r0
 80008be:	4a38      	ldr	r2, [pc, #224]	@ (80009a0 <ign_state+0xf4>)
 80008c0:	6013      	str	r3, [r2, #0]

		HAL_GPIO_WritePin(preChargeRelayPort, preChargeRelay, GPIO_PIN_SET);
 80008c2:	2201      	movs	r2, #1
 80008c4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80008c8:	4836      	ldr	r0, [pc, #216]	@ (80009a4 <ign_state+0xf8>)
 80008ca:	f002 faf3 	bl	8002eb4 <HAL_GPIO_WritePin>
		o_preChargeRelay = GPIO_PIN_SET;
 80008ce:	4b36      	ldr	r3, [pc, #216]	@ (80009a8 <ign_state+0xfc>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(spareOutput3Port, spareOutput3, GPIO_PIN_SET); //why does this exist? test point?
 80008d4:	2201      	movs	r2, #1
 80008d6:	2140      	movs	r1, #64	@ 0x40
 80008d8:	4834      	ldr	r0, [pc, #208]	@ (80009ac <ign_state+0x100>)
 80008da:	f002 faeb 	bl	8002eb4 <HAL_GPIO_WritePin>


	}
	lastState = IGN;
 80008de:	4b2f      	ldr	r3, [pc, #188]	@ (800099c <ign_state+0xf0>)
 80008e0:	2202      	movs	r2, #2
 80008e2:	701a      	strb	r2, [r3, #0]
	currentTime = HAL_GetTick();
 80008e4:	f001 f9a6 	bl	8001c34 <HAL_GetTick>
 80008e8:	4603      	mov	r3, r0
 80008ea:	4a31      	ldr	r2, [pc, #196]	@ (80009b0 <ign_state+0x104>)
 80008ec:	6013      	str	r3, [r2, #0]

	// Key was not held long enough
	if (i_keyIGN != 1)
 80008ee:	4b31      	ldr	r3, [pc, #196]	@ (80009b4 <ign_state+0x108>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d003      	beq.n	80008fe <ign_state+0x52>
	{
		currentState = ACC;
 80008f6:	4b30      	ldr	r3, [pc, #192]	@ (80009b8 <ign_state+0x10c>)
 80008f8:	2201      	movs	r2, #1
 80008fa:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(hvContactorPort, hvContactor, GPIO_PIN_SET);
		o_hvContactor = GPIO_PIN_SET;

		currentState = DCDC;
	}
}
 80008fc:	e04b      	b.n	8000996 <ign_state+0xea>
	else if ((i_keyACC != 1) || (i_disChargeEnable != 1) || (i_chargeEnable != 1) || (i_killSwitch != 0))
 80008fe:	4b2f      	ldr	r3, [pc, #188]	@ (80009bc <ign_state+0x110>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2b01      	cmp	r3, #1
 8000904:	d10b      	bne.n	800091e <ign_state+0x72>
 8000906:	4b2e      	ldr	r3, [pc, #184]	@ (80009c0 <ign_state+0x114>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b01      	cmp	r3, #1
 800090c:	d107      	bne.n	800091e <ign_state+0x72>
 800090e:	4b2d      	ldr	r3, [pc, #180]	@ (80009c4 <ign_state+0x118>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	2b01      	cmp	r3, #1
 8000914:	d103      	bne.n	800091e <ign_state+0x72>
 8000916:	4b2c      	ldr	r3, [pc, #176]	@ (80009c8 <ign_state+0x11c>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d026      	beq.n	800096c <ign_state+0xc0>
		currentState = FAULT;
 800091e:	4b26      	ldr	r3, [pc, #152]	@ (80009b8 <ign_state+0x10c>)
 8000920:	2206      	movs	r2, #6
 8000922:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000924:	4b25      	ldr	r3, [pc, #148]	@ (80009bc <ign_state+0x110>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2b01      	cmp	r3, #1
 800092a:	d003      	beq.n	8000934 <ign_state+0x88>
			faultCode = 21;
 800092c:	4b27      	ldr	r3, [pc, #156]	@ (80009cc <ign_state+0x120>)
 800092e:	2215      	movs	r2, #21
 8000930:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000932:	e030      	b.n	8000996 <ign_state+0xea>
		else if (i_disChargeEnable != 1)
 8000934:	4b22      	ldr	r3, [pc, #136]	@ (80009c0 <ign_state+0x114>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b01      	cmp	r3, #1
 800093a:	d003      	beq.n	8000944 <ign_state+0x98>
			faultCode = 22;
 800093c:	4b23      	ldr	r3, [pc, #140]	@ (80009cc <ign_state+0x120>)
 800093e:	2216      	movs	r2, #22
 8000940:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000942:	e028      	b.n	8000996 <ign_state+0xea>
		else if (i_chargeEnable != 1)
 8000944:	4b1f      	ldr	r3, [pc, #124]	@ (80009c4 <ign_state+0x118>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b01      	cmp	r3, #1
 800094a:	d003      	beq.n	8000954 <ign_state+0xa8>
			faultCode = 23;
 800094c:	4b1f      	ldr	r3, [pc, #124]	@ (80009cc <ign_state+0x120>)
 800094e:	2217      	movs	r2, #23
 8000950:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000952:	e020      	b.n	8000996 <ign_state+0xea>
		else if (i_killSwitch != 0)
 8000954:	4b1c      	ldr	r3, [pc, #112]	@ (80009c8 <ign_state+0x11c>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d003      	beq.n	8000964 <ign_state+0xb8>
			faultCode = 24;
 800095c:	4b1b      	ldr	r3, [pc, #108]	@ (80009cc <ign_state+0x120>)
 800095e:	2218      	movs	r2, #24
 8000960:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000962:	e018      	b.n	8000996 <ign_state+0xea>
			faultCode = 29;
 8000964:	4b19      	ldr	r3, [pc, #100]	@ (80009cc <ign_state+0x120>)
 8000966:	221d      	movs	r2, #29
 8000968:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 800096a:	e014      	b.n	8000996 <ign_state+0xea>
	else if(currentTime - enterStateTime >= 4000)
 800096c:	4b10      	ldr	r3, [pc, #64]	@ (80009b0 <ign_state+0x104>)
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	4b0b      	ldr	r3, [pc, #44]	@ (80009a0 <ign_state+0xf4>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 800097a:	d30c      	bcc.n	8000996 <ign_state+0xea>
		HAL_GPIO_WritePin(hvContactorPort, hvContactor, GPIO_PIN_SET);
 800097c:	2201      	movs	r2, #1
 800097e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000982:	4808      	ldr	r0, [pc, #32]	@ (80009a4 <ign_state+0xf8>)
 8000984:	f002 fa96 	bl	8002eb4 <HAL_GPIO_WritePin>
		o_hvContactor = GPIO_PIN_SET;
 8000988:	4b11      	ldr	r3, [pc, #68]	@ (80009d0 <ign_state+0x124>)
 800098a:	2201      	movs	r2, #1
 800098c:	701a      	strb	r2, [r3, #0]
		currentState = DCDC;
 800098e:	4b0a      	ldr	r3, [pc, #40]	@ (80009b8 <ign_state+0x10c>)
 8000990:	2203      	movs	r2, #3
 8000992:	701a      	strb	r2, [r3, #0]
}
 8000994:	e7ff      	b.n	8000996 <ign_state+0xea>
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	2000027d 	.word	0x2000027d
 80009a0:	20000280 	.word	0x20000280
 80009a4:	40021000 	.word	0x40021000
 80009a8:	20000299 	.word	0x20000299
 80009ac:	40020c00 	.word	0x40020c00
 80009b0:	20000284 	.word	0x20000284
 80009b4:	2000028d 	.word	0x2000028d
 80009b8:	2000027c 	.word	0x2000027c
 80009bc:	2000028e 	.word	0x2000028e
 80009c0:	20000292 	.word	0x20000292
 80009c4:	20000291 	.word	0x20000291
 80009c8:	2000028f 	.word	0x2000028f
 80009cc:	2000028c 	.word	0x2000028c
 80009d0:	20000298 	.word	0x20000298

080009d4 <dcdc_state>:


//Short state for the transition between the two DCDC's
void dcdc_state(void){		// State 3
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0


	if ( lastState == IGN )
 80009d8:	4b37      	ldr	r3, [pc, #220]	@ (8000ab8 <dcdc_state+0xe4>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	2b02      	cmp	r3, #2
 80009de:	d116      	bne.n	8000a0e <dcdc_state+0x3a>
	{
		enterStateTime = HAL_GetTick();
 80009e0:	f001 f928 	bl	8001c34 <HAL_GetTick>
 80009e4:	4603      	mov	r3, r0
 80009e6:	4a35      	ldr	r2, [pc, #212]	@ (8000abc <dcdc_state+0xe8>)
 80009e8:	6013      	str	r3, [r2, #0]

		HAL_GPIO_WritePin(hvDCDCEnablePort,hvDCDCEnable, GPIO_PIN_SET);
 80009ea:	2201      	movs	r2, #1
 80009ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009f0:	4833      	ldr	r0, [pc, #204]	@ (8000ac0 <dcdc_state+0xec>)
 80009f2:	f002 fa5f 	bl	8002eb4 <HAL_GPIO_WritePin>
		o_hvDCDCEnable = GPIO_PIN_SET;
 80009f6:	4b33      	ldr	r3, [pc, #204]	@ (8000ac4 <dcdc_state+0xf0>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(preChargeRelayPort,preChargeRelay, GPIO_PIN_RESET);
 80009fc:	2200      	movs	r2, #0
 80009fe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a02:	482f      	ldr	r0, [pc, #188]	@ (8000ac0 <dcdc_state+0xec>)
 8000a04:	f002 fa56 	bl	8002eb4 <HAL_GPIO_WritePin>
		o_preChargeRelay = GPIO_PIN_RESET;
 8000a08:	4b2f      	ldr	r3, [pc, #188]	@ (8000ac8 <dcdc_state+0xf4>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	701a      	strb	r2, [r3, #0]
	}

	lastState = DCDC;
 8000a0e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ab8 <dcdc_state+0xe4>)
 8000a10:	2203      	movs	r2, #3
 8000a12:	701a      	strb	r2, [r3, #0]

	currentTime = HAL_GetTick();
 8000a14:	f001 f90e 	bl	8001c34 <HAL_GetTick>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	4a2c      	ldr	r2, [pc, #176]	@ (8000acc <dcdc_state+0xf8>)
 8000a1c:	6013      	str	r3, [r2, #0]
	// Check if any signal is missing --> FAULT State
	if ((i_keyACC != 1) || (i_disChargeEnable != 1) || (i_chargeEnable != 1) || (i_killSwitch != 0))
 8000a1e:	4b2c      	ldr	r3, [pc, #176]	@ (8000ad0 <dcdc_state+0xfc>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d10b      	bne.n	8000a3e <dcdc_state+0x6a>
 8000a26:	4b2b      	ldr	r3, [pc, #172]	@ (8000ad4 <dcdc_state+0x100>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d107      	bne.n	8000a3e <dcdc_state+0x6a>
 8000a2e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ad8 <dcdc_state+0x104>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d103      	bne.n	8000a3e <dcdc_state+0x6a>
 8000a36:	4b29      	ldr	r3, [pc, #164]	@ (8000adc <dcdc_state+0x108>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d026      	beq.n	8000a8c <dcdc_state+0xb8>
	{
		currentState = FAULT;
 8000a3e:	4b28      	ldr	r3, [pc, #160]	@ (8000ae0 <dcdc_state+0x10c>)
 8000a40:	2206      	movs	r2, #6
 8000a42:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000a44:	4b22      	ldr	r3, [pc, #136]	@ (8000ad0 <dcdc_state+0xfc>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d003      	beq.n	8000a54 <dcdc_state+0x80>
		{
			faultCode = 31;
 8000a4c:	4b25      	ldr	r3, [pc, #148]	@ (8000ae4 <dcdc_state+0x110>)
 8000a4e:	221f      	movs	r2, #31
 8000a50:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000a52:	e02f      	b.n	8000ab4 <dcdc_state+0xe0>
		}
		else if (i_disChargeEnable != 1)
 8000a54:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad4 <dcdc_state+0x100>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d003      	beq.n	8000a64 <dcdc_state+0x90>
		{
			faultCode = 32;
 8000a5c:	4b21      	ldr	r3, [pc, #132]	@ (8000ae4 <dcdc_state+0x110>)
 8000a5e:	2220      	movs	r2, #32
 8000a60:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000a62:	e027      	b.n	8000ab4 <dcdc_state+0xe0>
		}
		else if (i_chargeEnable != 1)
 8000a64:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad8 <dcdc_state+0x104>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d003      	beq.n	8000a74 <dcdc_state+0xa0>
		{
			faultCode = 33;
 8000a6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ae4 <dcdc_state+0x110>)
 8000a6e:	2221      	movs	r2, #33	@ 0x21
 8000a70:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000a72:	e01f      	b.n	8000ab4 <dcdc_state+0xe0>
		}
		else if (i_killSwitch != 0)
 8000a74:	4b19      	ldr	r3, [pc, #100]	@ (8000adc <dcdc_state+0x108>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d003      	beq.n	8000a84 <dcdc_state+0xb0>
		{
			faultCode = 34;
 8000a7c:	4b19      	ldr	r3, [pc, #100]	@ (8000ae4 <dcdc_state+0x110>)
 8000a7e:	2222      	movs	r2, #34	@ 0x22
 8000a80:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000a82:	e017      	b.n	8000ab4 <dcdc_state+0xe0>
		}
		else
		{
			faultCode = 39;
 8000a84:	4b17      	ldr	r3, [pc, #92]	@ (8000ae4 <dcdc_state+0x110>)
 8000a86:	2227      	movs	r2, #39	@ 0x27
 8000a88:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000a8a:	e013      	b.n	8000ab4 <dcdc_state+0xe0>
		}
	}
	// Switch off the AUX-DCDC after 1000 ms(1sec)
	else if (currentTime - enterStateTime >= 1000)
 8000a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000acc <dcdc_state+0xf8>)
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	4b0a      	ldr	r3, [pc, #40]	@ (8000abc <dcdc_state+0xe8>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	1ad3      	subs	r3, r2, r3
 8000a96:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000a9a:	d30b      	bcc.n	8000ab4 <dcdc_state+0xe0>
	{
		HAL_GPIO_WritePin(auxDCDCDisablePort,auxDCDCDisable, GPIO_PIN_SET);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	2180      	movs	r1, #128	@ 0x80
 8000aa0:	4807      	ldr	r0, [pc, #28]	@ (8000ac0 <dcdc_state+0xec>)
 8000aa2:	f002 fa07 	bl	8002eb4 <HAL_GPIO_WritePin>
		o_auxDCDCDisable = GPIO_PIN_SET;
 8000aa6:	4b10      	ldr	r3, [pc, #64]	@ (8000ae8 <dcdc_state+0x114>)
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	701a      	strb	r2, [r3, #0]
		currentState = ON;
 8000aac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae0 <dcdc_state+0x10c>)
 8000aae:	2204      	movs	r2, #4
 8000ab0:	701a      	strb	r2, [r3, #0]
	}
}
 8000ab2:	e7ff      	b.n	8000ab4 <dcdc_state+0xe0>
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	2000027d 	.word	0x2000027d
 8000abc:	20000280 	.word	0x20000280
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	20000294 	.word	0x20000294
 8000ac8:	20000299 	.word	0x20000299
 8000acc:	20000284 	.word	0x20000284
 8000ad0:	2000028e 	.word	0x2000028e
 8000ad4:	20000292 	.word	0x20000292
 8000ad8:	20000291 	.word	0x20000291
 8000adc:	2000028f 	.word	0x2000028f
 8000ae0:	2000027c 	.word	0x2000027c
 8000ae4:	2000028c 	.word	0x2000028c
 8000ae8:	20000295 	.word	0x20000295

08000aec <on_state>:


void on_state(void){		// State 4 = DRIVING
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0


	if ( lastState == DCDC )
 8000af0:	4b2e      	ldr	r3, [pc, #184]	@ (8000bac <on_state+0xc0>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b03      	cmp	r3, #3
 8000af6:	d104      	bne.n	8000b02 <on_state+0x16>
	{
		enterStateTime = HAL_GetTick();
 8000af8:	f001 f89c 	bl	8001c34 <HAL_GetTick>
 8000afc:	4603      	mov	r3, r0
 8000afe:	4a2c      	ldr	r2, [pc, #176]	@ (8000bb0 <on_state+0xc4>)
 8000b00:	6013      	str	r3, [r2, #0]
	}
	lastState = ON;
 8000b02:	4b2a      	ldr	r3, [pc, #168]	@ (8000bac <on_state+0xc0>)
 8000b04:	2204      	movs	r2, #4
 8000b06:	701a      	strb	r2, [r3, #0]

	currentTime = HAL_GetTick();
 8000b08:	f001 f894 	bl	8001c34 <HAL_GetTick>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	4a29      	ldr	r2, [pc, #164]	@ (8000bb4 <on_state+0xc8>)
 8000b10:	6013      	str	r3, [r2, #0]


	// SETS THE OUTPUTS!!!
	// Throttle pedal output function

	updatePedal();
 8000b12:	f000 f9f5 	bl	8000f00 <updatePedal>

	updateRegen();
 8000b16:	f000 fa3b 	bl	8000f90 <updateRegen>



	// Check if any signal is missing --> FAULT State
	if ((i_keyACC != 1) || (i_chargeEnable != 1) || (i_disChargeEnable != 1 && i_chargeContactor != 1) || (i_killSwitch != 0))
 8000b1a:	4b27      	ldr	r3, [pc, #156]	@ (8000bb8 <on_state+0xcc>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d10f      	bne.n	8000b42 <on_state+0x56>
 8000b22:	4b26      	ldr	r3, [pc, #152]	@ (8000bbc <on_state+0xd0>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d10b      	bne.n	8000b42 <on_state+0x56>
 8000b2a:	4b25      	ldr	r3, [pc, #148]	@ (8000bc0 <on_state+0xd4>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d003      	beq.n	8000b3a <on_state+0x4e>
 8000b32:	4b24      	ldr	r3, [pc, #144]	@ (8000bc4 <on_state+0xd8>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d103      	bne.n	8000b42 <on_state+0x56>
 8000b3a:	4b23      	ldr	r3, [pc, #140]	@ (8000bc8 <on_state+0xdc>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d026      	beq.n	8000b90 <on_state+0xa4>
	{
		currentState = FAULT;
 8000b42:	4b22      	ldr	r3, [pc, #136]	@ (8000bcc <on_state+0xe0>)
 8000b44:	2206      	movs	r2, #6
 8000b46:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000b48:	4b1b      	ldr	r3, [pc, #108]	@ (8000bb8 <on_state+0xcc>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d003      	beq.n	8000b58 <on_state+0x6c>
		{
			faultCode = 41;
 8000b50:	4b1f      	ldr	r3, [pc, #124]	@ (8000bd0 <on_state+0xe4>)
 8000b52:	2229      	movs	r2, #41	@ 0x29
 8000b54:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000b56:	e027      	b.n	8000ba8 <on_state+0xbc>
		}
		else if (i_disChargeEnable != 1)
 8000b58:	4b19      	ldr	r3, [pc, #100]	@ (8000bc0 <on_state+0xd4>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d003      	beq.n	8000b68 <on_state+0x7c>
		{
			faultCode = 42;
 8000b60:	4b1b      	ldr	r3, [pc, #108]	@ (8000bd0 <on_state+0xe4>)
 8000b62:	222a      	movs	r2, #42	@ 0x2a
 8000b64:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000b66:	e01f      	b.n	8000ba8 <on_state+0xbc>
		}
		else if (i_chargeEnable != 1)
 8000b68:	4b14      	ldr	r3, [pc, #80]	@ (8000bbc <on_state+0xd0>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d003      	beq.n	8000b78 <on_state+0x8c>
		{
			faultCode = 43;
 8000b70:	4b17      	ldr	r3, [pc, #92]	@ (8000bd0 <on_state+0xe4>)
 8000b72:	222b      	movs	r2, #43	@ 0x2b
 8000b74:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000b76:	e017      	b.n	8000ba8 <on_state+0xbc>
		}
		else if (i_killSwitch != 0)
 8000b78:	4b13      	ldr	r3, [pc, #76]	@ (8000bc8 <on_state+0xdc>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d003      	beq.n	8000b88 <on_state+0x9c>
		{
			faultCode = 44;
 8000b80:	4b13      	ldr	r3, [pc, #76]	@ (8000bd0 <on_state+0xe4>)
 8000b82:	222c      	movs	r2, #44	@ 0x2c
 8000b84:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000b86:	e00f      	b.n	8000ba8 <on_state+0xbc>
		}
		else
		{
			faultCode = 49;
 8000b88:	4b11      	ldr	r3, [pc, #68]	@ (8000bd0 <on_state+0xe4>)
 8000b8a:	2231      	movs	r2, #49	@ 0x31
 8000b8c:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000b8e:	e00b      	b.n	8000ba8 <on_state+0xbc>
		}
	}
	//Changes States
	else if ((i_disChargeEnable != 1) && (i_chargeContactor != 0))
 8000b90:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc0 <on_state+0xd4>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d007      	beq.n	8000ba8 <on_state+0xbc>
 8000b98:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc4 <on_state+0xd8>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d003      	beq.n	8000ba8 <on_state+0xbc>
	{
		currentState = CHARGE;
 8000ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8000bcc <on_state+0xe0>)
 8000ba2:	2205      	movs	r2, #5
 8000ba4:	701a      	strb	r2, [r3, #0]
	}
}
 8000ba6:	e7ff      	b.n	8000ba8 <on_state+0xbc>
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	2000027d 	.word	0x2000027d
 8000bb0:	20000280 	.word	0x20000280
 8000bb4:	20000284 	.word	0x20000284
 8000bb8:	2000028e 	.word	0x2000028e
 8000bbc:	20000291 	.word	0x20000291
 8000bc0:	20000292 	.word	0x20000292
 8000bc4:	20000290 	.word	0x20000290
 8000bc8:	2000028f 	.word	0x2000028f
 8000bcc:	2000027c 	.word	0x2000027c
 8000bd0:	2000028c 	.word	0x2000028c

08000bd4 <charge_state>:

void charge_state(void){	// State 5
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0


	// Start charging routine by enabling AUX DCDC
	if (lastState == ON)
 8000bd8:	4b39      	ldr	r3, [pc, #228]	@ (8000cc0 <charge_state+0xec>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b04      	cmp	r3, #4
 8000bde:	d10c      	bne.n	8000bfa <charge_state+0x26>
	{

		HAL_GPIO_WritePin(chargeIndicatorPort, chargeIndicator, GPIO_PIN_SET);			// Charge indicator light
 8000be0:	2201      	movs	r2, #1
 8000be2:	2110      	movs	r1, #16
 8000be4:	4837      	ldr	r0, [pc, #220]	@ (8000cc4 <charge_state+0xf0>)
 8000be6:	f002 f965 	bl	8002eb4 <HAL_GPIO_WritePin>
		o_chargeIndicator = GPIO_PIN_SET;
 8000bea:	4b37      	ldr	r3, [pc, #220]	@ (8000cc8 <charge_state+0xf4>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	701a      	strb	r2, [r3, #0]

		enterStateTime = HAL_GetTick();
 8000bf0:	f001 f820 	bl	8001c34 <HAL_GetTick>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	4a35      	ldr	r2, [pc, #212]	@ (8000ccc <charge_state+0xf8>)
 8000bf8:	6013      	str	r3, [r2, #0]
	}
	lastState = CHARGE;
 8000bfa:	4b31      	ldr	r3, [pc, #196]	@ (8000cc0 <charge_state+0xec>)
 8000bfc:	2205      	movs	r2, #5
 8000bfe:	701a      	strb	r2, [r3, #0]

	currentTime = HAL_GetTick();
 8000c00:	f001 f818 	bl	8001c34 <HAL_GetTick>
 8000c04:	4603      	mov	r3, r0
 8000c06:	4a32      	ldr	r2, [pc, #200]	@ (8000cd0 <charge_state+0xfc>)
 8000c08:	6013      	str	r3, [r2, #0]


	// After 0.5 sec, disconnect contactor and switch hvDCDC off
	if (currentTime - enterStateTime >= 10000)
 8000c0a:	4b31      	ldr	r3, [pc, #196]	@ (8000cd0 <charge_state+0xfc>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	4b2f      	ldr	r3, [pc, #188]	@ (8000ccc <charge_state+0xf8>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	1ad3      	subs	r3, r2, r3
 8000c14:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d911      	bls.n	8000c40 <charge_state+0x6c>
	{
		HAL_GPIO_WritePin(hvContactorPort, hvContactor, GPIO_PIN_RESET);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c22:	482c      	ldr	r0, [pc, #176]	@ (8000cd4 <charge_state+0x100>)
 8000c24:	f002 f946 	bl	8002eb4 <HAL_GPIO_WritePin>
		o_hvContactor = GPIO_PIN_RESET;
 8000c28:	4b2b      	ldr	r3, [pc, #172]	@ (8000cd8 <charge_state+0x104>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(hvDCDCEnablePort, hvDCDCEnable, GPIO_PIN_RESET);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c34:	4827      	ldr	r0, [pc, #156]	@ (8000cd4 <charge_state+0x100>)
 8000c36:	f002 f93d 	bl	8002eb4 <HAL_GPIO_WritePin>
		o_hvDCDCEnable = GPIO_PIN_RESET;
 8000c3a:	4b28      	ldr	r3, [pc, #160]	@ (8000cdc <charge_state+0x108>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	701a      	strb	r2, [r3, #0]
	}



	if((i_keyACC != 1) || (i_chargeEnable != 1) || (i_disChargeEnable != 0)  || (i_killSwitch != 0))
 8000c40:	4b27      	ldr	r3, [pc, #156]	@ (8000ce0 <charge_state+0x10c>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d10b      	bne.n	8000c60 <charge_state+0x8c>
 8000c48:	4b26      	ldr	r3, [pc, #152]	@ (8000ce4 <charge_state+0x110>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d107      	bne.n	8000c60 <charge_state+0x8c>
 8000c50:	4b25      	ldr	r3, [pc, #148]	@ (8000ce8 <charge_state+0x114>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d103      	bne.n	8000c60 <charge_state+0x8c>
 8000c58:	4b24      	ldr	r3, [pc, #144]	@ (8000cec <charge_state+0x118>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d02d      	beq.n	8000cbc <charge_state+0xe8>
	{
		currentState = FAULT;
 8000c60:	4b23      	ldr	r3, [pc, #140]	@ (8000cf0 <charge_state+0x11c>)
 8000c62:	2206      	movs	r2, #6
 8000c64:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000c66:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce0 <charge_state+0x10c>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d003      	beq.n	8000c76 <charge_state+0xa2>
		{
			faultCode = 51;
 8000c6e:	4b21      	ldr	r3, [pc, #132]	@ (8000cf4 <charge_state+0x120>)
 8000c70:	2233      	movs	r2, #51	@ 0x33
 8000c72:	701a      	strb	r2, [r3, #0]
		{
			faultCode = 59;
		}
	}

}
 8000c74:	e022      	b.n	8000cbc <charge_state+0xe8>
		else if (i_disChargeEnable != 0)
 8000c76:	4b1c      	ldr	r3, [pc, #112]	@ (8000ce8 <charge_state+0x114>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d003      	beq.n	8000c86 <charge_state+0xb2>
			faultCode = 52;
 8000c7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf4 <charge_state+0x120>)
 8000c80:	2234      	movs	r2, #52	@ 0x34
 8000c82:	701a      	strb	r2, [r3, #0]
}
 8000c84:	e01a      	b.n	8000cbc <charge_state+0xe8>
		else if (i_chargeEnable != 1)
 8000c86:	4b17      	ldr	r3, [pc, #92]	@ (8000ce4 <charge_state+0x110>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d003      	beq.n	8000c96 <charge_state+0xc2>
			faultCode = 53;
 8000c8e:	4b19      	ldr	r3, [pc, #100]	@ (8000cf4 <charge_state+0x120>)
 8000c90:	2235      	movs	r2, #53	@ 0x35
 8000c92:	701a      	strb	r2, [r3, #0]
}
 8000c94:	e012      	b.n	8000cbc <charge_state+0xe8>
		else if (i_chargeContactor != 1)
 8000c96:	4b18      	ldr	r3, [pc, #96]	@ (8000cf8 <charge_state+0x124>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d003      	beq.n	8000ca6 <charge_state+0xd2>
			faultCode = 54;
 8000c9e:	4b15      	ldr	r3, [pc, #84]	@ (8000cf4 <charge_state+0x120>)
 8000ca0:	2236      	movs	r2, #54	@ 0x36
 8000ca2:	701a      	strb	r2, [r3, #0]
}
 8000ca4:	e00a      	b.n	8000cbc <charge_state+0xe8>
		else if (i_killSwitch != 0)
 8000ca6:	4b11      	ldr	r3, [pc, #68]	@ (8000cec <charge_state+0x118>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d003      	beq.n	8000cb6 <charge_state+0xe2>
			faultCode = 55;
 8000cae:	4b11      	ldr	r3, [pc, #68]	@ (8000cf4 <charge_state+0x120>)
 8000cb0:	2237      	movs	r2, #55	@ 0x37
 8000cb2:	701a      	strb	r2, [r3, #0]
}
 8000cb4:	e002      	b.n	8000cbc <charge_state+0xe8>
			faultCode = 59;
 8000cb6:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf4 <charge_state+0x120>)
 8000cb8:	223b      	movs	r2, #59	@ 0x3b
 8000cba:	701a      	strb	r2, [r3, #0]
}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	2000027d 	.word	0x2000027d
 8000cc4:	40020c00 	.word	0x40020c00
 8000cc8:	20000296 	.word	0x20000296
 8000ccc:	20000280 	.word	0x20000280
 8000cd0:	20000284 	.word	0x20000284
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	20000298 	.word	0x20000298
 8000cdc:	20000294 	.word	0x20000294
 8000ce0:	2000028e 	.word	0x2000028e
 8000ce4:	20000291 	.word	0x20000291
 8000ce8:	20000292 	.word	0x20000292
 8000cec:	2000028f 	.word	0x2000028f
 8000cf0:	2000027c 	.word	0x2000027c
 8000cf4:	2000028c 	.word	0x2000028c
 8000cf8:	20000290 	.word	0x20000290

08000cfc <fault_state>:


void fault_state(void) { // State 6
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0

    if (lastState != FAULT) {
 8000d00:	4b28      	ldr	r3, [pc, #160]	@ (8000da4 <fault_state+0xa8>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b06      	cmp	r3, #6
 8000d06:	d029      	beq.n	8000d5c <fault_state+0x60>
        // Set fault indicator GPIO pin
        HAL_GPIO_WritePin(faultIndicatorPort, faultIndicator, GPIO_PIN_SET);
 8000d08:	2201      	movs	r2, #1
 8000d0a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d0e:	4826      	ldr	r0, [pc, #152]	@ (8000da8 <fault_state+0xac>)
 8000d10:	f002 f8d0 	bl	8002eb4 <HAL_GPIO_WritePin>
        o_faultIndicator = GPIO_PIN_SET;
 8000d14:	4b25      	ldr	r3, [pc, #148]	@ (8000dac <fault_state+0xb0>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	701a      	strb	r2, [r3, #0]

        // Reset charge indicator GPIO pin
        HAL_GPIO_WritePin(chargeIndicatorPort, chargeIndicator, GPIO_PIN_RESET);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2110      	movs	r1, #16
 8000d1e:	4824      	ldr	r0, [pc, #144]	@ (8000db0 <fault_state+0xb4>)
 8000d20:	f002 f8c8 	bl	8002eb4 <HAL_GPIO_WritePin>
        o_chargeIndicator = GPIO_PIN_RESET;
 8000d24:	4b23      	ldr	r3, [pc, #140]	@ (8000db4 <fault_state+0xb8>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	701a      	strb	r2, [r3, #0]

        // Reset pre-charge relay GPIO pin
        HAL_GPIO_WritePin(preChargeRelayPort, preChargeRelay, GPIO_PIN_RESET);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d30:	4821      	ldr	r0, [pc, #132]	@ (8000db8 <fault_state+0xbc>)
 8000d32:	f002 f8bf 	bl	8002eb4 <HAL_GPIO_WritePin>
        o_preChargeRelay = GPIO_PIN_RESET;
 8000d36:	4b21      	ldr	r3, [pc, #132]	@ (8000dbc <fault_state+0xc0>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	701a      	strb	r2, [r3, #0]

        //Reset auxDCDCDisable GPIO pin
        HAL_GPIO_WritePin(auxDCDCDisablePort,auxDCDCDisable, GPIO_PIN_RESET);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2180      	movs	r1, #128	@ 0x80
 8000d40:	481d      	ldr	r0, [pc, #116]	@ (8000db8 <fault_state+0xbc>)
 8000d42:	f002 f8b7 	bl	8002eb4 <HAL_GPIO_WritePin>
        o_auxDCDCDisable = GPIO_PIN_RESET;
 8000d46:	4b1e      	ldr	r3, [pc, #120]	@ (8000dc0 <fault_state+0xc4>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	701a      	strb	r2, [r3, #0]

        // Update last state to FAULT
        lastState = FAULT;
 8000d4c:	4b15      	ldr	r3, [pc, #84]	@ (8000da4 <fault_state+0xa8>)
 8000d4e:	2206      	movs	r2, #6
 8000d50:	701a      	strb	r2, [r3, #0]

        // Record the time when entering the FAULT state
        enterStateTime = HAL_GetTick();
 8000d52:	f000 ff6f 	bl	8001c34 <HAL_GetTick>
 8000d56:	4603      	mov	r3, r0
 8000d58:	4a1a      	ldr	r2, [pc, #104]	@ (8000dc4 <fault_state+0xc8>)
 8000d5a:	6013      	str	r3, [r2, #0]

    }

    currentTime = HAL_GetTick();
 8000d5c:	f000 ff6a 	bl	8001c34 <HAL_GetTick>
 8000d60:	4603      	mov	r3, r0
 8000d62:	4a19      	ldr	r2, [pc, #100]	@ (8000dc8 <fault_state+0xcc>)
 8000d64:	6013      	str	r3, [r2, #0]

    if (currentTime - enterStateTime >= 500) {
 8000d66:	4b18      	ldr	r3, [pc, #96]	@ (8000dc8 <fault_state+0xcc>)
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	4b16      	ldr	r3, [pc, #88]	@ (8000dc4 <fault_state+0xc8>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	1ad3      	subs	r3, r2, r3
 8000d70:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000d74:	d311      	bcc.n	8000d9a <fault_state+0x9e>
        // Reset hvDCDCEnable GPIO pin after 500ms
        HAL_GPIO_WritePin(hvDCDCEnablePort, hvDCDCEnable, GPIO_PIN_RESET);
 8000d76:	2200      	movs	r2, #0
 8000d78:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d7c:	480e      	ldr	r0, [pc, #56]	@ (8000db8 <fault_state+0xbc>)
 8000d7e:	f002 f899 	bl	8002eb4 <HAL_GPIO_WritePin>
        o_hvDCDCEnable = GPIO_PIN_RESET;
 8000d82:	4b12      	ldr	r3, [pc, #72]	@ (8000dcc <fault_state+0xd0>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	701a      	strb	r2, [r3, #0]

        // Open HV Contactor
        HAL_GPIO_WritePin(hvContactorPort, hvContactor, GPIO_PIN_RESET);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d8e:	480a      	ldr	r0, [pc, #40]	@ (8000db8 <fault_state+0xbc>)
 8000d90:	f002 f890 	bl	8002eb4 <HAL_GPIO_WritePin>
        o_hvContactor = GPIO_PIN_RESET;
 8000d94:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd0 <fault_state+0xd4>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	701a      	strb	r2, [r3, #0]
    }

    faultBlinker();
 8000d9a:	f000 f937 	bl	800100c <faultBlinker>
    // FAULT INDICATOR
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	2000027d 	.word	0x2000027d
 8000da8:	40020800 	.word	0x40020800
 8000dac:	20000297 	.word	0x20000297
 8000db0:	40020c00 	.word	0x40020c00
 8000db4:	20000296 	.word	0x20000296
 8000db8:	40021000 	.word	0x40021000
 8000dbc:	20000299 	.word	0x20000299
 8000dc0:	20000295 	.word	0x20000295
 8000dc4:	20000280 	.word	0x20000280
 8000dc8:	20000284 	.word	0x20000284
 8000dcc:	20000294 	.word	0x20000294
 8000dd0:	20000298 	.word	0x20000298

08000dd4 <debugMonitor>:

void debugMonitor(void)
{
 8000dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dd6:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 8000dda:	af0e      	add	r7, sp, #56	@ 0x38
	char  analogBuffer[200], outBuffer[240];
	//stateBuffer[240] inBuffer[300], outBuffer[240], outBufferOld[240,;
	//old unused  String arrays ^^^

	sprintf(analogBuffer, "\rPedalADC : %d PedalDAC: %d RegenADC: %d RegenDAC: %d\n",
 8000ddc:	4b35      	ldr	r3, [pc, #212]	@ (8000eb4 <debugMonitor+0xe0>)
 8000dde:	881b      	ldrh	r3, [r3, #0]
 8000de0:	4619      	mov	r1, r3
 8000de2:	4b35      	ldr	r3, [pc, #212]	@ (8000eb8 <debugMonitor+0xe4>)
 8000de4:	881b      	ldrh	r3, [r3, #0]
 8000de6:	461c      	mov	r4, r3
 8000de8:	4b34      	ldr	r3, [pc, #208]	@ (8000ebc <debugMonitor+0xe8>)
 8000dea:	881b      	ldrh	r3, [r3, #0]
 8000dec:	461a      	mov	r2, r3
 8000dee:	4b34      	ldr	r3, [pc, #208]	@ (8000ec0 <debugMonitor+0xec>)
 8000df0:	881b      	ldrh	r3, [r3, #0]
 8000df2:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8000df6:	9301      	str	r3, [sp, #4]
 8000df8:	9200      	str	r2, [sp, #0]
 8000dfa:	4623      	mov	r3, r4
 8000dfc:	460a      	mov	r2, r1
 8000dfe:	4931      	ldr	r1, [pc, #196]	@ (8000ec4 <debugMonitor+0xf0>)
 8000e00:	f008 f89a 	bl	8008f38 <siprintf>
			i_pedalADC, o_pedalDAC, i_regenADC, o_regenDAC);

	sprintf(outBuffer, "\rS: %d E-HV-DCDC-E+=%d D-Aux-DCDC=%d ChargeInd=%d FaultInd=%d HV+_Con=%d PreCharge=%d KeyIgn=%d KeyACC=%d PedalADC=%d PedalDAC=%d DisChEn=%d KillSw=%d AuxADC=%d Code=%d\n",
 8000e04:	4b30      	ldr	r3, [pc, #192]	@ (8000ec8 <debugMonitor+0xf4>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	469c      	mov	ip, r3
 8000e0a:	4b30      	ldr	r3, [pc, #192]	@ (8000ecc <debugMonitor+0xf8>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	469e      	mov	lr, r3
 8000e10:	4b2f      	ldr	r3, [pc, #188]	@ (8000ed0 <debugMonitor+0xfc>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	4619      	mov	r1, r3
 8000e16:	4b2f      	ldr	r3, [pc, #188]	@ (8000ed4 <debugMonitor+0x100>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	461c      	mov	r4, r3
 8000e1c:	4b2e      	ldr	r3, [pc, #184]	@ (8000ed8 <debugMonitor+0x104>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	461d      	mov	r5, r3
 8000e22:	4b2e      	ldr	r3, [pc, #184]	@ (8000edc <debugMonitor+0x108>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	461e      	mov	r6, r3
 8000e28:	4b2d      	ldr	r3, [pc, #180]	@ (8000ee0 <debugMonitor+0x10c>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	61fb      	str	r3, [r7, #28]
 8000e2e:	4b2d      	ldr	r3, [pc, #180]	@ (8000ee4 <debugMonitor+0x110>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	61bb      	str	r3, [r7, #24]
 8000e34:	4b2c      	ldr	r3, [pc, #176]	@ (8000ee8 <debugMonitor+0x114>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	617b      	str	r3, [r7, #20]
 8000e3a:	4b1e      	ldr	r3, [pc, #120]	@ (8000eb4 <debugMonitor+0xe0>)
 8000e3c:	881b      	ldrh	r3, [r3, #0]
 8000e3e:	613b      	str	r3, [r7, #16]
 8000e40:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb8 <debugMonitor+0xe4>)
 8000e42:	881b      	ldrh	r3, [r3, #0]
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	4b29      	ldr	r3, [pc, #164]	@ (8000eec <debugMonitor+0x118>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	4b28      	ldr	r3, [pc, #160]	@ (8000ef0 <debugMonitor+0x11c>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	607b      	str	r3, [r7, #4]
 8000e52:	4b28      	ldr	r3, [pc, #160]	@ (8000ef4 <debugMonitor+0x120>)
 8000e54:	881b      	ldrh	r3, [r3, #0]
 8000e56:	461a      	mov	r2, r3
 8000e58:	4b27      	ldr	r3, [pc, #156]	@ (8000ef8 <debugMonitor+0x124>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	f107 0020 	add.w	r0, r7, #32
 8000e60:	930c      	str	r3, [sp, #48]	@ 0x30
 8000e62:	920b      	str	r2, [sp, #44]	@ 0x2c
 8000e64:	687a      	ldr	r2, [r7, #4]
 8000e66:	920a      	str	r2, [sp, #40]	@ 0x28
 8000e68:	68ba      	ldr	r2, [r7, #8]
 8000e6a:	9209      	str	r2, [sp, #36]	@ 0x24
 8000e6c:	68fa      	ldr	r2, [r7, #12]
 8000e6e:	9208      	str	r2, [sp, #32]
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	9207      	str	r2, [sp, #28]
 8000e74:	697a      	ldr	r2, [r7, #20]
 8000e76:	9206      	str	r2, [sp, #24]
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	9205      	str	r2, [sp, #20]
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	9304      	str	r3, [sp, #16]
 8000e80:	9603      	str	r6, [sp, #12]
 8000e82:	9502      	str	r5, [sp, #8]
 8000e84:	9401      	str	r4, [sp, #4]
 8000e86:	9100      	str	r1, [sp, #0]
 8000e88:	4673      	mov	r3, lr
 8000e8a:	4662      	mov	r2, ip
 8000e8c:	491b      	ldr	r1, [pc, #108]	@ (8000efc <debugMonitor+0x128>)
 8000e8e:	f008 f853 	bl	8008f38 <siprintf>
//						currentState, i_chargeContactor,i_chargeEnable, o_hvDCDCEnable, o_auxDCDCDisable,o_chargeIndicator, o_faultIndicator, o_hvContactor, faultCode);

//	sprintf(outBuffer,"\rS: %d Discharge=%d KillSwitch= %d\n",
//			currentState, i_disChargeEnable, i_killSwitch);

	CDC_Transmit_FS((uint8_t*)outBuffer, strlen((char*)outBuffer));
 8000e92:	f107 0320 	add.w	r3, r7, #32
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff f99a 	bl	80001d0 <strlen>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	f107 0320 	add.w	r3, r7, #32
 8000ea2:	4611      	mov	r1, r2
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f007 fbdd 	bl	8008664 <CDC_Transmit_FS>


}
 8000eaa:	bf00      	nop
 8000eac:	f507 77ee 	add.w	r7, r7, #476	@ 0x1dc
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eb4:	2000029c 	.word	0x2000029c
 8000eb8:	2000029a 	.word	0x2000029a
 8000ebc:	200002a2 	.word	0x200002a2
 8000ec0:	200002a0 	.word	0x200002a0
 8000ec4:	08009890 	.word	0x08009890
 8000ec8:	2000027c 	.word	0x2000027c
 8000ecc:	20000294 	.word	0x20000294
 8000ed0:	20000295 	.word	0x20000295
 8000ed4:	20000296 	.word	0x20000296
 8000ed8:	20000297 	.word	0x20000297
 8000edc:	20000298 	.word	0x20000298
 8000ee0:	20000299 	.word	0x20000299
 8000ee4:	2000028d 	.word	0x2000028d
 8000ee8:	2000028e 	.word	0x2000028e
 8000eec:	20000292 	.word	0x20000292
 8000ef0:	2000028f 	.word	0x2000028f
 8000ef4:	2000029e 	.word	0x2000029e
 8000ef8:	2000028c 	.word	0x2000028c
 8000efc:	080098c8 	.word	0x080098c8

08000f00 <updatePedal>:

void updatePedal(void){
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0

    HAL_ADC_Start(&hadc1);
 8000f04:	481e      	ldr	r0, [pc, #120]	@ (8000f80 <updatePedal+0x80>)
 8000f06:	f000 ff09 	bl	8001d1c <HAL_ADC_Start>
    HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	481d      	ldr	r0, [pc, #116]	@ (8000f84 <updatePedal+0x84>)
 8000f0e:	f001 fd56 	bl	80029be <HAL_DAC_Start>

    // Get input from PA0
    	i_pedalADC = HAL_ADC_GetValue(&hadc1);
 8000f12:	481b      	ldr	r0, [pc, #108]	@ (8000f80 <updatePedal+0x80>)
 8000f14:	f000 ffd4 	bl	8001ec0 <HAL_ADC_GetValue>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	b29a      	uxth	r2, r3
 8000f1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000f88 <updatePedal+0x88>)
 8000f1e:	801a      	strh	r2, [r3, #0]
    	//o_DAC = ( (i_ADC - min_ADC) * (max_DAC - min_DAC) )/(max_ADC - min_ADC)+ min_DAC
    	//o_DAC = max_DAC - o_DAC;

    	// map value_adc to the range 740-4095 to value dac range to 4095
    	// vaule_dac starts high then goes low(4095-->0)
        o_pedalDAC = ((i_pedalADC - MIN_ADC) * (MAX_DAC- MIN_DAC)) / (MAX_ADC - MIN_ADC) + MIN_DAC;
 8000f20:	4b19      	ldr	r3, [pc, #100]	@ (8000f88 <updatePedal+0x88>)
 8000f22:	881b      	ldrh	r3, [r3, #0]
 8000f24:	461a      	mov	r2, r3
 8000f26:	f240 2376 	movw	r3, #630	@ 0x276
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	f640 71ff 	movw	r1, #4095	@ 0xfff
 8000f30:	2200      	movs	r2, #0
 8000f32:	1a8a      	subs	r2, r1, r2
 8000f34:	fb03 f202 	mul.w	r2, r3, r2
 8000f38:	f640 713c 	movw	r1, #3900	@ 0xf3c
 8000f3c:	f240 2376 	movw	r3, #630	@ 0x276
 8000f40:	1acb      	subs	r3, r1, r3
 8000f42:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f46:	b29a      	uxth	r2, r3
 8000f48:	2300      	movs	r3, #0
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	4413      	add	r3, r2
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	4b0e      	ldr	r3, [pc, #56]	@ (8000f8c <updatePedal+0x8c>)
 8000f52:	801a      	strh	r2, [r3, #0]
        //invert value
        o_pedalDAC = MAX_DAC - o_pedalDAC;
 8000f54:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000f58:	b29a      	uxth	r2, r3
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f8c <updatePedal+0x8c>)
 8000f5c:	881b      	ldrh	r3, [r3, #0]
 8000f5e:	1ad3      	subs	r3, r2, r3
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	4b0a      	ldr	r3, [pc, #40]	@ (8000f8c <updatePedal+0x8c>)
 8000f64:	801a      	strh	r2, [r3, #0]

        // Outputting DAC value to PA4
        HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, o_pedalDAC);
 8000f66:	4b09      	ldr	r3, [pc, #36]	@ (8000f8c <updatePedal+0x8c>)
 8000f68:	881b      	ldrh	r3, [r3, #0]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4805      	ldr	r0, [pc, #20]	@ (8000f84 <updatePedal+0x84>)
 8000f70:	f001 fd77 	bl	8002a62 <HAL_DAC_SetValue>
        HAL_Delay(1);
 8000f74:	2001      	movs	r0, #1
 8000f76:	f000 fe69 	bl	8001c4c <HAL_Delay>
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000168 	.word	0x20000168
 8000f84:	20000268 	.word	0x20000268
 8000f88:	2000029c 	.word	0x2000029c
 8000f8c:	2000029a 	.word	0x2000029a

08000f90 <updateRegen>:

void updateRegen(void) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0

            HAL_ADC_Start(&hadc2);
 8000f94:	480e      	ldr	r0, [pc, #56]	@ (8000fd0 <updateRegen+0x40>)
 8000f96:	f000 fec1 	bl	8001d1c <HAL_ADC_Start>
            HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8000f9a:	2110      	movs	r1, #16
 8000f9c:	480d      	ldr	r0, [pc, #52]	@ (8000fd4 <updateRegen+0x44>)
 8000f9e:	f001 fd0e 	bl	80029be <HAL_DAC_Start>

            	i_regenADC = HAL_ADC_GetValue(&hadc2);
 8000fa2:	480b      	ldr	r0, [pc, #44]	@ (8000fd0 <updateRegen+0x40>)
 8000fa4:	f000 ff8c 	bl	8001ec0 <HAL_ADC_GetValue>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	b29a      	uxth	r2, r3
 8000fac:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd8 <updateRegen+0x48>)
 8000fae:	801a      	strh	r2, [r3, #0]

                // Map value_adc to the range 740-4095 to value_dac range 0-4095
                o_regenDAC = i_regenADC;
 8000fb0:	4b09      	ldr	r3, [pc, #36]	@ (8000fd8 <updateRegen+0x48>)
 8000fb2:	881a      	ldrh	r2, [r3, #0]
 8000fb4:	4b09      	ldr	r3, [pc, #36]	@ (8000fdc <updateRegen+0x4c>)
 8000fb6:	801a      	strh	r2, [r3, #0]
                //throttle_pos = (uint32_t)((value_dac / 4096) * 100); // Truncate to integer
                // Output DAC value to PA
                HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, o_regenDAC);
 8000fb8:	4b08      	ldr	r3, [pc, #32]	@ (8000fdc <updateRegen+0x4c>)
 8000fba:	881b      	ldrh	r3, [r3, #0]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	2110      	movs	r1, #16
 8000fc0:	4804      	ldr	r0, [pc, #16]	@ (8000fd4 <updateRegen+0x44>)
 8000fc2:	f001 fd4e 	bl	8002a62 <HAL_DAC_SetValue>
                HAL_Delay(1);
 8000fc6:	2001      	movs	r0, #1
 8000fc8:	f000 fe40 	bl	8001c4c <HAL_Delay>
}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	200001b0 	.word	0x200001b0
 8000fd4:	20000268 	.word	0x20000268
 8000fd8:	200002a2 	.word	0x200002a2
 8000fdc:	200002a0 	.word	0x200002a0

08000fe0 <updateAuxADC>:

void updateAuxADC(void){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc3);
 8000fe4:	4807      	ldr	r0, [pc, #28]	@ (8001004 <updateAuxADC+0x24>)
 8000fe6:	f000 fe99 	bl	8001d1c <HAL_ADC_Start>
	ai_auxVoltage = HAL_ADC_GetValue(&hadc3);			// Measure aux voltage and compare to threshold value
 8000fea:	4806      	ldr	r0, [pc, #24]	@ (8001004 <updateAuxADC+0x24>)
 8000fec:	f000 ff68 	bl	8001ec0 <HAL_ADC_GetValue>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	b29a      	uxth	r2, r3
 8000ff4:	4b04      	ldr	r3, [pc, #16]	@ (8001008 <updateAuxADC+0x28>)
 8000ff6:	801a      	strh	r2, [r3, #0]
	HAL_Delay(1);
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	f000 fe27 	bl	8001c4c <HAL_Delay>
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	200001f8 	.word	0x200001f8
 8001008:	2000029e 	.word	0x2000029e

0800100c <faultBlinker>:

void faultBlinker(void) {
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
    // Blinks the Fault Indicator at 1.5 Hz (1.5p second on/off)
    if (currentTime - extraTime >= 750) {
 8001010:	4b12      	ldr	r3, [pc, #72]	@ (800105c <faultBlinker+0x50>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	4b12      	ldr	r3, [pc, #72]	@ (8001060 <faultBlinker+0x54>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	f240 22ed 	movw	r2, #749	@ 0x2ed
 800101e:	4293      	cmp	r3, r2
 8001020:	d91a      	bls.n	8001058 <faultBlinker+0x4c>

        // Toggle fault indicator GPIO pin
        if (o_faultIndicator == GPIO_PIN_RESET) { // Checks to see if Fault Light is OFF
 8001022:	4b10      	ldr	r3, [pc, #64]	@ (8001064 <faultBlinker+0x58>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d109      	bne.n	800103e <faultBlinker+0x32>

            // Turns on the Fault Light
            HAL_GPIO_WritePin(faultIndicatorPort, faultIndicator, GPIO_PIN_SET);
 800102a:	2201      	movs	r2, #1
 800102c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001030:	480d      	ldr	r0, [pc, #52]	@ (8001068 <faultBlinker+0x5c>)
 8001032:	f001 ff3f 	bl	8002eb4 <HAL_GPIO_WritePin>
            o_faultIndicator = GPIO_PIN_SET;
 8001036:	4b0b      	ldr	r3, [pc, #44]	@ (8001064 <faultBlinker+0x58>)
 8001038:	2201      	movs	r2, #1
 800103a:	701a      	strb	r2, [r3, #0]
 800103c:	e008      	b.n	8001050 <faultBlinker+0x44>
        } else {
            // Turns off the Fault Light
            HAL_GPIO_WritePin(faultIndicatorPort, faultIndicator, GPIO_PIN_RESET);
 800103e:	2200      	movs	r2, #0
 8001040:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001044:	4808      	ldr	r0, [pc, #32]	@ (8001068 <faultBlinker+0x5c>)
 8001046:	f001 ff35 	bl	8002eb4 <HAL_GPIO_WritePin>
            o_faultIndicator = GPIO_PIN_RESET;
 800104a:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <faultBlinker+0x58>)
 800104c:	2200      	movs	r2, #0
 800104e:	701a      	strb	r2, [r3, #0]
        }

        extraTime = currentTime;
 8001050:	4b02      	ldr	r3, [pc, #8]	@ (800105c <faultBlinker+0x50>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a02      	ldr	r2, [pc, #8]	@ (8001060 <faultBlinker+0x54>)
 8001056:	6013      	str	r3, [r2, #0]
    }


  /* USER CODE END 3 */
}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000284 	.word	0x20000284
 8001060:	20000288 	.word	0x20000288
 8001064:	20000297 	.word	0x20000297
 8001068:	40020800 	.word	0x40020800

0800106c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b094      	sub	sp, #80	@ 0x50
 8001070:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001072:	f107 0320 	add.w	r3, r7, #32
 8001076:	2230      	movs	r2, #48	@ 0x30
 8001078:	2100      	movs	r1, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f007 ff7c 	bl	8008f78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001090:	2300      	movs	r3, #0
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	4b28      	ldr	r3, [pc, #160]	@ (8001138 <SystemClock_Config+0xcc>)
 8001096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001098:	4a27      	ldr	r2, [pc, #156]	@ (8001138 <SystemClock_Config+0xcc>)
 800109a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800109e:	6413      	str	r3, [r2, #64]	@ 0x40
 80010a0:	4b25      	ldr	r3, [pc, #148]	@ (8001138 <SystemClock_Config+0xcc>)
 80010a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010ac:	2300      	movs	r3, #0
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	4b22      	ldr	r3, [pc, #136]	@ (800113c <SystemClock_Config+0xd0>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a21      	ldr	r2, [pc, #132]	@ (800113c <SystemClock_Config+0xd0>)
 80010b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010ba:	6013      	str	r3, [r2, #0]
 80010bc:	4b1f      	ldr	r3, [pc, #124]	@ (800113c <SystemClock_Config+0xd0>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010c4:	607b      	str	r3, [r7, #4]
 80010c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010c8:	2301      	movs	r3, #1
 80010ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010d0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d2:	2302      	movs	r3, #2
 80010d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010d6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80010da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010dc:	2308      	movs	r3, #8
 80010de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010e0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80010e4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010e6:	2302      	movs	r3, #2
 80010e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010ea:	2307      	movs	r3, #7
 80010ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ee:	f107 0320 	add.w	r3, r7, #32
 80010f2:	4618      	mov	r0, r3
 80010f4:	f003 f974 	bl	80043e0 <HAL_RCC_OscConfig>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80010fe:	f000 fb27 	bl	8001750 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001102:	230f      	movs	r3, #15
 8001104:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001106:	2302      	movs	r3, #2
 8001108:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800110e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001112:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001114:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001118:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800111a:	f107 030c 	add.w	r3, r7, #12
 800111e:	2105      	movs	r1, #5
 8001120:	4618      	mov	r0, r3
 8001122:	f003 fbd5 	bl	80048d0 <HAL_RCC_ClockConfig>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800112c:	f000 fb10 	bl	8001750 <Error_Handler>
  }
}
 8001130:	bf00      	nop
 8001132:	3750      	adds	r7, #80	@ 0x50
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40023800 	.word	0x40023800
 800113c:	40007000 	.word	0x40007000

08001140 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001146:	463b      	mov	r3, r7
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001152:	4b21      	ldr	r3, [pc, #132]	@ (80011d8 <MX_ADC1_Init+0x98>)
 8001154:	4a21      	ldr	r2, [pc, #132]	@ (80011dc <MX_ADC1_Init+0x9c>)
 8001156:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001158:	4b1f      	ldr	r3, [pc, #124]	@ (80011d8 <MX_ADC1_Init+0x98>)
 800115a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800115e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001160:	4b1d      	ldr	r3, [pc, #116]	@ (80011d8 <MX_ADC1_Init+0x98>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001166:	4b1c      	ldr	r3, [pc, #112]	@ (80011d8 <MX_ADC1_Init+0x98>)
 8001168:	2200      	movs	r2, #0
 800116a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800116c:	4b1a      	ldr	r3, [pc, #104]	@ (80011d8 <MX_ADC1_Init+0x98>)
 800116e:	2201      	movs	r2, #1
 8001170:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001172:	4b19      	ldr	r3, [pc, #100]	@ (80011d8 <MX_ADC1_Init+0x98>)
 8001174:	2200      	movs	r2, #0
 8001176:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800117a:	4b17      	ldr	r3, [pc, #92]	@ (80011d8 <MX_ADC1_Init+0x98>)
 800117c:	2200      	movs	r2, #0
 800117e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001180:	4b15      	ldr	r3, [pc, #84]	@ (80011d8 <MX_ADC1_Init+0x98>)
 8001182:	4a17      	ldr	r2, [pc, #92]	@ (80011e0 <MX_ADC1_Init+0xa0>)
 8001184:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001186:	4b14      	ldr	r3, [pc, #80]	@ (80011d8 <MX_ADC1_Init+0x98>)
 8001188:	2200      	movs	r2, #0
 800118a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800118c:	4b12      	ldr	r3, [pc, #72]	@ (80011d8 <MX_ADC1_Init+0x98>)
 800118e:	2201      	movs	r2, #1
 8001190:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001192:	4b11      	ldr	r3, [pc, #68]	@ (80011d8 <MX_ADC1_Init+0x98>)
 8001194:	2200      	movs	r2, #0
 8001196:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800119a:	4b0f      	ldr	r3, [pc, #60]	@ (80011d8 <MX_ADC1_Init+0x98>)
 800119c:	2201      	movs	r2, #1
 800119e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011a0:	480d      	ldr	r0, [pc, #52]	@ (80011d8 <MX_ADC1_Init+0x98>)
 80011a2:	f000 fd77 	bl	8001c94 <HAL_ADC_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80011ac:	f000 fad0 	bl	8001750 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011b0:	2301      	movs	r3, #1
 80011b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011b4:	2301      	movs	r3, #1
 80011b6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80011b8:	2301      	movs	r3, #1
 80011ba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011bc:	463b      	mov	r3, r7
 80011be:	4619      	mov	r1, r3
 80011c0:	4805      	ldr	r0, [pc, #20]	@ (80011d8 <MX_ADC1_Init+0x98>)
 80011c2:	f000 fe8b 	bl	8001edc <HAL_ADC_ConfigChannel>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80011cc:	f000 fac0 	bl	8001750 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011d0:	bf00      	nop
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000168 	.word	0x20000168
 80011dc:	40012000 	.word	0x40012000
 80011e0:	0f000001 	.word	0x0f000001

080011e4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ea:	463b      	mov	r3, r7
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80011f6:	4b21      	ldr	r3, [pc, #132]	@ (800127c <MX_ADC2_Init+0x98>)
 80011f8:	4a21      	ldr	r2, [pc, #132]	@ (8001280 <MX_ADC2_Init+0x9c>)
 80011fa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011fc:	4b1f      	ldr	r3, [pc, #124]	@ (800127c <MX_ADC2_Init+0x98>)
 80011fe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001202:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001204:	4b1d      	ldr	r3, [pc, #116]	@ (800127c <MX_ADC2_Init+0x98>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800120a:	4b1c      	ldr	r3, [pc, #112]	@ (800127c <MX_ADC2_Init+0x98>)
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001210:	4b1a      	ldr	r3, [pc, #104]	@ (800127c <MX_ADC2_Init+0x98>)
 8001212:	2201      	movs	r2, #1
 8001214:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001216:	4b19      	ldr	r3, [pc, #100]	@ (800127c <MX_ADC2_Init+0x98>)
 8001218:	2200      	movs	r2, #0
 800121a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800121e:	4b17      	ldr	r3, [pc, #92]	@ (800127c <MX_ADC2_Init+0x98>)
 8001220:	2200      	movs	r2, #0
 8001222:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001224:	4b15      	ldr	r3, [pc, #84]	@ (800127c <MX_ADC2_Init+0x98>)
 8001226:	4a17      	ldr	r2, [pc, #92]	@ (8001284 <MX_ADC2_Init+0xa0>)
 8001228:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800122a:	4b14      	ldr	r3, [pc, #80]	@ (800127c <MX_ADC2_Init+0x98>)
 800122c:	2200      	movs	r2, #0
 800122e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001230:	4b12      	ldr	r3, [pc, #72]	@ (800127c <MX_ADC2_Init+0x98>)
 8001232:	2201      	movs	r2, #1
 8001234:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001236:	4b11      	ldr	r3, [pc, #68]	@ (800127c <MX_ADC2_Init+0x98>)
 8001238:	2200      	movs	r2, #0
 800123a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800123e:	4b0f      	ldr	r3, [pc, #60]	@ (800127c <MX_ADC2_Init+0x98>)
 8001240:	2201      	movs	r2, #1
 8001242:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001244:	480d      	ldr	r0, [pc, #52]	@ (800127c <MX_ADC2_Init+0x98>)
 8001246:	f000 fd25 	bl	8001c94 <HAL_ADC_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001250:	f000 fa7e 	bl	8001750 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001254:	2302      	movs	r3, #2
 8001256:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001258:	2301      	movs	r3, #1
 800125a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800125c:	2300      	movs	r3, #0
 800125e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001260:	463b      	mov	r3, r7
 8001262:	4619      	mov	r1, r3
 8001264:	4805      	ldr	r0, [pc, #20]	@ (800127c <MX_ADC2_Init+0x98>)
 8001266:	f000 fe39 	bl	8001edc <HAL_ADC_ConfigChannel>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001270:	f000 fa6e 	bl	8001750 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001274:	bf00      	nop
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	200001b0 	.word	0x200001b0
 8001280:	40012100 	.word	0x40012100
 8001284:	0f000001 	.word	0x0f000001

08001288 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800128e:	463b      	mov	r3, r7
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800129a:	4b21      	ldr	r3, [pc, #132]	@ (8001320 <MX_ADC3_Init+0x98>)
 800129c:	4a21      	ldr	r2, [pc, #132]	@ (8001324 <MX_ADC3_Init+0x9c>)
 800129e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001320 <MX_ADC3_Init+0x98>)
 80012a2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80012a6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80012a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001320 <MX_ADC3_Init+0x98>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80012ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001320 <MX_ADC3_Init+0x98>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80012b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001320 <MX_ADC3_Init+0x98>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80012ba:	4b19      	ldr	r3, [pc, #100]	@ (8001320 <MX_ADC3_Init+0x98>)
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012c2:	4b17      	ldr	r3, [pc, #92]	@ (8001320 <MX_ADC3_Init+0x98>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012c8:	4b15      	ldr	r3, [pc, #84]	@ (8001320 <MX_ADC3_Init+0x98>)
 80012ca:	4a17      	ldr	r2, [pc, #92]	@ (8001328 <MX_ADC3_Init+0xa0>)
 80012cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012ce:	4b14      	ldr	r3, [pc, #80]	@ (8001320 <MX_ADC3_Init+0x98>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80012d4:	4b12      	ldr	r3, [pc, #72]	@ (8001320 <MX_ADC3_Init+0x98>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80012da:	4b11      	ldr	r3, [pc, #68]	@ (8001320 <MX_ADC3_Init+0x98>)
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001320 <MX_ADC3_Init+0x98>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80012e8:	480d      	ldr	r0, [pc, #52]	@ (8001320 <MX_ADC3_Init+0x98>)
 80012ea:	f000 fcd3 	bl	8001c94 <HAL_ADC_Init>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80012f4:	f000 fa2c 	bl	8001750 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80012f8:	230c      	movs	r3, #12
 80012fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012fc:	2301      	movs	r3, #1
 80012fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001300:	2300      	movs	r3, #0
 8001302:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001304:	463b      	mov	r3, r7
 8001306:	4619      	mov	r1, r3
 8001308:	4805      	ldr	r0, [pc, #20]	@ (8001320 <MX_ADC3_Init+0x98>)
 800130a:	f000 fde7 	bl	8001edc <HAL_ADC_ConfigChannel>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001314:	f000 fa1c 	bl	8001750 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001318:	bf00      	nop
 800131a:	3710      	adds	r7, #16
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	200001f8 	.word	0x200001f8
 8001324:	40012200 	.word	0x40012200
 8001328:	0f000001 	.word	0x0f000001

0800132c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001330:	4b34      	ldr	r3, [pc, #208]	@ (8001404 <MX_CAN1_Init+0xd8>)
 8001332:	4a35      	ldr	r2, [pc, #212]	@ (8001408 <MX_CAN1_Init+0xdc>)
 8001334:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001336:	4b33      	ldr	r3, [pc, #204]	@ (8001404 <MX_CAN1_Init+0xd8>)
 8001338:	2210      	movs	r2, #16
 800133a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800133c:	4b31      	ldr	r3, [pc, #196]	@ (8001404 <MX_CAN1_Init+0xd8>)
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001342:	4b30      	ldr	r3, [pc, #192]	@ (8001404 <MX_CAN1_Init+0xd8>)
 8001344:	2200      	movs	r2, #0
 8001346:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001348:	4b2e      	ldr	r3, [pc, #184]	@ (8001404 <MX_CAN1_Init+0xd8>)
 800134a:	2200      	movs	r2, #0
 800134c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800134e:	4b2d      	ldr	r3, [pc, #180]	@ (8001404 <MX_CAN1_Init+0xd8>)
 8001350:	2200      	movs	r2, #0
 8001352:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001354:	4b2b      	ldr	r3, [pc, #172]	@ (8001404 <MX_CAN1_Init+0xd8>)
 8001356:	2200      	movs	r2, #0
 8001358:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800135a:	4b2a      	ldr	r3, [pc, #168]	@ (8001404 <MX_CAN1_Init+0xd8>)
 800135c:	2200      	movs	r2, #0
 800135e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001360:	4b28      	ldr	r3, [pc, #160]	@ (8001404 <MX_CAN1_Init+0xd8>)
 8001362:	2200      	movs	r2, #0
 8001364:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001366:	4b27      	ldr	r3, [pc, #156]	@ (8001404 <MX_CAN1_Init+0xd8>)
 8001368:	2200      	movs	r2, #0
 800136a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800136c:	4b25      	ldr	r3, [pc, #148]	@ (8001404 <MX_CAN1_Init+0xd8>)
 800136e:	2200      	movs	r2, #0
 8001370:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001372:	4b24      	ldr	r3, [pc, #144]	@ (8001404 <MX_CAN1_Init+0xd8>)
 8001374:	2200      	movs	r2, #0
 8001376:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001378:	4822      	ldr	r0, [pc, #136]	@ (8001404 <MX_CAN1_Init+0xd8>)
 800137a:	f000 ffcd 	bl	8002318 <HAL_CAN_Init>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8001384:	f000 f9e4 	bl	8001750 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  //Sets Up the First part of the CAN FRAME
  TxHeader.IDE = CAN_ID_STD;
 8001388:	4b20      	ldr	r3, [pc, #128]	@ (800140c <MX_CAN1_Init+0xe0>)
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]
  TxHeader.StdId = 0x420;
 800138e:	4b1f      	ldr	r3, [pc, #124]	@ (800140c <MX_CAN1_Init+0xe0>)
 8001390:	f44f 6284 	mov.w	r2, #1056	@ 0x420
 8001394:	601a      	str	r2, [r3, #0]
  TxHeader.RTR = CAN_RTR_DATA;
 8001396:	4b1d      	ldr	r3, [pc, #116]	@ (800140c <MX_CAN1_Init+0xe0>)
 8001398:	2200      	movs	r2, #0
 800139a:	60da      	str	r2, [r3, #12]
  TxHeader.DLC = 8;
 800139c:	4b1b      	ldr	r3, [pc, #108]	@ (800140c <MX_CAN1_Init+0xe0>)
 800139e:	2208      	movs	r2, #8
 80013a0:	611a      	str	r2, [r3, #16]

  Filter.FilterActivation = CAN_FILTER_ENABLE;
 80013a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001410 <MX_CAN1_Init+0xe4>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	621a      	str	r2, [r3, #32]
  Filter.FilterBank = 0;
 80013a8:	4b19      	ldr	r3, [pc, #100]	@ (8001410 <MX_CAN1_Init+0xe4>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	615a      	str	r2, [r3, #20]
  Filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80013ae:	4b18      	ldr	r3, [pc, #96]	@ (8001410 <MX_CAN1_Init+0xe4>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	611a      	str	r2, [r3, #16]
  Filter.FilterIdHigh = 0x0000;
 80013b4:	4b16      	ldr	r3, [pc, #88]	@ (8001410 <MX_CAN1_Init+0xe4>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
  Filter.FilterIdLow = 0x0000;
 80013ba:	4b15      	ldr	r3, [pc, #84]	@ (8001410 <MX_CAN1_Init+0xe4>)
 80013bc:	2200      	movs	r2, #0
 80013be:	605a      	str	r2, [r3, #4]
  Filter.FilterMaskIdHigh = 0x0000;
 80013c0:	4b13      	ldr	r3, [pc, #76]	@ (8001410 <MX_CAN1_Init+0xe4>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	609a      	str	r2, [r3, #8]
  Filter.FilterMaskIdLow = 0x0000;
 80013c6:	4b12      	ldr	r3, [pc, #72]	@ (8001410 <MX_CAN1_Init+0xe4>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	60da      	str	r2, [r3, #12]
  Filter.FilterMode = CAN_FILTERMODE_IDMASK;
 80013cc:	4b10      	ldr	r3, [pc, #64]	@ (8001410 <MX_CAN1_Init+0xe4>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	619a      	str	r2, [r3, #24]
  Filter.FilterScale = CAN_FILTERSCALE_32BIT;
 80013d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001410 <MX_CAN1_Init+0xe4>)
 80013d4:	2201      	movs	r2, #1
 80013d6:	61da      	str	r2, [r3, #28]
  Filter.SlaveStartFilterBank = 14;
 80013d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001410 <MX_CAN1_Init+0xe4>)
 80013da:	220e      	movs	r2, #14
 80013dc:	625a      	str	r2, [r3, #36]	@ 0x24

  if (HAL_CAN_ConfigFilter(&hcan1, &Filter) != HAL_OK){
 80013de:	490c      	ldr	r1, [pc, #48]	@ (8001410 <MX_CAN1_Init+0xe4>)
 80013e0:	4808      	ldr	r0, [pc, #32]	@ (8001404 <MX_CAN1_Init+0xd8>)
 80013e2:	f001 f895 	bl	8002510 <HAL_CAN_ConfigFilter>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_CAN1_Init+0xc4>
	  Error_Handler();
 80013ec:	f000 f9b0 	bl	8001750 <Error_Handler>
  }
  if(HAL_CAN_Start(&hcan1)!= HAL_OK){
 80013f0:	4804      	ldr	r0, [pc, #16]	@ (8001404 <MX_CAN1_Init+0xd8>)
 80013f2:	f001 f96d 	bl	80026d0 <HAL_CAN_Start>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_CAN1_Init+0xd4>
	  Error_Handler();
 80013fc:	f000 f9a8 	bl	8001750 <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 8001400:	bf00      	nop
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20000240 	.word	0x20000240
 8001408:	40006400 	.word	0x40006400
 800140c:	200002cc 	.word	0x200002cc
 8001410:	200002a4 	.word	0x200002a4

08001414 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800141a:	463b      	mov	r3, r7
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001422:	4b14      	ldr	r3, [pc, #80]	@ (8001474 <MX_DAC_Init+0x60>)
 8001424:	4a14      	ldr	r2, [pc, #80]	@ (8001478 <MX_DAC_Init+0x64>)
 8001426:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001428:	4812      	ldr	r0, [pc, #72]	@ (8001474 <MX_DAC_Init+0x60>)
 800142a:	f001 faa6 	bl	800297a <HAL_DAC_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001434:	f000 f98c 	bl	8001750 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001438:	2300      	movs	r3, #0
 800143a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800143c:	2300      	movs	r3, #0
 800143e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001440:	463b      	mov	r3, r7
 8001442:	2200      	movs	r2, #0
 8001444:	4619      	mov	r1, r3
 8001446:	480b      	ldr	r0, [pc, #44]	@ (8001474 <MX_DAC_Init+0x60>)
 8001448:	f001 fb30 	bl	8002aac <HAL_DAC_ConfigChannel>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001452:	f000 f97d 	bl	8001750 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001456:	463b      	mov	r3, r7
 8001458:	2210      	movs	r2, #16
 800145a:	4619      	mov	r1, r3
 800145c:	4805      	ldr	r0, [pc, #20]	@ (8001474 <MX_DAC_Init+0x60>)
 800145e:	f001 fb25 	bl	8002aac <HAL_DAC_ConfigChannel>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8001468:	f000 f972 	bl	8001750 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800146c:	bf00      	nop
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20000268 	.word	0x20000268
 8001478:	40007400 	.word	0x40007400

0800147c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08c      	sub	sp, #48	@ 0x30
 8001480:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001482:	f107 031c 	add.w	r3, r7, #28
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	605a      	str	r2, [r3, #4]
 800148c:	609a      	str	r2, [r3, #8]
 800148e:	60da      	str	r2, [r3, #12]
 8001490:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	61bb      	str	r3, [r7, #24]
 8001496:	4ba8      	ldr	r3, [pc, #672]	@ (8001738 <MX_GPIO_Init+0x2bc>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149a:	4aa7      	ldr	r2, [pc, #668]	@ (8001738 <MX_GPIO_Init+0x2bc>)
 800149c:	f043 0310 	orr.w	r3, r3, #16
 80014a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a2:	4ba5      	ldr	r3, [pc, #660]	@ (8001738 <MX_GPIO_Init+0x2bc>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	f003 0310 	and.w	r3, r3, #16
 80014aa:	61bb      	str	r3, [r7, #24]
 80014ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]
 80014b2:	4ba1      	ldr	r3, [pc, #644]	@ (8001738 <MX_GPIO_Init+0x2bc>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b6:	4aa0      	ldr	r2, [pc, #640]	@ (8001738 <MX_GPIO_Init+0x2bc>)
 80014b8:	f043 0304 	orr.w	r3, r3, #4
 80014bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014be:	4b9e      	ldr	r3, [pc, #632]	@ (8001738 <MX_GPIO_Init+0x2bc>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	f003 0304 	and.w	r3, r3, #4
 80014c6:	617b      	str	r3, [r7, #20]
 80014c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	613b      	str	r3, [r7, #16]
 80014ce:	4b9a      	ldr	r3, [pc, #616]	@ (8001738 <MX_GPIO_Init+0x2bc>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d2:	4a99      	ldr	r2, [pc, #612]	@ (8001738 <MX_GPIO_Init+0x2bc>)
 80014d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014da:	4b97      	ldr	r3, [pc, #604]	@ (8001738 <MX_GPIO_Init+0x2bc>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014e2:	613b      	str	r3, [r7, #16]
 80014e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	4b93      	ldr	r3, [pc, #588]	@ (8001738 <MX_GPIO_Init+0x2bc>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ee:	4a92      	ldr	r2, [pc, #584]	@ (8001738 <MX_GPIO_Init+0x2bc>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f6:	4b90      	ldr	r3, [pc, #576]	@ (8001738 <MX_GPIO_Init+0x2bc>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60bb      	str	r3, [r7, #8]
 8001506:	4b8c      	ldr	r3, [pc, #560]	@ (8001738 <MX_GPIO_Init+0x2bc>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150a:	4a8b      	ldr	r2, [pc, #556]	@ (8001738 <MX_GPIO_Init+0x2bc>)
 800150c:	f043 0302 	orr.w	r3, r3, #2
 8001510:	6313      	str	r3, [r2, #48]	@ 0x30
 8001512:	4b89      	ldr	r3, [pc, #548]	@ (8001738 <MX_GPIO_Init+0x2bc>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	607b      	str	r3, [r7, #4]
 8001522:	4b85      	ldr	r3, [pc, #532]	@ (8001738 <MX_GPIO_Init+0x2bc>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001526:	4a84      	ldr	r2, [pc, #528]	@ (8001738 <MX_GPIO_Init+0x2bc>)
 8001528:	f043 0308 	orr.w	r3, r3, #8
 800152c:	6313      	str	r3, [r2, #48]	@ 0x30
 800152e:	4b82      	ldr	r3, [pc, #520]	@ (8001738 <MX_GPIO_Init+0x2bc>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001532:	f003 0308 	and.w	r3, r3, #8
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|auxDCDCDisable_Pin|hvDCDCEnable_Pin|preChargeRelay_Pin
 800153a:	2200      	movs	r2, #0
 800153c:	f641 1188 	movw	r1, #6536	@ 0x1988
 8001540:	487e      	ldr	r0, [pc, #504]	@ (800173c <MX_GPIO_Init+0x2c0>)
 8001542:	f001 fcb7 	bl	8002eb4 <HAL_GPIO_WritePin>
                          |hvContactor_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001546:	2201      	movs	r2, #1
 8001548:	2101      	movs	r1, #1
 800154a:	487d      	ldr	r0, [pc, #500]	@ (8001740 <MX_GPIO_Init+0x2c4>)
 800154c:	f001 fcb2 	bl	8002eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(hvContactorB15_GPIO_Port, hvContactorB15_Pin, GPIO_PIN_RESET);
 8001550:	2200      	movs	r2, #0
 8001552:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001556:	487b      	ldr	r0, [pc, #492]	@ (8001744 <MX_GPIO_Init+0x2c8>)
 8001558:	f001 fcac 	bl	8002eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD6_Pin|spareOutput2_Pin
 800155c:	2200      	movs	r2, #0
 800155e:	f24b 0199 	movw	r1, #45209	@ 0xb099
 8001562:	4879      	ldr	r0, [pc, #484]	@ (8001748 <MX_GPIO_Init+0x2cc>)
 8001564:	f001 fca6 	bl	8002eb4 <HAL_GPIO_WritePin>
                          |faultIndicatorD3_Pin|chargeIndicator_Pin|NA2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(faultIndicator_GPIO_Port, faultIndicator_Pin, GPIO_PIN_RESET);
 8001568:	2200      	movs	r2, #0
 800156a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800156e:	4874      	ldr	r0, [pc, #464]	@ (8001740 <MX_GPIO_Init+0x2c4>)
 8001570:	f001 fca0 	bl	8002eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(spareOutput3_GPIO_Port, spareOutput3_Pin, GPIO_PIN_SET);
 8001574:	2201      	movs	r2, #1
 8001576:	2140      	movs	r1, #64	@ 0x40
 8001578:	4873      	ldr	r0, [pc, #460]	@ (8001748 <MX_GPIO_Init+0x2cc>)
 800157a:	f001 fc9b 	bl	8002eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_I2C_SPI_Pin auxDCDCDisable_Pin hvDCDCEnable_Pin preChargeRelay_Pin
                           hvContactor_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|auxDCDCDisable_Pin|hvDCDCEnable_Pin|preChargeRelay_Pin
 800157e:	f641 1388 	movw	r3, #6536	@ 0x1988
 8001582:	61fb      	str	r3, [r7, #28]
                          |hvContactor_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001584:	2301      	movs	r3, #1
 8001586:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158c:	2300      	movs	r3, #0
 800158e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001590:	f107 031c 	add.w	r3, r7, #28
 8001594:	4619      	mov	r1, r3
 8001596:	4869      	ldr	r0, [pc, #420]	@ (800173c <MX_GPIO_Init+0x2c0>)
 8001598:	f001 fad8 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin faultIndicator_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|faultIndicator_Pin;
 800159c:	f241 0301 	movw	r3, #4097	@ 0x1001
 80015a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a2:	2301      	movs	r3, #1
 80015a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015aa:	2300      	movs	r3, #0
 80015ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ae:	f107 031c 	add.w	r3, r7, #28
 80015b2:	4619      	mov	r1, r3
 80015b4:	4862      	ldr	r0, [pc, #392]	@ (8001740 <MX_GPIO_Init+0x2c4>)
 80015b6:	f001 fac9 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80015ba:	2308      	movs	r3, #8
 80015bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015be:	2302      	movs	r3, #2
 80015c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c6:	2300      	movs	r3, #0
 80015c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015ca:	2305      	movs	r3, #5
 80015cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80015ce:	f107 031c 	add.w	r3, r7, #28
 80015d2:	4619      	mov	r1, r3
 80015d4:	485a      	ldr	r0, [pc, #360]	@ (8001740 <MX_GPIO_Init+0x2c4>)
 80015d6:	f001 fab9 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015da:	2301      	movs	r3, #1
 80015dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80015de:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80015e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015e8:	f107 031c 	add.w	r3, r7, #28
 80015ec:	4619      	mov	r1, r3
 80015ee:	4857      	ldr	r0, [pc, #348]	@ (800174c <MX_GPIO_Init+0x2d0>)
 80015f0:	f001 faac 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : chargeEnable_Pin */
  GPIO_InitStruct.Pin = chargeEnable_Pin;
 80015f4:	2308      	movs	r3, #8
 80015f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f8:	2300      	movs	r3, #0
 80015fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(chargeEnable_GPIO_Port, &GPIO_InitStruct);
 8001600:	f107 031c 	add.w	r3, r7, #28
 8001604:	4619      	mov	r1, r3
 8001606:	4851      	ldr	r0, [pc, #324]	@ (800174c <MX_GPIO_Init+0x2d0>)
 8001608:	f001 faa0 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_MISO_Pin */
  GPIO_InitStruct.Pin = SPI1_MISO_Pin;
 800160c:	2340      	movs	r3, #64	@ 0x40
 800160e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001610:	2302      	movs	r3, #2
 8001612:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001618:	2300      	movs	r3, #0
 800161a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800161c:	2305      	movs	r3, #5
 800161e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(SPI1_MISO_GPIO_Port, &GPIO_InitStruct);
 8001620:	f107 031c 	add.w	r3, r7, #28
 8001624:	4619      	mov	r1, r3
 8001626:	4849      	ldr	r0, [pc, #292]	@ (800174c <MX_GPIO_Init+0x2d0>)
 8001628:	f001 fa90 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800162c:	2304      	movs	r3, #4
 800162e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001630:	2300      	movs	r3, #0
 8001632:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001638:	f107 031c 	add.w	r3, r7, #28
 800163c:	4619      	mov	r1, r3
 800163e:	4841      	ldr	r0, [pc, #260]	@ (8001744 <MX_GPIO_Init+0x2c8>)
 8001640:	f001 fa84 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : keyIGN_Pin keyACC_Pin chargeContactor_Pin disChargeEnable_Pin
                           chargeEnableE15_Pin */
  GPIO_InitStruct.Pin = keyIGN_Pin|keyACC_Pin|chargeContactor_Pin|disChargeEnable_Pin
 8001644:	f44f 4366 	mov.w	r3, #58880	@ 0xe600
 8001648:	61fb      	str	r3, [r7, #28]
                          |chargeEnableE15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800164a:	2300      	movs	r3, #0
 800164c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001652:	f107 031c 	add.w	r3, r7, #28
 8001656:	4619      	mov	r1, r3
 8001658:	4838      	ldr	r0, [pc, #224]	@ (800173c <MX_GPIO_Init+0x2c0>)
 800165a:	f001 fa77 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800165e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001662:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001664:	2302      	movs	r3, #2
 8001666:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001668:	2300      	movs	r3, #0
 800166a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166c:	2300      	movs	r3, #0
 800166e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001670:	2305      	movs	r3, #5
 8001672:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001674:	f107 031c 	add.w	r3, r7, #28
 8001678:	4619      	mov	r1, r3
 800167a:	4832      	ldr	r0, [pc, #200]	@ (8001744 <MX_GPIO_Init+0x2c8>)
 800167c:	f001 fa66 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : hvContactorB15_Pin */
  GPIO_InitStruct.Pin = hvContactorB15_Pin;
 8001680:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001684:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001686:	2301      	movs	r3, #1
 8001688:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	2300      	movs	r3, #0
 800168c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168e:	2300      	movs	r3, #0
 8001690:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(hvContactorB15_GPIO_Port, &GPIO_InitStruct);
 8001692:	f107 031c 	add.w	r3, r7, #28
 8001696:	4619      	mov	r1, r3
 8001698:	482a      	ldr	r0, [pc, #168]	@ (8001744 <MX_GPIO_Init+0x2c8>)
 800169a:	f001 fa57 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : spareInput2_Pin spareInput1_Pin spareInput3_Pin killSwitch_Pin
                           brakeSwitchInput_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = spareInput2_Pin|spareInput1_Pin|spareInput3_Pin|killSwitch_Pin
 800169e:	f240 7326 	movw	r3, #1830	@ 0x726
 80016a2:	61fb      	str	r3, [r7, #28]
                          |brakeSwitchInput_Pin|OTG_FS_OverCurrent_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a4:	2300      	movs	r3, #0
 80016a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ac:	f107 031c 	add.w	r3, r7, #28
 80016b0:	4619      	mov	r1, r3
 80016b2:	4825      	ldr	r0, [pc, #148]	@ (8001748 <MX_GPIO_Init+0x2cc>)
 80016b4:	f001 fa4a 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD6_Pin spareOutput2_Pin
                           faultIndicatorD3_Pin chargeIndicator_Pin NA2_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD6_Pin|spareOutput2_Pin
 80016b8:	f24b 0399 	movw	r3, #45209	@ 0xb099
 80016bc:	61fb      	str	r3, [r7, #28]
                          |faultIndicatorD3_Pin|chargeIndicator_Pin|NA2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016be:	2301      	movs	r3, #1
 80016c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c6:	2300      	movs	r3, #0
 80016c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ca:	f107 031c 	add.w	r3, r7, #28
 80016ce:	4619      	mov	r1, r3
 80016d0:	481d      	ldr	r0, [pc, #116]	@ (8001748 <MX_GPIO_Init+0x2cc>)
 80016d2:	f001 fa3b 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_SCK_Pin */
  GPIO_InitStruct.Pin = I2S3_SCK_Pin;
 80016d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016dc:	2302      	movs	r3, #2
 80016de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e4:	2300      	movs	r3, #0
 80016e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80016e8:	2306      	movs	r3, #6
 80016ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_SCK_GPIO_Port, &GPIO_InitStruct);
 80016ec:	f107 031c 	add.w	r3, r7, #28
 80016f0:	4619      	mov	r1, r3
 80016f2:	4813      	ldr	r0, [pc, #76]	@ (8001740 <MX_GPIO_Init+0x2c4>)
 80016f4:	f001 fa2a 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : spareOutput3_Pin */
  GPIO_InitStruct.Pin = spareOutput3_Pin;
 80016f8:	2340      	movs	r3, #64	@ 0x40
 80016fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fc:	2301      	movs	r3, #1
 80016fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001700:	2302      	movs	r3, #2
 8001702:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001704:	2302      	movs	r3, #2
 8001706:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(spareOutput3_GPIO_Port, &GPIO_InitStruct);
 8001708:	f107 031c 	add.w	r3, r7, #28
 800170c:	4619      	mov	r1, r3
 800170e:	480e      	ldr	r0, [pc, #56]	@ (8001748 <MX_GPIO_Init+0x2cc>)
 8001710:	f001 fa1c 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001714:	2302      	movs	r3, #2
 8001716:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001718:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800171c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001722:	f107 031c 	add.w	r3, r7, #28
 8001726:	4619      	mov	r1, r3
 8001728:	4804      	ldr	r0, [pc, #16]	@ (800173c <MX_GPIO_Init+0x2c0>)
 800172a:	f001 fa0f 	bl	8002b4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800172e:	bf00      	nop
 8001730:	3730      	adds	r7, #48	@ 0x30
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40023800 	.word	0x40023800
 800173c:	40021000 	.word	0x40021000
 8001740:	40020800 	.word	0x40020800
 8001744:	40020400 	.word	0x40020400
 8001748:	40020c00 	.word	0x40020c00
 800174c:	40020000 	.word	0x40020000

08001750 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001754:	b672      	cpsid	i
}
 8001756:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001758:	bf00      	nop
 800175a:	e7fd      	b.n	8001758 <Error_Handler+0x8>

0800175c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	607b      	str	r3, [r7, #4]
 8001766:	4b10      	ldr	r3, [pc, #64]	@ (80017a8 <HAL_MspInit+0x4c>)
 8001768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800176a:	4a0f      	ldr	r2, [pc, #60]	@ (80017a8 <HAL_MspInit+0x4c>)
 800176c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001770:	6453      	str	r3, [r2, #68]	@ 0x44
 8001772:	4b0d      	ldr	r3, [pc, #52]	@ (80017a8 <HAL_MspInit+0x4c>)
 8001774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001776:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800177a:	607b      	str	r3, [r7, #4]
 800177c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	603b      	str	r3, [r7, #0]
 8001782:	4b09      	ldr	r3, [pc, #36]	@ (80017a8 <HAL_MspInit+0x4c>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001786:	4a08      	ldr	r2, [pc, #32]	@ (80017a8 <HAL_MspInit+0x4c>)
 8001788:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800178c:	6413      	str	r3, [r2, #64]	@ 0x40
 800178e:	4b06      	ldr	r3, [pc, #24]	@ (80017a8 <HAL_MspInit+0x4c>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001792:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001796:	603b      	str	r3, [r7, #0]
 8001798:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800179a:	2007      	movs	r0, #7
 800179c:	f001 f8ac 	bl	80028f8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017a0:	bf00      	nop
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40023800 	.word	0x40023800

080017ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08e      	sub	sp, #56	@ 0x38
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a45      	ldr	r2, [pc, #276]	@ (80018e0 <HAL_ADC_MspInit+0x134>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d128      	bne.n	8001820 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	623b      	str	r3, [r7, #32]
 80017d2:	4b44      	ldr	r3, [pc, #272]	@ (80018e4 <HAL_ADC_MspInit+0x138>)
 80017d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017d6:	4a43      	ldr	r2, [pc, #268]	@ (80018e4 <HAL_ADC_MspInit+0x138>)
 80017d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80017de:	4b41      	ldr	r3, [pc, #260]	@ (80018e4 <HAL_ADC_MspInit+0x138>)
 80017e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017e6:	623b      	str	r3, [r7, #32]
 80017e8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	61fb      	str	r3, [r7, #28]
 80017ee:	4b3d      	ldr	r3, [pc, #244]	@ (80018e4 <HAL_ADC_MspInit+0x138>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f2:	4a3c      	ldr	r2, [pc, #240]	@ (80018e4 <HAL_ADC_MspInit+0x138>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017fa:	4b3a      	ldr	r3, [pc, #232]	@ (80018e4 <HAL_ADC_MspInit+0x138>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	61fb      	str	r3, [r7, #28]
 8001804:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = pedalADC_Pin;
 8001806:	2302      	movs	r3, #2
 8001808:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800180a:	2303      	movs	r3, #3
 800180c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(pedalADC_GPIO_Port, &GPIO_InitStruct);
 8001812:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001816:	4619      	mov	r1, r3
 8001818:	4833      	ldr	r0, [pc, #204]	@ (80018e8 <HAL_ADC_MspInit+0x13c>)
 800181a:	f001 f997 	bl	8002b4c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800181e:	e05a      	b.n	80018d6 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a31      	ldr	r2, [pc, #196]	@ (80018ec <HAL_ADC_MspInit+0x140>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d128      	bne.n	800187c <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	61bb      	str	r3, [r7, #24]
 800182e:	4b2d      	ldr	r3, [pc, #180]	@ (80018e4 <HAL_ADC_MspInit+0x138>)
 8001830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001832:	4a2c      	ldr	r2, [pc, #176]	@ (80018e4 <HAL_ADC_MspInit+0x138>)
 8001834:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001838:	6453      	str	r3, [r2, #68]	@ 0x44
 800183a:	4b2a      	ldr	r3, [pc, #168]	@ (80018e4 <HAL_ADC_MspInit+0x138>)
 800183c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800183e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001842:	61bb      	str	r3, [r7, #24]
 8001844:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	617b      	str	r3, [r7, #20]
 800184a:	4b26      	ldr	r3, [pc, #152]	@ (80018e4 <HAL_ADC_MspInit+0x138>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184e:	4a25      	ldr	r2, [pc, #148]	@ (80018e4 <HAL_ADC_MspInit+0x138>)
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	6313      	str	r3, [r2, #48]	@ 0x30
 8001856:	4b23      	ldr	r3, [pc, #140]	@ (80018e4 <HAL_ADC_MspInit+0x138>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	617b      	str	r3, [r7, #20]
 8001860:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = regenADC_Pin;
 8001862:	2304      	movs	r3, #4
 8001864:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001866:	2303      	movs	r3, #3
 8001868:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(regenADC_GPIO_Port, &GPIO_InitStruct);
 800186e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001872:	4619      	mov	r1, r3
 8001874:	481c      	ldr	r0, [pc, #112]	@ (80018e8 <HAL_ADC_MspInit+0x13c>)
 8001876:	f001 f969 	bl	8002b4c <HAL_GPIO_Init>
}
 800187a:	e02c      	b.n	80018d6 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a1b      	ldr	r2, [pc, #108]	@ (80018f0 <HAL_ADC_MspInit+0x144>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d127      	bne.n	80018d6 <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	613b      	str	r3, [r7, #16]
 800188a:	4b16      	ldr	r3, [pc, #88]	@ (80018e4 <HAL_ADC_MspInit+0x138>)
 800188c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800188e:	4a15      	ldr	r2, [pc, #84]	@ (80018e4 <HAL_ADC_MspInit+0x138>)
 8001890:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001894:	6453      	str	r3, [r2, #68]	@ 0x44
 8001896:	4b13      	ldr	r3, [pc, #76]	@ (80018e4 <HAL_ADC_MspInit+0x138>)
 8001898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800189a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800189e:	613b      	str	r3, [r7, #16]
 80018a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	4b0f      	ldr	r3, [pc, #60]	@ (80018e4 <HAL_ADC_MspInit+0x138>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018aa:	4a0e      	ldr	r2, [pc, #56]	@ (80018e4 <HAL_ADC_MspInit+0x138>)
 80018ac:	f043 0304 	orr.w	r3, r3, #4
 80018b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018b2:	4b0c      	ldr	r3, [pc, #48]	@ (80018e4 <HAL_ADC_MspInit+0x138>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b6:	f003 0304 	and.w	r3, r3, #4
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = auxVoltageIN_Pin;
 80018be:	2304      	movs	r3, #4
 80018c0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018c2:	2303      	movs	r3, #3
 80018c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(auxVoltageIN_GPIO_Port, &GPIO_InitStruct);
 80018ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018ce:	4619      	mov	r1, r3
 80018d0:	4808      	ldr	r0, [pc, #32]	@ (80018f4 <HAL_ADC_MspInit+0x148>)
 80018d2:	f001 f93b 	bl	8002b4c <HAL_GPIO_Init>
}
 80018d6:	bf00      	nop
 80018d8:	3738      	adds	r7, #56	@ 0x38
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40012000 	.word	0x40012000
 80018e4:	40023800 	.word	0x40023800
 80018e8:	40020000 	.word	0x40020000
 80018ec:	40012100 	.word	0x40012100
 80018f0:	40012200 	.word	0x40012200
 80018f4:	40020800 	.word	0x40020800

080018f8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08a      	sub	sp, #40	@ 0x28
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001900:	f107 0314 	add.w	r3, r7, #20
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a19      	ldr	r2, [pc, #100]	@ (800197c <HAL_CAN_MspInit+0x84>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d12c      	bne.n	8001974 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	613b      	str	r3, [r7, #16]
 800191e:	4b18      	ldr	r3, [pc, #96]	@ (8001980 <HAL_CAN_MspInit+0x88>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001922:	4a17      	ldr	r2, [pc, #92]	@ (8001980 <HAL_CAN_MspInit+0x88>)
 8001924:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001928:	6413      	str	r3, [r2, #64]	@ 0x40
 800192a:	4b15      	ldr	r3, [pc, #84]	@ (8001980 <HAL_CAN_MspInit+0x88>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001932:	613b      	str	r3, [r7, #16]
 8001934:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	4b11      	ldr	r3, [pc, #68]	@ (8001980 <HAL_CAN_MspInit+0x88>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193e:	4a10      	ldr	r2, [pc, #64]	@ (8001980 <HAL_CAN_MspInit+0x88>)
 8001940:	f043 0302 	orr.w	r3, r3, #2
 8001944:	6313      	str	r3, [r2, #48]	@ 0x30
 8001946:	4b0e      	ldr	r3, [pc, #56]	@ (8001980 <HAL_CAN_MspInit+0x88>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = canRX_Pin|canTX_Pin;
 8001952:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001956:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001958:	2302      	movs	r3, #2
 800195a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001960:	2303      	movs	r3, #3
 8001962:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001964:	2309      	movs	r3, #9
 8001966:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001968:	f107 0314 	add.w	r3, r7, #20
 800196c:	4619      	mov	r1, r3
 800196e:	4805      	ldr	r0, [pc, #20]	@ (8001984 <HAL_CAN_MspInit+0x8c>)
 8001970:	f001 f8ec 	bl	8002b4c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001974:	bf00      	nop
 8001976:	3728      	adds	r7, #40	@ 0x28
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40006400 	.word	0x40006400
 8001980:	40023800 	.word	0x40023800
 8001984:	40020400 	.word	0x40020400

08001988 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b08a      	sub	sp, #40	@ 0x28
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
 800199e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a17      	ldr	r2, [pc, #92]	@ (8001a04 <HAL_DAC_MspInit+0x7c>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d127      	bne.n	80019fa <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	613b      	str	r3, [r7, #16]
 80019ae:	4b16      	ldr	r3, [pc, #88]	@ (8001a08 <HAL_DAC_MspInit+0x80>)
 80019b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b2:	4a15      	ldr	r2, [pc, #84]	@ (8001a08 <HAL_DAC_MspInit+0x80>)
 80019b4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80019b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80019ba:	4b13      	ldr	r3, [pc, #76]	@ (8001a08 <HAL_DAC_MspInit+0x80>)
 80019bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80019c2:	613b      	str	r3, [r7, #16]
 80019c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001a08 <HAL_DAC_MspInit+0x80>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001a08 <HAL_DAC_MspInit+0x80>)
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001a08 <HAL_DAC_MspInit+0x80>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = pedalDAC_Pin|regenDAC_Pin;
 80019e2:	2330      	movs	r3, #48	@ 0x30
 80019e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019e6:	2303      	movs	r3, #3
 80019e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ee:	f107 0314 	add.w	r3, r7, #20
 80019f2:	4619      	mov	r1, r3
 80019f4:	4805      	ldr	r0, [pc, #20]	@ (8001a0c <HAL_DAC_MspInit+0x84>)
 80019f6:	f001 f8a9 	bl	8002b4c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80019fa:	bf00      	nop
 80019fc:	3728      	adds	r7, #40	@ 0x28
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40007400 	.word	0x40007400
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	40020000 	.word	0x40020000

08001a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a14:	bf00      	nop
 8001a16:	e7fd      	b.n	8001a14 <NMI_Handler+0x4>

08001a18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a1c:	bf00      	nop
 8001a1e:	e7fd      	b.n	8001a1c <HardFault_Handler+0x4>

08001a20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a24:	bf00      	nop
 8001a26:	e7fd      	b.n	8001a24 <MemManage_Handler+0x4>

08001a28 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a2c:	bf00      	nop
 8001a2e:	e7fd      	b.n	8001a2c <BusFault_Handler+0x4>

08001a30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a34:	bf00      	nop
 8001a36:	e7fd      	b.n	8001a34 <UsageFault_Handler+0x4>

08001a38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a46:	b480      	push	{r7}
 8001a48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a58:	bf00      	nop
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a66:	f000 f8d1 	bl	8001c0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001a74:	4802      	ldr	r0, [pc, #8]	@ (8001a80 <OTG_FS_IRQHandler+0x10>)
 8001a76:	f001 fb86 	bl	8003186 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	200017cc 	.word	0x200017cc

08001a84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a8c:	4a14      	ldr	r2, [pc, #80]	@ (8001ae0 <_sbrk+0x5c>)
 8001a8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ae4 <_sbrk+0x60>)
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a98:	4b13      	ldr	r3, [pc, #76]	@ (8001ae8 <_sbrk+0x64>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d102      	bne.n	8001aa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001aa0:	4b11      	ldr	r3, [pc, #68]	@ (8001ae8 <_sbrk+0x64>)
 8001aa2:	4a12      	ldr	r2, [pc, #72]	@ (8001aec <_sbrk+0x68>)
 8001aa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aa6:	4b10      	ldr	r3, [pc, #64]	@ (8001ae8 <_sbrk+0x64>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4413      	add	r3, r2
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d207      	bcs.n	8001ac4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ab4:	f007 fa68 	bl	8008f88 <__errno>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	220c      	movs	r2, #12
 8001abc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001abe:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac2:	e009      	b.n	8001ad8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ac4:	4b08      	ldr	r3, [pc, #32]	@ (8001ae8 <_sbrk+0x64>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aca:	4b07      	ldr	r3, [pc, #28]	@ (8001ae8 <_sbrk+0x64>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	4a05      	ldr	r2, [pc, #20]	@ (8001ae8 <_sbrk+0x64>)
 8001ad4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3718      	adds	r7, #24
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20020000 	.word	0x20020000
 8001ae4:	00000400 	.word	0x00000400
 8001ae8:	200002e4 	.word	0x200002e4
 8001aec:	20002040 	.word	0x20002040

08001af0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001af4:	4b06      	ldr	r3, [pc, #24]	@ (8001b10 <SystemInit+0x20>)
 8001af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001afa:	4a05      	ldr	r2, [pc, #20]	@ (8001b10 <SystemInit+0x20>)
 8001afc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b18:	480d      	ldr	r0, [pc, #52]	@ (8001b50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b1a:	490e      	ldr	r1, [pc, #56]	@ (8001b54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b1c:	4a0e      	ldr	r2, [pc, #56]	@ (8001b58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b20:	e002      	b.n	8001b28 <LoopCopyDataInit>

08001b22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b26:	3304      	adds	r3, #4

08001b28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b2c:	d3f9      	bcc.n	8001b22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b2e:	4a0b      	ldr	r2, [pc, #44]	@ (8001b5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b30:	4c0b      	ldr	r4, [pc, #44]	@ (8001b60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b34:	e001      	b.n	8001b3a <LoopFillZerobss>

08001b36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b38:	3204      	adds	r2, #4

08001b3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b3c:	d3fb      	bcc.n	8001b36 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b3e:	f7ff ffd7 	bl	8001af0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b42:	f007 fa27 	bl	8008f94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b46:	f7fe fd13 	bl	8000570 <main>
  bx  lr    
 8001b4a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b54:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8001b58:	08009a10 	.word	0x08009a10
  ldr r2, =_sbss
 8001b5c:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8001b60:	20002040 	.word	0x20002040

08001b64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b64:	e7fe      	b.n	8001b64 <ADC_IRQHandler>
	...

08001b68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b6c:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba8 <HAL_Init+0x40>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a0d      	ldr	r2, [pc, #52]	@ (8001ba8 <HAL_Init+0x40>)
 8001b72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b78:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba8 <HAL_Init+0x40>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a0a      	ldr	r2, [pc, #40]	@ (8001ba8 <HAL_Init+0x40>)
 8001b7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b84:	4b08      	ldr	r3, [pc, #32]	@ (8001ba8 <HAL_Init+0x40>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a07      	ldr	r2, [pc, #28]	@ (8001ba8 <HAL_Init+0x40>)
 8001b8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b90:	2003      	movs	r0, #3
 8001b92:	f000 feb1 	bl	80028f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b96:	2000      	movs	r0, #0
 8001b98:	f000 f808 	bl	8001bac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b9c:	f7ff fdde 	bl	800175c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40023c00 	.word	0x40023c00

08001bac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bb4:	4b12      	ldr	r3, [pc, #72]	@ (8001c00 <HAL_InitTick+0x54>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	4b12      	ldr	r3, [pc, #72]	@ (8001c04 <HAL_InitTick+0x58>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f000 fec9 	bl	8002962 <HAL_SYSTICK_Config>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e00e      	b.n	8001bf8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2b0f      	cmp	r3, #15
 8001bde:	d80a      	bhi.n	8001bf6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001be0:	2200      	movs	r2, #0
 8001be2:	6879      	ldr	r1, [r7, #4]
 8001be4:	f04f 30ff 	mov.w	r0, #4294967295
 8001be8:	f000 fe91 	bl	800290e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bec:	4a06      	ldr	r2, [pc, #24]	@ (8001c08 <HAL_InitTick+0x5c>)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	e000      	b.n	8001bf8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	20000000 	.word	0x20000000
 8001c04:	20000008 	.word	0x20000008
 8001c08:	20000004 	.word	0x20000004

08001c0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c10:	4b06      	ldr	r3, [pc, #24]	@ (8001c2c <HAL_IncTick+0x20>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	461a      	mov	r2, r3
 8001c16:	4b06      	ldr	r3, [pc, #24]	@ (8001c30 <HAL_IncTick+0x24>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	4a04      	ldr	r2, [pc, #16]	@ (8001c30 <HAL_IncTick+0x24>)
 8001c1e:	6013      	str	r3, [r2, #0]
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	20000008 	.word	0x20000008
 8001c30:	200002e8 	.word	0x200002e8

08001c34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  return uwTick;
 8001c38:	4b03      	ldr	r3, [pc, #12]	@ (8001c48 <HAL_GetTick+0x14>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	200002e8 	.word	0x200002e8

08001c4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c54:	f7ff ffee 	bl	8001c34 <HAL_GetTick>
 8001c58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c64:	d005      	beq.n	8001c72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c66:	4b0a      	ldr	r3, [pc, #40]	@ (8001c90 <HAL_Delay+0x44>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	4413      	add	r3, r2
 8001c70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c72:	bf00      	nop
 8001c74:	f7ff ffde 	bl	8001c34 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d8f7      	bhi.n	8001c74 <HAL_Delay+0x28>
  {
  }
}
 8001c84:	bf00      	nop
 8001c86:	bf00      	nop
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20000008 	.word	0x20000008

08001c94 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e033      	b.n	8001d12 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d109      	bne.n	8001cc6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f7ff fd7a 	bl	80017ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cca:	f003 0310 	and.w	r3, r3, #16
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d118      	bne.n	8001d04 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001cda:	f023 0302 	bic.w	r3, r3, #2
 8001cde:	f043 0202 	orr.w	r2, r3, #2
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 fa1a 	bl	8002120 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf6:	f023 0303 	bic.w	r3, r3, #3
 8001cfa:	f043 0201 	orr.w	r2, r3, #1
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d02:	e001      	b.n	8001d08 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
	...

08001d1c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001d24:	2300      	movs	r3, #0
 8001d26:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d101      	bne.n	8001d36 <HAL_ADC_Start+0x1a>
 8001d32:	2302      	movs	r3, #2
 8001d34:	e0b2      	b.n	8001e9c <HAL_ADC_Start+0x180>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d018      	beq.n	8001d7e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	689a      	ldr	r2, [r3, #8]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f042 0201 	orr.w	r2, r2, #1
 8001d5a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d5c:	4b52      	ldr	r3, [pc, #328]	@ (8001ea8 <HAL_ADC_Start+0x18c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a52      	ldr	r2, [pc, #328]	@ (8001eac <HAL_ADC_Start+0x190>)
 8001d62:	fba2 2303 	umull	r2, r3, r2, r3
 8001d66:	0c9a      	lsrs	r2, r3, #18
 8001d68:	4613      	mov	r3, r2
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	4413      	add	r3, r2
 8001d6e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001d70:	e002      	b.n	8001d78 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	3b01      	subs	r3, #1
 8001d76:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1f9      	bne.n	8001d72 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d17a      	bne.n	8001e82 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d90:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001d94:	f023 0301 	bic.w	r3, r3, #1
 8001d98:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d007      	beq.n	8001dbe <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001db6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001dca:	d106      	bne.n	8001dda <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd0:	f023 0206 	bic.w	r2, r3, #6
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	645a      	str	r2, [r3, #68]	@ 0x44
 8001dd8:	e002      	b.n	8001de0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	645a      	str	r2, [r3, #68]	@ 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001de8:	4b31      	ldr	r3, [pc, #196]	@ (8001eb0 <HAL_ADC_Start+0x194>)
 8001dea:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001df4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f003 031f 	and.w	r3, r3, #31
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d12a      	bne.n	8001e58 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a2b      	ldr	r2, [pc, #172]	@ (8001eb4 <HAL_ADC_Start+0x198>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d015      	beq.n	8001e38 <HAL_ADC_Start+0x11c>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a29      	ldr	r2, [pc, #164]	@ (8001eb8 <HAL_ADC_Start+0x19c>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d105      	bne.n	8001e22 <HAL_ADC_Start+0x106>
 8001e16:	4b26      	ldr	r3, [pc, #152]	@ (8001eb0 <HAL_ADC_Start+0x194>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f003 031f 	and.w	r3, r3, #31
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d00a      	beq.n	8001e38 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a25      	ldr	r2, [pc, #148]	@ (8001ebc <HAL_ADC_Start+0x1a0>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d136      	bne.n	8001e9a <HAL_ADC_Start+0x17e>
 8001e2c:	4b20      	ldr	r3, [pc, #128]	@ (8001eb0 <HAL_ADC_Start+0x194>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f003 0310 	and.w	r3, r3, #16
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d130      	bne.n	8001e9a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d129      	bne.n	8001e9a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001e54:	609a      	str	r2, [r3, #8]
 8001e56:	e020      	b.n	8001e9a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a15      	ldr	r2, [pc, #84]	@ (8001eb4 <HAL_ADC_Start+0x198>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d11b      	bne.n	8001e9a <HAL_ADC_Start+0x17e>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d114      	bne.n	8001e9a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	689a      	ldr	r2, [r3, #8]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	e00b      	b.n	8001e9a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e86:	f043 0210 	orr.w	r2, r3, #16
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e92:	f043 0201 	orr.w	r2, r3, #1
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3714      	adds	r7, #20
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	20000000 	.word	0x20000000
 8001eac:	431bde83 	.word	0x431bde83
 8001eb0:	40012300 	.word	0x40012300
 8001eb4:	40012000 	.word	0x40012000
 8001eb8:	40012100 	.word	0x40012100
 8001ebc:	40012200 	.word	0x40012200

08001ec0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
	...

08001edc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d101      	bne.n	8001ef8 <HAL_ADC_ConfigChannel+0x1c>
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	e105      	b.n	8002104 <HAL_ADC_ConfigChannel+0x228>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2b09      	cmp	r3, #9
 8001f06:	d925      	bls.n	8001f54 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68d9      	ldr	r1, [r3, #12]
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	461a      	mov	r2, r3
 8001f16:	4613      	mov	r3, r2
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	4413      	add	r3, r2
 8001f1c:	3b1e      	subs	r3, #30
 8001f1e:	2207      	movs	r2, #7
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	43da      	mvns	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	400a      	ands	r2, r1
 8001f2c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68d9      	ldr	r1, [r3, #12]
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	689a      	ldr	r2, [r3, #8]
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	4618      	mov	r0, r3
 8001f40:	4603      	mov	r3, r0
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	4403      	add	r3, r0
 8001f46:	3b1e      	subs	r3, #30
 8001f48:	409a      	lsls	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	60da      	str	r2, [r3, #12]
 8001f52:	e022      	b.n	8001f9a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	6919      	ldr	r1, [r3, #16]
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	461a      	mov	r2, r3
 8001f62:	4613      	mov	r3, r2
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	4413      	add	r3, r2
 8001f68:	2207      	movs	r2, #7
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43da      	mvns	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	400a      	ands	r2, r1
 8001f76:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6919      	ldr	r1, [r3, #16]
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	689a      	ldr	r2, [r3, #8]
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	4618      	mov	r0, r3
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	4403      	add	r3, r0
 8001f90:	409a      	lsls	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	430a      	orrs	r2, r1
 8001f98:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	2b06      	cmp	r3, #6
 8001fa0:	d824      	bhi.n	8001fec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685a      	ldr	r2, [r3, #4]
 8001fac:	4613      	mov	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	4413      	add	r3, r2
 8001fb2:	3b05      	subs	r3, #5
 8001fb4:	221f      	movs	r2, #31
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	43da      	mvns	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	400a      	ands	r2, r1
 8001fc2:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	4413      	add	r3, r2
 8001fdc:	3b05      	subs	r3, #5
 8001fde:	fa00 f203 	lsl.w	r2, r0, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001fea:	e04c      	b.n	8002086 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	2b0c      	cmp	r3, #12
 8001ff2:	d824      	bhi.n	800203e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685a      	ldr	r2, [r3, #4]
 8001ffe:	4613      	mov	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	4413      	add	r3, r2
 8002004:	3b23      	subs	r3, #35	@ 0x23
 8002006:	221f      	movs	r2, #31
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	43da      	mvns	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	400a      	ands	r2, r1
 8002014:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	b29b      	uxth	r3, r3
 8002022:	4618      	mov	r0, r3
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685a      	ldr	r2, [r3, #4]
 8002028:	4613      	mov	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4413      	add	r3, r2
 800202e:	3b23      	subs	r3, #35	@ 0x23
 8002030:	fa00 f203 	lsl.w	r2, r0, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	430a      	orrs	r2, r1
 800203a:	631a      	str	r2, [r3, #48]	@ 0x30
 800203c:	e023      	b.n	8002086 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685a      	ldr	r2, [r3, #4]
 8002048:	4613      	mov	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	4413      	add	r3, r2
 800204e:	3b41      	subs	r3, #65	@ 0x41
 8002050:	221f      	movs	r2, #31
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	43da      	mvns	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	400a      	ands	r2, r1
 800205e:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	b29b      	uxth	r3, r3
 800206c:	4618      	mov	r0, r3
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685a      	ldr	r2, [r3, #4]
 8002072:	4613      	mov	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4413      	add	r3, r2
 8002078:	3b41      	subs	r3, #65	@ 0x41
 800207a:	fa00 f203 	lsl.w	r2, r0, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	430a      	orrs	r2, r1
 8002084:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002086:	4b22      	ldr	r3, [pc, #136]	@ (8002110 <HAL_ADC_ConfigChannel+0x234>)
 8002088:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a21      	ldr	r2, [pc, #132]	@ (8002114 <HAL_ADC_ConfigChannel+0x238>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d109      	bne.n	80020a8 <HAL_ADC_ConfigChannel+0x1cc>
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2b12      	cmp	r3, #18
 800209a:	d105      	bne.n	80020a8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a19      	ldr	r2, [pc, #100]	@ (8002114 <HAL_ADC_ConfigChannel+0x238>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d123      	bne.n	80020fa <HAL_ADC_ConfigChannel+0x21e>
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2b10      	cmp	r3, #16
 80020b8:	d003      	beq.n	80020c2 <HAL_ADC_ConfigChannel+0x1e6>
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2b11      	cmp	r3, #17
 80020c0:	d11b      	bne.n	80020fa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2b10      	cmp	r3, #16
 80020d4:	d111      	bne.n	80020fa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020d6:	4b10      	ldr	r3, [pc, #64]	@ (8002118 <HAL_ADC_ConfigChannel+0x23c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a10      	ldr	r2, [pc, #64]	@ (800211c <HAL_ADC_ConfigChannel+0x240>)
 80020dc:	fba2 2303 	umull	r2, r3, r2, r3
 80020e0:	0c9a      	lsrs	r2, r3, #18
 80020e2:	4613      	mov	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80020ec:	e002      	b.n	80020f4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	3b01      	subs	r3, #1
 80020f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1f9      	bne.n	80020ee <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3714      	adds	r7, #20
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	40012300 	.word	0x40012300
 8002114:	40012000 	.word	0x40012000
 8002118:	20000000 	.word	0x20000000
 800211c:	431bde83 	.word	0x431bde83

08002120 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002128:	4b79      	ldr	r3, [pc, #484]	@ (8002310 <ADC_Init+0x1f0>)
 800212a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	685a      	ldr	r2, [r3, #4]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	431a      	orrs	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	685a      	ldr	r2, [r3, #4]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002154:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6859      	ldr	r1, [r3, #4]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	021a      	lsls	r2, r3, #8
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	430a      	orrs	r2, r1
 8002168:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002178:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6859      	ldr	r1, [r3, #4]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	430a      	orrs	r2, r1
 800218a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689a      	ldr	r2, [r3, #8]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800219a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6899      	ldr	r1, [r3, #8]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68da      	ldr	r2, [r3, #12]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021b2:	4a58      	ldr	r2, [pc, #352]	@ (8002314 <ADC_Init+0x1f4>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d022      	beq.n	80021fe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	689a      	ldr	r2, [r3, #8]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80021c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6899      	ldr	r1, [r3, #8]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	430a      	orrs	r2, r1
 80021d8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80021e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6899      	ldr	r1, [r3, #8]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	430a      	orrs	r2, r1
 80021fa:	609a      	str	r2, [r3, #8]
 80021fc:	e00f      	b.n	800221e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800220c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689a      	ldr	r2, [r3, #8]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800221c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f022 0202 	bic.w	r2, r2, #2
 800222c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	6899      	ldr	r1, [r3, #8]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	7e1b      	ldrb	r3, [r3, #24]
 8002238:	005a      	lsls	r2, r3, #1
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	430a      	orrs	r2, r1
 8002240:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d01b      	beq.n	8002284 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800225a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	685a      	ldr	r2, [r3, #4]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800226a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6859      	ldr	r1, [r3, #4]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002276:	3b01      	subs	r3, #1
 8002278:	035a      	lsls	r2, r3, #13
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	430a      	orrs	r2, r1
 8002280:	605a      	str	r2, [r3, #4]
 8002282:	e007      	b.n	8002294 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	685a      	ldr	r2, [r3, #4]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002292:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80022a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	3b01      	subs	r3, #1
 80022b0:	051a      	lsls	r2, r3, #20
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	430a      	orrs	r2, r1
 80022b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80022c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6899      	ldr	r1, [r3, #8]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80022d6:	025a      	lsls	r2, r3, #9
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	430a      	orrs	r2, r1
 80022de:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689a      	ldr	r2, [r3, #8]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6899      	ldr	r1, [r3, #8]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	029a      	lsls	r2, r3, #10
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	430a      	orrs	r2, r1
 8002302:	609a      	str	r2, [r3, #8]
}
 8002304:	bf00      	nop
 8002306:	3714      	adds	r7, #20
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	40012300 	.word	0x40012300
 8002314:	0f000001 	.word	0x0f000001

08002318 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e0ed      	b.n	8002506 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	d102      	bne.n	800233c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7ff fade 	bl	80018f8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f042 0201 	orr.w	r2, r2, #1
 800234a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800234c:	f7ff fc72 	bl	8001c34 <HAL_GetTick>
 8002350:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002352:	e012      	b.n	800237a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002354:	f7ff fc6e 	bl	8001c34 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b0a      	cmp	r3, #10
 8002360:	d90b      	bls.n	800237a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002366:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2205      	movs	r2, #5
 8002372:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e0c5      	b.n	8002506 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	2b00      	cmp	r3, #0
 8002386:	d0e5      	beq.n	8002354 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 0202 	bic.w	r2, r2, #2
 8002396:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002398:	f7ff fc4c 	bl	8001c34 <HAL_GetTick>
 800239c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800239e:	e012      	b.n	80023c6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023a0:	f7ff fc48 	bl	8001c34 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b0a      	cmp	r3, #10
 80023ac:	d90b      	bls.n	80023c6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2205      	movs	r2, #5
 80023be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e09f      	b.n	8002506 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1e5      	bne.n	80023a0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	7e1b      	ldrb	r3, [r3, #24]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d108      	bne.n	80023ee <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	e007      	b.n	80023fe <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80023fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	7e5b      	ldrb	r3, [r3, #25]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d108      	bne.n	8002418 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	e007      	b.n	8002428 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002426:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	7e9b      	ldrb	r3, [r3, #26]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d108      	bne.n	8002442 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f042 0220 	orr.w	r2, r2, #32
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	e007      	b.n	8002452 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f022 0220 	bic.w	r2, r2, #32
 8002450:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	7edb      	ldrb	r3, [r3, #27]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d108      	bne.n	800246c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f022 0210 	bic.w	r2, r2, #16
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	e007      	b.n	800247c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f042 0210 	orr.w	r2, r2, #16
 800247a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	7f1b      	ldrb	r3, [r3, #28]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d108      	bne.n	8002496 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f042 0208 	orr.w	r2, r2, #8
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	e007      	b.n	80024a6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 0208 	bic.w	r2, r2, #8
 80024a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	7f5b      	ldrb	r3, [r3, #29]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d108      	bne.n	80024c0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f042 0204 	orr.w	r2, r2, #4
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	e007      	b.n	80024d0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f022 0204 	bic.w	r2, r2, #4
 80024ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689a      	ldr	r2, [r3, #8]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	431a      	orrs	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	431a      	orrs	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	695b      	ldr	r3, [r3, #20]
 80024e4:	ea42 0103 	orr.w	r1, r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	1e5a      	subs	r2, r3, #1
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	430a      	orrs	r2, r1
 80024f4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
	...

08002510 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002510:	b480      	push	{r7}
 8002512:	b087      	sub	sp, #28
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002526:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002528:	7cfb      	ldrb	r3, [r7, #19]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d003      	beq.n	8002536 <HAL_CAN_ConfigFilter+0x26>
 800252e:	7cfb      	ldrb	r3, [r7, #19]
 8002530:	2b02      	cmp	r3, #2
 8002532:	f040 80be 	bne.w	80026b2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002536:	4b65      	ldr	r3, [pc, #404]	@ (80026cc <HAL_CAN_ConfigFilter+0x1bc>)
 8002538:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002540:	f043 0201 	orr.w	r2, r3, #1
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002550:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002564:	021b      	lsls	r3, r3, #8
 8002566:	431a      	orrs	r2, r3
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	f003 031f 	and.w	r3, r3, #31
 8002576:	2201      	movs	r2, #1
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	43db      	mvns	r3, r3
 8002588:	401a      	ands	r2, r3
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	69db      	ldr	r3, [r3, #28]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d123      	bne.n	80025e0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	43db      	mvns	r3, r3
 80025a2:	401a      	ands	r2, r3
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80025ba:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	3248      	adds	r2, #72	@ 0x48
 80025c0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80025d4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80025d6:	6979      	ldr	r1, [r7, #20]
 80025d8:	3348      	adds	r3, #72	@ 0x48
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	440b      	add	r3, r1
 80025de:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	69db      	ldr	r3, [r3, #28]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d122      	bne.n	800262e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	431a      	orrs	r2, r3
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002604:	683a      	ldr	r2, [r7, #0]
 8002606:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002608:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	3248      	adds	r2, #72	@ 0x48
 800260e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002622:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002624:	6979      	ldr	r1, [r7, #20]
 8002626:	3348      	adds	r3, #72	@ 0x48
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	440b      	add	r3, r1
 800262c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d109      	bne.n	800264a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	43db      	mvns	r3, r3
 8002640:	401a      	ands	r2, r3
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002648:	e007      	b.n	800265a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	431a      	orrs	r2, r3
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d109      	bne.n	8002676 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	43db      	mvns	r3, r3
 800266c:	401a      	ands	r2, r3
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002674:	e007      	b.n	8002686 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	431a      	orrs	r2, r3
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	6a1b      	ldr	r3, [r3, #32]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d107      	bne.n	800269e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	431a      	orrs	r2, r3
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80026a4:	f023 0201 	bic.w	r2, r3, #1
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80026ae:	2300      	movs	r3, #0
 80026b0:	e006      	b.n	80026c0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
  }
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	371c      	adds	r7, #28
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	40006400 	.word	0x40006400

080026d0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d12e      	bne.n	8002742 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2202      	movs	r2, #2
 80026e8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 0201 	bic.w	r2, r2, #1
 80026fa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80026fc:	f7ff fa9a 	bl	8001c34 <HAL_GetTick>
 8002700:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002702:	e012      	b.n	800272a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002704:	f7ff fa96 	bl	8001c34 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b0a      	cmp	r3, #10
 8002710:	d90b      	bls.n	800272a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002716:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2205      	movs	r2, #5
 8002722:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e012      	b.n	8002750 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	2b00      	cmp	r3, #0
 8002736:	d1e5      	bne.n	8002704 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800273e:	2300      	movs	r3, #0
 8002740:	e006      	b.n	8002750 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002746:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
  }
}
 8002750:	4618      	mov	r0, r3
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002768:	4b0c      	ldr	r3, [pc, #48]	@ (800279c <__NVIC_SetPriorityGrouping+0x44>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800276e:	68ba      	ldr	r2, [r7, #8]
 8002770:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002774:	4013      	ands	r3, r2
 8002776:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002780:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002784:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800278a:	4a04      	ldr	r2, [pc, #16]	@ (800279c <__NVIC_SetPriorityGrouping+0x44>)
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	60d3      	str	r3, [r2, #12]
}
 8002790:	bf00      	nop
 8002792:	3714      	adds	r7, #20
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr
 800279c:	e000ed00 	.word	0xe000ed00

080027a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027a4:	4b04      	ldr	r3, [pc, #16]	@ (80027b8 <__NVIC_GetPriorityGrouping+0x18>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	0a1b      	lsrs	r3, r3, #8
 80027aa:	f003 0307 	and.w	r3, r3, #7
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	e000ed00 	.word	0xe000ed00

080027bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	4603      	mov	r3, r0
 80027c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	db0b      	blt.n	80027e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027ce:	79fb      	ldrb	r3, [r7, #7]
 80027d0:	f003 021f 	and.w	r2, r3, #31
 80027d4:	4907      	ldr	r1, [pc, #28]	@ (80027f4 <__NVIC_EnableIRQ+0x38>)
 80027d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027da:	095b      	lsrs	r3, r3, #5
 80027dc:	2001      	movs	r0, #1
 80027de:	fa00 f202 	lsl.w	r2, r0, r2
 80027e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	e000e100 	.word	0xe000e100

080027f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	4603      	mov	r3, r0
 8002800:	6039      	str	r1, [r7, #0]
 8002802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002808:	2b00      	cmp	r3, #0
 800280a:	db0a      	blt.n	8002822 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	b2da      	uxtb	r2, r3
 8002810:	490c      	ldr	r1, [pc, #48]	@ (8002844 <__NVIC_SetPriority+0x4c>)
 8002812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002816:	0112      	lsls	r2, r2, #4
 8002818:	b2d2      	uxtb	r2, r2
 800281a:	440b      	add	r3, r1
 800281c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002820:	e00a      	b.n	8002838 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	b2da      	uxtb	r2, r3
 8002826:	4908      	ldr	r1, [pc, #32]	@ (8002848 <__NVIC_SetPriority+0x50>)
 8002828:	79fb      	ldrb	r3, [r7, #7]
 800282a:	f003 030f 	and.w	r3, r3, #15
 800282e:	3b04      	subs	r3, #4
 8002830:	0112      	lsls	r2, r2, #4
 8002832:	b2d2      	uxtb	r2, r2
 8002834:	440b      	add	r3, r1
 8002836:	761a      	strb	r2, [r3, #24]
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	e000e100 	.word	0xe000e100
 8002848:	e000ed00 	.word	0xe000ed00

0800284c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800284c:	b480      	push	{r7}
 800284e:	b089      	sub	sp, #36	@ 0x24
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f003 0307 	and.w	r3, r3, #7
 800285e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	f1c3 0307 	rsb	r3, r3, #7
 8002866:	2b04      	cmp	r3, #4
 8002868:	bf28      	it	cs
 800286a:	2304      	movcs	r3, #4
 800286c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	3304      	adds	r3, #4
 8002872:	2b06      	cmp	r3, #6
 8002874:	d902      	bls.n	800287c <NVIC_EncodePriority+0x30>
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	3b03      	subs	r3, #3
 800287a:	e000      	b.n	800287e <NVIC_EncodePriority+0x32>
 800287c:	2300      	movs	r3, #0
 800287e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002880:	f04f 32ff 	mov.w	r2, #4294967295
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	43da      	mvns	r2, r3
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	401a      	ands	r2, r3
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002894:	f04f 31ff 	mov.w	r1, #4294967295
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	fa01 f303 	lsl.w	r3, r1, r3
 800289e:	43d9      	mvns	r1, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a4:	4313      	orrs	r3, r2
         );
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3724      	adds	r7, #36	@ 0x24
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
	...

080028b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3b01      	subs	r3, #1
 80028c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028c4:	d301      	bcc.n	80028ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028c6:	2301      	movs	r3, #1
 80028c8:	e00f      	b.n	80028ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028ca:	4a0a      	ldr	r2, [pc, #40]	@ (80028f4 <SysTick_Config+0x40>)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3b01      	subs	r3, #1
 80028d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028d2:	210f      	movs	r1, #15
 80028d4:	f04f 30ff 	mov.w	r0, #4294967295
 80028d8:	f7ff ff8e 	bl	80027f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028dc:	4b05      	ldr	r3, [pc, #20]	@ (80028f4 <SysTick_Config+0x40>)
 80028de:	2200      	movs	r2, #0
 80028e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028e2:	4b04      	ldr	r3, [pc, #16]	@ (80028f4 <SysTick_Config+0x40>)
 80028e4:	2207      	movs	r2, #7
 80028e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	e000e010 	.word	0xe000e010

080028f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f7ff ff29 	bl	8002758 <__NVIC_SetPriorityGrouping>
}
 8002906:	bf00      	nop
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800290e:	b580      	push	{r7, lr}
 8002910:	b086      	sub	sp, #24
 8002912:	af00      	add	r7, sp, #0
 8002914:	4603      	mov	r3, r0
 8002916:	60b9      	str	r1, [r7, #8]
 8002918:	607a      	str	r2, [r7, #4]
 800291a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800291c:	2300      	movs	r3, #0
 800291e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002920:	f7ff ff3e 	bl	80027a0 <__NVIC_GetPriorityGrouping>
 8002924:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	68b9      	ldr	r1, [r7, #8]
 800292a:	6978      	ldr	r0, [r7, #20]
 800292c:	f7ff ff8e 	bl	800284c <NVIC_EncodePriority>
 8002930:	4602      	mov	r2, r0
 8002932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002936:	4611      	mov	r1, r2
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff ff5d 	bl	80027f8 <__NVIC_SetPriority>
}
 800293e:	bf00      	nop
 8002940:	3718      	adds	r7, #24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b082      	sub	sp, #8
 800294a:	af00      	add	r7, sp, #0
 800294c:	4603      	mov	r3, r0
 800294e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff ff31 	bl	80027bc <__NVIC_EnableIRQ>
}
 800295a:	bf00      	nop
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b082      	sub	sp, #8
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f7ff ffa2 	bl	80028b4 <SysTick_Config>
 8002970:	4603      	mov	r3, r0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b082      	sub	sp, #8
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d101      	bne.n	800298c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e014      	b.n	80029b6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	791b      	ldrb	r3, [r3, #4]
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d105      	bne.n	80029a2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f7fe fff3 	bl	8001988 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2202      	movs	r2, #2
 80029a6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80029be:	b480      	push	{r7}
 80029c0:	b083      	sub	sp, #12
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
 80029c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	795b      	ldrb	r3, [r3, #5]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d101      	bne.n	80029d4 <HAL_DAC_Start+0x16>
 80029d0:	2302      	movs	r3, #2
 80029d2:	e040      	b.n	8002a56 <HAL_DAC_Start+0x98>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2202      	movs	r2, #2
 80029de:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6819      	ldr	r1, [r3, #0]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	f003 0310 	and.w	r3, r3, #16
 80029ec:	2201      	movs	r2, #1
 80029ee:	409a      	lsls	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	430a      	orrs	r2, r1
 80029f6:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10f      	bne.n	8002a1e <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8002a08:	2b3c      	cmp	r3, #60	@ 0x3c
 8002a0a:	d11d      	bne.n	8002a48 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	685a      	ldr	r2, [r3, #4]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f042 0201 	orr.w	r2, r2, #1
 8002a1a:	605a      	str	r2, [r3, #4]
 8002a1c:	e014      	b.n	8002a48 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	f003 0310 	and.w	r3, r3, #16
 8002a2e:	213c      	movs	r1, #60	@ 0x3c
 8002a30:	fa01 f303 	lsl.w	r3, r1, r3
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d107      	bne.n	8002a48 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f042 0202 	orr.w	r2, r2, #2
 8002a46:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr

08002a62 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b087      	sub	sp, #28
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	60f8      	str	r0, [r7, #12]
 8002a6a:	60b9      	str	r1, [r7, #8]
 8002a6c:	607a      	str	r2, [r7, #4]
 8002a6e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002a70:	2300      	movs	r3, #0
 8002a72:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d105      	bne.n	8002a8c <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002a80:	697a      	ldr	r2, [r7, #20]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4413      	add	r3, r2
 8002a86:	3308      	adds	r3, #8
 8002a88:	617b      	str	r3, [r7, #20]
 8002a8a:	e004      	b.n	8002a96 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002a8c:	697a      	ldr	r2, [r7, #20]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4413      	add	r3, r2
 8002a92:	3314      	adds	r3, #20
 8002a94:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	461a      	mov	r2, r3
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	371c      	adds	r7, #28
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b087      	sub	sp, #28
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	795b      	ldrb	r3, [r3, #5]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d101      	bne.n	8002ac4 <HAL_DAC_ConfigChannel+0x18>
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	e03c      	b.n	8002b3e <HAL_DAC_ConfigChannel+0x92>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2202      	movs	r2, #2
 8002ace:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f003 0310 	and.w	r3, r3, #16
 8002ade:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	43db      	mvns	r3, r3
 8002ae8:	697a      	ldr	r2, [r7, #20]
 8002aea:	4013      	ands	r3, r2
 8002aec:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f003 0310 	and.w	r3, r3, #16
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	fa02 f303 	lsl.w	r3, r2, r3
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	697a      	ldr	r2, [r7, #20]
 8002b12:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6819      	ldr	r1, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f003 0310 	and.w	r3, r3, #16
 8002b20:	22c0      	movs	r2, #192	@ 0xc0
 8002b22:	fa02 f303 	lsl.w	r3, r2, r3
 8002b26:	43da      	mvns	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	400a      	ands	r2, r1
 8002b2e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2201      	movs	r2, #1
 8002b34:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	371c      	adds	r7, #28
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
	...

08002b4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b089      	sub	sp, #36	@ 0x24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b56:	2300      	movs	r3, #0
 8002b58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b62:	2300      	movs	r3, #0
 8002b64:	61fb      	str	r3, [r7, #28]
 8002b66:	e16b      	b.n	8002e40 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b68:	2201      	movs	r2, #1
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	f040 815a 	bne.w	8002e3a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f003 0303 	and.w	r3, r3, #3
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d005      	beq.n	8002b9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d130      	bne.n	8002c00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	2203      	movs	r2, #3
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	43db      	mvns	r3, r3
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	68da      	ldr	r2, [r3, #12]
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	4013      	ands	r3, r2
 8002be2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	091b      	lsrs	r3, r3, #4
 8002bea:	f003 0201 	and.w	r2, r3, #1
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f003 0303 	and.w	r3, r3, #3
 8002c08:	2b03      	cmp	r3, #3
 8002c0a:	d017      	beq.n	8002c3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	2203      	movs	r2, #3
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	4013      	ands	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f003 0303 	and.w	r3, r3, #3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d123      	bne.n	8002c90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	08da      	lsrs	r2, r3, #3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3208      	adds	r2, #8
 8002c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	f003 0307 	and.w	r3, r3, #7
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	220f      	movs	r2, #15
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	43db      	mvns	r3, r3
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	691a      	ldr	r2, [r3, #16]
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	f003 0307 	and.w	r3, r3, #7
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	08da      	lsrs	r2, r3, #3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	3208      	adds	r2, #8
 8002c8a:	69b9      	ldr	r1, [r7, #24]
 8002c8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	2203      	movs	r2, #3
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f003 0203 	and.w	r2, r3, #3
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f000 80b4 	beq.w	8002e3a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60fb      	str	r3, [r7, #12]
 8002cd6:	4b60      	ldr	r3, [pc, #384]	@ (8002e58 <HAL_GPIO_Init+0x30c>)
 8002cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cda:	4a5f      	ldr	r2, [pc, #380]	@ (8002e58 <HAL_GPIO_Init+0x30c>)
 8002cdc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ce0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ce2:	4b5d      	ldr	r3, [pc, #372]	@ (8002e58 <HAL_GPIO_Init+0x30c>)
 8002ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ce6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cea:	60fb      	str	r3, [r7, #12]
 8002cec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cee:	4a5b      	ldr	r2, [pc, #364]	@ (8002e5c <HAL_GPIO_Init+0x310>)
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	089b      	lsrs	r3, r3, #2
 8002cf4:	3302      	adds	r3, #2
 8002cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	f003 0303 	and.w	r3, r3, #3
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	220f      	movs	r2, #15
 8002d06:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0a:	43db      	mvns	r3, r3
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a52      	ldr	r2, [pc, #328]	@ (8002e60 <HAL_GPIO_Init+0x314>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d02b      	beq.n	8002d72 <HAL_GPIO_Init+0x226>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a51      	ldr	r2, [pc, #324]	@ (8002e64 <HAL_GPIO_Init+0x318>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d025      	beq.n	8002d6e <HAL_GPIO_Init+0x222>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a50      	ldr	r2, [pc, #320]	@ (8002e68 <HAL_GPIO_Init+0x31c>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d01f      	beq.n	8002d6a <HAL_GPIO_Init+0x21e>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a4f      	ldr	r2, [pc, #316]	@ (8002e6c <HAL_GPIO_Init+0x320>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d019      	beq.n	8002d66 <HAL_GPIO_Init+0x21a>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a4e      	ldr	r2, [pc, #312]	@ (8002e70 <HAL_GPIO_Init+0x324>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d013      	beq.n	8002d62 <HAL_GPIO_Init+0x216>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a4d      	ldr	r2, [pc, #308]	@ (8002e74 <HAL_GPIO_Init+0x328>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d00d      	beq.n	8002d5e <HAL_GPIO_Init+0x212>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a4c      	ldr	r2, [pc, #304]	@ (8002e78 <HAL_GPIO_Init+0x32c>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d007      	beq.n	8002d5a <HAL_GPIO_Init+0x20e>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a4b      	ldr	r2, [pc, #300]	@ (8002e7c <HAL_GPIO_Init+0x330>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d101      	bne.n	8002d56 <HAL_GPIO_Init+0x20a>
 8002d52:	2307      	movs	r3, #7
 8002d54:	e00e      	b.n	8002d74 <HAL_GPIO_Init+0x228>
 8002d56:	2308      	movs	r3, #8
 8002d58:	e00c      	b.n	8002d74 <HAL_GPIO_Init+0x228>
 8002d5a:	2306      	movs	r3, #6
 8002d5c:	e00a      	b.n	8002d74 <HAL_GPIO_Init+0x228>
 8002d5e:	2305      	movs	r3, #5
 8002d60:	e008      	b.n	8002d74 <HAL_GPIO_Init+0x228>
 8002d62:	2304      	movs	r3, #4
 8002d64:	e006      	b.n	8002d74 <HAL_GPIO_Init+0x228>
 8002d66:	2303      	movs	r3, #3
 8002d68:	e004      	b.n	8002d74 <HAL_GPIO_Init+0x228>
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	e002      	b.n	8002d74 <HAL_GPIO_Init+0x228>
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e000      	b.n	8002d74 <HAL_GPIO_Init+0x228>
 8002d72:	2300      	movs	r3, #0
 8002d74:	69fa      	ldr	r2, [r7, #28]
 8002d76:	f002 0203 	and.w	r2, r2, #3
 8002d7a:	0092      	lsls	r2, r2, #2
 8002d7c:	4093      	lsls	r3, r2
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d84:	4935      	ldr	r1, [pc, #212]	@ (8002e5c <HAL_GPIO_Init+0x310>)
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	089b      	lsrs	r3, r3, #2
 8002d8a:	3302      	adds	r3, #2
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d92:	4b3b      	ldr	r3, [pc, #236]	@ (8002e80 <HAL_GPIO_Init+0x334>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	43db      	mvns	r3, r3
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002db6:	4a32      	ldr	r2, [pc, #200]	@ (8002e80 <HAL_GPIO_Init+0x334>)
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002dbc:	4b30      	ldr	r3, [pc, #192]	@ (8002e80 <HAL_GPIO_Init+0x334>)
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d003      	beq.n	8002de0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002de0:	4a27      	ldr	r2, [pc, #156]	@ (8002e80 <HAL_GPIO_Init+0x334>)
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002de6:	4b26      	ldr	r3, [pc, #152]	@ (8002e80 <HAL_GPIO_Init+0x334>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	43db      	mvns	r3, r3
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	4013      	ands	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e0a:	4a1d      	ldr	r2, [pc, #116]	@ (8002e80 <HAL_GPIO_Init+0x334>)
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e10:	4b1b      	ldr	r3, [pc, #108]	@ (8002e80 <HAL_GPIO_Init+0x334>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d003      	beq.n	8002e34 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e34:	4a12      	ldr	r2, [pc, #72]	@ (8002e80 <HAL_GPIO_Init+0x334>)
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	61fb      	str	r3, [r7, #28]
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	2b0f      	cmp	r3, #15
 8002e44:	f67f ae90 	bls.w	8002b68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e48:	bf00      	nop
 8002e4a:	bf00      	nop
 8002e4c:	3724      	adds	r7, #36	@ 0x24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	40023800 	.word	0x40023800
 8002e5c:	40013800 	.word	0x40013800
 8002e60:	40020000 	.word	0x40020000
 8002e64:	40020400 	.word	0x40020400
 8002e68:	40020800 	.word	0x40020800
 8002e6c:	40020c00 	.word	0x40020c00
 8002e70:	40021000 	.word	0x40021000
 8002e74:	40021400 	.word	0x40021400
 8002e78:	40021800 	.word	0x40021800
 8002e7c:	40021c00 	.word	0x40021c00
 8002e80:	40013c00 	.word	0x40013c00

08002e84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	691a      	ldr	r2, [r3, #16]
 8002e94:	887b      	ldrh	r3, [r7, #2]
 8002e96:	4013      	ands	r3, r2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d002      	beq.n	8002ea2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	73fb      	strb	r3, [r7, #15]
 8002ea0:	e001      	b.n	8002ea6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3714      	adds	r7, #20
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	807b      	strh	r3, [r7, #2]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ec4:	787b      	ldrb	r3, [r7, #1]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d003      	beq.n	8002ed2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eca:	887a      	ldrh	r2, [r7, #2]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ed0:	e003      	b.n	8002eda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ed2:	887b      	ldrh	r3, [r7, #2]
 8002ed4:	041a      	lsls	r2, r3, #16
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	619a      	str	r2, [r3, #24]
}
 8002eda:	bf00      	nop
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr

08002ee6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ee6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ee8:	b08f      	sub	sp, #60	@ 0x3c
 8002eea:	af0a      	add	r7, sp, #40	@ 0x28
 8002eec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d101      	bne.n	8002ef8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e10f      	b.n	8003118 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d106      	bne.n	8002f18 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f005 fcee 	bl	80088f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2203      	movs	r2, #3
 8002f1c:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d102      	bne.n	8002f32 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f001 ffd7 	bl	8004eea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	603b      	str	r3, [r7, #0]
 8002f42:	687e      	ldr	r6, [r7, #4]
 8002f44:	466d      	mov	r5, sp
 8002f46:	f106 0410 	add.w	r4, r6, #16
 8002f4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f52:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f56:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f5a:	1d33      	adds	r3, r6, #4
 8002f5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f5e:	6838      	ldr	r0, [r7, #0]
 8002f60:	f001 feae 	bl	8004cc0 <USB_CoreInit>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d005      	beq.n	8002f76 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2202      	movs	r2, #2
 8002f6e:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e0d0      	b.n	8003118 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f001 ffc5 	bl	8004f0c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f82:	2300      	movs	r3, #0
 8002f84:	73fb      	strb	r3, [r7, #15]
 8002f86:	e04a      	b.n	800301e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f88:	7bfa      	ldrb	r2, [r7, #15]
 8002f8a:	6879      	ldr	r1, [r7, #4]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	4413      	add	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	440b      	add	r3, r1
 8002f96:	333d      	adds	r3, #61	@ 0x3d
 8002f98:	2201      	movs	r2, #1
 8002f9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f9c:	7bfa      	ldrb	r2, [r7, #15]
 8002f9e:	6879      	ldr	r1, [r7, #4]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	00db      	lsls	r3, r3, #3
 8002fa4:	4413      	add	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	440b      	add	r3, r1
 8002faa:	333c      	adds	r3, #60	@ 0x3c
 8002fac:	7bfa      	ldrb	r2, [r7, #15]
 8002fae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002fb0:	7bfa      	ldrb	r2, [r7, #15]
 8002fb2:	7bfb      	ldrb	r3, [r7, #15]
 8002fb4:	b298      	uxth	r0, r3
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	4413      	add	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	3344      	adds	r3, #68	@ 0x44
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002fc8:	7bfa      	ldrb	r2, [r7, #15]
 8002fca:	6879      	ldr	r1, [r7, #4]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	4413      	add	r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	440b      	add	r3, r1
 8002fd6:	3340      	adds	r3, #64	@ 0x40
 8002fd8:	2200      	movs	r2, #0
 8002fda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002fdc:	7bfa      	ldrb	r2, [r7, #15]
 8002fde:	6879      	ldr	r1, [r7, #4]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	4413      	add	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	440b      	add	r3, r1
 8002fea:	3348      	adds	r3, #72	@ 0x48
 8002fec:	2200      	movs	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ff0:	7bfa      	ldrb	r2, [r7, #15]
 8002ff2:	6879      	ldr	r1, [r7, #4]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	00db      	lsls	r3, r3, #3
 8002ff8:	4413      	add	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	334c      	adds	r3, #76	@ 0x4c
 8003000:	2200      	movs	r2, #0
 8003002:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003004:	7bfa      	ldrb	r2, [r7, #15]
 8003006:	6879      	ldr	r1, [r7, #4]
 8003008:	4613      	mov	r3, r2
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	4413      	add	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	440b      	add	r3, r1
 8003012:	3354      	adds	r3, #84	@ 0x54
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003018:	7bfb      	ldrb	r3, [r7, #15]
 800301a:	3301      	adds	r3, #1
 800301c:	73fb      	strb	r3, [r7, #15]
 800301e:	7bfa      	ldrb	r2, [r7, #15]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	429a      	cmp	r2, r3
 8003026:	d3af      	bcc.n	8002f88 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003028:	2300      	movs	r3, #0
 800302a:	73fb      	strb	r3, [r7, #15]
 800302c:	e044      	b.n	80030b8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800302e:	7bfa      	ldrb	r2, [r7, #15]
 8003030:	6879      	ldr	r1, [r7, #4]
 8003032:	4613      	mov	r3, r2
 8003034:	00db      	lsls	r3, r3, #3
 8003036:	4413      	add	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	440b      	add	r3, r1
 800303c:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8003040:	2200      	movs	r2, #0
 8003042:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003044:	7bfa      	ldrb	r2, [r7, #15]
 8003046:	6879      	ldr	r1, [r7, #4]
 8003048:	4613      	mov	r3, r2
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	4413      	add	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	440b      	add	r3, r1
 8003052:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8003056:	7bfa      	ldrb	r2, [r7, #15]
 8003058:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800305a:	7bfa      	ldrb	r2, [r7, #15]
 800305c:	6879      	ldr	r1, [r7, #4]
 800305e:	4613      	mov	r3, r2
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	4413      	add	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	440b      	add	r3, r1
 8003068:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800306c:	2200      	movs	r2, #0
 800306e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003070:	7bfa      	ldrb	r2, [r7, #15]
 8003072:	6879      	ldr	r1, [r7, #4]
 8003074:	4613      	mov	r3, r2
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	4413      	add	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	440b      	add	r3, r1
 800307e:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8003082:	2200      	movs	r2, #0
 8003084:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003086:	7bfa      	ldrb	r2, [r7, #15]
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	4613      	mov	r3, r2
 800308c:	00db      	lsls	r3, r3, #3
 800308e:	4413      	add	r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	440b      	add	r3, r1
 8003094:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800309c:	7bfa      	ldrb	r2, [r7, #15]
 800309e:	6879      	ldr	r1, [r7, #4]
 80030a0:	4613      	mov	r3, r2
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	4413      	add	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	440b      	add	r3, r1
 80030aa:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80030ae:	2200      	movs	r2, #0
 80030b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030b2:	7bfb      	ldrb	r3, [r7, #15]
 80030b4:	3301      	adds	r3, #1
 80030b6:	73fb      	strb	r3, [r7, #15]
 80030b8:	7bfa      	ldrb	r2, [r7, #15]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d3b5      	bcc.n	800302e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	603b      	str	r3, [r7, #0]
 80030c8:	687e      	ldr	r6, [r7, #4]
 80030ca:	466d      	mov	r5, sp
 80030cc:	f106 0410 	add.w	r4, r6, #16
 80030d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030dc:	e885 0003 	stmia.w	r5, {r0, r1}
 80030e0:	1d33      	adds	r3, r6, #4
 80030e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030e4:	6838      	ldr	r0, [r7, #0]
 80030e6:	f001 ff5d 	bl	8004fa4 <USB_DevInit>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d005      	beq.n	80030fc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2202      	movs	r2, #2
 80030f4:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e00d      	b.n	8003118 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4618      	mov	r0, r3
 8003112:	f003 f8ac 	bl	800626e <USB_DevDisconnect>

  return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3714      	adds	r7, #20
 800311c:	46bd      	mov	sp, r7
 800311e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003120 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003134:	2b01      	cmp	r3, #1
 8003136:	d101      	bne.n	800313c <HAL_PCD_Start+0x1c>
 8003138:	2302      	movs	r3, #2
 800313a:	e020      	b.n	800317e <HAL_PCD_Start+0x5e>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003148:	2b01      	cmp	r3, #1
 800314a:	d109      	bne.n	8003160 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003150:	2b01      	cmp	r3, #1
 8003152:	d005      	beq.n	8003160 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003158:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4618      	mov	r0, r3
 8003166:	f001 feaf 	bl	8004ec8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4618      	mov	r0, r3
 8003170:	f003 f85c 	bl	800622c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003186:	b590      	push	{r4, r7, lr}
 8003188:	b08d      	sub	sp, #52	@ 0x34
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003194:	6a3b      	ldr	r3, [r7, #32]
 8003196:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4618      	mov	r0, r3
 800319e:	f003 f91a 	bl	80063d6 <USB_GetMode>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f040 848a 	bne.w	8003abe <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f003 f87e 	bl	80062b0 <USB_ReadInterrupts>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f000 8480 	beq.w	8003abc <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	0a1b      	lsrs	r3, r3, #8
 80031c6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f003 f86b 	bl	80062b0 <USB_ReadInterrupts>
 80031da:	4603      	mov	r3, r0
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d107      	bne.n	80031f4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	695a      	ldr	r2, [r3, #20]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f002 0202 	and.w	r2, r2, #2
 80031f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f003 f859 	bl	80062b0 <USB_ReadInterrupts>
 80031fe:	4603      	mov	r3, r0
 8003200:	f003 0310 	and.w	r3, r3, #16
 8003204:	2b10      	cmp	r3, #16
 8003206:	d161      	bne.n	80032cc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	699a      	ldr	r2, [r3, #24]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 0210 	bic.w	r2, r2, #16
 8003216:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003218:	6a3b      	ldr	r3, [r7, #32]
 800321a:	6a1b      	ldr	r3, [r3, #32]
 800321c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	f003 020f 	and.w	r2, r3, #15
 8003224:	4613      	mov	r3, r2
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	4413      	add	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	4413      	add	r3, r2
 8003234:	3304      	adds	r3, #4
 8003236:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	0c5b      	lsrs	r3, r3, #17
 800323c:	f003 030f 	and.w	r3, r3, #15
 8003240:	2b02      	cmp	r3, #2
 8003242:	d124      	bne.n	800328e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800324a:	4013      	ands	r3, r2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d035      	beq.n	80032bc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	091b      	lsrs	r3, r3, #4
 8003258:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800325a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800325e:	b29b      	uxth	r3, r3
 8003260:	461a      	mov	r2, r3
 8003262:	6a38      	ldr	r0, [r7, #32]
 8003264:	f002 fe90 	bl	8005f88 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	691a      	ldr	r2, [r3, #16]
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	091b      	lsrs	r3, r3, #4
 8003270:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003274:	441a      	add	r2, r3
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	6a1a      	ldr	r2, [r3, #32]
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	091b      	lsrs	r3, r3, #4
 8003282:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003286:	441a      	add	r2, r3
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	621a      	str	r2, [r3, #32]
 800328c:	e016      	b.n	80032bc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	0c5b      	lsrs	r3, r3, #17
 8003292:	f003 030f 	and.w	r3, r3, #15
 8003296:	2b06      	cmp	r3, #6
 8003298:	d110      	bne.n	80032bc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80032a0:	2208      	movs	r2, #8
 80032a2:	4619      	mov	r1, r3
 80032a4:	6a38      	ldr	r0, [r7, #32]
 80032a6:	f002 fe6f 	bl	8005f88 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	6a1a      	ldr	r2, [r3, #32]
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	091b      	lsrs	r3, r3, #4
 80032b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032b6:	441a      	add	r2, r3
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	699a      	ldr	r2, [r3, #24]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f042 0210 	orr.w	r2, r2, #16
 80032ca:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f002 ffed 	bl	80062b0 <USB_ReadInterrupts>
 80032d6:	4603      	mov	r3, r0
 80032d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032dc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80032e0:	f040 80a7 	bne.w	8003432 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80032e4:	2300      	movs	r3, #0
 80032e6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f002 fff2 	bl	80062d6 <USB_ReadDevAllOutEpInterrupt>
 80032f2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80032f4:	e099      	b.n	800342a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80032f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 808e 	beq.w	800341e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003308:	b2d2      	uxtb	r2, r2
 800330a:	4611      	mov	r1, r2
 800330c:	4618      	mov	r0, r3
 800330e:	f003 f816 	bl	800633e <USB_ReadDevOutEPInterrupt>
 8003312:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00c      	beq.n	8003338 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800331e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003320:	015a      	lsls	r2, r3, #5
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	4413      	add	r3, r2
 8003326:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800332a:	461a      	mov	r2, r3
 800332c:	2301      	movs	r3, #1
 800332e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003330:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 fec2 	bl	80040bc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	f003 0308 	and.w	r3, r3, #8
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00c      	beq.n	800335c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003344:	015a      	lsls	r2, r3, #5
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	4413      	add	r3, r2
 800334a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800334e:	461a      	mov	r2, r3
 8003350:	2308      	movs	r3, #8
 8003352:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003354:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 ff98 	bl	800428c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	f003 0310 	and.w	r3, r3, #16
 8003362:	2b00      	cmp	r3, #0
 8003364:	d008      	beq.n	8003378 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003368:	015a      	lsls	r2, r3, #5
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	4413      	add	r3, r2
 800336e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003372:	461a      	mov	r2, r3
 8003374:	2310      	movs	r3, #16
 8003376:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d030      	beq.n	80033e4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003382:	6a3b      	ldr	r3, [r7, #32]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800338a:	2b80      	cmp	r3, #128	@ 0x80
 800338c:	d109      	bne.n	80033a2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	69fa      	ldr	r2, [r7, #28]
 8003398:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800339c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80033a0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80033a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033a4:	4613      	mov	r3, r2
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	4413      	add	r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	4413      	add	r3, r2
 80033b4:	3304      	adds	r3, #4
 80033b6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	78db      	ldrb	r3, [r3, #3]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d108      	bne.n	80033d2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	2200      	movs	r2, #0
 80033c4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80033c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	4619      	mov	r1, r3
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f005 fba5 	bl	8008b1c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80033d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d4:	015a      	lsls	r2, r3, #5
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	4413      	add	r3, r2
 80033da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033de:	461a      	mov	r2, r3
 80033e0:	2302      	movs	r3, #2
 80033e2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	f003 0320 	and.w	r3, r3, #32
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d008      	beq.n	8003400 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f0:	015a      	lsls	r2, r3, #5
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	4413      	add	r3, r2
 80033f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033fa:	461a      	mov	r2, r3
 80033fc:	2320      	movs	r3, #32
 80033fe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d009      	beq.n	800341e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800340a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800340c:	015a      	lsls	r2, r3, #5
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	4413      	add	r3, r2
 8003412:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003416:	461a      	mov	r2, r3
 8003418:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800341c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800341e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003420:	3301      	adds	r3, #1
 8003422:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003426:	085b      	lsrs	r3, r3, #1
 8003428:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800342a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800342c:	2b00      	cmp	r3, #0
 800342e:	f47f af62 	bne.w	80032f6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4618      	mov	r0, r3
 8003438:	f002 ff3a 	bl	80062b0 <USB_ReadInterrupts>
 800343c:	4603      	mov	r3, r0
 800343e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003442:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003446:	f040 80db 	bne.w	8003600 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4618      	mov	r0, r3
 8003450:	f002 ff5b 	bl	800630a <USB_ReadDevAllInEpInterrupt>
 8003454:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003456:	2300      	movs	r3, #0
 8003458:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800345a:	e0cd      	b.n	80035f8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800345c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b00      	cmp	r3, #0
 8003464:	f000 80c2 	beq.w	80035ec <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800346e:	b2d2      	uxtb	r2, r2
 8003470:	4611      	mov	r1, r2
 8003472:	4618      	mov	r0, r3
 8003474:	f002 ff81 	bl	800637a <USB_ReadDevInEPInterrupt>
 8003478:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	2b00      	cmp	r3, #0
 8003482:	d057      	beq.n	8003534 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003486:	f003 030f 	and.w	r3, r3, #15
 800348a:	2201      	movs	r2, #1
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003498:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	43db      	mvns	r3, r3
 800349e:	69f9      	ldr	r1, [r7, #28]
 80034a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80034a4:	4013      	ands	r3, r2
 80034a6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80034a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034aa:	015a      	lsls	r2, r3, #5
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	4413      	add	r3, r2
 80034b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034b4:	461a      	mov	r2, r3
 80034b6:	2301      	movs	r3, #1
 80034b8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d132      	bne.n	8003528 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034c6:	4613      	mov	r3, r2
 80034c8:	00db      	lsls	r3, r3, #3
 80034ca:	4413      	add	r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	440b      	add	r3, r1
 80034d0:	334c      	adds	r3, #76	@ 0x4c
 80034d2:	6819      	ldr	r1, [r3, #0]
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034d8:	4613      	mov	r3, r2
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	4413      	add	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	4403      	add	r3, r0
 80034e2:	3348      	adds	r3, #72	@ 0x48
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4419      	add	r1, r3
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034ec:	4613      	mov	r3, r2
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	4413      	add	r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	4403      	add	r3, r0
 80034f6:	334c      	adds	r3, #76	@ 0x4c
 80034f8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80034fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d113      	bne.n	8003528 <HAL_PCD_IRQHandler+0x3a2>
 8003500:	6879      	ldr	r1, [r7, #4]
 8003502:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003504:	4613      	mov	r3, r2
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	4413      	add	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	3354      	adds	r3, #84	@ 0x54
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d108      	bne.n	8003528 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6818      	ldr	r0, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003520:	461a      	mov	r2, r3
 8003522:	2101      	movs	r1, #1
 8003524:	f002 ff88 	bl	8006438 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352a:	b2db      	uxtb	r3, r3
 800352c:	4619      	mov	r1, r3
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f005 fa6f 	bl	8008a12 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	f003 0308 	and.w	r3, r3, #8
 800353a:	2b00      	cmp	r3, #0
 800353c:	d008      	beq.n	8003550 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800353e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003540:	015a      	lsls	r2, r3, #5
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	4413      	add	r3, r2
 8003546:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800354a:	461a      	mov	r2, r3
 800354c:	2308      	movs	r3, #8
 800354e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	f003 0310 	and.w	r3, r3, #16
 8003556:	2b00      	cmp	r3, #0
 8003558:	d008      	beq.n	800356c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800355a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800355c:	015a      	lsls	r2, r3, #5
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	4413      	add	r3, r2
 8003562:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003566:	461a      	mov	r2, r3
 8003568:	2310      	movs	r3, #16
 800356a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003572:	2b00      	cmp	r3, #0
 8003574:	d008      	beq.n	8003588 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003578:	015a      	lsls	r2, r3, #5
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	4413      	add	r3, r2
 800357e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003582:	461a      	mov	r2, r3
 8003584:	2340      	movs	r3, #64	@ 0x40
 8003586:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d023      	beq.n	80035da <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003592:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003594:	6a38      	ldr	r0, [r7, #32]
 8003596:	f001 fe69 	bl	800526c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800359a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800359c:	4613      	mov	r3, r2
 800359e:	00db      	lsls	r3, r3, #3
 80035a0:	4413      	add	r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	3338      	adds	r3, #56	@ 0x38
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	4413      	add	r3, r2
 80035aa:	3304      	adds	r3, #4
 80035ac:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	78db      	ldrb	r3, [r3, #3]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d108      	bne.n	80035c8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	2200      	movs	r2, #0
 80035ba:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80035bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	4619      	mov	r1, r3
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f005 fabc 	bl	8008b40 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80035c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ca:	015a      	lsls	r2, r3, #5
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	4413      	add	r3, r2
 80035d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035d4:	461a      	mov	r2, r3
 80035d6:	2302      	movs	r3, #2
 80035d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d003      	beq.n	80035ec <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80035e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 fcdb 	bl	8003fa2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80035ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ee:	3301      	adds	r3, #1
 80035f0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80035f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035f4:	085b      	lsrs	r3, r3, #1
 80035f6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80035f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f47f af2e 	bne.w	800345c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4618      	mov	r0, r3
 8003606:	f002 fe53 	bl	80062b0 <USB_ReadInterrupts>
 800360a:	4603      	mov	r3, r0
 800360c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003610:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003614:	d122      	bne.n	800365c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	69fa      	ldr	r2, [r7, #28]
 8003620:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003624:	f023 0301 	bic.w	r3, r3, #1
 8003628:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8003630:	2b01      	cmp	r3, #1
 8003632:	d108      	bne.n	8003646 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800363c:	2100      	movs	r1, #0
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 fec2 	bl	80043c8 <HAL_PCDEx_LPM_Callback>
 8003644:	e002      	b.n	800364c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f005 fa5a 	bl	8008b00 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	695a      	ldr	r2, [r3, #20]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800365a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4618      	mov	r0, r3
 8003662:	f002 fe25 	bl	80062b0 <USB_ReadInterrupts>
 8003666:	4603      	mov	r3, r0
 8003668:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800366c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003670:	d112      	bne.n	8003698 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b01      	cmp	r3, #1
 8003680:	d102      	bne.n	8003688 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f005 fa16 	bl	8008ab4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	695a      	ldr	r2, [r3, #20]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003696:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4618      	mov	r0, r3
 800369e:	f002 fe07 	bl	80062b0 <USB_ReadInterrupts>
 80036a2:	4603      	mov	r3, r0
 80036a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036ac:	f040 80b7 	bne.w	800381e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	69fa      	ldr	r2, [r7, #28]
 80036ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036be:	f023 0301 	bic.w	r3, r3, #1
 80036c2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2110      	movs	r1, #16
 80036ca:	4618      	mov	r0, r3
 80036cc:	f001 fdce 	bl	800526c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036d0:	2300      	movs	r3, #0
 80036d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036d4:	e046      	b.n	8003764 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80036d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036d8:	015a      	lsls	r2, r3, #5
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	4413      	add	r3, r2
 80036de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036e2:	461a      	mov	r2, r3
 80036e4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80036e8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80036ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ec:	015a      	lsls	r2, r3, #5
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	4413      	add	r3, r2
 80036f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036fa:	0151      	lsls	r1, r2, #5
 80036fc:	69fa      	ldr	r2, [r7, #28]
 80036fe:	440a      	add	r2, r1
 8003700:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003704:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003708:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800370a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800370c:	015a      	lsls	r2, r3, #5
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	4413      	add	r3, r2
 8003712:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003716:	461a      	mov	r2, r3
 8003718:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800371c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800371e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003720:	015a      	lsls	r2, r3, #5
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	4413      	add	r3, r2
 8003726:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800372e:	0151      	lsls	r1, r2, #5
 8003730:	69fa      	ldr	r2, [r7, #28]
 8003732:	440a      	add	r2, r1
 8003734:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003738:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800373c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800373e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003740:	015a      	lsls	r2, r3, #5
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	4413      	add	r3, r2
 8003746:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800374e:	0151      	lsls	r1, r2, #5
 8003750:	69fa      	ldr	r2, [r7, #28]
 8003752:	440a      	add	r2, r1
 8003754:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003758:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800375c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800375e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003760:	3301      	adds	r3, #1
 8003762:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800376a:	429a      	cmp	r2, r3
 800376c:	d3b3      	bcc.n	80036d6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	69fa      	ldr	r2, [r7, #28]
 8003778:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800377c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003780:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003786:	2b00      	cmp	r3, #0
 8003788:	d016      	beq.n	80037b8 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003790:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003794:	69fa      	ldr	r2, [r7, #28]
 8003796:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800379a:	f043 030b 	orr.w	r3, r3, #11
 800379e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037aa:	69fa      	ldr	r2, [r7, #28]
 80037ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80037b0:	f043 030b 	orr.w	r3, r3, #11
 80037b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80037b6:	e015      	b.n	80037e4 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	69fa      	ldr	r2, [r7, #28]
 80037c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80037c6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80037ca:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80037ce:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	69fa      	ldr	r2, [r7, #28]
 80037da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80037de:	f043 030b 	orr.w	r3, r3, #11
 80037e2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	69fa      	ldr	r2, [r7, #28]
 80037ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80037f2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80037f6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6818      	ldr	r0, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003808:	461a      	mov	r2, r3
 800380a:	f002 fe15 	bl	8006438 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	695a      	ldr	r2, [r3, #20]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800381c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4618      	mov	r0, r3
 8003824:	f002 fd44 	bl	80062b0 <USB_ReadInterrupts>
 8003828:	4603      	mov	r3, r0
 800382a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800382e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003832:	d124      	bne.n	800387e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4618      	mov	r0, r3
 800383a:	f002 fdda 	bl	80063f2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4618      	mov	r0, r3
 8003844:	f001 fd8f 	bl	8005366 <USB_GetDevSpeed>
 8003848:	4603      	mov	r3, r0
 800384a:	461a      	mov	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681c      	ldr	r4, [r3, #0]
 8003854:	f001 fa28 	bl	8004ca8 <HAL_RCC_GetHCLKFreq>
 8003858:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800385e:	b2db      	uxtb	r3, r3
 8003860:	461a      	mov	r2, r3
 8003862:	4620      	mov	r0, r4
 8003864:	f001 fa8e 	bl	8004d84 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f005 f8fa 	bl	8008a62 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	695a      	ldr	r2, [r3, #20]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800387c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4618      	mov	r0, r3
 8003884:	f002 fd14 	bl	80062b0 <USB_ReadInterrupts>
 8003888:	4603      	mov	r3, r0
 800388a:	f003 0308 	and.w	r3, r3, #8
 800388e:	2b08      	cmp	r3, #8
 8003890:	d10a      	bne.n	80038a8 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f005 f8d7 	bl	8008a46 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	695a      	ldr	r2, [r3, #20]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f002 0208 	and.w	r2, r2, #8
 80038a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f002 fcff 	bl	80062b0 <USB_ReadInterrupts>
 80038b2:	4603      	mov	r3, r0
 80038b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038b8:	2b80      	cmp	r3, #128	@ 0x80
 80038ba:	d122      	bne.n	8003902 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80038bc:	6a3b      	ldr	r3, [r7, #32]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80038c4:	6a3b      	ldr	r3, [r7, #32]
 80038c6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038c8:	2301      	movs	r3, #1
 80038ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80038cc:	e014      	b.n	80038f8 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80038ce:	6879      	ldr	r1, [r7, #4]
 80038d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038d2:	4613      	mov	r3, r2
 80038d4:	00db      	lsls	r3, r3, #3
 80038d6:	4413      	add	r3, r2
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	440b      	add	r3, r1
 80038dc:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d105      	bne.n	80038f2 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80038e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	4619      	mov	r1, r3
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 fb27 	bl	8003f40 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f4:	3301      	adds	r3, #1
 80038f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038fe:	429a      	cmp	r2, r3
 8003900:	d3e5      	bcc.n	80038ce <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4618      	mov	r0, r3
 8003908:	f002 fcd2 	bl	80062b0 <USB_ReadInterrupts>
 800390c:	4603      	mov	r3, r0
 800390e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003912:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003916:	d13b      	bne.n	8003990 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003918:	2301      	movs	r3, #1
 800391a:	627b      	str	r3, [r7, #36]	@ 0x24
 800391c:	e02b      	b.n	8003976 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800391e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003920:	015a      	lsls	r2, r3, #5
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	4413      	add	r3, r2
 8003926:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800392e:	6879      	ldr	r1, [r7, #4]
 8003930:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003932:	4613      	mov	r3, r2
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	4413      	add	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	440b      	add	r3, r1
 800393c:	3340      	adds	r3, #64	@ 0x40
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d115      	bne.n	8003970 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003944:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003946:	2b00      	cmp	r3, #0
 8003948:	da12      	bge.n	8003970 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800394a:	6879      	ldr	r1, [r7, #4]
 800394c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800394e:	4613      	mov	r3, r2
 8003950:	00db      	lsls	r3, r3, #3
 8003952:	4413      	add	r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	440b      	add	r3, r1
 8003958:	333f      	adds	r3, #63	@ 0x3f
 800395a:	2201      	movs	r2, #1
 800395c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800395e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003960:	b2db      	uxtb	r3, r3
 8003962:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003966:	b2db      	uxtb	r3, r3
 8003968:	4619      	mov	r1, r3
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 fae8 	bl	8003f40 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003972:	3301      	adds	r3, #1
 8003974:	627b      	str	r3, [r7, #36]	@ 0x24
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800397c:	429a      	cmp	r2, r3
 800397e:	d3ce      	bcc.n	800391e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	695a      	ldr	r2, [r3, #20]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800398e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4618      	mov	r0, r3
 8003996:	f002 fc8b 	bl	80062b0 <USB_ReadInterrupts>
 800399a:	4603      	mov	r3, r0
 800399c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80039a4:	d155      	bne.n	8003a52 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039a6:	2301      	movs	r3, #1
 80039a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80039aa:	e045      	b.n	8003a38 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80039ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ae:	015a      	lsls	r2, r3, #5
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	4413      	add	r3, r2
 80039b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80039bc:	6879      	ldr	r1, [r7, #4]
 80039be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039c0:	4613      	mov	r3, r2
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	4413      	add	r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	440b      	add	r3, r1
 80039ca:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d12e      	bne.n	8003a32 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80039d4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	da2b      	bge.n	8003a32 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 80039e6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d121      	bne.n	8003a32 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80039ee:	6879      	ldr	r1, [r7, #4]
 80039f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039f2:	4613      	mov	r3, r2
 80039f4:	00db      	lsls	r3, r3, #3
 80039f6:	4413      	add	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	440b      	add	r3, r1
 80039fc:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8003a00:	2201      	movs	r2, #1
 8003a02:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003a04:	6a3b      	ldr	r3, [r7, #32]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003a0c:	6a3b      	ldr	r3, [r7, #32]
 8003a0e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003a10:	6a3b      	ldr	r3, [r7, #32]
 8003a12:	695b      	ldr	r3, [r3, #20]
 8003a14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d10a      	bne.n	8003a32 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	69fa      	ldr	r2, [r7, #28]
 8003a26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a2e:	6053      	str	r3, [r2, #4]
            break;
 8003a30:	e007      	b.n	8003a42 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a34:	3301      	adds	r3, #1
 8003a36:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d3b4      	bcc.n	80039ac <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	695a      	ldr	r2, [r3, #20]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003a50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f002 fc2a 	bl	80062b0 <USB_ReadInterrupts>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003a62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a66:	d10a      	bne.n	8003a7e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f005 f87b 	bl	8008b64 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	695a      	ldr	r2, [r3, #20]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003a7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f002 fc14 	bl	80062b0 <USB_ReadInterrupts>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	f003 0304 	and.w	r3, r3, #4
 8003a8e:	2b04      	cmp	r3, #4
 8003a90:	d115      	bne.n	8003abe <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	f003 0304 	and.w	r3, r3, #4
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d002      	beq.n	8003aaa <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f005 f86b 	bl	8008b80 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	6859      	ldr	r1, [r3, #4]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	605a      	str	r2, [r3, #4]
 8003aba:	e000      	b.n	8003abe <HAL_PCD_IRQHandler+0x938>
      return;
 8003abc:	bf00      	nop
    }
  }
}
 8003abe:	3734      	adds	r7, #52	@ 0x34
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd90      	pop	{r4, r7, pc}

08003ac4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	460b      	mov	r3, r1
 8003ace:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d101      	bne.n	8003ade <HAL_PCD_SetAddress+0x1a>
 8003ada:	2302      	movs	r3, #2
 8003adc:	e013      	b.n	8003b06 <HAL_PCD_SetAddress+0x42>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	78fa      	ldrb	r2, [r7, #3]
 8003aea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	78fa      	ldrb	r2, [r7, #3]
 8003af4:	4611      	mov	r1, r2
 8003af6:	4618      	mov	r0, r3
 8003af8:	f002 fb72 	bl	80061e0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3708      	adds	r7, #8
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b084      	sub	sp, #16
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
 8003b16:	4608      	mov	r0, r1
 8003b18:	4611      	mov	r1, r2
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	70fb      	strb	r3, [r7, #3]
 8003b20:	460b      	mov	r3, r1
 8003b22:	803b      	strh	r3, [r7, #0]
 8003b24:	4613      	mov	r3, r2
 8003b26:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	da0f      	bge.n	8003b54 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b34:	78fb      	ldrb	r3, [r7, #3]
 8003b36:	f003 020f 	and.w	r2, r3, #15
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	4413      	add	r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	3338      	adds	r3, #56	@ 0x38
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	4413      	add	r3, r2
 8003b48:	3304      	adds	r3, #4
 8003b4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	705a      	strb	r2, [r3, #1]
 8003b52:	e00f      	b.n	8003b74 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b54:	78fb      	ldrb	r3, [r7, #3]
 8003b56:	f003 020f 	and.w	r2, r3, #15
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	00db      	lsls	r3, r3, #3
 8003b5e:	4413      	add	r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	4413      	add	r3, r2
 8003b6a:	3304      	adds	r3, #4
 8003b6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003b74:	78fb      	ldrb	r3, [r7, #3]
 8003b76:	f003 030f 	and.w	r3, r3, #15
 8003b7a:	b2da      	uxtb	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003b80:	883a      	ldrh	r2, [r7, #0]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	78ba      	ldrb	r2, [r7, #2]
 8003b8a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	785b      	ldrb	r3, [r3, #1]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d004      	beq.n	8003b9e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	461a      	mov	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003b9e:	78bb      	ldrb	r3, [r7, #2]
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d102      	bne.n	8003baa <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d101      	bne.n	8003bb8 <HAL_PCD_EP_Open+0xaa>
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	e00e      	b.n	8003bd6 <HAL_PCD_EP_Open+0xc8>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68f9      	ldr	r1, [r7, #12]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f001 fbf2 	bl	80053b0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 8003bd4:	7afb      	ldrb	r3, [r7, #11]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b084      	sub	sp, #16
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
 8003be6:	460b      	mov	r3, r1
 8003be8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003bea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	da0f      	bge.n	8003c12 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bf2:	78fb      	ldrb	r3, [r7, #3]
 8003bf4:	f003 020f 	and.w	r2, r3, #15
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	4413      	add	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	3338      	adds	r3, #56	@ 0x38
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	4413      	add	r3, r2
 8003c06:	3304      	adds	r3, #4
 8003c08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	705a      	strb	r2, [r3, #1]
 8003c10:	e00f      	b.n	8003c32 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c12:	78fb      	ldrb	r3, [r7, #3]
 8003c14:	f003 020f 	and.w	r2, r3, #15
 8003c18:	4613      	mov	r3, r2
 8003c1a:	00db      	lsls	r3, r3, #3
 8003c1c:	4413      	add	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	4413      	add	r3, r2
 8003c28:	3304      	adds	r3, #4
 8003c2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003c32:	78fb      	ldrb	r3, [r7, #3]
 8003c34:	f003 030f 	and.w	r3, r3, #15
 8003c38:	b2da      	uxtb	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d101      	bne.n	8003c4c <HAL_PCD_EP_Close+0x6e>
 8003c48:	2302      	movs	r3, #2
 8003c4a:	e00e      	b.n	8003c6a <HAL_PCD_EP_Close+0x8c>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68f9      	ldr	r1, [r7, #12]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f001 fc30 	bl	80054c0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b086      	sub	sp, #24
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	60f8      	str	r0, [r7, #12]
 8003c7a:	607a      	str	r2, [r7, #4]
 8003c7c:	603b      	str	r3, [r7, #0]
 8003c7e:	460b      	mov	r3, r1
 8003c80:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c82:	7afb      	ldrb	r3, [r7, #11]
 8003c84:	f003 020f 	and.w	r2, r3, #15
 8003c88:	4613      	mov	r3, r2
 8003c8a:	00db      	lsls	r3, r3, #3
 8003c8c:	4413      	add	r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	4413      	add	r3, r2
 8003c98:	3304      	adds	r3, #4
 8003c9a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	683a      	ldr	r2, [r7, #0]
 8003ca6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	2200      	movs	r2, #0
 8003cac:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cb4:	7afb      	ldrb	r3, [r7, #11]
 8003cb6:	f003 030f 	and.w	r3, r3, #15
 8003cba:	b2da      	uxtb	r2, r3
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d102      	bne.n	8003cce <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003cce:	7afb      	ldrb	r3, [r7, #11]
 8003cd0:	f003 030f 	and.w	r3, r3, #15
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d109      	bne.n	8003cec <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6818      	ldr	r0, [r3, #0]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	6979      	ldr	r1, [r7, #20]
 8003ce6:	f001 ff0f 	bl	8005b08 <USB_EP0StartXfer>
 8003cea:	e008      	b.n	8003cfe <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6818      	ldr	r0, [r3, #0]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	6979      	ldr	r1, [r7, #20]
 8003cfa:	f001 fcbd 	bl	8005678 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3718      	adds	r7, #24
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	460b      	mov	r3, r1
 8003d12:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003d14:	78fb      	ldrb	r3, [r7, #3]
 8003d16:	f003 020f 	and.w	r2, r3, #15
 8003d1a:	6879      	ldr	r1, [r7, #4]
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	00db      	lsls	r3, r3, #3
 8003d20:	4413      	add	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	440b      	add	r3, r1
 8003d26:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8003d2a:	681b      	ldr	r3, [r3, #0]
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	607a      	str	r2, [r7, #4]
 8003d42:	603b      	str	r3, [r7, #0]
 8003d44:	460b      	mov	r3, r1
 8003d46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d48:	7afb      	ldrb	r3, [r7, #11]
 8003d4a:	f003 020f 	and.w	r2, r3, #15
 8003d4e:	4613      	mov	r3, r2
 8003d50:	00db      	lsls	r3, r3, #3
 8003d52:	4413      	add	r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	3338      	adds	r3, #56	@ 0x38
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	3304      	adds	r3, #4
 8003d5e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	683a      	ldr	r2, [r7, #0]
 8003d6a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	2201      	movs	r2, #1
 8003d76:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d78:	7afb      	ldrb	r3, [r7, #11]
 8003d7a:	f003 030f 	and.w	r3, r3, #15
 8003d7e:	b2da      	uxtb	r2, r3
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d102      	bne.n	8003d92 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d92:	7afb      	ldrb	r3, [r7, #11]
 8003d94:	f003 030f 	and.w	r3, r3, #15
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d109      	bne.n	8003db0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6818      	ldr	r0, [r3, #0]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	461a      	mov	r2, r3
 8003da8:	6979      	ldr	r1, [r7, #20]
 8003daa:	f001 fead 	bl	8005b08 <USB_EP0StartXfer>
 8003dae:	e008      	b.n	8003dc2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6818      	ldr	r0, [r3, #0]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	461a      	mov	r2, r3
 8003dbc:	6979      	ldr	r1, [r7, #20]
 8003dbe:	f001 fc5b 	bl	8005678 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3718      	adds	r7, #24
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003dd8:	78fb      	ldrb	r3, [r7, #3]
 8003dda:	f003 020f 	and.w	r2, r3, #15
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d901      	bls.n	8003dea <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e050      	b.n	8003e8c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003dea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	da0f      	bge.n	8003e12 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003df2:	78fb      	ldrb	r3, [r7, #3]
 8003df4:	f003 020f 	and.w	r2, r3, #15
 8003df8:	4613      	mov	r3, r2
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	4413      	add	r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	3338      	adds	r3, #56	@ 0x38
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	4413      	add	r3, r2
 8003e06:	3304      	adds	r3, #4
 8003e08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	705a      	strb	r2, [r3, #1]
 8003e10:	e00d      	b.n	8003e2e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003e12:	78fa      	ldrb	r2, [r7, #3]
 8003e14:	4613      	mov	r3, r2
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	4413      	add	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	4413      	add	r3, r2
 8003e24:	3304      	adds	r3, #4
 8003e26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2201      	movs	r2, #1
 8003e32:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e34:	78fb      	ldrb	r3, [r7, #3]
 8003e36:	f003 030f 	and.w	r3, r3, #15
 8003e3a:	b2da      	uxtb	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d101      	bne.n	8003e4e <HAL_PCD_EP_SetStall+0x82>
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	e01e      	b.n	8003e8c <HAL_PCD_EP_SetStall+0xc0>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68f9      	ldr	r1, [r7, #12]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f002 f8eb 	bl	8006038 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e62:	78fb      	ldrb	r3, [r7, #3]
 8003e64:	f003 030f 	and.w	r3, r3, #15
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d10a      	bne.n	8003e82 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6818      	ldr	r0, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	b2d9      	uxtb	r1, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	f002 fadb 	bl	8006438 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003ea0:	78fb      	ldrb	r3, [r7, #3]
 8003ea2:	f003 020f 	and.w	r2, r3, #15
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d901      	bls.n	8003eb2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e042      	b.n	8003f38 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003eb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	da0f      	bge.n	8003eda <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003eba:	78fb      	ldrb	r3, [r7, #3]
 8003ebc:	f003 020f 	and.w	r2, r3, #15
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	00db      	lsls	r3, r3, #3
 8003ec4:	4413      	add	r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	3338      	adds	r3, #56	@ 0x38
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	4413      	add	r3, r2
 8003ece:	3304      	adds	r3, #4
 8003ed0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	705a      	strb	r2, [r3, #1]
 8003ed8:	e00f      	b.n	8003efa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003eda:	78fb      	ldrb	r3, [r7, #3]
 8003edc:	f003 020f 	and.w	r2, r3, #15
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	4413      	add	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	4413      	add	r3, r2
 8003ef0:	3304      	adds	r3, #4
 8003ef2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f00:	78fb      	ldrb	r3, [r7, #3]
 8003f02:	f003 030f 	and.w	r3, r3, #15
 8003f06:	b2da      	uxtb	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d101      	bne.n	8003f1a <HAL_PCD_EP_ClrStall+0x86>
 8003f16:	2302      	movs	r3, #2
 8003f18:	e00e      	b.n	8003f38 <HAL_PCD_EP_ClrStall+0xa4>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68f9      	ldr	r1, [r7, #12]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f002 f8f3 	bl	8006114 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	460b      	mov	r3, r1
 8003f4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003f4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	da0c      	bge.n	8003f6e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f54:	78fb      	ldrb	r3, [r7, #3]
 8003f56:	f003 020f 	and.w	r2, r3, #15
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	00db      	lsls	r3, r3, #3
 8003f5e:	4413      	add	r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	3338      	adds	r3, #56	@ 0x38
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	4413      	add	r3, r2
 8003f68:	3304      	adds	r3, #4
 8003f6a:	60fb      	str	r3, [r7, #12]
 8003f6c:	e00c      	b.n	8003f88 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f6e:	78fb      	ldrb	r3, [r7, #3]
 8003f70:	f003 020f 	and.w	r2, r3, #15
 8003f74:	4613      	mov	r3, r2
 8003f76:	00db      	lsls	r3, r3, #3
 8003f78:	4413      	add	r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	4413      	add	r3, r2
 8003f84:	3304      	adds	r3, #4
 8003f86:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68f9      	ldr	r1, [r7, #12]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f001 ff12 	bl	8005db8 <USB_EPStopXfer>
 8003f94:	4603      	mov	r3, r0
 8003f96:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003f98:	7afb      	ldrb	r3, [r7, #11]
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b08a      	sub	sp, #40	@ 0x28
 8003fa6:	af02      	add	r7, sp, #8
 8003fa8:	6078      	str	r0, [r7, #4]
 8003faa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003fb6:	683a      	ldr	r2, [r7, #0]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	4413      	add	r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	3338      	adds	r3, #56	@ 0x38
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	3304      	adds	r3, #4
 8003fc8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6a1a      	ldr	r2, [r3, #32]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d901      	bls.n	8003fda <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e06c      	b.n	80040b4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	699a      	ldr	r2, [r3, #24]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	69fa      	ldr	r2, [r7, #28]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d902      	bls.n	8003ff6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	3303      	adds	r3, #3
 8003ffa:	089b      	lsrs	r3, r3, #2
 8003ffc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ffe:	e02b      	b.n	8004058 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	699a      	ldr	r2, [r3, #24]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6a1b      	ldr	r3, [r3, #32]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	69fa      	ldr	r2, [r7, #28]
 8004012:	429a      	cmp	r2, r3
 8004014:	d902      	bls.n	800401c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	3303      	adds	r3, #3
 8004020:	089b      	lsrs	r3, r3, #2
 8004022:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6919      	ldr	r1, [r3, #16]
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	b2da      	uxtb	r2, r3
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004034:	b2db      	uxtb	r3, r3
 8004036:	9300      	str	r3, [sp, #0]
 8004038:	4603      	mov	r3, r0
 800403a:	6978      	ldr	r0, [r7, #20]
 800403c:	f001 ff66 	bl	8005f0c <USB_WritePacket>

    ep->xfer_buff  += len;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	691a      	ldr	r2, [r3, #16]
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	441a      	add	r2, r3
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6a1a      	ldr	r2, [r3, #32]
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	441a      	add	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	015a      	lsls	r2, r3, #5
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	4413      	add	r3, r2
 8004060:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004068:	69ba      	ldr	r2, [r7, #24]
 800406a:	429a      	cmp	r2, r3
 800406c:	d809      	bhi.n	8004082 <PCD_WriteEmptyTxFifo+0xe0>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6a1a      	ldr	r2, [r3, #32]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004076:	429a      	cmp	r2, r3
 8004078:	d203      	bcs.n	8004082 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1be      	bne.n	8004000 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	699a      	ldr	r2, [r3, #24]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	429a      	cmp	r2, r3
 800408c:	d811      	bhi.n	80040b2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	f003 030f 	and.w	r3, r3, #15
 8004094:	2201      	movs	r2, #1
 8004096:	fa02 f303 	lsl.w	r3, r2, r3
 800409a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	43db      	mvns	r3, r3
 80040a8:	6939      	ldr	r1, [r7, #16]
 80040aa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80040ae:	4013      	ands	r3, r2
 80040b0:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80040b2:	2300      	movs	r3, #0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3720      	adds	r7, #32
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b088      	sub	sp, #32
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	333c      	adds	r3, #60	@ 0x3c
 80040d4:	3304      	adds	r3, #4
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	015a      	lsls	r2, r3, #5
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	4413      	add	r3, r2
 80040e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d17b      	bne.n	80041ea <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	f003 0308 	and.w	r3, r3, #8
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d015      	beq.n	8004128 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	4a61      	ldr	r2, [pc, #388]	@ (8004284 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004100:	4293      	cmp	r3, r2
 8004102:	f240 80b9 	bls.w	8004278 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800410c:	2b00      	cmp	r3, #0
 800410e:	f000 80b3 	beq.w	8004278 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	015a      	lsls	r2, r3, #5
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	4413      	add	r3, r2
 800411a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800411e:	461a      	mov	r2, r3
 8004120:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004124:	6093      	str	r3, [r2, #8]
 8004126:	e0a7      	b.n	8004278 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	f003 0320 	and.w	r3, r3, #32
 800412e:	2b00      	cmp	r3, #0
 8004130:	d009      	beq.n	8004146 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	015a      	lsls	r2, r3, #5
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	4413      	add	r3, r2
 800413a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800413e:	461a      	mov	r2, r3
 8004140:	2320      	movs	r3, #32
 8004142:	6093      	str	r3, [r2, #8]
 8004144:	e098      	b.n	8004278 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800414c:	2b00      	cmp	r3, #0
 800414e:	f040 8093 	bne.w	8004278 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	4a4b      	ldr	r2, [pc, #300]	@ (8004284 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d90f      	bls.n	800417a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00a      	beq.n	800417a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	015a      	lsls	r2, r3, #5
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	4413      	add	r3, r2
 800416c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004170:	461a      	mov	r2, r3
 8004172:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004176:	6093      	str	r3, [r2, #8]
 8004178:	e07e      	b.n	8004278 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	4613      	mov	r3, r2
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	4413      	add	r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	4413      	add	r3, r2
 800418c:	3304      	adds	r3, #4
 800418e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	69da      	ldr	r2, [r3, #28]
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	0159      	lsls	r1, r3, #5
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	440b      	add	r3, r1
 800419c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041a6:	1ad2      	subs	r2, r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d114      	bne.n	80041dc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d109      	bne.n	80041ce <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6818      	ldr	r0, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80041c4:	461a      	mov	r2, r3
 80041c6:	2101      	movs	r1, #1
 80041c8:	f002 f936 	bl	8006438 <USB_EP0_OutStart>
 80041cc:	e006      	b.n	80041dc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	691a      	ldr	r2, [r3, #16]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	441a      	add	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	4619      	mov	r1, r3
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f004 fbfa 	bl	80089dc <HAL_PCD_DataOutStageCallback>
 80041e8:	e046      	b.n	8004278 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	4a26      	ldr	r2, [pc, #152]	@ (8004288 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d124      	bne.n	800423c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00a      	beq.n	8004212 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	015a      	lsls	r2, r3, #5
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	4413      	add	r3, r2
 8004204:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004208:	461a      	mov	r2, r3
 800420a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800420e:	6093      	str	r3, [r2, #8]
 8004210:	e032      	b.n	8004278 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	f003 0320 	and.w	r3, r3, #32
 8004218:	2b00      	cmp	r3, #0
 800421a:	d008      	beq.n	800422e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	015a      	lsls	r2, r3, #5
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	4413      	add	r3, r2
 8004224:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004228:	461a      	mov	r2, r3
 800422a:	2320      	movs	r3, #32
 800422c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	b2db      	uxtb	r3, r3
 8004232:	4619      	mov	r1, r3
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f004 fbd1 	bl	80089dc <HAL_PCD_DataOutStageCallback>
 800423a:	e01d      	b.n	8004278 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d114      	bne.n	800426c <PCD_EP_OutXfrComplete_int+0x1b0>
 8004242:	6879      	ldr	r1, [r7, #4]
 8004244:	683a      	ldr	r2, [r7, #0]
 8004246:	4613      	mov	r3, r2
 8004248:	00db      	lsls	r3, r3, #3
 800424a:	4413      	add	r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	440b      	add	r3, r1
 8004250:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d108      	bne.n	800426c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6818      	ldr	r0, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004264:	461a      	mov	r2, r3
 8004266:	2100      	movs	r1, #0
 8004268:	f002 f8e6 	bl	8006438 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	b2db      	uxtb	r3, r3
 8004270:	4619      	mov	r1, r3
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f004 fbb2 	bl	80089dc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3720      	adds	r7, #32
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	4f54300a 	.word	0x4f54300a
 8004288:	4f54310a 	.word	0x4f54310a

0800428c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b086      	sub	sp, #24
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	333c      	adds	r3, #60	@ 0x3c
 80042a4:	3304      	adds	r3, #4
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	015a      	lsls	r2, r3, #5
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	4413      	add	r3, r2
 80042b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	4a15      	ldr	r2, [pc, #84]	@ (8004314 <PCD_EP_OutSetupPacket_int+0x88>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d90e      	bls.n	80042e0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d009      	beq.n	80042e0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	015a      	lsls	r2, r3, #5
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	4413      	add	r3, r2
 80042d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042d8:	461a      	mov	r2, r3
 80042da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042de:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f004 fb69 	bl	80089b8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	4a0a      	ldr	r2, [pc, #40]	@ (8004314 <PCD_EP_OutSetupPacket_int+0x88>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d90c      	bls.n	8004308 <PCD_EP_OutSetupPacket_int+0x7c>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d108      	bne.n	8004308 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6818      	ldr	r0, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004300:	461a      	mov	r2, r3
 8004302:	2101      	movs	r1, #1
 8004304:	f002 f898 	bl	8006438 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3718      	adds	r7, #24
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	4f54300a 	.word	0x4f54300a

08004318 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004318:	b480      	push	{r7}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	460b      	mov	r3, r1
 8004322:	70fb      	strb	r3, [r7, #3]
 8004324:	4613      	mov	r3, r2
 8004326:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800432e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004330:	78fb      	ldrb	r3, [r7, #3]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d107      	bne.n	8004346 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004336:	883b      	ldrh	r3, [r7, #0]
 8004338:	0419      	lsls	r1, r3, #16
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68ba      	ldr	r2, [r7, #8]
 8004340:	430a      	orrs	r2, r1
 8004342:	629a      	str	r2, [r3, #40]	@ 0x28
 8004344:	e028      	b.n	8004398 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800434c:	0c1b      	lsrs	r3, r3, #16
 800434e:	68ba      	ldr	r2, [r7, #8]
 8004350:	4413      	add	r3, r2
 8004352:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004354:	2300      	movs	r3, #0
 8004356:	73fb      	strb	r3, [r7, #15]
 8004358:	e00d      	b.n	8004376 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	7bfb      	ldrb	r3, [r7, #15]
 8004360:	3340      	adds	r3, #64	@ 0x40
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	4413      	add	r3, r2
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	0c1b      	lsrs	r3, r3, #16
 800436a:	68ba      	ldr	r2, [r7, #8]
 800436c:	4413      	add	r3, r2
 800436e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004370:	7bfb      	ldrb	r3, [r7, #15]
 8004372:	3301      	adds	r3, #1
 8004374:	73fb      	strb	r3, [r7, #15]
 8004376:	7bfa      	ldrb	r2, [r7, #15]
 8004378:	78fb      	ldrb	r3, [r7, #3]
 800437a:	3b01      	subs	r3, #1
 800437c:	429a      	cmp	r2, r3
 800437e:	d3ec      	bcc.n	800435a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004380:	883b      	ldrh	r3, [r7, #0]
 8004382:	0418      	lsls	r0, r3, #16
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6819      	ldr	r1, [r3, #0]
 8004388:	78fb      	ldrb	r3, [r7, #3]
 800438a:	3b01      	subs	r3, #1
 800438c:	68ba      	ldr	r2, [r7, #8]
 800438e:	4302      	orrs	r2, r0
 8004390:	3340      	adds	r3, #64	@ 0x40
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	440b      	add	r3, r1
 8004396:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3714      	adds	r7, #20
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr

080043a6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80043a6:	b480      	push	{r7}
 80043a8:	b083      	sub	sp, #12
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
 80043ae:	460b      	mov	r3, r1
 80043b0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	887a      	ldrh	r2, [r7, #2]
 80043b8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	460b      	mov	r3, r1
 80043d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80043d4:	bf00      	nop
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d101      	bne.n	80043f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e267      	b.n	80048c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d075      	beq.n	80044ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043fe:	4b88      	ldr	r3, [pc, #544]	@ (8004620 <HAL_RCC_OscConfig+0x240>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f003 030c 	and.w	r3, r3, #12
 8004406:	2b04      	cmp	r3, #4
 8004408:	d00c      	beq.n	8004424 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800440a:	4b85      	ldr	r3, [pc, #532]	@ (8004620 <HAL_RCC_OscConfig+0x240>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004412:	2b08      	cmp	r3, #8
 8004414:	d112      	bne.n	800443c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004416:	4b82      	ldr	r3, [pc, #520]	@ (8004620 <HAL_RCC_OscConfig+0x240>)
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800441e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004422:	d10b      	bne.n	800443c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004424:	4b7e      	ldr	r3, [pc, #504]	@ (8004620 <HAL_RCC_OscConfig+0x240>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d05b      	beq.n	80044e8 <HAL_RCC_OscConfig+0x108>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d157      	bne.n	80044e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e242      	b.n	80048c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004444:	d106      	bne.n	8004454 <HAL_RCC_OscConfig+0x74>
 8004446:	4b76      	ldr	r3, [pc, #472]	@ (8004620 <HAL_RCC_OscConfig+0x240>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a75      	ldr	r2, [pc, #468]	@ (8004620 <HAL_RCC_OscConfig+0x240>)
 800444c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004450:	6013      	str	r3, [r2, #0]
 8004452:	e01d      	b.n	8004490 <HAL_RCC_OscConfig+0xb0>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800445c:	d10c      	bne.n	8004478 <HAL_RCC_OscConfig+0x98>
 800445e:	4b70      	ldr	r3, [pc, #448]	@ (8004620 <HAL_RCC_OscConfig+0x240>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a6f      	ldr	r2, [pc, #444]	@ (8004620 <HAL_RCC_OscConfig+0x240>)
 8004464:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004468:	6013      	str	r3, [r2, #0]
 800446a:	4b6d      	ldr	r3, [pc, #436]	@ (8004620 <HAL_RCC_OscConfig+0x240>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a6c      	ldr	r2, [pc, #432]	@ (8004620 <HAL_RCC_OscConfig+0x240>)
 8004470:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004474:	6013      	str	r3, [r2, #0]
 8004476:	e00b      	b.n	8004490 <HAL_RCC_OscConfig+0xb0>
 8004478:	4b69      	ldr	r3, [pc, #420]	@ (8004620 <HAL_RCC_OscConfig+0x240>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a68      	ldr	r2, [pc, #416]	@ (8004620 <HAL_RCC_OscConfig+0x240>)
 800447e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004482:	6013      	str	r3, [r2, #0]
 8004484:	4b66      	ldr	r3, [pc, #408]	@ (8004620 <HAL_RCC_OscConfig+0x240>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a65      	ldr	r2, [pc, #404]	@ (8004620 <HAL_RCC_OscConfig+0x240>)
 800448a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800448e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d013      	beq.n	80044c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004498:	f7fd fbcc 	bl	8001c34 <HAL_GetTick>
 800449c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800449e:	e008      	b.n	80044b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044a0:	f7fd fbc8 	bl	8001c34 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b64      	cmp	r3, #100	@ 0x64
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e207      	b.n	80048c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044b2:	4b5b      	ldr	r3, [pc, #364]	@ (8004620 <HAL_RCC_OscConfig+0x240>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d0f0      	beq.n	80044a0 <HAL_RCC_OscConfig+0xc0>
 80044be:	e014      	b.n	80044ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c0:	f7fd fbb8 	bl	8001c34 <HAL_GetTick>
 80044c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044c6:	e008      	b.n	80044da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044c8:	f7fd fbb4 	bl	8001c34 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b64      	cmp	r3, #100	@ 0x64
 80044d4:	d901      	bls.n	80044da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e1f3      	b.n	80048c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044da:	4b51      	ldr	r3, [pc, #324]	@ (8004620 <HAL_RCC_OscConfig+0x240>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1f0      	bne.n	80044c8 <HAL_RCC_OscConfig+0xe8>
 80044e6:	e000      	b.n	80044ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d063      	beq.n	80045be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044f6:	4b4a      	ldr	r3, [pc, #296]	@ (8004620 <HAL_RCC_OscConfig+0x240>)
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f003 030c 	and.w	r3, r3, #12
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00b      	beq.n	800451a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004502:	4b47      	ldr	r3, [pc, #284]	@ (8004620 <HAL_RCC_OscConfig+0x240>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800450a:	2b08      	cmp	r3, #8
 800450c:	d11c      	bne.n	8004548 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800450e:	4b44      	ldr	r3, [pc, #272]	@ (8004620 <HAL_RCC_OscConfig+0x240>)
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d116      	bne.n	8004548 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800451a:	4b41      	ldr	r3, [pc, #260]	@ (8004620 <HAL_RCC_OscConfig+0x240>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d005      	beq.n	8004532 <HAL_RCC_OscConfig+0x152>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	2b01      	cmp	r3, #1
 800452c:	d001      	beq.n	8004532 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e1c7      	b.n	80048c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004532:	4b3b      	ldr	r3, [pc, #236]	@ (8004620 <HAL_RCC_OscConfig+0x240>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	00db      	lsls	r3, r3, #3
 8004540:	4937      	ldr	r1, [pc, #220]	@ (8004620 <HAL_RCC_OscConfig+0x240>)
 8004542:	4313      	orrs	r3, r2
 8004544:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004546:	e03a      	b.n	80045be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d020      	beq.n	8004592 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004550:	4b34      	ldr	r3, [pc, #208]	@ (8004624 <HAL_RCC_OscConfig+0x244>)
 8004552:	2201      	movs	r2, #1
 8004554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004556:	f7fd fb6d 	bl	8001c34 <HAL_GetTick>
 800455a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800455c:	e008      	b.n	8004570 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800455e:	f7fd fb69 	bl	8001c34 <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	2b02      	cmp	r3, #2
 800456a:	d901      	bls.n	8004570 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e1a8      	b.n	80048c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004570:	4b2b      	ldr	r3, [pc, #172]	@ (8004620 <HAL_RCC_OscConfig+0x240>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b00      	cmp	r3, #0
 800457a:	d0f0      	beq.n	800455e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800457c:	4b28      	ldr	r3, [pc, #160]	@ (8004620 <HAL_RCC_OscConfig+0x240>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	00db      	lsls	r3, r3, #3
 800458a:	4925      	ldr	r1, [pc, #148]	@ (8004620 <HAL_RCC_OscConfig+0x240>)
 800458c:	4313      	orrs	r3, r2
 800458e:	600b      	str	r3, [r1, #0]
 8004590:	e015      	b.n	80045be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004592:	4b24      	ldr	r3, [pc, #144]	@ (8004624 <HAL_RCC_OscConfig+0x244>)
 8004594:	2200      	movs	r2, #0
 8004596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004598:	f7fd fb4c 	bl	8001c34 <HAL_GetTick>
 800459c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800459e:	e008      	b.n	80045b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045a0:	f7fd fb48 	bl	8001c34 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e187      	b.n	80048c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045b2:	4b1b      	ldr	r3, [pc, #108]	@ (8004620 <HAL_RCC_OscConfig+0x240>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1f0      	bne.n	80045a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0308 	and.w	r3, r3, #8
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d036      	beq.n	8004638 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d016      	beq.n	8004600 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045d2:	4b15      	ldr	r3, [pc, #84]	@ (8004628 <HAL_RCC_OscConfig+0x248>)
 80045d4:	2201      	movs	r2, #1
 80045d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045d8:	f7fd fb2c 	bl	8001c34 <HAL_GetTick>
 80045dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045de:	e008      	b.n	80045f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045e0:	f7fd fb28 	bl	8001c34 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e167      	b.n	80048c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004620 <HAL_RCC_OscConfig+0x240>)
 80045f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d0f0      	beq.n	80045e0 <HAL_RCC_OscConfig+0x200>
 80045fe:	e01b      	b.n	8004638 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004600:	4b09      	ldr	r3, [pc, #36]	@ (8004628 <HAL_RCC_OscConfig+0x248>)
 8004602:	2200      	movs	r2, #0
 8004604:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004606:	f7fd fb15 	bl	8001c34 <HAL_GetTick>
 800460a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800460c:	e00e      	b.n	800462c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800460e:	f7fd fb11 	bl	8001c34 <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	2b02      	cmp	r3, #2
 800461a:	d907      	bls.n	800462c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e150      	b.n	80048c2 <HAL_RCC_OscConfig+0x4e2>
 8004620:	40023800 	.word	0x40023800
 8004624:	42470000 	.word	0x42470000
 8004628:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800462c:	4b88      	ldr	r3, [pc, #544]	@ (8004850 <HAL_RCC_OscConfig+0x470>)
 800462e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004630:	f003 0302 	and.w	r3, r3, #2
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1ea      	bne.n	800460e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0304 	and.w	r3, r3, #4
 8004640:	2b00      	cmp	r3, #0
 8004642:	f000 8097 	beq.w	8004774 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004646:	2300      	movs	r3, #0
 8004648:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800464a:	4b81      	ldr	r3, [pc, #516]	@ (8004850 <HAL_RCC_OscConfig+0x470>)
 800464c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800464e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10f      	bne.n	8004676 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004656:	2300      	movs	r3, #0
 8004658:	60bb      	str	r3, [r7, #8]
 800465a:	4b7d      	ldr	r3, [pc, #500]	@ (8004850 <HAL_RCC_OscConfig+0x470>)
 800465c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800465e:	4a7c      	ldr	r2, [pc, #496]	@ (8004850 <HAL_RCC_OscConfig+0x470>)
 8004660:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004664:	6413      	str	r3, [r2, #64]	@ 0x40
 8004666:	4b7a      	ldr	r3, [pc, #488]	@ (8004850 <HAL_RCC_OscConfig+0x470>)
 8004668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800466a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800466e:	60bb      	str	r3, [r7, #8]
 8004670:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004672:	2301      	movs	r3, #1
 8004674:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004676:	4b77      	ldr	r3, [pc, #476]	@ (8004854 <HAL_RCC_OscConfig+0x474>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800467e:	2b00      	cmp	r3, #0
 8004680:	d118      	bne.n	80046b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004682:	4b74      	ldr	r3, [pc, #464]	@ (8004854 <HAL_RCC_OscConfig+0x474>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a73      	ldr	r2, [pc, #460]	@ (8004854 <HAL_RCC_OscConfig+0x474>)
 8004688:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800468c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800468e:	f7fd fad1 	bl	8001c34 <HAL_GetTick>
 8004692:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004694:	e008      	b.n	80046a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004696:	f7fd facd 	bl	8001c34 <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d901      	bls.n	80046a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e10c      	b.n	80048c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046a8:	4b6a      	ldr	r3, [pc, #424]	@ (8004854 <HAL_RCC_OscConfig+0x474>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d0f0      	beq.n	8004696 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d106      	bne.n	80046ca <HAL_RCC_OscConfig+0x2ea>
 80046bc:	4b64      	ldr	r3, [pc, #400]	@ (8004850 <HAL_RCC_OscConfig+0x470>)
 80046be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046c0:	4a63      	ldr	r2, [pc, #396]	@ (8004850 <HAL_RCC_OscConfig+0x470>)
 80046c2:	f043 0301 	orr.w	r3, r3, #1
 80046c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80046c8:	e01c      	b.n	8004704 <HAL_RCC_OscConfig+0x324>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	2b05      	cmp	r3, #5
 80046d0:	d10c      	bne.n	80046ec <HAL_RCC_OscConfig+0x30c>
 80046d2:	4b5f      	ldr	r3, [pc, #380]	@ (8004850 <HAL_RCC_OscConfig+0x470>)
 80046d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046d6:	4a5e      	ldr	r2, [pc, #376]	@ (8004850 <HAL_RCC_OscConfig+0x470>)
 80046d8:	f043 0304 	orr.w	r3, r3, #4
 80046dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80046de:	4b5c      	ldr	r3, [pc, #368]	@ (8004850 <HAL_RCC_OscConfig+0x470>)
 80046e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046e2:	4a5b      	ldr	r2, [pc, #364]	@ (8004850 <HAL_RCC_OscConfig+0x470>)
 80046e4:	f043 0301 	orr.w	r3, r3, #1
 80046e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80046ea:	e00b      	b.n	8004704 <HAL_RCC_OscConfig+0x324>
 80046ec:	4b58      	ldr	r3, [pc, #352]	@ (8004850 <HAL_RCC_OscConfig+0x470>)
 80046ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046f0:	4a57      	ldr	r2, [pc, #348]	@ (8004850 <HAL_RCC_OscConfig+0x470>)
 80046f2:	f023 0301 	bic.w	r3, r3, #1
 80046f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80046f8:	4b55      	ldr	r3, [pc, #340]	@ (8004850 <HAL_RCC_OscConfig+0x470>)
 80046fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046fc:	4a54      	ldr	r2, [pc, #336]	@ (8004850 <HAL_RCC_OscConfig+0x470>)
 80046fe:	f023 0304 	bic.w	r3, r3, #4
 8004702:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d015      	beq.n	8004738 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800470c:	f7fd fa92 	bl	8001c34 <HAL_GetTick>
 8004710:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004712:	e00a      	b.n	800472a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004714:	f7fd fa8e 	bl	8001c34 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004722:	4293      	cmp	r3, r2
 8004724:	d901      	bls.n	800472a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e0cb      	b.n	80048c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800472a:	4b49      	ldr	r3, [pc, #292]	@ (8004850 <HAL_RCC_OscConfig+0x470>)
 800472c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800472e:	f003 0302 	and.w	r3, r3, #2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d0ee      	beq.n	8004714 <HAL_RCC_OscConfig+0x334>
 8004736:	e014      	b.n	8004762 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004738:	f7fd fa7c 	bl	8001c34 <HAL_GetTick>
 800473c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800473e:	e00a      	b.n	8004756 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004740:	f7fd fa78 	bl	8001c34 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800474e:	4293      	cmp	r3, r2
 8004750:	d901      	bls.n	8004756 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e0b5      	b.n	80048c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004756:	4b3e      	ldr	r3, [pc, #248]	@ (8004850 <HAL_RCC_OscConfig+0x470>)
 8004758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1ee      	bne.n	8004740 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004762:	7dfb      	ldrb	r3, [r7, #23]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d105      	bne.n	8004774 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004768:	4b39      	ldr	r3, [pc, #228]	@ (8004850 <HAL_RCC_OscConfig+0x470>)
 800476a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800476c:	4a38      	ldr	r2, [pc, #224]	@ (8004850 <HAL_RCC_OscConfig+0x470>)
 800476e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004772:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	2b00      	cmp	r3, #0
 800477a:	f000 80a1 	beq.w	80048c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800477e:	4b34      	ldr	r3, [pc, #208]	@ (8004850 <HAL_RCC_OscConfig+0x470>)
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f003 030c 	and.w	r3, r3, #12
 8004786:	2b08      	cmp	r3, #8
 8004788:	d05c      	beq.n	8004844 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	2b02      	cmp	r3, #2
 8004790:	d141      	bne.n	8004816 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004792:	4b31      	ldr	r3, [pc, #196]	@ (8004858 <HAL_RCC_OscConfig+0x478>)
 8004794:	2200      	movs	r2, #0
 8004796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004798:	f7fd fa4c 	bl	8001c34 <HAL_GetTick>
 800479c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800479e:	e008      	b.n	80047b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047a0:	f7fd fa48 	bl	8001c34 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e087      	b.n	80048c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047b2:	4b27      	ldr	r3, [pc, #156]	@ (8004850 <HAL_RCC_OscConfig+0x470>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1f0      	bne.n	80047a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	69da      	ldr	r2, [r3, #28]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	431a      	orrs	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047cc:	019b      	lsls	r3, r3, #6
 80047ce:	431a      	orrs	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047d4:	085b      	lsrs	r3, r3, #1
 80047d6:	3b01      	subs	r3, #1
 80047d8:	041b      	lsls	r3, r3, #16
 80047da:	431a      	orrs	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e0:	061b      	lsls	r3, r3, #24
 80047e2:	491b      	ldr	r1, [pc, #108]	@ (8004850 <HAL_RCC_OscConfig+0x470>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047e8:	4b1b      	ldr	r3, [pc, #108]	@ (8004858 <HAL_RCC_OscConfig+0x478>)
 80047ea:	2201      	movs	r2, #1
 80047ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ee:	f7fd fa21 	bl	8001c34 <HAL_GetTick>
 80047f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047f4:	e008      	b.n	8004808 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047f6:	f7fd fa1d 	bl	8001c34 <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	2b02      	cmp	r3, #2
 8004802:	d901      	bls.n	8004808 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e05c      	b.n	80048c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004808:	4b11      	ldr	r3, [pc, #68]	@ (8004850 <HAL_RCC_OscConfig+0x470>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d0f0      	beq.n	80047f6 <HAL_RCC_OscConfig+0x416>
 8004814:	e054      	b.n	80048c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004816:	4b10      	ldr	r3, [pc, #64]	@ (8004858 <HAL_RCC_OscConfig+0x478>)
 8004818:	2200      	movs	r2, #0
 800481a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800481c:	f7fd fa0a 	bl	8001c34 <HAL_GetTick>
 8004820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004822:	e008      	b.n	8004836 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004824:	f7fd fa06 	bl	8001c34 <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	2b02      	cmp	r3, #2
 8004830:	d901      	bls.n	8004836 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e045      	b.n	80048c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004836:	4b06      	ldr	r3, [pc, #24]	@ (8004850 <HAL_RCC_OscConfig+0x470>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1f0      	bne.n	8004824 <HAL_RCC_OscConfig+0x444>
 8004842:	e03d      	b.n	80048c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d107      	bne.n	800485c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e038      	b.n	80048c2 <HAL_RCC_OscConfig+0x4e2>
 8004850:	40023800 	.word	0x40023800
 8004854:	40007000 	.word	0x40007000
 8004858:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800485c:	4b1b      	ldr	r3, [pc, #108]	@ (80048cc <HAL_RCC_OscConfig+0x4ec>)
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	2b01      	cmp	r3, #1
 8004868:	d028      	beq.n	80048bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004874:	429a      	cmp	r2, r3
 8004876:	d121      	bne.n	80048bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004882:	429a      	cmp	r2, r3
 8004884:	d11a      	bne.n	80048bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800488c:	4013      	ands	r3, r2
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004892:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004894:	4293      	cmp	r3, r2
 8004896:	d111      	bne.n	80048bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048a2:	085b      	lsrs	r3, r3, #1
 80048a4:	3b01      	subs	r3, #1
 80048a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d107      	bne.n	80048bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d001      	beq.n	80048c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e000      	b.n	80048c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3718      	adds	r7, #24
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	40023800 	.word	0x40023800

080048d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d101      	bne.n	80048e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e0cc      	b.n	8004a7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048e4:	4b68      	ldr	r3, [pc, #416]	@ (8004a88 <HAL_RCC_ClockConfig+0x1b8>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0307 	and.w	r3, r3, #7
 80048ec:	683a      	ldr	r2, [r7, #0]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d90c      	bls.n	800490c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048f2:	4b65      	ldr	r3, [pc, #404]	@ (8004a88 <HAL_RCC_ClockConfig+0x1b8>)
 80048f4:	683a      	ldr	r2, [r7, #0]
 80048f6:	b2d2      	uxtb	r2, r2
 80048f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048fa:	4b63      	ldr	r3, [pc, #396]	@ (8004a88 <HAL_RCC_ClockConfig+0x1b8>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0307 	and.w	r3, r3, #7
 8004902:	683a      	ldr	r2, [r7, #0]
 8004904:	429a      	cmp	r2, r3
 8004906:	d001      	beq.n	800490c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e0b8      	b.n	8004a7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0302 	and.w	r3, r3, #2
 8004914:	2b00      	cmp	r3, #0
 8004916:	d020      	beq.n	800495a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0304 	and.w	r3, r3, #4
 8004920:	2b00      	cmp	r3, #0
 8004922:	d005      	beq.n	8004930 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004924:	4b59      	ldr	r3, [pc, #356]	@ (8004a8c <HAL_RCC_ClockConfig+0x1bc>)
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	4a58      	ldr	r2, [pc, #352]	@ (8004a8c <HAL_RCC_ClockConfig+0x1bc>)
 800492a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800492e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0308 	and.w	r3, r3, #8
 8004938:	2b00      	cmp	r3, #0
 800493a:	d005      	beq.n	8004948 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800493c:	4b53      	ldr	r3, [pc, #332]	@ (8004a8c <HAL_RCC_ClockConfig+0x1bc>)
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	4a52      	ldr	r2, [pc, #328]	@ (8004a8c <HAL_RCC_ClockConfig+0x1bc>)
 8004942:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004946:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004948:	4b50      	ldr	r3, [pc, #320]	@ (8004a8c <HAL_RCC_ClockConfig+0x1bc>)
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	494d      	ldr	r1, [pc, #308]	@ (8004a8c <HAL_RCC_ClockConfig+0x1bc>)
 8004956:	4313      	orrs	r3, r2
 8004958:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	2b00      	cmp	r3, #0
 8004964:	d044      	beq.n	80049f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	2b01      	cmp	r3, #1
 800496c:	d107      	bne.n	800497e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800496e:	4b47      	ldr	r3, [pc, #284]	@ (8004a8c <HAL_RCC_ClockConfig+0x1bc>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d119      	bne.n	80049ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e07f      	b.n	8004a7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	2b02      	cmp	r3, #2
 8004984:	d003      	beq.n	800498e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800498a:	2b03      	cmp	r3, #3
 800498c:	d107      	bne.n	800499e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800498e:	4b3f      	ldr	r3, [pc, #252]	@ (8004a8c <HAL_RCC_ClockConfig+0x1bc>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d109      	bne.n	80049ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e06f      	b.n	8004a7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800499e:	4b3b      	ldr	r3, [pc, #236]	@ (8004a8c <HAL_RCC_ClockConfig+0x1bc>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0302 	and.w	r3, r3, #2
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d101      	bne.n	80049ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e067      	b.n	8004a7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049ae:	4b37      	ldr	r3, [pc, #220]	@ (8004a8c <HAL_RCC_ClockConfig+0x1bc>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f023 0203 	bic.w	r2, r3, #3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	4934      	ldr	r1, [pc, #208]	@ (8004a8c <HAL_RCC_ClockConfig+0x1bc>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049c0:	f7fd f938 	bl	8001c34 <HAL_GetTick>
 80049c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049c6:	e00a      	b.n	80049de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049c8:	f7fd f934 	bl	8001c34 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d901      	bls.n	80049de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e04f      	b.n	8004a7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049de:	4b2b      	ldr	r3, [pc, #172]	@ (8004a8c <HAL_RCC_ClockConfig+0x1bc>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f003 020c 	and.w	r2, r3, #12
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d1eb      	bne.n	80049c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049f0:	4b25      	ldr	r3, [pc, #148]	@ (8004a88 <HAL_RCC_ClockConfig+0x1b8>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0307 	and.w	r3, r3, #7
 80049f8:	683a      	ldr	r2, [r7, #0]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d20c      	bcs.n	8004a18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049fe:	4b22      	ldr	r3, [pc, #136]	@ (8004a88 <HAL_RCC_ClockConfig+0x1b8>)
 8004a00:	683a      	ldr	r2, [r7, #0]
 8004a02:	b2d2      	uxtb	r2, r2
 8004a04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a06:	4b20      	ldr	r3, [pc, #128]	@ (8004a88 <HAL_RCC_ClockConfig+0x1b8>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0307 	and.w	r3, r3, #7
 8004a0e:	683a      	ldr	r2, [r7, #0]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d001      	beq.n	8004a18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e032      	b.n	8004a7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0304 	and.w	r3, r3, #4
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d008      	beq.n	8004a36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a24:	4b19      	ldr	r3, [pc, #100]	@ (8004a8c <HAL_RCC_ClockConfig+0x1bc>)
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	4916      	ldr	r1, [pc, #88]	@ (8004a8c <HAL_RCC_ClockConfig+0x1bc>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0308 	and.w	r3, r3, #8
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d009      	beq.n	8004a56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a42:	4b12      	ldr	r3, [pc, #72]	@ (8004a8c <HAL_RCC_ClockConfig+0x1bc>)
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	00db      	lsls	r3, r3, #3
 8004a50:	490e      	ldr	r1, [pc, #56]	@ (8004a8c <HAL_RCC_ClockConfig+0x1bc>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a56:	f000 f821 	bl	8004a9c <HAL_RCC_GetSysClockFreq>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8004a8c <HAL_RCC_ClockConfig+0x1bc>)
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	091b      	lsrs	r3, r3, #4
 8004a62:	f003 030f 	and.w	r3, r3, #15
 8004a66:	490a      	ldr	r1, [pc, #40]	@ (8004a90 <HAL_RCC_ClockConfig+0x1c0>)
 8004a68:	5ccb      	ldrb	r3, [r1, r3]
 8004a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a6e:	4a09      	ldr	r2, [pc, #36]	@ (8004a94 <HAL_RCC_ClockConfig+0x1c4>)
 8004a70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a72:	4b09      	ldr	r3, [pc, #36]	@ (8004a98 <HAL_RCC_ClockConfig+0x1c8>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7fd f898 	bl	8001bac <HAL_InitTick>

  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3710      	adds	r7, #16
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	40023c00 	.word	0x40023c00
 8004a8c:	40023800 	.word	0x40023800
 8004a90:	080099bc 	.word	0x080099bc
 8004a94:	20000000 	.word	0x20000000
 8004a98:	20000004 	.word	0x20000004

08004a9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004aa0:	b094      	sub	sp, #80	@ 0x50
 8004aa2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	647b      	str	r3, [r7, #68]	@ 0x44
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004aac:	2300      	movs	r3, #0
 8004aae:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ab4:	4b79      	ldr	r3, [pc, #484]	@ (8004c9c <HAL_RCC_GetSysClockFreq+0x200>)
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f003 030c 	and.w	r3, r3, #12
 8004abc:	2b08      	cmp	r3, #8
 8004abe:	d00d      	beq.n	8004adc <HAL_RCC_GetSysClockFreq+0x40>
 8004ac0:	2b08      	cmp	r3, #8
 8004ac2:	f200 80e1 	bhi.w	8004c88 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d002      	beq.n	8004ad0 <HAL_RCC_GetSysClockFreq+0x34>
 8004aca:	2b04      	cmp	r3, #4
 8004acc:	d003      	beq.n	8004ad6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004ace:	e0db      	b.n	8004c88 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ad0:	4b73      	ldr	r3, [pc, #460]	@ (8004ca0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ad2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004ad4:	e0db      	b.n	8004c8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ad6:	4b73      	ldr	r3, [pc, #460]	@ (8004ca4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004ad8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ada:	e0d8      	b.n	8004c8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004adc:	4b6f      	ldr	r3, [pc, #444]	@ (8004c9c <HAL_RCC_GetSysClockFreq+0x200>)
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ae4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ae6:	4b6d      	ldr	r3, [pc, #436]	@ (8004c9c <HAL_RCC_GetSysClockFreq+0x200>)
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d063      	beq.n	8004bba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004af2:	4b6a      	ldr	r3, [pc, #424]	@ (8004c9c <HAL_RCC_GetSysClockFreq+0x200>)
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	099b      	lsrs	r3, r3, #6
 8004af8:	2200      	movs	r2, #0
 8004afa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004afc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b04:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b06:	2300      	movs	r3, #0
 8004b08:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b0a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004b0e:	4622      	mov	r2, r4
 8004b10:	462b      	mov	r3, r5
 8004b12:	f04f 0000 	mov.w	r0, #0
 8004b16:	f04f 0100 	mov.w	r1, #0
 8004b1a:	0159      	lsls	r1, r3, #5
 8004b1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b20:	0150      	lsls	r0, r2, #5
 8004b22:	4602      	mov	r2, r0
 8004b24:	460b      	mov	r3, r1
 8004b26:	4621      	mov	r1, r4
 8004b28:	1a51      	subs	r1, r2, r1
 8004b2a:	6139      	str	r1, [r7, #16]
 8004b2c:	4629      	mov	r1, r5
 8004b2e:	eb63 0301 	sbc.w	r3, r3, r1
 8004b32:	617b      	str	r3, [r7, #20]
 8004b34:	f04f 0200 	mov.w	r2, #0
 8004b38:	f04f 0300 	mov.w	r3, #0
 8004b3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b40:	4659      	mov	r1, fp
 8004b42:	018b      	lsls	r3, r1, #6
 8004b44:	4651      	mov	r1, sl
 8004b46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b4a:	4651      	mov	r1, sl
 8004b4c:	018a      	lsls	r2, r1, #6
 8004b4e:	4651      	mov	r1, sl
 8004b50:	ebb2 0801 	subs.w	r8, r2, r1
 8004b54:	4659      	mov	r1, fp
 8004b56:	eb63 0901 	sbc.w	r9, r3, r1
 8004b5a:	f04f 0200 	mov.w	r2, #0
 8004b5e:	f04f 0300 	mov.w	r3, #0
 8004b62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b6e:	4690      	mov	r8, r2
 8004b70:	4699      	mov	r9, r3
 8004b72:	4623      	mov	r3, r4
 8004b74:	eb18 0303 	adds.w	r3, r8, r3
 8004b78:	60bb      	str	r3, [r7, #8]
 8004b7a:	462b      	mov	r3, r5
 8004b7c:	eb49 0303 	adc.w	r3, r9, r3
 8004b80:	60fb      	str	r3, [r7, #12]
 8004b82:	f04f 0200 	mov.w	r2, #0
 8004b86:	f04f 0300 	mov.w	r3, #0
 8004b8a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b8e:	4629      	mov	r1, r5
 8004b90:	024b      	lsls	r3, r1, #9
 8004b92:	4621      	mov	r1, r4
 8004b94:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b98:	4621      	mov	r1, r4
 8004b9a:	024a      	lsls	r2, r1, #9
 8004b9c:	4610      	mov	r0, r2
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ba6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ba8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004bac:	f7fb fb68 	bl	8000280 <__aeabi_uldivmod>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bb8:	e058      	b.n	8004c6c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bba:	4b38      	ldr	r3, [pc, #224]	@ (8004c9c <HAL_RCC_GetSysClockFreq+0x200>)
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	099b      	lsrs	r3, r3, #6
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	4611      	mov	r1, r2
 8004bc6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004bca:	623b      	str	r3, [r7, #32]
 8004bcc:	2300      	movs	r3, #0
 8004bce:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bd0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004bd4:	4642      	mov	r2, r8
 8004bd6:	464b      	mov	r3, r9
 8004bd8:	f04f 0000 	mov.w	r0, #0
 8004bdc:	f04f 0100 	mov.w	r1, #0
 8004be0:	0159      	lsls	r1, r3, #5
 8004be2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004be6:	0150      	lsls	r0, r2, #5
 8004be8:	4602      	mov	r2, r0
 8004bea:	460b      	mov	r3, r1
 8004bec:	4641      	mov	r1, r8
 8004bee:	ebb2 0a01 	subs.w	sl, r2, r1
 8004bf2:	4649      	mov	r1, r9
 8004bf4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004bf8:	f04f 0200 	mov.w	r2, #0
 8004bfc:	f04f 0300 	mov.w	r3, #0
 8004c00:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004c04:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004c08:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004c0c:	ebb2 040a 	subs.w	r4, r2, sl
 8004c10:	eb63 050b 	sbc.w	r5, r3, fp
 8004c14:	f04f 0200 	mov.w	r2, #0
 8004c18:	f04f 0300 	mov.w	r3, #0
 8004c1c:	00eb      	lsls	r3, r5, #3
 8004c1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c22:	00e2      	lsls	r2, r4, #3
 8004c24:	4614      	mov	r4, r2
 8004c26:	461d      	mov	r5, r3
 8004c28:	4643      	mov	r3, r8
 8004c2a:	18e3      	adds	r3, r4, r3
 8004c2c:	603b      	str	r3, [r7, #0]
 8004c2e:	464b      	mov	r3, r9
 8004c30:	eb45 0303 	adc.w	r3, r5, r3
 8004c34:	607b      	str	r3, [r7, #4]
 8004c36:	f04f 0200 	mov.w	r2, #0
 8004c3a:	f04f 0300 	mov.w	r3, #0
 8004c3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c42:	4629      	mov	r1, r5
 8004c44:	028b      	lsls	r3, r1, #10
 8004c46:	4621      	mov	r1, r4
 8004c48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c4c:	4621      	mov	r1, r4
 8004c4e:	028a      	lsls	r2, r1, #10
 8004c50:	4610      	mov	r0, r2
 8004c52:	4619      	mov	r1, r3
 8004c54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c56:	2200      	movs	r2, #0
 8004c58:	61bb      	str	r3, [r7, #24]
 8004c5a:	61fa      	str	r2, [r7, #28]
 8004c5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c60:	f7fb fb0e 	bl	8000280 <__aeabi_uldivmod>
 8004c64:	4602      	mov	r2, r0
 8004c66:	460b      	mov	r3, r1
 8004c68:	4613      	mov	r3, r2
 8004c6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c9c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	0c1b      	lsrs	r3, r3, #16
 8004c72:	f003 0303 	and.w	r3, r3, #3
 8004c76:	3301      	adds	r3, #1
 8004c78:	005b      	lsls	r3, r3, #1
 8004c7a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004c7c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c84:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c86:	e002      	b.n	8004c8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c88:	4b05      	ldr	r3, [pc, #20]	@ (8004ca0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c8a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3750      	adds	r7, #80	@ 0x50
 8004c94:	46bd      	mov	sp, r7
 8004c96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c9a:	bf00      	nop
 8004c9c:	40023800 	.word	0x40023800
 8004ca0:	00f42400 	.word	0x00f42400
 8004ca4:	007a1200 	.word	0x007a1200

08004ca8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cac:	4b03      	ldr	r3, [pc, #12]	@ (8004cbc <HAL_RCC_GetHCLKFreq+0x14>)
 8004cae:	681b      	ldr	r3, [r3, #0]
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	20000000 	.word	0x20000000

08004cc0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004cc0:	b084      	sub	sp, #16
 8004cc2:	b580      	push	{r7, lr}
 8004cc4:	b084      	sub	sp, #16
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
 8004cca:	f107 001c 	add.w	r0, r7, #28
 8004cce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d122      	bne.n	8004d1e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cdc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004cec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004d00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d105      	bne.n	8004d12 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f001 fbee 	bl	80064f4 <USB_CoreReset>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	73fb      	strb	r3, [r7, #15]
 8004d1c:	e01a      	b.n	8004d54 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f001 fbe2 	bl	80064f4 <USB_CoreReset>
 8004d30:	4603      	mov	r3, r0
 8004d32:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004d34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d106      	bne.n	8004d48 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d3e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	639a      	str	r2, [r3, #56]	@ 0x38
 8004d46:	e005      	b.n	8004d54 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d4c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d10b      	bne.n	8004d72 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f043 0206 	orr.w	r2, r3, #6
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f043 0220 	orr.w	r2, r3, #32
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3710      	adds	r7, #16
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d7e:	b004      	add	sp, #16
 8004d80:	4770      	bx	lr
	...

08004d84 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b087      	sub	sp, #28
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004d92:	79fb      	ldrb	r3, [r7, #7]
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d165      	bne.n	8004e64 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	4a41      	ldr	r2, [pc, #260]	@ (8004ea0 <USB_SetTurnaroundTime+0x11c>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d906      	bls.n	8004dae <USB_SetTurnaroundTime+0x2a>
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	4a40      	ldr	r2, [pc, #256]	@ (8004ea4 <USB_SetTurnaroundTime+0x120>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d202      	bcs.n	8004dae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004da8:	230f      	movs	r3, #15
 8004daa:	617b      	str	r3, [r7, #20]
 8004dac:	e062      	b.n	8004e74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	4a3c      	ldr	r2, [pc, #240]	@ (8004ea4 <USB_SetTurnaroundTime+0x120>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d306      	bcc.n	8004dc4 <USB_SetTurnaroundTime+0x40>
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	4a3b      	ldr	r2, [pc, #236]	@ (8004ea8 <USB_SetTurnaroundTime+0x124>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d202      	bcs.n	8004dc4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004dbe:	230e      	movs	r3, #14
 8004dc0:	617b      	str	r3, [r7, #20]
 8004dc2:	e057      	b.n	8004e74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	4a38      	ldr	r2, [pc, #224]	@ (8004ea8 <USB_SetTurnaroundTime+0x124>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d306      	bcc.n	8004dda <USB_SetTurnaroundTime+0x56>
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	4a37      	ldr	r2, [pc, #220]	@ (8004eac <USB_SetTurnaroundTime+0x128>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d202      	bcs.n	8004dda <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004dd4:	230d      	movs	r3, #13
 8004dd6:	617b      	str	r3, [r7, #20]
 8004dd8:	e04c      	b.n	8004e74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	4a33      	ldr	r2, [pc, #204]	@ (8004eac <USB_SetTurnaroundTime+0x128>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d306      	bcc.n	8004df0 <USB_SetTurnaroundTime+0x6c>
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	4a32      	ldr	r2, [pc, #200]	@ (8004eb0 <USB_SetTurnaroundTime+0x12c>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d802      	bhi.n	8004df0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004dea:	230c      	movs	r3, #12
 8004dec:	617b      	str	r3, [r7, #20]
 8004dee:	e041      	b.n	8004e74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	4a2f      	ldr	r2, [pc, #188]	@ (8004eb0 <USB_SetTurnaroundTime+0x12c>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d906      	bls.n	8004e06 <USB_SetTurnaroundTime+0x82>
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	4a2e      	ldr	r2, [pc, #184]	@ (8004eb4 <USB_SetTurnaroundTime+0x130>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d802      	bhi.n	8004e06 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004e00:	230b      	movs	r3, #11
 8004e02:	617b      	str	r3, [r7, #20]
 8004e04:	e036      	b.n	8004e74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	4a2a      	ldr	r2, [pc, #168]	@ (8004eb4 <USB_SetTurnaroundTime+0x130>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d906      	bls.n	8004e1c <USB_SetTurnaroundTime+0x98>
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	4a29      	ldr	r2, [pc, #164]	@ (8004eb8 <USB_SetTurnaroundTime+0x134>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d802      	bhi.n	8004e1c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004e16:	230a      	movs	r3, #10
 8004e18:	617b      	str	r3, [r7, #20]
 8004e1a:	e02b      	b.n	8004e74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	4a26      	ldr	r2, [pc, #152]	@ (8004eb8 <USB_SetTurnaroundTime+0x134>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d906      	bls.n	8004e32 <USB_SetTurnaroundTime+0xae>
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	4a25      	ldr	r2, [pc, #148]	@ (8004ebc <USB_SetTurnaroundTime+0x138>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d202      	bcs.n	8004e32 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004e2c:	2309      	movs	r3, #9
 8004e2e:	617b      	str	r3, [r7, #20]
 8004e30:	e020      	b.n	8004e74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	4a21      	ldr	r2, [pc, #132]	@ (8004ebc <USB_SetTurnaroundTime+0x138>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d306      	bcc.n	8004e48 <USB_SetTurnaroundTime+0xc4>
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	4a20      	ldr	r2, [pc, #128]	@ (8004ec0 <USB_SetTurnaroundTime+0x13c>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d802      	bhi.n	8004e48 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004e42:	2308      	movs	r3, #8
 8004e44:	617b      	str	r3, [r7, #20]
 8004e46:	e015      	b.n	8004e74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	4a1d      	ldr	r2, [pc, #116]	@ (8004ec0 <USB_SetTurnaroundTime+0x13c>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d906      	bls.n	8004e5e <USB_SetTurnaroundTime+0xda>
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	4a1c      	ldr	r2, [pc, #112]	@ (8004ec4 <USB_SetTurnaroundTime+0x140>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d202      	bcs.n	8004e5e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004e58:	2307      	movs	r3, #7
 8004e5a:	617b      	str	r3, [r7, #20]
 8004e5c:	e00a      	b.n	8004e74 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004e5e:	2306      	movs	r3, #6
 8004e60:	617b      	str	r3, [r7, #20]
 8004e62:	e007      	b.n	8004e74 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004e64:	79fb      	ldrb	r3, [r7, #7]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d102      	bne.n	8004e70 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004e6a:	2309      	movs	r3, #9
 8004e6c:	617b      	str	r3, [r7, #20]
 8004e6e:	e001      	b.n	8004e74 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004e70:	2309      	movs	r3, #9
 8004e72:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	68da      	ldr	r2, [r3, #12]
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	029b      	lsls	r3, r3, #10
 8004e88:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004e8c:	431a      	orrs	r2, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004e92:	2300      	movs	r3, #0
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	371c      	adds	r7, #28
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr
 8004ea0:	00d8acbf 	.word	0x00d8acbf
 8004ea4:	00e4e1c0 	.word	0x00e4e1c0
 8004ea8:	00f42400 	.word	0x00f42400
 8004eac:	01067380 	.word	0x01067380
 8004eb0:	011a499f 	.word	0x011a499f
 8004eb4:	01312cff 	.word	0x01312cff
 8004eb8:	014ca43f 	.word	0x014ca43f
 8004ebc:	016e3600 	.word	0x016e3600
 8004ec0:	01a6ab1f 	.word	0x01a6ab1f
 8004ec4:	01e84800 	.word	0x01e84800

08004ec8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f043 0201 	orr.w	r2, r3, #1
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	370c      	adds	r7, #12
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr

08004eea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004eea:	b480      	push	{r7}
 8004eec:	b083      	sub	sp, #12
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	f023 0201 	bic.w	r2, r3, #1
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	460b      	mov	r3, r1
 8004f16:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f28:	78fb      	ldrb	r3, [r7, #3]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d115      	bne.n	8004f5a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f3a:	2001      	movs	r0, #1
 8004f3c:	f7fc fe86 	bl	8001c4c <HAL_Delay>
      ms++;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	3301      	adds	r3, #1
 8004f44:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f001 fa45 	bl	80063d6 <USB_GetMode>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d01e      	beq.n	8004f90 <USB_SetCurrentMode+0x84>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2b31      	cmp	r3, #49	@ 0x31
 8004f56:	d9f0      	bls.n	8004f3a <USB_SetCurrentMode+0x2e>
 8004f58:	e01a      	b.n	8004f90 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f5a:	78fb      	ldrb	r3, [r7, #3]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d115      	bne.n	8004f8c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f6c:	2001      	movs	r0, #1
 8004f6e:	f7fc fe6d 	bl	8001c4c <HAL_Delay>
      ms++;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	3301      	adds	r3, #1
 8004f76:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f001 fa2c 	bl	80063d6 <USB_GetMode>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d005      	beq.n	8004f90 <USB_SetCurrentMode+0x84>
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2b31      	cmp	r3, #49	@ 0x31
 8004f88:	d9f0      	bls.n	8004f6c <USB_SetCurrentMode+0x60>
 8004f8a:	e001      	b.n	8004f90 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e005      	b.n	8004f9c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2b32      	cmp	r3, #50	@ 0x32
 8004f94:	d101      	bne.n	8004f9a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e000      	b.n	8004f9c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3710      	adds	r7, #16
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fa4:	b084      	sub	sp, #16
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b086      	sub	sp, #24
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
 8004fae:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004fb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	613b      	str	r3, [r7, #16]
 8004fc2:	e009      	b.n	8004fd8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	3340      	adds	r3, #64	@ 0x40
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	4413      	add	r3, r2
 8004fce:	2200      	movs	r2, #0
 8004fd0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	613b      	str	r3, [r7, #16]
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	2b0e      	cmp	r3, #14
 8004fdc:	d9f2      	bls.n	8004fc4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004fde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d11c      	bne.n	800501e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ff2:	f043 0302 	orr.w	r3, r3, #2
 8004ff6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ffc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005008:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005014:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	639a      	str	r2, [r3, #56]	@ 0x38
 800501c:	e00b      	b.n	8005036 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005022:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800502e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800503c:	461a      	mov	r2, r3
 800503e:	2300      	movs	r3, #0
 8005040:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005048:	4619      	mov	r1, r3
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005050:	461a      	mov	r2, r3
 8005052:	680b      	ldr	r3, [r1, #0]
 8005054:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005058:	2b01      	cmp	r3, #1
 800505a:	d10c      	bne.n	8005076 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800505c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800505e:	2b00      	cmp	r3, #0
 8005060:	d104      	bne.n	800506c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005062:	2100      	movs	r1, #0
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 f965 	bl	8005334 <USB_SetDevSpeed>
 800506a:	e008      	b.n	800507e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800506c:	2101      	movs	r1, #1
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 f960 	bl	8005334 <USB_SetDevSpeed>
 8005074:	e003      	b.n	800507e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005076:	2103      	movs	r1, #3
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 f95b 	bl	8005334 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800507e:	2110      	movs	r1, #16
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 f8f3 	bl	800526c <USB_FlushTxFifo>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d001      	beq.n	8005090 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f000 f91f 	bl	80052d4 <USB_FlushRxFifo>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d001      	beq.n	80050a0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050a6:	461a      	mov	r2, r3
 80050a8:	2300      	movs	r3, #0
 80050aa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050b2:	461a      	mov	r2, r3
 80050b4:	2300      	movs	r3, #0
 80050b6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050be:	461a      	mov	r2, r3
 80050c0:	2300      	movs	r3, #0
 80050c2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050c4:	2300      	movs	r3, #0
 80050c6:	613b      	str	r3, [r7, #16]
 80050c8:	e043      	b.n	8005152 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	015a      	lsls	r2, r3, #5
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	4413      	add	r3, r2
 80050d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80050dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80050e0:	d118      	bne.n	8005114 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d10a      	bne.n	80050fe <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	015a      	lsls	r2, r3, #5
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	4413      	add	r3, r2
 80050f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050f4:	461a      	mov	r2, r3
 80050f6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80050fa:	6013      	str	r3, [r2, #0]
 80050fc:	e013      	b.n	8005126 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	015a      	lsls	r2, r3, #5
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	4413      	add	r3, r2
 8005106:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800510a:	461a      	mov	r2, r3
 800510c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005110:	6013      	str	r3, [r2, #0]
 8005112:	e008      	b.n	8005126 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	015a      	lsls	r2, r3, #5
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	4413      	add	r3, r2
 800511c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005120:	461a      	mov	r2, r3
 8005122:	2300      	movs	r3, #0
 8005124:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	015a      	lsls	r2, r3, #5
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	4413      	add	r3, r2
 800512e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005132:	461a      	mov	r2, r3
 8005134:	2300      	movs	r3, #0
 8005136:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	015a      	lsls	r2, r3, #5
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	4413      	add	r3, r2
 8005140:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005144:	461a      	mov	r2, r3
 8005146:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800514a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	3301      	adds	r3, #1
 8005150:	613b      	str	r3, [r7, #16]
 8005152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	429a      	cmp	r2, r3
 8005158:	d3b7      	bcc.n	80050ca <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800515a:	2300      	movs	r3, #0
 800515c:	613b      	str	r3, [r7, #16]
 800515e:	e043      	b.n	80051e8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	015a      	lsls	r2, r3, #5
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	4413      	add	r3, r2
 8005168:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005172:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005176:	d118      	bne.n	80051aa <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d10a      	bne.n	8005194 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	015a      	lsls	r2, r3, #5
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	4413      	add	r3, r2
 8005186:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800518a:	461a      	mov	r2, r3
 800518c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005190:	6013      	str	r3, [r2, #0]
 8005192:	e013      	b.n	80051bc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	015a      	lsls	r2, r3, #5
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	4413      	add	r3, r2
 800519c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051a0:	461a      	mov	r2, r3
 80051a2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80051a6:	6013      	str	r3, [r2, #0]
 80051a8:	e008      	b.n	80051bc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	015a      	lsls	r2, r3, #5
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	4413      	add	r3, r2
 80051b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051b6:	461a      	mov	r2, r3
 80051b8:	2300      	movs	r3, #0
 80051ba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	015a      	lsls	r2, r3, #5
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	4413      	add	r3, r2
 80051c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051c8:	461a      	mov	r2, r3
 80051ca:	2300      	movs	r3, #0
 80051cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	015a      	lsls	r2, r3, #5
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	4413      	add	r3, r2
 80051d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051da:	461a      	mov	r2, r3
 80051dc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80051e0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	3301      	adds	r3, #1
 80051e6:	613b      	str	r3, [r7, #16]
 80051e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ea:	693a      	ldr	r2, [r7, #16]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d3b7      	bcc.n	8005160 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051fe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005202:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005210:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005214:	2b00      	cmp	r3, #0
 8005216:	d105      	bne.n	8005224 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	f043 0210 	orr.w	r2, r3, #16
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	699a      	ldr	r2, [r3, #24]
 8005228:	4b0f      	ldr	r3, [pc, #60]	@ (8005268 <USB_DevInit+0x2c4>)
 800522a:	4313      	orrs	r3, r2
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005230:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005232:	2b00      	cmp	r3, #0
 8005234:	d005      	beq.n	8005242 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	f043 0208 	orr.w	r2, r3, #8
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005242:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005244:	2b01      	cmp	r3, #1
 8005246:	d107      	bne.n	8005258 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	699b      	ldr	r3, [r3, #24]
 800524c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005250:	f043 0304 	orr.w	r3, r3, #4
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005258:	7dfb      	ldrb	r3, [r7, #23]
}
 800525a:	4618      	mov	r0, r3
 800525c:	3718      	adds	r7, #24
 800525e:	46bd      	mov	sp, r7
 8005260:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005264:	b004      	add	sp, #16
 8005266:	4770      	bx	lr
 8005268:	803c3800 	.word	0x803c3800

0800526c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005276:	2300      	movs	r3, #0
 8005278:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	3301      	adds	r3, #1
 800527e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	4a13      	ldr	r2, [pc, #76]	@ (80052d0 <USB_FlushTxFifo+0x64>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d901      	bls.n	800528c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	e01b      	b.n	80052c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	2b00      	cmp	r3, #0
 8005292:	daf2      	bge.n	800527a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005294:	2300      	movs	r3, #0
 8005296:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	019b      	lsls	r3, r3, #6
 800529c:	f043 0220 	orr.w	r2, r3, #32
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	3301      	adds	r3, #1
 80052a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	4a08      	ldr	r2, [pc, #32]	@ (80052d0 <USB_FlushTxFifo+0x64>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d901      	bls.n	80052b6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e006      	b.n	80052c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	f003 0320 	and.w	r3, r3, #32
 80052be:	2b20      	cmp	r3, #32
 80052c0:	d0f0      	beq.n	80052a4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80052c2:	2300      	movs	r3, #0
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3714      	adds	r7, #20
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr
 80052d0:	00030d40 	.word	0x00030d40

080052d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052dc:	2300      	movs	r3, #0
 80052de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	3301      	adds	r3, #1
 80052e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	4a11      	ldr	r2, [pc, #68]	@ (8005330 <USB_FlushRxFifo+0x5c>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d901      	bls.n	80052f2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e018      	b.n	8005324 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	daf2      	bge.n	80052e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80052fa:	2300      	movs	r3, #0
 80052fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2210      	movs	r2, #16
 8005302:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	3301      	adds	r3, #1
 8005308:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	4a08      	ldr	r2, [pc, #32]	@ (8005330 <USB_FlushRxFifo+0x5c>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d901      	bls.n	8005316 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e006      	b.n	8005324 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	f003 0310 	and.w	r3, r3, #16
 800531e:	2b10      	cmp	r3, #16
 8005320:	d0f0      	beq.n	8005304 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	3714      	adds	r7, #20
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr
 8005330:	00030d40 	.word	0x00030d40

08005334 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	460b      	mov	r3, r1
 800533e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	78fb      	ldrb	r3, [r7, #3]
 800534e:	68f9      	ldr	r1, [r7, #12]
 8005350:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005354:	4313      	orrs	r3, r2
 8005356:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3714      	adds	r7, #20
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr

08005366 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005366:	b480      	push	{r7}
 8005368:	b087      	sub	sp, #28
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f003 0306 	and.w	r3, r3, #6
 800537e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d102      	bne.n	800538c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005386:	2300      	movs	r3, #0
 8005388:	75fb      	strb	r3, [r7, #23]
 800538a:	e00a      	b.n	80053a2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2b02      	cmp	r3, #2
 8005390:	d002      	beq.n	8005398 <USB_GetDevSpeed+0x32>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2b06      	cmp	r3, #6
 8005396:	d102      	bne.n	800539e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005398:	2302      	movs	r3, #2
 800539a:	75fb      	strb	r3, [r7, #23]
 800539c:	e001      	b.n	80053a2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800539e:	230f      	movs	r3, #15
 80053a0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80053a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	371c      	adds	r7, #28
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	785b      	ldrb	r3, [r3, #1]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d13a      	bne.n	8005442 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053d2:	69da      	ldr	r2, [r3, #28]
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	f003 030f 	and.w	r3, r3, #15
 80053dc:	2101      	movs	r1, #1
 80053de:	fa01 f303 	lsl.w	r3, r1, r3
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	68f9      	ldr	r1, [r7, #12]
 80053e6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80053ea:	4313      	orrs	r3, r2
 80053ec:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	015a      	lsls	r2, r3, #5
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	4413      	add	r3, r2
 80053f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005400:	2b00      	cmp	r3, #0
 8005402:	d155      	bne.n	80054b0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	015a      	lsls	r2, r3, #5
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	4413      	add	r3, r2
 800540c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	791b      	ldrb	r3, [r3, #4]
 800541e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005420:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	059b      	lsls	r3, r3, #22
 8005426:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005428:	4313      	orrs	r3, r2
 800542a:	68ba      	ldr	r2, [r7, #8]
 800542c:	0151      	lsls	r1, r2, #5
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	440a      	add	r2, r1
 8005432:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005436:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800543a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800543e:	6013      	str	r3, [r2, #0]
 8005440:	e036      	b.n	80054b0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005448:	69da      	ldr	r2, [r3, #28]
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	f003 030f 	and.w	r3, r3, #15
 8005452:	2101      	movs	r1, #1
 8005454:	fa01 f303 	lsl.w	r3, r1, r3
 8005458:	041b      	lsls	r3, r3, #16
 800545a:	68f9      	ldr	r1, [r7, #12]
 800545c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005460:	4313      	orrs	r3, r2
 8005462:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	015a      	lsls	r2, r3, #5
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	4413      	add	r3, r2
 800546c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d11a      	bne.n	80054b0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	015a      	lsls	r2, r3, #5
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	4413      	add	r3, r2
 8005482:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	791b      	ldrb	r3, [r3, #4]
 8005494:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005496:	430b      	orrs	r3, r1
 8005498:	4313      	orrs	r3, r2
 800549a:	68ba      	ldr	r2, [r7, #8]
 800549c:	0151      	lsls	r1, r2, #5
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	440a      	add	r2, r1
 80054a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054ae:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3714      	adds	r7, #20
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr
	...

080054c0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b085      	sub	sp, #20
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	785b      	ldrb	r3, [r3, #1]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d161      	bne.n	80055a0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	015a      	lsls	r2, r3, #5
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	4413      	add	r3, r2
 80054e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80054ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80054f2:	d11f      	bne.n	8005534 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	015a      	lsls	r2, r3, #5
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	4413      	add	r3, r2
 80054fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68ba      	ldr	r2, [r7, #8]
 8005504:	0151      	lsls	r1, r2, #5
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	440a      	add	r2, r1
 800550a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800550e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005512:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	015a      	lsls	r2, r3, #5
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	4413      	add	r3, r2
 800551c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68ba      	ldr	r2, [r7, #8]
 8005524:	0151      	lsls	r1, r2, #5
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	440a      	add	r2, r1
 800552a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800552e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005532:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800553a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	f003 030f 	and.w	r3, r3, #15
 8005544:	2101      	movs	r1, #1
 8005546:	fa01 f303 	lsl.w	r3, r1, r3
 800554a:	b29b      	uxth	r3, r3
 800554c:	43db      	mvns	r3, r3
 800554e:	68f9      	ldr	r1, [r7, #12]
 8005550:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005554:	4013      	ands	r3, r2
 8005556:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800555e:	69da      	ldr	r2, [r3, #28]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	f003 030f 	and.w	r3, r3, #15
 8005568:	2101      	movs	r1, #1
 800556a:	fa01 f303 	lsl.w	r3, r1, r3
 800556e:	b29b      	uxth	r3, r3
 8005570:	43db      	mvns	r3, r3
 8005572:	68f9      	ldr	r1, [r7, #12]
 8005574:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005578:	4013      	ands	r3, r2
 800557a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	015a      	lsls	r2, r3, #5
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	4413      	add	r3, r2
 8005584:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	0159      	lsls	r1, r3, #5
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	440b      	add	r3, r1
 8005592:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005596:	4619      	mov	r1, r3
 8005598:	4b35      	ldr	r3, [pc, #212]	@ (8005670 <USB_DeactivateEndpoint+0x1b0>)
 800559a:	4013      	ands	r3, r2
 800559c:	600b      	str	r3, [r1, #0]
 800559e:	e060      	b.n	8005662 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	015a      	lsls	r2, r3, #5
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	4413      	add	r3, r2
 80055a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80055b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80055b6:	d11f      	bne.n	80055f8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	015a      	lsls	r2, r3, #5
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4413      	add	r3, r2
 80055c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68ba      	ldr	r2, [r7, #8]
 80055c8:	0151      	lsls	r1, r2, #5
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	440a      	add	r2, r1
 80055ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055d2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80055d6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	015a      	lsls	r2, r3, #5
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	4413      	add	r3, r2
 80055e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68ba      	ldr	r2, [r7, #8]
 80055e8:	0151      	lsls	r1, r2, #5
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	440a      	add	r2, r1
 80055ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055f2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80055f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	f003 030f 	and.w	r3, r3, #15
 8005608:	2101      	movs	r1, #1
 800560a:	fa01 f303 	lsl.w	r3, r1, r3
 800560e:	041b      	lsls	r3, r3, #16
 8005610:	43db      	mvns	r3, r3
 8005612:	68f9      	ldr	r1, [r7, #12]
 8005614:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005618:	4013      	ands	r3, r2
 800561a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005622:	69da      	ldr	r2, [r3, #28]
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	f003 030f 	and.w	r3, r3, #15
 800562c:	2101      	movs	r1, #1
 800562e:	fa01 f303 	lsl.w	r3, r1, r3
 8005632:	041b      	lsls	r3, r3, #16
 8005634:	43db      	mvns	r3, r3
 8005636:	68f9      	ldr	r1, [r7, #12]
 8005638:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800563c:	4013      	ands	r3, r2
 800563e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	015a      	lsls	r2, r3, #5
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	4413      	add	r3, r2
 8005648:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	0159      	lsls	r1, r3, #5
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	440b      	add	r3, r1
 8005656:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800565a:	4619      	mov	r1, r3
 800565c:	4b05      	ldr	r3, [pc, #20]	@ (8005674 <USB_DeactivateEndpoint+0x1b4>)
 800565e:	4013      	ands	r3, r2
 8005660:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3714      	adds	r7, #20
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr
 8005670:	ec337800 	.word	0xec337800
 8005674:	eff37800 	.word	0xeff37800

08005678 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b08a      	sub	sp, #40	@ 0x28
 800567c:	af02      	add	r7, sp, #8
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	4613      	mov	r3, r2
 8005684:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	785b      	ldrb	r3, [r3, #1]
 8005694:	2b01      	cmp	r3, #1
 8005696:	f040 815c 	bne.w	8005952 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	699b      	ldr	r3, [r3, #24]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d132      	bne.n	8005708 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	015a      	lsls	r2, r3, #5
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	4413      	add	r3, r2
 80056aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056ae:	691b      	ldr	r3, [r3, #16]
 80056b0:	69ba      	ldr	r2, [r7, #24]
 80056b2:	0151      	lsls	r1, r2, #5
 80056b4:	69fa      	ldr	r2, [r7, #28]
 80056b6:	440a      	add	r2, r1
 80056b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056bc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80056c0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80056c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	015a      	lsls	r2, r3, #5
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	4413      	add	r3, r2
 80056ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	69ba      	ldr	r2, [r7, #24]
 80056d6:	0151      	lsls	r1, r2, #5
 80056d8:	69fa      	ldr	r2, [r7, #28]
 80056da:	440a      	add	r2, r1
 80056dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056e0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80056e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	015a      	lsls	r2, r3, #5
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	4413      	add	r3, r2
 80056ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	69ba      	ldr	r2, [r7, #24]
 80056f6:	0151      	lsls	r1, r2, #5
 80056f8:	69fa      	ldr	r2, [r7, #28]
 80056fa:	440a      	add	r2, r1
 80056fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005700:	0cdb      	lsrs	r3, r3, #19
 8005702:	04db      	lsls	r3, r3, #19
 8005704:	6113      	str	r3, [r2, #16]
 8005706:	e074      	b.n	80057f2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	015a      	lsls	r2, r3, #5
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	4413      	add	r3, r2
 8005710:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	69ba      	ldr	r2, [r7, #24]
 8005718:	0151      	lsls	r1, r2, #5
 800571a:	69fa      	ldr	r2, [r7, #28]
 800571c:	440a      	add	r2, r1
 800571e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005722:	0cdb      	lsrs	r3, r3, #19
 8005724:	04db      	lsls	r3, r3, #19
 8005726:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	015a      	lsls	r2, r3, #5
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	4413      	add	r3, r2
 8005730:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	69ba      	ldr	r2, [r7, #24]
 8005738:	0151      	lsls	r1, r2, #5
 800573a:	69fa      	ldr	r2, [r7, #28]
 800573c:	440a      	add	r2, r1
 800573e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005742:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005746:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800574a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	015a      	lsls	r2, r3, #5
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	4413      	add	r3, r2
 8005754:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005758:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	6999      	ldr	r1, [r3, #24]
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	440b      	add	r3, r1
 8005764:	1e59      	subs	r1, r3, #1
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	fbb1 f3f3 	udiv	r3, r1, r3
 800576e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005770:	4b9d      	ldr	r3, [pc, #628]	@ (80059e8 <USB_EPStartXfer+0x370>)
 8005772:	400b      	ands	r3, r1
 8005774:	69b9      	ldr	r1, [r7, #24]
 8005776:	0148      	lsls	r0, r1, #5
 8005778:	69f9      	ldr	r1, [r7, #28]
 800577a:	4401      	add	r1, r0
 800577c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005780:	4313      	orrs	r3, r2
 8005782:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	015a      	lsls	r2, r3, #5
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	4413      	add	r3, r2
 800578c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005790:	691a      	ldr	r2, [r3, #16]
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	699b      	ldr	r3, [r3, #24]
 8005796:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800579a:	69b9      	ldr	r1, [r7, #24]
 800579c:	0148      	lsls	r0, r1, #5
 800579e:	69f9      	ldr	r1, [r7, #28]
 80057a0:	4401      	add	r1, r0
 80057a2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80057a6:	4313      	orrs	r3, r2
 80057a8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	791b      	ldrb	r3, [r3, #4]
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d11f      	bne.n	80057f2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	015a      	lsls	r2, r3, #5
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	4413      	add	r3, r2
 80057ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	69ba      	ldr	r2, [r7, #24]
 80057c2:	0151      	lsls	r1, r2, #5
 80057c4:	69fa      	ldr	r2, [r7, #28]
 80057c6:	440a      	add	r2, r1
 80057c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057cc:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80057d0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	015a      	lsls	r2, r3, #5
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	4413      	add	r3, r2
 80057da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	69ba      	ldr	r2, [r7, #24]
 80057e2:	0151      	lsls	r1, r2, #5
 80057e4:	69fa      	ldr	r2, [r7, #28]
 80057e6:	440a      	add	r2, r1
 80057e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057ec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80057f0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80057f2:	79fb      	ldrb	r3, [r7, #7]
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d14b      	bne.n	8005890 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	695b      	ldr	r3, [r3, #20]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d009      	beq.n	8005814 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	015a      	lsls	r2, r3, #5
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	4413      	add	r3, r2
 8005808:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800580c:	461a      	mov	r2, r3
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	695b      	ldr	r3, [r3, #20]
 8005812:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	791b      	ldrb	r3, [r3, #4]
 8005818:	2b01      	cmp	r3, #1
 800581a:	d128      	bne.n	800586e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005828:	2b00      	cmp	r3, #0
 800582a:	d110      	bne.n	800584e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	015a      	lsls	r2, r3, #5
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	4413      	add	r3, r2
 8005834:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	69ba      	ldr	r2, [r7, #24]
 800583c:	0151      	lsls	r1, r2, #5
 800583e:	69fa      	ldr	r2, [r7, #28]
 8005840:	440a      	add	r2, r1
 8005842:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005846:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800584a:	6013      	str	r3, [r2, #0]
 800584c:	e00f      	b.n	800586e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	015a      	lsls	r2, r3, #5
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	4413      	add	r3, r2
 8005856:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	69ba      	ldr	r2, [r7, #24]
 800585e:	0151      	lsls	r1, r2, #5
 8005860:	69fa      	ldr	r2, [r7, #28]
 8005862:	440a      	add	r2, r1
 8005864:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005868:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800586c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	015a      	lsls	r2, r3, #5
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	4413      	add	r3, r2
 8005876:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	69ba      	ldr	r2, [r7, #24]
 800587e:	0151      	lsls	r1, r2, #5
 8005880:	69fa      	ldr	r2, [r7, #28]
 8005882:	440a      	add	r2, r1
 8005884:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005888:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800588c:	6013      	str	r3, [r2, #0]
 800588e:	e133      	b.n	8005af8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	015a      	lsls	r2, r3, #5
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	4413      	add	r3, r2
 8005898:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	69ba      	ldr	r2, [r7, #24]
 80058a0:	0151      	lsls	r1, r2, #5
 80058a2:	69fa      	ldr	r2, [r7, #28]
 80058a4:	440a      	add	r2, r1
 80058a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058aa:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80058ae:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	791b      	ldrb	r3, [r3, #4]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d015      	beq.n	80058e4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f000 811b 	beq.w	8005af8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	f003 030f 	and.w	r3, r3, #15
 80058d2:	2101      	movs	r1, #1
 80058d4:	fa01 f303 	lsl.w	r3, r1, r3
 80058d8:	69f9      	ldr	r1, [r7, #28]
 80058da:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80058de:	4313      	orrs	r3, r2
 80058e0:	634b      	str	r3, [r1, #52]	@ 0x34
 80058e2:	e109      	b.n	8005af8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d110      	bne.n	8005916 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	015a      	lsls	r2, r3, #5
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	4413      	add	r3, r2
 80058fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	69ba      	ldr	r2, [r7, #24]
 8005904:	0151      	lsls	r1, r2, #5
 8005906:	69fa      	ldr	r2, [r7, #28]
 8005908:	440a      	add	r2, r1
 800590a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800590e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005912:	6013      	str	r3, [r2, #0]
 8005914:	e00f      	b.n	8005936 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	015a      	lsls	r2, r3, #5
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	4413      	add	r3, r2
 800591e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	69ba      	ldr	r2, [r7, #24]
 8005926:	0151      	lsls	r1, r2, #5
 8005928:	69fa      	ldr	r2, [r7, #28]
 800592a:	440a      	add	r2, r1
 800592c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005930:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005934:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	6919      	ldr	r1, [r3, #16]
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	781a      	ldrb	r2, [r3, #0]
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	699b      	ldr	r3, [r3, #24]
 8005942:	b298      	uxth	r0, r3
 8005944:	79fb      	ldrb	r3, [r7, #7]
 8005946:	9300      	str	r3, [sp, #0]
 8005948:	4603      	mov	r3, r0
 800594a:	68f8      	ldr	r0, [r7, #12]
 800594c:	f000 fade 	bl	8005f0c <USB_WritePacket>
 8005950:	e0d2      	b.n	8005af8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	015a      	lsls	r2, r3, #5
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	4413      	add	r3, r2
 800595a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	69ba      	ldr	r2, [r7, #24]
 8005962:	0151      	lsls	r1, r2, #5
 8005964:	69fa      	ldr	r2, [r7, #28]
 8005966:	440a      	add	r2, r1
 8005968:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800596c:	0cdb      	lsrs	r3, r3, #19
 800596e:	04db      	lsls	r3, r3, #19
 8005970:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	015a      	lsls	r2, r3, #5
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	4413      	add	r3, r2
 800597a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	69ba      	ldr	r2, [r7, #24]
 8005982:	0151      	lsls	r1, r2, #5
 8005984:	69fa      	ldr	r2, [r7, #28]
 8005986:	440a      	add	r2, r1
 8005988:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800598c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005990:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005994:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d126      	bne.n	80059ec <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	015a      	lsls	r2, r3, #5
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	4413      	add	r3, r2
 80059a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059aa:	691a      	ldr	r2, [r3, #16]
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059b4:	69b9      	ldr	r1, [r7, #24]
 80059b6:	0148      	lsls	r0, r1, #5
 80059b8:	69f9      	ldr	r1, [r7, #28]
 80059ba:	4401      	add	r1, r0
 80059bc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80059c0:	4313      	orrs	r3, r2
 80059c2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	015a      	lsls	r2, r3, #5
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	4413      	add	r3, r2
 80059cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	69ba      	ldr	r2, [r7, #24]
 80059d4:	0151      	lsls	r1, r2, #5
 80059d6:	69fa      	ldr	r2, [r7, #28]
 80059d8:	440a      	add	r2, r1
 80059da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059de:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80059e2:	6113      	str	r3, [r2, #16]
 80059e4:	e03a      	b.n	8005a5c <USB_EPStartXfer+0x3e4>
 80059e6:	bf00      	nop
 80059e8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	699a      	ldr	r2, [r3, #24]
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	4413      	add	r3, r2
 80059f6:	1e5a      	subs	r2, r3, #1
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a00:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	8afa      	ldrh	r2, [r7, #22]
 8005a08:	fb03 f202 	mul.w	r2, r3, r2
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005a10:	69bb      	ldr	r3, [r7, #24]
 8005a12:	015a      	lsls	r2, r3, #5
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	4413      	add	r3, r2
 8005a18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a1c:	691a      	ldr	r2, [r3, #16]
 8005a1e:	8afb      	ldrh	r3, [r7, #22]
 8005a20:	04d9      	lsls	r1, r3, #19
 8005a22:	4b38      	ldr	r3, [pc, #224]	@ (8005b04 <USB_EPStartXfer+0x48c>)
 8005a24:	400b      	ands	r3, r1
 8005a26:	69b9      	ldr	r1, [r7, #24]
 8005a28:	0148      	lsls	r0, r1, #5
 8005a2a:	69f9      	ldr	r1, [r7, #28]
 8005a2c:	4401      	add	r1, r0
 8005a2e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005a32:	4313      	orrs	r3, r2
 8005a34:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	015a      	lsls	r2, r3, #5
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a42:	691a      	ldr	r2, [r3, #16]
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	69db      	ldr	r3, [r3, #28]
 8005a48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a4c:	69b9      	ldr	r1, [r7, #24]
 8005a4e:	0148      	lsls	r0, r1, #5
 8005a50:	69f9      	ldr	r1, [r7, #28]
 8005a52:	4401      	add	r1, r0
 8005a54:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005a5c:	79fb      	ldrb	r3, [r7, #7]
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d10d      	bne.n	8005a7e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d009      	beq.n	8005a7e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	6919      	ldr	r1, [r3, #16]
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	015a      	lsls	r2, r3, #5
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	4413      	add	r3, r2
 8005a76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a7a:	460a      	mov	r2, r1
 8005a7c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	791b      	ldrb	r3, [r3, #4]
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d128      	bne.n	8005ad8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d110      	bne.n	8005ab8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	015a      	lsls	r2, r3, #5
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	69ba      	ldr	r2, [r7, #24]
 8005aa6:	0151      	lsls	r1, r2, #5
 8005aa8:	69fa      	ldr	r2, [r7, #28]
 8005aaa:	440a      	add	r2, r1
 8005aac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ab0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005ab4:	6013      	str	r3, [r2, #0]
 8005ab6:	e00f      	b.n	8005ad8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	015a      	lsls	r2, r3, #5
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	4413      	add	r3, r2
 8005ac0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	69ba      	ldr	r2, [r7, #24]
 8005ac8:	0151      	lsls	r1, r2, #5
 8005aca:	69fa      	ldr	r2, [r7, #28]
 8005acc:	440a      	add	r2, r1
 8005ace:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ad2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ad6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	015a      	lsls	r2, r3, #5
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	4413      	add	r3, r2
 8005ae0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	69ba      	ldr	r2, [r7, #24]
 8005ae8:	0151      	lsls	r1, r2, #5
 8005aea:	69fa      	ldr	r2, [r7, #28]
 8005aec:	440a      	add	r2, r1
 8005aee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005af2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005af6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3720      	adds	r7, #32
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	1ff80000 	.word	0x1ff80000

08005b08 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b087      	sub	sp, #28
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	4613      	mov	r3, r2
 8005b14:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	785b      	ldrb	r3, [r3, #1]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	f040 80ce 	bne.w	8005cc6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	699b      	ldr	r3, [r3, #24]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d132      	bne.n	8005b98 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	015a      	lsls	r2, r3, #5
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	4413      	add	r3, r2
 8005b3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	0151      	lsls	r1, r2, #5
 8005b44:	697a      	ldr	r2, [r7, #20]
 8005b46:	440a      	add	r2, r1
 8005b48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b4c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005b50:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005b54:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	015a      	lsls	r2, r3, #5
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	693a      	ldr	r2, [r7, #16]
 8005b66:	0151      	lsls	r1, r2, #5
 8005b68:	697a      	ldr	r2, [r7, #20]
 8005b6a:	440a      	add	r2, r1
 8005b6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b70:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005b74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	015a      	lsls	r2, r3, #5
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	693a      	ldr	r2, [r7, #16]
 8005b86:	0151      	lsls	r1, r2, #5
 8005b88:	697a      	ldr	r2, [r7, #20]
 8005b8a:	440a      	add	r2, r1
 8005b8c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b90:	0cdb      	lsrs	r3, r3, #19
 8005b92:	04db      	lsls	r3, r3, #19
 8005b94:	6113      	str	r3, [r2, #16]
 8005b96:	e04e      	b.n	8005c36 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	015a      	lsls	r2, r3, #5
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	693a      	ldr	r2, [r7, #16]
 8005ba8:	0151      	lsls	r1, r2, #5
 8005baa:	697a      	ldr	r2, [r7, #20]
 8005bac:	440a      	add	r2, r1
 8005bae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bb2:	0cdb      	lsrs	r3, r3, #19
 8005bb4:	04db      	lsls	r3, r3, #19
 8005bb6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	015a      	lsls	r2, r3, #5
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	693a      	ldr	r2, [r7, #16]
 8005bc8:	0151      	lsls	r1, r2, #5
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	440a      	add	r2, r1
 8005bce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bd2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005bd6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005bda:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	699a      	ldr	r2, [r3, #24]
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d903      	bls.n	8005bf0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	68da      	ldr	r2, [r3, #12]
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	015a      	lsls	r2, r3, #5
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	0151      	lsls	r1, r2, #5
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	440a      	add	r2, r1
 8005c06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c0a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005c0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	015a      	lsls	r2, r3, #5
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	4413      	add	r3, r2
 8005c18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c1c:	691a      	ldr	r2, [r3, #16]
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	699b      	ldr	r3, [r3, #24]
 8005c22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c26:	6939      	ldr	r1, [r7, #16]
 8005c28:	0148      	lsls	r0, r1, #5
 8005c2a:	6979      	ldr	r1, [r7, #20]
 8005c2c:	4401      	add	r1, r0
 8005c2e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005c32:	4313      	orrs	r3, r2
 8005c34:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005c36:	79fb      	ldrb	r3, [r7, #7]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d11e      	bne.n	8005c7a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	695b      	ldr	r3, [r3, #20]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d009      	beq.n	8005c58 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	015a      	lsls	r2, r3, #5
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c50:	461a      	mov	r2, r3
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	695b      	ldr	r3, [r3, #20]
 8005c56:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	015a      	lsls	r2, r3, #5
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	4413      	add	r3, r2
 8005c60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	0151      	lsls	r1, r2, #5
 8005c6a:	697a      	ldr	r2, [r7, #20]
 8005c6c:	440a      	add	r2, r1
 8005c6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c72:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005c76:	6013      	str	r3, [r2, #0]
 8005c78:	e097      	b.n	8005daa <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	015a      	lsls	r2, r3, #5
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	4413      	add	r3, r2
 8005c82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	0151      	lsls	r1, r2, #5
 8005c8c:	697a      	ldr	r2, [r7, #20]
 8005c8e:	440a      	add	r2, r1
 8005c90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c94:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005c98:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	699b      	ldr	r3, [r3, #24]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	f000 8083 	beq.w	8005daa <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005caa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	f003 030f 	and.w	r3, r3, #15
 8005cb4:	2101      	movs	r1, #1
 8005cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8005cba:	6979      	ldr	r1, [r7, #20]
 8005cbc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	634b      	str	r3, [r1, #52]	@ 0x34
 8005cc4:	e071      	b.n	8005daa <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	015a      	lsls	r2, r3, #5
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	4413      	add	r3, r2
 8005cce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	0151      	lsls	r1, r2, #5
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	440a      	add	r2, r1
 8005cdc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ce0:	0cdb      	lsrs	r3, r3, #19
 8005ce2:	04db      	lsls	r3, r3, #19
 8005ce4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	015a      	lsls	r2, r3, #5
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	4413      	add	r3, r2
 8005cee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	693a      	ldr	r2, [r7, #16]
 8005cf6:	0151      	lsls	r1, r2, #5
 8005cf8:	697a      	ldr	r2, [r7, #20]
 8005cfa:	440a      	add	r2, r1
 8005cfc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d00:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005d04:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005d08:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d003      	beq.n	8005d1a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	68da      	ldr	r2, [r3, #12]
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	68da      	ldr	r2, [r3, #12]
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	015a      	lsls	r2, r3, #5
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	4413      	add	r3, r2
 8005d2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	693a      	ldr	r2, [r7, #16]
 8005d32:	0151      	lsls	r1, r2, #5
 8005d34:	697a      	ldr	r2, [r7, #20]
 8005d36:	440a      	add	r2, r1
 8005d38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d3c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005d40:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	015a      	lsls	r2, r3, #5
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	4413      	add	r3, r2
 8005d4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d4e:	691a      	ldr	r2, [r3, #16]
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	69db      	ldr	r3, [r3, #28]
 8005d54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d58:	6939      	ldr	r1, [r7, #16]
 8005d5a:	0148      	lsls	r0, r1, #5
 8005d5c:	6979      	ldr	r1, [r7, #20]
 8005d5e:	4401      	add	r1, r0
 8005d60:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005d64:	4313      	orrs	r3, r2
 8005d66:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005d68:	79fb      	ldrb	r3, [r7, #7]
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d10d      	bne.n	8005d8a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d009      	beq.n	8005d8a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	6919      	ldr	r1, [r3, #16]
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	015a      	lsls	r2, r3, #5
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	4413      	add	r3, r2
 8005d82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d86:	460a      	mov	r2, r1
 8005d88:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	015a      	lsls	r2, r3, #5
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	4413      	add	r3, r2
 8005d92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	693a      	ldr	r2, [r7, #16]
 8005d9a:	0151      	lsls	r1, r2, #5
 8005d9c:	697a      	ldr	r2, [r7, #20]
 8005d9e:	440a      	add	r2, r1
 8005da0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005da4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005da8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	371c      	adds	r7, #28
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b087      	sub	sp, #28
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	785b      	ldrb	r3, [r3, #1]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d14a      	bne.n	8005e6c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	015a      	lsls	r2, r3, #5
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	4413      	add	r3, r2
 8005de0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005dea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005dee:	f040 8086 	bne.w	8005efe <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	015a      	lsls	r2, r3, #5
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	683a      	ldr	r2, [r7, #0]
 8005e04:	7812      	ldrb	r2, [r2, #0]
 8005e06:	0151      	lsls	r1, r2, #5
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	440a      	add	r2, r1
 8005e0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e10:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005e14:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	015a      	lsls	r2, r3, #5
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	4413      	add	r3, r2
 8005e20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	683a      	ldr	r2, [r7, #0]
 8005e28:	7812      	ldrb	r2, [r2, #0]
 8005e2a:	0151      	lsls	r1, r2, #5
 8005e2c:	693a      	ldr	r2, [r7, #16]
 8005e2e:	440a      	add	r2, r1
 8005e30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e34:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005e38:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	3301      	adds	r3, #1
 8005e3e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d902      	bls.n	8005e50 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	75fb      	strb	r3, [r7, #23]
          break;
 8005e4e:	e056      	b.n	8005efe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	015a      	lsls	r2, r3, #5
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	4413      	add	r3, r2
 8005e5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e68:	d0e7      	beq.n	8005e3a <USB_EPStopXfer+0x82>
 8005e6a:	e048      	b.n	8005efe <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	015a      	lsls	r2, r3, #5
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	4413      	add	r3, r2
 8005e76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e84:	d13b      	bne.n	8005efe <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	015a      	lsls	r2, r3, #5
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	4413      	add	r3, r2
 8005e90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	683a      	ldr	r2, [r7, #0]
 8005e98:	7812      	ldrb	r2, [r2, #0]
 8005e9a:	0151      	lsls	r1, r2, #5
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	440a      	add	r2, r1
 8005ea0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ea4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005ea8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	015a      	lsls	r2, r3, #5
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	683a      	ldr	r2, [r7, #0]
 8005ebc:	7812      	ldrb	r2, [r2, #0]
 8005ebe:	0151      	lsls	r1, r2, #5
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	440a      	add	r2, r1
 8005ec4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ec8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005ecc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d902      	bls.n	8005ee4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	75fb      	strb	r3, [r7, #23]
          break;
 8005ee2:	e00c      	b.n	8005efe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	015a      	lsls	r2, r3, #5
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	4413      	add	r3, r2
 8005eee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ef8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005efc:	d0e7      	beq.n	8005ece <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005efe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	371c      	adds	r7, #28
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b089      	sub	sp, #36	@ 0x24
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	4611      	mov	r1, r2
 8005f18:	461a      	mov	r2, r3
 8005f1a:	460b      	mov	r3, r1
 8005f1c:	71fb      	strb	r3, [r7, #7]
 8005f1e:	4613      	mov	r3, r2
 8005f20:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005f2a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d123      	bne.n	8005f7a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005f32:	88bb      	ldrh	r3, [r7, #4]
 8005f34:	3303      	adds	r3, #3
 8005f36:	089b      	lsrs	r3, r3, #2
 8005f38:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	61bb      	str	r3, [r7, #24]
 8005f3e:	e018      	b.n	8005f72 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005f40:	79fb      	ldrb	r3, [r7, #7]
 8005f42:	031a      	lsls	r2, r3, #12
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	4413      	add	r3, r2
 8005f48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	3301      	adds	r3, #1
 8005f58:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	3301      	adds	r3, #1
 8005f64:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	3301      	adds	r3, #1
 8005f6a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	3301      	adds	r3, #1
 8005f70:	61bb      	str	r3, [r7, #24]
 8005f72:	69ba      	ldr	r2, [r7, #24]
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d3e2      	bcc.n	8005f40 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3724      	adds	r7, #36	@ 0x24
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b08b      	sub	sp, #44	@ 0x2c
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	4613      	mov	r3, r2
 8005f94:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005f9e:	88fb      	ldrh	r3, [r7, #6]
 8005fa0:	089b      	lsrs	r3, r3, #2
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005fa6:	88fb      	ldrh	r3, [r7, #6]
 8005fa8:	f003 0303 	and.w	r3, r3, #3
 8005fac:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005fae:	2300      	movs	r3, #0
 8005fb0:	623b      	str	r3, [r7, #32]
 8005fb2:	e014      	b.n	8005fde <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fbe:	601a      	str	r2, [r3, #0]
    pDest++;
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc8:	3301      	adds	r3, #1
 8005fca:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fce:	3301      	adds	r3, #1
 8005fd0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005fd8:	6a3b      	ldr	r3, [r7, #32]
 8005fda:	3301      	adds	r3, #1
 8005fdc:	623b      	str	r3, [r7, #32]
 8005fde:	6a3a      	ldr	r2, [r7, #32]
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d3e6      	bcc.n	8005fb4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005fe6:	8bfb      	ldrh	r3, [r7, #30]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d01e      	beq.n	800602a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005fec:	2300      	movs	r3, #0
 8005fee:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	f107 0310 	add.w	r3, r7, #16
 8005ffc:	6812      	ldr	r2, [r2, #0]
 8005ffe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006000:	693a      	ldr	r2, [r7, #16]
 8006002:	6a3b      	ldr	r3, [r7, #32]
 8006004:	b2db      	uxtb	r3, r3
 8006006:	00db      	lsls	r3, r3, #3
 8006008:	fa22 f303 	lsr.w	r3, r2, r3
 800600c:	b2da      	uxtb	r2, r3
 800600e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006010:	701a      	strb	r2, [r3, #0]
      i++;
 8006012:	6a3b      	ldr	r3, [r7, #32]
 8006014:	3301      	adds	r3, #1
 8006016:	623b      	str	r3, [r7, #32]
      pDest++;
 8006018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800601a:	3301      	adds	r3, #1
 800601c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800601e:	8bfb      	ldrh	r3, [r7, #30]
 8006020:	3b01      	subs	r3, #1
 8006022:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006024:	8bfb      	ldrh	r3, [r7, #30]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d1ea      	bne.n	8006000 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800602a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800602c:	4618      	mov	r0, r3
 800602e:	372c      	adds	r7, #44	@ 0x2c
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006038:	b480      	push	{r7}
 800603a:	b085      	sub	sp, #20
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	785b      	ldrb	r3, [r3, #1]
 8006050:	2b01      	cmp	r3, #1
 8006052:	d12c      	bne.n	80060ae <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	015a      	lsls	r2, r3, #5
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	4413      	add	r3, r2
 800605c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	db12      	blt.n	800608c <USB_EPSetStall+0x54>
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d00f      	beq.n	800608c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	015a      	lsls	r2, r3, #5
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	4413      	add	r3, r2
 8006074:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68ba      	ldr	r2, [r7, #8]
 800607c:	0151      	lsls	r1, r2, #5
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	440a      	add	r2, r1
 8006082:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006086:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800608a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	015a      	lsls	r2, r3, #5
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	4413      	add	r3, r2
 8006094:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68ba      	ldr	r2, [r7, #8]
 800609c:	0151      	lsls	r1, r2, #5
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	440a      	add	r2, r1
 80060a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060a6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80060aa:	6013      	str	r3, [r2, #0]
 80060ac:	e02b      	b.n	8006106 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	015a      	lsls	r2, r3, #5
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	4413      	add	r3, r2
 80060b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	db12      	blt.n	80060e6 <USB_EPSetStall+0xae>
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d00f      	beq.n	80060e6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	015a      	lsls	r2, r3, #5
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	4413      	add	r3, r2
 80060ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	68ba      	ldr	r2, [r7, #8]
 80060d6:	0151      	lsls	r1, r2, #5
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	440a      	add	r2, r1
 80060dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060e0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80060e4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	015a      	lsls	r2, r3, #5
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	4413      	add	r3, r2
 80060ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68ba      	ldr	r2, [r7, #8]
 80060f6:	0151      	lsls	r1, r2, #5
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	440a      	add	r2, r1
 80060fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006100:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006104:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006106:	2300      	movs	r3, #0
}
 8006108:	4618      	mov	r0, r3
 800610a:	3714      	adds	r7, #20
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	785b      	ldrb	r3, [r3, #1]
 800612c:	2b01      	cmp	r3, #1
 800612e:	d128      	bne.n	8006182 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	015a      	lsls	r2, r3, #5
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	4413      	add	r3, r2
 8006138:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68ba      	ldr	r2, [r7, #8]
 8006140:	0151      	lsls	r1, r2, #5
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	440a      	add	r2, r1
 8006146:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800614a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800614e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	791b      	ldrb	r3, [r3, #4]
 8006154:	2b03      	cmp	r3, #3
 8006156:	d003      	beq.n	8006160 <USB_EPClearStall+0x4c>
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	791b      	ldrb	r3, [r3, #4]
 800615c:	2b02      	cmp	r3, #2
 800615e:	d138      	bne.n	80061d2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	015a      	lsls	r2, r3, #5
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	4413      	add	r3, r2
 8006168:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68ba      	ldr	r2, [r7, #8]
 8006170:	0151      	lsls	r1, r2, #5
 8006172:	68fa      	ldr	r2, [r7, #12]
 8006174:	440a      	add	r2, r1
 8006176:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800617a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800617e:	6013      	str	r3, [r2, #0]
 8006180:	e027      	b.n	80061d2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	015a      	lsls	r2, r3, #5
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	4413      	add	r3, r2
 800618a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68ba      	ldr	r2, [r7, #8]
 8006192:	0151      	lsls	r1, r2, #5
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	440a      	add	r2, r1
 8006198:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800619c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80061a0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	791b      	ldrb	r3, [r3, #4]
 80061a6:	2b03      	cmp	r3, #3
 80061a8:	d003      	beq.n	80061b2 <USB_EPClearStall+0x9e>
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	791b      	ldrb	r3, [r3, #4]
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d10f      	bne.n	80061d2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	015a      	lsls	r2, r3, #5
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	4413      	add	r3, r2
 80061ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	68ba      	ldr	r2, [r7, #8]
 80061c2:	0151      	lsls	r1, r2, #5
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	440a      	add	r2, r1
 80061c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061d0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80061d2:	2300      	movs	r3, #0
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3714      	adds	r7, #20
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b085      	sub	sp, #20
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	460b      	mov	r3, r1
 80061ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80061fe:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006202:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	78fb      	ldrb	r3, [r7, #3]
 800620e:	011b      	lsls	r3, r3, #4
 8006210:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006214:	68f9      	ldr	r1, [r7, #12]
 8006216:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800621a:	4313      	orrs	r3, r2
 800621c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800621e:	2300      	movs	r3, #0
}
 8006220:	4618      	mov	r0, r3
 8006222:	3714      	adds	r7, #20
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800622c:	b480      	push	{r7}
 800622e:	b085      	sub	sp, #20
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006246:	f023 0303 	bic.w	r3, r3, #3
 800624a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800625a:	f023 0302 	bic.w	r3, r3, #2
 800625e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3714      	adds	r7, #20
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800626e:	b480      	push	{r7}
 8006270:	b085      	sub	sp, #20
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006288:	f023 0303 	bic.w	r3, r3, #3
 800628c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800629c:	f043 0302 	orr.w	r3, r3, #2
 80062a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3714      	adds	r7, #20
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b085      	sub	sp, #20
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	695b      	ldr	r3, [r3, #20]
 80062bc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	699b      	ldr	r3, [r3, #24]
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	4013      	ands	r3, r2
 80062c6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80062c8:	68fb      	ldr	r3, [r7, #12]
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3714      	adds	r7, #20
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr

080062d6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80062d6:	b480      	push	{r7}
 80062d8:	b085      	sub	sp, #20
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062e8:	699b      	ldr	r3, [r3, #24]
 80062ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062f2:	69db      	ldr	r3, [r3, #28]
 80062f4:	68ba      	ldr	r2, [r7, #8]
 80062f6:	4013      	ands	r3, r2
 80062f8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	0c1b      	lsrs	r3, r3, #16
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3714      	adds	r7, #20
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr

0800630a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800630a:	b480      	push	{r7}
 800630c:	b085      	sub	sp, #20
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800631c:	699b      	ldr	r3, [r3, #24]
 800631e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006326:	69db      	ldr	r3, [r3, #28]
 8006328:	68ba      	ldr	r2, [r7, #8]
 800632a:	4013      	ands	r3, r2
 800632c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	b29b      	uxth	r3, r3
}
 8006332:	4618      	mov	r0, r3
 8006334:	3714      	adds	r7, #20
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr

0800633e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800633e:	b480      	push	{r7}
 8006340:	b085      	sub	sp, #20
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
 8006346:	460b      	mov	r3, r1
 8006348:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800634e:	78fb      	ldrb	r3, [r7, #3]
 8006350:	015a      	lsls	r2, r3, #5
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	4413      	add	r3, r2
 8006356:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006364:	695b      	ldr	r3, [r3, #20]
 8006366:	68ba      	ldr	r2, [r7, #8]
 8006368:	4013      	ands	r3, r2
 800636a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800636c:	68bb      	ldr	r3, [r7, #8]
}
 800636e:	4618      	mov	r0, r3
 8006370:	3714      	adds	r7, #20
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr

0800637a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800637a:	b480      	push	{r7}
 800637c:	b087      	sub	sp, #28
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
 8006382:	460b      	mov	r3, r1
 8006384:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800639a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800639c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800639e:	78fb      	ldrb	r3, [r7, #3]
 80063a0:	f003 030f 	and.w	r3, r3, #15
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	fa22 f303 	lsr.w	r3, r2, r3
 80063aa:	01db      	lsls	r3, r3, #7
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	693a      	ldr	r2, [r7, #16]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80063b4:	78fb      	ldrb	r3, [r7, #3]
 80063b6:	015a      	lsls	r2, r3, #5
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	4413      	add	r3, r2
 80063bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	693a      	ldr	r2, [r7, #16]
 80063c4:	4013      	ands	r3, r2
 80063c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80063c8:	68bb      	ldr	r3, [r7, #8]
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	371c      	adds	r7, #28
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr

080063d6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80063d6:	b480      	push	{r7}
 80063d8:	b083      	sub	sp, #12
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	695b      	ldr	r3, [r3, #20]
 80063e2:	f003 0301 	and.w	r3, r3, #1
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	370c      	adds	r7, #12
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr

080063f2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80063f2:	b480      	push	{r7}
 80063f4:	b085      	sub	sp, #20
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800640c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006410:	f023 0307 	bic.w	r3, r3, #7
 8006414:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	68fa      	ldr	r2, [r7, #12]
 8006420:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006424:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006428:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3714      	adds	r7, #20
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006438:	b480      	push	{r7}
 800643a:	b087      	sub	sp, #28
 800643c:	af00      	add	r7, sp, #0
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	460b      	mov	r3, r1
 8006442:	607a      	str	r2, [r7, #4]
 8006444:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	333c      	adds	r3, #60	@ 0x3c
 800644e:	3304      	adds	r3, #4
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	4a26      	ldr	r2, [pc, #152]	@ (80064f0 <USB_EP0_OutStart+0xb8>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d90a      	bls.n	8006472 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006468:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800646c:	d101      	bne.n	8006472 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800646e:	2300      	movs	r3, #0
 8006470:	e037      	b.n	80064e2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006478:	461a      	mov	r2, r3
 800647a:	2300      	movs	r3, #0
 800647c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	697a      	ldr	r2, [r7, #20]
 8006488:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800648c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006490:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	697a      	ldr	r2, [r7, #20]
 800649c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064a0:	f043 0318 	orr.w	r3, r3, #24
 80064a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	697a      	ldr	r2, [r7, #20]
 80064b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064b4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80064b8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80064ba:	7afb      	ldrb	r3, [r7, #11]
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d10f      	bne.n	80064e0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064c6:	461a      	mov	r2, r3
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	697a      	ldr	r2, [r7, #20]
 80064d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064da:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80064de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	371c      	adds	r7, #28
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	4f54300a 	.word	0x4f54300a

080064f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b085      	sub	sp, #20
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064fc:	2300      	movs	r3, #0
 80064fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	3301      	adds	r3, #1
 8006504:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	4a13      	ldr	r2, [pc, #76]	@ (8006558 <USB_CoreReset+0x64>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d901      	bls.n	8006512 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800650e:	2303      	movs	r3, #3
 8006510:	e01b      	b.n	800654a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	2b00      	cmp	r3, #0
 8006518:	daf2      	bge.n	8006500 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800651a:	2300      	movs	r3, #0
 800651c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	f043 0201 	orr.w	r2, r3, #1
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	3301      	adds	r3, #1
 800652e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	4a09      	ldr	r2, [pc, #36]	@ (8006558 <USB_CoreReset+0x64>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d901      	bls.n	800653c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006538:	2303      	movs	r3, #3
 800653a:	e006      	b.n	800654a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	691b      	ldr	r3, [r3, #16]
 8006540:	f003 0301 	and.w	r3, r3, #1
 8006544:	2b01      	cmp	r3, #1
 8006546:	d0f0      	beq.n	800652a <USB_CoreReset+0x36>

  return HAL_OK;
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	3714      	adds	r7, #20
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr
 8006556:	bf00      	nop
 8006558:	00030d40 	.word	0x00030d40

0800655c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	460b      	mov	r3, r1
 8006566:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006568:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800656c:	f002 fca0 	bl	8008eb0 <USBD_static_malloc>
 8006570:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d109      	bne.n	800658c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	32b0      	adds	r2, #176	@ 0xb0
 8006582:	2100      	movs	r1, #0
 8006584:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006588:	2302      	movs	r3, #2
 800658a:	e0d4      	b.n	8006736 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800658c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006590:	2100      	movs	r1, #0
 8006592:	68f8      	ldr	r0, [r7, #12]
 8006594:	f002 fcf0 	bl	8008f78 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	32b0      	adds	r2, #176	@ 0xb0
 80065a2:	68f9      	ldr	r1, [r7, #12]
 80065a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	32b0      	adds	r2, #176	@ 0xb0
 80065b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	7c1b      	ldrb	r3, [r3, #16]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d138      	bne.n	8006636 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80065c4:	4b5e      	ldr	r3, [pc, #376]	@ (8006740 <USBD_CDC_Init+0x1e4>)
 80065c6:	7819      	ldrb	r1, [r3, #0]
 80065c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80065cc:	2202      	movs	r2, #2
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f002 fb4b 	bl	8008c6a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80065d4:	4b5a      	ldr	r3, [pc, #360]	@ (8006740 <USBD_CDC_Init+0x1e4>)
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	f003 020f 	and.w	r2, r3, #15
 80065dc:	6879      	ldr	r1, [r7, #4]
 80065de:	4613      	mov	r3, r2
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	4413      	add	r3, r2
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	440b      	add	r3, r1
 80065e8:	3324      	adds	r3, #36	@ 0x24
 80065ea:	2201      	movs	r2, #1
 80065ec:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80065ee:	4b55      	ldr	r3, [pc, #340]	@ (8006744 <USBD_CDC_Init+0x1e8>)
 80065f0:	7819      	ldrb	r1, [r3, #0]
 80065f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80065f6:	2202      	movs	r2, #2
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f002 fb36 	bl	8008c6a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80065fe:	4b51      	ldr	r3, [pc, #324]	@ (8006744 <USBD_CDC_Init+0x1e8>)
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	f003 020f 	and.w	r2, r3, #15
 8006606:	6879      	ldr	r1, [r7, #4]
 8006608:	4613      	mov	r3, r2
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	4413      	add	r3, r2
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	440b      	add	r3, r1
 8006612:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006616:	2201      	movs	r2, #1
 8006618:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800661a:	4b4b      	ldr	r3, [pc, #300]	@ (8006748 <USBD_CDC_Init+0x1ec>)
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	f003 020f 	and.w	r2, r3, #15
 8006622:	6879      	ldr	r1, [r7, #4]
 8006624:	4613      	mov	r3, r2
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	4413      	add	r3, r2
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	440b      	add	r3, r1
 800662e:	3326      	adds	r3, #38	@ 0x26
 8006630:	2210      	movs	r2, #16
 8006632:	801a      	strh	r2, [r3, #0]
 8006634:	e035      	b.n	80066a2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006636:	4b42      	ldr	r3, [pc, #264]	@ (8006740 <USBD_CDC_Init+0x1e4>)
 8006638:	7819      	ldrb	r1, [r3, #0]
 800663a:	2340      	movs	r3, #64	@ 0x40
 800663c:	2202      	movs	r2, #2
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f002 fb13 	bl	8008c6a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006644:	4b3e      	ldr	r3, [pc, #248]	@ (8006740 <USBD_CDC_Init+0x1e4>)
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	f003 020f 	and.w	r2, r3, #15
 800664c:	6879      	ldr	r1, [r7, #4]
 800664e:	4613      	mov	r3, r2
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	4413      	add	r3, r2
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	440b      	add	r3, r1
 8006658:	3324      	adds	r3, #36	@ 0x24
 800665a:	2201      	movs	r2, #1
 800665c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800665e:	4b39      	ldr	r3, [pc, #228]	@ (8006744 <USBD_CDC_Init+0x1e8>)
 8006660:	7819      	ldrb	r1, [r3, #0]
 8006662:	2340      	movs	r3, #64	@ 0x40
 8006664:	2202      	movs	r2, #2
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f002 faff 	bl	8008c6a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800666c:	4b35      	ldr	r3, [pc, #212]	@ (8006744 <USBD_CDC_Init+0x1e8>)
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	f003 020f 	and.w	r2, r3, #15
 8006674:	6879      	ldr	r1, [r7, #4]
 8006676:	4613      	mov	r3, r2
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	4413      	add	r3, r2
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	440b      	add	r3, r1
 8006680:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006684:	2201      	movs	r2, #1
 8006686:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006688:	4b2f      	ldr	r3, [pc, #188]	@ (8006748 <USBD_CDC_Init+0x1ec>)
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	f003 020f 	and.w	r2, r3, #15
 8006690:	6879      	ldr	r1, [r7, #4]
 8006692:	4613      	mov	r3, r2
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	4413      	add	r3, r2
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	440b      	add	r3, r1
 800669c:	3326      	adds	r3, #38	@ 0x26
 800669e:	2210      	movs	r2, #16
 80066a0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80066a2:	4b29      	ldr	r3, [pc, #164]	@ (8006748 <USBD_CDC_Init+0x1ec>)
 80066a4:	7819      	ldrb	r1, [r3, #0]
 80066a6:	2308      	movs	r3, #8
 80066a8:	2203      	movs	r2, #3
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f002 fadd 	bl	8008c6a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80066b0:	4b25      	ldr	r3, [pc, #148]	@ (8006748 <USBD_CDC_Init+0x1ec>)
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	f003 020f 	and.w	r2, r3, #15
 80066b8:	6879      	ldr	r1, [r7, #4]
 80066ba:	4613      	mov	r3, r2
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	4413      	add	r3, r2
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	440b      	add	r3, r1
 80066c4:	3324      	adds	r3, #36	@ 0x24
 80066c6:	2201      	movs	r2, #1
 80066c8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	33b0      	adds	r3, #176	@ 0xb0
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	4413      	add	r3, r2
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2200      	movs	r2, #0
 80066f2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d101      	bne.n	8006704 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006700:	2302      	movs	r3, #2
 8006702:	e018      	b.n	8006736 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	7c1b      	ldrb	r3, [r3, #16]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d10a      	bne.n	8006722 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800670c:	4b0d      	ldr	r3, [pc, #52]	@ (8006744 <USBD_CDC_Init+0x1e8>)
 800670e:	7819      	ldrb	r1, [r3, #0]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006716:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f002 fb94 	bl	8008e48 <USBD_LL_PrepareReceive>
 8006720:	e008      	b.n	8006734 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006722:	4b08      	ldr	r3, [pc, #32]	@ (8006744 <USBD_CDC_Init+0x1e8>)
 8006724:	7819      	ldrb	r1, [r3, #0]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800672c:	2340      	movs	r3, #64	@ 0x40
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f002 fb8a 	bl	8008e48 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006734:	2300      	movs	r3, #0
}
 8006736:	4618      	mov	r0, r3
 8006738:	3710      	adds	r7, #16
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	20000093 	.word	0x20000093
 8006744:	20000094 	.word	0x20000094
 8006748:	20000095 	.word	0x20000095

0800674c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	460b      	mov	r3, r1
 8006756:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006758:	4b3a      	ldr	r3, [pc, #232]	@ (8006844 <USBD_CDC_DeInit+0xf8>)
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	4619      	mov	r1, r3
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f002 faa9 	bl	8008cb6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006764:	4b37      	ldr	r3, [pc, #220]	@ (8006844 <USBD_CDC_DeInit+0xf8>)
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	f003 020f 	and.w	r2, r3, #15
 800676c:	6879      	ldr	r1, [r7, #4]
 800676e:	4613      	mov	r3, r2
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	4413      	add	r3, r2
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	440b      	add	r3, r1
 8006778:	3324      	adds	r3, #36	@ 0x24
 800677a:	2200      	movs	r2, #0
 800677c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800677e:	4b32      	ldr	r3, [pc, #200]	@ (8006848 <USBD_CDC_DeInit+0xfc>)
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	4619      	mov	r1, r3
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f002 fa96 	bl	8008cb6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800678a:	4b2f      	ldr	r3, [pc, #188]	@ (8006848 <USBD_CDC_DeInit+0xfc>)
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	f003 020f 	and.w	r2, r3, #15
 8006792:	6879      	ldr	r1, [r7, #4]
 8006794:	4613      	mov	r3, r2
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	4413      	add	r3, r2
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	440b      	add	r3, r1
 800679e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80067a2:	2200      	movs	r2, #0
 80067a4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80067a6:	4b29      	ldr	r3, [pc, #164]	@ (800684c <USBD_CDC_DeInit+0x100>)
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	4619      	mov	r1, r3
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f002 fa82 	bl	8008cb6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80067b2:	4b26      	ldr	r3, [pc, #152]	@ (800684c <USBD_CDC_DeInit+0x100>)
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	f003 020f 	and.w	r2, r3, #15
 80067ba:	6879      	ldr	r1, [r7, #4]
 80067bc:	4613      	mov	r3, r2
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	4413      	add	r3, r2
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	440b      	add	r3, r1
 80067c6:	3324      	adds	r3, #36	@ 0x24
 80067c8:	2200      	movs	r2, #0
 80067ca:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80067cc:	4b1f      	ldr	r3, [pc, #124]	@ (800684c <USBD_CDC_DeInit+0x100>)
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	f003 020f 	and.w	r2, r3, #15
 80067d4:	6879      	ldr	r1, [r7, #4]
 80067d6:	4613      	mov	r3, r2
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	4413      	add	r3, r2
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	440b      	add	r3, r1
 80067e0:	3326      	adds	r3, #38	@ 0x26
 80067e2:	2200      	movs	r2, #0
 80067e4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	32b0      	adds	r2, #176	@ 0xb0
 80067f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d01f      	beq.n	8006838 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	33b0      	adds	r3, #176	@ 0xb0
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	4413      	add	r3, r2
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	32b0      	adds	r2, #176	@ 0xb0
 8006816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800681a:	4618      	mov	r0, r3
 800681c:	f002 fb56 	bl	8008ecc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	32b0      	adds	r2, #176	@ 0xb0
 800682a:	2100      	movs	r1, #0
 800682c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3708      	adds	r7, #8
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop
 8006844:	20000093 	.word	0x20000093
 8006848:	20000094 	.word	0x20000094
 800684c:	20000095 	.word	0x20000095

08006850 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b086      	sub	sp, #24
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	32b0      	adds	r2, #176	@ 0xb0
 8006864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006868:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800686a:	2300      	movs	r3, #0
 800686c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800686e:	2300      	movs	r3, #0
 8006870:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006872:	2300      	movs	r3, #0
 8006874:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d101      	bne.n	8006880 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800687c:	2303      	movs	r3, #3
 800687e:	e0bf      	b.n	8006a00 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006888:	2b00      	cmp	r3, #0
 800688a:	d050      	beq.n	800692e <USBD_CDC_Setup+0xde>
 800688c:	2b20      	cmp	r3, #32
 800688e:	f040 80af 	bne.w	80069f0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	88db      	ldrh	r3, [r3, #6]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d03a      	beq.n	8006910 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	b25b      	sxtb	r3, r3
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	da1b      	bge.n	80068dc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	33b0      	adds	r3, #176	@ 0xb0
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	4413      	add	r3, r2
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	683a      	ldr	r2, [r7, #0]
 80068b8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80068ba:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80068bc:	683a      	ldr	r2, [r7, #0]
 80068be:	88d2      	ldrh	r2, [r2, #6]
 80068c0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	88db      	ldrh	r3, [r3, #6]
 80068c6:	2b07      	cmp	r3, #7
 80068c8:	bf28      	it	cs
 80068ca:	2307      	movcs	r3, #7
 80068cc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	89fa      	ldrh	r2, [r7, #14]
 80068d2:	4619      	mov	r1, r3
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f001 fd87 	bl	80083e8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80068da:	e090      	b.n	80069fe <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	785a      	ldrb	r2, [r3, #1]
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	88db      	ldrh	r3, [r3, #6]
 80068ea:	2b3f      	cmp	r3, #63	@ 0x3f
 80068ec:	d803      	bhi.n	80068f6 <USBD_CDC_Setup+0xa6>
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	88db      	ldrh	r3, [r3, #6]
 80068f2:	b2da      	uxtb	r2, r3
 80068f4:	e000      	b.n	80068f8 <USBD_CDC_Setup+0xa8>
 80068f6:	2240      	movs	r2, #64	@ 0x40
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80068fe:	6939      	ldr	r1, [r7, #16]
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006906:	461a      	mov	r2, r3
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f001 fd99 	bl	8008440 <USBD_CtlPrepareRx>
      break;
 800690e:	e076      	b.n	80069fe <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	33b0      	adds	r3, #176	@ 0xb0
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	4413      	add	r3, r2
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	683a      	ldr	r2, [r7, #0]
 8006924:	7850      	ldrb	r0, [r2, #1]
 8006926:	2200      	movs	r2, #0
 8006928:	6839      	ldr	r1, [r7, #0]
 800692a:	4798      	blx	r3
      break;
 800692c:	e067      	b.n	80069fe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	785b      	ldrb	r3, [r3, #1]
 8006932:	2b0b      	cmp	r3, #11
 8006934:	d851      	bhi.n	80069da <USBD_CDC_Setup+0x18a>
 8006936:	a201      	add	r2, pc, #4	@ (adr r2, 800693c <USBD_CDC_Setup+0xec>)
 8006938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800693c:	0800696d 	.word	0x0800696d
 8006940:	080069e9 	.word	0x080069e9
 8006944:	080069db 	.word	0x080069db
 8006948:	080069db 	.word	0x080069db
 800694c:	080069db 	.word	0x080069db
 8006950:	080069db 	.word	0x080069db
 8006954:	080069db 	.word	0x080069db
 8006958:	080069db 	.word	0x080069db
 800695c:	080069db 	.word	0x080069db
 8006960:	080069db 	.word	0x080069db
 8006964:	08006997 	.word	0x08006997
 8006968:	080069c1 	.word	0x080069c1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006972:	b2db      	uxtb	r3, r3
 8006974:	2b03      	cmp	r3, #3
 8006976:	d107      	bne.n	8006988 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006978:	f107 030a 	add.w	r3, r7, #10
 800697c:	2202      	movs	r2, #2
 800697e:	4619      	mov	r1, r3
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f001 fd31 	bl	80083e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006986:	e032      	b.n	80069ee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006988:	6839      	ldr	r1, [r7, #0]
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f001 fcbb 	bl	8008306 <USBD_CtlError>
            ret = USBD_FAIL;
 8006990:	2303      	movs	r3, #3
 8006992:	75fb      	strb	r3, [r7, #23]
          break;
 8006994:	e02b      	b.n	80069ee <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800699c:	b2db      	uxtb	r3, r3
 800699e:	2b03      	cmp	r3, #3
 80069a0:	d107      	bne.n	80069b2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80069a2:	f107 030d 	add.w	r3, r7, #13
 80069a6:	2201      	movs	r2, #1
 80069a8:	4619      	mov	r1, r3
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f001 fd1c 	bl	80083e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80069b0:	e01d      	b.n	80069ee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80069b2:	6839      	ldr	r1, [r7, #0]
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f001 fca6 	bl	8008306 <USBD_CtlError>
            ret = USBD_FAIL;
 80069ba:	2303      	movs	r3, #3
 80069bc:	75fb      	strb	r3, [r7, #23]
          break;
 80069be:	e016      	b.n	80069ee <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	2b03      	cmp	r3, #3
 80069ca:	d00f      	beq.n	80069ec <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80069cc:	6839      	ldr	r1, [r7, #0]
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f001 fc99 	bl	8008306 <USBD_CtlError>
            ret = USBD_FAIL;
 80069d4:	2303      	movs	r3, #3
 80069d6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80069d8:	e008      	b.n	80069ec <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80069da:	6839      	ldr	r1, [r7, #0]
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f001 fc92 	bl	8008306 <USBD_CtlError>
          ret = USBD_FAIL;
 80069e2:	2303      	movs	r3, #3
 80069e4:	75fb      	strb	r3, [r7, #23]
          break;
 80069e6:	e002      	b.n	80069ee <USBD_CDC_Setup+0x19e>
          break;
 80069e8:	bf00      	nop
 80069ea:	e008      	b.n	80069fe <USBD_CDC_Setup+0x1ae>
          break;
 80069ec:	bf00      	nop
      }
      break;
 80069ee:	e006      	b.n	80069fe <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80069f0:	6839      	ldr	r1, [r7, #0]
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f001 fc87 	bl	8008306 <USBD_CtlError>
      ret = USBD_FAIL;
 80069f8:	2303      	movs	r3, #3
 80069fa:	75fb      	strb	r3, [r7, #23]
      break;
 80069fc:	bf00      	nop
  }

  return (uint8_t)ret;
 80069fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3718      	adds	r7, #24
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	460b      	mov	r3, r1
 8006a12:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006a1a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	32b0      	adds	r2, #176	@ 0xb0
 8006a26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d101      	bne.n	8006a32 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006a2e:	2303      	movs	r3, #3
 8006a30:	e065      	b.n	8006afe <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	32b0      	adds	r2, #176	@ 0xb0
 8006a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a40:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006a42:	78fb      	ldrb	r3, [r7, #3]
 8006a44:	f003 020f 	and.w	r2, r3, #15
 8006a48:	6879      	ldr	r1, [r7, #4]
 8006a4a:	4613      	mov	r3, r2
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	4413      	add	r3, r2
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	440b      	add	r3, r1
 8006a54:	3318      	adds	r3, #24
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d02f      	beq.n	8006abc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006a5c:	78fb      	ldrb	r3, [r7, #3]
 8006a5e:	f003 020f 	and.w	r2, r3, #15
 8006a62:	6879      	ldr	r1, [r7, #4]
 8006a64:	4613      	mov	r3, r2
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	4413      	add	r3, r2
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	440b      	add	r3, r1
 8006a6e:	3318      	adds	r3, #24
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	78fb      	ldrb	r3, [r7, #3]
 8006a74:	f003 010f 	and.w	r1, r3, #15
 8006a78:	68f8      	ldr	r0, [r7, #12]
 8006a7a:	460b      	mov	r3, r1
 8006a7c:	00db      	lsls	r3, r3, #3
 8006a7e:	440b      	add	r3, r1
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	4403      	add	r3, r0
 8006a84:	3348      	adds	r3, #72	@ 0x48
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	fbb2 f1f3 	udiv	r1, r2, r3
 8006a8c:	fb01 f303 	mul.w	r3, r1, r3
 8006a90:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d112      	bne.n	8006abc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006a96:	78fb      	ldrb	r3, [r7, #3]
 8006a98:	f003 020f 	and.w	r2, r3, #15
 8006a9c:	6879      	ldr	r1, [r7, #4]
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	4413      	add	r3, r2
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	440b      	add	r3, r1
 8006aa8:	3318      	adds	r3, #24
 8006aaa:	2200      	movs	r2, #0
 8006aac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006aae:	78f9      	ldrb	r1, [r7, #3]
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f002 f9a6 	bl	8008e06 <USBD_LL_Transmit>
 8006aba:	e01f      	b.n	8006afc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	33b0      	adds	r3, #176	@ 0xb0
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	4413      	add	r3, r2
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d010      	beq.n	8006afc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	33b0      	adds	r3, #176	@ 0xb0
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	4413      	add	r3, r2
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	691b      	ldr	r3, [r3, #16]
 8006aec:	68ba      	ldr	r2, [r7, #8]
 8006aee:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006af2:	68ba      	ldr	r2, [r7, #8]
 8006af4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006af8:	78fa      	ldrb	r2, [r7, #3]
 8006afa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3710      	adds	r7, #16
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}

08006b06 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b084      	sub	sp, #16
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
 8006b0e:	460b      	mov	r3, r1
 8006b10:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	32b0      	adds	r2, #176	@ 0xb0
 8006b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b20:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	32b0      	adds	r2, #176	@ 0xb0
 8006b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d101      	bne.n	8006b38 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006b34:	2303      	movs	r3, #3
 8006b36:	e01a      	b.n	8006b6e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006b38:	78fb      	ldrb	r3, [r7, #3]
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f002 f9a4 	bl	8008e8a <USBD_LL_GetRxDataSize>
 8006b42:	4602      	mov	r2, r0
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	33b0      	adds	r3, #176	@ 0xb0
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	4413      	add	r3, r2
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	68fa      	ldr	r2, [r7, #12]
 8006b5e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006b62:	68fa      	ldr	r2, [r7, #12]
 8006b64:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006b68:	4611      	mov	r1, r2
 8006b6a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006b6c:	2300      	movs	r3, #0
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3710      	adds	r7, #16
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}

08006b76 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006b76:	b580      	push	{r7, lr}
 8006b78:	b084      	sub	sp, #16
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	32b0      	adds	r2, #176	@ 0xb0
 8006b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b8c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d101      	bne.n	8006b98 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006b94:	2303      	movs	r3, #3
 8006b96:	e024      	b.n	8006be2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	33b0      	adds	r3, #176	@ 0xb0
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	4413      	add	r3, r2
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d019      	beq.n	8006be0 <USBD_CDC_EP0_RxReady+0x6a>
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006bb2:	2bff      	cmp	r3, #255	@ 0xff
 8006bb4:	d014      	beq.n	8006be0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	33b0      	adds	r3, #176	@ 0xb0
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	4413      	add	r3, r2
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	68fa      	ldr	r2, [r7, #12]
 8006bca:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8006bce:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006bd0:	68fa      	ldr	r2, [r7, #12]
 8006bd2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006bd6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	22ff      	movs	r2, #255	@ 0xff
 8006bdc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006be0:	2300      	movs	r3, #0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3710      	adds	r7, #16
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
	...

08006bec <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b086      	sub	sp, #24
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006bf4:	2182      	movs	r1, #130	@ 0x82
 8006bf6:	4818      	ldr	r0, [pc, #96]	@ (8006c58 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006bf8:	f000 fd4f 	bl	800769a <USBD_GetEpDesc>
 8006bfc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006bfe:	2101      	movs	r1, #1
 8006c00:	4815      	ldr	r0, [pc, #84]	@ (8006c58 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006c02:	f000 fd4a 	bl	800769a <USBD_GetEpDesc>
 8006c06:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006c08:	2181      	movs	r1, #129	@ 0x81
 8006c0a:	4813      	ldr	r0, [pc, #76]	@ (8006c58 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006c0c:	f000 fd45 	bl	800769a <USBD_GetEpDesc>
 8006c10:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d002      	beq.n	8006c1e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	2210      	movs	r2, #16
 8006c1c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d006      	beq.n	8006c32 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c2c:	711a      	strb	r2, [r3, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d006      	beq.n	8006c46 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c40:	711a      	strb	r2, [r3, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2243      	movs	r2, #67	@ 0x43
 8006c4a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006c4c:	4b02      	ldr	r3, [pc, #8]	@ (8006c58 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3718      	adds	r7, #24
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	20000050 	.word	0x20000050

08006c5c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b086      	sub	sp, #24
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006c64:	2182      	movs	r1, #130	@ 0x82
 8006c66:	4818      	ldr	r0, [pc, #96]	@ (8006cc8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006c68:	f000 fd17 	bl	800769a <USBD_GetEpDesc>
 8006c6c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006c6e:	2101      	movs	r1, #1
 8006c70:	4815      	ldr	r0, [pc, #84]	@ (8006cc8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006c72:	f000 fd12 	bl	800769a <USBD_GetEpDesc>
 8006c76:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006c78:	2181      	movs	r1, #129	@ 0x81
 8006c7a:	4813      	ldr	r0, [pc, #76]	@ (8006cc8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006c7c:	f000 fd0d 	bl	800769a <USBD_GetEpDesc>
 8006c80:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d002      	beq.n	8006c8e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	2210      	movs	r2, #16
 8006c8c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d006      	beq.n	8006ca2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	2200      	movs	r2, #0
 8006c98:	711a      	strb	r2, [r3, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f042 0202 	orr.w	r2, r2, #2
 8006ca0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d006      	beq.n	8006cb6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2200      	movs	r2, #0
 8006cac:	711a      	strb	r2, [r3, #4]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f042 0202 	orr.w	r2, r2, #2
 8006cb4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2243      	movs	r2, #67	@ 0x43
 8006cba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006cbc:	4b02      	ldr	r3, [pc, #8]	@ (8006cc8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3718      	adds	r7, #24
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	20000050 	.word	0x20000050

08006ccc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b086      	sub	sp, #24
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006cd4:	2182      	movs	r1, #130	@ 0x82
 8006cd6:	4818      	ldr	r0, [pc, #96]	@ (8006d38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006cd8:	f000 fcdf 	bl	800769a <USBD_GetEpDesc>
 8006cdc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006cde:	2101      	movs	r1, #1
 8006ce0:	4815      	ldr	r0, [pc, #84]	@ (8006d38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006ce2:	f000 fcda 	bl	800769a <USBD_GetEpDesc>
 8006ce6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006ce8:	2181      	movs	r1, #129	@ 0x81
 8006cea:	4813      	ldr	r0, [pc, #76]	@ (8006d38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006cec:	f000 fcd5 	bl	800769a <USBD_GetEpDesc>
 8006cf0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d002      	beq.n	8006cfe <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	2210      	movs	r2, #16
 8006cfc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d006      	beq.n	8006d12 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d0c:	711a      	strb	r2, [r3, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d006      	beq.n	8006d26 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d20:	711a      	strb	r2, [r3, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2243      	movs	r2, #67	@ 0x43
 8006d2a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006d2c:	4b02      	ldr	r3, [pc, #8]	@ (8006d38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3718      	adds	r7, #24
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	bf00      	nop
 8006d38:	20000050 	.word	0x20000050

08006d3c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	220a      	movs	r2, #10
 8006d48:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006d4a:	4b03      	ldr	r3, [pc, #12]	@ (8006d58 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr
 8006d58:	2000000c 	.word	0x2000000c

08006d5c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d101      	bne.n	8006d70 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006d6c:	2303      	movs	r3, #3
 8006d6e:	e009      	b.n	8006d84 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	33b0      	adds	r3, #176	@ 0xb0
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	4413      	add	r3, r2
 8006d7e:	683a      	ldr	r2, [r7, #0]
 8006d80:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006d82:	2300      	movs	r3, #0
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	370c      	adds	r7, #12
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b087      	sub	sp, #28
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	60b9      	str	r1, [r7, #8]
 8006d9a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	32b0      	adds	r2, #176	@ 0xb0
 8006da6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006daa:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d101      	bne.n	8006db6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006db2:	2303      	movs	r3, #3
 8006db4:	e008      	b.n	8006dc8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	68ba      	ldr	r2, [r7, #8]
 8006dba:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006dc6:	2300      	movs	r3, #0
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	371c      	adds	r7, #28
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b085      	sub	sp, #20
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	32b0      	adds	r2, #176	@ 0xb0
 8006de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d101      	bne.n	8006df8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006df4:	2303      	movs	r3, #3
 8006df6:	e004      	b.n	8006e02 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	683a      	ldr	r2, [r7, #0]
 8006dfc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3714      	adds	r7, #20
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr
	...

08006e10 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	32b0      	adds	r2, #176	@ 0xb0
 8006e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e26:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	32b0      	adds	r2, #176	@ 0xb0
 8006e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d101      	bne.n	8006e42 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006e3e:	2303      	movs	r3, #3
 8006e40:	e025      	b.n	8006e8e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d11f      	bne.n	8006e8c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006e54:	4b10      	ldr	r3, [pc, #64]	@ (8006e98 <USBD_CDC_TransmitPacket+0x88>)
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	f003 020f 	and.w	r2, r3, #15
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	4613      	mov	r3, r2
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	4413      	add	r3, r2
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	4403      	add	r3, r0
 8006e6e:	3318      	adds	r3, #24
 8006e70:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006e72:	4b09      	ldr	r3, [pc, #36]	@ (8006e98 <USBD_CDC_TransmitPacket+0x88>)
 8006e74:	7819      	ldrb	r1, [r3, #0]
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f001 ffbf 	bl	8008e06 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3710      	adds	r7, #16
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	20000093 	.word	0x20000093

08006e9c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	32b0      	adds	r2, #176	@ 0xb0
 8006eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eb2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	32b0      	adds	r2, #176	@ 0xb0
 8006ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d101      	bne.n	8006eca <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006ec6:	2303      	movs	r3, #3
 8006ec8:	e018      	b.n	8006efc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	7c1b      	ldrb	r3, [r3, #16]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d10a      	bne.n	8006ee8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8006f04 <USBD_CDC_ReceivePacket+0x68>)
 8006ed4:	7819      	ldrb	r1, [r3, #0]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006edc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f001 ffb1 	bl	8008e48 <USBD_LL_PrepareReceive>
 8006ee6:	e008      	b.n	8006efa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006ee8:	4b06      	ldr	r3, [pc, #24]	@ (8006f04 <USBD_CDC_ReceivePacket+0x68>)
 8006eea:	7819      	ldrb	r1, [r3, #0]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006ef2:	2340      	movs	r3, #64	@ 0x40
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f001 ffa7 	bl	8008e48 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3710      	adds	r7, #16
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}
 8006f04:	20000094 	.word	0x20000094

08006f08 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b086      	sub	sp, #24
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	4613      	mov	r3, r2
 8006f14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d101      	bne.n	8006f20 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006f1c:	2303      	movs	r3, #3
 8006f1e:	e01f      	b.n	8006f60 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2200      	movs	r2, #0
 8006f24:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d003      	beq.n	8006f46 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	68ba      	ldr	r2, [r7, #8]
 8006f42:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	79fa      	ldrb	r2, [r7, #7]
 8006f52:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006f54:	68f8      	ldr	r0, [r7, #12]
 8006f56:	f001 fe21 	bl	8008b9c <USBD_LL_Init>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006f5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3718      	adds	r7, #24
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006f72:	2300      	movs	r3, #0
 8006f74:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d101      	bne.n	8006f80 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006f7c:	2303      	movs	r3, #3
 8006f7e:	e025      	b.n	8006fcc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	683a      	ldr	r2, [r7, #0]
 8006f84:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	32ae      	adds	r2, #174	@ 0xae
 8006f92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d00f      	beq.n	8006fbc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	32ae      	adds	r2, #174	@ 0xae
 8006fa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fac:	f107 020e 	add.w	r2, r7, #14
 8006fb0:	4610      	mov	r0, r2
 8006fb2:	4798      	blx	r3
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006fc2:	1c5a      	adds	r2, r3, #1
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006fca:	2300      	movs	r3, #0
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3710      	adds	r7, #16
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b082      	sub	sp, #8
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f001 fe29 	bl	8008c34 <USBD_LL_Start>
 8006fe2:	4603      	mov	r3, r0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3708      	adds	r7, #8
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006ff4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	370c      	adds	r7, #12
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr

08007002 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007002:	b580      	push	{r7, lr}
 8007004:	b084      	sub	sp, #16
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
 800700a:	460b      	mov	r3, r1
 800700c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800700e:	2300      	movs	r3, #0
 8007010:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007018:	2b00      	cmp	r3, #0
 800701a:	d009      	beq.n	8007030 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	78fa      	ldrb	r2, [r7, #3]
 8007026:	4611      	mov	r1, r2
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	4798      	blx	r3
 800702c:	4603      	mov	r3, r0
 800702e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007030:	7bfb      	ldrb	r3, [r7, #15]
}
 8007032:	4618      	mov	r0, r3
 8007034:	3710      	adds	r7, #16
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}

0800703a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800703a:	b580      	push	{r7, lr}
 800703c:	b084      	sub	sp, #16
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
 8007042:	460b      	mov	r3, r1
 8007044:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007046:	2300      	movs	r3, #0
 8007048:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	78fa      	ldrb	r2, [r7, #3]
 8007054:	4611      	mov	r1, r2
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	4798      	blx	r3
 800705a:	4603      	mov	r3, r0
 800705c:	2b00      	cmp	r3, #0
 800705e:	d001      	beq.n	8007064 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007060:	2303      	movs	r3, #3
 8007062:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007064:	7bfb      	ldrb	r3, [r7, #15]
}
 8007066:	4618      	mov	r0, r3
 8007068:	3710      	adds	r7, #16
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}

0800706e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800706e:	b580      	push	{r7, lr}
 8007070:	b084      	sub	sp, #16
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
 8007076:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800707e:	6839      	ldr	r1, [r7, #0]
 8007080:	4618      	mov	r0, r3
 8007082:	f001 f906 	bl	8008292 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2201      	movs	r2, #1
 800708a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007094:	461a      	mov	r2, r3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80070a2:	f003 031f 	and.w	r3, r3, #31
 80070a6:	2b02      	cmp	r3, #2
 80070a8:	d01a      	beq.n	80070e0 <USBD_LL_SetupStage+0x72>
 80070aa:	2b02      	cmp	r3, #2
 80070ac:	d822      	bhi.n	80070f4 <USBD_LL_SetupStage+0x86>
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d002      	beq.n	80070b8 <USBD_LL_SetupStage+0x4a>
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d00a      	beq.n	80070cc <USBD_LL_SetupStage+0x5e>
 80070b6:	e01d      	b.n	80070f4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80070be:	4619      	mov	r1, r3
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 fb5d 	bl	8007780 <USBD_StdDevReq>
 80070c6:	4603      	mov	r3, r0
 80070c8:	73fb      	strb	r3, [r7, #15]
      break;
 80070ca:	e020      	b.n	800710e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80070d2:	4619      	mov	r1, r3
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 fbc5 	bl	8007864 <USBD_StdItfReq>
 80070da:	4603      	mov	r3, r0
 80070dc:	73fb      	strb	r3, [r7, #15]
      break;
 80070de:	e016      	b.n	800710e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80070e6:	4619      	mov	r1, r3
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 fc27 	bl	800793c <USBD_StdEPReq>
 80070ee:	4603      	mov	r3, r0
 80070f0:	73fb      	strb	r3, [r7, #15]
      break;
 80070f2:	e00c      	b.n	800710e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80070fa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	4619      	mov	r1, r3
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f001 fdf6 	bl	8008cf4 <USBD_LL_StallEP>
 8007108:	4603      	mov	r3, r0
 800710a:	73fb      	strb	r3, [r7, #15]
      break;
 800710c:	bf00      	nop
  }

  return ret;
 800710e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007110:	4618      	mov	r0, r3
 8007112:	3710      	adds	r7, #16
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b086      	sub	sp, #24
 800711c:	af00      	add	r7, sp, #0
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	460b      	mov	r3, r1
 8007122:	607a      	str	r2, [r7, #4]
 8007124:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007126:	2300      	movs	r3, #0
 8007128:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800712a:	7afb      	ldrb	r3, [r7, #11]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d16e      	bne.n	800720e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007136:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800713e:	2b03      	cmp	r3, #3
 8007140:	f040 8098 	bne.w	8007274 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	689a      	ldr	r2, [r3, #8]
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	429a      	cmp	r2, r3
 800714e:	d913      	bls.n	8007178 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	689a      	ldr	r2, [r3, #8]
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	1ad2      	subs	r2, r2, r3
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	68da      	ldr	r2, [r3, #12]
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	4293      	cmp	r3, r2
 8007168:	bf28      	it	cs
 800716a:	4613      	movcs	r3, r2
 800716c:	461a      	mov	r2, r3
 800716e:	6879      	ldr	r1, [r7, #4]
 8007170:	68f8      	ldr	r0, [r7, #12]
 8007172:	f001 f982 	bl	800847a <USBD_CtlContinueRx>
 8007176:	e07d      	b.n	8007274 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800717e:	f003 031f 	and.w	r3, r3, #31
 8007182:	2b02      	cmp	r3, #2
 8007184:	d014      	beq.n	80071b0 <USBD_LL_DataOutStage+0x98>
 8007186:	2b02      	cmp	r3, #2
 8007188:	d81d      	bhi.n	80071c6 <USBD_LL_DataOutStage+0xae>
 800718a:	2b00      	cmp	r3, #0
 800718c:	d002      	beq.n	8007194 <USBD_LL_DataOutStage+0x7c>
 800718e:	2b01      	cmp	r3, #1
 8007190:	d003      	beq.n	800719a <USBD_LL_DataOutStage+0x82>
 8007192:	e018      	b.n	80071c6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007194:	2300      	movs	r3, #0
 8007196:	75bb      	strb	r3, [r7, #22]
            break;
 8007198:	e018      	b.n	80071cc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	4619      	mov	r1, r3
 80071a4:	68f8      	ldr	r0, [r7, #12]
 80071a6:	f000 fa5e 	bl	8007666 <USBD_CoreFindIF>
 80071aa:	4603      	mov	r3, r0
 80071ac:	75bb      	strb	r3, [r7, #22]
            break;
 80071ae:	e00d      	b.n	80071cc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	4619      	mov	r1, r3
 80071ba:	68f8      	ldr	r0, [r7, #12]
 80071bc:	f000 fa60 	bl	8007680 <USBD_CoreFindEP>
 80071c0:	4603      	mov	r3, r0
 80071c2:	75bb      	strb	r3, [r7, #22]
            break;
 80071c4:	e002      	b.n	80071cc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80071c6:	2300      	movs	r3, #0
 80071c8:	75bb      	strb	r3, [r7, #22]
            break;
 80071ca:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80071cc:	7dbb      	ldrb	r3, [r7, #22]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d119      	bne.n	8007206 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	2b03      	cmp	r3, #3
 80071dc:	d113      	bne.n	8007206 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80071de:	7dba      	ldrb	r2, [r7, #22]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	32ae      	adds	r2, #174	@ 0xae
 80071e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d00b      	beq.n	8007206 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80071ee:	7dba      	ldrb	r2, [r7, #22]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80071f6:	7dba      	ldrb	r2, [r7, #22]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	32ae      	adds	r2, #174	@ 0xae
 80071fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	68f8      	ldr	r0, [r7, #12]
 8007204:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007206:	68f8      	ldr	r0, [r7, #12]
 8007208:	f001 f948 	bl	800849c <USBD_CtlSendStatus>
 800720c:	e032      	b.n	8007274 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800720e:	7afb      	ldrb	r3, [r7, #11]
 8007210:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007214:	b2db      	uxtb	r3, r3
 8007216:	4619      	mov	r1, r3
 8007218:	68f8      	ldr	r0, [r7, #12]
 800721a:	f000 fa31 	bl	8007680 <USBD_CoreFindEP>
 800721e:	4603      	mov	r3, r0
 8007220:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007222:	7dbb      	ldrb	r3, [r7, #22]
 8007224:	2bff      	cmp	r3, #255	@ 0xff
 8007226:	d025      	beq.n	8007274 <USBD_LL_DataOutStage+0x15c>
 8007228:	7dbb      	ldrb	r3, [r7, #22]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d122      	bne.n	8007274 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007234:	b2db      	uxtb	r3, r3
 8007236:	2b03      	cmp	r3, #3
 8007238:	d117      	bne.n	800726a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800723a:	7dba      	ldrb	r2, [r7, #22]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	32ae      	adds	r2, #174	@ 0xae
 8007240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007244:	699b      	ldr	r3, [r3, #24]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d00f      	beq.n	800726a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800724a:	7dba      	ldrb	r2, [r7, #22]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007252:	7dba      	ldrb	r2, [r7, #22]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	32ae      	adds	r2, #174	@ 0xae
 8007258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800725c:	699b      	ldr	r3, [r3, #24]
 800725e:	7afa      	ldrb	r2, [r7, #11]
 8007260:	4611      	mov	r1, r2
 8007262:	68f8      	ldr	r0, [r7, #12]
 8007264:	4798      	blx	r3
 8007266:	4603      	mov	r3, r0
 8007268:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800726a:	7dfb      	ldrb	r3, [r7, #23]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d001      	beq.n	8007274 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007270:	7dfb      	ldrb	r3, [r7, #23]
 8007272:	e000      	b.n	8007276 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007274:	2300      	movs	r3, #0
}
 8007276:	4618      	mov	r0, r3
 8007278:	3718      	adds	r7, #24
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}

0800727e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800727e:	b580      	push	{r7, lr}
 8007280:	b086      	sub	sp, #24
 8007282:	af00      	add	r7, sp, #0
 8007284:	60f8      	str	r0, [r7, #12]
 8007286:	460b      	mov	r3, r1
 8007288:	607a      	str	r2, [r7, #4]
 800728a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800728c:	7afb      	ldrb	r3, [r7, #11]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d16f      	bne.n	8007372 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	3314      	adds	r3, #20
 8007296:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800729e:	2b02      	cmp	r3, #2
 80072a0:	d15a      	bne.n	8007358 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	689a      	ldr	r2, [r3, #8]
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d914      	bls.n	80072d8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	689a      	ldr	r2, [r3, #8]
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	68db      	ldr	r3, [r3, #12]
 80072b6:	1ad2      	subs	r2, r2, r3
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	461a      	mov	r2, r3
 80072c2:	6879      	ldr	r1, [r7, #4]
 80072c4:	68f8      	ldr	r0, [r7, #12]
 80072c6:	f001 f8aa 	bl	800841e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072ca:	2300      	movs	r3, #0
 80072cc:	2200      	movs	r2, #0
 80072ce:	2100      	movs	r1, #0
 80072d0:	68f8      	ldr	r0, [r7, #12]
 80072d2:	f001 fdb9 	bl	8008e48 <USBD_LL_PrepareReceive>
 80072d6:	e03f      	b.n	8007358 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	68da      	ldr	r2, [r3, #12]
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d11c      	bne.n	800731e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	685a      	ldr	r2, [r3, #4]
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d316      	bcc.n	800731e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	685a      	ldr	r2, [r3, #4]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d20f      	bcs.n	800731e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80072fe:	2200      	movs	r2, #0
 8007300:	2100      	movs	r1, #0
 8007302:	68f8      	ldr	r0, [r7, #12]
 8007304:	f001 f88b 	bl	800841e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2200      	movs	r2, #0
 800730c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007310:	2300      	movs	r3, #0
 8007312:	2200      	movs	r2, #0
 8007314:	2100      	movs	r1, #0
 8007316:	68f8      	ldr	r0, [r7, #12]
 8007318:	f001 fd96 	bl	8008e48 <USBD_LL_PrepareReceive>
 800731c:	e01c      	b.n	8007358 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007324:	b2db      	uxtb	r3, r3
 8007326:	2b03      	cmp	r3, #3
 8007328:	d10f      	bne.n	800734a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007330:	68db      	ldr	r3, [r3, #12]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d009      	beq.n	800734a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2200      	movs	r2, #0
 800733a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	68f8      	ldr	r0, [r7, #12]
 8007348:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800734a:	2180      	movs	r1, #128	@ 0x80
 800734c:	68f8      	ldr	r0, [r7, #12]
 800734e:	f001 fcd1 	bl	8008cf4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007352:	68f8      	ldr	r0, [r7, #12]
 8007354:	f001 f8b5 	bl	80084c2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800735e:	2b00      	cmp	r3, #0
 8007360:	d03a      	beq.n	80073d8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007362:	68f8      	ldr	r0, [r7, #12]
 8007364:	f7ff fe42 	bl	8006fec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2200      	movs	r2, #0
 800736c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007370:	e032      	b.n	80073d8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007372:	7afb      	ldrb	r3, [r7, #11]
 8007374:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007378:	b2db      	uxtb	r3, r3
 800737a:	4619      	mov	r1, r3
 800737c:	68f8      	ldr	r0, [r7, #12]
 800737e:	f000 f97f 	bl	8007680 <USBD_CoreFindEP>
 8007382:	4603      	mov	r3, r0
 8007384:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007386:	7dfb      	ldrb	r3, [r7, #23]
 8007388:	2bff      	cmp	r3, #255	@ 0xff
 800738a:	d025      	beq.n	80073d8 <USBD_LL_DataInStage+0x15a>
 800738c:	7dfb      	ldrb	r3, [r7, #23]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d122      	bne.n	80073d8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007398:	b2db      	uxtb	r3, r3
 800739a:	2b03      	cmp	r3, #3
 800739c:	d11c      	bne.n	80073d8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800739e:	7dfa      	ldrb	r2, [r7, #23]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	32ae      	adds	r2, #174	@ 0xae
 80073a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073a8:	695b      	ldr	r3, [r3, #20]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d014      	beq.n	80073d8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80073ae:	7dfa      	ldrb	r2, [r7, #23]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80073b6:	7dfa      	ldrb	r2, [r7, #23]
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	32ae      	adds	r2, #174	@ 0xae
 80073bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073c0:	695b      	ldr	r3, [r3, #20]
 80073c2:	7afa      	ldrb	r2, [r7, #11]
 80073c4:	4611      	mov	r1, r2
 80073c6:	68f8      	ldr	r0, [r7, #12]
 80073c8:	4798      	blx	r3
 80073ca:	4603      	mov	r3, r0
 80073cc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80073ce:	7dbb      	ldrb	r3, [r7, #22]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d001      	beq.n	80073d8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80073d4:	7dbb      	ldrb	r3, [r7, #22]
 80073d6:	e000      	b.n	80073da <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80073d8:	2300      	movs	r3, #0
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3718      	adds	r7, #24
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}

080073e2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80073e2:	b580      	push	{r7, lr}
 80073e4:	b084      	sub	sp, #16
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80073ea:	2300      	movs	r3, #0
 80073ec:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2201      	movs	r2, #1
 80073f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800741a:	2b00      	cmp	r3, #0
 800741c:	d014      	beq.n	8007448 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d00e      	beq.n	8007448 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	6852      	ldr	r2, [r2, #4]
 8007436:	b2d2      	uxtb	r2, r2
 8007438:	4611      	mov	r1, r2
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	4798      	blx	r3
 800743e:	4603      	mov	r3, r0
 8007440:	2b00      	cmp	r3, #0
 8007442:	d001      	beq.n	8007448 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007444:	2303      	movs	r3, #3
 8007446:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007448:	2340      	movs	r3, #64	@ 0x40
 800744a:	2200      	movs	r2, #0
 800744c:	2100      	movs	r1, #0
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f001 fc0b 	bl	8008c6a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2201      	movs	r2, #1
 8007458:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2240      	movs	r2, #64	@ 0x40
 8007460:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007464:	2340      	movs	r3, #64	@ 0x40
 8007466:	2200      	movs	r2, #0
 8007468:	2180      	movs	r1, #128	@ 0x80
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f001 fbfd 	bl	8008c6a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2240      	movs	r2, #64	@ 0x40
 800747a:	621a      	str	r2, [r3, #32]

  return ret;
 800747c:	7bfb      	ldrb	r3, [r7, #15]
}
 800747e:	4618      	mov	r0, r3
 8007480:	3710      	adds	r7, #16
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}

08007486 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007486:	b480      	push	{r7}
 8007488:	b083      	sub	sp, #12
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
 800748e:	460b      	mov	r3, r1
 8007490:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	78fa      	ldrb	r2, [r7, #3]
 8007496:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007498:	2300      	movs	r3, #0
}
 800749a:	4618      	mov	r0, r3
 800749c:	370c      	adds	r7, #12
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr

080074a6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80074a6:	b480      	push	{r7}
 80074a8:	b083      	sub	sp, #12
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074b4:	b2da      	uxtb	r2, r3
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2204      	movs	r2, #4
 80074c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	370c      	adds	r7, #12
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr

080074d2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80074d2:	b480      	push	{r7}
 80074d4:	b083      	sub	sp, #12
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	2b04      	cmp	r3, #4
 80074e4:	d106      	bne.n	80074f4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80074ec:	b2da      	uxtb	r2, r3
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	370c      	adds	r7, #12
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr

08007502 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007502:	b580      	push	{r7, lr}
 8007504:	b082      	sub	sp, #8
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007510:	b2db      	uxtb	r3, r3
 8007512:	2b03      	cmp	r3, #3
 8007514:	d110      	bne.n	8007538 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800751c:	2b00      	cmp	r3, #0
 800751e:	d00b      	beq.n	8007538 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007526:	69db      	ldr	r3, [r3, #28]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d005      	beq.n	8007538 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007532:	69db      	ldr	r3, [r3, #28]
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3708      	adds	r7, #8
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}

08007542 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007542:	b580      	push	{r7, lr}
 8007544:	b082      	sub	sp, #8
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
 800754a:	460b      	mov	r3, r1
 800754c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	32ae      	adds	r2, #174	@ 0xae
 8007558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d101      	bne.n	8007564 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007560:	2303      	movs	r3, #3
 8007562:	e01c      	b.n	800759e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800756a:	b2db      	uxtb	r3, r3
 800756c:	2b03      	cmp	r3, #3
 800756e:	d115      	bne.n	800759c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	32ae      	adds	r2, #174	@ 0xae
 800757a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800757e:	6a1b      	ldr	r3, [r3, #32]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d00b      	beq.n	800759c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	32ae      	adds	r2, #174	@ 0xae
 800758e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007592:	6a1b      	ldr	r3, [r3, #32]
 8007594:	78fa      	ldrb	r2, [r7, #3]
 8007596:	4611      	mov	r1, r2
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800759c:	2300      	movs	r3, #0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3708      	adds	r7, #8
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}

080075a6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b082      	sub	sp, #8
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
 80075ae:	460b      	mov	r3, r1
 80075b0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	32ae      	adds	r2, #174	@ 0xae
 80075bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d101      	bne.n	80075c8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80075c4:	2303      	movs	r3, #3
 80075c6:	e01c      	b.n	8007602 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	2b03      	cmp	r3, #3
 80075d2:	d115      	bne.n	8007600 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	32ae      	adds	r2, #174	@ 0xae
 80075de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d00b      	beq.n	8007600 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	32ae      	adds	r2, #174	@ 0xae
 80075f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075f8:	78fa      	ldrb	r2, [r7, #3]
 80075fa:	4611      	mov	r1, r2
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007600:	2300      	movs	r3, #0
}
 8007602:	4618      	mov	r0, r3
 8007604:	3708      	adds	r7, #8
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}

0800760a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800760a:	b480      	push	{r7}
 800760c:	b083      	sub	sp, #12
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007612:	2300      	movs	r3, #0
}
 8007614:	4618      	mov	r0, r3
 8007616:	370c      	adds	r7, #12
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr

08007620 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007628:	2300      	movs	r3, #0
 800762a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00e      	beq.n	800765c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	6852      	ldr	r2, [r2, #4]
 800764a:	b2d2      	uxtb	r2, r2
 800764c:	4611      	mov	r1, r2
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	4798      	blx	r3
 8007652:	4603      	mov	r3, r0
 8007654:	2b00      	cmp	r3, #0
 8007656:	d001      	beq.n	800765c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007658:	2303      	movs	r3, #3
 800765a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800765c:	7bfb      	ldrb	r3, [r7, #15]
}
 800765e:	4618      	mov	r0, r3
 8007660:	3710      	adds	r7, #16
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007666:	b480      	push	{r7}
 8007668:	b083      	sub	sp, #12
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
 800766e:	460b      	mov	r3, r1
 8007670:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007672:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007674:	4618      	mov	r0, r3
 8007676:	370c      	adds	r7, #12
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	460b      	mov	r3, r1
 800768a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800768c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800768e:	4618      	mov	r0, r3
 8007690:	370c      	adds	r7, #12
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr

0800769a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800769a:	b580      	push	{r7, lr}
 800769c:	b086      	sub	sp, #24
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
 80076a2:	460b      	mov	r3, r1
 80076a4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80076ae:	2300      	movs	r3, #0
 80076b0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	885b      	ldrh	r3, [r3, #2]
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	68fa      	ldr	r2, [r7, #12]
 80076ba:	7812      	ldrb	r2, [r2, #0]
 80076bc:	4293      	cmp	r3, r2
 80076be:	d91f      	bls.n	8007700 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	781b      	ldrb	r3, [r3, #0]
 80076c4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80076c6:	e013      	b.n	80076f0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80076c8:	f107 030a 	add.w	r3, r7, #10
 80076cc:	4619      	mov	r1, r3
 80076ce:	6978      	ldr	r0, [r7, #20]
 80076d0:	f000 f81b 	bl	800770a <USBD_GetNextDesc>
 80076d4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	785b      	ldrb	r3, [r3, #1]
 80076da:	2b05      	cmp	r3, #5
 80076dc:	d108      	bne.n	80076f0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	789b      	ldrb	r3, [r3, #2]
 80076e6:	78fa      	ldrb	r2, [r7, #3]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d008      	beq.n	80076fe <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80076ec:	2300      	movs	r3, #0
 80076ee:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	885b      	ldrh	r3, [r3, #2]
 80076f4:	b29a      	uxth	r2, r3
 80076f6:	897b      	ldrh	r3, [r7, #10]
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d8e5      	bhi.n	80076c8 <USBD_GetEpDesc+0x2e>
 80076fc:	e000      	b.n	8007700 <USBD_GetEpDesc+0x66>
          break;
 80076fe:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007700:	693b      	ldr	r3, [r7, #16]
}
 8007702:	4618      	mov	r0, r3
 8007704:	3718      	adds	r7, #24
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800770a:	b480      	push	{r7}
 800770c:	b085      	sub	sp, #20
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
 8007712:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	881b      	ldrh	r3, [r3, #0]
 800771c:	68fa      	ldr	r2, [r7, #12]
 800771e:	7812      	ldrb	r2, [r2, #0]
 8007720:	4413      	add	r3, r2
 8007722:	b29a      	uxth	r2, r3
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	461a      	mov	r2, r3
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	4413      	add	r3, r2
 8007732:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007734:	68fb      	ldr	r3, [r7, #12]
}
 8007736:	4618      	mov	r0, r3
 8007738:	3714      	adds	r7, #20
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr

08007742 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007742:	b480      	push	{r7}
 8007744:	b087      	sub	sp, #28
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	3301      	adds	r3, #1
 8007758:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007760:	8a3b      	ldrh	r3, [r7, #16]
 8007762:	021b      	lsls	r3, r3, #8
 8007764:	b21a      	sxth	r2, r3
 8007766:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800776a:	4313      	orrs	r3, r2
 800776c:	b21b      	sxth	r3, r3
 800776e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007770:	89fb      	ldrh	r3, [r7, #14]
}
 8007772:	4618      	mov	r0, r3
 8007774:	371c      	adds	r7, #28
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr
	...

08007780 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800778a:	2300      	movs	r3, #0
 800778c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007796:	2b40      	cmp	r3, #64	@ 0x40
 8007798:	d005      	beq.n	80077a6 <USBD_StdDevReq+0x26>
 800779a:	2b40      	cmp	r3, #64	@ 0x40
 800779c:	d857      	bhi.n	800784e <USBD_StdDevReq+0xce>
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d00f      	beq.n	80077c2 <USBD_StdDevReq+0x42>
 80077a2:	2b20      	cmp	r3, #32
 80077a4:	d153      	bne.n	800784e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	32ae      	adds	r2, #174	@ 0xae
 80077b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	6839      	ldr	r1, [r7, #0]
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	4798      	blx	r3
 80077bc:	4603      	mov	r3, r0
 80077be:	73fb      	strb	r3, [r7, #15]
      break;
 80077c0:	e04a      	b.n	8007858 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	785b      	ldrb	r3, [r3, #1]
 80077c6:	2b09      	cmp	r3, #9
 80077c8:	d83b      	bhi.n	8007842 <USBD_StdDevReq+0xc2>
 80077ca:	a201      	add	r2, pc, #4	@ (adr r2, 80077d0 <USBD_StdDevReq+0x50>)
 80077cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d0:	08007825 	.word	0x08007825
 80077d4:	08007839 	.word	0x08007839
 80077d8:	08007843 	.word	0x08007843
 80077dc:	0800782f 	.word	0x0800782f
 80077e0:	08007843 	.word	0x08007843
 80077e4:	08007803 	.word	0x08007803
 80077e8:	080077f9 	.word	0x080077f9
 80077ec:	08007843 	.word	0x08007843
 80077f0:	0800781b 	.word	0x0800781b
 80077f4:	0800780d 	.word	0x0800780d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80077f8:	6839      	ldr	r1, [r7, #0]
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 fa3c 	bl	8007c78 <USBD_GetDescriptor>
          break;
 8007800:	e024      	b.n	800784c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007802:	6839      	ldr	r1, [r7, #0]
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 fba1 	bl	8007f4c <USBD_SetAddress>
          break;
 800780a:	e01f      	b.n	800784c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800780c:	6839      	ldr	r1, [r7, #0]
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 fbe0 	bl	8007fd4 <USBD_SetConfig>
 8007814:	4603      	mov	r3, r0
 8007816:	73fb      	strb	r3, [r7, #15]
          break;
 8007818:	e018      	b.n	800784c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800781a:	6839      	ldr	r1, [r7, #0]
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 fc83 	bl	8008128 <USBD_GetConfig>
          break;
 8007822:	e013      	b.n	800784c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007824:	6839      	ldr	r1, [r7, #0]
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 fcb4 	bl	8008194 <USBD_GetStatus>
          break;
 800782c:	e00e      	b.n	800784c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800782e:	6839      	ldr	r1, [r7, #0]
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 fce3 	bl	80081fc <USBD_SetFeature>
          break;
 8007836:	e009      	b.n	800784c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007838:	6839      	ldr	r1, [r7, #0]
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 fd07 	bl	800824e <USBD_ClrFeature>
          break;
 8007840:	e004      	b.n	800784c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007842:	6839      	ldr	r1, [r7, #0]
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 fd5e 	bl	8008306 <USBD_CtlError>
          break;
 800784a:	bf00      	nop
      }
      break;
 800784c:	e004      	b.n	8007858 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800784e:	6839      	ldr	r1, [r7, #0]
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 fd58 	bl	8008306 <USBD_CtlError>
      break;
 8007856:	bf00      	nop
  }

  return ret;
 8007858:	7bfb      	ldrb	r3, [r7, #15]
}
 800785a:	4618      	mov	r0, r3
 800785c:	3710      	adds	r7, #16
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop

08007864 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800786e:	2300      	movs	r3, #0
 8007870:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800787a:	2b40      	cmp	r3, #64	@ 0x40
 800787c:	d005      	beq.n	800788a <USBD_StdItfReq+0x26>
 800787e:	2b40      	cmp	r3, #64	@ 0x40
 8007880:	d852      	bhi.n	8007928 <USBD_StdItfReq+0xc4>
 8007882:	2b00      	cmp	r3, #0
 8007884:	d001      	beq.n	800788a <USBD_StdItfReq+0x26>
 8007886:	2b20      	cmp	r3, #32
 8007888:	d14e      	bne.n	8007928 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007890:	b2db      	uxtb	r3, r3
 8007892:	3b01      	subs	r3, #1
 8007894:	2b02      	cmp	r3, #2
 8007896:	d840      	bhi.n	800791a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	889b      	ldrh	r3, [r3, #4]
 800789c:	b2db      	uxtb	r3, r3
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d836      	bhi.n	8007910 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	889b      	ldrh	r3, [r3, #4]
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	4619      	mov	r1, r3
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f7ff fedb 	bl	8007666 <USBD_CoreFindIF>
 80078b0:	4603      	mov	r3, r0
 80078b2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80078b4:	7bbb      	ldrb	r3, [r7, #14]
 80078b6:	2bff      	cmp	r3, #255	@ 0xff
 80078b8:	d01d      	beq.n	80078f6 <USBD_StdItfReq+0x92>
 80078ba:	7bbb      	ldrb	r3, [r7, #14]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d11a      	bne.n	80078f6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80078c0:	7bba      	ldrb	r2, [r7, #14]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	32ae      	adds	r2, #174	@ 0xae
 80078c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d00f      	beq.n	80078f0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80078d0:	7bba      	ldrb	r2, [r7, #14]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80078d8:	7bba      	ldrb	r2, [r7, #14]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	32ae      	adds	r2, #174	@ 0xae
 80078de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	6839      	ldr	r1, [r7, #0]
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	4798      	blx	r3
 80078ea:	4603      	mov	r3, r0
 80078ec:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80078ee:	e004      	b.n	80078fa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80078f0:	2303      	movs	r3, #3
 80078f2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80078f4:	e001      	b.n	80078fa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80078f6:	2303      	movs	r3, #3
 80078f8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	88db      	ldrh	r3, [r3, #6]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d110      	bne.n	8007924 <USBD_StdItfReq+0xc0>
 8007902:	7bfb      	ldrb	r3, [r7, #15]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d10d      	bne.n	8007924 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 fdc7 	bl	800849c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800790e:	e009      	b.n	8007924 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007910:	6839      	ldr	r1, [r7, #0]
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 fcf7 	bl	8008306 <USBD_CtlError>
          break;
 8007918:	e004      	b.n	8007924 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800791a:	6839      	ldr	r1, [r7, #0]
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 fcf2 	bl	8008306 <USBD_CtlError>
          break;
 8007922:	e000      	b.n	8007926 <USBD_StdItfReq+0xc2>
          break;
 8007924:	bf00      	nop
      }
      break;
 8007926:	e004      	b.n	8007932 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007928:	6839      	ldr	r1, [r7, #0]
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 fceb 	bl	8008306 <USBD_CtlError>
      break;
 8007930:	bf00      	nop
  }

  return ret;
 8007932:	7bfb      	ldrb	r3, [r7, #15]
}
 8007934:	4618      	mov	r0, r3
 8007936:	3710      	adds	r7, #16
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007946:	2300      	movs	r3, #0
 8007948:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	889b      	ldrh	r3, [r3, #4]
 800794e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007958:	2b40      	cmp	r3, #64	@ 0x40
 800795a:	d007      	beq.n	800796c <USBD_StdEPReq+0x30>
 800795c:	2b40      	cmp	r3, #64	@ 0x40
 800795e:	f200 817f 	bhi.w	8007c60 <USBD_StdEPReq+0x324>
 8007962:	2b00      	cmp	r3, #0
 8007964:	d02a      	beq.n	80079bc <USBD_StdEPReq+0x80>
 8007966:	2b20      	cmp	r3, #32
 8007968:	f040 817a 	bne.w	8007c60 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800796c:	7bbb      	ldrb	r3, [r7, #14]
 800796e:	4619      	mov	r1, r3
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f7ff fe85 	bl	8007680 <USBD_CoreFindEP>
 8007976:	4603      	mov	r3, r0
 8007978:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800797a:	7b7b      	ldrb	r3, [r7, #13]
 800797c:	2bff      	cmp	r3, #255	@ 0xff
 800797e:	f000 8174 	beq.w	8007c6a <USBD_StdEPReq+0x32e>
 8007982:	7b7b      	ldrb	r3, [r7, #13]
 8007984:	2b00      	cmp	r3, #0
 8007986:	f040 8170 	bne.w	8007c6a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800798a:	7b7a      	ldrb	r2, [r7, #13]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007992:	7b7a      	ldrb	r2, [r7, #13]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	32ae      	adds	r2, #174	@ 0xae
 8007998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	f000 8163 	beq.w	8007c6a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80079a4:	7b7a      	ldrb	r2, [r7, #13]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	32ae      	adds	r2, #174	@ 0xae
 80079aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	6839      	ldr	r1, [r7, #0]
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	4798      	blx	r3
 80079b6:	4603      	mov	r3, r0
 80079b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80079ba:	e156      	b.n	8007c6a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	785b      	ldrb	r3, [r3, #1]
 80079c0:	2b03      	cmp	r3, #3
 80079c2:	d008      	beq.n	80079d6 <USBD_StdEPReq+0x9a>
 80079c4:	2b03      	cmp	r3, #3
 80079c6:	f300 8145 	bgt.w	8007c54 <USBD_StdEPReq+0x318>
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	f000 809b 	beq.w	8007b06 <USBD_StdEPReq+0x1ca>
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d03c      	beq.n	8007a4e <USBD_StdEPReq+0x112>
 80079d4:	e13e      	b.n	8007c54 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	2b02      	cmp	r3, #2
 80079e0:	d002      	beq.n	80079e8 <USBD_StdEPReq+0xac>
 80079e2:	2b03      	cmp	r3, #3
 80079e4:	d016      	beq.n	8007a14 <USBD_StdEPReq+0xd8>
 80079e6:	e02c      	b.n	8007a42 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079e8:	7bbb      	ldrb	r3, [r7, #14]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00d      	beq.n	8007a0a <USBD_StdEPReq+0xce>
 80079ee:	7bbb      	ldrb	r3, [r7, #14]
 80079f0:	2b80      	cmp	r3, #128	@ 0x80
 80079f2:	d00a      	beq.n	8007a0a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80079f4:	7bbb      	ldrb	r3, [r7, #14]
 80079f6:	4619      	mov	r1, r3
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f001 f97b 	bl	8008cf4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80079fe:	2180      	movs	r1, #128	@ 0x80
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f001 f977 	bl	8008cf4 <USBD_LL_StallEP>
 8007a06:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a08:	e020      	b.n	8007a4c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007a0a:	6839      	ldr	r1, [r7, #0]
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 fc7a 	bl	8008306 <USBD_CtlError>
              break;
 8007a12:	e01b      	b.n	8007a4c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	885b      	ldrh	r3, [r3, #2]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d10e      	bne.n	8007a3a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007a1c:	7bbb      	ldrb	r3, [r7, #14]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00b      	beq.n	8007a3a <USBD_StdEPReq+0xfe>
 8007a22:	7bbb      	ldrb	r3, [r7, #14]
 8007a24:	2b80      	cmp	r3, #128	@ 0x80
 8007a26:	d008      	beq.n	8007a3a <USBD_StdEPReq+0xfe>
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	88db      	ldrh	r3, [r3, #6]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d104      	bne.n	8007a3a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a30:	7bbb      	ldrb	r3, [r7, #14]
 8007a32:	4619      	mov	r1, r3
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f001 f95d 	bl	8008cf4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 fd2e 	bl	800849c <USBD_CtlSendStatus>

              break;
 8007a40:	e004      	b.n	8007a4c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007a42:	6839      	ldr	r1, [r7, #0]
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 fc5e 	bl	8008306 <USBD_CtlError>
              break;
 8007a4a:	bf00      	nop
          }
          break;
 8007a4c:	e107      	b.n	8007c5e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	2b02      	cmp	r3, #2
 8007a58:	d002      	beq.n	8007a60 <USBD_StdEPReq+0x124>
 8007a5a:	2b03      	cmp	r3, #3
 8007a5c:	d016      	beq.n	8007a8c <USBD_StdEPReq+0x150>
 8007a5e:	e04b      	b.n	8007af8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a60:	7bbb      	ldrb	r3, [r7, #14]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d00d      	beq.n	8007a82 <USBD_StdEPReq+0x146>
 8007a66:	7bbb      	ldrb	r3, [r7, #14]
 8007a68:	2b80      	cmp	r3, #128	@ 0x80
 8007a6a:	d00a      	beq.n	8007a82 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a6c:	7bbb      	ldrb	r3, [r7, #14]
 8007a6e:	4619      	mov	r1, r3
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f001 f93f 	bl	8008cf4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a76:	2180      	movs	r1, #128	@ 0x80
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f001 f93b 	bl	8008cf4 <USBD_LL_StallEP>
 8007a7e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a80:	e040      	b.n	8007b04 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007a82:	6839      	ldr	r1, [r7, #0]
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 fc3e 	bl	8008306 <USBD_CtlError>
              break;
 8007a8a:	e03b      	b.n	8007b04 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	885b      	ldrh	r3, [r3, #2]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d136      	bne.n	8007b02 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007a94:	7bbb      	ldrb	r3, [r7, #14]
 8007a96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d004      	beq.n	8007aa8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007a9e:	7bbb      	ldrb	r3, [r7, #14]
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f001 f945 	bl	8008d32 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 fcf7 	bl	800849c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007aae:	7bbb      	ldrb	r3, [r7, #14]
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f7ff fde4 	bl	8007680 <USBD_CoreFindEP>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007abc:	7b7b      	ldrb	r3, [r7, #13]
 8007abe:	2bff      	cmp	r3, #255	@ 0xff
 8007ac0:	d01f      	beq.n	8007b02 <USBD_StdEPReq+0x1c6>
 8007ac2:	7b7b      	ldrb	r3, [r7, #13]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d11c      	bne.n	8007b02 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007ac8:	7b7a      	ldrb	r2, [r7, #13]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007ad0:	7b7a      	ldrb	r2, [r7, #13]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	32ae      	adds	r2, #174	@ 0xae
 8007ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d010      	beq.n	8007b02 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007ae0:	7b7a      	ldrb	r2, [r7, #13]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	32ae      	adds	r2, #174	@ 0xae
 8007ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	6839      	ldr	r1, [r7, #0]
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	4798      	blx	r3
 8007af2:	4603      	mov	r3, r0
 8007af4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007af6:	e004      	b.n	8007b02 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007af8:	6839      	ldr	r1, [r7, #0]
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 fc03 	bl	8008306 <USBD_CtlError>
              break;
 8007b00:	e000      	b.n	8007b04 <USBD_StdEPReq+0x1c8>
              break;
 8007b02:	bf00      	nop
          }
          break;
 8007b04:	e0ab      	b.n	8007c5e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	2b02      	cmp	r3, #2
 8007b10:	d002      	beq.n	8007b18 <USBD_StdEPReq+0x1dc>
 8007b12:	2b03      	cmp	r3, #3
 8007b14:	d032      	beq.n	8007b7c <USBD_StdEPReq+0x240>
 8007b16:	e097      	b.n	8007c48 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b18:	7bbb      	ldrb	r3, [r7, #14]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d007      	beq.n	8007b2e <USBD_StdEPReq+0x1f2>
 8007b1e:	7bbb      	ldrb	r3, [r7, #14]
 8007b20:	2b80      	cmp	r3, #128	@ 0x80
 8007b22:	d004      	beq.n	8007b2e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007b24:	6839      	ldr	r1, [r7, #0]
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 fbed 	bl	8008306 <USBD_CtlError>
                break;
 8007b2c:	e091      	b.n	8007c52 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	da0b      	bge.n	8007b4e <USBD_StdEPReq+0x212>
 8007b36:	7bbb      	ldrb	r3, [r7, #14]
 8007b38:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007b3c:	4613      	mov	r3, r2
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	4413      	add	r3, r2
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	3310      	adds	r3, #16
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	4413      	add	r3, r2
 8007b4a:	3304      	adds	r3, #4
 8007b4c:	e00b      	b.n	8007b66 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b4e:	7bbb      	ldrb	r3, [r7, #14]
 8007b50:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b54:	4613      	mov	r3, r2
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	4413      	add	r3, r2
 8007b5a:	009b      	lsls	r3, r3, #2
 8007b5c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	4413      	add	r3, r2
 8007b64:	3304      	adds	r3, #4
 8007b66:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	2202      	movs	r2, #2
 8007b72:	4619      	mov	r1, r3
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 fc37 	bl	80083e8 <USBD_CtlSendData>
              break;
 8007b7a:	e06a      	b.n	8007c52 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007b7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	da11      	bge.n	8007ba8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007b84:	7bbb      	ldrb	r3, [r7, #14]
 8007b86:	f003 020f 	and.w	r2, r3, #15
 8007b8a:	6879      	ldr	r1, [r7, #4]
 8007b8c:	4613      	mov	r3, r2
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	4413      	add	r3, r2
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	440b      	add	r3, r1
 8007b96:	3324      	adds	r3, #36	@ 0x24
 8007b98:	881b      	ldrh	r3, [r3, #0]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d117      	bne.n	8007bce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007b9e:	6839      	ldr	r1, [r7, #0]
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f000 fbb0 	bl	8008306 <USBD_CtlError>
                  break;
 8007ba6:	e054      	b.n	8007c52 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007ba8:	7bbb      	ldrb	r3, [r7, #14]
 8007baa:	f003 020f 	and.w	r2, r3, #15
 8007bae:	6879      	ldr	r1, [r7, #4]
 8007bb0:	4613      	mov	r3, r2
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	4413      	add	r3, r2
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	440b      	add	r3, r1
 8007bba:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007bbe:	881b      	ldrh	r3, [r3, #0]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d104      	bne.n	8007bce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007bc4:	6839      	ldr	r1, [r7, #0]
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 fb9d 	bl	8008306 <USBD_CtlError>
                  break;
 8007bcc:	e041      	b.n	8007c52 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	da0b      	bge.n	8007bee <USBD_StdEPReq+0x2b2>
 8007bd6:	7bbb      	ldrb	r3, [r7, #14]
 8007bd8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007bdc:	4613      	mov	r3, r2
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	4413      	add	r3, r2
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	3310      	adds	r3, #16
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	4413      	add	r3, r2
 8007bea:	3304      	adds	r3, #4
 8007bec:	e00b      	b.n	8007c06 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007bee:	7bbb      	ldrb	r3, [r7, #14]
 8007bf0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bf4:	4613      	mov	r3, r2
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	4413      	add	r3, r2
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	4413      	add	r3, r2
 8007c04:	3304      	adds	r3, #4
 8007c06:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007c08:	7bbb      	ldrb	r3, [r7, #14]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d002      	beq.n	8007c14 <USBD_StdEPReq+0x2d8>
 8007c0e:	7bbb      	ldrb	r3, [r7, #14]
 8007c10:	2b80      	cmp	r3, #128	@ 0x80
 8007c12:	d103      	bne.n	8007c1c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	2200      	movs	r2, #0
 8007c18:	601a      	str	r2, [r3, #0]
 8007c1a:	e00e      	b.n	8007c3a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007c1c:	7bbb      	ldrb	r3, [r7, #14]
 8007c1e:	4619      	mov	r1, r3
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f001 f8a5 	bl	8008d70 <USBD_LL_IsStallEP>
 8007c26:	4603      	mov	r3, r0
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d003      	beq.n	8007c34 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	601a      	str	r2, [r3, #0]
 8007c32:	e002      	b.n	8007c3a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	2200      	movs	r2, #0
 8007c38:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	2202      	movs	r2, #2
 8007c3e:	4619      	mov	r1, r3
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 fbd1 	bl	80083e8 <USBD_CtlSendData>
              break;
 8007c46:	e004      	b.n	8007c52 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007c48:	6839      	ldr	r1, [r7, #0]
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 fb5b 	bl	8008306 <USBD_CtlError>
              break;
 8007c50:	bf00      	nop
          }
          break;
 8007c52:	e004      	b.n	8007c5e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007c54:	6839      	ldr	r1, [r7, #0]
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 fb55 	bl	8008306 <USBD_CtlError>
          break;
 8007c5c:	bf00      	nop
      }
      break;
 8007c5e:	e005      	b.n	8007c6c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007c60:	6839      	ldr	r1, [r7, #0]
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 fb4f 	bl	8008306 <USBD_CtlError>
      break;
 8007c68:	e000      	b.n	8007c6c <USBD_StdEPReq+0x330>
      break;
 8007c6a:	bf00      	nop
  }

  return ret;
 8007c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3710      	adds	r7, #16
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
	...

08007c78 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007c82:	2300      	movs	r3, #0
 8007c84:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007c86:	2300      	movs	r3, #0
 8007c88:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	885b      	ldrh	r3, [r3, #2]
 8007c92:	0a1b      	lsrs	r3, r3, #8
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	3b01      	subs	r3, #1
 8007c98:	2b06      	cmp	r3, #6
 8007c9a:	f200 8128 	bhi.w	8007eee <USBD_GetDescriptor+0x276>
 8007c9e:	a201      	add	r2, pc, #4	@ (adr r2, 8007ca4 <USBD_GetDescriptor+0x2c>)
 8007ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca4:	08007cc1 	.word	0x08007cc1
 8007ca8:	08007cd9 	.word	0x08007cd9
 8007cac:	08007d19 	.word	0x08007d19
 8007cb0:	08007eef 	.word	0x08007eef
 8007cb4:	08007eef 	.word	0x08007eef
 8007cb8:	08007e8f 	.word	0x08007e8f
 8007cbc:	08007ebb 	.word	0x08007ebb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	7c12      	ldrb	r2, [r2, #16]
 8007ccc:	f107 0108 	add.w	r1, r7, #8
 8007cd0:	4610      	mov	r0, r2
 8007cd2:	4798      	blx	r3
 8007cd4:	60f8      	str	r0, [r7, #12]
      break;
 8007cd6:	e112      	b.n	8007efe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	7c1b      	ldrb	r3, [r3, #16]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d10d      	bne.n	8007cfc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ce8:	f107 0208 	add.w	r2, r7, #8
 8007cec:	4610      	mov	r0, r2
 8007cee:	4798      	blx	r3
 8007cf0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	3301      	adds	r3, #1
 8007cf6:	2202      	movs	r2, #2
 8007cf8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007cfa:	e100      	b.n	8007efe <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d04:	f107 0208 	add.w	r2, r7, #8
 8007d08:	4610      	mov	r0, r2
 8007d0a:	4798      	blx	r3
 8007d0c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	3301      	adds	r3, #1
 8007d12:	2202      	movs	r2, #2
 8007d14:	701a      	strb	r2, [r3, #0]
      break;
 8007d16:	e0f2      	b.n	8007efe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	885b      	ldrh	r3, [r3, #2]
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	2b05      	cmp	r3, #5
 8007d20:	f200 80ac 	bhi.w	8007e7c <USBD_GetDescriptor+0x204>
 8007d24:	a201      	add	r2, pc, #4	@ (adr r2, 8007d2c <USBD_GetDescriptor+0xb4>)
 8007d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d2a:	bf00      	nop
 8007d2c:	08007d45 	.word	0x08007d45
 8007d30:	08007d79 	.word	0x08007d79
 8007d34:	08007dad 	.word	0x08007dad
 8007d38:	08007de1 	.word	0x08007de1
 8007d3c:	08007e15 	.word	0x08007e15
 8007d40:	08007e49 	.word	0x08007e49
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d00b      	beq.n	8007d68 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	7c12      	ldrb	r2, [r2, #16]
 8007d5c:	f107 0108 	add.w	r1, r7, #8
 8007d60:	4610      	mov	r0, r2
 8007d62:	4798      	blx	r3
 8007d64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d66:	e091      	b.n	8007e8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d68:	6839      	ldr	r1, [r7, #0]
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 facb 	bl	8008306 <USBD_CtlError>
            err++;
 8007d70:	7afb      	ldrb	r3, [r7, #11]
 8007d72:	3301      	adds	r3, #1
 8007d74:	72fb      	strb	r3, [r7, #11]
          break;
 8007d76:	e089      	b.n	8007e8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d00b      	beq.n	8007d9c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	7c12      	ldrb	r2, [r2, #16]
 8007d90:	f107 0108 	add.w	r1, r7, #8
 8007d94:	4610      	mov	r0, r2
 8007d96:	4798      	blx	r3
 8007d98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d9a:	e077      	b.n	8007e8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d9c:	6839      	ldr	r1, [r7, #0]
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 fab1 	bl	8008306 <USBD_CtlError>
            err++;
 8007da4:	7afb      	ldrb	r3, [r7, #11]
 8007da6:	3301      	adds	r3, #1
 8007da8:	72fb      	strb	r3, [r7, #11]
          break;
 8007daa:	e06f      	b.n	8007e8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d00b      	beq.n	8007dd0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	7c12      	ldrb	r2, [r2, #16]
 8007dc4:	f107 0108 	add.w	r1, r7, #8
 8007dc8:	4610      	mov	r0, r2
 8007dca:	4798      	blx	r3
 8007dcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dce:	e05d      	b.n	8007e8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007dd0:	6839      	ldr	r1, [r7, #0]
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 fa97 	bl	8008306 <USBD_CtlError>
            err++;
 8007dd8:	7afb      	ldrb	r3, [r7, #11]
 8007dda:	3301      	adds	r3, #1
 8007ddc:	72fb      	strb	r3, [r7, #11]
          break;
 8007dde:	e055      	b.n	8007e8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007de6:	691b      	ldr	r3, [r3, #16]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d00b      	beq.n	8007e04 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007df2:	691b      	ldr	r3, [r3, #16]
 8007df4:	687a      	ldr	r2, [r7, #4]
 8007df6:	7c12      	ldrb	r2, [r2, #16]
 8007df8:	f107 0108 	add.w	r1, r7, #8
 8007dfc:	4610      	mov	r0, r2
 8007dfe:	4798      	blx	r3
 8007e00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e02:	e043      	b.n	8007e8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e04:	6839      	ldr	r1, [r7, #0]
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 fa7d 	bl	8008306 <USBD_CtlError>
            err++;
 8007e0c:	7afb      	ldrb	r3, [r7, #11]
 8007e0e:	3301      	adds	r3, #1
 8007e10:	72fb      	strb	r3, [r7, #11]
          break;
 8007e12:	e03b      	b.n	8007e8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e1a:	695b      	ldr	r3, [r3, #20]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d00b      	beq.n	8007e38 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e26:	695b      	ldr	r3, [r3, #20]
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	7c12      	ldrb	r2, [r2, #16]
 8007e2c:	f107 0108 	add.w	r1, r7, #8
 8007e30:	4610      	mov	r0, r2
 8007e32:	4798      	blx	r3
 8007e34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e36:	e029      	b.n	8007e8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e38:	6839      	ldr	r1, [r7, #0]
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 fa63 	bl	8008306 <USBD_CtlError>
            err++;
 8007e40:	7afb      	ldrb	r3, [r7, #11]
 8007e42:	3301      	adds	r3, #1
 8007e44:	72fb      	strb	r3, [r7, #11]
          break;
 8007e46:	e021      	b.n	8007e8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e4e:	699b      	ldr	r3, [r3, #24]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d00b      	beq.n	8007e6c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e5a:	699b      	ldr	r3, [r3, #24]
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	7c12      	ldrb	r2, [r2, #16]
 8007e60:	f107 0108 	add.w	r1, r7, #8
 8007e64:	4610      	mov	r0, r2
 8007e66:	4798      	blx	r3
 8007e68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e6a:	e00f      	b.n	8007e8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e6c:	6839      	ldr	r1, [r7, #0]
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 fa49 	bl	8008306 <USBD_CtlError>
            err++;
 8007e74:	7afb      	ldrb	r3, [r7, #11]
 8007e76:	3301      	adds	r3, #1
 8007e78:	72fb      	strb	r3, [r7, #11]
          break;
 8007e7a:	e007      	b.n	8007e8c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007e7c:	6839      	ldr	r1, [r7, #0]
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 fa41 	bl	8008306 <USBD_CtlError>
          err++;
 8007e84:	7afb      	ldrb	r3, [r7, #11]
 8007e86:	3301      	adds	r3, #1
 8007e88:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007e8a:	bf00      	nop
      }
      break;
 8007e8c:	e037      	b.n	8007efe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	7c1b      	ldrb	r3, [r3, #16]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d109      	bne.n	8007eaa <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e9e:	f107 0208 	add.w	r2, r7, #8
 8007ea2:	4610      	mov	r0, r2
 8007ea4:	4798      	blx	r3
 8007ea6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ea8:	e029      	b.n	8007efe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007eaa:	6839      	ldr	r1, [r7, #0]
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f000 fa2a 	bl	8008306 <USBD_CtlError>
        err++;
 8007eb2:	7afb      	ldrb	r3, [r7, #11]
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	72fb      	strb	r3, [r7, #11]
      break;
 8007eb8:	e021      	b.n	8007efe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	7c1b      	ldrb	r3, [r3, #16]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d10d      	bne.n	8007ede <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007eca:	f107 0208 	add.w	r2, r7, #8
 8007ece:	4610      	mov	r0, r2
 8007ed0:	4798      	blx	r3
 8007ed2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	2207      	movs	r2, #7
 8007eda:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007edc:	e00f      	b.n	8007efe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007ede:	6839      	ldr	r1, [r7, #0]
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 fa10 	bl	8008306 <USBD_CtlError>
        err++;
 8007ee6:	7afb      	ldrb	r3, [r7, #11]
 8007ee8:	3301      	adds	r3, #1
 8007eea:	72fb      	strb	r3, [r7, #11]
      break;
 8007eec:	e007      	b.n	8007efe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007eee:	6839      	ldr	r1, [r7, #0]
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 fa08 	bl	8008306 <USBD_CtlError>
      err++;
 8007ef6:	7afb      	ldrb	r3, [r7, #11]
 8007ef8:	3301      	adds	r3, #1
 8007efa:	72fb      	strb	r3, [r7, #11]
      break;
 8007efc:	bf00      	nop
  }

  if (err != 0U)
 8007efe:	7afb      	ldrb	r3, [r7, #11]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d11e      	bne.n	8007f42 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	88db      	ldrh	r3, [r3, #6]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d016      	beq.n	8007f3a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007f0c:	893b      	ldrh	r3, [r7, #8]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d00e      	beq.n	8007f30 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	88da      	ldrh	r2, [r3, #6]
 8007f16:	893b      	ldrh	r3, [r7, #8]
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	bf28      	it	cs
 8007f1c:	4613      	movcs	r3, r2
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007f22:	893b      	ldrh	r3, [r7, #8]
 8007f24:	461a      	mov	r2, r3
 8007f26:	68f9      	ldr	r1, [r7, #12]
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 fa5d 	bl	80083e8 <USBD_CtlSendData>
 8007f2e:	e009      	b.n	8007f44 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007f30:	6839      	ldr	r1, [r7, #0]
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 f9e7 	bl	8008306 <USBD_CtlError>
 8007f38:	e004      	b.n	8007f44 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 faae 	bl	800849c <USBD_CtlSendStatus>
 8007f40:	e000      	b.n	8007f44 <USBD_GetDescriptor+0x2cc>
    return;
 8007f42:	bf00      	nop
  }
}
 8007f44:	3710      	adds	r7, #16
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop

08007f4c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b084      	sub	sp, #16
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	889b      	ldrh	r3, [r3, #4]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d131      	bne.n	8007fc2 <USBD_SetAddress+0x76>
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	88db      	ldrh	r3, [r3, #6]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d12d      	bne.n	8007fc2 <USBD_SetAddress+0x76>
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	885b      	ldrh	r3, [r3, #2]
 8007f6a:	2b7f      	cmp	r3, #127	@ 0x7f
 8007f6c:	d829      	bhi.n	8007fc2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	885b      	ldrh	r3, [r3, #2]
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f78:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f80:	b2db      	uxtb	r3, r3
 8007f82:	2b03      	cmp	r3, #3
 8007f84:	d104      	bne.n	8007f90 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007f86:	6839      	ldr	r1, [r7, #0]
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 f9bc 	bl	8008306 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f8e:	e01d      	b.n	8007fcc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	7bfa      	ldrb	r2, [r7, #15]
 8007f94:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007f98:	7bfb      	ldrb	r3, [r7, #15]
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f000 ff13 	bl	8008dc8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 fa7a 	bl	800849c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007fa8:	7bfb      	ldrb	r3, [r7, #15]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d004      	beq.n	8007fb8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2202      	movs	r2, #2
 8007fb2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fb6:	e009      	b.n	8007fcc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2201      	movs	r2, #1
 8007fbc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fc0:	e004      	b.n	8007fcc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007fc2:	6839      	ldr	r1, [r7, #0]
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 f99e 	bl	8008306 <USBD_CtlError>
  }
}
 8007fca:	bf00      	nop
 8007fcc:	bf00      	nop
 8007fce:	3710      	adds	r7, #16
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b084      	sub	sp, #16
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	885b      	ldrh	r3, [r3, #2]
 8007fe6:	b2da      	uxtb	r2, r3
 8007fe8:	4b4e      	ldr	r3, [pc, #312]	@ (8008124 <USBD_SetConfig+0x150>)
 8007fea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007fec:	4b4d      	ldr	r3, [pc, #308]	@ (8008124 <USBD_SetConfig+0x150>)
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d905      	bls.n	8008000 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007ff4:	6839      	ldr	r1, [r7, #0]
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 f985 	bl	8008306 <USBD_CtlError>
    return USBD_FAIL;
 8007ffc:	2303      	movs	r3, #3
 8007ffe:	e08c      	b.n	800811a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008006:	b2db      	uxtb	r3, r3
 8008008:	2b02      	cmp	r3, #2
 800800a:	d002      	beq.n	8008012 <USBD_SetConfig+0x3e>
 800800c:	2b03      	cmp	r3, #3
 800800e:	d029      	beq.n	8008064 <USBD_SetConfig+0x90>
 8008010:	e075      	b.n	80080fe <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008012:	4b44      	ldr	r3, [pc, #272]	@ (8008124 <USBD_SetConfig+0x150>)
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d020      	beq.n	800805c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800801a:	4b42      	ldr	r3, [pc, #264]	@ (8008124 <USBD_SetConfig+0x150>)
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	461a      	mov	r2, r3
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008024:	4b3f      	ldr	r3, [pc, #252]	@ (8008124 <USBD_SetConfig+0x150>)
 8008026:	781b      	ldrb	r3, [r3, #0]
 8008028:	4619      	mov	r1, r3
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f7fe ffe9 	bl	8007002 <USBD_SetClassConfig>
 8008030:	4603      	mov	r3, r0
 8008032:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008034:	7bfb      	ldrb	r3, [r7, #15]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d008      	beq.n	800804c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800803a:	6839      	ldr	r1, [r7, #0]
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 f962 	bl	8008306 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2202      	movs	r2, #2
 8008046:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800804a:	e065      	b.n	8008118 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f000 fa25 	bl	800849c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2203      	movs	r2, #3
 8008056:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800805a:	e05d      	b.n	8008118 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 fa1d 	bl	800849c <USBD_CtlSendStatus>
      break;
 8008062:	e059      	b.n	8008118 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008064:	4b2f      	ldr	r3, [pc, #188]	@ (8008124 <USBD_SetConfig+0x150>)
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d112      	bne.n	8008092 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2202      	movs	r2, #2
 8008070:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008074:	4b2b      	ldr	r3, [pc, #172]	@ (8008124 <USBD_SetConfig+0x150>)
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	461a      	mov	r2, r3
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800807e:	4b29      	ldr	r3, [pc, #164]	@ (8008124 <USBD_SetConfig+0x150>)
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	4619      	mov	r1, r3
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f7fe ffd8 	bl	800703a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 fa06 	bl	800849c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008090:	e042      	b.n	8008118 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008092:	4b24      	ldr	r3, [pc, #144]	@ (8008124 <USBD_SetConfig+0x150>)
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	461a      	mov	r2, r3
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	429a      	cmp	r2, r3
 800809e:	d02a      	beq.n	80080f6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	b2db      	uxtb	r3, r3
 80080a6:	4619      	mov	r1, r3
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f7fe ffc6 	bl	800703a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80080ae:	4b1d      	ldr	r3, [pc, #116]	@ (8008124 <USBD_SetConfig+0x150>)
 80080b0:	781b      	ldrb	r3, [r3, #0]
 80080b2:	461a      	mov	r2, r3
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80080b8:	4b1a      	ldr	r3, [pc, #104]	@ (8008124 <USBD_SetConfig+0x150>)
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	4619      	mov	r1, r3
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f7fe ff9f 	bl	8007002 <USBD_SetClassConfig>
 80080c4:	4603      	mov	r3, r0
 80080c6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80080c8:	7bfb      	ldrb	r3, [r7, #15]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d00f      	beq.n	80080ee <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80080ce:	6839      	ldr	r1, [r7, #0]
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 f918 	bl	8008306 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	4619      	mov	r1, r3
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f7fe ffab 	bl	800703a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2202      	movs	r2, #2
 80080e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80080ec:	e014      	b.n	8008118 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 f9d4 	bl	800849c <USBD_CtlSendStatus>
      break;
 80080f4:	e010      	b.n	8008118 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 f9d0 	bl	800849c <USBD_CtlSendStatus>
      break;
 80080fc:	e00c      	b.n	8008118 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80080fe:	6839      	ldr	r1, [r7, #0]
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f000 f900 	bl	8008306 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008106:	4b07      	ldr	r3, [pc, #28]	@ (8008124 <USBD_SetConfig+0x150>)
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	4619      	mov	r1, r3
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f7fe ff94 	bl	800703a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008112:	2303      	movs	r3, #3
 8008114:	73fb      	strb	r3, [r7, #15]
      break;
 8008116:	bf00      	nop
  }

  return ret;
 8008118:	7bfb      	ldrb	r3, [r7, #15]
}
 800811a:	4618      	mov	r0, r3
 800811c:	3710      	adds	r7, #16
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}
 8008122:	bf00      	nop
 8008124:	200002ec 	.word	0x200002ec

08008128 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	88db      	ldrh	r3, [r3, #6]
 8008136:	2b01      	cmp	r3, #1
 8008138:	d004      	beq.n	8008144 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800813a:	6839      	ldr	r1, [r7, #0]
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 f8e2 	bl	8008306 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008142:	e023      	b.n	800818c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800814a:	b2db      	uxtb	r3, r3
 800814c:	2b02      	cmp	r3, #2
 800814e:	dc02      	bgt.n	8008156 <USBD_GetConfig+0x2e>
 8008150:	2b00      	cmp	r3, #0
 8008152:	dc03      	bgt.n	800815c <USBD_GetConfig+0x34>
 8008154:	e015      	b.n	8008182 <USBD_GetConfig+0x5a>
 8008156:	2b03      	cmp	r3, #3
 8008158:	d00b      	beq.n	8008172 <USBD_GetConfig+0x4a>
 800815a:	e012      	b.n	8008182 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2200      	movs	r2, #0
 8008160:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	3308      	adds	r3, #8
 8008166:	2201      	movs	r2, #1
 8008168:	4619      	mov	r1, r3
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 f93c 	bl	80083e8 <USBD_CtlSendData>
        break;
 8008170:	e00c      	b.n	800818c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	3304      	adds	r3, #4
 8008176:	2201      	movs	r2, #1
 8008178:	4619      	mov	r1, r3
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 f934 	bl	80083e8 <USBD_CtlSendData>
        break;
 8008180:	e004      	b.n	800818c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008182:	6839      	ldr	r1, [r7, #0]
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 f8be 	bl	8008306 <USBD_CtlError>
        break;
 800818a:	bf00      	nop
}
 800818c:	bf00      	nop
 800818e:	3708      	adds	r7, #8
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b082      	sub	sp, #8
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081a4:	b2db      	uxtb	r3, r3
 80081a6:	3b01      	subs	r3, #1
 80081a8:	2b02      	cmp	r3, #2
 80081aa:	d81e      	bhi.n	80081ea <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	88db      	ldrh	r3, [r3, #6]
 80081b0:	2b02      	cmp	r3, #2
 80081b2:	d004      	beq.n	80081be <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80081b4:	6839      	ldr	r1, [r7, #0]
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 f8a5 	bl	8008306 <USBD_CtlError>
        break;
 80081bc:	e01a      	b.n	80081f4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2201      	movs	r2, #1
 80081c2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d005      	beq.n	80081da <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	68db      	ldr	r3, [r3, #12]
 80081d2:	f043 0202 	orr.w	r2, r3, #2
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	330c      	adds	r3, #12
 80081de:	2202      	movs	r2, #2
 80081e0:	4619      	mov	r1, r3
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 f900 	bl	80083e8 <USBD_CtlSendData>
      break;
 80081e8:	e004      	b.n	80081f4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80081ea:	6839      	ldr	r1, [r7, #0]
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 f88a 	bl	8008306 <USBD_CtlError>
      break;
 80081f2:	bf00      	nop
  }
}
 80081f4:	bf00      	nop
 80081f6:	3708      	adds	r7, #8
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	885b      	ldrh	r3, [r3, #2]
 800820a:	2b01      	cmp	r3, #1
 800820c:	d107      	bne.n	800821e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2201      	movs	r2, #1
 8008212:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 f940 	bl	800849c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800821c:	e013      	b.n	8008246 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	885b      	ldrh	r3, [r3, #2]
 8008222:	2b02      	cmp	r3, #2
 8008224:	d10b      	bne.n	800823e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	889b      	ldrh	r3, [r3, #4]
 800822a:	0a1b      	lsrs	r3, r3, #8
 800822c:	b29b      	uxth	r3, r3
 800822e:	b2da      	uxtb	r2, r3
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 f930 	bl	800849c <USBD_CtlSendStatus>
}
 800823c:	e003      	b.n	8008246 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800823e:	6839      	ldr	r1, [r7, #0]
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 f860 	bl	8008306 <USBD_CtlError>
}
 8008246:	bf00      	nop
 8008248:	3708      	adds	r7, #8
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}

0800824e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800824e:	b580      	push	{r7, lr}
 8008250:	b082      	sub	sp, #8
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
 8008256:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800825e:	b2db      	uxtb	r3, r3
 8008260:	3b01      	subs	r3, #1
 8008262:	2b02      	cmp	r3, #2
 8008264:	d80b      	bhi.n	800827e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	885b      	ldrh	r3, [r3, #2]
 800826a:	2b01      	cmp	r3, #1
 800826c:	d10c      	bne.n	8008288 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2200      	movs	r2, #0
 8008272:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 f910 	bl	800849c <USBD_CtlSendStatus>
      }
      break;
 800827c:	e004      	b.n	8008288 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800827e:	6839      	ldr	r1, [r7, #0]
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 f840 	bl	8008306 <USBD_CtlError>
      break;
 8008286:	e000      	b.n	800828a <USBD_ClrFeature+0x3c>
      break;
 8008288:	bf00      	nop
  }
}
 800828a:	bf00      	nop
 800828c:	3708      	adds	r7, #8
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}

08008292 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008292:	b580      	push	{r7, lr}
 8008294:	b084      	sub	sp, #16
 8008296:	af00      	add	r7, sp, #0
 8008298:	6078      	str	r0, [r7, #4]
 800829a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	781a      	ldrb	r2, [r3, #0]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	3301      	adds	r3, #1
 80082ac:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	781a      	ldrb	r2, [r3, #0]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	3301      	adds	r3, #1
 80082ba:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80082bc:	68f8      	ldr	r0, [r7, #12]
 80082be:	f7ff fa40 	bl	8007742 <SWAPBYTE>
 80082c2:	4603      	mov	r3, r0
 80082c4:	461a      	mov	r2, r3
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	3301      	adds	r3, #1
 80082ce:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	3301      	adds	r3, #1
 80082d4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80082d6:	68f8      	ldr	r0, [r7, #12]
 80082d8:	f7ff fa33 	bl	8007742 <SWAPBYTE>
 80082dc:	4603      	mov	r3, r0
 80082de:	461a      	mov	r2, r3
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	3301      	adds	r3, #1
 80082e8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	3301      	adds	r3, #1
 80082ee:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80082f0:	68f8      	ldr	r0, [r7, #12]
 80082f2:	f7ff fa26 	bl	8007742 <SWAPBYTE>
 80082f6:	4603      	mov	r3, r0
 80082f8:	461a      	mov	r2, r3
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	80da      	strh	r2, [r3, #6]
}
 80082fe:	bf00      	nop
 8008300:	3710      	adds	r7, #16
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}

08008306 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008306:	b580      	push	{r7, lr}
 8008308:	b082      	sub	sp, #8
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
 800830e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008310:	2180      	movs	r1, #128	@ 0x80
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 fcee 	bl	8008cf4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008318:	2100      	movs	r1, #0
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 fcea 	bl	8008cf4 <USBD_LL_StallEP>
}
 8008320:	bf00      	nop
 8008322:	3708      	adds	r7, #8
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b086      	sub	sp, #24
 800832c:	af00      	add	r7, sp, #0
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	60b9      	str	r1, [r7, #8]
 8008332:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008334:	2300      	movs	r3, #0
 8008336:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d036      	beq.n	80083ac <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008342:	6938      	ldr	r0, [r7, #16]
 8008344:	f000 f836 	bl	80083b4 <USBD_GetLen>
 8008348:	4603      	mov	r3, r0
 800834a:	3301      	adds	r3, #1
 800834c:	b29b      	uxth	r3, r3
 800834e:	005b      	lsls	r3, r3, #1
 8008350:	b29a      	uxth	r2, r3
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008356:	7dfb      	ldrb	r3, [r7, #23]
 8008358:	68ba      	ldr	r2, [r7, #8]
 800835a:	4413      	add	r3, r2
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	7812      	ldrb	r2, [r2, #0]
 8008360:	701a      	strb	r2, [r3, #0]
  idx++;
 8008362:	7dfb      	ldrb	r3, [r7, #23]
 8008364:	3301      	adds	r3, #1
 8008366:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008368:	7dfb      	ldrb	r3, [r7, #23]
 800836a:	68ba      	ldr	r2, [r7, #8]
 800836c:	4413      	add	r3, r2
 800836e:	2203      	movs	r2, #3
 8008370:	701a      	strb	r2, [r3, #0]
  idx++;
 8008372:	7dfb      	ldrb	r3, [r7, #23]
 8008374:	3301      	adds	r3, #1
 8008376:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008378:	e013      	b.n	80083a2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800837a:	7dfb      	ldrb	r3, [r7, #23]
 800837c:	68ba      	ldr	r2, [r7, #8]
 800837e:	4413      	add	r3, r2
 8008380:	693a      	ldr	r2, [r7, #16]
 8008382:	7812      	ldrb	r2, [r2, #0]
 8008384:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	3301      	adds	r3, #1
 800838a:	613b      	str	r3, [r7, #16]
    idx++;
 800838c:	7dfb      	ldrb	r3, [r7, #23]
 800838e:	3301      	adds	r3, #1
 8008390:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008392:	7dfb      	ldrb	r3, [r7, #23]
 8008394:	68ba      	ldr	r2, [r7, #8]
 8008396:	4413      	add	r3, r2
 8008398:	2200      	movs	r2, #0
 800839a:	701a      	strb	r2, [r3, #0]
    idx++;
 800839c:	7dfb      	ldrb	r3, [r7, #23]
 800839e:	3301      	adds	r3, #1
 80083a0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	781b      	ldrb	r3, [r3, #0]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d1e7      	bne.n	800837a <USBD_GetString+0x52>
 80083aa:	e000      	b.n	80083ae <USBD_GetString+0x86>
    return;
 80083ac:	bf00      	nop
  }
}
 80083ae:	3718      	adds	r7, #24
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b085      	sub	sp, #20
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80083bc:	2300      	movs	r3, #0
 80083be:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80083c4:	e005      	b.n	80083d2 <USBD_GetLen+0x1e>
  {
    len++;
 80083c6:	7bfb      	ldrb	r3, [r7, #15]
 80083c8:	3301      	adds	r3, #1
 80083ca:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	3301      	adds	r3, #1
 80083d0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d1f5      	bne.n	80083c6 <USBD_GetLen+0x12>
  }

  return len;
 80083da:	7bfb      	ldrb	r3, [r7, #15]
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3714      	adds	r7, #20
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr

080083e8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	60f8      	str	r0, [r7, #12]
 80083f0:	60b9      	str	r1, [r7, #8]
 80083f2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2202      	movs	r2, #2
 80083f8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	687a      	ldr	r2, [r7, #4]
 8008400:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	687a      	ldr	r2, [r7, #4]
 8008406:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	68ba      	ldr	r2, [r7, #8]
 800840c:	2100      	movs	r1, #0
 800840e:	68f8      	ldr	r0, [r7, #12]
 8008410:	f000 fcf9 	bl	8008e06 <USBD_LL_Transmit>

  return USBD_OK;
 8008414:	2300      	movs	r3, #0
}
 8008416:	4618      	mov	r0, r3
 8008418:	3710      	adds	r7, #16
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}

0800841e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800841e:	b580      	push	{r7, lr}
 8008420:	b084      	sub	sp, #16
 8008422:	af00      	add	r7, sp, #0
 8008424:	60f8      	str	r0, [r7, #12]
 8008426:	60b9      	str	r1, [r7, #8]
 8008428:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	68ba      	ldr	r2, [r7, #8]
 800842e:	2100      	movs	r1, #0
 8008430:	68f8      	ldr	r0, [r7, #12]
 8008432:	f000 fce8 	bl	8008e06 <USBD_LL_Transmit>

  return USBD_OK;
 8008436:	2300      	movs	r3, #0
}
 8008438:	4618      	mov	r0, r3
 800843a:	3710      	adds	r7, #16
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af00      	add	r7, sp, #0
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	60b9      	str	r1, [r7, #8]
 800844a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2203      	movs	r2, #3
 8008450:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	687a      	ldr	r2, [r7, #4]
 8008460:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	68ba      	ldr	r2, [r7, #8]
 8008468:	2100      	movs	r1, #0
 800846a:	68f8      	ldr	r0, [r7, #12]
 800846c:	f000 fcec 	bl	8008e48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008470:	2300      	movs	r3, #0
}
 8008472:	4618      	mov	r0, r3
 8008474:	3710      	adds	r7, #16
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}

0800847a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800847a:	b580      	push	{r7, lr}
 800847c:	b084      	sub	sp, #16
 800847e:	af00      	add	r7, sp, #0
 8008480:	60f8      	str	r0, [r7, #12]
 8008482:	60b9      	str	r1, [r7, #8]
 8008484:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	68ba      	ldr	r2, [r7, #8]
 800848a:	2100      	movs	r1, #0
 800848c:	68f8      	ldr	r0, [r7, #12]
 800848e:	f000 fcdb 	bl	8008e48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008492:	2300      	movs	r3, #0
}
 8008494:	4618      	mov	r0, r3
 8008496:	3710      	adds	r7, #16
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b082      	sub	sp, #8
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2204      	movs	r2, #4
 80084a8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80084ac:	2300      	movs	r3, #0
 80084ae:	2200      	movs	r2, #0
 80084b0:	2100      	movs	r1, #0
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f000 fca7 	bl	8008e06 <USBD_LL_Transmit>

  return USBD_OK;
 80084b8:	2300      	movs	r3, #0
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3708      	adds	r7, #8
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}

080084c2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80084c2:	b580      	push	{r7, lr}
 80084c4:	b082      	sub	sp, #8
 80084c6:	af00      	add	r7, sp, #0
 80084c8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2205      	movs	r2, #5
 80084ce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084d2:	2300      	movs	r3, #0
 80084d4:	2200      	movs	r2, #0
 80084d6:	2100      	movs	r1, #0
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 fcb5 	bl	8008e48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084de:	2300      	movs	r3, #0
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3708      	adds	r7, #8
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}

080084e8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80084ec:	2200      	movs	r2, #0
 80084ee:	4912      	ldr	r1, [pc, #72]	@ (8008538 <MX_USB_DEVICE_Init+0x50>)
 80084f0:	4812      	ldr	r0, [pc, #72]	@ (800853c <MX_USB_DEVICE_Init+0x54>)
 80084f2:	f7fe fd09 	bl	8006f08 <USBD_Init>
 80084f6:	4603      	mov	r3, r0
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d001      	beq.n	8008500 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80084fc:	f7f9 f928 	bl	8001750 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008500:	490f      	ldr	r1, [pc, #60]	@ (8008540 <MX_USB_DEVICE_Init+0x58>)
 8008502:	480e      	ldr	r0, [pc, #56]	@ (800853c <MX_USB_DEVICE_Init+0x54>)
 8008504:	f7fe fd30 	bl	8006f68 <USBD_RegisterClass>
 8008508:	4603      	mov	r3, r0
 800850a:	2b00      	cmp	r3, #0
 800850c:	d001      	beq.n	8008512 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800850e:	f7f9 f91f 	bl	8001750 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008512:	490c      	ldr	r1, [pc, #48]	@ (8008544 <MX_USB_DEVICE_Init+0x5c>)
 8008514:	4809      	ldr	r0, [pc, #36]	@ (800853c <MX_USB_DEVICE_Init+0x54>)
 8008516:	f7fe fc21 	bl	8006d5c <USBD_CDC_RegisterInterface>
 800851a:	4603      	mov	r3, r0
 800851c:	2b00      	cmp	r3, #0
 800851e:	d001      	beq.n	8008524 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008520:	f7f9 f916 	bl	8001750 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008524:	4805      	ldr	r0, [pc, #20]	@ (800853c <MX_USB_DEVICE_Init+0x54>)
 8008526:	f7fe fd55 	bl	8006fd4 <USBD_Start>
 800852a:	4603      	mov	r3, r0
 800852c:	2b00      	cmp	r3, #0
 800852e:	d001      	beq.n	8008534 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008530:	f7f9 f90e 	bl	8001750 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008534:	bf00      	nop
 8008536:	bd80      	pop	{r7, pc}
 8008538:	200000ac 	.word	0x200000ac
 800853c:	200002f0 	.word	0x200002f0
 8008540:	20000018 	.word	0x20000018
 8008544:	20000098 	.word	0x20000098

08008548 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800854c:	2200      	movs	r2, #0
 800854e:	4905      	ldr	r1, [pc, #20]	@ (8008564 <CDC_Init_FS+0x1c>)
 8008550:	4805      	ldr	r0, [pc, #20]	@ (8008568 <CDC_Init_FS+0x20>)
 8008552:	f7fe fc1d 	bl	8006d90 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008556:	4905      	ldr	r1, [pc, #20]	@ (800856c <CDC_Init_FS+0x24>)
 8008558:	4803      	ldr	r0, [pc, #12]	@ (8008568 <CDC_Init_FS+0x20>)
 800855a:	f7fe fc3b 	bl	8006dd4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800855e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008560:	4618      	mov	r0, r3
 8008562:	bd80      	pop	{r7, pc}
 8008564:	20000dcc 	.word	0x20000dcc
 8008568:	200002f0 	.word	0x200002f0
 800856c:	200005cc 	.word	0x200005cc

08008570 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008570:	b480      	push	{r7}
 8008572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008574:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008576:	4618      	mov	r0, r3
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr

08008580 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008580:	b480      	push	{r7}
 8008582:	b083      	sub	sp, #12
 8008584:	af00      	add	r7, sp, #0
 8008586:	4603      	mov	r3, r0
 8008588:	6039      	str	r1, [r7, #0]
 800858a:	71fb      	strb	r3, [r7, #7]
 800858c:	4613      	mov	r3, r2
 800858e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008590:	79fb      	ldrb	r3, [r7, #7]
 8008592:	2b23      	cmp	r3, #35	@ 0x23
 8008594:	d84a      	bhi.n	800862c <CDC_Control_FS+0xac>
 8008596:	a201      	add	r2, pc, #4	@ (adr r2, 800859c <CDC_Control_FS+0x1c>)
 8008598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800859c:	0800862d 	.word	0x0800862d
 80085a0:	0800862d 	.word	0x0800862d
 80085a4:	0800862d 	.word	0x0800862d
 80085a8:	0800862d 	.word	0x0800862d
 80085ac:	0800862d 	.word	0x0800862d
 80085b0:	0800862d 	.word	0x0800862d
 80085b4:	0800862d 	.word	0x0800862d
 80085b8:	0800862d 	.word	0x0800862d
 80085bc:	0800862d 	.word	0x0800862d
 80085c0:	0800862d 	.word	0x0800862d
 80085c4:	0800862d 	.word	0x0800862d
 80085c8:	0800862d 	.word	0x0800862d
 80085cc:	0800862d 	.word	0x0800862d
 80085d0:	0800862d 	.word	0x0800862d
 80085d4:	0800862d 	.word	0x0800862d
 80085d8:	0800862d 	.word	0x0800862d
 80085dc:	0800862d 	.word	0x0800862d
 80085e0:	0800862d 	.word	0x0800862d
 80085e4:	0800862d 	.word	0x0800862d
 80085e8:	0800862d 	.word	0x0800862d
 80085ec:	0800862d 	.word	0x0800862d
 80085f0:	0800862d 	.word	0x0800862d
 80085f4:	0800862d 	.word	0x0800862d
 80085f8:	0800862d 	.word	0x0800862d
 80085fc:	0800862d 	.word	0x0800862d
 8008600:	0800862d 	.word	0x0800862d
 8008604:	0800862d 	.word	0x0800862d
 8008608:	0800862d 	.word	0x0800862d
 800860c:	0800862d 	.word	0x0800862d
 8008610:	0800862d 	.word	0x0800862d
 8008614:	0800862d 	.word	0x0800862d
 8008618:	0800862d 	.word	0x0800862d
 800861c:	0800862d 	.word	0x0800862d
 8008620:	0800862d 	.word	0x0800862d
 8008624:	0800862d 	.word	0x0800862d
 8008628:	0800862d 	.word	0x0800862d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800862c:	bf00      	nop
  }

  return (USBD_OK);
 800862e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008630:	4618      	mov	r0, r3
 8008632:	370c      	adds	r7, #12
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr

0800863c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b082      	sub	sp, #8
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008646:	6879      	ldr	r1, [r7, #4]
 8008648:	4805      	ldr	r0, [pc, #20]	@ (8008660 <CDC_Receive_FS+0x24>)
 800864a:	f7fe fbc3 	bl	8006dd4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800864e:	4804      	ldr	r0, [pc, #16]	@ (8008660 <CDC_Receive_FS+0x24>)
 8008650:	f7fe fc24 	bl	8006e9c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008654:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008656:	4618      	mov	r0, r3
 8008658:	3708      	adds	r7, #8
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop
 8008660:	200002f0 	.word	0x200002f0

08008664 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b084      	sub	sp, #16
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	460b      	mov	r3, r1
 800866e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008670:	2300      	movs	r3, #0
 8008672:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008674:	4b0d      	ldr	r3, [pc, #52]	@ (80086ac <CDC_Transmit_FS+0x48>)
 8008676:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800867a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008682:	2b00      	cmp	r3, #0
 8008684:	d001      	beq.n	800868a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008686:	2301      	movs	r3, #1
 8008688:	e00b      	b.n	80086a2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800868a:	887b      	ldrh	r3, [r7, #2]
 800868c:	461a      	mov	r2, r3
 800868e:	6879      	ldr	r1, [r7, #4]
 8008690:	4806      	ldr	r0, [pc, #24]	@ (80086ac <CDC_Transmit_FS+0x48>)
 8008692:	f7fe fb7d 	bl	8006d90 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008696:	4805      	ldr	r0, [pc, #20]	@ (80086ac <CDC_Transmit_FS+0x48>)
 8008698:	f7fe fbba 	bl	8006e10 <USBD_CDC_TransmitPacket>
 800869c:	4603      	mov	r3, r0
 800869e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80086a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3710      	adds	r7, #16
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop
 80086ac:	200002f0 	.word	0x200002f0

080086b0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b087      	sub	sp, #28
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	60b9      	str	r1, [r7, #8]
 80086ba:	4613      	mov	r3, r2
 80086bc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80086be:	2300      	movs	r3, #0
 80086c0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80086c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	371c      	adds	r7, #28
 80086ca:	46bd      	mov	sp, r7
 80086cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d0:	4770      	bx	lr
	...

080086d4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b083      	sub	sp, #12
 80086d8:	af00      	add	r7, sp, #0
 80086da:	4603      	mov	r3, r0
 80086dc:	6039      	str	r1, [r7, #0]
 80086de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	2212      	movs	r2, #18
 80086e4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80086e6:	4b03      	ldr	r3, [pc, #12]	@ (80086f4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	370c      	adds	r7, #12
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr
 80086f4:	200000c8 	.word	0x200000c8

080086f8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b083      	sub	sp, #12
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	4603      	mov	r3, r0
 8008700:	6039      	str	r1, [r7, #0]
 8008702:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	2204      	movs	r2, #4
 8008708:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800870a:	4b03      	ldr	r3, [pc, #12]	@ (8008718 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800870c:	4618      	mov	r0, r3
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr
 8008718:	200000dc 	.word	0x200000dc

0800871c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b082      	sub	sp, #8
 8008720:	af00      	add	r7, sp, #0
 8008722:	4603      	mov	r3, r0
 8008724:	6039      	str	r1, [r7, #0]
 8008726:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008728:	79fb      	ldrb	r3, [r7, #7]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d105      	bne.n	800873a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800872e:	683a      	ldr	r2, [r7, #0]
 8008730:	4907      	ldr	r1, [pc, #28]	@ (8008750 <USBD_FS_ProductStrDescriptor+0x34>)
 8008732:	4808      	ldr	r0, [pc, #32]	@ (8008754 <USBD_FS_ProductStrDescriptor+0x38>)
 8008734:	f7ff fdf8 	bl	8008328 <USBD_GetString>
 8008738:	e004      	b.n	8008744 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800873a:	683a      	ldr	r2, [r7, #0]
 800873c:	4904      	ldr	r1, [pc, #16]	@ (8008750 <USBD_FS_ProductStrDescriptor+0x34>)
 800873e:	4805      	ldr	r0, [pc, #20]	@ (8008754 <USBD_FS_ProductStrDescriptor+0x38>)
 8008740:	f7ff fdf2 	bl	8008328 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008744:	4b02      	ldr	r3, [pc, #8]	@ (8008750 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008746:	4618      	mov	r0, r3
 8008748:	3708      	adds	r7, #8
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
 800874e:	bf00      	nop
 8008750:	200015cc 	.word	0x200015cc
 8008754:	08009974 	.word	0x08009974

08008758 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b082      	sub	sp, #8
 800875c:	af00      	add	r7, sp, #0
 800875e:	4603      	mov	r3, r0
 8008760:	6039      	str	r1, [r7, #0]
 8008762:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008764:	683a      	ldr	r2, [r7, #0]
 8008766:	4904      	ldr	r1, [pc, #16]	@ (8008778 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008768:	4804      	ldr	r0, [pc, #16]	@ (800877c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800876a:	f7ff fddd 	bl	8008328 <USBD_GetString>
  return USBD_StrDesc;
 800876e:	4b02      	ldr	r3, [pc, #8]	@ (8008778 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008770:	4618      	mov	r0, r3
 8008772:	3708      	adds	r7, #8
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}
 8008778:	200015cc 	.word	0x200015cc
 800877c:	0800998c 	.word	0x0800998c

08008780 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b082      	sub	sp, #8
 8008784:	af00      	add	r7, sp, #0
 8008786:	4603      	mov	r3, r0
 8008788:	6039      	str	r1, [r7, #0]
 800878a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	221a      	movs	r2, #26
 8008790:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008792:	f000 f843 	bl	800881c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008796:	4b02      	ldr	r3, [pc, #8]	@ (80087a0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008798:	4618      	mov	r0, r3
 800879a:	3708      	adds	r7, #8
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}
 80087a0:	200000e0 	.word	0x200000e0

080087a4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b082      	sub	sp, #8
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	4603      	mov	r3, r0
 80087ac:	6039      	str	r1, [r7, #0]
 80087ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80087b0:	79fb      	ldrb	r3, [r7, #7]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d105      	bne.n	80087c2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80087b6:	683a      	ldr	r2, [r7, #0]
 80087b8:	4907      	ldr	r1, [pc, #28]	@ (80087d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80087ba:	4808      	ldr	r0, [pc, #32]	@ (80087dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80087bc:	f7ff fdb4 	bl	8008328 <USBD_GetString>
 80087c0:	e004      	b.n	80087cc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80087c2:	683a      	ldr	r2, [r7, #0]
 80087c4:	4904      	ldr	r1, [pc, #16]	@ (80087d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80087c6:	4805      	ldr	r0, [pc, #20]	@ (80087dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80087c8:	f7ff fdae 	bl	8008328 <USBD_GetString>
  }
  return USBD_StrDesc;
 80087cc:	4b02      	ldr	r3, [pc, #8]	@ (80087d8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3708      	adds	r7, #8
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	200015cc 	.word	0x200015cc
 80087dc:	080099a0 	.word	0x080099a0

080087e0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b082      	sub	sp, #8
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	4603      	mov	r3, r0
 80087e8:	6039      	str	r1, [r7, #0]
 80087ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80087ec:	79fb      	ldrb	r3, [r7, #7]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d105      	bne.n	80087fe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80087f2:	683a      	ldr	r2, [r7, #0]
 80087f4:	4907      	ldr	r1, [pc, #28]	@ (8008814 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80087f6:	4808      	ldr	r0, [pc, #32]	@ (8008818 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80087f8:	f7ff fd96 	bl	8008328 <USBD_GetString>
 80087fc:	e004      	b.n	8008808 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80087fe:	683a      	ldr	r2, [r7, #0]
 8008800:	4904      	ldr	r1, [pc, #16]	@ (8008814 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008802:	4805      	ldr	r0, [pc, #20]	@ (8008818 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008804:	f7ff fd90 	bl	8008328 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008808:	4b02      	ldr	r3, [pc, #8]	@ (8008814 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800880a:	4618      	mov	r0, r3
 800880c:	3708      	adds	r7, #8
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
 8008812:	bf00      	nop
 8008814:	200015cc 	.word	0x200015cc
 8008818:	080099ac 	.word	0x080099ac

0800881c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b084      	sub	sp, #16
 8008820:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008822:	4b0f      	ldr	r3, [pc, #60]	@ (8008860 <Get_SerialNum+0x44>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008828:	4b0e      	ldr	r3, [pc, #56]	@ (8008864 <Get_SerialNum+0x48>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800882e:	4b0e      	ldr	r3, [pc, #56]	@ (8008868 <Get_SerialNum+0x4c>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008834:	68fa      	ldr	r2, [r7, #12]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	4413      	add	r3, r2
 800883a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d009      	beq.n	8008856 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008842:	2208      	movs	r2, #8
 8008844:	4909      	ldr	r1, [pc, #36]	@ (800886c <Get_SerialNum+0x50>)
 8008846:	68f8      	ldr	r0, [r7, #12]
 8008848:	f000 f814 	bl	8008874 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800884c:	2204      	movs	r2, #4
 800884e:	4908      	ldr	r1, [pc, #32]	@ (8008870 <Get_SerialNum+0x54>)
 8008850:	68b8      	ldr	r0, [r7, #8]
 8008852:	f000 f80f 	bl	8008874 <IntToUnicode>
  }
}
 8008856:	bf00      	nop
 8008858:	3710      	adds	r7, #16
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}
 800885e:	bf00      	nop
 8008860:	1fff7a10 	.word	0x1fff7a10
 8008864:	1fff7a14 	.word	0x1fff7a14
 8008868:	1fff7a18 	.word	0x1fff7a18
 800886c:	200000e2 	.word	0x200000e2
 8008870:	200000f2 	.word	0x200000f2

08008874 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008874:	b480      	push	{r7}
 8008876:	b087      	sub	sp, #28
 8008878:	af00      	add	r7, sp, #0
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	60b9      	str	r1, [r7, #8]
 800887e:	4613      	mov	r3, r2
 8008880:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008882:	2300      	movs	r3, #0
 8008884:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008886:	2300      	movs	r3, #0
 8008888:	75fb      	strb	r3, [r7, #23]
 800888a:	e027      	b.n	80088dc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	0f1b      	lsrs	r3, r3, #28
 8008890:	2b09      	cmp	r3, #9
 8008892:	d80b      	bhi.n	80088ac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	0f1b      	lsrs	r3, r3, #28
 8008898:	b2da      	uxtb	r2, r3
 800889a:	7dfb      	ldrb	r3, [r7, #23]
 800889c:	005b      	lsls	r3, r3, #1
 800889e:	4619      	mov	r1, r3
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	440b      	add	r3, r1
 80088a4:	3230      	adds	r2, #48	@ 0x30
 80088a6:	b2d2      	uxtb	r2, r2
 80088a8:	701a      	strb	r2, [r3, #0]
 80088aa:	e00a      	b.n	80088c2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	0f1b      	lsrs	r3, r3, #28
 80088b0:	b2da      	uxtb	r2, r3
 80088b2:	7dfb      	ldrb	r3, [r7, #23]
 80088b4:	005b      	lsls	r3, r3, #1
 80088b6:	4619      	mov	r1, r3
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	440b      	add	r3, r1
 80088bc:	3237      	adds	r2, #55	@ 0x37
 80088be:	b2d2      	uxtb	r2, r2
 80088c0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	011b      	lsls	r3, r3, #4
 80088c6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80088c8:	7dfb      	ldrb	r3, [r7, #23]
 80088ca:	005b      	lsls	r3, r3, #1
 80088cc:	3301      	adds	r3, #1
 80088ce:	68ba      	ldr	r2, [r7, #8]
 80088d0:	4413      	add	r3, r2
 80088d2:	2200      	movs	r2, #0
 80088d4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80088d6:	7dfb      	ldrb	r3, [r7, #23]
 80088d8:	3301      	adds	r3, #1
 80088da:	75fb      	strb	r3, [r7, #23]
 80088dc:	7dfa      	ldrb	r2, [r7, #23]
 80088de:	79fb      	ldrb	r3, [r7, #7]
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d3d3      	bcc.n	800888c <IntToUnicode+0x18>
  }
}
 80088e4:	bf00      	nop
 80088e6:	bf00      	nop
 80088e8:	371c      	adds	r7, #28
 80088ea:	46bd      	mov	sp, r7
 80088ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f0:	4770      	bx	lr
	...

080088f4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b08a      	sub	sp, #40	@ 0x28
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088fc:	f107 0314 	add.w	r3, r7, #20
 8008900:	2200      	movs	r2, #0
 8008902:	601a      	str	r2, [r3, #0]
 8008904:	605a      	str	r2, [r3, #4]
 8008906:	609a      	str	r2, [r3, #8]
 8008908:	60da      	str	r2, [r3, #12]
 800890a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008914:	d147      	bne.n	80089a6 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008916:	2300      	movs	r3, #0
 8008918:	613b      	str	r3, [r7, #16]
 800891a:	4b25      	ldr	r3, [pc, #148]	@ (80089b0 <HAL_PCD_MspInit+0xbc>)
 800891c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800891e:	4a24      	ldr	r2, [pc, #144]	@ (80089b0 <HAL_PCD_MspInit+0xbc>)
 8008920:	f043 0301 	orr.w	r3, r3, #1
 8008924:	6313      	str	r3, [r2, #48]	@ 0x30
 8008926:	4b22      	ldr	r3, [pc, #136]	@ (80089b0 <HAL_PCD_MspInit+0xbc>)
 8008928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800892a:	f003 0301 	and.w	r3, r3, #1
 800892e:	613b      	str	r3, [r7, #16]
 8008930:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008932:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008936:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008938:	2300      	movs	r3, #0
 800893a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800893c:	2300      	movs	r3, #0
 800893e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008940:	f107 0314 	add.w	r3, r7, #20
 8008944:	4619      	mov	r1, r3
 8008946:	481b      	ldr	r0, [pc, #108]	@ (80089b4 <HAL_PCD_MspInit+0xc0>)
 8008948:	f7fa f900 	bl	8002b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800894c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8008950:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008952:	2302      	movs	r3, #2
 8008954:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008956:	2300      	movs	r3, #0
 8008958:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800895a:	2300      	movs	r3, #0
 800895c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800895e:	230a      	movs	r3, #10
 8008960:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008962:	f107 0314 	add.w	r3, r7, #20
 8008966:	4619      	mov	r1, r3
 8008968:	4812      	ldr	r0, [pc, #72]	@ (80089b4 <HAL_PCD_MspInit+0xc0>)
 800896a:	f7fa f8ef 	bl	8002b4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800896e:	4b10      	ldr	r3, [pc, #64]	@ (80089b0 <HAL_PCD_MspInit+0xbc>)
 8008970:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008972:	4a0f      	ldr	r2, [pc, #60]	@ (80089b0 <HAL_PCD_MspInit+0xbc>)
 8008974:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008978:	6353      	str	r3, [r2, #52]	@ 0x34
 800897a:	2300      	movs	r3, #0
 800897c:	60fb      	str	r3, [r7, #12]
 800897e:	4b0c      	ldr	r3, [pc, #48]	@ (80089b0 <HAL_PCD_MspInit+0xbc>)
 8008980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008982:	4a0b      	ldr	r2, [pc, #44]	@ (80089b0 <HAL_PCD_MspInit+0xbc>)
 8008984:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008988:	6453      	str	r3, [r2, #68]	@ 0x44
 800898a:	4b09      	ldr	r3, [pc, #36]	@ (80089b0 <HAL_PCD_MspInit+0xbc>)
 800898c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800898e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008992:	60fb      	str	r3, [r7, #12]
 8008994:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008996:	2200      	movs	r2, #0
 8008998:	2100      	movs	r1, #0
 800899a:	2043      	movs	r0, #67	@ 0x43
 800899c:	f7f9 ffb7 	bl	800290e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80089a0:	2043      	movs	r0, #67	@ 0x43
 80089a2:	f7f9 ffd0 	bl	8002946 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80089a6:	bf00      	nop
 80089a8:	3728      	adds	r7, #40	@ 0x28
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}
 80089ae:	bf00      	nop
 80089b0:	40023800 	.word	0x40023800
 80089b4:	40020000 	.word	0x40020000

080089b8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80089cc:	4619      	mov	r1, r3
 80089ce:	4610      	mov	r0, r2
 80089d0:	f7fe fb4d 	bl	800706e <USBD_LL_SetupStage>
}
 80089d4:	bf00      	nop
 80089d6:	3708      	adds	r7, #8
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b082      	sub	sp, #8
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	460b      	mov	r3, r1
 80089e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 80089ee:	78fa      	ldrb	r2, [r7, #3]
 80089f0:	6879      	ldr	r1, [r7, #4]
 80089f2:	4613      	mov	r3, r2
 80089f4:	00db      	lsls	r3, r3, #3
 80089f6:	4413      	add	r3, r2
 80089f8:	009b      	lsls	r3, r3, #2
 80089fa:	440b      	add	r3, r1
 80089fc:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8008a00:	681a      	ldr	r2, [r3, #0]
 8008a02:	78fb      	ldrb	r3, [r7, #3]
 8008a04:	4619      	mov	r1, r3
 8008a06:	f7fe fb87 	bl	8007118 <USBD_LL_DataOutStage>
}
 8008a0a:	bf00      	nop
 8008a0c:	3708      	adds	r7, #8
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}

08008a12 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a12:	b580      	push	{r7, lr}
 8008a14:	b082      	sub	sp, #8
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	6078      	str	r0, [r7, #4]
 8008a1a:	460b      	mov	r3, r1
 8008a1c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 8008a24:	78fa      	ldrb	r2, [r7, #3]
 8008a26:	6879      	ldr	r1, [r7, #4]
 8008a28:	4613      	mov	r3, r2
 8008a2a:	00db      	lsls	r3, r3, #3
 8008a2c:	4413      	add	r3, r2
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	440b      	add	r3, r1
 8008a32:	334c      	adds	r3, #76	@ 0x4c
 8008a34:	681a      	ldr	r2, [r3, #0]
 8008a36:	78fb      	ldrb	r3, [r7, #3]
 8008a38:	4619      	mov	r1, r3
 8008a3a:	f7fe fc20 	bl	800727e <USBD_LL_DataInStage>
}
 8008a3e:	bf00      	nop
 8008a40:	3708      	adds	r7, #8
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}

08008a46 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a46:	b580      	push	{r7, lr}
 8008a48:	b082      	sub	sp, #8
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008a54:	4618      	mov	r0, r3
 8008a56:	f7fe fd54 	bl	8007502 <USBD_LL_SOF>
}
 8008a5a:	bf00      	nop
 8008a5c:	3708      	adds	r7, #8
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}

08008a62 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a62:	b580      	push	{r7, lr}
 8008a64:	b084      	sub	sp, #16
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	68db      	ldr	r3, [r3, #12]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d102      	bne.n	8008a7c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008a76:	2300      	movs	r3, #0
 8008a78:	73fb      	strb	r3, [r7, #15]
 8008a7a:	e008      	b.n	8008a8e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	68db      	ldr	r3, [r3, #12]
 8008a80:	2b02      	cmp	r3, #2
 8008a82:	d102      	bne.n	8008a8a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008a84:	2301      	movs	r3, #1
 8008a86:	73fb      	strb	r3, [r7, #15]
 8008a88:	e001      	b.n	8008a8e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008a8a:	f7f8 fe61 	bl	8001750 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008a94:	7bfa      	ldrb	r2, [r7, #15]
 8008a96:	4611      	mov	r1, r2
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f7fe fcf4 	bl	8007486 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f7fe fc9c 	bl	80073e2 <USBD_LL_Reset>
}
 8008aaa:	bf00      	nop
 8008aac:	3710      	adds	r7, #16
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
	...

08008ab4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b082      	sub	sp, #8
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f7fe fcef 	bl	80074a6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	687a      	ldr	r2, [r7, #4]
 8008ad4:	6812      	ldr	r2, [r2, #0]
 8008ad6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008ada:	f043 0301 	orr.w	r3, r3, #1
 8008ade:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6a1b      	ldr	r3, [r3, #32]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d005      	beq.n	8008af4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008ae8:	4b04      	ldr	r3, [pc, #16]	@ (8008afc <HAL_PCD_SuspendCallback+0x48>)
 8008aea:	691b      	ldr	r3, [r3, #16]
 8008aec:	4a03      	ldr	r2, [pc, #12]	@ (8008afc <HAL_PCD_SuspendCallback+0x48>)
 8008aee:	f043 0306 	orr.w	r3, r3, #6
 8008af2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008af4:	bf00      	nop
 8008af6:	3708      	adds	r7, #8
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}
 8008afc:	e000ed00 	.word	0xe000ed00

08008b00 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b082      	sub	sp, #8
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7fe fcdf 	bl	80074d2 <USBD_LL_Resume>
}
 8008b14:	bf00      	nop
 8008b16:	3708      	adds	r7, #8
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}

08008b1c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b082      	sub	sp, #8
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	460b      	mov	r3, r1
 8008b26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008b2e:	78fa      	ldrb	r2, [r7, #3]
 8008b30:	4611      	mov	r1, r2
 8008b32:	4618      	mov	r0, r3
 8008b34:	f7fe fd37 	bl	80075a6 <USBD_LL_IsoOUTIncomplete>
}
 8008b38:	bf00      	nop
 8008b3a:	3708      	adds	r7, #8
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}

08008b40 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b082      	sub	sp, #8
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	460b      	mov	r3, r1
 8008b4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008b52:	78fa      	ldrb	r2, [r7, #3]
 8008b54:	4611      	mov	r1, r2
 8008b56:	4618      	mov	r0, r3
 8008b58:	f7fe fcf3 	bl	8007542 <USBD_LL_IsoINIncomplete>
}
 8008b5c:	bf00      	nop
 8008b5e:	3708      	adds	r7, #8
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b082      	sub	sp, #8
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008b72:	4618      	mov	r0, r3
 8008b74:	f7fe fd49 	bl	800760a <USBD_LL_DevConnected>
}
 8008b78:	bf00      	nop
 8008b7a:	3708      	adds	r7, #8
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}

08008b80 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b082      	sub	sp, #8
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f7fe fd46 	bl	8007620 <USBD_LL_DevDisconnected>
}
 8008b94:	bf00      	nop
 8008b96:	3708      	adds	r7, #8
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b082      	sub	sp, #8
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	781b      	ldrb	r3, [r3, #0]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d13c      	bne.n	8008c26 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008bac:	4a20      	ldr	r2, [pc, #128]	@ (8008c30 <USBD_LL_Init+0x94>)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	4a1e      	ldr	r2, [pc, #120]	@ (8008c30 <USBD_LL_Init+0x94>)
 8008bb8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008bbc:	4b1c      	ldr	r3, [pc, #112]	@ (8008c30 <USBD_LL_Init+0x94>)
 8008bbe:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008bc2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008bc4:	4b1a      	ldr	r3, [pc, #104]	@ (8008c30 <USBD_LL_Init+0x94>)
 8008bc6:	2204      	movs	r2, #4
 8008bc8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008bca:	4b19      	ldr	r3, [pc, #100]	@ (8008c30 <USBD_LL_Init+0x94>)
 8008bcc:	2202      	movs	r2, #2
 8008bce:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008bd0:	4b17      	ldr	r3, [pc, #92]	@ (8008c30 <USBD_LL_Init+0x94>)
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008bd6:	4b16      	ldr	r3, [pc, #88]	@ (8008c30 <USBD_LL_Init+0x94>)
 8008bd8:	2202      	movs	r2, #2
 8008bda:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008bdc:	4b14      	ldr	r3, [pc, #80]	@ (8008c30 <USBD_LL_Init+0x94>)
 8008bde:	2200      	movs	r2, #0
 8008be0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008be2:	4b13      	ldr	r3, [pc, #76]	@ (8008c30 <USBD_LL_Init+0x94>)
 8008be4:	2200      	movs	r2, #0
 8008be6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008be8:	4b11      	ldr	r3, [pc, #68]	@ (8008c30 <USBD_LL_Init+0x94>)
 8008bea:	2200      	movs	r2, #0
 8008bec:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8008bee:	4b10      	ldr	r3, [pc, #64]	@ (8008c30 <USBD_LL_Init+0x94>)
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008bf4:	4b0e      	ldr	r3, [pc, #56]	@ (8008c30 <USBD_LL_Init+0x94>)
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008bfa:	480d      	ldr	r0, [pc, #52]	@ (8008c30 <USBD_LL_Init+0x94>)
 8008bfc:	f7fa f973 	bl	8002ee6 <HAL_PCD_Init>
 8008c00:	4603      	mov	r3, r0
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d001      	beq.n	8008c0a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008c06:	f7f8 fda3 	bl	8001750 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008c0a:	2180      	movs	r1, #128	@ 0x80
 8008c0c:	4808      	ldr	r0, [pc, #32]	@ (8008c30 <USBD_LL_Init+0x94>)
 8008c0e:	f7fb fbca 	bl	80043a6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008c12:	2240      	movs	r2, #64	@ 0x40
 8008c14:	2100      	movs	r1, #0
 8008c16:	4806      	ldr	r0, [pc, #24]	@ (8008c30 <USBD_LL_Init+0x94>)
 8008c18:	f7fb fb7e 	bl	8004318 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008c1c:	2280      	movs	r2, #128	@ 0x80
 8008c1e:	2101      	movs	r1, #1
 8008c20:	4803      	ldr	r0, [pc, #12]	@ (8008c30 <USBD_LL_Init+0x94>)
 8008c22:	f7fb fb79 	bl	8004318 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008c26:	2300      	movs	r3, #0
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3708      	adds	r7, #8
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}
 8008c30:	200017cc 	.word	0x200017cc

08008c34 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b084      	sub	sp, #16
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c40:	2300      	movs	r3, #0
 8008c42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f7fa fa68 	bl	8003120 <HAL_PCD_Start>
 8008c50:	4603      	mov	r3, r0
 8008c52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c54:	7bfb      	ldrb	r3, [r7, #15]
 8008c56:	4618      	mov	r0, r3
 8008c58:	f000 f942 	bl	8008ee0 <USBD_Get_USB_Status>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c60:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3710      	adds	r7, #16
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}

08008c6a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008c6a:	b580      	push	{r7, lr}
 8008c6c:	b084      	sub	sp, #16
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	6078      	str	r0, [r7, #4]
 8008c72:	4608      	mov	r0, r1
 8008c74:	4611      	mov	r1, r2
 8008c76:	461a      	mov	r2, r3
 8008c78:	4603      	mov	r3, r0
 8008c7a:	70fb      	strb	r3, [r7, #3]
 8008c7c:	460b      	mov	r3, r1
 8008c7e:	70bb      	strb	r3, [r7, #2]
 8008c80:	4613      	mov	r3, r2
 8008c82:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c84:	2300      	movs	r3, #0
 8008c86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008c92:	78bb      	ldrb	r3, [r7, #2]
 8008c94:	883a      	ldrh	r2, [r7, #0]
 8008c96:	78f9      	ldrb	r1, [r7, #3]
 8008c98:	f7fa ff39 	bl	8003b0e <HAL_PCD_EP_Open>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ca0:	7bfb      	ldrb	r3, [r7, #15]
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f000 f91c 	bl	8008ee0 <USBD_Get_USB_Status>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cac:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3710      	adds	r7, #16
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}

08008cb6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cb6:	b580      	push	{r7, lr}
 8008cb8:	b084      	sub	sp, #16
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
 8008cbe:	460b      	mov	r3, r1
 8008cc0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008cd0:	78fa      	ldrb	r2, [r7, #3]
 8008cd2:	4611      	mov	r1, r2
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f7fa ff82 	bl	8003bde <HAL_PCD_EP_Close>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cde:	7bfb      	ldrb	r3, [r7, #15]
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f000 f8fd 	bl	8008ee0 <USBD_Get_USB_Status>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cea:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3710      	adds	r7, #16
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b084      	sub	sp, #16
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	460b      	mov	r3, r1
 8008cfe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d00:	2300      	movs	r3, #0
 8008d02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d04:	2300      	movs	r3, #0
 8008d06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008d0e:	78fa      	ldrb	r2, [r7, #3]
 8008d10:	4611      	mov	r1, r2
 8008d12:	4618      	mov	r0, r3
 8008d14:	f7fb f85a 	bl	8003dcc <HAL_PCD_EP_SetStall>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d1c:	7bfb      	ldrb	r3, [r7, #15]
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f000 f8de 	bl	8008ee0 <USBD_Get_USB_Status>
 8008d24:	4603      	mov	r3, r0
 8008d26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d28:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3710      	adds	r7, #16
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}

08008d32 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d32:	b580      	push	{r7, lr}
 8008d34:	b084      	sub	sp, #16
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	6078      	str	r0, [r7, #4]
 8008d3a:	460b      	mov	r3, r1
 8008d3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d42:	2300      	movs	r3, #0
 8008d44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008d4c:	78fa      	ldrb	r2, [r7, #3]
 8008d4e:	4611      	mov	r1, r2
 8008d50:	4618      	mov	r0, r3
 8008d52:	f7fb f89f 	bl	8003e94 <HAL_PCD_EP_ClrStall>
 8008d56:	4603      	mov	r3, r0
 8008d58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d5a:	7bfb      	ldrb	r3, [r7, #15]
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f000 f8bf 	bl	8008ee0 <USBD_Get_USB_Status>
 8008d62:	4603      	mov	r3, r0
 8008d64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d66:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3710      	adds	r7, #16
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}

08008d70 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b085      	sub	sp, #20
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	460b      	mov	r3, r1
 8008d7a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008d82:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008d84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	da0b      	bge.n	8008da4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008d8c:	78fb      	ldrb	r3, [r7, #3]
 8008d8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008d92:	68f9      	ldr	r1, [r7, #12]
 8008d94:	4613      	mov	r3, r2
 8008d96:	00db      	lsls	r3, r3, #3
 8008d98:	4413      	add	r3, r2
 8008d9a:	009b      	lsls	r3, r3, #2
 8008d9c:	440b      	add	r3, r1
 8008d9e:	333e      	adds	r3, #62	@ 0x3e
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	e00b      	b.n	8008dbc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008da4:	78fb      	ldrb	r3, [r7, #3]
 8008da6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008daa:	68f9      	ldr	r1, [r7, #12]
 8008dac:	4613      	mov	r3, r2
 8008dae:	00db      	lsls	r3, r3, #3
 8008db0:	4413      	add	r3, r2
 8008db2:	009b      	lsls	r3, r3, #2
 8008db4:	440b      	add	r3, r1
 8008db6:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 8008dba:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3714      	adds	r7, #20
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr

08008dc8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b084      	sub	sp, #16
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	460b      	mov	r3, r1
 8008dd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008de2:	78fa      	ldrb	r2, [r7, #3]
 8008de4:	4611      	mov	r1, r2
 8008de6:	4618      	mov	r0, r3
 8008de8:	f7fa fe6c 	bl	8003ac4 <HAL_PCD_SetAddress>
 8008dec:	4603      	mov	r3, r0
 8008dee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008df0:	7bfb      	ldrb	r3, [r7, #15]
 8008df2:	4618      	mov	r0, r3
 8008df4:	f000 f874 	bl	8008ee0 <USBD_Get_USB_Status>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dfc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3710      	adds	r7, #16
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}

08008e06 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008e06:	b580      	push	{r7, lr}
 8008e08:	b086      	sub	sp, #24
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	60f8      	str	r0, [r7, #12]
 8008e0e:	607a      	str	r2, [r7, #4]
 8008e10:	603b      	str	r3, [r7, #0]
 8008e12:	460b      	mov	r3, r1
 8008e14:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e16:	2300      	movs	r3, #0
 8008e18:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008e24:	7af9      	ldrb	r1, [r7, #11]
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	687a      	ldr	r2, [r7, #4]
 8008e2a:	f7fa ff85 	bl	8003d38 <HAL_PCD_EP_Transmit>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e32:	7dfb      	ldrb	r3, [r7, #23]
 8008e34:	4618      	mov	r0, r3
 8008e36:	f000 f853 	bl	8008ee0 <USBD_Get_USB_Status>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008e3e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3718      	adds	r7, #24
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b086      	sub	sp, #24
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	60f8      	str	r0, [r7, #12]
 8008e50:	607a      	str	r2, [r7, #4]
 8008e52:	603b      	str	r3, [r7, #0]
 8008e54:	460b      	mov	r3, r1
 8008e56:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008e66:	7af9      	ldrb	r1, [r7, #11]
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	687a      	ldr	r2, [r7, #4]
 8008e6c:	f7fa ff01 	bl	8003c72 <HAL_PCD_EP_Receive>
 8008e70:	4603      	mov	r3, r0
 8008e72:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e74:	7dfb      	ldrb	r3, [r7, #23]
 8008e76:	4618      	mov	r0, r3
 8008e78:	f000 f832 	bl	8008ee0 <USBD_Get_USB_Status>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008e80:	7dbb      	ldrb	r3, [r7, #22]
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3718      	adds	r7, #24
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}

08008e8a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e8a:	b580      	push	{r7, lr}
 8008e8c:	b082      	sub	sp, #8
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	6078      	str	r0, [r7, #4]
 8008e92:	460b      	mov	r3, r1
 8008e94:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008e9c:	78fa      	ldrb	r2, [r7, #3]
 8008e9e:	4611      	mov	r1, r2
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f7fa ff31 	bl	8003d08 <HAL_PCD_EP_GetRxCount>
 8008ea6:	4603      	mov	r3, r0
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3708      	adds	r7, #8
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b083      	sub	sp, #12
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008eb8:	4b03      	ldr	r3, [pc, #12]	@ (8008ec8 <USBD_static_malloc+0x18>)
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	370c      	adds	r7, #12
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec4:	4770      	bx	lr
 8008ec6:	bf00      	nop
 8008ec8:	20001cd8 	.word	0x20001cd8

08008ecc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b083      	sub	sp, #12
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]

}
 8008ed4:	bf00      	nop
 8008ed6:	370c      	adds	r7, #12
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr

08008ee0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b085      	sub	sp, #20
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008eea:	2300      	movs	r3, #0
 8008eec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008eee:	79fb      	ldrb	r3, [r7, #7]
 8008ef0:	2b03      	cmp	r3, #3
 8008ef2:	d817      	bhi.n	8008f24 <USBD_Get_USB_Status+0x44>
 8008ef4:	a201      	add	r2, pc, #4	@ (adr r2, 8008efc <USBD_Get_USB_Status+0x1c>)
 8008ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008efa:	bf00      	nop
 8008efc:	08008f0d 	.word	0x08008f0d
 8008f00:	08008f13 	.word	0x08008f13
 8008f04:	08008f19 	.word	0x08008f19
 8008f08:	08008f1f 	.word	0x08008f1f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	73fb      	strb	r3, [r7, #15]
    break;
 8008f10:	e00b      	b.n	8008f2a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008f12:	2303      	movs	r3, #3
 8008f14:	73fb      	strb	r3, [r7, #15]
    break;
 8008f16:	e008      	b.n	8008f2a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008f18:	2301      	movs	r3, #1
 8008f1a:	73fb      	strb	r3, [r7, #15]
    break;
 8008f1c:	e005      	b.n	8008f2a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008f1e:	2303      	movs	r3, #3
 8008f20:	73fb      	strb	r3, [r7, #15]
    break;
 8008f22:	e002      	b.n	8008f2a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008f24:	2303      	movs	r3, #3
 8008f26:	73fb      	strb	r3, [r7, #15]
    break;
 8008f28:	bf00      	nop
  }
  return usb_status;
 8008f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3714      	adds	r7, #20
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr

08008f38 <siprintf>:
 8008f38:	b40e      	push	{r1, r2, r3}
 8008f3a:	b500      	push	{lr}
 8008f3c:	b09c      	sub	sp, #112	@ 0x70
 8008f3e:	ab1d      	add	r3, sp, #116	@ 0x74
 8008f40:	9002      	str	r0, [sp, #8]
 8008f42:	9006      	str	r0, [sp, #24]
 8008f44:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008f48:	4809      	ldr	r0, [pc, #36]	@ (8008f70 <siprintf+0x38>)
 8008f4a:	9107      	str	r1, [sp, #28]
 8008f4c:	9104      	str	r1, [sp, #16]
 8008f4e:	4909      	ldr	r1, [pc, #36]	@ (8008f74 <siprintf+0x3c>)
 8008f50:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f54:	9105      	str	r1, [sp, #20]
 8008f56:	6800      	ldr	r0, [r0, #0]
 8008f58:	9301      	str	r3, [sp, #4]
 8008f5a:	a902      	add	r1, sp, #8
 8008f5c:	f000 f994 	bl	8009288 <_svfiprintf_r>
 8008f60:	9b02      	ldr	r3, [sp, #8]
 8008f62:	2200      	movs	r2, #0
 8008f64:	701a      	strb	r2, [r3, #0]
 8008f66:	b01c      	add	sp, #112	@ 0x70
 8008f68:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f6c:	b003      	add	sp, #12
 8008f6e:	4770      	bx	lr
 8008f70:	200000fc 	.word	0x200000fc
 8008f74:	ffff0208 	.word	0xffff0208

08008f78 <memset>:
 8008f78:	4402      	add	r2, r0
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d100      	bne.n	8008f82 <memset+0xa>
 8008f80:	4770      	bx	lr
 8008f82:	f803 1b01 	strb.w	r1, [r3], #1
 8008f86:	e7f9      	b.n	8008f7c <memset+0x4>

08008f88 <__errno>:
 8008f88:	4b01      	ldr	r3, [pc, #4]	@ (8008f90 <__errno+0x8>)
 8008f8a:	6818      	ldr	r0, [r3, #0]
 8008f8c:	4770      	bx	lr
 8008f8e:	bf00      	nop
 8008f90:	200000fc 	.word	0x200000fc

08008f94 <__libc_init_array>:
 8008f94:	b570      	push	{r4, r5, r6, lr}
 8008f96:	4d0d      	ldr	r5, [pc, #52]	@ (8008fcc <__libc_init_array+0x38>)
 8008f98:	4c0d      	ldr	r4, [pc, #52]	@ (8008fd0 <__libc_init_array+0x3c>)
 8008f9a:	1b64      	subs	r4, r4, r5
 8008f9c:	10a4      	asrs	r4, r4, #2
 8008f9e:	2600      	movs	r6, #0
 8008fa0:	42a6      	cmp	r6, r4
 8008fa2:	d109      	bne.n	8008fb8 <__libc_init_array+0x24>
 8008fa4:	4d0b      	ldr	r5, [pc, #44]	@ (8008fd4 <__libc_init_array+0x40>)
 8008fa6:	4c0c      	ldr	r4, [pc, #48]	@ (8008fd8 <__libc_init_array+0x44>)
 8008fa8:	f000 fc66 	bl	8009878 <_init>
 8008fac:	1b64      	subs	r4, r4, r5
 8008fae:	10a4      	asrs	r4, r4, #2
 8008fb0:	2600      	movs	r6, #0
 8008fb2:	42a6      	cmp	r6, r4
 8008fb4:	d105      	bne.n	8008fc2 <__libc_init_array+0x2e>
 8008fb6:	bd70      	pop	{r4, r5, r6, pc}
 8008fb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fbc:	4798      	blx	r3
 8008fbe:	3601      	adds	r6, #1
 8008fc0:	e7ee      	b.n	8008fa0 <__libc_init_array+0xc>
 8008fc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fc6:	4798      	blx	r3
 8008fc8:	3601      	adds	r6, #1
 8008fca:	e7f2      	b.n	8008fb2 <__libc_init_array+0x1e>
 8008fcc:	08009a08 	.word	0x08009a08
 8008fd0:	08009a08 	.word	0x08009a08
 8008fd4:	08009a08 	.word	0x08009a08
 8008fd8:	08009a0c 	.word	0x08009a0c

08008fdc <__retarget_lock_acquire_recursive>:
 8008fdc:	4770      	bx	lr

08008fde <__retarget_lock_release_recursive>:
 8008fde:	4770      	bx	lr

08008fe0 <_free_r>:
 8008fe0:	b538      	push	{r3, r4, r5, lr}
 8008fe2:	4605      	mov	r5, r0
 8008fe4:	2900      	cmp	r1, #0
 8008fe6:	d041      	beq.n	800906c <_free_r+0x8c>
 8008fe8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fec:	1f0c      	subs	r4, r1, #4
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	bfb8      	it	lt
 8008ff2:	18e4      	addlt	r4, r4, r3
 8008ff4:	f000 f8e0 	bl	80091b8 <__malloc_lock>
 8008ff8:	4a1d      	ldr	r2, [pc, #116]	@ (8009070 <_free_r+0x90>)
 8008ffa:	6813      	ldr	r3, [r2, #0]
 8008ffc:	b933      	cbnz	r3, 800900c <_free_r+0x2c>
 8008ffe:	6063      	str	r3, [r4, #4]
 8009000:	6014      	str	r4, [r2, #0]
 8009002:	4628      	mov	r0, r5
 8009004:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009008:	f000 b8dc 	b.w	80091c4 <__malloc_unlock>
 800900c:	42a3      	cmp	r3, r4
 800900e:	d908      	bls.n	8009022 <_free_r+0x42>
 8009010:	6820      	ldr	r0, [r4, #0]
 8009012:	1821      	adds	r1, r4, r0
 8009014:	428b      	cmp	r3, r1
 8009016:	bf01      	itttt	eq
 8009018:	6819      	ldreq	r1, [r3, #0]
 800901a:	685b      	ldreq	r3, [r3, #4]
 800901c:	1809      	addeq	r1, r1, r0
 800901e:	6021      	streq	r1, [r4, #0]
 8009020:	e7ed      	b.n	8008ffe <_free_r+0x1e>
 8009022:	461a      	mov	r2, r3
 8009024:	685b      	ldr	r3, [r3, #4]
 8009026:	b10b      	cbz	r3, 800902c <_free_r+0x4c>
 8009028:	42a3      	cmp	r3, r4
 800902a:	d9fa      	bls.n	8009022 <_free_r+0x42>
 800902c:	6811      	ldr	r1, [r2, #0]
 800902e:	1850      	adds	r0, r2, r1
 8009030:	42a0      	cmp	r0, r4
 8009032:	d10b      	bne.n	800904c <_free_r+0x6c>
 8009034:	6820      	ldr	r0, [r4, #0]
 8009036:	4401      	add	r1, r0
 8009038:	1850      	adds	r0, r2, r1
 800903a:	4283      	cmp	r3, r0
 800903c:	6011      	str	r1, [r2, #0]
 800903e:	d1e0      	bne.n	8009002 <_free_r+0x22>
 8009040:	6818      	ldr	r0, [r3, #0]
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	6053      	str	r3, [r2, #4]
 8009046:	4408      	add	r0, r1
 8009048:	6010      	str	r0, [r2, #0]
 800904a:	e7da      	b.n	8009002 <_free_r+0x22>
 800904c:	d902      	bls.n	8009054 <_free_r+0x74>
 800904e:	230c      	movs	r3, #12
 8009050:	602b      	str	r3, [r5, #0]
 8009052:	e7d6      	b.n	8009002 <_free_r+0x22>
 8009054:	6820      	ldr	r0, [r4, #0]
 8009056:	1821      	adds	r1, r4, r0
 8009058:	428b      	cmp	r3, r1
 800905a:	bf04      	itt	eq
 800905c:	6819      	ldreq	r1, [r3, #0]
 800905e:	685b      	ldreq	r3, [r3, #4]
 8009060:	6063      	str	r3, [r4, #4]
 8009062:	bf04      	itt	eq
 8009064:	1809      	addeq	r1, r1, r0
 8009066:	6021      	streq	r1, [r4, #0]
 8009068:	6054      	str	r4, [r2, #4]
 800906a:	e7ca      	b.n	8009002 <_free_r+0x22>
 800906c:	bd38      	pop	{r3, r4, r5, pc}
 800906e:	bf00      	nop
 8009070:	2000203c 	.word	0x2000203c

08009074 <sbrk_aligned>:
 8009074:	b570      	push	{r4, r5, r6, lr}
 8009076:	4e0f      	ldr	r6, [pc, #60]	@ (80090b4 <sbrk_aligned+0x40>)
 8009078:	460c      	mov	r4, r1
 800907a:	6831      	ldr	r1, [r6, #0]
 800907c:	4605      	mov	r5, r0
 800907e:	b911      	cbnz	r1, 8009086 <sbrk_aligned+0x12>
 8009080:	f000 fba6 	bl	80097d0 <_sbrk_r>
 8009084:	6030      	str	r0, [r6, #0]
 8009086:	4621      	mov	r1, r4
 8009088:	4628      	mov	r0, r5
 800908a:	f000 fba1 	bl	80097d0 <_sbrk_r>
 800908e:	1c43      	adds	r3, r0, #1
 8009090:	d103      	bne.n	800909a <sbrk_aligned+0x26>
 8009092:	f04f 34ff 	mov.w	r4, #4294967295
 8009096:	4620      	mov	r0, r4
 8009098:	bd70      	pop	{r4, r5, r6, pc}
 800909a:	1cc4      	adds	r4, r0, #3
 800909c:	f024 0403 	bic.w	r4, r4, #3
 80090a0:	42a0      	cmp	r0, r4
 80090a2:	d0f8      	beq.n	8009096 <sbrk_aligned+0x22>
 80090a4:	1a21      	subs	r1, r4, r0
 80090a6:	4628      	mov	r0, r5
 80090a8:	f000 fb92 	bl	80097d0 <_sbrk_r>
 80090ac:	3001      	adds	r0, #1
 80090ae:	d1f2      	bne.n	8009096 <sbrk_aligned+0x22>
 80090b0:	e7ef      	b.n	8009092 <sbrk_aligned+0x1e>
 80090b2:	bf00      	nop
 80090b4:	20002038 	.word	0x20002038

080090b8 <_malloc_r>:
 80090b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090bc:	1ccd      	adds	r5, r1, #3
 80090be:	f025 0503 	bic.w	r5, r5, #3
 80090c2:	3508      	adds	r5, #8
 80090c4:	2d0c      	cmp	r5, #12
 80090c6:	bf38      	it	cc
 80090c8:	250c      	movcc	r5, #12
 80090ca:	2d00      	cmp	r5, #0
 80090cc:	4606      	mov	r6, r0
 80090ce:	db01      	blt.n	80090d4 <_malloc_r+0x1c>
 80090d0:	42a9      	cmp	r1, r5
 80090d2:	d904      	bls.n	80090de <_malloc_r+0x26>
 80090d4:	230c      	movs	r3, #12
 80090d6:	6033      	str	r3, [r6, #0]
 80090d8:	2000      	movs	r0, #0
 80090da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80091b4 <_malloc_r+0xfc>
 80090e2:	f000 f869 	bl	80091b8 <__malloc_lock>
 80090e6:	f8d8 3000 	ldr.w	r3, [r8]
 80090ea:	461c      	mov	r4, r3
 80090ec:	bb44      	cbnz	r4, 8009140 <_malloc_r+0x88>
 80090ee:	4629      	mov	r1, r5
 80090f0:	4630      	mov	r0, r6
 80090f2:	f7ff ffbf 	bl	8009074 <sbrk_aligned>
 80090f6:	1c43      	adds	r3, r0, #1
 80090f8:	4604      	mov	r4, r0
 80090fa:	d158      	bne.n	80091ae <_malloc_r+0xf6>
 80090fc:	f8d8 4000 	ldr.w	r4, [r8]
 8009100:	4627      	mov	r7, r4
 8009102:	2f00      	cmp	r7, #0
 8009104:	d143      	bne.n	800918e <_malloc_r+0xd6>
 8009106:	2c00      	cmp	r4, #0
 8009108:	d04b      	beq.n	80091a2 <_malloc_r+0xea>
 800910a:	6823      	ldr	r3, [r4, #0]
 800910c:	4639      	mov	r1, r7
 800910e:	4630      	mov	r0, r6
 8009110:	eb04 0903 	add.w	r9, r4, r3
 8009114:	f000 fb5c 	bl	80097d0 <_sbrk_r>
 8009118:	4581      	cmp	r9, r0
 800911a:	d142      	bne.n	80091a2 <_malloc_r+0xea>
 800911c:	6821      	ldr	r1, [r4, #0]
 800911e:	1a6d      	subs	r5, r5, r1
 8009120:	4629      	mov	r1, r5
 8009122:	4630      	mov	r0, r6
 8009124:	f7ff ffa6 	bl	8009074 <sbrk_aligned>
 8009128:	3001      	adds	r0, #1
 800912a:	d03a      	beq.n	80091a2 <_malloc_r+0xea>
 800912c:	6823      	ldr	r3, [r4, #0]
 800912e:	442b      	add	r3, r5
 8009130:	6023      	str	r3, [r4, #0]
 8009132:	f8d8 3000 	ldr.w	r3, [r8]
 8009136:	685a      	ldr	r2, [r3, #4]
 8009138:	bb62      	cbnz	r2, 8009194 <_malloc_r+0xdc>
 800913a:	f8c8 7000 	str.w	r7, [r8]
 800913e:	e00f      	b.n	8009160 <_malloc_r+0xa8>
 8009140:	6822      	ldr	r2, [r4, #0]
 8009142:	1b52      	subs	r2, r2, r5
 8009144:	d420      	bmi.n	8009188 <_malloc_r+0xd0>
 8009146:	2a0b      	cmp	r2, #11
 8009148:	d917      	bls.n	800917a <_malloc_r+0xc2>
 800914a:	1961      	adds	r1, r4, r5
 800914c:	42a3      	cmp	r3, r4
 800914e:	6025      	str	r5, [r4, #0]
 8009150:	bf18      	it	ne
 8009152:	6059      	strne	r1, [r3, #4]
 8009154:	6863      	ldr	r3, [r4, #4]
 8009156:	bf08      	it	eq
 8009158:	f8c8 1000 	streq.w	r1, [r8]
 800915c:	5162      	str	r2, [r4, r5]
 800915e:	604b      	str	r3, [r1, #4]
 8009160:	4630      	mov	r0, r6
 8009162:	f000 f82f 	bl	80091c4 <__malloc_unlock>
 8009166:	f104 000b 	add.w	r0, r4, #11
 800916a:	1d23      	adds	r3, r4, #4
 800916c:	f020 0007 	bic.w	r0, r0, #7
 8009170:	1ac2      	subs	r2, r0, r3
 8009172:	bf1c      	itt	ne
 8009174:	1a1b      	subne	r3, r3, r0
 8009176:	50a3      	strne	r3, [r4, r2]
 8009178:	e7af      	b.n	80090da <_malloc_r+0x22>
 800917a:	6862      	ldr	r2, [r4, #4]
 800917c:	42a3      	cmp	r3, r4
 800917e:	bf0c      	ite	eq
 8009180:	f8c8 2000 	streq.w	r2, [r8]
 8009184:	605a      	strne	r2, [r3, #4]
 8009186:	e7eb      	b.n	8009160 <_malloc_r+0xa8>
 8009188:	4623      	mov	r3, r4
 800918a:	6864      	ldr	r4, [r4, #4]
 800918c:	e7ae      	b.n	80090ec <_malloc_r+0x34>
 800918e:	463c      	mov	r4, r7
 8009190:	687f      	ldr	r7, [r7, #4]
 8009192:	e7b6      	b.n	8009102 <_malloc_r+0x4a>
 8009194:	461a      	mov	r2, r3
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	42a3      	cmp	r3, r4
 800919a:	d1fb      	bne.n	8009194 <_malloc_r+0xdc>
 800919c:	2300      	movs	r3, #0
 800919e:	6053      	str	r3, [r2, #4]
 80091a0:	e7de      	b.n	8009160 <_malloc_r+0xa8>
 80091a2:	230c      	movs	r3, #12
 80091a4:	6033      	str	r3, [r6, #0]
 80091a6:	4630      	mov	r0, r6
 80091a8:	f000 f80c 	bl	80091c4 <__malloc_unlock>
 80091ac:	e794      	b.n	80090d8 <_malloc_r+0x20>
 80091ae:	6005      	str	r5, [r0, #0]
 80091b0:	e7d6      	b.n	8009160 <_malloc_r+0xa8>
 80091b2:	bf00      	nop
 80091b4:	2000203c 	.word	0x2000203c

080091b8 <__malloc_lock>:
 80091b8:	4801      	ldr	r0, [pc, #4]	@ (80091c0 <__malloc_lock+0x8>)
 80091ba:	f7ff bf0f 	b.w	8008fdc <__retarget_lock_acquire_recursive>
 80091be:	bf00      	nop
 80091c0:	20002034 	.word	0x20002034

080091c4 <__malloc_unlock>:
 80091c4:	4801      	ldr	r0, [pc, #4]	@ (80091cc <__malloc_unlock+0x8>)
 80091c6:	f7ff bf0a 	b.w	8008fde <__retarget_lock_release_recursive>
 80091ca:	bf00      	nop
 80091cc:	20002034 	.word	0x20002034

080091d0 <__ssputs_r>:
 80091d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091d4:	688e      	ldr	r6, [r1, #8]
 80091d6:	461f      	mov	r7, r3
 80091d8:	42be      	cmp	r6, r7
 80091da:	680b      	ldr	r3, [r1, #0]
 80091dc:	4682      	mov	sl, r0
 80091de:	460c      	mov	r4, r1
 80091e0:	4690      	mov	r8, r2
 80091e2:	d82d      	bhi.n	8009240 <__ssputs_r+0x70>
 80091e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80091e8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80091ec:	d026      	beq.n	800923c <__ssputs_r+0x6c>
 80091ee:	6965      	ldr	r5, [r4, #20]
 80091f0:	6909      	ldr	r1, [r1, #16]
 80091f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80091f6:	eba3 0901 	sub.w	r9, r3, r1
 80091fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80091fe:	1c7b      	adds	r3, r7, #1
 8009200:	444b      	add	r3, r9
 8009202:	106d      	asrs	r5, r5, #1
 8009204:	429d      	cmp	r5, r3
 8009206:	bf38      	it	cc
 8009208:	461d      	movcc	r5, r3
 800920a:	0553      	lsls	r3, r2, #21
 800920c:	d527      	bpl.n	800925e <__ssputs_r+0x8e>
 800920e:	4629      	mov	r1, r5
 8009210:	f7ff ff52 	bl	80090b8 <_malloc_r>
 8009214:	4606      	mov	r6, r0
 8009216:	b360      	cbz	r0, 8009272 <__ssputs_r+0xa2>
 8009218:	6921      	ldr	r1, [r4, #16]
 800921a:	464a      	mov	r2, r9
 800921c:	f000 fae8 	bl	80097f0 <memcpy>
 8009220:	89a3      	ldrh	r3, [r4, #12]
 8009222:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009226:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800922a:	81a3      	strh	r3, [r4, #12]
 800922c:	6126      	str	r6, [r4, #16]
 800922e:	6165      	str	r5, [r4, #20]
 8009230:	444e      	add	r6, r9
 8009232:	eba5 0509 	sub.w	r5, r5, r9
 8009236:	6026      	str	r6, [r4, #0]
 8009238:	60a5      	str	r5, [r4, #8]
 800923a:	463e      	mov	r6, r7
 800923c:	42be      	cmp	r6, r7
 800923e:	d900      	bls.n	8009242 <__ssputs_r+0x72>
 8009240:	463e      	mov	r6, r7
 8009242:	6820      	ldr	r0, [r4, #0]
 8009244:	4632      	mov	r2, r6
 8009246:	4641      	mov	r1, r8
 8009248:	f000 faa8 	bl	800979c <memmove>
 800924c:	68a3      	ldr	r3, [r4, #8]
 800924e:	1b9b      	subs	r3, r3, r6
 8009250:	60a3      	str	r3, [r4, #8]
 8009252:	6823      	ldr	r3, [r4, #0]
 8009254:	4433      	add	r3, r6
 8009256:	6023      	str	r3, [r4, #0]
 8009258:	2000      	movs	r0, #0
 800925a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800925e:	462a      	mov	r2, r5
 8009260:	f000 fad4 	bl	800980c <_realloc_r>
 8009264:	4606      	mov	r6, r0
 8009266:	2800      	cmp	r0, #0
 8009268:	d1e0      	bne.n	800922c <__ssputs_r+0x5c>
 800926a:	6921      	ldr	r1, [r4, #16]
 800926c:	4650      	mov	r0, sl
 800926e:	f7ff feb7 	bl	8008fe0 <_free_r>
 8009272:	230c      	movs	r3, #12
 8009274:	f8ca 3000 	str.w	r3, [sl]
 8009278:	89a3      	ldrh	r3, [r4, #12]
 800927a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800927e:	81a3      	strh	r3, [r4, #12]
 8009280:	f04f 30ff 	mov.w	r0, #4294967295
 8009284:	e7e9      	b.n	800925a <__ssputs_r+0x8a>
	...

08009288 <_svfiprintf_r>:
 8009288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800928c:	4698      	mov	r8, r3
 800928e:	898b      	ldrh	r3, [r1, #12]
 8009290:	061b      	lsls	r3, r3, #24
 8009292:	b09d      	sub	sp, #116	@ 0x74
 8009294:	4607      	mov	r7, r0
 8009296:	460d      	mov	r5, r1
 8009298:	4614      	mov	r4, r2
 800929a:	d510      	bpl.n	80092be <_svfiprintf_r+0x36>
 800929c:	690b      	ldr	r3, [r1, #16]
 800929e:	b973      	cbnz	r3, 80092be <_svfiprintf_r+0x36>
 80092a0:	2140      	movs	r1, #64	@ 0x40
 80092a2:	f7ff ff09 	bl	80090b8 <_malloc_r>
 80092a6:	6028      	str	r0, [r5, #0]
 80092a8:	6128      	str	r0, [r5, #16]
 80092aa:	b930      	cbnz	r0, 80092ba <_svfiprintf_r+0x32>
 80092ac:	230c      	movs	r3, #12
 80092ae:	603b      	str	r3, [r7, #0]
 80092b0:	f04f 30ff 	mov.w	r0, #4294967295
 80092b4:	b01d      	add	sp, #116	@ 0x74
 80092b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092ba:	2340      	movs	r3, #64	@ 0x40
 80092bc:	616b      	str	r3, [r5, #20]
 80092be:	2300      	movs	r3, #0
 80092c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80092c2:	2320      	movs	r3, #32
 80092c4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80092c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80092cc:	2330      	movs	r3, #48	@ 0x30
 80092ce:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800946c <_svfiprintf_r+0x1e4>
 80092d2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80092d6:	f04f 0901 	mov.w	r9, #1
 80092da:	4623      	mov	r3, r4
 80092dc:	469a      	mov	sl, r3
 80092de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092e2:	b10a      	cbz	r2, 80092e8 <_svfiprintf_r+0x60>
 80092e4:	2a25      	cmp	r2, #37	@ 0x25
 80092e6:	d1f9      	bne.n	80092dc <_svfiprintf_r+0x54>
 80092e8:	ebba 0b04 	subs.w	fp, sl, r4
 80092ec:	d00b      	beq.n	8009306 <_svfiprintf_r+0x7e>
 80092ee:	465b      	mov	r3, fp
 80092f0:	4622      	mov	r2, r4
 80092f2:	4629      	mov	r1, r5
 80092f4:	4638      	mov	r0, r7
 80092f6:	f7ff ff6b 	bl	80091d0 <__ssputs_r>
 80092fa:	3001      	adds	r0, #1
 80092fc:	f000 80a7 	beq.w	800944e <_svfiprintf_r+0x1c6>
 8009300:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009302:	445a      	add	r2, fp
 8009304:	9209      	str	r2, [sp, #36]	@ 0x24
 8009306:	f89a 3000 	ldrb.w	r3, [sl]
 800930a:	2b00      	cmp	r3, #0
 800930c:	f000 809f 	beq.w	800944e <_svfiprintf_r+0x1c6>
 8009310:	2300      	movs	r3, #0
 8009312:	f04f 32ff 	mov.w	r2, #4294967295
 8009316:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800931a:	f10a 0a01 	add.w	sl, sl, #1
 800931e:	9304      	str	r3, [sp, #16]
 8009320:	9307      	str	r3, [sp, #28]
 8009322:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009326:	931a      	str	r3, [sp, #104]	@ 0x68
 8009328:	4654      	mov	r4, sl
 800932a:	2205      	movs	r2, #5
 800932c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009330:	484e      	ldr	r0, [pc, #312]	@ (800946c <_svfiprintf_r+0x1e4>)
 8009332:	f7f6 ff55 	bl	80001e0 <memchr>
 8009336:	9a04      	ldr	r2, [sp, #16]
 8009338:	b9d8      	cbnz	r0, 8009372 <_svfiprintf_r+0xea>
 800933a:	06d0      	lsls	r0, r2, #27
 800933c:	bf44      	itt	mi
 800933e:	2320      	movmi	r3, #32
 8009340:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009344:	0711      	lsls	r1, r2, #28
 8009346:	bf44      	itt	mi
 8009348:	232b      	movmi	r3, #43	@ 0x2b
 800934a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800934e:	f89a 3000 	ldrb.w	r3, [sl]
 8009352:	2b2a      	cmp	r3, #42	@ 0x2a
 8009354:	d015      	beq.n	8009382 <_svfiprintf_r+0xfa>
 8009356:	9a07      	ldr	r2, [sp, #28]
 8009358:	4654      	mov	r4, sl
 800935a:	2000      	movs	r0, #0
 800935c:	f04f 0c0a 	mov.w	ip, #10
 8009360:	4621      	mov	r1, r4
 8009362:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009366:	3b30      	subs	r3, #48	@ 0x30
 8009368:	2b09      	cmp	r3, #9
 800936a:	d94b      	bls.n	8009404 <_svfiprintf_r+0x17c>
 800936c:	b1b0      	cbz	r0, 800939c <_svfiprintf_r+0x114>
 800936e:	9207      	str	r2, [sp, #28]
 8009370:	e014      	b.n	800939c <_svfiprintf_r+0x114>
 8009372:	eba0 0308 	sub.w	r3, r0, r8
 8009376:	fa09 f303 	lsl.w	r3, r9, r3
 800937a:	4313      	orrs	r3, r2
 800937c:	9304      	str	r3, [sp, #16]
 800937e:	46a2      	mov	sl, r4
 8009380:	e7d2      	b.n	8009328 <_svfiprintf_r+0xa0>
 8009382:	9b03      	ldr	r3, [sp, #12]
 8009384:	1d19      	adds	r1, r3, #4
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	9103      	str	r1, [sp, #12]
 800938a:	2b00      	cmp	r3, #0
 800938c:	bfbb      	ittet	lt
 800938e:	425b      	neglt	r3, r3
 8009390:	f042 0202 	orrlt.w	r2, r2, #2
 8009394:	9307      	strge	r3, [sp, #28]
 8009396:	9307      	strlt	r3, [sp, #28]
 8009398:	bfb8      	it	lt
 800939a:	9204      	strlt	r2, [sp, #16]
 800939c:	7823      	ldrb	r3, [r4, #0]
 800939e:	2b2e      	cmp	r3, #46	@ 0x2e
 80093a0:	d10a      	bne.n	80093b8 <_svfiprintf_r+0x130>
 80093a2:	7863      	ldrb	r3, [r4, #1]
 80093a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80093a6:	d132      	bne.n	800940e <_svfiprintf_r+0x186>
 80093a8:	9b03      	ldr	r3, [sp, #12]
 80093aa:	1d1a      	adds	r2, r3, #4
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	9203      	str	r2, [sp, #12]
 80093b0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80093b4:	3402      	adds	r4, #2
 80093b6:	9305      	str	r3, [sp, #20]
 80093b8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800947c <_svfiprintf_r+0x1f4>
 80093bc:	7821      	ldrb	r1, [r4, #0]
 80093be:	2203      	movs	r2, #3
 80093c0:	4650      	mov	r0, sl
 80093c2:	f7f6 ff0d 	bl	80001e0 <memchr>
 80093c6:	b138      	cbz	r0, 80093d8 <_svfiprintf_r+0x150>
 80093c8:	9b04      	ldr	r3, [sp, #16]
 80093ca:	eba0 000a 	sub.w	r0, r0, sl
 80093ce:	2240      	movs	r2, #64	@ 0x40
 80093d0:	4082      	lsls	r2, r0
 80093d2:	4313      	orrs	r3, r2
 80093d4:	3401      	adds	r4, #1
 80093d6:	9304      	str	r3, [sp, #16]
 80093d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093dc:	4824      	ldr	r0, [pc, #144]	@ (8009470 <_svfiprintf_r+0x1e8>)
 80093de:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80093e2:	2206      	movs	r2, #6
 80093e4:	f7f6 fefc 	bl	80001e0 <memchr>
 80093e8:	2800      	cmp	r0, #0
 80093ea:	d036      	beq.n	800945a <_svfiprintf_r+0x1d2>
 80093ec:	4b21      	ldr	r3, [pc, #132]	@ (8009474 <_svfiprintf_r+0x1ec>)
 80093ee:	bb1b      	cbnz	r3, 8009438 <_svfiprintf_r+0x1b0>
 80093f0:	9b03      	ldr	r3, [sp, #12]
 80093f2:	3307      	adds	r3, #7
 80093f4:	f023 0307 	bic.w	r3, r3, #7
 80093f8:	3308      	adds	r3, #8
 80093fa:	9303      	str	r3, [sp, #12]
 80093fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093fe:	4433      	add	r3, r6
 8009400:	9309      	str	r3, [sp, #36]	@ 0x24
 8009402:	e76a      	b.n	80092da <_svfiprintf_r+0x52>
 8009404:	fb0c 3202 	mla	r2, ip, r2, r3
 8009408:	460c      	mov	r4, r1
 800940a:	2001      	movs	r0, #1
 800940c:	e7a8      	b.n	8009360 <_svfiprintf_r+0xd8>
 800940e:	2300      	movs	r3, #0
 8009410:	3401      	adds	r4, #1
 8009412:	9305      	str	r3, [sp, #20]
 8009414:	4619      	mov	r1, r3
 8009416:	f04f 0c0a 	mov.w	ip, #10
 800941a:	4620      	mov	r0, r4
 800941c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009420:	3a30      	subs	r2, #48	@ 0x30
 8009422:	2a09      	cmp	r2, #9
 8009424:	d903      	bls.n	800942e <_svfiprintf_r+0x1a6>
 8009426:	2b00      	cmp	r3, #0
 8009428:	d0c6      	beq.n	80093b8 <_svfiprintf_r+0x130>
 800942a:	9105      	str	r1, [sp, #20]
 800942c:	e7c4      	b.n	80093b8 <_svfiprintf_r+0x130>
 800942e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009432:	4604      	mov	r4, r0
 8009434:	2301      	movs	r3, #1
 8009436:	e7f0      	b.n	800941a <_svfiprintf_r+0x192>
 8009438:	ab03      	add	r3, sp, #12
 800943a:	9300      	str	r3, [sp, #0]
 800943c:	462a      	mov	r2, r5
 800943e:	4b0e      	ldr	r3, [pc, #56]	@ (8009478 <_svfiprintf_r+0x1f0>)
 8009440:	a904      	add	r1, sp, #16
 8009442:	4638      	mov	r0, r7
 8009444:	f3af 8000 	nop.w
 8009448:	1c42      	adds	r2, r0, #1
 800944a:	4606      	mov	r6, r0
 800944c:	d1d6      	bne.n	80093fc <_svfiprintf_r+0x174>
 800944e:	89ab      	ldrh	r3, [r5, #12]
 8009450:	065b      	lsls	r3, r3, #25
 8009452:	f53f af2d 	bmi.w	80092b0 <_svfiprintf_r+0x28>
 8009456:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009458:	e72c      	b.n	80092b4 <_svfiprintf_r+0x2c>
 800945a:	ab03      	add	r3, sp, #12
 800945c:	9300      	str	r3, [sp, #0]
 800945e:	462a      	mov	r2, r5
 8009460:	4b05      	ldr	r3, [pc, #20]	@ (8009478 <_svfiprintf_r+0x1f0>)
 8009462:	a904      	add	r1, sp, #16
 8009464:	4638      	mov	r0, r7
 8009466:	f000 f879 	bl	800955c <_printf_i>
 800946a:	e7ed      	b.n	8009448 <_svfiprintf_r+0x1c0>
 800946c:	080099cc 	.word	0x080099cc
 8009470:	080099d6 	.word	0x080099d6
 8009474:	00000000 	.word	0x00000000
 8009478:	080091d1 	.word	0x080091d1
 800947c:	080099d2 	.word	0x080099d2

08009480 <_printf_common>:
 8009480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009484:	4616      	mov	r6, r2
 8009486:	4698      	mov	r8, r3
 8009488:	688a      	ldr	r2, [r1, #8]
 800948a:	690b      	ldr	r3, [r1, #16]
 800948c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009490:	4293      	cmp	r3, r2
 8009492:	bfb8      	it	lt
 8009494:	4613      	movlt	r3, r2
 8009496:	6033      	str	r3, [r6, #0]
 8009498:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800949c:	4607      	mov	r7, r0
 800949e:	460c      	mov	r4, r1
 80094a0:	b10a      	cbz	r2, 80094a6 <_printf_common+0x26>
 80094a2:	3301      	adds	r3, #1
 80094a4:	6033      	str	r3, [r6, #0]
 80094a6:	6823      	ldr	r3, [r4, #0]
 80094a8:	0699      	lsls	r1, r3, #26
 80094aa:	bf42      	ittt	mi
 80094ac:	6833      	ldrmi	r3, [r6, #0]
 80094ae:	3302      	addmi	r3, #2
 80094b0:	6033      	strmi	r3, [r6, #0]
 80094b2:	6825      	ldr	r5, [r4, #0]
 80094b4:	f015 0506 	ands.w	r5, r5, #6
 80094b8:	d106      	bne.n	80094c8 <_printf_common+0x48>
 80094ba:	f104 0a19 	add.w	sl, r4, #25
 80094be:	68e3      	ldr	r3, [r4, #12]
 80094c0:	6832      	ldr	r2, [r6, #0]
 80094c2:	1a9b      	subs	r3, r3, r2
 80094c4:	42ab      	cmp	r3, r5
 80094c6:	dc26      	bgt.n	8009516 <_printf_common+0x96>
 80094c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80094cc:	6822      	ldr	r2, [r4, #0]
 80094ce:	3b00      	subs	r3, #0
 80094d0:	bf18      	it	ne
 80094d2:	2301      	movne	r3, #1
 80094d4:	0692      	lsls	r2, r2, #26
 80094d6:	d42b      	bmi.n	8009530 <_printf_common+0xb0>
 80094d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80094dc:	4641      	mov	r1, r8
 80094de:	4638      	mov	r0, r7
 80094e0:	47c8      	blx	r9
 80094e2:	3001      	adds	r0, #1
 80094e4:	d01e      	beq.n	8009524 <_printf_common+0xa4>
 80094e6:	6823      	ldr	r3, [r4, #0]
 80094e8:	6922      	ldr	r2, [r4, #16]
 80094ea:	f003 0306 	and.w	r3, r3, #6
 80094ee:	2b04      	cmp	r3, #4
 80094f0:	bf02      	ittt	eq
 80094f2:	68e5      	ldreq	r5, [r4, #12]
 80094f4:	6833      	ldreq	r3, [r6, #0]
 80094f6:	1aed      	subeq	r5, r5, r3
 80094f8:	68a3      	ldr	r3, [r4, #8]
 80094fa:	bf0c      	ite	eq
 80094fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009500:	2500      	movne	r5, #0
 8009502:	4293      	cmp	r3, r2
 8009504:	bfc4      	itt	gt
 8009506:	1a9b      	subgt	r3, r3, r2
 8009508:	18ed      	addgt	r5, r5, r3
 800950a:	2600      	movs	r6, #0
 800950c:	341a      	adds	r4, #26
 800950e:	42b5      	cmp	r5, r6
 8009510:	d11a      	bne.n	8009548 <_printf_common+0xc8>
 8009512:	2000      	movs	r0, #0
 8009514:	e008      	b.n	8009528 <_printf_common+0xa8>
 8009516:	2301      	movs	r3, #1
 8009518:	4652      	mov	r2, sl
 800951a:	4641      	mov	r1, r8
 800951c:	4638      	mov	r0, r7
 800951e:	47c8      	blx	r9
 8009520:	3001      	adds	r0, #1
 8009522:	d103      	bne.n	800952c <_printf_common+0xac>
 8009524:	f04f 30ff 	mov.w	r0, #4294967295
 8009528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800952c:	3501      	adds	r5, #1
 800952e:	e7c6      	b.n	80094be <_printf_common+0x3e>
 8009530:	18e1      	adds	r1, r4, r3
 8009532:	1c5a      	adds	r2, r3, #1
 8009534:	2030      	movs	r0, #48	@ 0x30
 8009536:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800953a:	4422      	add	r2, r4
 800953c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009540:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009544:	3302      	adds	r3, #2
 8009546:	e7c7      	b.n	80094d8 <_printf_common+0x58>
 8009548:	2301      	movs	r3, #1
 800954a:	4622      	mov	r2, r4
 800954c:	4641      	mov	r1, r8
 800954e:	4638      	mov	r0, r7
 8009550:	47c8      	blx	r9
 8009552:	3001      	adds	r0, #1
 8009554:	d0e6      	beq.n	8009524 <_printf_common+0xa4>
 8009556:	3601      	adds	r6, #1
 8009558:	e7d9      	b.n	800950e <_printf_common+0x8e>
	...

0800955c <_printf_i>:
 800955c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009560:	7e0f      	ldrb	r7, [r1, #24]
 8009562:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009564:	2f78      	cmp	r7, #120	@ 0x78
 8009566:	4691      	mov	r9, r2
 8009568:	4680      	mov	r8, r0
 800956a:	460c      	mov	r4, r1
 800956c:	469a      	mov	sl, r3
 800956e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009572:	d807      	bhi.n	8009584 <_printf_i+0x28>
 8009574:	2f62      	cmp	r7, #98	@ 0x62
 8009576:	d80a      	bhi.n	800958e <_printf_i+0x32>
 8009578:	2f00      	cmp	r7, #0
 800957a:	f000 80d2 	beq.w	8009722 <_printf_i+0x1c6>
 800957e:	2f58      	cmp	r7, #88	@ 0x58
 8009580:	f000 80b9 	beq.w	80096f6 <_printf_i+0x19a>
 8009584:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009588:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800958c:	e03a      	b.n	8009604 <_printf_i+0xa8>
 800958e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009592:	2b15      	cmp	r3, #21
 8009594:	d8f6      	bhi.n	8009584 <_printf_i+0x28>
 8009596:	a101      	add	r1, pc, #4	@ (adr r1, 800959c <_printf_i+0x40>)
 8009598:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800959c:	080095f5 	.word	0x080095f5
 80095a0:	08009609 	.word	0x08009609
 80095a4:	08009585 	.word	0x08009585
 80095a8:	08009585 	.word	0x08009585
 80095ac:	08009585 	.word	0x08009585
 80095b0:	08009585 	.word	0x08009585
 80095b4:	08009609 	.word	0x08009609
 80095b8:	08009585 	.word	0x08009585
 80095bc:	08009585 	.word	0x08009585
 80095c0:	08009585 	.word	0x08009585
 80095c4:	08009585 	.word	0x08009585
 80095c8:	08009709 	.word	0x08009709
 80095cc:	08009633 	.word	0x08009633
 80095d0:	080096c3 	.word	0x080096c3
 80095d4:	08009585 	.word	0x08009585
 80095d8:	08009585 	.word	0x08009585
 80095dc:	0800972b 	.word	0x0800972b
 80095e0:	08009585 	.word	0x08009585
 80095e4:	08009633 	.word	0x08009633
 80095e8:	08009585 	.word	0x08009585
 80095ec:	08009585 	.word	0x08009585
 80095f0:	080096cb 	.word	0x080096cb
 80095f4:	6833      	ldr	r3, [r6, #0]
 80095f6:	1d1a      	adds	r2, r3, #4
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	6032      	str	r2, [r6, #0]
 80095fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009600:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009604:	2301      	movs	r3, #1
 8009606:	e09d      	b.n	8009744 <_printf_i+0x1e8>
 8009608:	6833      	ldr	r3, [r6, #0]
 800960a:	6820      	ldr	r0, [r4, #0]
 800960c:	1d19      	adds	r1, r3, #4
 800960e:	6031      	str	r1, [r6, #0]
 8009610:	0606      	lsls	r6, r0, #24
 8009612:	d501      	bpl.n	8009618 <_printf_i+0xbc>
 8009614:	681d      	ldr	r5, [r3, #0]
 8009616:	e003      	b.n	8009620 <_printf_i+0xc4>
 8009618:	0645      	lsls	r5, r0, #25
 800961a:	d5fb      	bpl.n	8009614 <_printf_i+0xb8>
 800961c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009620:	2d00      	cmp	r5, #0
 8009622:	da03      	bge.n	800962c <_printf_i+0xd0>
 8009624:	232d      	movs	r3, #45	@ 0x2d
 8009626:	426d      	negs	r5, r5
 8009628:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800962c:	4859      	ldr	r0, [pc, #356]	@ (8009794 <_printf_i+0x238>)
 800962e:	230a      	movs	r3, #10
 8009630:	e011      	b.n	8009656 <_printf_i+0xfa>
 8009632:	6821      	ldr	r1, [r4, #0]
 8009634:	6833      	ldr	r3, [r6, #0]
 8009636:	0608      	lsls	r0, r1, #24
 8009638:	f853 5b04 	ldr.w	r5, [r3], #4
 800963c:	d402      	bmi.n	8009644 <_printf_i+0xe8>
 800963e:	0649      	lsls	r1, r1, #25
 8009640:	bf48      	it	mi
 8009642:	b2ad      	uxthmi	r5, r5
 8009644:	2f6f      	cmp	r7, #111	@ 0x6f
 8009646:	4853      	ldr	r0, [pc, #332]	@ (8009794 <_printf_i+0x238>)
 8009648:	6033      	str	r3, [r6, #0]
 800964a:	bf14      	ite	ne
 800964c:	230a      	movne	r3, #10
 800964e:	2308      	moveq	r3, #8
 8009650:	2100      	movs	r1, #0
 8009652:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009656:	6866      	ldr	r6, [r4, #4]
 8009658:	60a6      	str	r6, [r4, #8]
 800965a:	2e00      	cmp	r6, #0
 800965c:	bfa2      	ittt	ge
 800965e:	6821      	ldrge	r1, [r4, #0]
 8009660:	f021 0104 	bicge.w	r1, r1, #4
 8009664:	6021      	strge	r1, [r4, #0]
 8009666:	b90d      	cbnz	r5, 800966c <_printf_i+0x110>
 8009668:	2e00      	cmp	r6, #0
 800966a:	d04b      	beq.n	8009704 <_printf_i+0x1a8>
 800966c:	4616      	mov	r6, r2
 800966e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009672:	fb03 5711 	mls	r7, r3, r1, r5
 8009676:	5dc7      	ldrb	r7, [r0, r7]
 8009678:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800967c:	462f      	mov	r7, r5
 800967e:	42bb      	cmp	r3, r7
 8009680:	460d      	mov	r5, r1
 8009682:	d9f4      	bls.n	800966e <_printf_i+0x112>
 8009684:	2b08      	cmp	r3, #8
 8009686:	d10b      	bne.n	80096a0 <_printf_i+0x144>
 8009688:	6823      	ldr	r3, [r4, #0]
 800968a:	07df      	lsls	r7, r3, #31
 800968c:	d508      	bpl.n	80096a0 <_printf_i+0x144>
 800968e:	6923      	ldr	r3, [r4, #16]
 8009690:	6861      	ldr	r1, [r4, #4]
 8009692:	4299      	cmp	r1, r3
 8009694:	bfde      	ittt	le
 8009696:	2330      	movle	r3, #48	@ 0x30
 8009698:	f806 3c01 	strble.w	r3, [r6, #-1]
 800969c:	f106 36ff 	addle.w	r6, r6, #4294967295
 80096a0:	1b92      	subs	r2, r2, r6
 80096a2:	6122      	str	r2, [r4, #16]
 80096a4:	f8cd a000 	str.w	sl, [sp]
 80096a8:	464b      	mov	r3, r9
 80096aa:	aa03      	add	r2, sp, #12
 80096ac:	4621      	mov	r1, r4
 80096ae:	4640      	mov	r0, r8
 80096b0:	f7ff fee6 	bl	8009480 <_printf_common>
 80096b4:	3001      	adds	r0, #1
 80096b6:	d14a      	bne.n	800974e <_printf_i+0x1f2>
 80096b8:	f04f 30ff 	mov.w	r0, #4294967295
 80096bc:	b004      	add	sp, #16
 80096be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096c2:	6823      	ldr	r3, [r4, #0]
 80096c4:	f043 0320 	orr.w	r3, r3, #32
 80096c8:	6023      	str	r3, [r4, #0]
 80096ca:	4833      	ldr	r0, [pc, #204]	@ (8009798 <_printf_i+0x23c>)
 80096cc:	2778      	movs	r7, #120	@ 0x78
 80096ce:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80096d2:	6823      	ldr	r3, [r4, #0]
 80096d4:	6831      	ldr	r1, [r6, #0]
 80096d6:	061f      	lsls	r7, r3, #24
 80096d8:	f851 5b04 	ldr.w	r5, [r1], #4
 80096dc:	d402      	bmi.n	80096e4 <_printf_i+0x188>
 80096de:	065f      	lsls	r7, r3, #25
 80096e0:	bf48      	it	mi
 80096e2:	b2ad      	uxthmi	r5, r5
 80096e4:	6031      	str	r1, [r6, #0]
 80096e6:	07d9      	lsls	r1, r3, #31
 80096e8:	bf44      	itt	mi
 80096ea:	f043 0320 	orrmi.w	r3, r3, #32
 80096ee:	6023      	strmi	r3, [r4, #0]
 80096f0:	b11d      	cbz	r5, 80096fa <_printf_i+0x19e>
 80096f2:	2310      	movs	r3, #16
 80096f4:	e7ac      	b.n	8009650 <_printf_i+0xf4>
 80096f6:	4827      	ldr	r0, [pc, #156]	@ (8009794 <_printf_i+0x238>)
 80096f8:	e7e9      	b.n	80096ce <_printf_i+0x172>
 80096fa:	6823      	ldr	r3, [r4, #0]
 80096fc:	f023 0320 	bic.w	r3, r3, #32
 8009700:	6023      	str	r3, [r4, #0]
 8009702:	e7f6      	b.n	80096f2 <_printf_i+0x196>
 8009704:	4616      	mov	r6, r2
 8009706:	e7bd      	b.n	8009684 <_printf_i+0x128>
 8009708:	6833      	ldr	r3, [r6, #0]
 800970a:	6825      	ldr	r5, [r4, #0]
 800970c:	6961      	ldr	r1, [r4, #20]
 800970e:	1d18      	adds	r0, r3, #4
 8009710:	6030      	str	r0, [r6, #0]
 8009712:	062e      	lsls	r6, r5, #24
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	d501      	bpl.n	800971c <_printf_i+0x1c0>
 8009718:	6019      	str	r1, [r3, #0]
 800971a:	e002      	b.n	8009722 <_printf_i+0x1c6>
 800971c:	0668      	lsls	r0, r5, #25
 800971e:	d5fb      	bpl.n	8009718 <_printf_i+0x1bc>
 8009720:	8019      	strh	r1, [r3, #0]
 8009722:	2300      	movs	r3, #0
 8009724:	6123      	str	r3, [r4, #16]
 8009726:	4616      	mov	r6, r2
 8009728:	e7bc      	b.n	80096a4 <_printf_i+0x148>
 800972a:	6833      	ldr	r3, [r6, #0]
 800972c:	1d1a      	adds	r2, r3, #4
 800972e:	6032      	str	r2, [r6, #0]
 8009730:	681e      	ldr	r6, [r3, #0]
 8009732:	6862      	ldr	r2, [r4, #4]
 8009734:	2100      	movs	r1, #0
 8009736:	4630      	mov	r0, r6
 8009738:	f7f6 fd52 	bl	80001e0 <memchr>
 800973c:	b108      	cbz	r0, 8009742 <_printf_i+0x1e6>
 800973e:	1b80      	subs	r0, r0, r6
 8009740:	6060      	str	r0, [r4, #4]
 8009742:	6863      	ldr	r3, [r4, #4]
 8009744:	6123      	str	r3, [r4, #16]
 8009746:	2300      	movs	r3, #0
 8009748:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800974c:	e7aa      	b.n	80096a4 <_printf_i+0x148>
 800974e:	6923      	ldr	r3, [r4, #16]
 8009750:	4632      	mov	r2, r6
 8009752:	4649      	mov	r1, r9
 8009754:	4640      	mov	r0, r8
 8009756:	47d0      	blx	sl
 8009758:	3001      	adds	r0, #1
 800975a:	d0ad      	beq.n	80096b8 <_printf_i+0x15c>
 800975c:	6823      	ldr	r3, [r4, #0]
 800975e:	079b      	lsls	r3, r3, #30
 8009760:	d413      	bmi.n	800978a <_printf_i+0x22e>
 8009762:	68e0      	ldr	r0, [r4, #12]
 8009764:	9b03      	ldr	r3, [sp, #12]
 8009766:	4298      	cmp	r0, r3
 8009768:	bfb8      	it	lt
 800976a:	4618      	movlt	r0, r3
 800976c:	e7a6      	b.n	80096bc <_printf_i+0x160>
 800976e:	2301      	movs	r3, #1
 8009770:	4632      	mov	r2, r6
 8009772:	4649      	mov	r1, r9
 8009774:	4640      	mov	r0, r8
 8009776:	47d0      	blx	sl
 8009778:	3001      	adds	r0, #1
 800977a:	d09d      	beq.n	80096b8 <_printf_i+0x15c>
 800977c:	3501      	adds	r5, #1
 800977e:	68e3      	ldr	r3, [r4, #12]
 8009780:	9903      	ldr	r1, [sp, #12]
 8009782:	1a5b      	subs	r3, r3, r1
 8009784:	42ab      	cmp	r3, r5
 8009786:	dcf2      	bgt.n	800976e <_printf_i+0x212>
 8009788:	e7eb      	b.n	8009762 <_printf_i+0x206>
 800978a:	2500      	movs	r5, #0
 800978c:	f104 0619 	add.w	r6, r4, #25
 8009790:	e7f5      	b.n	800977e <_printf_i+0x222>
 8009792:	bf00      	nop
 8009794:	080099dd 	.word	0x080099dd
 8009798:	080099ee 	.word	0x080099ee

0800979c <memmove>:
 800979c:	4288      	cmp	r0, r1
 800979e:	b510      	push	{r4, lr}
 80097a0:	eb01 0402 	add.w	r4, r1, r2
 80097a4:	d902      	bls.n	80097ac <memmove+0x10>
 80097a6:	4284      	cmp	r4, r0
 80097a8:	4623      	mov	r3, r4
 80097aa:	d807      	bhi.n	80097bc <memmove+0x20>
 80097ac:	1e43      	subs	r3, r0, #1
 80097ae:	42a1      	cmp	r1, r4
 80097b0:	d008      	beq.n	80097c4 <memmove+0x28>
 80097b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80097b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80097ba:	e7f8      	b.n	80097ae <memmove+0x12>
 80097bc:	4402      	add	r2, r0
 80097be:	4601      	mov	r1, r0
 80097c0:	428a      	cmp	r2, r1
 80097c2:	d100      	bne.n	80097c6 <memmove+0x2a>
 80097c4:	bd10      	pop	{r4, pc}
 80097c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80097ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80097ce:	e7f7      	b.n	80097c0 <memmove+0x24>

080097d0 <_sbrk_r>:
 80097d0:	b538      	push	{r3, r4, r5, lr}
 80097d2:	4d06      	ldr	r5, [pc, #24]	@ (80097ec <_sbrk_r+0x1c>)
 80097d4:	2300      	movs	r3, #0
 80097d6:	4604      	mov	r4, r0
 80097d8:	4608      	mov	r0, r1
 80097da:	602b      	str	r3, [r5, #0]
 80097dc:	f7f8 f952 	bl	8001a84 <_sbrk>
 80097e0:	1c43      	adds	r3, r0, #1
 80097e2:	d102      	bne.n	80097ea <_sbrk_r+0x1a>
 80097e4:	682b      	ldr	r3, [r5, #0]
 80097e6:	b103      	cbz	r3, 80097ea <_sbrk_r+0x1a>
 80097e8:	6023      	str	r3, [r4, #0]
 80097ea:	bd38      	pop	{r3, r4, r5, pc}
 80097ec:	20002030 	.word	0x20002030

080097f0 <memcpy>:
 80097f0:	440a      	add	r2, r1
 80097f2:	4291      	cmp	r1, r2
 80097f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80097f8:	d100      	bne.n	80097fc <memcpy+0xc>
 80097fa:	4770      	bx	lr
 80097fc:	b510      	push	{r4, lr}
 80097fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009802:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009806:	4291      	cmp	r1, r2
 8009808:	d1f9      	bne.n	80097fe <memcpy+0xe>
 800980a:	bd10      	pop	{r4, pc}

0800980c <_realloc_r>:
 800980c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009810:	4680      	mov	r8, r0
 8009812:	4615      	mov	r5, r2
 8009814:	460c      	mov	r4, r1
 8009816:	b921      	cbnz	r1, 8009822 <_realloc_r+0x16>
 8009818:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800981c:	4611      	mov	r1, r2
 800981e:	f7ff bc4b 	b.w	80090b8 <_malloc_r>
 8009822:	b92a      	cbnz	r2, 8009830 <_realloc_r+0x24>
 8009824:	f7ff fbdc 	bl	8008fe0 <_free_r>
 8009828:	2400      	movs	r4, #0
 800982a:	4620      	mov	r0, r4
 800982c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009830:	f000 f81a 	bl	8009868 <_malloc_usable_size_r>
 8009834:	4285      	cmp	r5, r0
 8009836:	4606      	mov	r6, r0
 8009838:	d802      	bhi.n	8009840 <_realloc_r+0x34>
 800983a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800983e:	d8f4      	bhi.n	800982a <_realloc_r+0x1e>
 8009840:	4629      	mov	r1, r5
 8009842:	4640      	mov	r0, r8
 8009844:	f7ff fc38 	bl	80090b8 <_malloc_r>
 8009848:	4607      	mov	r7, r0
 800984a:	2800      	cmp	r0, #0
 800984c:	d0ec      	beq.n	8009828 <_realloc_r+0x1c>
 800984e:	42b5      	cmp	r5, r6
 8009850:	462a      	mov	r2, r5
 8009852:	4621      	mov	r1, r4
 8009854:	bf28      	it	cs
 8009856:	4632      	movcs	r2, r6
 8009858:	f7ff ffca 	bl	80097f0 <memcpy>
 800985c:	4621      	mov	r1, r4
 800985e:	4640      	mov	r0, r8
 8009860:	f7ff fbbe 	bl	8008fe0 <_free_r>
 8009864:	463c      	mov	r4, r7
 8009866:	e7e0      	b.n	800982a <_realloc_r+0x1e>

08009868 <_malloc_usable_size_r>:
 8009868:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800986c:	1f18      	subs	r0, r3, #4
 800986e:	2b00      	cmp	r3, #0
 8009870:	bfbc      	itt	lt
 8009872:	580b      	ldrlt	r3, [r1, r0]
 8009874:	18c0      	addlt	r0, r0, r3
 8009876:	4770      	bx	lr

08009878 <_init>:
 8009878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800987a:	bf00      	nop
 800987c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800987e:	bc08      	pop	{r3}
 8009880:	469e      	mov	lr, r3
 8009882:	4770      	bx	lr

08009884 <_fini>:
 8009884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009886:	bf00      	nop
 8009888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800988a:	bc08      	pop	{r3}
 800988c:	469e      	mov	lr, r3
 800988e:	4770      	bx	lr
