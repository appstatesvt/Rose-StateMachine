
StateMachine2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009818  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  080099a8  080099a8  0000a9a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009af8  08009af8  0000b14c  2**0
                  CONTENTS
  4 .ARM          00000008  08009af8  08009af8  0000aaf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b00  08009b00  0000b14c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b00  08009b00  0000ab00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b04  08009b04  0000ab04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  08009b08  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b14c  2**0
                  CONTENTS
 10 .bss          00001ef4  2000014c  2000014c  0000b14c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002040  20002040  0000b14c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b14c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011ab0  00000000  00000000  0000b17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003324  00000000  00000000  0001cc2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f00  00000000  00000000  0001ff50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b34  00000000  00000000  00020e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025bd6  00000000  00000000  00021984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000140bc  00000000  00000000  0004755a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7565  00000000  00000000  0005b616  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00132b7b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000041c8  00000000  00000000  00132bc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  00136d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000014c 	.word	0x2000014c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009990 	.word	0x08009990

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000150 	.word	0x20000150
 80001cc:	08009990 	.word	0x08009990

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f001 fb84 	bl	8001c80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 fe04 	bl	8001184 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f001 f80a 	bl	8001594 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000580:	f000 fe6a 	bl	8001258 <MX_ADC1_Init>
  MX_DAC_Init();
 8000584:	f000 ffd2 	bl	800152c <MX_DAC_Init>
  MX_USB_DEVICE_Init();
 8000588:	f008 f83a 	bl	8008600 <MX_USB_DEVICE_Init>
  MX_ADC2_Init();
 800058c:	f000 feb6 	bl	80012fc <MX_ADC2_Init>
  MX_CAN1_Init();
 8000590:	f000 ff58 	bl	8001444 <MX_CAN1_Init>
  MX_ADC3_Init();
 8000594:	f000 ff04 	bl	80013a0 <MX_ADC3_Init>


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  i_keyIGN 				= HAL_GPIO_ReadPin(keyIGNPort, keyIGN);
 8000598:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800059c:	483d      	ldr	r0, [pc, #244]	@ (8000694 <main+0x124>)
 800059e:	f002 fcfd 	bl	8002f9c <HAL_GPIO_ReadPin>
 80005a2:	4603      	mov	r3, r0
 80005a4:	461a      	mov	r2, r3
 80005a6:	4b3c      	ldr	r3, [pc, #240]	@ (8000698 <main+0x128>)
 80005a8:	701a      	strb	r2, [r3, #0]
	  i_keyACC 				= HAL_GPIO_ReadPin(keyACCPort, keyACC);
 80005aa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005ae:	4839      	ldr	r0, [pc, #228]	@ (8000694 <main+0x124>)
 80005b0:	f002 fcf4 	bl	8002f9c <HAL_GPIO_ReadPin>
 80005b4:	4603      	mov	r3, r0
 80005b6:	461a      	mov	r2, r3
 80005b8:	4b38      	ldr	r3, [pc, #224]	@ (800069c <main+0x12c>)
 80005ba:	701a      	strb	r2, [r3, #0]
	  i_killSwitch 			= !HAL_GPIO_ReadPin(killSwitchPort, killSwitch);
 80005bc:	2102      	movs	r1, #2
 80005be:	4838      	ldr	r0, [pc, #224]	@ (80006a0 <main+0x130>)
 80005c0:	f002 fcec 	bl	8002f9c <HAL_GPIO_ReadPin>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	bf0c      	ite	eq
 80005ca:	2301      	moveq	r3, #1
 80005cc:	2300      	movne	r3, #0
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	461a      	mov	r2, r3
 80005d2:	4b34      	ldr	r3, [pc, #208]	@ (80006a4 <main+0x134>)
 80005d4:	701a      	strb	r2, [r3, #0]
	  i_chargeContactor 	= HAL_GPIO_ReadPin(chargeContactorPort, chargeContactor);
 80005d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005da:	482e      	ldr	r0, [pc, #184]	@ (8000694 <main+0x124>)
 80005dc:	f002 fcde 	bl	8002f9c <HAL_GPIO_ReadPin>
 80005e0:	4603      	mov	r3, r0
 80005e2:	461a      	mov	r2, r3
 80005e4:	4b30      	ldr	r3, [pc, #192]	@ (80006a8 <main+0x138>)
 80005e6:	701a      	strb	r2, [r3, #0]
	  i_chargeEnable 		= !HAL_GPIO_ReadPin(chargeEnablePort, chargeEnable);
 80005e8:	2108      	movs	r1, #8
 80005ea:	482a      	ldr	r0, [pc, #168]	@ (8000694 <main+0x124>)
 80005ec:	f002 fcd6 	bl	8002f9c <HAL_GPIO_ReadPin>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	bf0c      	ite	eq
 80005f6:	2301      	moveq	r3, #1
 80005f8:	2300      	movne	r3, #0
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	461a      	mov	r2, r3
 80005fe:	4b2b      	ldr	r3, [pc, #172]	@ (80006ac <main+0x13c>)
 8000600:	701a      	strb	r2, [r3, #0]
	  i_disChargeEnable 	= !HAL_GPIO_ReadPin(disChargeEnablePort, disChargeEnable);
 8000602:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000606:	4823      	ldr	r0, [pc, #140]	@ (8000694 <main+0x124>)
 8000608:	f002 fcc8 	bl	8002f9c <HAL_GPIO_ReadPin>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	bf0c      	ite	eq
 8000612:	2301      	moveq	r3, #1
 8000614:	2300      	movne	r3, #0
 8000616:	b2db      	uxtb	r3, r3
 8000618:	461a      	mov	r2, r3
 800061a:	4b25      	ldr	r3, [pc, #148]	@ (80006b0 <main+0x140>)
 800061c:	701a      	strb	r2, [r3, #0]
	  i_brakeSwitchInput 	= HAL_GPIO_ReadPin(brakeSwitchInputPort, brakeSwitchInput);
 800061e:	2104      	movs	r1, #4
 8000620:	481f      	ldr	r0, [pc, #124]	@ (80006a0 <main+0x130>)
 8000622:	f002 fcbb 	bl	8002f9c <HAL_GPIO_ReadPin>
 8000626:	4603      	mov	r3, r0
 8000628:	461a      	mov	r2, r3
 800062a:	4b22      	ldr	r3, [pc, #136]	@ (80006b4 <main+0x144>)
 800062c:	701a      	strb	r2, [r3, #0]


	switch(currentState) {
 800062e:	4b22      	ldr	r3, [pc, #136]	@ (80006b8 <main+0x148>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2b07      	cmp	r3, #7
 8000634:	d82a      	bhi.n	800068c <main+0x11c>
 8000636:	a201      	add	r2, pc, #4	@ (adr r2, 800063c <main+0xcc>)
 8000638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800063c:	0800065d 	.word	0x0800065d
 8000640:	08000663 	.word	0x08000663
 8000644:	08000669 	.word	0x08000669
 8000648:	0800066f 	.word	0x0800066f
 800064c:	08000675 	.word	0x08000675
 8000650:	0800067b 	.word	0x0800067b
 8000654:	08000681 	.word	0x08000681
 8000658:	08000687 	.word	0x08000687
			case OFF:
				off_state();
 800065c:	f000 f82e 	bl	80006bc <off_state>
				break;
 8000660:	e014      	b.n	800068c <main+0x11c>
			case ACC:
				acc_state();
 8000662:	f000 f8a9 	bl	80007b8 <acc_state>
				break;
 8000666:	e011      	b.n	800068c <main+0x11c>
			case IGN:
				ign_state();
 8000668:	f000 f920 	bl	80008ac <ign_state>
				break;
 800066c:	e00e      	b.n	800068c <main+0x11c>
			case DCDC:
				dcdc_state();
 800066e:	f000 f9b1 	bl	80009d4 <dcdc_state>
				break;
 8000672:	e00b      	b.n	800068c <main+0x11c>
			case ON:
				on_state();
 8000674:	f000 fa3a 	bl	8000aec <on_state>
				break;
 8000678:	e008      	b.n	800068c <main+0x11c>
			case CHARGE:
				charge_state();
 800067a:	f000 fb41 	bl	8000d00 <charge_state>
				break;
 800067e:	e005      	b.n	800068c <main+0x11c>
			case FAULT:
				fault_state();
 8000680:	f000 fbca 	bl	8000e18 <fault_state>
				break;
 8000684:	e002      	b.n	800068c <main+0x11c>
			case FAULT_TEMP:
				faultTemp_state();
 8000686:	f000 fa9b 	bl	8000bc0 <faultTemp_state>
				break;
 800068a:	bf00      	nop
		}

	if (1)
	{
		debugMonitor();
 800068c:	f000 fc30 	bl	8000ef0 <debugMonitor>
	  i_keyIGN 				= HAL_GPIO_ReadPin(keyIGNPort, keyIGN);
 8000690:	e782      	b.n	8000598 <main+0x28>
 8000692:	bf00      	nop
 8000694:	40021000 	.word	0x40021000
 8000698:	2000028d 	.word	0x2000028d
 800069c:	2000028e 	.word	0x2000028e
 80006a0:	40020c00 	.word	0x40020c00
 80006a4:	2000028f 	.word	0x2000028f
 80006a8:	20000290 	.word	0x20000290
 80006ac:	20000291 	.word	0x20000291
 80006b0:	20000292 	.word	0x20000292
 80006b4:	20000293 	.word	0x20000293
 80006b8:	2000027c 	.word	0x2000027c

080006bc <off_state>:
}

//add brake lights

//Initial setting of bits
void off_state(void){		// State 0
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
	currentTime = HAL_GetTick();
 80006c0:	f001 fb44 	bl	8001d4c <HAL_GetTick>
 80006c4:	4603      	mov	r3, r0
 80006c6:	4a2b      	ldr	r2, [pc, #172]	@ (8000774 <off_state+0xb8>)
 80006c8:	6013      	str	r3, [r2, #0]
	lastState = OFF;
 80006ca:	4b2b      	ldr	r3, [pc, #172]	@ (8000778 <off_state+0xbc>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(preChargeRelayPort,preChargeRelay,GPIO_PIN_RESET);
 80006d0:	2200      	movs	r2, #0
 80006d2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006d6:	4829      	ldr	r0, [pc, #164]	@ (800077c <off_state+0xc0>)
 80006d8:	f002 fc78 	bl	8002fcc <HAL_GPIO_WritePin>
	o_preChargeRelay = GPIO_PIN_RESET;
 80006dc:	4b28      	ldr	r3, [pc, #160]	@ (8000780 <off_state+0xc4>)
 80006de:	2200      	movs	r2, #0
 80006e0:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(hvContactorPort,hvContactor,GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006e8:	4824      	ldr	r0, [pc, #144]	@ (800077c <off_state+0xc0>)
 80006ea:	f002 fc6f 	bl	8002fcc <HAL_GPIO_WritePin>
	o_hvContactor = GPIO_PIN_RESET;
 80006ee:	4b25      	ldr	r3, [pc, #148]	@ (8000784 <off_state+0xc8>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(auxDCDCDisablePort,auxDCDCDisable,GPIO_PIN_RESET);
 80006f4:	2200      	movs	r2, #0
 80006f6:	2180      	movs	r1, #128	@ 0x80
 80006f8:	4820      	ldr	r0, [pc, #128]	@ (800077c <off_state+0xc0>)
 80006fa:	f002 fc67 	bl	8002fcc <HAL_GPIO_WritePin>
	o_auxDCDCDisable = GPIO_PIN_RESET;
 80006fe:	4b22      	ldr	r3, [pc, #136]	@ (8000788 <off_state+0xcc>)
 8000700:	2200      	movs	r2, #0
 8000702:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(hvDCDCEnablePort,hvDCDCEnable,GPIO_PIN_RESET);
 8000704:	2200      	movs	r2, #0
 8000706:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800070a:	481c      	ldr	r0, [pc, #112]	@ (800077c <off_state+0xc0>)
 800070c:	f002 fc5e 	bl	8002fcc <HAL_GPIO_WritePin>
	o_hvDCDCEnable = GPIO_PIN_RESET;
 8000710:	4b1e      	ldr	r3, [pc, #120]	@ (800078c <off_state+0xd0>)
 8000712:	2200      	movs	r2, #0
 8000714:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(chargeIndicatorPort,chargeIndicator,RESET);
 8000716:	2200      	movs	r2, #0
 8000718:	2110      	movs	r1, #16
 800071a:	481d      	ldr	r0, [pc, #116]	@ (8000790 <off_state+0xd4>)
 800071c:	f002 fc56 	bl	8002fcc <HAL_GPIO_WritePin>
	o_chargeIndicator = GPIO_PIN_RESET;
 8000720:	4b1c      	ldr	r3, [pc, #112]	@ (8000794 <off_state+0xd8>)
 8000722:	2200      	movs	r2, #0
 8000724:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(faultIndicatorPort,faultIndicator,RESET);
 8000726:	2200      	movs	r2, #0
 8000728:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800072c:	481a      	ldr	r0, [pc, #104]	@ (8000798 <off_state+0xdc>)
 800072e:	f002 fc4d 	bl	8002fcc <HAL_GPIO_WritePin>
	o_faultIndicator = GPIO_PIN_RESET;
 8000732:	4b1a      	ldr	r3, [pc, #104]	@ (800079c <off_state+0xe0>)
 8000734:	2200      	movs	r2, #0
 8000736:	701a      	strb	r2, [r3, #0]

	updateAuxADC();
 8000738:	f000 fcde 	bl	80010f8 <updateAuxADC>
	//Changes States
	if ((i_keyACC != 0 ) && (i_chargeEnable != 0) && (i_disChargeEnable != 0) && (i_killSwitch != 1) && (ai_auxVoltage > UNDERVOLTAGE)){
 800073c:	4b18      	ldr	r3, [pc, #96]	@ (80007a0 <off_state+0xe4>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d015      	beq.n	8000770 <off_state+0xb4>
 8000744:	4b17      	ldr	r3, [pc, #92]	@ (80007a4 <off_state+0xe8>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d011      	beq.n	8000770 <off_state+0xb4>
 800074c:	4b16      	ldr	r3, [pc, #88]	@ (80007a8 <off_state+0xec>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d00d      	beq.n	8000770 <off_state+0xb4>
 8000754:	4b15      	ldr	r3, [pc, #84]	@ (80007ac <off_state+0xf0>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	2b01      	cmp	r3, #1
 800075a:	d009      	beq.n	8000770 <off_state+0xb4>
 800075c:	4b14      	ldr	r3, [pc, #80]	@ (80007b0 <off_state+0xf4>)
 800075e:	881b      	ldrh	r3, [r3, #0]
 8000760:	461a      	mov	r2, r3
 8000762:	f640 438a 	movw	r3, #3210	@ 0xc8a
 8000766:	429a      	cmp	r2, r3
 8000768:	dd02      	ble.n	8000770 <off_state+0xb4>
		currentState = ACC;
 800076a:	4b12      	ldr	r3, [pc, #72]	@ (80007b4 <off_state+0xf8>)
 800076c:	2201      	movs	r2, #1
 800076e:	701a      	strb	r2, [r3, #0]
	}
}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000284 	.word	0x20000284
 8000778:	2000027d 	.word	0x2000027d
 800077c:	40021000 	.word	0x40021000
 8000780:	20000299 	.word	0x20000299
 8000784:	20000298 	.word	0x20000298
 8000788:	20000295 	.word	0x20000295
 800078c:	20000294 	.word	0x20000294
 8000790:	40020c00 	.word	0x40020c00
 8000794:	20000296 	.word	0x20000296
 8000798:	40020800 	.word	0x40020800
 800079c:	20000297 	.word	0x20000297
 80007a0:	2000028e 	.word	0x2000028e
 80007a4:	20000291 	.word	0x20000291
 80007a8:	20000292 	.word	0x20000292
 80007ac:	2000028f 	.word	0x2000028f
 80007b0:	2000029e 	.word	0x2000029e
 80007b4:	2000027c 	.word	0x2000027c

080007b8 <acc_state>:


void acc_state(void){		// State 1
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
	if( lastState != ACC)
 80007bc:	4b2d      	ldr	r3, [pc, #180]	@ (8000874 <acc_state+0xbc>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d027      	beq.n	8000814 <acc_state+0x5c>
	{
		enterStateTime = HAL_GetTick();
 80007c4:	f001 fac2 	bl	8001d4c <HAL_GetTick>
 80007c8:	4603      	mov	r3, r0
 80007ca:	4a2b      	ldr	r2, [pc, #172]	@ (8000878 <acc_state+0xc0>)
 80007cc:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(preChargeRelayPort,preChargeRelay,GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007d4:	4829      	ldr	r0, [pc, #164]	@ (800087c <acc_state+0xc4>)
 80007d6:	f002 fbf9 	bl	8002fcc <HAL_GPIO_WritePin>
		o_preChargeRelay = GPIO_PIN_RESET;
 80007da:	4b29      	ldr	r3, [pc, #164]	@ (8000880 <acc_state+0xc8>)
 80007dc:	2200      	movs	r2, #0
 80007de:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(hvContactorPort,hvContactor,GPIO_PIN_RESET);
 80007e0:	2200      	movs	r2, #0
 80007e2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007e6:	4825      	ldr	r0, [pc, #148]	@ (800087c <acc_state+0xc4>)
 80007e8:	f002 fbf0 	bl	8002fcc <HAL_GPIO_WritePin>
		o_hvContactor = GPIO_PIN_RESET;
 80007ec:	4b25      	ldr	r3, [pc, #148]	@ (8000884 <acc_state+0xcc>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(auxDCDCDisablePort,auxDCDCDisable,GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2180      	movs	r1, #128	@ 0x80
 80007f6:	4821      	ldr	r0, [pc, #132]	@ (800087c <acc_state+0xc4>)
 80007f8:	f002 fbe8 	bl	8002fcc <HAL_GPIO_WritePin>
		o_auxDCDCDisable = GPIO_PIN_RESET;
 80007fc:	4b22      	ldr	r3, [pc, #136]	@ (8000888 <acc_state+0xd0>)
 80007fe:	2200      	movs	r2, #0
 8000800:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(hvDCDCEnablePort,hvDCDCEnable,GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000808:	481c      	ldr	r0, [pc, #112]	@ (800087c <acc_state+0xc4>)
 800080a:	f002 fbdf 	bl	8002fcc <HAL_GPIO_WritePin>
		o_hvDCDCEnable = GPIO_PIN_RESET;
 800080e:	4b1f      	ldr	r3, [pc, #124]	@ (800088c <acc_state+0xd4>)
 8000810:	2200      	movs	r2, #0
 8000812:	701a      	strb	r2, [r3, #0]
	}
	lastState = ACC;
 8000814:	4b17      	ldr	r3, [pc, #92]	@ (8000874 <acc_state+0xbc>)
 8000816:	2201      	movs	r2, #1
 8000818:	701a      	strb	r2, [r3, #0]

	currentTime = HAL_GetTick();
 800081a:	f001 fa97 	bl	8001d4c <HAL_GetTick>
 800081e:	4603      	mov	r3, r0
 8000820:	4a1b      	ldr	r2, [pc, #108]	@ (8000890 <acc_state+0xd8>)
 8000822:	6013      	str	r3, [r2, #0]
	// goes back to off if any one bit is wrong
	if((i_keyACC != 1) || (i_chargeEnable != 1) || (i_disChargeEnable != 1) || (i_killSwitch != 0))
 8000824:	4b1b      	ldr	r3, [pc, #108]	@ (8000894 <acc_state+0xdc>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2b01      	cmp	r3, #1
 800082a:	d10b      	bne.n	8000844 <acc_state+0x8c>
 800082c:	4b1a      	ldr	r3, [pc, #104]	@ (8000898 <acc_state+0xe0>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	2b01      	cmp	r3, #1
 8000832:	d107      	bne.n	8000844 <acc_state+0x8c>
 8000834:	4b19      	ldr	r3, [pc, #100]	@ (800089c <acc_state+0xe4>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	2b01      	cmp	r3, #1
 800083a:	d103      	bne.n	8000844 <acc_state+0x8c>
 800083c:	4b18      	ldr	r3, [pc, #96]	@ (80008a0 <acc_state+0xe8>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d002      	beq.n	800084a <acc_state+0x92>
		currentState = OFF; 			// No fault occurs
 8000844:	4b17      	ldr	r3, [pc, #92]	@ (80008a4 <acc_state+0xec>)
 8000846:	2200      	movs	r2, #0
 8000848:	701a      	strb	r2, [r3, #0]

	//Changes States
	if ((i_keyIGN != 0) && (i_disChargeEnable != 0) && (i_keyACC != 0) && (i_chargeEnable != 0))
 800084a:	4b17      	ldr	r3, [pc, #92]	@ (80008a8 <acc_state+0xf0>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d00e      	beq.n	8000870 <acc_state+0xb8>
 8000852:	4b12      	ldr	r3, [pc, #72]	@ (800089c <acc_state+0xe4>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d00a      	beq.n	8000870 <acc_state+0xb8>
 800085a:	4b0e      	ldr	r3, [pc, #56]	@ (8000894 <acc_state+0xdc>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d006      	beq.n	8000870 <acc_state+0xb8>
 8000862:	4b0d      	ldr	r3, [pc, #52]	@ (8000898 <acc_state+0xe0>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d002      	beq.n	8000870 <acc_state+0xb8>
	{
		currentState = IGN;
 800086a:	4b0e      	ldr	r3, [pc, #56]	@ (80008a4 <acc_state+0xec>)
 800086c:	2202      	movs	r2, #2
 800086e:	701a      	strb	r2, [r3, #0]
	}
}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}
 8000874:	2000027d 	.word	0x2000027d
 8000878:	20000280 	.word	0x20000280
 800087c:	40021000 	.word	0x40021000
 8000880:	20000299 	.word	0x20000299
 8000884:	20000298 	.word	0x20000298
 8000888:	20000295 	.word	0x20000295
 800088c:	20000294 	.word	0x20000294
 8000890:	20000284 	.word	0x20000284
 8000894:	2000028e 	.word	0x2000028e
 8000898:	20000291 	.word	0x20000291
 800089c:	20000292 	.word	0x20000292
 80008a0:	2000028f 	.word	0x2000028f
 80008a4:	2000027c 	.word	0x2000027c
 80008a8:	2000028d 	.word	0x2000028d

080008ac <ign_state>:


void ign_state(void){		// State 2
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0

	if( lastState == ACC )
 80008b0:	4b3a      	ldr	r3, [pc, #232]	@ (800099c <ign_state+0xf0>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d112      	bne.n	80008de <ign_state+0x32>
	{
		enterStateTime = HAL_GetTick();
 80008b8:	f001 fa48 	bl	8001d4c <HAL_GetTick>
 80008bc:	4603      	mov	r3, r0
 80008be:	4a38      	ldr	r2, [pc, #224]	@ (80009a0 <ign_state+0xf4>)
 80008c0:	6013      	str	r3, [r2, #0]

		HAL_GPIO_WritePin(preChargeRelayPort, preChargeRelay, GPIO_PIN_SET);
 80008c2:	2201      	movs	r2, #1
 80008c4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80008c8:	4836      	ldr	r0, [pc, #216]	@ (80009a4 <ign_state+0xf8>)
 80008ca:	f002 fb7f 	bl	8002fcc <HAL_GPIO_WritePin>
		o_preChargeRelay = GPIO_PIN_SET;
 80008ce:	4b36      	ldr	r3, [pc, #216]	@ (80009a8 <ign_state+0xfc>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(spareOutput3Port, spareOutput3, GPIO_PIN_SET); //why does this exist? test point?
 80008d4:	2201      	movs	r2, #1
 80008d6:	2140      	movs	r1, #64	@ 0x40
 80008d8:	4834      	ldr	r0, [pc, #208]	@ (80009ac <ign_state+0x100>)
 80008da:	f002 fb77 	bl	8002fcc <HAL_GPIO_WritePin>
	}
	lastState = IGN;
 80008de:	4b2f      	ldr	r3, [pc, #188]	@ (800099c <ign_state+0xf0>)
 80008e0:	2202      	movs	r2, #2
 80008e2:	701a      	strb	r2, [r3, #0]
	currentTime = HAL_GetTick();
 80008e4:	f001 fa32 	bl	8001d4c <HAL_GetTick>
 80008e8:	4603      	mov	r3, r0
 80008ea:	4a31      	ldr	r2, [pc, #196]	@ (80009b0 <ign_state+0x104>)
 80008ec:	6013      	str	r3, [r2, #0]

	// Key was not held long enough
	if (i_keyIGN != 1)
 80008ee:	4b31      	ldr	r3, [pc, #196]	@ (80009b4 <ign_state+0x108>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d003      	beq.n	80008fe <ign_state+0x52>
	{
		currentState = ACC;
 80008f6:	4b30      	ldr	r3, [pc, #192]	@ (80009b8 <ign_state+0x10c>)
 80008f8:	2201      	movs	r2, #1
 80008fa:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(hvContactorPort, hvContactor, GPIO_PIN_SET);
		o_hvContactor = GPIO_PIN_SET;

		currentState = DCDC;
	}
}
 80008fc:	e04b      	b.n	8000996 <ign_state+0xea>
	else if ((i_keyACC != 1) || (i_disChargeEnable != 1) || (i_chargeEnable != 1) || (i_killSwitch != 0))
 80008fe:	4b2f      	ldr	r3, [pc, #188]	@ (80009bc <ign_state+0x110>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2b01      	cmp	r3, #1
 8000904:	d10b      	bne.n	800091e <ign_state+0x72>
 8000906:	4b2e      	ldr	r3, [pc, #184]	@ (80009c0 <ign_state+0x114>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b01      	cmp	r3, #1
 800090c:	d107      	bne.n	800091e <ign_state+0x72>
 800090e:	4b2d      	ldr	r3, [pc, #180]	@ (80009c4 <ign_state+0x118>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	2b01      	cmp	r3, #1
 8000914:	d103      	bne.n	800091e <ign_state+0x72>
 8000916:	4b2c      	ldr	r3, [pc, #176]	@ (80009c8 <ign_state+0x11c>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d026      	beq.n	800096c <ign_state+0xc0>
		currentState = FAULT;
 800091e:	4b26      	ldr	r3, [pc, #152]	@ (80009b8 <ign_state+0x10c>)
 8000920:	2206      	movs	r2, #6
 8000922:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000924:	4b25      	ldr	r3, [pc, #148]	@ (80009bc <ign_state+0x110>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2b01      	cmp	r3, #1
 800092a:	d003      	beq.n	8000934 <ign_state+0x88>
			faultCode = 21;
 800092c:	4b27      	ldr	r3, [pc, #156]	@ (80009cc <ign_state+0x120>)
 800092e:	2215      	movs	r2, #21
 8000930:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000932:	e030      	b.n	8000996 <ign_state+0xea>
		else if (i_disChargeEnable != 1)
 8000934:	4b22      	ldr	r3, [pc, #136]	@ (80009c0 <ign_state+0x114>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b01      	cmp	r3, #1
 800093a:	d003      	beq.n	8000944 <ign_state+0x98>
			faultCode = 22;
 800093c:	4b23      	ldr	r3, [pc, #140]	@ (80009cc <ign_state+0x120>)
 800093e:	2216      	movs	r2, #22
 8000940:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000942:	e028      	b.n	8000996 <ign_state+0xea>
		else if (i_chargeEnable != 1)
 8000944:	4b1f      	ldr	r3, [pc, #124]	@ (80009c4 <ign_state+0x118>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b01      	cmp	r3, #1
 800094a:	d003      	beq.n	8000954 <ign_state+0xa8>
			faultCode = 23;
 800094c:	4b1f      	ldr	r3, [pc, #124]	@ (80009cc <ign_state+0x120>)
 800094e:	2217      	movs	r2, #23
 8000950:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000952:	e020      	b.n	8000996 <ign_state+0xea>
		else if (i_killSwitch != 0)
 8000954:	4b1c      	ldr	r3, [pc, #112]	@ (80009c8 <ign_state+0x11c>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d003      	beq.n	8000964 <ign_state+0xb8>
			faultCode = 24;
 800095c:	4b1b      	ldr	r3, [pc, #108]	@ (80009cc <ign_state+0x120>)
 800095e:	2218      	movs	r2, #24
 8000960:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000962:	e018      	b.n	8000996 <ign_state+0xea>
			faultCode = 29;
 8000964:	4b19      	ldr	r3, [pc, #100]	@ (80009cc <ign_state+0x120>)
 8000966:	221d      	movs	r2, #29
 8000968:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 800096a:	e014      	b.n	8000996 <ign_state+0xea>
	else if(currentTime - enterStateTime >= 4000)
 800096c:	4b10      	ldr	r3, [pc, #64]	@ (80009b0 <ign_state+0x104>)
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	4b0b      	ldr	r3, [pc, #44]	@ (80009a0 <ign_state+0xf4>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 800097a:	d30c      	bcc.n	8000996 <ign_state+0xea>
		HAL_GPIO_WritePin(hvContactorPort, hvContactor, GPIO_PIN_SET);
 800097c:	2201      	movs	r2, #1
 800097e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000982:	4808      	ldr	r0, [pc, #32]	@ (80009a4 <ign_state+0xf8>)
 8000984:	f002 fb22 	bl	8002fcc <HAL_GPIO_WritePin>
		o_hvContactor = GPIO_PIN_SET;
 8000988:	4b11      	ldr	r3, [pc, #68]	@ (80009d0 <ign_state+0x124>)
 800098a:	2201      	movs	r2, #1
 800098c:	701a      	strb	r2, [r3, #0]
		currentState = DCDC;
 800098e:	4b0a      	ldr	r3, [pc, #40]	@ (80009b8 <ign_state+0x10c>)
 8000990:	2203      	movs	r2, #3
 8000992:	701a      	strb	r2, [r3, #0]
}
 8000994:	e7ff      	b.n	8000996 <ign_state+0xea>
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	2000027d 	.word	0x2000027d
 80009a0:	20000280 	.word	0x20000280
 80009a4:	40021000 	.word	0x40021000
 80009a8:	20000299 	.word	0x20000299
 80009ac:	40020c00 	.word	0x40020c00
 80009b0:	20000284 	.word	0x20000284
 80009b4:	2000028d 	.word	0x2000028d
 80009b8:	2000027c 	.word	0x2000027c
 80009bc:	2000028e 	.word	0x2000028e
 80009c0:	20000292 	.word	0x20000292
 80009c4:	20000291 	.word	0x20000291
 80009c8:	2000028f 	.word	0x2000028f
 80009cc:	2000028c 	.word	0x2000028c
 80009d0:	20000298 	.word	0x20000298

080009d4 <dcdc_state>:


//Short state for the transition between the two DCDC's
void dcdc_state(void){		// State 3
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0


	if ( lastState == IGN )
 80009d8:	4b37      	ldr	r3, [pc, #220]	@ (8000ab8 <dcdc_state+0xe4>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	2b02      	cmp	r3, #2
 80009de:	d116      	bne.n	8000a0e <dcdc_state+0x3a>
	{
		enterStateTime = HAL_GetTick();
 80009e0:	f001 f9b4 	bl	8001d4c <HAL_GetTick>
 80009e4:	4603      	mov	r3, r0
 80009e6:	4a35      	ldr	r2, [pc, #212]	@ (8000abc <dcdc_state+0xe8>)
 80009e8:	6013      	str	r3, [r2, #0]

		HAL_GPIO_WritePin(hvDCDCEnablePort,hvDCDCEnable, GPIO_PIN_SET);
 80009ea:	2201      	movs	r2, #1
 80009ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009f0:	4833      	ldr	r0, [pc, #204]	@ (8000ac0 <dcdc_state+0xec>)
 80009f2:	f002 faeb 	bl	8002fcc <HAL_GPIO_WritePin>
		o_hvDCDCEnable = GPIO_PIN_SET;
 80009f6:	4b33      	ldr	r3, [pc, #204]	@ (8000ac4 <dcdc_state+0xf0>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(preChargeRelayPort,preChargeRelay, GPIO_PIN_RESET);
 80009fc:	2200      	movs	r2, #0
 80009fe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a02:	482f      	ldr	r0, [pc, #188]	@ (8000ac0 <dcdc_state+0xec>)
 8000a04:	f002 fae2 	bl	8002fcc <HAL_GPIO_WritePin>
		o_preChargeRelay = GPIO_PIN_RESET;
 8000a08:	4b2f      	ldr	r3, [pc, #188]	@ (8000ac8 <dcdc_state+0xf4>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	701a      	strb	r2, [r3, #0]
	}

	lastState = DCDC;
 8000a0e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ab8 <dcdc_state+0xe4>)
 8000a10:	2203      	movs	r2, #3
 8000a12:	701a      	strb	r2, [r3, #0]

	currentTime = HAL_GetTick();
 8000a14:	f001 f99a 	bl	8001d4c <HAL_GetTick>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	4a2c      	ldr	r2, [pc, #176]	@ (8000acc <dcdc_state+0xf8>)
 8000a1c:	6013      	str	r3, [r2, #0]
	// Check if any signal is missing --> FAULT State
	if ((i_keyACC != 1) || (i_disChargeEnable != 1) || (i_chargeEnable != 1) || (i_killSwitch != 0))
 8000a1e:	4b2c      	ldr	r3, [pc, #176]	@ (8000ad0 <dcdc_state+0xfc>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d10b      	bne.n	8000a3e <dcdc_state+0x6a>
 8000a26:	4b2b      	ldr	r3, [pc, #172]	@ (8000ad4 <dcdc_state+0x100>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d107      	bne.n	8000a3e <dcdc_state+0x6a>
 8000a2e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ad8 <dcdc_state+0x104>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d103      	bne.n	8000a3e <dcdc_state+0x6a>
 8000a36:	4b29      	ldr	r3, [pc, #164]	@ (8000adc <dcdc_state+0x108>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d026      	beq.n	8000a8c <dcdc_state+0xb8>
	{
		currentState = FAULT;
 8000a3e:	4b28      	ldr	r3, [pc, #160]	@ (8000ae0 <dcdc_state+0x10c>)
 8000a40:	2206      	movs	r2, #6
 8000a42:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000a44:	4b22      	ldr	r3, [pc, #136]	@ (8000ad0 <dcdc_state+0xfc>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d003      	beq.n	8000a54 <dcdc_state+0x80>
		{
			faultCode = 31;
 8000a4c:	4b25      	ldr	r3, [pc, #148]	@ (8000ae4 <dcdc_state+0x110>)
 8000a4e:	221f      	movs	r2, #31
 8000a50:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000a52:	e02f      	b.n	8000ab4 <dcdc_state+0xe0>
		}
		else if (i_disChargeEnable != 1)
 8000a54:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad4 <dcdc_state+0x100>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d003      	beq.n	8000a64 <dcdc_state+0x90>
		{
			faultCode = 32;
 8000a5c:	4b21      	ldr	r3, [pc, #132]	@ (8000ae4 <dcdc_state+0x110>)
 8000a5e:	2220      	movs	r2, #32
 8000a60:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000a62:	e027      	b.n	8000ab4 <dcdc_state+0xe0>
		}
		else if (i_chargeEnable != 1)
 8000a64:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad8 <dcdc_state+0x104>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d003      	beq.n	8000a74 <dcdc_state+0xa0>
		{
			faultCode = 33;
 8000a6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ae4 <dcdc_state+0x110>)
 8000a6e:	2221      	movs	r2, #33	@ 0x21
 8000a70:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000a72:	e01f      	b.n	8000ab4 <dcdc_state+0xe0>
		}
		else if (i_killSwitch != 0)
 8000a74:	4b19      	ldr	r3, [pc, #100]	@ (8000adc <dcdc_state+0x108>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d003      	beq.n	8000a84 <dcdc_state+0xb0>
		{
			faultCode = 34;
 8000a7c:	4b19      	ldr	r3, [pc, #100]	@ (8000ae4 <dcdc_state+0x110>)
 8000a7e:	2222      	movs	r2, #34	@ 0x22
 8000a80:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000a82:	e017      	b.n	8000ab4 <dcdc_state+0xe0>
		}
		else
		{
			faultCode = 39;
 8000a84:	4b17      	ldr	r3, [pc, #92]	@ (8000ae4 <dcdc_state+0x110>)
 8000a86:	2227      	movs	r2, #39	@ 0x27
 8000a88:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000a8a:	e013      	b.n	8000ab4 <dcdc_state+0xe0>
		}
	}
	// Switch off the AUX-DCDC after 1000 ms(1sec)
	else if (currentTime - enterStateTime >= 1000)
 8000a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000acc <dcdc_state+0xf8>)
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	4b0a      	ldr	r3, [pc, #40]	@ (8000abc <dcdc_state+0xe8>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	1ad3      	subs	r3, r2, r3
 8000a96:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000a9a:	d30b      	bcc.n	8000ab4 <dcdc_state+0xe0>
	{
		HAL_GPIO_WritePin(auxDCDCDisablePort,auxDCDCDisable, GPIO_PIN_SET);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	2180      	movs	r1, #128	@ 0x80
 8000aa0:	4807      	ldr	r0, [pc, #28]	@ (8000ac0 <dcdc_state+0xec>)
 8000aa2:	f002 fa93 	bl	8002fcc <HAL_GPIO_WritePin>
		o_auxDCDCDisable = GPIO_PIN_SET;
 8000aa6:	4b10      	ldr	r3, [pc, #64]	@ (8000ae8 <dcdc_state+0x114>)
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	701a      	strb	r2, [r3, #0]
		currentState = ON;
 8000aac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae0 <dcdc_state+0x10c>)
 8000aae:	2204      	movs	r2, #4
 8000ab0:	701a      	strb	r2, [r3, #0]
	}
}
 8000ab2:	e7ff      	b.n	8000ab4 <dcdc_state+0xe0>
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	2000027d 	.word	0x2000027d
 8000abc:	20000280 	.word	0x20000280
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	20000294 	.word	0x20000294
 8000ac8:	20000299 	.word	0x20000299
 8000acc:	20000284 	.word	0x20000284
 8000ad0:	2000028e 	.word	0x2000028e
 8000ad4:	20000292 	.word	0x20000292
 8000ad8:	20000291 	.word	0x20000291
 8000adc:	2000028f 	.word	0x2000028f
 8000ae0:	2000027c 	.word	0x2000027c
 8000ae4:	2000028c 	.word	0x2000028c
 8000ae8:	20000295 	.word	0x20000295

08000aec <on_state>:


void on_state(void){		// State 4 = DRIVING
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0


	if ( lastState == DCDC )
 8000af0:	4b29      	ldr	r3, [pc, #164]	@ (8000b98 <on_state+0xac>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b03      	cmp	r3, #3
 8000af6:	d104      	bne.n	8000b02 <on_state+0x16>
	{
		enterStateTime = HAL_GetTick();
 8000af8:	f001 f928 	bl	8001d4c <HAL_GetTick>
 8000afc:	4603      	mov	r3, r0
 8000afe:	4a27      	ldr	r2, [pc, #156]	@ (8000b9c <on_state+0xb0>)
 8000b00:	6013      	str	r3, [r2, #0]
	}
	lastState = ON;
 8000b02:	4b25      	ldr	r3, [pc, #148]	@ (8000b98 <on_state+0xac>)
 8000b04:	2204      	movs	r2, #4
 8000b06:	701a      	strb	r2, [r3, #0]

	currentTime = HAL_GetTick();
 8000b08:	f001 f920 	bl	8001d4c <HAL_GetTick>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	4a24      	ldr	r2, [pc, #144]	@ (8000ba0 <on_state+0xb4>)
 8000b10:	6013      	str	r3, [r2, #0]


	// SETS THE OUTPUTS!!!
	// Throttle pedal output function

	updatePedal();
 8000b12:	f000 fa81 	bl	8001018 <updatePedal>

	updateRegen();
 8000b16:	f000 fac7 	bl	80010a8 <updateRegen>


	// Go to FAULT_TEMP state because we might want to charge if disChargeEnable goes 0
	if (i_disChargeEnable != 1)
 8000b1a:	4b22      	ldr	r3, [pc, #136]	@ (8000ba4 <on_state+0xb8>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d002      	beq.n	8000b28 <on_state+0x3c>
	{
		currentState = FAULT_TEMP;
 8000b22:	4b21      	ldr	r3, [pc, #132]	@ (8000ba8 <on_state+0xbc>)
 8000b24:	2207      	movs	r2, #7
 8000b26:	701a      	strb	r2, [r3, #0]
	}

	// Check if any signal is missing --> FAULT State
	if ((i_keyACC != 1) || (i_chargeEnable != 1) || (i_chargeContactor != 0) || (i_killSwitch != 0))
 8000b28:	4b20      	ldr	r3, [pc, #128]	@ (8000bac <on_state+0xc0>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d10b      	bne.n	8000b48 <on_state+0x5c>
 8000b30:	4b1f      	ldr	r3, [pc, #124]	@ (8000bb0 <on_state+0xc4>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d107      	bne.n	8000b48 <on_state+0x5c>
 8000b38:	4b1e      	ldr	r3, [pc, #120]	@ (8000bb4 <on_state+0xc8>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d103      	bne.n	8000b48 <on_state+0x5c>
 8000b40:	4b1d      	ldr	r3, [pc, #116]	@ (8000bb8 <on_state+0xcc>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d025      	beq.n	8000b94 <on_state+0xa8>
	{
		currentState = FAULT;
 8000b48:	4b17      	ldr	r3, [pc, #92]	@ (8000ba8 <on_state+0xbc>)
 8000b4a:	2206      	movs	r2, #6
 8000b4c:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000b4e:	4b17      	ldr	r3, [pc, #92]	@ (8000bac <on_state+0xc0>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d003      	beq.n	8000b5e <on_state+0x72>
		{
			faultCode = 41;
 8000b56:	4b19      	ldr	r3, [pc, #100]	@ (8000bbc <on_state+0xd0>)
 8000b58:	2229      	movs	r2, #41	@ 0x29
 8000b5a:	701a      	strb	r2, [r3, #0]
		else
		{
			faultCode = 49;
		}
	}
}
 8000b5c:	e01a      	b.n	8000b94 <on_state+0xa8>
		else if (i_chargeEnable != 1)
 8000b5e:	4b14      	ldr	r3, [pc, #80]	@ (8000bb0 <on_state+0xc4>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d003      	beq.n	8000b6e <on_state+0x82>
			faultCode = 43;
 8000b66:	4b15      	ldr	r3, [pc, #84]	@ (8000bbc <on_state+0xd0>)
 8000b68:	222b      	movs	r2, #43	@ 0x2b
 8000b6a:	701a      	strb	r2, [r3, #0]
}
 8000b6c:	e012      	b.n	8000b94 <on_state+0xa8>
		else if (i_killSwitch != 0)
 8000b6e:	4b12      	ldr	r3, [pc, #72]	@ (8000bb8 <on_state+0xcc>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d003      	beq.n	8000b7e <on_state+0x92>
			faultCode = 44;
 8000b76:	4b11      	ldr	r3, [pc, #68]	@ (8000bbc <on_state+0xd0>)
 8000b78:	222c      	movs	r2, #44	@ 0x2c
 8000b7a:	701a      	strb	r2, [r3, #0]
}
 8000b7c:	e00a      	b.n	8000b94 <on_state+0xa8>
		else if (i_chargeContactor != 0)
 8000b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb4 <on_state+0xc8>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d003      	beq.n	8000b8e <on_state+0xa2>
			faultCode = 45;
 8000b86:	4b0d      	ldr	r3, [pc, #52]	@ (8000bbc <on_state+0xd0>)
 8000b88:	222d      	movs	r2, #45	@ 0x2d
 8000b8a:	701a      	strb	r2, [r3, #0]
}
 8000b8c:	e002      	b.n	8000b94 <on_state+0xa8>
			faultCode = 49;
 8000b8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000bbc <on_state+0xd0>)
 8000b90:	2231      	movs	r2, #49	@ 0x31
 8000b92:	701a      	strb	r2, [r3, #0]
}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	2000027d 	.word	0x2000027d
 8000b9c:	20000280 	.word	0x20000280
 8000ba0:	20000284 	.word	0x20000284
 8000ba4:	20000292 	.word	0x20000292
 8000ba8:	2000027c 	.word	0x2000027c
 8000bac:	2000028e 	.word	0x2000028e
 8000bb0:	20000291 	.word	0x20000291
 8000bb4:	20000290 	.word	0x20000290
 8000bb8:	2000028f 	.word	0x2000028f
 8000bbc:	2000028c 	.word	0x2000028c

08000bc0 <faultTemp_state>:

void faultTemp_state(void){			// State 7
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
	if (lastState == ON)
 8000bc4:	4b3f      	ldr	r3, [pc, #252]	@ (8000cc4 <faultTemp_state+0x104>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b04      	cmp	r3, #4
 8000bca:	d115      	bne.n	8000bf8 <faultTemp_state+0x38>
	{
		// Set fault indicator GPIO pin
		HAL_GPIO_WritePin(faultIndicatorPort, faultIndicator, GPIO_PIN_SET);
 8000bcc:	2201      	movs	r2, #1
 8000bce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bd2:	483d      	ldr	r0, [pc, #244]	@ (8000cc8 <faultTemp_state+0x108>)
 8000bd4:	f002 f9fa 	bl	8002fcc <HAL_GPIO_WritePin>
		o_faultIndicator = GPIO_PIN_SET;
 8000bd8:	4b3c      	ldr	r3, [pc, #240]	@ (8000ccc <faultTemp_state+0x10c>)
 8000bda:	2201      	movs	r2, #1
 8000bdc:	701a      	strb	r2, [r3, #0]

        //Reset auxDCDCDisable GPIO pin
        HAL_GPIO_WritePin(auxDCDCDisablePort,auxDCDCDisable, GPIO_PIN_RESET);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2180      	movs	r1, #128	@ 0x80
 8000be2:	483b      	ldr	r0, [pc, #236]	@ (8000cd0 <faultTemp_state+0x110>)
 8000be4:	f002 f9f2 	bl	8002fcc <HAL_GPIO_WritePin>
        o_auxDCDCDisable = GPIO_PIN_RESET;
 8000be8:	4b3a      	ldr	r3, [pc, #232]	@ (8000cd4 <faultTemp_state+0x114>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	701a      	strb	r2, [r3, #0]

		enterStateTime = HAL_GetTick();
 8000bee:	f001 f8ad 	bl	8001d4c <HAL_GetTick>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	4a38      	ldr	r2, [pc, #224]	@ (8000cd8 <faultTemp_state+0x118>)
 8000bf6:	6013      	str	r3, [r2, #0]
	}
	lastState = FAULT_TEMP;
 8000bf8:	4b32      	ldr	r3, [pc, #200]	@ (8000cc4 <faultTemp_state+0x104>)
 8000bfa:	2207      	movs	r2, #7
 8000bfc:	701a      	strb	r2, [r3, #0]

	currentTime = HAL_GetTick();
 8000bfe:	f001 f8a5 	bl	8001d4c <HAL_GetTick>
 8000c02:	4603      	mov	r3, r0
 8000c04:	4a35      	ldr	r2, [pc, #212]	@ (8000cdc <faultTemp_state+0x11c>)
 8000c06:	6013      	str	r3, [r2, #0]



    if (currentTime - enterStateTime >= 500) {
 8000c08:	4b34      	ldr	r3, [pc, #208]	@ (8000cdc <faultTemp_state+0x11c>)
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	4b32      	ldr	r3, [pc, #200]	@ (8000cd8 <faultTemp_state+0x118>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000c16:	d311      	bcc.n	8000c3c <faultTemp_state+0x7c>
        // Reset hvDCDCEnable GPIO pin after 500ms
        HAL_GPIO_WritePin(hvDCDCEnablePort, hvDCDCEnable, GPIO_PIN_RESET);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c1e:	482c      	ldr	r0, [pc, #176]	@ (8000cd0 <faultTemp_state+0x110>)
 8000c20:	f002 f9d4 	bl	8002fcc <HAL_GPIO_WritePin>
        o_hvDCDCEnable = GPIO_PIN_RESET;
 8000c24:	4b2e      	ldr	r3, [pc, #184]	@ (8000ce0 <faultTemp_state+0x120>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	701a      	strb	r2, [r3, #0]

        // Open HV Contactor
        HAL_GPIO_WritePin(hvContactorPort, hvContactor, GPIO_PIN_RESET);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c30:	4827      	ldr	r0, [pc, #156]	@ (8000cd0 <faultTemp_state+0x110>)
 8000c32:	f002 f9cb 	bl	8002fcc <HAL_GPIO_WritePin>
        o_hvContactor = GPIO_PIN_RESET;
 8000c36:	4b2b      	ldr	r3, [pc, #172]	@ (8000ce4 <faultTemp_state+0x124>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	701a      	strb	r2, [r3, #0]
    }

    // FAULT INDICATOR
    faultBlinker();
 8000c3c:	f000 fa72 	bl	8001124 <faultBlinker>

    // Switch to charging state because chargeContactor = 1
    if (i_chargeContactor == 1){
 8000c40:	4b29      	ldr	r3, [pc, #164]	@ (8000ce8 <faultTemp_state+0x128>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d103      	bne.n	8000c50 <faultTemp_state+0x90>
    	currentState = CHARGE;
 8000c48:	4b28      	ldr	r3, [pc, #160]	@ (8000cec <faultTemp_state+0x12c>)
 8000c4a:	2205      	movs	r2, #5
 8000c4c:	701a      	strb	r2, [r3, #0]
	{
		currentState = FAULT;
		faultCode = 72;
	}

}
 8000c4e:	e037      	b.n	8000cc0 <faultTemp_state+0x100>
    else if((i_keyACC != 1) || (i_chargeEnable != 1) || (i_killSwitch != 0))
 8000c50:	4b27      	ldr	r3, [pc, #156]	@ (8000cf0 <faultTemp_state+0x130>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d107      	bne.n	8000c68 <faultTemp_state+0xa8>
 8000c58:	4b26      	ldr	r3, [pc, #152]	@ (8000cf4 <faultTemp_state+0x134>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d103      	bne.n	8000c68 <faultTemp_state+0xa8>
 8000c60:	4b25      	ldr	r3, [pc, #148]	@ (8000cf8 <faultTemp_state+0x138>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d01a      	beq.n	8000c9e <faultTemp_state+0xde>
		currentState = FAULT;
 8000c68:	4b20      	ldr	r3, [pc, #128]	@ (8000cec <faultTemp_state+0x12c>)
 8000c6a:	2206      	movs	r2, #6
 8000c6c:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000c6e:	4b20      	ldr	r3, [pc, #128]	@ (8000cf0 <faultTemp_state+0x130>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d003      	beq.n	8000c7e <faultTemp_state+0xbe>
			faultCode = 71;
 8000c76:	4b21      	ldr	r3, [pc, #132]	@ (8000cfc <faultTemp_state+0x13c>)
 8000c78:	2247      	movs	r2, #71	@ 0x47
 8000c7a:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000c7c:	e01f      	b.n	8000cbe <faultTemp_state+0xfe>
		else if (i_chargeEnable != 1)
 8000c7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf4 <faultTemp_state+0x134>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d003      	beq.n	8000c8e <faultTemp_state+0xce>
			faultCode = 73;
 8000c86:	4b1d      	ldr	r3, [pc, #116]	@ (8000cfc <faultTemp_state+0x13c>)
 8000c88:	2249      	movs	r2, #73	@ 0x49
 8000c8a:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000c8c:	e017      	b.n	8000cbe <faultTemp_state+0xfe>
		else if (i_killSwitch != 0)
 8000c8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf8 <faultTemp_state+0x138>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d013      	beq.n	8000cbe <faultTemp_state+0xfe>
			faultCode = 75;
 8000c96:	4b19      	ldr	r3, [pc, #100]	@ (8000cfc <faultTemp_state+0x13c>)
 8000c98:	224b      	movs	r2, #75	@ 0x4b
 8000c9a:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000c9c:	e00f      	b.n	8000cbe <faultTemp_state+0xfe>
    else if (currentTime - enterStateTime >= 10000)
 8000c9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000cdc <faultTemp_state+0x11c>)
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd8 <faultTemp_state+0x118>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	1ad3      	subs	r3, r2, r3
 8000ca8:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d907      	bls.n	8000cc0 <faultTemp_state+0x100>
		currentState = FAULT;
 8000cb0:	4b0e      	ldr	r3, [pc, #56]	@ (8000cec <faultTemp_state+0x12c>)
 8000cb2:	2206      	movs	r2, #6
 8000cb4:	701a      	strb	r2, [r3, #0]
		faultCode = 72;
 8000cb6:	4b11      	ldr	r3, [pc, #68]	@ (8000cfc <faultTemp_state+0x13c>)
 8000cb8:	2248      	movs	r2, #72	@ 0x48
 8000cba:	701a      	strb	r2, [r3, #0]
}
 8000cbc:	e000      	b.n	8000cc0 <faultTemp_state+0x100>
		if (i_keyACC != 1)
 8000cbe:	bf00      	nop
}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	2000027d 	.word	0x2000027d
 8000cc8:	40020800 	.word	0x40020800
 8000ccc:	20000297 	.word	0x20000297
 8000cd0:	40021000 	.word	0x40021000
 8000cd4:	20000295 	.word	0x20000295
 8000cd8:	20000280 	.word	0x20000280
 8000cdc:	20000284 	.word	0x20000284
 8000ce0:	20000294 	.word	0x20000294
 8000ce4:	20000298 	.word	0x20000298
 8000ce8:	20000290 	.word	0x20000290
 8000cec:	2000027c 	.word	0x2000027c
 8000cf0:	2000028e 	.word	0x2000028e
 8000cf4:	20000291 	.word	0x20000291
 8000cf8:	2000028f 	.word	0x2000028f
 8000cfc:	2000028c 	.word	0x2000028c

08000d00 <charge_state>:

void charge_state(void){	// State 5
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0

	// Start charging routine by enabling AUX DCDC
	if (lastState == FAULT_TEMP)
 8000d04:	4b34      	ldr	r3, [pc, #208]	@ (8000dd8 <charge_state+0xd8>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2b07      	cmp	r3, #7
 8000d0a:	d11d      	bne.n	8000d48 <charge_state+0x48>
	{
        // Set auxDCDCDisable GPIO pin -> AUX-DCDC off
        HAL_GPIO_WritePin(auxDCDCDisablePort,auxDCDCDisable, GPIO_PIN_SET);
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	2180      	movs	r1, #128	@ 0x80
 8000d10:	4832      	ldr	r0, [pc, #200]	@ (8000ddc <charge_state+0xdc>)
 8000d12:	f002 f95b 	bl	8002fcc <HAL_GPIO_WritePin>
        o_auxDCDCDisable = GPIO_PIN_SET;
 8000d16:	4b32      	ldr	r3, [pc, #200]	@ (8000de0 <charge_state+0xe0>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	701a      	strb	r2, [r3, #0]

		// Reset fault indicator GPIO pin
		HAL_GPIO_WritePin(faultIndicatorPort, faultIndicator, GPIO_PIN_RESET);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d22:	4830      	ldr	r0, [pc, #192]	@ (8000de4 <charge_state+0xe4>)
 8000d24:	f002 f952 	bl	8002fcc <HAL_GPIO_WritePin>
		o_faultIndicator = GPIO_PIN_RESET;
 8000d28:	4b2f      	ldr	r3, [pc, #188]	@ (8000de8 <charge_state+0xe8>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	701a      	strb	r2, [r3, #0]

        // Set charge indicator GPIO pin
        HAL_GPIO_WritePin(chargeIndicatorPort, chargeIndicator, GPIO_PIN_SET);
 8000d2e:	2201      	movs	r2, #1
 8000d30:	2110      	movs	r1, #16
 8000d32:	482e      	ldr	r0, [pc, #184]	@ (8000dec <charge_state+0xec>)
 8000d34:	f002 f94a 	bl	8002fcc <HAL_GPIO_WritePin>
        o_chargeIndicator = GPIO_PIN_SET;
 8000d38:	4b2d      	ldr	r3, [pc, #180]	@ (8000df0 <charge_state+0xf0>)
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	701a      	strb	r2, [r3, #0]

		enterStateTime = HAL_GetTick();
 8000d3e:	f001 f805 	bl	8001d4c <HAL_GetTick>
 8000d42:	4603      	mov	r3, r0
 8000d44:	4a2b      	ldr	r2, [pc, #172]	@ (8000df4 <charge_state+0xf4>)
 8000d46:	6013      	str	r3, [r2, #0]
	}
	lastState = CHARGE;
 8000d48:	4b23      	ldr	r3, [pc, #140]	@ (8000dd8 <charge_state+0xd8>)
 8000d4a:	2205      	movs	r2, #5
 8000d4c:	701a      	strb	r2, [r3, #0]

	currentTime = HAL_GetTick();
 8000d4e:	f000 fffd 	bl	8001d4c <HAL_GetTick>
 8000d52:	4603      	mov	r3, r0
 8000d54:	4a28      	ldr	r2, [pc, #160]	@ (8000df8 <charge_state+0xf8>)
 8000d56:	6013      	str	r3, [r2, #0]

	if((i_keyACC != 1) || (i_chargeEnable != 1) || (i_disChargeEnable != 0)  || (i_killSwitch != 0))
 8000d58:	4b28      	ldr	r3, [pc, #160]	@ (8000dfc <charge_state+0xfc>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d10b      	bne.n	8000d78 <charge_state+0x78>
 8000d60:	4b27      	ldr	r3, [pc, #156]	@ (8000e00 <charge_state+0x100>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d107      	bne.n	8000d78 <charge_state+0x78>
 8000d68:	4b26      	ldr	r3, [pc, #152]	@ (8000e04 <charge_state+0x104>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d103      	bne.n	8000d78 <charge_state+0x78>
 8000d70:	4b25      	ldr	r3, [pc, #148]	@ (8000e08 <charge_state+0x108>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d02d      	beq.n	8000dd4 <charge_state+0xd4>
	{
		currentState = FAULT;
 8000d78:	4b24      	ldr	r3, [pc, #144]	@ (8000e0c <charge_state+0x10c>)
 8000d7a:	2206      	movs	r2, #6
 8000d7c:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000d7e:	4b1f      	ldr	r3, [pc, #124]	@ (8000dfc <charge_state+0xfc>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d003      	beq.n	8000d8e <charge_state+0x8e>
		{
			faultCode = 51;
 8000d86:	4b22      	ldr	r3, [pc, #136]	@ (8000e10 <charge_state+0x110>)
 8000d88:	2233      	movs	r2, #51	@ 0x33
 8000d8a:	701a      	strb	r2, [r3, #0]
		{
			faultCode = 59;
		}
	}

}
 8000d8c:	e022      	b.n	8000dd4 <charge_state+0xd4>
		else if (i_disChargeEnable != 0)
 8000d8e:	4b1d      	ldr	r3, [pc, #116]	@ (8000e04 <charge_state+0x104>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d003      	beq.n	8000d9e <charge_state+0x9e>
			faultCode = 52;
 8000d96:	4b1e      	ldr	r3, [pc, #120]	@ (8000e10 <charge_state+0x110>)
 8000d98:	2234      	movs	r2, #52	@ 0x34
 8000d9a:	701a      	strb	r2, [r3, #0]
}
 8000d9c:	e01a      	b.n	8000dd4 <charge_state+0xd4>
		else if (i_chargeEnable != 1)
 8000d9e:	4b18      	ldr	r3, [pc, #96]	@ (8000e00 <charge_state+0x100>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d003      	beq.n	8000dae <charge_state+0xae>
			faultCode = 53;
 8000da6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e10 <charge_state+0x110>)
 8000da8:	2235      	movs	r2, #53	@ 0x35
 8000daa:	701a      	strb	r2, [r3, #0]
}
 8000dac:	e012      	b.n	8000dd4 <charge_state+0xd4>
		else if (i_chargeContactor != 1)
 8000dae:	4b19      	ldr	r3, [pc, #100]	@ (8000e14 <charge_state+0x114>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d003      	beq.n	8000dbe <charge_state+0xbe>
			faultCode = 54;
 8000db6:	4b16      	ldr	r3, [pc, #88]	@ (8000e10 <charge_state+0x110>)
 8000db8:	2236      	movs	r2, #54	@ 0x36
 8000dba:	701a      	strb	r2, [r3, #0]
}
 8000dbc:	e00a      	b.n	8000dd4 <charge_state+0xd4>
		else if (i_killSwitch != 0)
 8000dbe:	4b12      	ldr	r3, [pc, #72]	@ (8000e08 <charge_state+0x108>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d003      	beq.n	8000dce <charge_state+0xce>
			faultCode = 55;
 8000dc6:	4b12      	ldr	r3, [pc, #72]	@ (8000e10 <charge_state+0x110>)
 8000dc8:	2237      	movs	r2, #55	@ 0x37
 8000dca:	701a      	strb	r2, [r3, #0]
}
 8000dcc:	e002      	b.n	8000dd4 <charge_state+0xd4>
			faultCode = 59;
 8000dce:	4b10      	ldr	r3, [pc, #64]	@ (8000e10 <charge_state+0x110>)
 8000dd0:	223b      	movs	r2, #59	@ 0x3b
 8000dd2:	701a      	strb	r2, [r3, #0]
}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	2000027d 	.word	0x2000027d
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	20000295 	.word	0x20000295
 8000de4:	40020800 	.word	0x40020800
 8000de8:	20000297 	.word	0x20000297
 8000dec:	40020c00 	.word	0x40020c00
 8000df0:	20000296 	.word	0x20000296
 8000df4:	20000280 	.word	0x20000280
 8000df8:	20000284 	.word	0x20000284
 8000dfc:	2000028e 	.word	0x2000028e
 8000e00:	20000291 	.word	0x20000291
 8000e04:	20000292 	.word	0x20000292
 8000e08:	2000028f 	.word	0x2000028f
 8000e0c:	2000027c 	.word	0x2000027c
 8000e10:	2000028c 	.word	0x2000028c
 8000e14:	20000290 	.word	0x20000290

08000e18 <fault_state>:


void fault_state(void) { // State 6
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0

    if (lastState != FAULT) {
 8000e1c:	4b28      	ldr	r3, [pc, #160]	@ (8000ec0 <fault_state+0xa8>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2b06      	cmp	r3, #6
 8000e22:	d029      	beq.n	8000e78 <fault_state+0x60>
        // Set fault indicator GPIO pin
        HAL_GPIO_WritePin(faultIndicatorPort, faultIndicator, GPIO_PIN_SET);
 8000e24:	2201      	movs	r2, #1
 8000e26:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e2a:	4826      	ldr	r0, [pc, #152]	@ (8000ec4 <fault_state+0xac>)
 8000e2c:	f002 f8ce 	bl	8002fcc <HAL_GPIO_WritePin>
        o_faultIndicator = GPIO_PIN_SET;
 8000e30:	4b25      	ldr	r3, [pc, #148]	@ (8000ec8 <fault_state+0xb0>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	701a      	strb	r2, [r3, #0]

        // Reset charge indicator GPIO pin
        HAL_GPIO_WritePin(chargeIndicatorPort, chargeIndicator, GPIO_PIN_RESET);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2110      	movs	r1, #16
 8000e3a:	4824      	ldr	r0, [pc, #144]	@ (8000ecc <fault_state+0xb4>)
 8000e3c:	f002 f8c6 	bl	8002fcc <HAL_GPIO_WritePin>
        o_chargeIndicator = GPIO_PIN_RESET;
 8000e40:	4b23      	ldr	r3, [pc, #140]	@ (8000ed0 <fault_state+0xb8>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	701a      	strb	r2, [r3, #0]

        // Reset pre-charge relay GPIO pin
        HAL_GPIO_WritePin(preChargeRelayPort, preChargeRelay, GPIO_PIN_RESET);
 8000e46:	2200      	movs	r2, #0
 8000e48:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e4c:	4821      	ldr	r0, [pc, #132]	@ (8000ed4 <fault_state+0xbc>)
 8000e4e:	f002 f8bd 	bl	8002fcc <HAL_GPIO_WritePin>
        o_preChargeRelay = GPIO_PIN_RESET;
 8000e52:	4b21      	ldr	r3, [pc, #132]	@ (8000ed8 <fault_state+0xc0>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	701a      	strb	r2, [r3, #0]

        //Reset auxDCDCDisable GPIO pin -> Aux-DCDC turns on
        HAL_GPIO_WritePin(auxDCDCDisablePort,auxDCDCDisable, GPIO_PIN_RESET);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2180      	movs	r1, #128	@ 0x80
 8000e5c:	481d      	ldr	r0, [pc, #116]	@ (8000ed4 <fault_state+0xbc>)
 8000e5e:	f002 f8b5 	bl	8002fcc <HAL_GPIO_WritePin>
        o_auxDCDCDisable = GPIO_PIN_RESET;
 8000e62:	4b1e      	ldr	r3, [pc, #120]	@ (8000edc <fault_state+0xc4>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	701a      	strb	r2, [r3, #0]

        // Update last state to FAULT
        lastState = FAULT;
 8000e68:	4b15      	ldr	r3, [pc, #84]	@ (8000ec0 <fault_state+0xa8>)
 8000e6a:	2206      	movs	r2, #6
 8000e6c:	701a      	strb	r2, [r3, #0]

        // Record the time when entering the FAULT state
        enterStateTime = HAL_GetTick();
 8000e6e:	f000 ff6d 	bl	8001d4c <HAL_GetTick>
 8000e72:	4603      	mov	r3, r0
 8000e74:	4a1a      	ldr	r2, [pc, #104]	@ (8000ee0 <fault_state+0xc8>)
 8000e76:	6013      	str	r3, [r2, #0]

    }

    currentTime = HAL_GetTick();
 8000e78:	f000 ff68 	bl	8001d4c <HAL_GetTick>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	4a19      	ldr	r2, [pc, #100]	@ (8000ee4 <fault_state+0xcc>)
 8000e80:	6013      	str	r3, [r2, #0]

    if (currentTime - enterStateTime >= 500) {
 8000e82:	4b18      	ldr	r3, [pc, #96]	@ (8000ee4 <fault_state+0xcc>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	4b16      	ldr	r3, [pc, #88]	@ (8000ee0 <fault_state+0xc8>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	1ad3      	subs	r3, r2, r3
 8000e8c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000e90:	d311      	bcc.n	8000eb6 <fault_state+0x9e>
        // Reset hvDCDCEnable GPIO pin after 500ms
        HAL_GPIO_WritePin(hvDCDCEnablePort, hvDCDCEnable, GPIO_PIN_RESET);
 8000e92:	2200      	movs	r2, #0
 8000e94:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e98:	480e      	ldr	r0, [pc, #56]	@ (8000ed4 <fault_state+0xbc>)
 8000e9a:	f002 f897 	bl	8002fcc <HAL_GPIO_WritePin>
        o_hvDCDCEnable = GPIO_PIN_RESET;
 8000e9e:	4b12      	ldr	r3, [pc, #72]	@ (8000ee8 <fault_state+0xd0>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	701a      	strb	r2, [r3, #0]

        // Open HV Contactor
        HAL_GPIO_WritePin(hvContactorPort, hvContactor, GPIO_PIN_RESET);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000eaa:	480a      	ldr	r0, [pc, #40]	@ (8000ed4 <fault_state+0xbc>)
 8000eac:	f002 f88e 	bl	8002fcc <HAL_GPIO_WritePin>
        o_hvContactor = GPIO_PIN_RESET;
 8000eb0:	4b0e      	ldr	r3, [pc, #56]	@ (8000eec <fault_state+0xd4>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	701a      	strb	r2, [r3, #0]
    }

    faultBlinker();
 8000eb6:	f000 f935 	bl	8001124 <faultBlinker>
    // FAULT INDICATOR
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	2000027d 	.word	0x2000027d
 8000ec4:	40020800 	.word	0x40020800
 8000ec8:	20000297 	.word	0x20000297
 8000ecc:	40020c00 	.word	0x40020c00
 8000ed0:	20000296 	.word	0x20000296
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	20000299 	.word	0x20000299
 8000edc:	20000295 	.word	0x20000295
 8000ee0:	20000280 	.word	0x20000280
 8000ee4:	20000284 	.word	0x20000284
 8000ee8:	20000294 	.word	0x20000294
 8000eec:	20000298 	.word	0x20000298

08000ef0 <debugMonitor>:

void debugMonitor(void)
{
 8000ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ef2:	f5ad 7d01 	sub.w	sp, sp, #516	@ 0x204
 8000ef6:	af0c      	add	r7, sp, #48	@ 0x30
	char  analogBuffer[200], outBuffer[240];
	//stateBuffer[240] inBuffer[300], outBuffer[240], outBufferOld[240,;
	//old unused  String arrays ^^^

	sprintf(analogBuffer, "\rPedalADC : %d PedalDAC: %d RegenADC: %d RegenDAC: %d\n",
 8000ef8:	4b33      	ldr	r3, [pc, #204]	@ (8000fc8 <debugMonitor+0xd8>)
 8000efa:	881b      	ldrh	r3, [r3, #0]
 8000efc:	4619      	mov	r1, r3
 8000efe:	4b33      	ldr	r3, [pc, #204]	@ (8000fcc <debugMonitor+0xdc>)
 8000f00:	881b      	ldrh	r3, [r3, #0]
 8000f02:	461c      	mov	r4, r3
 8000f04:	4b32      	ldr	r3, [pc, #200]	@ (8000fd0 <debugMonitor+0xe0>)
 8000f06:	881b      	ldrh	r3, [r3, #0]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4b32      	ldr	r3, [pc, #200]	@ (8000fd4 <debugMonitor+0xe4>)
 8000f0c:	881b      	ldrh	r3, [r3, #0]
 8000f0e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8000f12:	9301      	str	r3, [sp, #4]
 8000f14:	9200      	str	r2, [sp, #0]
 8000f16:	4623      	mov	r3, r4
 8000f18:	460a      	mov	r2, r1
 8000f1a:	492f      	ldr	r1, [pc, #188]	@ (8000fd8 <debugMonitor+0xe8>)
 8000f1c:	f008 f898 	bl	8009050 <siprintf>
			i_pedalADC, o_pedalDAC, i_regenADC, o_regenDAC);

	sprintf(outBuffer, "\rS: %d HVDCDCen+=%d AuxDCDCdi=%d ChgIn=%d FltIn=%d HV+Con=%d PChg=%d KeyIgn=%d KeyACC=%d DisChEn=%d KillSw=%d ChgEn=%d ChgCon=%d Code=%d\n",
 8000f20:	4b2e      	ldr	r3, [pc, #184]	@ (8000fdc <debugMonitor+0xec>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	469c      	mov	ip, r3
 8000f26:	4b2e      	ldr	r3, [pc, #184]	@ (8000fe0 <debugMonitor+0xf0>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	469e      	mov	lr, r3
 8000f2c:	4b2d      	ldr	r3, [pc, #180]	@ (8000fe4 <debugMonitor+0xf4>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	461a      	mov	r2, r3
 8000f32:	4b2d      	ldr	r3, [pc, #180]	@ (8000fe8 <debugMonitor+0xf8>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	4619      	mov	r1, r3
 8000f38:	4b2c      	ldr	r3, [pc, #176]	@ (8000fec <debugMonitor+0xfc>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	461c      	mov	r4, r3
 8000f3e:	4b2c      	ldr	r3, [pc, #176]	@ (8000ff0 <debugMonitor+0x100>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	461d      	mov	r5, r3
 8000f44:	4b2b      	ldr	r3, [pc, #172]	@ (8000ff4 <debugMonitor+0x104>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	461e      	mov	r6, r3
 8000f4a:	4b2b      	ldr	r3, [pc, #172]	@ (8000ff8 <debugMonitor+0x108>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	617b      	str	r3, [r7, #20]
 8000f50:	4b2a      	ldr	r3, [pc, #168]	@ (8000ffc <debugMonitor+0x10c>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	613b      	str	r3, [r7, #16]
 8000f56:	4b2a      	ldr	r3, [pc, #168]	@ (8001000 <debugMonitor+0x110>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	4b29      	ldr	r3, [pc, #164]	@ (8001004 <debugMonitor+0x114>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	60bb      	str	r3, [r7, #8]
 8000f62:	4b29      	ldr	r3, [pc, #164]	@ (8001008 <debugMonitor+0x118>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	4b28      	ldr	r3, [pc, #160]	@ (800100c <debugMonitor+0x11c>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	603b      	str	r3, [r7, #0]
 8000f6e:	4b28      	ldr	r3, [pc, #160]	@ (8001010 <debugMonitor+0x120>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	f107 0018 	add.w	r0, r7, #24
 8000f76:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	9308      	str	r3, [sp, #32]
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	9307      	str	r3, [sp, #28]
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	9306      	str	r3, [sp, #24]
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	9305      	str	r3, [sp, #20]
 8000f90:	9604      	str	r6, [sp, #16]
 8000f92:	9503      	str	r5, [sp, #12]
 8000f94:	9402      	str	r4, [sp, #8]
 8000f96:	9101      	str	r1, [sp, #4]
 8000f98:	9200      	str	r2, [sp, #0]
 8000f9a:	4673      	mov	r3, lr
 8000f9c:	4662      	mov	r2, ip
 8000f9e:	491d      	ldr	r1, [pc, #116]	@ (8001014 <debugMonitor+0x124>)
 8000fa0:	f008 f856 	bl	8009050 <siprintf>
//						currentState, i_chargeContactor,i_chargeEnable, o_hvDCDCEnable, o_auxDCDCDisable,o_chargeIndicator, o_faultIndicator, o_hvContactor, faultCode);

//	sprintf(outBuffer,"\rS: %d Discharge=%d KillSwitch= %d\n",
//			currentState, i_disChargeEnable, i_killSwitch);

	CDC_Transmit_FS((uint8_t*)outBuffer, strlen((char*)outBuffer));
 8000fa4:	f107 0318 	add.w	r3, r7, #24
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff f911 	bl	80001d0 <strlen>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	f107 0318 	add.w	r3, r7, #24
 8000fb4:	4611      	mov	r1, r2
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f007 fbe0 	bl	800877c <CDC_Transmit_FS>


}
 8000fbc:	bf00      	nop
 8000fbe:	f507 77ea 	add.w	r7, r7, #468	@ 0x1d4
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	2000029c 	.word	0x2000029c
 8000fcc:	2000029a 	.word	0x2000029a
 8000fd0:	200002a2 	.word	0x200002a2
 8000fd4:	200002a0 	.word	0x200002a0
 8000fd8:	080099a8 	.word	0x080099a8
 8000fdc:	2000027c 	.word	0x2000027c
 8000fe0:	20000294 	.word	0x20000294
 8000fe4:	20000295 	.word	0x20000295
 8000fe8:	20000296 	.word	0x20000296
 8000fec:	20000297 	.word	0x20000297
 8000ff0:	20000298 	.word	0x20000298
 8000ff4:	20000299 	.word	0x20000299
 8000ff8:	2000028d 	.word	0x2000028d
 8000ffc:	2000028e 	.word	0x2000028e
 8001000:	20000292 	.word	0x20000292
 8001004:	2000028f 	.word	0x2000028f
 8001008:	20000291 	.word	0x20000291
 800100c:	20000290 	.word	0x20000290
 8001010:	2000028c 	.word	0x2000028c
 8001014:	080099e0 	.word	0x080099e0

08001018 <updatePedal>:

void updatePedal(void){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0

    HAL_ADC_Start(&hadc1);
 800101c:	481e      	ldr	r0, [pc, #120]	@ (8001098 <updatePedal+0x80>)
 800101e:	f000 ff09 	bl	8001e34 <HAL_ADC_Start>
    HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8001022:	2100      	movs	r1, #0
 8001024:	481d      	ldr	r0, [pc, #116]	@ (800109c <updatePedal+0x84>)
 8001026:	f001 fd56 	bl	8002ad6 <HAL_DAC_Start>

    // Get input from PA0
    	i_pedalADC = HAL_ADC_GetValue(&hadc1);
 800102a:	481b      	ldr	r0, [pc, #108]	@ (8001098 <updatePedal+0x80>)
 800102c:	f000 ffd4 	bl	8001fd8 <HAL_ADC_GetValue>
 8001030:	4603      	mov	r3, r0
 8001032:	b29a      	uxth	r2, r3
 8001034:	4b1a      	ldr	r3, [pc, #104]	@ (80010a0 <updatePedal+0x88>)
 8001036:	801a      	strh	r2, [r3, #0]
    	//o_DAC = ( (i_ADC - min_ADC) * (max_DAC - min_DAC) )/(max_ADC - min_ADC)+ min_DAC
    	//o_DAC = max_DAC - o_DAC;

    	// map value_adc to the range 740-4095 to value dac range to 4095
    	// vaule_dac starts high then goes low(4095-->0)
        o_pedalDAC = ((i_pedalADC - MIN_ADC) * (MAX_DAC- MIN_DAC)) / (MAX_ADC - MIN_ADC) + MIN_DAC;
 8001038:	4b19      	ldr	r3, [pc, #100]	@ (80010a0 <updatePedal+0x88>)
 800103a:	881b      	ldrh	r3, [r3, #0]
 800103c:	461a      	mov	r2, r3
 800103e:	f240 2376 	movw	r3, #630	@ 0x276
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	f640 71ff 	movw	r1, #4095	@ 0xfff
 8001048:	2200      	movs	r2, #0
 800104a:	1a8a      	subs	r2, r1, r2
 800104c:	fb03 f202 	mul.w	r2, r3, r2
 8001050:	f640 713c 	movw	r1, #3900	@ 0xf3c
 8001054:	f240 2376 	movw	r3, #630	@ 0x276
 8001058:	1acb      	subs	r3, r1, r3
 800105a:	fb92 f3f3 	sdiv	r3, r2, r3
 800105e:	b29a      	uxth	r2, r3
 8001060:	2300      	movs	r3, #0
 8001062:	b29b      	uxth	r3, r3
 8001064:	4413      	add	r3, r2
 8001066:	b29a      	uxth	r2, r3
 8001068:	4b0e      	ldr	r3, [pc, #56]	@ (80010a4 <updatePedal+0x8c>)
 800106a:	801a      	strh	r2, [r3, #0]
        //invert value
        o_pedalDAC = MAX_DAC - o_pedalDAC;
 800106c:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8001070:	b29a      	uxth	r2, r3
 8001072:	4b0c      	ldr	r3, [pc, #48]	@ (80010a4 <updatePedal+0x8c>)
 8001074:	881b      	ldrh	r3, [r3, #0]
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	b29a      	uxth	r2, r3
 800107a:	4b0a      	ldr	r3, [pc, #40]	@ (80010a4 <updatePedal+0x8c>)
 800107c:	801a      	strh	r2, [r3, #0]

        // Outputting DAC value to PA4
        HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, o_pedalDAC);
 800107e:	4b09      	ldr	r3, [pc, #36]	@ (80010a4 <updatePedal+0x8c>)
 8001080:	881b      	ldrh	r3, [r3, #0]
 8001082:	2200      	movs	r2, #0
 8001084:	2100      	movs	r1, #0
 8001086:	4805      	ldr	r0, [pc, #20]	@ (800109c <updatePedal+0x84>)
 8001088:	f001 fd77 	bl	8002b7a <HAL_DAC_SetValue>
        HAL_Delay(1);
 800108c:	2001      	movs	r0, #1
 800108e:	f000 fe69 	bl	8001d64 <HAL_Delay>
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000168 	.word	0x20000168
 800109c:	20000268 	.word	0x20000268
 80010a0:	2000029c 	.word	0x2000029c
 80010a4:	2000029a 	.word	0x2000029a

080010a8 <updateRegen>:

void updateRegen(void) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0

            HAL_ADC_Start(&hadc2);
 80010ac:	480e      	ldr	r0, [pc, #56]	@ (80010e8 <updateRegen+0x40>)
 80010ae:	f000 fec1 	bl	8001e34 <HAL_ADC_Start>
            HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 80010b2:	2110      	movs	r1, #16
 80010b4:	480d      	ldr	r0, [pc, #52]	@ (80010ec <updateRegen+0x44>)
 80010b6:	f001 fd0e 	bl	8002ad6 <HAL_DAC_Start>

            	i_regenADC = HAL_ADC_GetValue(&hadc2);
 80010ba:	480b      	ldr	r0, [pc, #44]	@ (80010e8 <updateRegen+0x40>)
 80010bc:	f000 ff8c 	bl	8001fd8 <HAL_ADC_GetValue>
 80010c0:	4603      	mov	r3, r0
 80010c2:	b29a      	uxth	r2, r3
 80010c4:	4b0a      	ldr	r3, [pc, #40]	@ (80010f0 <updateRegen+0x48>)
 80010c6:	801a      	strh	r2, [r3, #0]

                // Map value_adc to the range 740-4095 to value_dac range 0-4095
                o_regenDAC = i_regenADC;
 80010c8:	4b09      	ldr	r3, [pc, #36]	@ (80010f0 <updateRegen+0x48>)
 80010ca:	881a      	ldrh	r2, [r3, #0]
 80010cc:	4b09      	ldr	r3, [pc, #36]	@ (80010f4 <updateRegen+0x4c>)
 80010ce:	801a      	strh	r2, [r3, #0]
                //throttle_pos = (uint32_t)((value_dac / 4096) * 100); // Truncate to integer
                // Output DAC value to PA
                HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, o_regenDAC);
 80010d0:	4b08      	ldr	r3, [pc, #32]	@ (80010f4 <updateRegen+0x4c>)
 80010d2:	881b      	ldrh	r3, [r3, #0]
 80010d4:	2200      	movs	r2, #0
 80010d6:	2110      	movs	r1, #16
 80010d8:	4804      	ldr	r0, [pc, #16]	@ (80010ec <updateRegen+0x44>)
 80010da:	f001 fd4e 	bl	8002b7a <HAL_DAC_SetValue>
                HAL_Delay(1);
 80010de:	2001      	movs	r0, #1
 80010e0:	f000 fe40 	bl	8001d64 <HAL_Delay>
}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	200001b0 	.word	0x200001b0
 80010ec:	20000268 	.word	0x20000268
 80010f0:	200002a2 	.word	0x200002a2
 80010f4:	200002a0 	.word	0x200002a0

080010f8 <updateAuxADC>:

void updateAuxADC(void){
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc3);
 80010fc:	4807      	ldr	r0, [pc, #28]	@ (800111c <updateAuxADC+0x24>)
 80010fe:	f000 fe99 	bl	8001e34 <HAL_ADC_Start>
	ai_auxVoltage = HAL_ADC_GetValue(&hadc3);			// Measure aux voltage and compare to threshold value
 8001102:	4806      	ldr	r0, [pc, #24]	@ (800111c <updateAuxADC+0x24>)
 8001104:	f000 ff68 	bl	8001fd8 <HAL_ADC_GetValue>
 8001108:	4603      	mov	r3, r0
 800110a:	b29a      	uxth	r2, r3
 800110c:	4b04      	ldr	r3, [pc, #16]	@ (8001120 <updateAuxADC+0x28>)
 800110e:	801a      	strh	r2, [r3, #0]
	HAL_Delay(1);
 8001110:	2001      	movs	r0, #1
 8001112:	f000 fe27 	bl	8001d64 <HAL_Delay>
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200001f8 	.word	0x200001f8
 8001120:	2000029e 	.word	0x2000029e

08001124 <faultBlinker>:

void faultBlinker(void) {
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
    // Blinks the Fault Indicator at 1.5 Hz (1.5p second on/off)
    if (currentTime - extraTime >= 750) {
 8001128:	4b12      	ldr	r3, [pc, #72]	@ (8001174 <faultBlinker+0x50>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4b12      	ldr	r3, [pc, #72]	@ (8001178 <faultBlinker+0x54>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	f240 22ed 	movw	r2, #749	@ 0x2ed
 8001136:	4293      	cmp	r3, r2
 8001138:	d91a      	bls.n	8001170 <faultBlinker+0x4c>

        // Toggle fault indicator GPIO pin
        if (o_faultIndicator == GPIO_PIN_RESET) { // Checks to see if Fault Light is OFF
 800113a:	4b10      	ldr	r3, [pc, #64]	@ (800117c <faultBlinker+0x58>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d109      	bne.n	8001156 <faultBlinker+0x32>

            // Turns on the Fault Light
            HAL_GPIO_WritePin(faultIndicatorPort, faultIndicator, GPIO_PIN_SET);
 8001142:	2201      	movs	r2, #1
 8001144:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001148:	480d      	ldr	r0, [pc, #52]	@ (8001180 <faultBlinker+0x5c>)
 800114a:	f001 ff3f 	bl	8002fcc <HAL_GPIO_WritePin>
            o_faultIndicator = GPIO_PIN_SET;
 800114e:	4b0b      	ldr	r3, [pc, #44]	@ (800117c <faultBlinker+0x58>)
 8001150:	2201      	movs	r2, #1
 8001152:	701a      	strb	r2, [r3, #0]
 8001154:	e008      	b.n	8001168 <faultBlinker+0x44>
        } else {
            // Turns off the Fault Light
            HAL_GPIO_WritePin(faultIndicatorPort, faultIndicator, GPIO_PIN_RESET);
 8001156:	2200      	movs	r2, #0
 8001158:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800115c:	4808      	ldr	r0, [pc, #32]	@ (8001180 <faultBlinker+0x5c>)
 800115e:	f001 ff35 	bl	8002fcc <HAL_GPIO_WritePin>
            o_faultIndicator = GPIO_PIN_RESET;
 8001162:	4b06      	ldr	r3, [pc, #24]	@ (800117c <faultBlinker+0x58>)
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]
        }

        extraTime = currentTime;
 8001168:	4b02      	ldr	r3, [pc, #8]	@ (8001174 <faultBlinker+0x50>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a02      	ldr	r2, [pc, #8]	@ (8001178 <faultBlinker+0x54>)
 800116e:	6013      	str	r3, [r2, #0]
    }


  /* USER CODE END 3 */
}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000284 	.word	0x20000284
 8001178:	20000288 	.word	0x20000288
 800117c:	20000297 	.word	0x20000297
 8001180:	40020800 	.word	0x40020800

08001184 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b094      	sub	sp, #80	@ 0x50
 8001188:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800118a:	f107 0320 	add.w	r3, r7, #32
 800118e:	2230      	movs	r2, #48	@ 0x30
 8001190:	2100      	movs	r1, #0
 8001192:	4618      	mov	r0, r3
 8001194:	f007 ff7c 	bl	8009090 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001198:	f107 030c 	add.w	r3, r7, #12
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a8:	2300      	movs	r3, #0
 80011aa:	60bb      	str	r3, [r7, #8]
 80011ac:	4b28      	ldr	r3, [pc, #160]	@ (8001250 <SystemClock_Config+0xcc>)
 80011ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b0:	4a27      	ldr	r2, [pc, #156]	@ (8001250 <SystemClock_Config+0xcc>)
 80011b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80011b8:	4b25      	ldr	r3, [pc, #148]	@ (8001250 <SystemClock_Config+0xcc>)
 80011ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011c0:	60bb      	str	r3, [r7, #8]
 80011c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011c4:	2300      	movs	r3, #0
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	4b22      	ldr	r3, [pc, #136]	@ (8001254 <SystemClock_Config+0xd0>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a21      	ldr	r2, [pc, #132]	@ (8001254 <SystemClock_Config+0xd0>)
 80011ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011d2:	6013      	str	r3, [r2, #0]
 80011d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001254 <SystemClock_Config+0xd0>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011dc:	607b      	str	r3, [r7, #4]
 80011de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011e0:	2301      	movs	r3, #1
 80011e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011e8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ea:	2302      	movs	r3, #2
 80011ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011ee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80011f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011f4:	2308      	movs	r3, #8
 80011f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011f8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80011fc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011fe:	2302      	movs	r3, #2
 8001200:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001202:	2307      	movs	r3, #7
 8001204:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001206:	f107 0320 	add.w	r3, r7, #32
 800120a:	4618      	mov	r0, r3
 800120c:	f003 f974 	bl	80044f8 <HAL_RCC_OscConfig>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001216:	f000 fb27 	bl	8001868 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800121a:	230f      	movs	r3, #15
 800121c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800121e:	2302      	movs	r3, #2
 8001220:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001222:	2300      	movs	r3, #0
 8001224:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001226:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800122a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800122c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001230:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001232:	f107 030c 	add.w	r3, r7, #12
 8001236:	2105      	movs	r1, #5
 8001238:	4618      	mov	r0, r3
 800123a:	f003 fbd5 	bl	80049e8 <HAL_RCC_ClockConfig>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001244:	f000 fb10 	bl	8001868 <Error_Handler>
  }
}
 8001248:	bf00      	nop
 800124a:	3750      	adds	r7, #80	@ 0x50
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40023800 	.word	0x40023800
 8001254:	40007000 	.word	0x40007000

08001258 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800125e:	463b      	mov	r3, r7
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800126a:	4b21      	ldr	r3, [pc, #132]	@ (80012f0 <MX_ADC1_Init+0x98>)
 800126c:	4a21      	ldr	r2, [pc, #132]	@ (80012f4 <MX_ADC1_Init+0x9c>)
 800126e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001270:	4b1f      	ldr	r3, [pc, #124]	@ (80012f0 <MX_ADC1_Init+0x98>)
 8001272:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001276:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001278:	4b1d      	ldr	r3, [pc, #116]	@ (80012f0 <MX_ADC1_Init+0x98>)
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800127e:	4b1c      	ldr	r3, [pc, #112]	@ (80012f0 <MX_ADC1_Init+0x98>)
 8001280:	2200      	movs	r2, #0
 8001282:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001284:	4b1a      	ldr	r3, [pc, #104]	@ (80012f0 <MX_ADC1_Init+0x98>)
 8001286:	2201      	movs	r2, #1
 8001288:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800128a:	4b19      	ldr	r3, [pc, #100]	@ (80012f0 <MX_ADC1_Init+0x98>)
 800128c:	2200      	movs	r2, #0
 800128e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001292:	4b17      	ldr	r3, [pc, #92]	@ (80012f0 <MX_ADC1_Init+0x98>)
 8001294:	2200      	movs	r2, #0
 8001296:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001298:	4b15      	ldr	r3, [pc, #84]	@ (80012f0 <MX_ADC1_Init+0x98>)
 800129a:	4a17      	ldr	r2, [pc, #92]	@ (80012f8 <MX_ADC1_Init+0xa0>)
 800129c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800129e:	4b14      	ldr	r3, [pc, #80]	@ (80012f0 <MX_ADC1_Init+0x98>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80012a4:	4b12      	ldr	r3, [pc, #72]	@ (80012f0 <MX_ADC1_Init+0x98>)
 80012a6:	2201      	movs	r2, #1
 80012a8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012aa:	4b11      	ldr	r3, [pc, #68]	@ (80012f0 <MX_ADC1_Init+0x98>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012b2:	4b0f      	ldr	r3, [pc, #60]	@ (80012f0 <MX_ADC1_Init+0x98>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012b8:	480d      	ldr	r0, [pc, #52]	@ (80012f0 <MX_ADC1_Init+0x98>)
 80012ba:	f000 fd77 	bl	8001dac <HAL_ADC_Init>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80012c4:	f000 fad0 	bl	8001868 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012c8:	2301      	movs	r3, #1
 80012ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012cc:	2301      	movs	r3, #1
 80012ce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80012d0:	2301      	movs	r3, #1
 80012d2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012d4:	463b      	mov	r3, r7
 80012d6:	4619      	mov	r1, r3
 80012d8:	4805      	ldr	r0, [pc, #20]	@ (80012f0 <MX_ADC1_Init+0x98>)
 80012da:	f000 fe8b 	bl	8001ff4 <HAL_ADC_ConfigChannel>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80012e4:	f000 fac0 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012e8:	bf00      	nop
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000168 	.word	0x20000168
 80012f4:	40012000 	.word	0x40012000
 80012f8:	0f000001 	.word	0x0f000001

080012fc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001302:	463b      	mov	r3, r7
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800130e:	4b21      	ldr	r3, [pc, #132]	@ (8001394 <MX_ADC2_Init+0x98>)
 8001310:	4a21      	ldr	r2, [pc, #132]	@ (8001398 <MX_ADC2_Init+0x9c>)
 8001312:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001314:	4b1f      	ldr	r3, [pc, #124]	@ (8001394 <MX_ADC2_Init+0x98>)
 8001316:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800131a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800131c:	4b1d      	ldr	r3, [pc, #116]	@ (8001394 <MX_ADC2_Init+0x98>)
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001322:	4b1c      	ldr	r3, [pc, #112]	@ (8001394 <MX_ADC2_Init+0x98>)
 8001324:	2200      	movs	r2, #0
 8001326:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001328:	4b1a      	ldr	r3, [pc, #104]	@ (8001394 <MX_ADC2_Init+0x98>)
 800132a:	2201      	movs	r2, #1
 800132c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800132e:	4b19      	ldr	r3, [pc, #100]	@ (8001394 <MX_ADC2_Init+0x98>)
 8001330:	2200      	movs	r2, #0
 8001332:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001336:	4b17      	ldr	r3, [pc, #92]	@ (8001394 <MX_ADC2_Init+0x98>)
 8001338:	2200      	movs	r2, #0
 800133a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800133c:	4b15      	ldr	r3, [pc, #84]	@ (8001394 <MX_ADC2_Init+0x98>)
 800133e:	4a17      	ldr	r2, [pc, #92]	@ (800139c <MX_ADC2_Init+0xa0>)
 8001340:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001342:	4b14      	ldr	r3, [pc, #80]	@ (8001394 <MX_ADC2_Init+0x98>)
 8001344:	2200      	movs	r2, #0
 8001346:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001348:	4b12      	ldr	r3, [pc, #72]	@ (8001394 <MX_ADC2_Init+0x98>)
 800134a:	2201      	movs	r2, #1
 800134c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800134e:	4b11      	ldr	r3, [pc, #68]	@ (8001394 <MX_ADC2_Init+0x98>)
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001356:	4b0f      	ldr	r3, [pc, #60]	@ (8001394 <MX_ADC2_Init+0x98>)
 8001358:	2201      	movs	r2, #1
 800135a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800135c:	480d      	ldr	r0, [pc, #52]	@ (8001394 <MX_ADC2_Init+0x98>)
 800135e:	f000 fd25 	bl	8001dac <HAL_ADC_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001368:	f000 fa7e 	bl	8001868 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800136c:	2302      	movs	r3, #2
 800136e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001370:	2301      	movs	r3, #1
 8001372:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001374:	2300      	movs	r3, #0
 8001376:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001378:	463b      	mov	r3, r7
 800137a:	4619      	mov	r1, r3
 800137c:	4805      	ldr	r0, [pc, #20]	@ (8001394 <MX_ADC2_Init+0x98>)
 800137e:	f000 fe39 	bl	8001ff4 <HAL_ADC_ConfigChannel>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001388:	f000 fa6e 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800138c:	bf00      	nop
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	200001b0 	.word	0x200001b0
 8001398:	40012100 	.word	0x40012100
 800139c:	0f000001 	.word	0x0f000001

080013a0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013a6:	463b      	mov	r3, r7
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80013b2:	4b21      	ldr	r3, [pc, #132]	@ (8001438 <MX_ADC3_Init+0x98>)
 80013b4:	4a21      	ldr	r2, [pc, #132]	@ (800143c <MX_ADC3_Init+0x9c>)
 80013b6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001438 <MX_ADC3_Init+0x98>)
 80013ba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80013be:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80013c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001438 <MX_ADC3_Init+0x98>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80013c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001438 <MX_ADC3_Init+0x98>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80013cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001438 <MX_ADC3_Init+0x98>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80013d2:	4b19      	ldr	r3, [pc, #100]	@ (8001438 <MX_ADC3_Init+0x98>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013da:	4b17      	ldr	r3, [pc, #92]	@ (8001438 <MX_ADC3_Init+0x98>)
 80013dc:	2200      	movs	r2, #0
 80013de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013e0:	4b15      	ldr	r3, [pc, #84]	@ (8001438 <MX_ADC3_Init+0x98>)
 80013e2:	4a17      	ldr	r2, [pc, #92]	@ (8001440 <MX_ADC3_Init+0xa0>)
 80013e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013e6:	4b14      	ldr	r3, [pc, #80]	@ (8001438 <MX_ADC3_Init+0x98>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80013ec:	4b12      	ldr	r3, [pc, #72]	@ (8001438 <MX_ADC3_Init+0x98>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80013f2:	4b11      	ldr	r3, [pc, #68]	@ (8001438 <MX_ADC3_Init+0x98>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001438 <MX_ADC3_Init+0x98>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001400:	480d      	ldr	r0, [pc, #52]	@ (8001438 <MX_ADC3_Init+0x98>)
 8001402:	f000 fcd3 	bl	8001dac <HAL_ADC_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800140c:	f000 fa2c 	bl	8001868 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001410:	230c      	movs	r3, #12
 8001412:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001414:	2301      	movs	r3, #1
 8001416:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001418:	2300      	movs	r3, #0
 800141a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800141c:	463b      	mov	r3, r7
 800141e:	4619      	mov	r1, r3
 8001420:	4805      	ldr	r0, [pc, #20]	@ (8001438 <MX_ADC3_Init+0x98>)
 8001422:	f000 fde7 	bl	8001ff4 <HAL_ADC_ConfigChannel>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800142c:	f000 fa1c 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001430:	bf00      	nop
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	200001f8 	.word	0x200001f8
 800143c:	40012200 	.word	0x40012200
 8001440:	0f000001 	.word	0x0f000001

08001444 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001448:	4b34      	ldr	r3, [pc, #208]	@ (800151c <MX_CAN1_Init+0xd8>)
 800144a:	4a35      	ldr	r2, [pc, #212]	@ (8001520 <MX_CAN1_Init+0xdc>)
 800144c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800144e:	4b33      	ldr	r3, [pc, #204]	@ (800151c <MX_CAN1_Init+0xd8>)
 8001450:	2210      	movs	r2, #16
 8001452:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001454:	4b31      	ldr	r3, [pc, #196]	@ (800151c <MX_CAN1_Init+0xd8>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800145a:	4b30      	ldr	r3, [pc, #192]	@ (800151c <MX_CAN1_Init+0xd8>)
 800145c:	2200      	movs	r2, #0
 800145e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001460:	4b2e      	ldr	r3, [pc, #184]	@ (800151c <MX_CAN1_Init+0xd8>)
 8001462:	2200      	movs	r2, #0
 8001464:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001466:	4b2d      	ldr	r3, [pc, #180]	@ (800151c <MX_CAN1_Init+0xd8>)
 8001468:	2200      	movs	r2, #0
 800146a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800146c:	4b2b      	ldr	r3, [pc, #172]	@ (800151c <MX_CAN1_Init+0xd8>)
 800146e:	2200      	movs	r2, #0
 8001470:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001472:	4b2a      	ldr	r3, [pc, #168]	@ (800151c <MX_CAN1_Init+0xd8>)
 8001474:	2200      	movs	r2, #0
 8001476:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001478:	4b28      	ldr	r3, [pc, #160]	@ (800151c <MX_CAN1_Init+0xd8>)
 800147a:	2200      	movs	r2, #0
 800147c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800147e:	4b27      	ldr	r3, [pc, #156]	@ (800151c <MX_CAN1_Init+0xd8>)
 8001480:	2200      	movs	r2, #0
 8001482:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001484:	4b25      	ldr	r3, [pc, #148]	@ (800151c <MX_CAN1_Init+0xd8>)
 8001486:	2200      	movs	r2, #0
 8001488:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800148a:	4b24      	ldr	r3, [pc, #144]	@ (800151c <MX_CAN1_Init+0xd8>)
 800148c:	2200      	movs	r2, #0
 800148e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001490:	4822      	ldr	r0, [pc, #136]	@ (800151c <MX_CAN1_Init+0xd8>)
 8001492:	f000 ffcd 	bl	8002430 <HAL_CAN_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 800149c:	f000 f9e4 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  //Sets Up the First part of the CAN FRAME
  TxHeader.IDE = CAN_ID_STD;
 80014a0:	4b20      	ldr	r3, [pc, #128]	@ (8001524 <MX_CAN1_Init+0xe0>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
  TxHeader.StdId = 0x420;
 80014a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001524 <MX_CAN1_Init+0xe0>)
 80014a8:	f44f 6284 	mov.w	r2, #1056	@ 0x420
 80014ac:	601a      	str	r2, [r3, #0]
  TxHeader.RTR = CAN_RTR_DATA;
 80014ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001524 <MX_CAN1_Init+0xe0>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	60da      	str	r2, [r3, #12]
  TxHeader.DLC = 8;
 80014b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001524 <MX_CAN1_Init+0xe0>)
 80014b6:	2208      	movs	r2, #8
 80014b8:	611a      	str	r2, [r3, #16]

  Filter.FilterActivation = CAN_FILTER_ENABLE;
 80014ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001528 <MX_CAN1_Init+0xe4>)
 80014bc:	2201      	movs	r2, #1
 80014be:	621a      	str	r2, [r3, #32]
  Filter.FilterBank = 0;
 80014c0:	4b19      	ldr	r3, [pc, #100]	@ (8001528 <MX_CAN1_Init+0xe4>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	615a      	str	r2, [r3, #20]
  Filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80014c6:	4b18      	ldr	r3, [pc, #96]	@ (8001528 <MX_CAN1_Init+0xe4>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	611a      	str	r2, [r3, #16]
  Filter.FilterIdHigh = 0x0000;
 80014cc:	4b16      	ldr	r3, [pc, #88]	@ (8001528 <MX_CAN1_Init+0xe4>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
  Filter.FilterIdLow = 0x0000;
 80014d2:	4b15      	ldr	r3, [pc, #84]	@ (8001528 <MX_CAN1_Init+0xe4>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	605a      	str	r2, [r3, #4]
  Filter.FilterMaskIdHigh = 0x0000;
 80014d8:	4b13      	ldr	r3, [pc, #76]	@ (8001528 <MX_CAN1_Init+0xe4>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
  Filter.FilterMaskIdLow = 0x0000;
 80014de:	4b12      	ldr	r3, [pc, #72]	@ (8001528 <MX_CAN1_Init+0xe4>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	60da      	str	r2, [r3, #12]
  Filter.FilterMode = CAN_FILTERMODE_IDMASK;
 80014e4:	4b10      	ldr	r3, [pc, #64]	@ (8001528 <MX_CAN1_Init+0xe4>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	619a      	str	r2, [r3, #24]
  Filter.FilterScale = CAN_FILTERSCALE_32BIT;
 80014ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001528 <MX_CAN1_Init+0xe4>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	61da      	str	r2, [r3, #28]
  Filter.SlaveStartFilterBank = 14;
 80014f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001528 <MX_CAN1_Init+0xe4>)
 80014f2:	220e      	movs	r2, #14
 80014f4:	625a      	str	r2, [r3, #36]	@ 0x24

  if (HAL_CAN_ConfigFilter(&hcan1, &Filter) != HAL_OK){
 80014f6:	490c      	ldr	r1, [pc, #48]	@ (8001528 <MX_CAN1_Init+0xe4>)
 80014f8:	4808      	ldr	r0, [pc, #32]	@ (800151c <MX_CAN1_Init+0xd8>)
 80014fa:	f001 f895 	bl	8002628 <HAL_CAN_ConfigFilter>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_CAN1_Init+0xc4>
	  Error_Handler();
 8001504:	f000 f9b0 	bl	8001868 <Error_Handler>
  }
  if(HAL_CAN_Start(&hcan1)!= HAL_OK){
 8001508:	4804      	ldr	r0, [pc, #16]	@ (800151c <MX_CAN1_Init+0xd8>)
 800150a:	f001 f96d 	bl	80027e8 <HAL_CAN_Start>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_CAN1_Init+0xd4>
	  Error_Handler();
 8001514:	f000 f9a8 	bl	8001868 <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20000240 	.word	0x20000240
 8001520:	40006400 	.word	0x40006400
 8001524:	200002cc 	.word	0x200002cc
 8001528:	200002a4 	.word	0x200002a4

0800152c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001532:	463b      	mov	r3, r7
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800153a:	4b14      	ldr	r3, [pc, #80]	@ (800158c <MX_DAC_Init+0x60>)
 800153c:	4a14      	ldr	r2, [pc, #80]	@ (8001590 <MX_DAC_Init+0x64>)
 800153e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001540:	4812      	ldr	r0, [pc, #72]	@ (800158c <MX_DAC_Init+0x60>)
 8001542:	f001 faa6 	bl	8002a92 <HAL_DAC_Init>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800154c:	f000 f98c 	bl	8001868 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001550:	2300      	movs	r3, #0
 8001552:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001554:	2300      	movs	r3, #0
 8001556:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001558:	463b      	mov	r3, r7
 800155a:	2200      	movs	r2, #0
 800155c:	4619      	mov	r1, r3
 800155e:	480b      	ldr	r0, [pc, #44]	@ (800158c <MX_DAC_Init+0x60>)
 8001560:	f001 fb30 	bl	8002bc4 <HAL_DAC_ConfigChannel>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800156a:	f000 f97d 	bl	8001868 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800156e:	463b      	mov	r3, r7
 8001570:	2210      	movs	r2, #16
 8001572:	4619      	mov	r1, r3
 8001574:	4805      	ldr	r0, [pc, #20]	@ (800158c <MX_DAC_Init+0x60>)
 8001576:	f001 fb25 	bl	8002bc4 <HAL_DAC_ConfigChannel>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8001580:	f000 f972 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001584:	bf00      	nop
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20000268 	.word	0x20000268
 8001590:	40007400 	.word	0x40007400

08001594 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08c      	sub	sp, #48	@ 0x30
 8001598:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159a:	f107 031c 	add.w	r3, r7, #28
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	605a      	str	r2, [r3, #4]
 80015a4:	609a      	str	r2, [r3, #8]
 80015a6:	60da      	str	r2, [r3, #12]
 80015a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	61bb      	str	r3, [r7, #24]
 80015ae:	4ba8      	ldr	r3, [pc, #672]	@ (8001850 <MX_GPIO_Init+0x2bc>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b2:	4aa7      	ldr	r2, [pc, #668]	@ (8001850 <MX_GPIO_Init+0x2bc>)
 80015b4:	f043 0310 	orr.w	r3, r3, #16
 80015b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ba:	4ba5      	ldr	r3, [pc, #660]	@ (8001850 <MX_GPIO_Init+0x2bc>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015be:	f003 0310 	and.w	r3, r3, #16
 80015c2:	61bb      	str	r3, [r7, #24]
 80015c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	617b      	str	r3, [r7, #20]
 80015ca:	4ba1      	ldr	r3, [pc, #644]	@ (8001850 <MX_GPIO_Init+0x2bc>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ce:	4aa0      	ldr	r2, [pc, #640]	@ (8001850 <MX_GPIO_Init+0x2bc>)
 80015d0:	f043 0304 	orr.w	r3, r3, #4
 80015d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015d6:	4b9e      	ldr	r3, [pc, #632]	@ (8001850 <MX_GPIO_Init+0x2bc>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015da:	f003 0304 	and.w	r3, r3, #4
 80015de:	617b      	str	r3, [r7, #20]
 80015e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	613b      	str	r3, [r7, #16]
 80015e6:	4b9a      	ldr	r3, [pc, #616]	@ (8001850 <MX_GPIO_Init+0x2bc>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ea:	4a99      	ldr	r2, [pc, #612]	@ (8001850 <MX_GPIO_Init+0x2bc>)
 80015ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015f2:	4b97      	ldr	r3, [pc, #604]	@ (8001850 <MX_GPIO_Init+0x2bc>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015fa:	613b      	str	r3, [r7, #16]
 80015fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	4b93      	ldr	r3, [pc, #588]	@ (8001850 <MX_GPIO_Init+0x2bc>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001606:	4a92      	ldr	r2, [pc, #584]	@ (8001850 <MX_GPIO_Init+0x2bc>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	6313      	str	r3, [r2, #48]	@ 0x30
 800160e:	4b90      	ldr	r3, [pc, #576]	@ (8001850 <MX_GPIO_Init+0x2bc>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	60bb      	str	r3, [r7, #8]
 800161e:	4b8c      	ldr	r3, [pc, #560]	@ (8001850 <MX_GPIO_Init+0x2bc>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001622:	4a8b      	ldr	r2, [pc, #556]	@ (8001850 <MX_GPIO_Init+0x2bc>)
 8001624:	f043 0302 	orr.w	r3, r3, #2
 8001628:	6313      	str	r3, [r2, #48]	@ 0x30
 800162a:	4b89      	ldr	r3, [pc, #548]	@ (8001850 <MX_GPIO_Init+0x2bc>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	60bb      	str	r3, [r7, #8]
 8001634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	607b      	str	r3, [r7, #4]
 800163a:	4b85      	ldr	r3, [pc, #532]	@ (8001850 <MX_GPIO_Init+0x2bc>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163e:	4a84      	ldr	r2, [pc, #528]	@ (8001850 <MX_GPIO_Init+0x2bc>)
 8001640:	f043 0308 	orr.w	r3, r3, #8
 8001644:	6313      	str	r3, [r2, #48]	@ 0x30
 8001646:	4b82      	ldr	r3, [pc, #520]	@ (8001850 <MX_GPIO_Init+0x2bc>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164a:	f003 0308 	and.w	r3, r3, #8
 800164e:	607b      	str	r3, [r7, #4]
 8001650:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|auxDCDCDisable_Pin|hvDCDCEnable_Pin|preChargeRelay_Pin
 8001652:	2200      	movs	r2, #0
 8001654:	f641 1188 	movw	r1, #6536	@ 0x1988
 8001658:	487e      	ldr	r0, [pc, #504]	@ (8001854 <MX_GPIO_Init+0x2c0>)
 800165a:	f001 fcb7 	bl	8002fcc <HAL_GPIO_WritePin>
                          |hvContactor_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800165e:	2201      	movs	r2, #1
 8001660:	2101      	movs	r1, #1
 8001662:	487d      	ldr	r0, [pc, #500]	@ (8001858 <MX_GPIO_Init+0x2c4>)
 8001664:	f001 fcb2 	bl	8002fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(hvContactorB15_GPIO_Port, hvContactorB15_Pin, GPIO_PIN_RESET);
 8001668:	2200      	movs	r2, #0
 800166a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800166e:	487b      	ldr	r0, [pc, #492]	@ (800185c <MX_GPIO_Init+0x2c8>)
 8001670:	f001 fcac 	bl	8002fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD6_Pin|spareOutput2_Pin
 8001674:	2200      	movs	r2, #0
 8001676:	f24b 0199 	movw	r1, #45209	@ 0xb099
 800167a:	4879      	ldr	r0, [pc, #484]	@ (8001860 <MX_GPIO_Init+0x2cc>)
 800167c:	f001 fca6 	bl	8002fcc <HAL_GPIO_WritePin>
                          |faultIndicatorD3_Pin|chargeIndicator_Pin|NA2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(faultIndicator_GPIO_Port, faultIndicator_Pin, GPIO_PIN_RESET);
 8001680:	2200      	movs	r2, #0
 8001682:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001686:	4874      	ldr	r0, [pc, #464]	@ (8001858 <MX_GPIO_Init+0x2c4>)
 8001688:	f001 fca0 	bl	8002fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(spareOutput3_GPIO_Port, spareOutput3_Pin, GPIO_PIN_SET);
 800168c:	2201      	movs	r2, #1
 800168e:	2140      	movs	r1, #64	@ 0x40
 8001690:	4873      	ldr	r0, [pc, #460]	@ (8001860 <MX_GPIO_Init+0x2cc>)
 8001692:	f001 fc9b 	bl	8002fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_I2C_SPI_Pin auxDCDCDisable_Pin hvDCDCEnable_Pin preChargeRelay_Pin
                           hvContactor_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|auxDCDCDisable_Pin|hvDCDCEnable_Pin|preChargeRelay_Pin
 8001696:	f641 1388 	movw	r3, #6536	@ 0x1988
 800169a:	61fb      	str	r3, [r7, #28]
                          |hvContactor_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800169c:	2301      	movs	r3, #1
 800169e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a4:	2300      	movs	r3, #0
 80016a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016a8:	f107 031c 	add.w	r3, r7, #28
 80016ac:	4619      	mov	r1, r3
 80016ae:	4869      	ldr	r0, [pc, #420]	@ (8001854 <MX_GPIO_Init+0x2c0>)
 80016b0:	f001 fad8 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin faultIndicator_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|faultIndicator_Pin;
 80016b4:	f241 0301 	movw	r3, #4097	@ 0x1001
 80016b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ba:	2301      	movs	r3, #1
 80016bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c2:	2300      	movs	r3, #0
 80016c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016c6:	f107 031c 	add.w	r3, r7, #28
 80016ca:	4619      	mov	r1, r3
 80016cc:	4862      	ldr	r0, [pc, #392]	@ (8001858 <MX_GPIO_Init+0x2c4>)
 80016ce:	f001 fac9 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80016d2:	2308      	movs	r3, #8
 80016d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d6:	2302      	movs	r3, #2
 80016d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016de:	2300      	movs	r3, #0
 80016e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016e2:	2305      	movs	r3, #5
 80016e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80016e6:	f107 031c 	add.w	r3, r7, #28
 80016ea:	4619      	mov	r1, r3
 80016ec:	485a      	ldr	r0, [pc, #360]	@ (8001858 <MX_GPIO_Init+0x2c4>)
 80016ee:	f001 fab9 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016f2:	2301      	movs	r3, #1
 80016f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80016f6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80016fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001700:	f107 031c 	add.w	r3, r7, #28
 8001704:	4619      	mov	r1, r3
 8001706:	4857      	ldr	r0, [pc, #348]	@ (8001864 <MX_GPIO_Init+0x2d0>)
 8001708:	f001 faac 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : chargeEnable_Pin */
  GPIO_InitStruct.Pin = chargeEnable_Pin;
 800170c:	2308      	movs	r3, #8
 800170e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001710:	2300      	movs	r3, #0
 8001712:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(chargeEnable_GPIO_Port, &GPIO_InitStruct);
 8001718:	f107 031c 	add.w	r3, r7, #28
 800171c:	4619      	mov	r1, r3
 800171e:	4851      	ldr	r0, [pc, #324]	@ (8001864 <MX_GPIO_Init+0x2d0>)
 8001720:	f001 faa0 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_MISO_Pin */
  GPIO_InitStruct.Pin = SPI1_MISO_Pin;
 8001724:	2340      	movs	r3, #64	@ 0x40
 8001726:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001728:	2302      	movs	r3, #2
 800172a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001730:	2300      	movs	r3, #0
 8001732:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001734:	2305      	movs	r3, #5
 8001736:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(SPI1_MISO_GPIO_Port, &GPIO_InitStruct);
 8001738:	f107 031c 	add.w	r3, r7, #28
 800173c:	4619      	mov	r1, r3
 800173e:	4849      	ldr	r0, [pc, #292]	@ (8001864 <MX_GPIO_Init+0x2d0>)
 8001740:	f001 fa90 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001744:	2304      	movs	r3, #4
 8001746:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001748:	2300      	movs	r3, #0
 800174a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001750:	f107 031c 	add.w	r3, r7, #28
 8001754:	4619      	mov	r1, r3
 8001756:	4841      	ldr	r0, [pc, #260]	@ (800185c <MX_GPIO_Init+0x2c8>)
 8001758:	f001 fa84 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : keyIGN_Pin keyACC_Pin chargeContactor_Pin disChargeEnable_Pin
                           chargeEnableE15_Pin */
  GPIO_InitStruct.Pin = keyIGN_Pin|keyACC_Pin|chargeContactor_Pin|disChargeEnable_Pin
 800175c:	f44f 4366 	mov.w	r3, #58880	@ 0xe600
 8001760:	61fb      	str	r3, [r7, #28]
                          |chargeEnableE15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001762:	2300      	movs	r3, #0
 8001764:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800176a:	f107 031c 	add.w	r3, r7, #28
 800176e:	4619      	mov	r1, r3
 8001770:	4838      	ldr	r0, [pc, #224]	@ (8001854 <MX_GPIO_Init+0x2c0>)
 8001772:	f001 fa77 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001776:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800177a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177c:	2302      	movs	r3, #2
 800177e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001784:	2300      	movs	r3, #0
 8001786:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001788:	2305      	movs	r3, #5
 800178a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800178c:	f107 031c 	add.w	r3, r7, #28
 8001790:	4619      	mov	r1, r3
 8001792:	4832      	ldr	r0, [pc, #200]	@ (800185c <MX_GPIO_Init+0x2c8>)
 8001794:	f001 fa66 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : hvContactorB15_Pin */
  GPIO_InitStruct.Pin = hvContactorB15_Pin;
 8001798:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800179c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800179e:	2301      	movs	r3, #1
 80017a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a6:	2300      	movs	r3, #0
 80017a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(hvContactorB15_GPIO_Port, &GPIO_InitStruct);
 80017aa:	f107 031c 	add.w	r3, r7, #28
 80017ae:	4619      	mov	r1, r3
 80017b0:	482a      	ldr	r0, [pc, #168]	@ (800185c <MX_GPIO_Init+0x2c8>)
 80017b2:	f001 fa57 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : spareInput2_Pin spareInput1_Pin spareInput3_Pin killSwitch_Pin
                           brakeSwitchInput_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = spareInput2_Pin|spareInput1_Pin|spareInput3_Pin|killSwitch_Pin
 80017b6:	f240 7326 	movw	r3, #1830	@ 0x726
 80017ba:	61fb      	str	r3, [r7, #28]
                          |brakeSwitchInput_Pin|OTG_FS_OverCurrent_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017bc:	2300      	movs	r3, #0
 80017be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017c4:	f107 031c 	add.w	r3, r7, #28
 80017c8:	4619      	mov	r1, r3
 80017ca:	4825      	ldr	r0, [pc, #148]	@ (8001860 <MX_GPIO_Init+0x2cc>)
 80017cc:	f001 fa4a 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD6_Pin spareOutput2_Pin
                           faultIndicatorD3_Pin chargeIndicator_Pin NA2_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD6_Pin|spareOutput2_Pin
 80017d0:	f24b 0399 	movw	r3, #45209	@ 0xb099
 80017d4:	61fb      	str	r3, [r7, #28]
                          |faultIndicatorD3_Pin|chargeIndicator_Pin|NA2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d6:	2301      	movs	r3, #1
 80017d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017de:	2300      	movs	r3, #0
 80017e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017e2:	f107 031c 	add.w	r3, r7, #28
 80017e6:	4619      	mov	r1, r3
 80017e8:	481d      	ldr	r0, [pc, #116]	@ (8001860 <MX_GPIO_Init+0x2cc>)
 80017ea:	f001 fa3b 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_SCK_Pin */
  GPIO_InitStruct.Pin = I2S3_SCK_Pin;
 80017ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f4:	2302      	movs	r3, #2
 80017f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fc:	2300      	movs	r3, #0
 80017fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001800:	2306      	movs	r3, #6
 8001802:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_SCK_GPIO_Port, &GPIO_InitStruct);
 8001804:	f107 031c 	add.w	r3, r7, #28
 8001808:	4619      	mov	r1, r3
 800180a:	4813      	ldr	r0, [pc, #76]	@ (8001858 <MX_GPIO_Init+0x2c4>)
 800180c:	f001 fa2a 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : spareOutput3_Pin */
  GPIO_InitStruct.Pin = spareOutput3_Pin;
 8001810:	2340      	movs	r3, #64	@ 0x40
 8001812:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001814:	2301      	movs	r3, #1
 8001816:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001818:	2302      	movs	r3, #2
 800181a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800181c:	2302      	movs	r3, #2
 800181e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(spareOutput3_GPIO_Port, &GPIO_InitStruct);
 8001820:	f107 031c 	add.w	r3, r7, #28
 8001824:	4619      	mov	r1, r3
 8001826:	480e      	ldr	r0, [pc, #56]	@ (8001860 <MX_GPIO_Init+0x2cc>)
 8001828:	f001 fa1c 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800182c:	2302      	movs	r3, #2
 800182e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001830:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800183a:	f107 031c 	add.w	r3, r7, #28
 800183e:	4619      	mov	r1, r3
 8001840:	4804      	ldr	r0, [pc, #16]	@ (8001854 <MX_GPIO_Init+0x2c0>)
 8001842:	f001 fa0f 	bl	8002c64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001846:	bf00      	nop
 8001848:	3730      	adds	r7, #48	@ 0x30
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40023800 	.word	0x40023800
 8001854:	40021000 	.word	0x40021000
 8001858:	40020800 	.word	0x40020800
 800185c:	40020400 	.word	0x40020400
 8001860:	40020c00 	.word	0x40020c00
 8001864:	40020000 	.word	0x40020000

08001868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800186c:	b672      	cpsid	i
}
 800186e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001870:	bf00      	nop
 8001872:	e7fd      	b.n	8001870 <Error_Handler+0x8>

08001874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	607b      	str	r3, [r7, #4]
 800187e:	4b10      	ldr	r3, [pc, #64]	@ (80018c0 <HAL_MspInit+0x4c>)
 8001880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001882:	4a0f      	ldr	r2, [pc, #60]	@ (80018c0 <HAL_MspInit+0x4c>)
 8001884:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001888:	6453      	str	r3, [r2, #68]	@ 0x44
 800188a:	4b0d      	ldr	r3, [pc, #52]	@ (80018c0 <HAL_MspInit+0x4c>)
 800188c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800188e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001892:	607b      	str	r3, [r7, #4]
 8001894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	603b      	str	r3, [r7, #0]
 800189a:	4b09      	ldr	r3, [pc, #36]	@ (80018c0 <HAL_MspInit+0x4c>)
 800189c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189e:	4a08      	ldr	r2, [pc, #32]	@ (80018c0 <HAL_MspInit+0x4c>)
 80018a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80018a6:	4b06      	ldr	r3, [pc, #24]	@ (80018c0 <HAL_MspInit+0x4c>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ae:	603b      	str	r3, [r7, #0]
 80018b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018b2:	2007      	movs	r0, #7
 80018b4:	f001 f8ac 	bl	8002a10 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018b8:	bf00      	nop
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40023800 	.word	0x40023800

080018c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b08e      	sub	sp, #56	@ 0x38
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a45      	ldr	r2, [pc, #276]	@ (80019f8 <HAL_ADC_MspInit+0x134>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d128      	bne.n	8001938 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	623b      	str	r3, [r7, #32]
 80018ea:	4b44      	ldr	r3, [pc, #272]	@ (80019fc <HAL_ADC_MspInit+0x138>)
 80018ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ee:	4a43      	ldr	r2, [pc, #268]	@ (80019fc <HAL_ADC_MspInit+0x138>)
 80018f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80018f6:	4b41      	ldr	r3, [pc, #260]	@ (80019fc <HAL_ADC_MspInit+0x138>)
 80018f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018fe:	623b      	str	r3, [r7, #32]
 8001900:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	61fb      	str	r3, [r7, #28]
 8001906:	4b3d      	ldr	r3, [pc, #244]	@ (80019fc <HAL_ADC_MspInit+0x138>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190a:	4a3c      	ldr	r2, [pc, #240]	@ (80019fc <HAL_ADC_MspInit+0x138>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	6313      	str	r3, [r2, #48]	@ 0x30
 8001912:	4b3a      	ldr	r3, [pc, #232]	@ (80019fc <HAL_ADC_MspInit+0x138>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	61fb      	str	r3, [r7, #28]
 800191c:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = pedalADC_Pin;
 800191e:	2302      	movs	r3, #2
 8001920:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001922:	2303      	movs	r3, #3
 8001924:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(pedalADC_GPIO_Port, &GPIO_InitStruct);
 800192a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800192e:	4619      	mov	r1, r3
 8001930:	4833      	ldr	r0, [pc, #204]	@ (8001a00 <HAL_ADC_MspInit+0x13c>)
 8001932:	f001 f997 	bl	8002c64 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001936:	e05a      	b.n	80019ee <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a31      	ldr	r2, [pc, #196]	@ (8001a04 <HAL_ADC_MspInit+0x140>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d128      	bne.n	8001994 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	61bb      	str	r3, [r7, #24]
 8001946:	4b2d      	ldr	r3, [pc, #180]	@ (80019fc <HAL_ADC_MspInit+0x138>)
 8001948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800194a:	4a2c      	ldr	r2, [pc, #176]	@ (80019fc <HAL_ADC_MspInit+0x138>)
 800194c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001950:	6453      	str	r3, [r2, #68]	@ 0x44
 8001952:	4b2a      	ldr	r3, [pc, #168]	@ (80019fc <HAL_ADC_MspInit+0x138>)
 8001954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001956:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800195a:	61bb      	str	r3, [r7, #24]
 800195c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	617b      	str	r3, [r7, #20]
 8001962:	4b26      	ldr	r3, [pc, #152]	@ (80019fc <HAL_ADC_MspInit+0x138>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001966:	4a25      	ldr	r2, [pc, #148]	@ (80019fc <HAL_ADC_MspInit+0x138>)
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	6313      	str	r3, [r2, #48]	@ 0x30
 800196e:	4b23      	ldr	r3, [pc, #140]	@ (80019fc <HAL_ADC_MspInit+0x138>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	617b      	str	r3, [r7, #20]
 8001978:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = regenADC_Pin;
 800197a:	2304      	movs	r3, #4
 800197c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800197e:	2303      	movs	r3, #3
 8001980:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(regenADC_GPIO_Port, &GPIO_InitStruct);
 8001986:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800198a:	4619      	mov	r1, r3
 800198c:	481c      	ldr	r0, [pc, #112]	@ (8001a00 <HAL_ADC_MspInit+0x13c>)
 800198e:	f001 f969 	bl	8002c64 <HAL_GPIO_Init>
}
 8001992:	e02c      	b.n	80019ee <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a1b      	ldr	r2, [pc, #108]	@ (8001a08 <HAL_ADC_MspInit+0x144>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d127      	bne.n	80019ee <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	613b      	str	r3, [r7, #16]
 80019a2:	4b16      	ldr	r3, [pc, #88]	@ (80019fc <HAL_ADC_MspInit+0x138>)
 80019a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a6:	4a15      	ldr	r2, [pc, #84]	@ (80019fc <HAL_ADC_MspInit+0x138>)
 80019a8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80019ae:	4b13      	ldr	r3, [pc, #76]	@ (80019fc <HAL_ADC_MspInit+0x138>)
 80019b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019b6:	613b      	str	r3, [r7, #16]
 80019b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	4b0f      	ldr	r3, [pc, #60]	@ (80019fc <HAL_ADC_MspInit+0x138>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c2:	4a0e      	ldr	r2, [pc, #56]	@ (80019fc <HAL_ADC_MspInit+0x138>)
 80019c4:	f043 0304 	orr.w	r3, r3, #4
 80019c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ca:	4b0c      	ldr	r3, [pc, #48]	@ (80019fc <HAL_ADC_MspInit+0x138>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ce:	f003 0304 	and.w	r3, r3, #4
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = auxVoltageIN_Pin;
 80019d6:	2304      	movs	r3, #4
 80019d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019da:	2303      	movs	r3, #3
 80019dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019de:	2300      	movs	r3, #0
 80019e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(auxVoltageIN_GPIO_Port, &GPIO_InitStruct);
 80019e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019e6:	4619      	mov	r1, r3
 80019e8:	4808      	ldr	r0, [pc, #32]	@ (8001a0c <HAL_ADC_MspInit+0x148>)
 80019ea:	f001 f93b 	bl	8002c64 <HAL_GPIO_Init>
}
 80019ee:	bf00      	nop
 80019f0:	3738      	adds	r7, #56	@ 0x38
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40012000 	.word	0x40012000
 80019fc:	40023800 	.word	0x40023800
 8001a00:	40020000 	.word	0x40020000
 8001a04:	40012100 	.word	0x40012100
 8001a08:	40012200 	.word	0x40012200
 8001a0c:	40020800 	.word	0x40020800

08001a10 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b08a      	sub	sp, #40	@ 0x28
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a18:	f107 0314 	add.w	r3, r7, #20
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]
 8001a26:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a19      	ldr	r2, [pc, #100]	@ (8001a94 <HAL_CAN_MspInit+0x84>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d12c      	bne.n	8001a8c <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	613b      	str	r3, [r7, #16]
 8001a36:	4b18      	ldr	r3, [pc, #96]	@ (8001a98 <HAL_CAN_MspInit+0x88>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3a:	4a17      	ldr	r2, [pc, #92]	@ (8001a98 <HAL_CAN_MspInit+0x88>)
 8001a3c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a40:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a42:	4b15      	ldr	r3, [pc, #84]	@ (8001a98 <HAL_CAN_MspInit+0x88>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a4a:	613b      	str	r3, [r7, #16]
 8001a4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	4b11      	ldr	r3, [pc, #68]	@ (8001a98 <HAL_CAN_MspInit+0x88>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a56:	4a10      	ldr	r2, [pc, #64]	@ (8001a98 <HAL_CAN_MspInit+0x88>)
 8001a58:	f043 0302 	orr.w	r3, r3, #2
 8001a5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a98 <HAL_CAN_MspInit+0x88>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = canRX_Pin|canTX_Pin;
 8001a6a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a70:	2302      	movs	r3, #2
 8001a72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001a7c:	2309      	movs	r3, #9
 8001a7e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a80:	f107 0314 	add.w	r3, r7, #20
 8001a84:	4619      	mov	r1, r3
 8001a86:	4805      	ldr	r0, [pc, #20]	@ (8001a9c <HAL_CAN_MspInit+0x8c>)
 8001a88:	f001 f8ec 	bl	8002c64 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001a8c:	bf00      	nop
 8001a8e:	3728      	adds	r7, #40	@ 0x28
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40006400 	.word	0x40006400
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40020400 	.word	0x40020400

08001aa0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08a      	sub	sp, #40	@ 0x28
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa8:	f107 0314 	add.w	r3, r7, #20
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a17      	ldr	r2, [pc, #92]	@ (8001b1c <HAL_DAC_MspInit+0x7c>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d127      	bne.n	8001b12 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	613b      	str	r3, [r7, #16]
 8001ac6:	4b16      	ldr	r3, [pc, #88]	@ (8001b20 <HAL_DAC_MspInit+0x80>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aca:	4a15      	ldr	r2, [pc, #84]	@ (8001b20 <HAL_DAC_MspInit+0x80>)
 8001acc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001ad0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ad2:	4b13      	ldr	r3, [pc, #76]	@ (8001b20 <HAL_DAC_MspInit+0x80>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ada:	613b      	str	r3, [r7, #16]
 8001adc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	4b0f      	ldr	r3, [pc, #60]	@ (8001b20 <HAL_DAC_MspInit+0x80>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae6:	4a0e      	ldr	r2, [pc, #56]	@ (8001b20 <HAL_DAC_MspInit+0x80>)
 8001ae8:	f043 0301 	orr.w	r3, r3, #1
 8001aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aee:	4b0c      	ldr	r3, [pc, #48]	@ (8001b20 <HAL_DAC_MspInit+0x80>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = pedalDAC_Pin|regenDAC_Pin;
 8001afa:	2330      	movs	r3, #48	@ 0x30
 8001afc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001afe:	2303      	movs	r3, #3
 8001b00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b02:	2300      	movs	r3, #0
 8001b04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b06:	f107 0314 	add.w	r3, r7, #20
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4805      	ldr	r0, [pc, #20]	@ (8001b24 <HAL_DAC_MspInit+0x84>)
 8001b0e:	f001 f8a9 	bl	8002c64 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001b12:	bf00      	nop
 8001b14:	3728      	adds	r7, #40	@ 0x28
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40007400 	.word	0x40007400
 8001b20:	40023800 	.word	0x40023800
 8001b24:	40020000 	.word	0x40020000

08001b28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b2c:	bf00      	nop
 8001b2e:	e7fd      	b.n	8001b2c <NMI_Handler+0x4>

08001b30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b34:	bf00      	nop
 8001b36:	e7fd      	b.n	8001b34 <HardFault_Handler+0x4>

08001b38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b3c:	bf00      	nop
 8001b3e:	e7fd      	b.n	8001b3c <MemManage_Handler+0x4>

08001b40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b44:	bf00      	nop
 8001b46:	e7fd      	b.n	8001b44 <BusFault_Handler+0x4>

08001b48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b4c:	bf00      	nop
 8001b4e:	e7fd      	b.n	8001b4c <UsageFault_Handler+0x4>

08001b50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b54:	bf00      	nop
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr

08001b5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b62:	bf00      	nop
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b70:	bf00      	nop
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b7e:	f000 f8d1 	bl	8001d24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
	...

08001b88 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001b8c:	4802      	ldr	r0, [pc, #8]	@ (8001b98 <OTG_FS_IRQHandler+0x10>)
 8001b8e:	f001 fb86 	bl	800329e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	200017cc 	.word	0x200017cc

08001b9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ba4:	4a14      	ldr	r2, [pc, #80]	@ (8001bf8 <_sbrk+0x5c>)
 8001ba6:	4b15      	ldr	r3, [pc, #84]	@ (8001bfc <_sbrk+0x60>)
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bb0:	4b13      	ldr	r3, [pc, #76]	@ (8001c00 <_sbrk+0x64>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d102      	bne.n	8001bbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bb8:	4b11      	ldr	r3, [pc, #68]	@ (8001c00 <_sbrk+0x64>)
 8001bba:	4a12      	ldr	r2, [pc, #72]	@ (8001c04 <_sbrk+0x68>)
 8001bbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bbe:	4b10      	ldr	r3, [pc, #64]	@ (8001c00 <_sbrk+0x64>)
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d207      	bcs.n	8001bdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bcc:	f007 fa68 	bl	80090a0 <__errno>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	220c      	movs	r2, #12
 8001bd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bda:	e009      	b.n	8001bf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bdc:	4b08      	ldr	r3, [pc, #32]	@ (8001c00 <_sbrk+0x64>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001be2:	4b07      	ldr	r3, [pc, #28]	@ (8001c00 <_sbrk+0x64>)
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4413      	add	r3, r2
 8001bea:	4a05      	ldr	r2, [pc, #20]	@ (8001c00 <_sbrk+0x64>)
 8001bec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bee:	68fb      	ldr	r3, [r7, #12]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3718      	adds	r7, #24
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	20020000 	.word	0x20020000
 8001bfc:	00000400 	.word	0x00000400
 8001c00:	200002e4 	.word	0x200002e4
 8001c04:	20002040 	.word	0x20002040

08001c08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c0c:	4b06      	ldr	r3, [pc, #24]	@ (8001c28 <SystemInit+0x20>)
 8001c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c12:	4a05      	ldr	r2, [pc, #20]	@ (8001c28 <SystemInit+0x20>)
 8001c14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	e000ed00 	.word	0xe000ed00

08001c2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c30:	480d      	ldr	r0, [pc, #52]	@ (8001c68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c32:	490e      	ldr	r1, [pc, #56]	@ (8001c6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c34:	4a0e      	ldr	r2, [pc, #56]	@ (8001c70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c38:	e002      	b.n	8001c40 <LoopCopyDataInit>

08001c3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c3e:	3304      	adds	r3, #4

08001c40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c44:	d3f9      	bcc.n	8001c3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c46:	4a0b      	ldr	r2, [pc, #44]	@ (8001c74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c48:	4c0b      	ldr	r4, [pc, #44]	@ (8001c78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c4c:	e001      	b.n	8001c52 <LoopFillZerobss>

08001c4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c50:	3204      	adds	r2, #4

08001c52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c54:	d3fb      	bcc.n	8001c4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c56:	f7ff ffd7 	bl	8001c08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c5a:	f007 fa27 	bl	80090ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c5e:	f7fe fc87 	bl	8000570 <main>
  bx  lr    
 8001c62:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c6c:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8001c70:	08009b08 	.word	0x08009b08
  ldr r2, =_sbss
 8001c74:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8001c78:	20002040 	.word	0x20002040

08001c7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c7c:	e7fe      	b.n	8001c7c <ADC_IRQHandler>
	...

08001c80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c84:	4b0e      	ldr	r3, [pc, #56]	@ (8001cc0 <HAL_Init+0x40>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a0d      	ldr	r2, [pc, #52]	@ (8001cc0 <HAL_Init+0x40>)
 8001c8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c90:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc0 <HAL_Init+0x40>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc0 <HAL_Init+0x40>)
 8001c96:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c9c:	4b08      	ldr	r3, [pc, #32]	@ (8001cc0 <HAL_Init+0x40>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a07      	ldr	r2, [pc, #28]	@ (8001cc0 <HAL_Init+0x40>)
 8001ca2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ca6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ca8:	2003      	movs	r0, #3
 8001caa:	f000 feb1 	bl	8002a10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cae:	2000      	movs	r0, #0
 8001cb0:	f000 f808 	bl	8001cc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cb4:	f7ff fdde 	bl	8001874 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40023c00 	.word	0x40023c00

08001cc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ccc:	4b12      	ldr	r3, [pc, #72]	@ (8001d18 <HAL_InitTick+0x54>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	4b12      	ldr	r3, [pc, #72]	@ (8001d1c <HAL_InitTick+0x58>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f000 fec9 	bl	8002a7a <HAL_SYSTICK_Config>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e00e      	b.n	8001d10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2b0f      	cmp	r3, #15
 8001cf6:	d80a      	bhi.n	8001d0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	6879      	ldr	r1, [r7, #4]
 8001cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001d00:	f000 fe91 	bl	8002a26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d04:	4a06      	ldr	r2, [pc, #24]	@ (8001d20 <HAL_InitTick+0x5c>)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	e000      	b.n	8001d10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	20000000 	.word	0x20000000
 8001d1c:	20000008 	.word	0x20000008
 8001d20:	20000004 	.word	0x20000004

08001d24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d28:	4b06      	ldr	r3, [pc, #24]	@ (8001d44 <HAL_IncTick+0x20>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	4b06      	ldr	r3, [pc, #24]	@ (8001d48 <HAL_IncTick+0x24>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4413      	add	r3, r2
 8001d34:	4a04      	ldr	r2, [pc, #16]	@ (8001d48 <HAL_IncTick+0x24>)
 8001d36:	6013      	str	r3, [r2, #0]
}
 8001d38:	bf00      	nop
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	20000008 	.word	0x20000008
 8001d48:	200002e8 	.word	0x200002e8

08001d4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d50:	4b03      	ldr	r3, [pc, #12]	@ (8001d60 <HAL_GetTick+0x14>)
 8001d52:	681b      	ldr	r3, [r3, #0]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	200002e8 	.word	0x200002e8

08001d64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d6c:	f7ff ffee 	bl	8001d4c <HAL_GetTick>
 8001d70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d7c:	d005      	beq.n	8001d8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001da8 <HAL_Delay+0x44>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	461a      	mov	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	4413      	add	r3, r2
 8001d88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d8a:	bf00      	nop
 8001d8c:	f7ff ffde 	bl	8001d4c <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d8f7      	bhi.n	8001d8c <HAL_Delay+0x28>
  {
  }
}
 8001d9c:	bf00      	nop
 8001d9e:	bf00      	nop
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20000008 	.word	0x20000008

08001dac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001db4:	2300      	movs	r3, #0
 8001db6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e033      	b.n	8001e2a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d109      	bne.n	8001dde <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f7ff fd7a 	bl	80018c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de2:	f003 0310 	and.w	r3, r3, #16
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d118      	bne.n	8001e1c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dee:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001df2:	f023 0302 	bic.w	r3, r3, #2
 8001df6:	f043 0202 	orr.w	r2, r3, #2
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 fa1a 	bl	8002238 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0e:	f023 0303 	bic.w	r3, r3, #3
 8001e12:	f043 0201 	orr.w	r2, r3, #1
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e1a:	e001      	b.n	8001e20 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
	...

08001e34 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d101      	bne.n	8001e4e <HAL_ADC_Start+0x1a>
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	e0b2      	b.n	8001fb4 <HAL_ADC_Start+0x180>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f003 0301 	and.w	r3, r3, #1
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d018      	beq.n	8001e96 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	689a      	ldr	r2, [r3, #8]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f042 0201 	orr.w	r2, r2, #1
 8001e72:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e74:	4b52      	ldr	r3, [pc, #328]	@ (8001fc0 <HAL_ADC_Start+0x18c>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a52      	ldr	r2, [pc, #328]	@ (8001fc4 <HAL_ADC_Start+0x190>)
 8001e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7e:	0c9a      	lsrs	r2, r3, #18
 8001e80:	4613      	mov	r3, r2
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	4413      	add	r3, r2
 8001e86:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001e88:	e002      	b.n	8001e90 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1f9      	bne.n	8001e8a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d17a      	bne.n	8001f9a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001eac:	f023 0301 	bic.w	r3, r3, #1
 8001eb0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d007      	beq.n	8001ed6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eca:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001ece:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ede:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ee2:	d106      	bne.n	8001ef2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee8:	f023 0206 	bic.w	r2, r3, #6
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	645a      	str	r2, [r3, #68]	@ 0x44
 8001ef0:	e002      	b.n	8001ef8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	645a      	str	r2, [r3, #68]	@ 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f00:	4b31      	ldr	r3, [pc, #196]	@ (8001fc8 <HAL_ADC_Start+0x194>)
 8001f02:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001f0c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f003 031f 	and.w	r3, r3, #31
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d12a      	bne.n	8001f70 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a2b      	ldr	r2, [pc, #172]	@ (8001fcc <HAL_ADC_Start+0x198>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d015      	beq.n	8001f50 <HAL_ADC_Start+0x11c>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a29      	ldr	r2, [pc, #164]	@ (8001fd0 <HAL_ADC_Start+0x19c>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d105      	bne.n	8001f3a <HAL_ADC_Start+0x106>
 8001f2e:	4b26      	ldr	r3, [pc, #152]	@ (8001fc8 <HAL_ADC_Start+0x194>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f003 031f 	and.w	r3, r3, #31
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d00a      	beq.n	8001f50 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a25      	ldr	r2, [pc, #148]	@ (8001fd4 <HAL_ADC_Start+0x1a0>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d136      	bne.n	8001fb2 <HAL_ADC_Start+0x17e>
 8001f44:	4b20      	ldr	r3, [pc, #128]	@ (8001fc8 <HAL_ADC_Start+0x194>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f003 0310 	and.w	r3, r3, #16
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d130      	bne.n	8001fb2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d129      	bne.n	8001fb2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	689a      	ldr	r2, [r3, #8]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001f6c:	609a      	str	r2, [r3, #8]
 8001f6e:	e020      	b.n	8001fb2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a15      	ldr	r2, [pc, #84]	@ (8001fcc <HAL_ADC_Start+0x198>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d11b      	bne.n	8001fb2 <HAL_ADC_Start+0x17e>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d114      	bne.n	8001fb2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689a      	ldr	r2, [r3, #8]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	e00b      	b.n	8001fb2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9e:	f043 0210 	orr.w	r2, r3, #16
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001faa:	f043 0201 	orr.w	r2, r3, #1
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3714      	adds	r7, #20
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	20000000 	.word	0x20000000
 8001fc4:	431bde83 	.word	0x431bde83
 8001fc8:	40012300 	.word	0x40012300
 8001fcc:	40012000 	.word	0x40012000
 8001fd0:	40012100 	.word	0x40012100
 8001fd4:	40012200 	.word	0x40012200

08001fd8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
	...

08001ff4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ffe:	2300      	movs	r3, #0
 8002000:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002008:	2b01      	cmp	r3, #1
 800200a:	d101      	bne.n	8002010 <HAL_ADC_ConfigChannel+0x1c>
 800200c:	2302      	movs	r3, #2
 800200e:	e105      	b.n	800221c <HAL_ADC_ConfigChannel+0x228>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2b09      	cmp	r3, #9
 800201e:	d925      	bls.n	800206c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	68d9      	ldr	r1, [r3, #12]
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	b29b      	uxth	r3, r3
 800202c:	461a      	mov	r2, r3
 800202e:	4613      	mov	r3, r2
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	4413      	add	r3, r2
 8002034:	3b1e      	subs	r3, #30
 8002036:	2207      	movs	r2, #7
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	43da      	mvns	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	400a      	ands	r2, r1
 8002044:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68d9      	ldr	r1, [r3, #12]
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	b29b      	uxth	r3, r3
 8002056:	4618      	mov	r0, r3
 8002058:	4603      	mov	r3, r0
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	4403      	add	r3, r0
 800205e:	3b1e      	subs	r3, #30
 8002060:	409a      	lsls	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	430a      	orrs	r2, r1
 8002068:	60da      	str	r2, [r3, #12]
 800206a:	e022      	b.n	80020b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6919      	ldr	r1, [r3, #16]
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	b29b      	uxth	r3, r3
 8002078:	461a      	mov	r2, r3
 800207a:	4613      	mov	r3, r2
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	4413      	add	r3, r2
 8002080:	2207      	movs	r2, #7
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	43da      	mvns	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	400a      	ands	r2, r1
 800208e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6919      	ldr	r1, [r3, #16]
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	689a      	ldr	r2, [r3, #8]
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	b29b      	uxth	r3, r3
 80020a0:	4618      	mov	r0, r3
 80020a2:	4603      	mov	r3, r0
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	4403      	add	r3, r0
 80020a8:	409a      	lsls	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	430a      	orrs	r2, r1
 80020b0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	2b06      	cmp	r3, #6
 80020b8:	d824      	bhi.n	8002104 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	4613      	mov	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	3b05      	subs	r3, #5
 80020cc:	221f      	movs	r2, #31
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	43da      	mvns	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	400a      	ands	r2, r1
 80020da:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	4618      	mov	r0, r3
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685a      	ldr	r2, [r3, #4]
 80020ee:	4613      	mov	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4413      	add	r3, r2
 80020f4:	3b05      	subs	r3, #5
 80020f6:	fa00 f203 	lsl.w	r2, r0, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	430a      	orrs	r2, r1
 8002100:	635a      	str	r2, [r3, #52]	@ 0x34
 8002102:	e04c      	b.n	800219e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	2b0c      	cmp	r3, #12
 800210a:	d824      	bhi.n	8002156 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685a      	ldr	r2, [r3, #4]
 8002116:	4613      	mov	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4413      	add	r3, r2
 800211c:	3b23      	subs	r3, #35	@ 0x23
 800211e:	221f      	movs	r2, #31
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	43da      	mvns	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	400a      	ands	r2, r1
 800212c:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	b29b      	uxth	r3, r3
 800213a:	4618      	mov	r0, r3
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685a      	ldr	r2, [r3, #4]
 8002140:	4613      	mov	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	3b23      	subs	r3, #35	@ 0x23
 8002148:	fa00 f203 	lsl.w	r2, r0, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	430a      	orrs	r2, r1
 8002152:	631a      	str	r2, [r3, #48]	@ 0x30
 8002154:	e023      	b.n	800219e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	4613      	mov	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4413      	add	r3, r2
 8002166:	3b41      	subs	r3, #65	@ 0x41
 8002168:	221f      	movs	r2, #31
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	43da      	mvns	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	400a      	ands	r2, r1
 8002176:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	b29b      	uxth	r3, r3
 8002184:	4618      	mov	r0, r3
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685a      	ldr	r2, [r3, #4]
 800218a:	4613      	mov	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	3b41      	subs	r3, #65	@ 0x41
 8002192:	fa00 f203 	lsl.w	r2, r0, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	430a      	orrs	r2, r1
 800219c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800219e:	4b22      	ldr	r3, [pc, #136]	@ (8002228 <HAL_ADC_ConfigChannel+0x234>)
 80021a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a21      	ldr	r2, [pc, #132]	@ (800222c <HAL_ADC_ConfigChannel+0x238>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d109      	bne.n	80021c0 <HAL_ADC_ConfigChannel+0x1cc>
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2b12      	cmp	r3, #18
 80021b2:	d105      	bne.n	80021c0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a19      	ldr	r2, [pc, #100]	@ (800222c <HAL_ADC_ConfigChannel+0x238>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d123      	bne.n	8002212 <HAL_ADC_ConfigChannel+0x21e>
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2b10      	cmp	r3, #16
 80021d0:	d003      	beq.n	80021da <HAL_ADC_ConfigChannel+0x1e6>
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2b11      	cmp	r3, #17
 80021d8:	d11b      	bne.n	8002212 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2b10      	cmp	r3, #16
 80021ec:	d111      	bne.n	8002212 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021ee:	4b10      	ldr	r3, [pc, #64]	@ (8002230 <HAL_ADC_ConfigChannel+0x23c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a10      	ldr	r2, [pc, #64]	@ (8002234 <HAL_ADC_ConfigChannel+0x240>)
 80021f4:	fba2 2303 	umull	r2, r3, r2, r3
 80021f8:	0c9a      	lsrs	r2, r3, #18
 80021fa:	4613      	mov	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002204:	e002      	b.n	800220c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	3b01      	subs	r3, #1
 800220a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1f9      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	40012300 	.word	0x40012300
 800222c:	40012000 	.word	0x40012000
 8002230:	20000000 	.word	0x20000000
 8002234:	431bde83 	.word	0x431bde83

08002238 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002240:	4b79      	ldr	r3, [pc, #484]	@ (8002428 <ADC_Init+0x1f0>)
 8002242:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	431a      	orrs	r2, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	685a      	ldr	r2, [r3, #4]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800226c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	6859      	ldr	r1, [r3, #4]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	021a      	lsls	r2, r3, #8
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	430a      	orrs	r2, r1
 8002280:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002290:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6859      	ldr	r1, [r3, #4]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689a      	ldr	r2, [r3, #8]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6899      	ldr	r1, [r3, #8]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68da      	ldr	r2, [r3, #12]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	430a      	orrs	r2, r1
 80022c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ca:	4a58      	ldr	r2, [pc, #352]	@ (800242c <ADC_Init+0x1f4>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d022      	beq.n	8002316 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	689a      	ldr	r2, [r3, #8]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80022de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6899      	ldr	r1, [r3, #8]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	430a      	orrs	r2, r1
 80022f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002300:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	6899      	ldr	r1, [r3, #8]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	430a      	orrs	r2, r1
 8002312:	609a      	str	r2, [r3, #8]
 8002314:	e00f      	b.n	8002336 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002324:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002334:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 0202 	bic.w	r2, r2, #2
 8002344:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6899      	ldr	r1, [r3, #8]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	7e1b      	ldrb	r3, [r3, #24]
 8002350:	005a      	lsls	r2, r3, #1
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	430a      	orrs	r2, r1
 8002358:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d01b      	beq.n	800239c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	685a      	ldr	r2, [r3, #4]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002372:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002382:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6859      	ldr	r1, [r3, #4]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238e:	3b01      	subs	r3, #1
 8002390:	035a      	lsls	r2, r3, #13
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	430a      	orrs	r2, r1
 8002398:	605a      	str	r2, [r3, #4]
 800239a:	e007      	b.n	80023ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80023ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	3b01      	subs	r3, #1
 80023c8:	051a      	lsls	r2, r3, #20
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	430a      	orrs	r2, r1
 80023d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80023e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6899      	ldr	r1, [r3, #8]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80023ee:	025a      	lsls	r2, r3, #9
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	430a      	orrs	r2, r1
 80023f6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002406:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6899      	ldr	r1, [r3, #8]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	029a      	lsls	r2, r3, #10
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	430a      	orrs	r2, r1
 800241a:	609a      	str	r2, [r3, #8]
}
 800241c:	bf00      	nop
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	40012300 	.word	0x40012300
 800242c:	0f000001 	.word	0x0f000001

08002430 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e0ed      	b.n	800261e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d102      	bne.n	8002454 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7ff fade 	bl	8001a10 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f042 0201 	orr.w	r2, r2, #1
 8002462:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002464:	f7ff fc72 	bl	8001d4c <HAL_GetTick>
 8002468:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800246a:	e012      	b.n	8002492 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800246c:	f7ff fc6e 	bl	8001d4c <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b0a      	cmp	r3, #10
 8002478:	d90b      	bls.n	8002492 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2205      	movs	r2, #5
 800248a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e0c5      	b.n	800261e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	2b00      	cmp	r3, #0
 800249e:	d0e5      	beq.n	800246c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 0202 	bic.w	r2, r2, #2
 80024ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024b0:	f7ff fc4c 	bl	8001d4c <HAL_GetTick>
 80024b4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80024b6:	e012      	b.n	80024de <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024b8:	f7ff fc48 	bl	8001d4c <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b0a      	cmp	r3, #10
 80024c4:	d90b      	bls.n	80024de <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ca:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2205      	movs	r2, #5
 80024d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e09f      	b.n	800261e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1e5      	bne.n	80024b8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	7e1b      	ldrb	r3, [r3, #24]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d108      	bne.n	8002506 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	e007      	b.n	8002516 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002514:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	7e5b      	ldrb	r3, [r3, #25]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d108      	bne.n	8002530 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800252c:	601a      	str	r2, [r3, #0]
 800252e:	e007      	b.n	8002540 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800253e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	7e9b      	ldrb	r3, [r3, #26]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d108      	bne.n	800255a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f042 0220 	orr.w	r2, r2, #32
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	e007      	b.n	800256a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 0220 	bic.w	r2, r2, #32
 8002568:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	7edb      	ldrb	r3, [r3, #27]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d108      	bne.n	8002584 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f022 0210 	bic.w	r2, r2, #16
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	e007      	b.n	8002594 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f042 0210 	orr.w	r2, r2, #16
 8002592:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	7f1b      	ldrb	r3, [r3, #28]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d108      	bne.n	80025ae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f042 0208 	orr.w	r2, r2, #8
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	e007      	b.n	80025be <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f022 0208 	bic.w	r2, r2, #8
 80025bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	7f5b      	ldrb	r3, [r3, #29]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d108      	bne.n	80025d8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f042 0204 	orr.w	r2, r2, #4
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	e007      	b.n	80025e8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f022 0204 	bic.w	r2, r2, #4
 80025e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	431a      	orrs	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	431a      	orrs	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	695b      	ldr	r3, [r3, #20]
 80025fc:	ea42 0103 	orr.w	r1, r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	1e5a      	subs	r2, r3, #1
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	430a      	orrs	r2, r1
 800260c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
	...

08002628 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002628:	b480      	push	{r7}
 800262a:	b087      	sub	sp, #28
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800263e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002640:	7cfb      	ldrb	r3, [r7, #19]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d003      	beq.n	800264e <HAL_CAN_ConfigFilter+0x26>
 8002646:	7cfb      	ldrb	r3, [r7, #19]
 8002648:	2b02      	cmp	r3, #2
 800264a:	f040 80be 	bne.w	80027ca <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800264e:	4b65      	ldr	r3, [pc, #404]	@ (80027e4 <HAL_CAN_ConfigFilter+0x1bc>)
 8002650:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002658:	f043 0201 	orr.w	r2, r3, #1
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002668:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267c:	021b      	lsls	r3, r3, #8
 800267e:	431a      	orrs	r2, r3
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	f003 031f 	and.w	r3, r3, #31
 800268e:	2201      	movs	r2, #1
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	43db      	mvns	r3, r3
 80026a0:	401a      	ands	r2, r3
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	69db      	ldr	r3, [r3, #28]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d123      	bne.n	80026f8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	43db      	mvns	r3, r3
 80026ba:	401a      	ands	r2, r3
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80026d2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	3248      	adds	r2, #72	@ 0x48
 80026d8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026ec:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026ee:	6979      	ldr	r1, [r7, #20]
 80026f0:	3348      	adds	r3, #72	@ 0x48
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	440b      	add	r3, r1
 80026f6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	69db      	ldr	r3, [r3, #28]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d122      	bne.n	8002746 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	431a      	orrs	r2, r3
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002720:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	3248      	adds	r2, #72	@ 0x48
 8002726:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800273a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800273c:	6979      	ldr	r1, [r7, #20]
 800273e:	3348      	adds	r3, #72	@ 0x48
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	440b      	add	r3, r1
 8002744:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d109      	bne.n	8002762 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	43db      	mvns	r3, r3
 8002758:	401a      	ands	r2, r3
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002760:	e007      	b.n	8002772 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	431a      	orrs	r2, r3
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d109      	bne.n	800278e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	43db      	mvns	r3, r3
 8002784:	401a      	ands	r2, r3
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800278c:	e007      	b.n	800279e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	431a      	orrs	r2, r3
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d107      	bne.n	80027b6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	431a      	orrs	r2, r3
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80027bc:	f023 0201 	bic.w	r2, r3, #1
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80027c6:	2300      	movs	r3, #0
 80027c8:	e006      	b.n	80027d8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ce:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
  }
}
 80027d8:	4618      	mov	r0, r3
 80027da:	371c      	adds	r7, #28
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	40006400 	.word	0x40006400

080027e8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d12e      	bne.n	800285a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2202      	movs	r2, #2
 8002800:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f022 0201 	bic.w	r2, r2, #1
 8002812:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002814:	f7ff fa9a 	bl	8001d4c <HAL_GetTick>
 8002818:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800281a:	e012      	b.n	8002842 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800281c:	f7ff fa96 	bl	8001d4c <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b0a      	cmp	r3, #10
 8002828:	d90b      	bls.n	8002842 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800282e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2205      	movs	r2, #5
 800283a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e012      	b.n	8002868 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f003 0301 	and.w	r3, r3, #1
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1e5      	bne.n	800281c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002856:	2300      	movs	r3, #0
 8002858:	e006      	b.n	8002868 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
  }
}
 8002868:	4618      	mov	r0, r3
 800286a:	3710      	adds	r7, #16
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002880:	4b0c      	ldr	r3, [pc, #48]	@ (80028b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002886:	68ba      	ldr	r2, [r7, #8]
 8002888:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800288c:	4013      	ands	r3, r2
 800288e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002898:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800289c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028a2:	4a04      	ldr	r2, [pc, #16]	@ (80028b4 <__NVIC_SetPriorityGrouping+0x44>)
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	60d3      	str	r3, [r2, #12]
}
 80028a8:	bf00      	nop
 80028aa:	3714      	adds	r7, #20
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr
 80028b4:	e000ed00 	.word	0xe000ed00

080028b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028bc:	4b04      	ldr	r3, [pc, #16]	@ (80028d0 <__NVIC_GetPriorityGrouping+0x18>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	0a1b      	lsrs	r3, r3, #8
 80028c2:	f003 0307 	and.w	r3, r3, #7
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr
 80028d0:	e000ed00 	.word	0xe000ed00

080028d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	db0b      	blt.n	80028fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028e6:	79fb      	ldrb	r3, [r7, #7]
 80028e8:	f003 021f 	and.w	r2, r3, #31
 80028ec:	4907      	ldr	r1, [pc, #28]	@ (800290c <__NVIC_EnableIRQ+0x38>)
 80028ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f2:	095b      	lsrs	r3, r3, #5
 80028f4:	2001      	movs	r0, #1
 80028f6:	fa00 f202 	lsl.w	r2, r0, r2
 80028fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	e000e100 	.word	0xe000e100

08002910 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	4603      	mov	r3, r0
 8002918:	6039      	str	r1, [r7, #0]
 800291a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800291c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002920:	2b00      	cmp	r3, #0
 8002922:	db0a      	blt.n	800293a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	b2da      	uxtb	r2, r3
 8002928:	490c      	ldr	r1, [pc, #48]	@ (800295c <__NVIC_SetPriority+0x4c>)
 800292a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292e:	0112      	lsls	r2, r2, #4
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	440b      	add	r3, r1
 8002934:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002938:	e00a      	b.n	8002950 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	b2da      	uxtb	r2, r3
 800293e:	4908      	ldr	r1, [pc, #32]	@ (8002960 <__NVIC_SetPriority+0x50>)
 8002940:	79fb      	ldrb	r3, [r7, #7]
 8002942:	f003 030f 	and.w	r3, r3, #15
 8002946:	3b04      	subs	r3, #4
 8002948:	0112      	lsls	r2, r2, #4
 800294a:	b2d2      	uxtb	r2, r2
 800294c:	440b      	add	r3, r1
 800294e:	761a      	strb	r2, [r3, #24]
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr
 800295c:	e000e100 	.word	0xe000e100
 8002960:	e000ed00 	.word	0xe000ed00

08002964 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002964:	b480      	push	{r7}
 8002966:	b089      	sub	sp, #36	@ 0x24
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f003 0307 	and.w	r3, r3, #7
 8002976:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	f1c3 0307 	rsb	r3, r3, #7
 800297e:	2b04      	cmp	r3, #4
 8002980:	bf28      	it	cs
 8002982:	2304      	movcs	r3, #4
 8002984:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	3304      	adds	r3, #4
 800298a:	2b06      	cmp	r3, #6
 800298c:	d902      	bls.n	8002994 <NVIC_EncodePriority+0x30>
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	3b03      	subs	r3, #3
 8002992:	e000      	b.n	8002996 <NVIC_EncodePriority+0x32>
 8002994:	2300      	movs	r3, #0
 8002996:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002998:	f04f 32ff 	mov.w	r2, #4294967295
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	43da      	mvns	r2, r3
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	401a      	ands	r2, r3
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029ac:	f04f 31ff 	mov.w	r1, #4294967295
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	fa01 f303 	lsl.w	r3, r1, r3
 80029b6:	43d9      	mvns	r1, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029bc:	4313      	orrs	r3, r2
         );
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3724      	adds	r7, #36	@ 0x24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
	...

080029cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	3b01      	subs	r3, #1
 80029d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029dc:	d301      	bcc.n	80029e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029de:	2301      	movs	r3, #1
 80029e0:	e00f      	b.n	8002a02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029e2:	4a0a      	ldr	r2, [pc, #40]	@ (8002a0c <SysTick_Config+0x40>)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	3b01      	subs	r3, #1
 80029e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029ea:	210f      	movs	r1, #15
 80029ec:	f04f 30ff 	mov.w	r0, #4294967295
 80029f0:	f7ff ff8e 	bl	8002910 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029f4:	4b05      	ldr	r3, [pc, #20]	@ (8002a0c <SysTick_Config+0x40>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029fa:	4b04      	ldr	r3, [pc, #16]	@ (8002a0c <SysTick_Config+0x40>)
 80029fc:	2207      	movs	r2, #7
 80029fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	e000e010 	.word	0xe000e010

08002a10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f7ff ff29 	bl	8002870 <__NVIC_SetPriorityGrouping>
}
 8002a1e:	bf00      	nop
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b086      	sub	sp, #24
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	60b9      	str	r1, [r7, #8]
 8002a30:	607a      	str	r2, [r7, #4]
 8002a32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a34:	2300      	movs	r3, #0
 8002a36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a38:	f7ff ff3e 	bl	80028b8 <__NVIC_GetPriorityGrouping>
 8002a3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	68b9      	ldr	r1, [r7, #8]
 8002a42:	6978      	ldr	r0, [r7, #20]
 8002a44:	f7ff ff8e 	bl	8002964 <NVIC_EncodePriority>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a4e:	4611      	mov	r1, r2
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff ff5d 	bl	8002910 <__NVIC_SetPriority>
}
 8002a56:	bf00      	nop
 8002a58:	3718      	adds	r7, #24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b082      	sub	sp, #8
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	4603      	mov	r3, r0
 8002a66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff ff31 	bl	80028d4 <__NVIC_EnableIRQ>
}
 8002a72:	bf00      	nop
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b082      	sub	sp, #8
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7ff ffa2 	bl	80029cc <SysTick_Config>
 8002a88:	4603      	mov	r3, r0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b082      	sub	sp, #8
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e014      	b.n	8002ace <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	791b      	ldrb	r3, [r3, #4]
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d105      	bne.n	8002aba <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f7fe fff3 	bl	8001aa0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2202      	movs	r2, #2
 8002abe:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b083      	sub	sp, #12
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
 8002ade:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	795b      	ldrb	r3, [r3, #5]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d101      	bne.n	8002aec <HAL_DAC_Start+0x16>
 8002ae8:	2302      	movs	r3, #2
 8002aea:	e040      	b.n	8002b6e <HAL_DAC_Start+0x98>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2202      	movs	r2, #2
 8002af6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6819      	ldr	r1, [r3, #0]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	f003 0310 	and.w	r3, r3, #16
 8002b04:	2201      	movs	r2, #1
 8002b06:	409a      	lsls	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d10f      	bne.n	8002b36 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8002b20:	2b3c      	cmp	r3, #60	@ 0x3c
 8002b22:	d11d      	bne.n	8002b60 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	685a      	ldr	r2, [r3, #4]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f042 0201 	orr.w	r2, r2, #1
 8002b32:	605a      	str	r2, [r3, #4]
 8002b34:	e014      	b.n	8002b60 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	f003 0310 	and.w	r3, r3, #16
 8002b46:	213c      	movs	r1, #60	@ 0x3c
 8002b48:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d107      	bne.n	8002b60 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f042 0202 	orr.w	r2, r2, #2
 8002b5e:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b087      	sub	sp, #28
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	60f8      	str	r0, [r7, #12]
 8002b82:	60b9      	str	r1, [r7, #8]
 8002b84:	607a      	str	r2, [r7, #4]
 8002b86:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d105      	bne.n	8002ba4 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	3308      	adds	r3, #8
 8002ba0:	617b      	str	r3, [r7, #20]
 8002ba2:	e004      	b.n	8002bae <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002ba4:	697a      	ldr	r2, [r7, #20]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4413      	add	r3, r2
 8002baa:	3314      	adds	r3, #20
 8002bac:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	371c      	adds	r7, #28
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b087      	sub	sp, #28
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	795b      	ldrb	r3, [r3, #5]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d101      	bne.n	8002bdc <HAL_DAC_ConfigChannel+0x18>
 8002bd8:	2302      	movs	r3, #2
 8002bda:	e03c      	b.n	8002c56 <HAL_DAC_ConfigChannel+0x92>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2201      	movs	r2, #1
 8002be0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2202      	movs	r2, #2
 8002be6:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f003 0310 	and.w	r3, r3, #16
 8002bf6:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	697a      	ldr	r2, [r7, #20]
 8002c02:	4013      	ands	r3, r2
 8002c04:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f003 0310 	and.w	r3, r3, #16
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	697a      	ldr	r2, [r7, #20]
 8002c2a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6819      	ldr	r1, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f003 0310 	and.w	r3, r3, #16
 8002c38:	22c0      	movs	r2, #192	@ 0xc0
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	43da      	mvns	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	400a      	ands	r2, r1
 8002c46:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	371c      	adds	r7, #28
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
	...

08002c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b089      	sub	sp, #36	@ 0x24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c72:	2300      	movs	r3, #0
 8002c74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c76:	2300      	movs	r3, #0
 8002c78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	61fb      	str	r3, [r7, #28]
 8002c7e:	e16b      	b.n	8002f58 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c80:	2201      	movs	r2, #1
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	4013      	ands	r3, r2
 8002c92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	f040 815a 	bne.w	8002f52 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f003 0303 	and.w	r3, r3, #3
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d005      	beq.n	8002cb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d130      	bne.n	8002d18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	2203      	movs	r2, #3
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	43db      	mvns	r3, r3
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	4013      	ands	r3, r2
 8002ccc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	68da      	ldr	r2, [r3, #12]
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cec:	2201      	movs	r2, #1
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	091b      	lsrs	r3, r3, #4
 8002d02:	f003 0201 	and.w	r2, r3, #1
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f003 0303 	and.w	r3, r3, #3
 8002d20:	2b03      	cmp	r3, #3
 8002d22:	d017      	beq.n	8002d54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	2203      	movs	r2, #3
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	43db      	mvns	r3, r3
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f003 0303 	and.w	r3, r3, #3
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d123      	bne.n	8002da8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	08da      	lsrs	r2, r3, #3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	3208      	adds	r2, #8
 8002d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	220f      	movs	r2, #15
 8002d78:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7c:	43db      	mvns	r3, r3
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	4013      	ands	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	691a      	ldr	r2, [r3, #16]
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	f003 0307 	and.w	r3, r3, #7
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	08da      	lsrs	r2, r3, #3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	3208      	adds	r2, #8
 8002da2:	69b9      	ldr	r1, [r7, #24]
 8002da4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	2203      	movs	r2, #3
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	43db      	mvns	r3, r3
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f003 0203 	and.w	r2, r3, #3
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f000 80b4 	beq.w	8002f52 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dea:	2300      	movs	r3, #0
 8002dec:	60fb      	str	r3, [r7, #12]
 8002dee:	4b60      	ldr	r3, [pc, #384]	@ (8002f70 <HAL_GPIO_Init+0x30c>)
 8002df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df2:	4a5f      	ldr	r2, [pc, #380]	@ (8002f70 <HAL_GPIO_Init+0x30c>)
 8002df4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002df8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dfa:	4b5d      	ldr	r3, [pc, #372]	@ (8002f70 <HAL_GPIO_Init+0x30c>)
 8002dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e02:	60fb      	str	r3, [r7, #12]
 8002e04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e06:	4a5b      	ldr	r2, [pc, #364]	@ (8002f74 <HAL_GPIO_Init+0x310>)
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	089b      	lsrs	r3, r3, #2
 8002e0c:	3302      	adds	r3, #2
 8002e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	f003 0303 	and.w	r3, r3, #3
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	220f      	movs	r2, #15
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	43db      	mvns	r3, r3
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	4013      	ands	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a52      	ldr	r2, [pc, #328]	@ (8002f78 <HAL_GPIO_Init+0x314>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d02b      	beq.n	8002e8a <HAL_GPIO_Init+0x226>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a51      	ldr	r2, [pc, #324]	@ (8002f7c <HAL_GPIO_Init+0x318>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d025      	beq.n	8002e86 <HAL_GPIO_Init+0x222>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a50      	ldr	r2, [pc, #320]	@ (8002f80 <HAL_GPIO_Init+0x31c>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d01f      	beq.n	8002e82 <HAL_GPIO_Init+0x21e>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a4f      	ldr	r2, [pc, #316]	@ (8002f84 <HAL_GPIO_Init+0x320>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d019      	beq.n	8002e7e <HAL_GPIO_Init+0x21a>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a4e      	ldr	r2, [pc, #312]	@ (8002f88 <HAL_GPIO_Init+0x324>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d013      	beq.n	8002e7a <HAL_GPIO_Init+0x216>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a4d      	ldr	r2, [pc, #308]	@ (8002f8c <HAL_GPIO_Init+0x328>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d00d      	beq.n	8002e76 <HAL_GPIO_Init+0x212>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a4c      	ldr	r2, [pc, #304]	@ (8002f90 <HAL_GPIO_Init+0x32c>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d007      	beq.n	8002e72 <HAL_GPIO_Init+0x20e>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a4b      	ldr	r2, [pc, #300]	@ (8002f94 <HAL_GPIO_Init+0x330>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d101      	bne.n	8002e6e <HAL_GPIO_Init+0x20a>
 8002e6a:	2307      	movs	r3, #7
 8002e6c:	e00e      	b.n	8002e8c <HAL_GPIO_Init+0x228>
 8002e6e:	2308      	movs	r3, #8
 8002e70:	e00c      	b.n	8002e8c <HAL_GPIO_Init+0x228>
 8002e72:	2306      	movs	r3, #6
 8002e74:	e00a      	b.n	8002e8c <HAL_GPIO_Init+0x228>
 8002e76:	2305      	movs	r3, #5
 8002e78:	e008      	b.n	8002e8c <HAL_GPIO_Init+0x228>
 8002e7a:	2304      	movs	r3, #4
 8002e7c:	e006      	b.n	8002e8c <HAL_GPIO_Init+0x228>
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e004      	b.n	8002e8c <HAL_GPIO_Init+0x228>
 8002e82:	2302      	movs	r3, #2
 8002e84:	e002      	b.n	8002e8c <HAL_GPIO_Init+0x228>
 8002e86:	2301      	movs	r3, #1
 8002e88:	e000      	b.n	8002e8c <HAL_GPIO_Init+0x228>
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	69fa      	ldr	r2, [r7, #28]
 8002e8e:	f002 0203 	and.w	r2, r2, #3
 8002e92:	0092      	lsls	r2, r2, #2
 8002e94:	4093      	lsls	r3, r2
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e9c:	4935      	ldr	r1, [pc, #212]	@ (8002f74 <HAL_GPIO_Init+0x310>)
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	089b      	lsrs	r3, r3, #2
 8002ea2:	3302      	adds	r3, #2
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002eaa:	4b3b      	ldr	r3, [pc, #236]	@ (8002f98 <HAL_GPIO_Init+0x334>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	43db      	mvns	r3, r3
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ece:	4a32      	ldr	r2, [pc, #200]	@ (8002f98 <HAL_GPIO_Init+0x334>)
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ed4:	4b30      	ldr	r3, [pc, #192]	@ (8002f98 <HAL_GPIO_Init+0x334>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	43db      	mvns	r3, r3
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d003      	beq.n	8002ef8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ef8:	4a27      	ldr	r2, [pc, #156]	@ (8002f98 <HAL_GPIO_Init+0x334>)
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002efe:	4b26      	ldr	r3, [pc, #152]	@ (8002f98 <HAL_GPIO_Init+0x334>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	43db      	mvns	r3, r3
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f22:	4a1d      	ldr	r2, [pc, #116]	@ (8002f98 <HAL_GPIO_Init+0x334>)
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f28:	4b1b      	ldr	r3, [pc, #108]	@ (8002f98 <HAL_GPIO_Init+0x334>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	43db      	mvns	r3, r3
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	4013      	ands	r3, r2
 8002f36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d003      	beq.n	8002f4c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f4c:	4a12      	ldr	r2, [pc, #72]	@ (8002f98 <HAL_GPIO_Init+0x334>)
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	3301      	adds	r3, #1
 8002f56:	61fb      	str	r3, [r7, #28]
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	2b0f      	cmp	r3, #15
 8002f5c:	f67f ae90 	bls.w	8002c80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f60:	bf00      	nop
 8002f62:	bf00      	nop
 8002f64:	3724      	adds	r7, #36	@ 0x24
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	40023800 	.word	0x40023800
 8002f74:	40013800 	.word	0x40013800
 8002f78:	40020000 	.word	0x40020000
 8002f7c:	40020400 	.word	0x40020400
 8002f80:	40020800 	.word	0x40020800
 8002f84:	40020c00 	.word	0x40020c00
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	40021400 	.word	0x40021400
 8002f90:	40021800 	.word	0x40021800
 8002f94:	40021c00 	.word	0x40021c00
 8002f98:	40013c00 	.word	0x40013c00

08002f9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	691a      	ldr	r2, [r3, #16]
 8002fac:	887b      	ldrh	r3, [r7, #2]
 8002fae:	4013      	ands	r3, r2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d002      	beq.n	8002fba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	73fb      	strb	r3, [r7, #15]
 8002fb8:	e001      	b.n	8002fbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3714      	adds	r7, #20
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	807b      	strh	r3, [r7, #2]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fdc:	787b      	ldrb	r3, [r7, #1]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fe2:	887a      	ldrh	r2, [r7, #2]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fe8:	e003      	b.n	8002ff2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fea:	887b      	ldrh	r3, [r7, #2]
 8002fec:	041a      	lsls	r2, r3, #16
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	619a      	str	r2, [r3, #24]
}
 8002ff2:	bf00      	nop
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr

08002ffe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ffe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003000:	b08f      	sub	sp, #60	@ 0x3c
 8003002:	af0a      	add	r7, sp, #40	@ 0x28
 8003004:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d101      	bne.n	8003010 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e10f      	b.n	8003230 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d106      	bne.n	8003030 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f005 fcee 	bl	8008a0c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2203      	movs	r2, #3
 8003034:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800303c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003040:	2b00      	cmp	r3, #0
 8003042:	d102      	bne.n	800304a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4618      	mov	r0, r3
 8003050:	f001 ffd7 	bl	8005002 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	603b      	str	r3, [r7, #0]
 800305a:	687e      	ldr	r6, [r7, #4]
 800305c:	466d      	mov	r5, sp
 800305e:	f106 0410 	add.w	r4, r6, #16
 8003062:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003064:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003066:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003068:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800306a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800306e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003072:	1d33      	adds	r3, r6, #4
 8003074:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003076:	6838      	ldr	r0, [r7, #0]
 8003078:	f001 feae 	bl	8004dd8 <USB_CoreInit>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d005      	beq.n	800308e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2202      	movs	r2, #2
 8003086:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e0d0      	b.n	8003230 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2100      	movs	r1, #0
 8003094:	4618      	mov	r0, r3
 8003096:	f001 ffc5 	bl	8005024 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800309a:	2300      	movs	r3, #0
 800309c:	73fb      	strb	r3, [r7, #15]
 800309e:	e04a      	b.n	8003136 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80030a0:	7bfa      	ldrb	r2, [r7, #15]
 80030a2:	6879      	ldr	r1, [r7, #4]
 80030a4:	4613      	mov	r3, r2
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	4413      	add	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	440b      	add	r3, r1
 80030ae:	333d      	adds	r3, #61	@ 0x3d
 80030b0:	2201      	movs	r2, #1
 80030b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80030b4:	7bfa      	ldrb	r2, [r7, #15]
 80030b6:	6879      	ldr	r1, [r7, #4]
 80030b8:	4613      	mov	r3, r2
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	4413      	add	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	440b      	add	r3, r1
 80030c2:	333c      	adds	r3, #60	@ 0x3c
 80030c4:	7bfa      	ldrb	r2, [r7, #15]
 80030c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80030c8:	7bfa      	ldrb	r2, [r7, #15]
 80030ca:	7bfb      	ldrb	r3, [r7, #15]
 80030cc:	b298      	uxth	r0, r3
 80030ce:	6879      	ldr	r1, [r7, #4]
 80030d0:	4613      	mov	r3, r2
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	4413      	add	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	440b      	add	r3, r1
 80030da:	3344      	adds	r3, #68	@ 0x44
 80030dc:	4602      	mov	r2, r0
 80030de:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80030e0:	7bfa      	ldrb	r2, [r7, #15]
 80030e2:	6879      	ldr	r1, [r7, #4]
 80030e4:	4613      	mov	r3, r2
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	4413      	add	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	440b      	add	r3, r1
 80030ee:	3340      	adds	r3, #64	@ 0x40
 80030f0:	2200      	movs	r2, #0
 80030f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80030f4:	7bfa      	ldrb	r2, [r7, #15]
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	4613      	mov	r3, r2
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	4413      	add	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	440b      	add	r3, r1
 8003102:	3348      	adds	r3, #72	@ 0x48
 8003104:	2200      	movs	r2, #0
 8003106:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003108:	7bfa      	ldrb	r2, [r7, #15]
 800310a:	6879      	ldr	r1, [r7, #4]
 800310c:	4613      	mov	r3, r2
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	4413      	add	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	440b      	add	r3, r1
 8003116:	334c      	adds	r3, #76	@ 0x4c
 8003118:	2200      	movs	r2, #0
 800311a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800311c:	7bfa      	ldrb	r2, [r7, #15]
 800311e:	6879      	ldr	r1, [r7, #4]
 8003120:	4613      	mov	r3, r2
 8003122:	00db      	lsls	r3, r3, #3
 8003124:	4413      	add	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	440b      	add	r3, r1
 800312a:	3354      	adds	r3, #84	@ 0x54
 800312c:	2200      	movs	r2, #0
 800312e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003130:	7bfb      	ldrb	r3, [r7, #15]
 8003132:	3301      	adds	r3, #1
 8003134:	73fb      	strb	r3, [r7, #15]
 8003136:	7bfa      	ldrb	r2, [r7, #15]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	429a      	cmp	r2, r3
 800313e:	d3af      	bcc.n	80030a0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003140:	2300      	movs	r3, #0
 8003142:	73fb      	strb	r3, [r7, #15]
 8003144:	e044      	b.n	80031d0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003146:	7bfa      	ldrb	r2, [r7, #15]
 8003148:	6879      	ldr	r1, [r7, #4]
 800314a:	4613      	mov	r3, r2
 800314c:	00db      	lsls	r3, r3, #3
 800314e:	4413      	add	r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	440b      	add	r3, r1
 8003154:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8003158:	2200      	movs	r2, #0
 800315a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800315c:	7bfa      	ldrb	r2, [r7, #15]
 800315e:	6879      	ldr	r1, [r7, #4]
 8003160:	4613      	mov	r3, r2
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	4413      	add	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	440b      	add	r3, r1
 800316a:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 800316e:	7bfa      	ldrb	r2, [r7, #15]
 8003170:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003172:	7bfa      	ldrb	r2, [r7, #15]
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	4613      	mov	r3, r2
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	4413      	add	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	440b      	add	r3, r1
 8003180:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8003184:	2200      	movs	r2, #0
 8003186:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003188:	7bfa      	ldrb	r2, [r7, #15]
 800318a:	6879      	ldr	r1, [r7, #4]
 800318c:	4613      	mov	r3, r2
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	4413      	add	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	440b      	add	r3, r1
 8003196:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800319a:	2200      	movs	r2, #0
 800319c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800319e:	7bfa      	ldrb	r2, [r7, #15]
 80031a0:	6879      	ldr	r1, [r7, #4]
 80031a2:	4613      	mov	r3, r2
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	4413      	add	r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	440b      	add	r3, r1
 80031ac:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80031b0:	2200      	movs	r2, #0
 80031b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80031b4:	7bfa      	ldrb	r2, [r7, #15]
 80031b6:	6879      	ldr	r1, [r7, #4]
 80031b8:	4613      	mov	r3, r2
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	4413      	add	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	440b      	add	r3, r1
 80031c2:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80031c6:	2200      	movs	r2, #0
 80031c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031ca:	7bfb      	ldrb	r3, [r7, #15]
 80031cc:	3301      	adds	r3, #1
 80031ce:	73fb      	strb	r3, [r7, #15]
 80031d0:	7bfa      	ldrb	r2, [r7, #15]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d3b5      	bcc.n	8003146 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	603b      	str	r3, [r7, #0]
 80031e0:	687e      	ldr	r6, [r7, #4]
 80031e2:	466d      	mov	r5, sp
 80031e4:	f106 0410 	add.w	r4, r6, #16
 80031e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80031f8:	1d33      	adds	r3, r6, #4
 80031fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031fc:	6838      	ldr	r0, [r7, #0]
 80031fe:	f001 ff5d 	bl	80050bc <USB_DevInit>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d005      	beq.n	8003214 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2202      	movs	r2, #2
 800320c:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e00d      	b.n	8003230 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4618      	mov	r0, r3
 800322a:	f003 f8ac 	bl	8006386 <USB_DevDisconnect>

  return HAL_OK;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3714      	adds	r7, #20
 8003234:	46bd      	mov	sp, r7
 8003236:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003238 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800324c:	2b01      	cmp	r3, #1
 800324e:	d101      	bne.n	8003254 <HAL_PCD_Start+0x1c>
 8003250:	2302      	movs	r3, #2
 8003252:	e020      	b.n	8003296 <HAL_PCD_Start+0x5e>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003260:	2b01      	cmp	r3, #1
 8003262:	d109      	bne.n	8003278 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003268:	2b01      	cmp	r3, #1
 800326a:	d005      	beq.n	8003278 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003270:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4618      	mov	r0, r3
 800327e:	f001 feaf 	bl	8004fe0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4618      	mov	r0, r3
 8003288:	f003 f85c 	bl	8006344 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800329e:	b590      	push	{r4, r7, lr}
 80032a0:	b08d      	sub	sp, #52	@ 0x34
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032ac:	6a3b      	ldr	r3, [r7, #32]
 80032ae:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f003 f91a 	bl	80064ee <USB_GetMode>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f040 848a 	bne.w	8003bd6 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f003 f87e 	bl	80063c8 <USB_ReadInterrupts>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f000 8480 	beq.w	8003bd4 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	0a1b      	lsrs	r3, r3, #8
 80032de:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f003 f86b 	bl	80063c8 <USB_ReadInterrupts>
 80032f2:	4603      	mov	r3, r0
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d107      	bne.n	800330c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	695a      	ldr	r2, [r3, #20]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f002 0202 	and.w	r2, r2, #2
 800330a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4618      	mov	r0, r3
 8003312:	f003 f859 	bl	80063c8 <USB_ReadInterrupts>
 8003316:	4603      	mov	r3, r0
 8003318:	f003 0310 	and.w	r3, r3, #16
 800331c:	2b10      	cmp	r3, #16
 800331e:	d161      	bne.n	80033e4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	699a      	ldr	r2, [r3, #24]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f022 0210 	bic.w	r2, r2, #16
 800332e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003330:	6a3b      	ldr	r3, [r7, #32]
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	f003 020f 	and.w	r2, r3, #15
 800333c:	4613      	mov	r3, r2
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	4413      	add	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	4413      	add	r3, r2
 800334c:	3304      	adds	r3, #4
 800334e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	0c5b      	lsrs	r3, r3, #17
 8003354:	f003 030f 	and.w	r3, r3, #15
 8003358:	2b02      	cmp	r3, #2
 800335a:	d124      	bne.n	80033a6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003362:	4013      	ands	r3, r2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d035      	beq.n	80033d4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	091b      	lsrs	r3, r3, #4
 8003370:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003372:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003376:	b29b      	uxth	r3, r3
 8003378:	461a      	mov	r2, r3
 800337a:	6a38      	ldr	r0, [r7, #32]
 800337c:	f002 fe90 	bl	80060a0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	691a      	ldr	r2, [r3, #16]
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	091b      	lsrs	r3, r3, #4
 8003388:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800338c:	441a      	add	r2, r3
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	6a1a      	ldr	r2, [r3, #32]
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	091b      	lsrs	r3, r3, #4
 800339a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800339e:	441a      	add	r2, r3
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	621a      	str	r2, [r3, #32]
 80033a4:	e016      	b.n	80033d4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	0c5b      	lsrs	r3, r3, #17
 80033aa:	f003 030f 	and.w	r3, r3, #15
 80033ae:	2b06      	cmp	r3, #6
 80033b0:	d110      	bne.n	80033d4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80033b8:	2208      	movs	r2, #8
 80033ba:	4619      	mov	r1, r3
 80033bc:	6a38      	ldr	r0, [r7, #32]
 80033be:	f002 fe6f 	bl	80060a0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	6a1a      	ldr	r2, [r3, #32]
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	091b      	lsrs	r3, r3, #4
 80033ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033ce:	441a      	add	r2, r3
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	699a      	ldr	r2, [r3, #24]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f042 0210 	orr.w	r2, r2, #16
 80033e2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f002 ffed 	bl	80063c8 <USB_ReadInterrupts>
 80033ee:	4603      	mov	r3, r0
 80033f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033f4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80033f8:	f040 80a7 	bne.w	800354a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80033fc:	2300      	movs	r3, #0
 80033fe:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4618      	mov	r0, r3
 8003406:	f002 fff2 	bl	80063ee <USB_ReadDevAllOutEpInterrupt>
 800340a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800340c:	e099      	b.n	8003542 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800340e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003410:	f003 0301 	and.w	r3, r3, #1
 8003414:	2b00      	cmp	r3, #0
 8003416:	f000 808e 	beq.w	8003536 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003420:	b2d2      	uxtb	r2, r2
 8003422:	4611      	mov	r1, r2
 8003424:	4618      	mov	r0, r3
 8003426:	f003 f816 	bl	8006456 <USB_ReadDevOutEPInterrupt>
 800342a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00c      	beq.n	8003450 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003438:	015a      	lsls	r2, r3, #5
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	4413      	add	r3, r2
 800343e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003442:	461a      	mov	r2, r3
 8003444:	2301      	movs	r3, #1
 8003446:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003448:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 fec2 	bl	80041d4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	f003 0308 	and.w	r3, r3, #8
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00c      	beq.n	8003474 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800345a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800345c:	015a      	lsls	r2, r3, #5
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	4413      	add	r3, r2
 8003462:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003466:	461a      	mov	r2, r3
 8003468:	2308      	movs	r3, #8
 800346a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800346c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 ff98 	bl	80043a4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	f003 0310 	and.w	r3, r3, #16
 800347a:	2b00      	cmp	r3, #0
 800347c:	d008      	beq.n	8003490 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800347e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003480:	015a      	lsls	r2, r3, #5
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	4413      	add	r3, r2
 8003486:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800348a:	461a      	mov	r2, r3
 800348c:	2310      	movs	r3, #16
 800348e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d030      	beq.n	80034fc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800349a:	6a3b      	ldr	r3, [r7, #32]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034a2:	2b80      	cmp	r3, #128	@ 0x80
 80034a4:	d109      	bne.n	80034ba <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	69fa      	ldr	r2, [r7, #28]
 80034b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80034b4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80034b8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80034ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034bc:	4613      	mov	r3, r2
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	4413      	add	r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	4413      	add	r3, r2
 80034cc:	3304      	adds	r3, #4
 80034ce:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	78db      	ldrb	r3, [r3, #3]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d108      	bne.n	80034ea <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	2200      	movs	r2, #0
 80034dc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80034de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	4619      	mov	r1, r3
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f005 fba5 	bl	8008c34 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80034ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ec:	015a      	lsls	r2, r3, #5
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	4413      	add	r3, r2
 80034f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034f6:	461a      	mov	r2, r3
 80034f8:	2302      	movs	r3, #2
 80034fa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	f003 0320 	and.w	r3, r3, #32
 8003502:	2b00      	cmp	r3, #0
 8003504:	d008      	beq.n	8003518 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003508:	015a      	lsls	r2, r3, #5
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	4413      	add	r3, r2
 800350e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003512:	461a      	mov	r2, r3
 8003514:	2320      	movs	r3, #32
 8003516:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d009      	beq.n	8003536 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003524:	015a      	lsls	r2, r3, #5
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	4413      	add	r3, r2
 800352a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800352e:	461a      	mov	r2, r3
 8003530:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003534:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003538:	3301      	adds	r3, #1
 800353a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800353c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800353e:	085b      	lsrs	r3, r3, #1
 8003540:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003544:	2b00      	cmp	r3, #0
 8003546:	f47f af62 	bne.w	800340e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4618      	mov	r0, r3
 8003550:	f002 ff3a 	bl	80063c8 <USB_ReadInterrupts>
 8003554:	4603      	mov	r3, r0
 8003556:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800355a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800355e:	f040 80db 	bne.w	8003718 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f002 ff5b 	bl	8006422 <USB_ReadDevAllInEpInterrupt>
 800356c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800356e:	2300      	movs	r3, #0
 8003570:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003572:	e0cd      	b.n	8003710 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	2b00      	cmp	r3, #0
 800357c:	f000 80c2 	beq.w	8003704 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003586:	b2d2      	uxtb	r2, r2
 8003588:	4611      	mov	r1, r2
 800358a:	4618      	mov	r0, r3
 800358c:	f002 ff81 	bl	8006492 <USB_ReadDevInEPInterrupt>
 8003590:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	2b00      	cmp	r3, #0
 800359a:	d057      	beq.n	800364c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800359c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800359e:	f003 030f 	and.w	r3, r3, #15
 80035a2:	2201      	movs	r2, #1
 80035a4:	fa02 f303 	lsl.w	r3, r2, r3
 80035a8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	43db      	mvns	r3, r3
 80035b6:	69f9      	ldr	r1, [r7, #28]
 80035b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80035bc:	4013      	ands	r3, r2
 80035be:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80035c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c2:	015a      	lsls	r2, r3, #5
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	4413      	add	r3, r2
 80035c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035cc:	461a      	mov	r2, r3
 80035ce:	2301      	movs	r3, #1
 80035d0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d132      	bne.n	8003640 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80035da:	6879      	ldr	r1, [r7, #4]
 80035dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035de:	4613      	mov	r3, r2
 80035e0:	00db      	lsls	r3, r3, #3
 80035e2:	4413      	add	r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	440b      	add	r3, r1
 80035e8:	334c      	adds	r3, #76	@ 0x4c
 80035ea:	6819      	ldr	r1, [r3, #0]
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035f0:	4613      	mov	r3, r2
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	4413      	add	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	4403      	add	r3, r0
 80035fa:	3348      	adds	r3, #72	@ 0x48
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4419      	add	r1, r3
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003604:	4613      	mov	r3, r2
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	4413      	add	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	4403      	add	r3, r0
 800360e:	334c      	adds	r3, #76	@ 0x4c
 8003610:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003614:	2b00      	cmp	r3, #0
 8003616:	d113      	bne.n	8003640 <HAL_PCD_IRQHandler+0x3a2>
 8003618:	6879      	ldr	r1, [r7, #4]
 800361a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800361c:	4613      	mov	r3, r2
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	4413      	add	r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	3354      	adds	r3, #84	@ 0x54
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d108      	bne.n	8003640 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6818      	ldr	r0, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003638:	461a      	mov	r2, r3
 800363a:	2101      	movs	r1, #1
 800363c:	f002 ff88 	bl	8006550 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003642:	b2db      	uxtb	r3, r3
 8003644:	4619      	mov	r1, r3
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f005 fa6f 	bl	8008b2a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	f003 0308 	and.w	r3, r3, #8
 8003652:	2b00      	cmp	r3, #0
 8003654:	d008      	beq.n	8003668 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003658:	015a      	lsls	r2, r3, #5
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	4413      	add	r3, r2
 800365e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003662:	461a      	mov	r2, r3
 8003664:	2308      	movs	r3, #8
 8003666:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	f003 0310 	and.w	r3, r3, #16
 800366e:	2b00      	cmp	r3, #0
 8003670:	d008      	beq.n	8003684 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003674:	015a      	lsls	r2, r3, #5
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	4413      	add	r3, r2
 800367a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800367e:	461a      	mov	r2, r3
 8003680:	2310      	movs	r3, #16
 8003682:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800368a:	2b00      	cmp	r3, #0
 800368c:	d008      	beq.n	80036a0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800368e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003690:	015a      	lsls	r2, r3, #5
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	4413      	add	r3, r2
 8003696:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800369a:	461a      	mov	r2, r3
 800369c:	2340      	movs	r3, #64	@ 0x40
 800369e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d023      	beq.n	80036f2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80036aa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80036ac:	6a38      	ldr	r0, [r7, #32]
 80036ae:	f001 fe69 	bl	8005384 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80036b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036b4:	4613      	mov	r3, r2
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	4413      	add	r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	3338      	adds	r3, #56	@ 0x38
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	4413      	add	r3, r2
 80036c2:	3304      	adds	r3, #4
 80036c4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	78db      	ldrb	r3, [r3, #3]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d108      	bne.n	80036e0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	2200      	movs	r2, #0
 80036d2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80036d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	4619      	mov	r1, r3
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f005 fabc 	bl	8008c58 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80036e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e2:	015a      	lsls	r2, r3, #5
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	4413      	add	r3, r2
 80036e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036ec:	461a      	mov	r2, r3
 80036ee:	2302      	movs	r3, #2
 80036f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d003      	beq.n	8003704 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80036fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 fcdb 	bl	80040ba <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003706:	3301      	adds	r3, #1
 8003708:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800370a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800370c:	085b      	lsrs	r3, r3, #1
 800370e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003712:	2b00      	cmp	r3, #0
 8003714:	f47f af2e 	bne.w	8003574 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4618      	mov	r0, r3
 800371e:	f002 fe53 	bl	80063c8 <USB_ReadInterrupts>
 8003722:	4603      	mov	r3, r0
 8003724:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003728:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800372c:	d122      	bne.n	8003774 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	69fa      	ldr	r2, [r7, #28]
 8003738:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800373c:	f023 0301 	bic.w	r3, r3, #1
 8003740:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8003748:	2b01      	cmp	r3, #1
 800374a:	d108      	bne.n	800375e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003754:	2100      	movs	r1, #0
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 fec2 	bl	80044e0 <HAL_PCDEx_LPM_Callback>
 800375c:	e002      	b.n	8003764 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f005 fa5a 	bl	8008c18 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	695a      	ldr	r2, [r3, #20]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003772:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4618      	mov	r0, r3
 800377a:	f002 fe25 	bl	80063c8 <USB_ReadInterrupts>
 800377e:	4603      	mov	r3, r0
 8003780:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003784:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003788:	d112      	bne.n	80037b0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b01      	cmp	r3, #1
 8003798:	d102      	bne.n	80037a0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f005 fa16 	bl	8008bcc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	695a      	ldr	r2, [r3, #20]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80037ae:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f002 fe07 	bl	80063c8 <USB_ReadInterrupts>
 80037ba:	4603      	mov	r3, r0
 80037bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037c4:	f040 80b7 	bne.w	8003936 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	69fa      	ldr	r2, [r7, #28]
 80037d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80037d6:	f023 0301 	bic.w	r3, r3, #1
 80037da:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2110      	movs	r1, #16
 80037e2:	4618      	mov	r0, r3
 80037e4:	f001 fdce 	bl	8005384 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037e8:	2300      	movs	r3, #0
 80037ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037ec:	e046      	b.n	800387c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80037ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037f0:	015a      	lsls	r2, r3, #5
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	4413      	add	r3, r2
 80037f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037fa:	461a      	mov	r2, r3
 80037fc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003800:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003804:	015a      	lsls	r2, r3, #5
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	4413      	add	r3, r2
 800380a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003812:	0151      	lsls	r1, r2, #5
 8003814:	69fa      	ldr	r2, [r7, #28]
 8003816:	440a      	add	r2, r1
 8003818:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800381c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003820:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003824:	015a      	lsls	r2, r3, #5
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	4413      	add	r3, r2
 800382a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800382e:	461a      	mov	r2, r3
 8003830:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003834:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003838:	015a      	lsls	r2, r3, #5
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	4413      	add	r3, r2
 800383e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003846:	0151      	lsls	r1, r2, #5
 8003848:	69fa      	ldr	r2, [r7, #28]
 800384a:	440a      	add	r2, r1
 800384c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003850:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003854:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003858:	015a      	lsls	r2, r3, #5
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	4413      	add	r3, r2
 800385e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003866:	0151      	lsls	r1, r2, #5
 8003868:	69fa      	ldr	r2, [r7, #28]
 800386a:	440a      	add	r2, r1
 800386c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003870:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003874:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003878:	3301      	adds	r3, #1
 800387a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003882:	429a      	cmp	r2, r3
 8003884:	d3b3      	bcc.n	80037ee <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800388c:	69db      	ldr	r3, [r3, #28]
 800388e:	69fa      	ldr	r2, [r7, #28]
 8003890:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003894:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003898:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d016      	beq.n	80038d0 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038ac:	69fa      	ldr	r2, [r7, #28]
 80038ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038b2:	f043 030b 	orr.w	r3, r3, #11
 80038b6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038c2:	69fa      	ldr	r2, [r7, #28]
 80038c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038c8:	f043 030b 	orr.w	r3, r3, #11
 80038cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80038ce:	e015      	b.n	80038fc <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038d6:	695b      	ldr	r3, [r3, #20]
 80038d8:	69fa      	ldr	r2, [r7, #28]
 80038da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038de:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80038e2:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80038e6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	69fa      	ldr	r2, [r7, #28]
 80038f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038f6:	f043 030b 	orr.w	r3, r3, #11
 80038fa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	69fa      	ldr	r2, [r7, #28]
 8003906:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800390a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800390e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6818      	ldr	r0, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003920:	461a      	mov	r2, r3
 8003922:	f002 fe15 	bl	8006550 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	695a      	ldr	r2, [r3, #20]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003934:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4618      	mov	r0, r3
 800393c:	f002 fd44 	bl	80063c8 <USB_ReadInterrupts>
 8003940:	4603      	mov	r3, r0
 8003942:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003946:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800394a:	d124      	bne.n	8003996 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4618      	mov	r0, r3
 8003952:	f002 fdda 	bl	800650a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4618      	mov	r0, r3
 800395c:	f001 fd8f 	bl	800547e <USB_GetDevSpeed>
 8003960:	4603      	mov	r3, r0
 8003962:	461a      	mov	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681c      	ldr	r4, [r3, #0]
 800396c:	f001 fa28 	bl	8004dc0 <HAL_RCC_GetHCLKFreq>
 8003970:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003976:	b2db      	uxtb	r3, r3
 8003978:	461a      	mov	r2, r3
 800397a:	4620      	mov	r0, r4
 800397c:	f001 fa8e 	bl	8004e9c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f005 f8fa 	bl	8008b7a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	695a      	ldr	r2, [r3, #20]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003994:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4618      	mov	r0, r3
 800399c:	f002 fd14 	bl	80063c8 <USB_ReadInterrupts>
 80039a0:	4603      	mov	r3, r0
 80039a2:	f003 0308 	and.w	r3, r3, #8
 80039a6:	2b08      	cmp	r3, #8
 80039a8:	d10a      	bne.n	80039c0 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f005 f8d7 	bl	8008b5e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	695a      	ldr	r2, [r3, #20]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f002 0208 	and.w	r2, r2, #8
 80039be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f002 fcff 	bl	80063c8 <USB_ReadInterrupts>
 80039ca:	4603      	mov	r3, r0
 80039cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039d0:	2b80      	cmp	r3, #128	@ 0x80
 80039d2:	d122      	bne.n	8003a1a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80039d4:	6a3b      	ldr	r3, [r7, #32]
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80039dc:	6a3b      	ldr	r3, [r7, #32]
 80039de:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039e0:	2301      	movs	r3, #1
 80039e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80039e4:	e014      	b.n	8003a10 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80039e6:	6879      	ldr	r1, [r7, #4]
 80039e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039ea:	4613      	mov	r3, r2
 80039ec:	00db      	lsls	r3, r3, #3
 80039ee:	4413      	add	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	440b      	add	r3, r1
 80039f4:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d105      	bne.n	8003a0a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80039fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	4619      	mov	r1, r3
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 fb27 	bl	8004058 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d3e5      	bcc.n	80039e6 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f002 fcd2 	bl	80063c8 <USB_ReadInterrupts>
 8003a24:	4603      	mov	r3, r0
 8003a26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a2e:	d13b      	bne.n	8003aa8 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a30:	2301      	movs	r3, #1
 8003a32:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a34:	e02b      	b.n	8003a8e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a38:	015a      	lsls	r2, r3, #5
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a46:	6879      	ldr	r1, [r7, #4]
 8003a48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	00db      	lsls	r3, r3, #3
 8003a4e:	4413      	add	r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	440b      	add	r3, r1
 8003a54:	3340      	adds	r3, #64	@ 0x40
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d115      	bne.n	8003a88 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003a5c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	da12      	bge.n	8003a88 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003a62:	6879      	ldr	r1, [r7, #4]
 8003a64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a66:	4613      	mov	r3, r2
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	4413      	add	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	440b      	add	r3, r1
 8003a70:	333f      	adds	r3, #63	@ 0x3f
 8003a72:	2201      	movs	r2, #1
 8003a74:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	4619      	mov	r1, r3
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 fae8 	bl	8004058 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d3ce      	bcc.n	8003a36 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	695a      	ldr	r2, [r3, #20]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003aa6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f002 fc8b 	bl	80063c8 <USB_ReadInterrupts>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ab8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003abc:	d155      	bne.n	8003b6a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003abe:	2301      	movs	r3, #1
 8003ac0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ac2:	e045      	b.n	8003b50 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac6:	015a      	lsls	r2, r3, #5
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	4413      	add	r3, r2
 8003acc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ad4:	6879      	ldr	r1, [r7, #4]
 8003ad6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ad8:	4613      	mov	r3, r2
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	4413      	add	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	440b      	add	r3, r1
 8003ae2:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d12e      	bne.n	8003b4a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003aec:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	da2b      	bge.n	8003b4a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8003afe:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d121      	bne.n	8003b4a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003b06:	6879      	ldr	r1, [r7, #4]
 8003b08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	00db      	lsls	r3, r3, #3
 8003b0e:	4413      	add	r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	440b      	add	r3, r1
 8003b14:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8003b18:	2201      	movs	r2, #1
 8003b1a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003b1c:	6a3b      	ldr	r3, [r7, #32]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003b24:	6a3b      	ldr	r3, [r7, #32]
 8003b26:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003b28:	6a3b      	ldr	r3, [r7, #32]
 8003b2a:	695b      	ldr	r3, [r3, #20]
 8003b2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d10a      	bne.n	8003b4a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	69fa      	ldr	r2, [r7, #28]
 8003b3e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b46:	6053      	str	r3, [r2, #4]
            break;
 8003b48:	e007      	b.n	8003b5a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d3b4      	bcc.n	8003ac4 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	695a      	ldr	r2, [r3, #20]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003b68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f002 fc2a 	bl	80063c8 <USB_ReadInterrupts>
 8003b74:	4603      	mov	r3, r0
 8003b76:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b7e:	d10a      	bne.n	8003b96 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f005 f87b 	bl	8008c7c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	695a      	ldr	r2, [r3, #20]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003b94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f002 fc14 	bl	80063c8 <USB_ReadInterrupts>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	f003 0304 	and.w	r3, r3, #4
 8003ba6:	2b04      	cmp	r3, #4
 8003ba8:	d115      	bne.n	8003bd6 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	f003 0304 	and.w	r3, r3, #4
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d002      	beq.n	8003bc2 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f005 f86b 	bl	8008c98 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6859      	ldr	r1, [r3, #4]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	605a      	str	r2, [r3, #4]
 8003bd2:	e000      	b.n	8003bd6 <HAL_PCD_IRQHandler+0x938>
      return;
 8003bd4:	bf00      	nop
    }
  }
}
 8003bd6:	3734      	adds	r7, #52	@ 0x34
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd90      	pop	{r4, r7, pc}

08003bdc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	460b      	mov	r3, r1
 8003be6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d101      	bne.n	8003bf6 <HAL_PCD_SetAddress+0x1a>
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	e013      	b.n	8003c1e <HAL_PCD_SetAddress+0x42>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	78fa      	ldrb	r2, [r7, #3]
 8003c02:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	78fa      	ldrb	r2, [r7, #3]
 8003c0c:	4611      	mov	r1, r2
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f002 fb72 	bl	80062f8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3708      	adds	r7, #8
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b084      	sub	sp, #16
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
 8003c2e:	4608      	mov	r0, r1
 8003c30:	4611      	mov	r1, r2
 8003c32:	461a      	mov	r2, r3
 8003c34:	4603      	mov	r3, r0
 8003c36:	70fb      	strb	r3, [r7, #3]
 8003c38:	460b      	mov	r3, r1
 8003c3a:	803b      	strh	r3, [r7, #0]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003c40:	2300      	movs	r3, #0
 8003c42:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	da0f      	bge.n	8003c6c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c4c:	78fb      	ldrb	r3, [r7, #3]
 8003c4e:	f003 020f 	and.w	r2, r3, #15
 8003c52:	4613      	mov	r3, r2
 8003c54:	00db      	lsls	r3, r3, #3
 8003c56:	4413      	add	r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	3338      	adds	r3, #56	@ 0x38
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	4413      	add	r3, r2
 8003c60:	3304      	adds	r3, #4
 8003c62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2201      	movs	r2, #1
 8003c68:	705a      	strb	r2, [r3, #1]
 8003c6a:	e00f      	b.n	8003c8c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c6c:	78fb      	ldrb	r3, [r7, #3]
 8003c6e:	f003 020f 	and.w	r2, r3, #15
 8003c72:	4613      	mov	r3, r2
 8003c74:	00db      	lsls	r3, r3, #3
 8003c76:	4413      	add	r3, r2
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	4413      	add	r3, r2
 8003c82:	3304      	adds	r3, #4
 8003c84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003c8c:	78fb      	ldrb	r3, [r7, #3]
 8003c8e:	f003 030f 	and.w	r3, r3, #15
 8003c92:	b2da      	uxtb	r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003c98:	883a      	ldrh	r2, [r7, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	78ba      	ldrb	r2, [r7, #2]
 8003ca2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	785b      	ldrb	r3, [r3, #1]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d004      	beq.n	8003cb6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003cb6:	78bb      	ldrb	r3, [r7, #2]
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d102      	bne.n	8003cc2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d101      	bne.n	8003cd0 <HAL_PCD_EP_Open+0xaa>
 8003ccc:	2302      	movs	r3, #2
 8003cce:	e00e      	b.n	8003cee <HAL_PCD_EP_Open+0xc8>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68f9      	ldr	r1, [r7, #12]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f001 fbf2 	bl	80054c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 8003cec:	7afb      	ldrb	r3, [r7, #11]
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3710      	adds	r7, #16
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b084      	sub	sp, #16
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
 8003cfe:	460b      	mov	r3, r1
 8003d00:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	da0f      	bge.n	8003d2a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d0a:	78fb      	ldrb	r3, [r7, #3]
 8003d0c:	f003 020f 	and.w	r2, r3, #15
 8003d10:	4613      	mov	r3, r2
 8003d12:	00db      	lsls	r3, r3, #3
 8003d14:	4413      	add	r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	3338      	adds	r3, #56	@ 0x38
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	3304      	adds	r3, #4
 8003d20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2201      	movs	r2, #1
 8003d26:	705a      	strb	r2, [r3, #1]
 8003d28:	e00f      	b.n	8003d4a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d2a:	78fb      	ldrb	r3, [r7, #3]
 8003d2c:	f003 020f 	and.w	r2, r3, #15
 8003d30:	4613      	mov	r3, r2
 8003d32:	00db      	lsls	r3, r3, #3
 8003d34:	4413      	add	r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	4413      	add	r3, r2
 8003d40:	3304      	adds	r3, #4
 8003d42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2200      	movs	r2, #0
 8003d48:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003d4a:	78fb      	ldrb	r3, [r7, #3]
 8003d4c:	f003 030f 	and.w	r3, r3, #15
 8003d50:	b2da      	uxtb	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d101      	bne.n	8003d64 <HAL_PCD_EP_Close+0x6e>
 8003d60:	2302      	movs	r3, #2
 8003d62:	e00e      	b.n	8003d82 <HAL_PCD_EP_Close+0x8c>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68f9      	ldr	r1, [r7, #12]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f001 fc30 	bl	80055d8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3710      	adds	r7, #16
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b086      	sub	sp, #24
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	60f8      	str	r0, [r7, #12]
 8003d92:	607a      	str	r2, [r7, #4]
 8003d94:	603b      	str	r3, [r7, #0]
 8003d96:	460b      	mov	r3, r1
 8003d98:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d9a:	7afb      	ldrb	r3, [r7, #11]
 8003d9c:	f003 020f 	and.w	r2, r3, #15
 8003da0:	4613      	mov	r3, r2
 8003da2:	00db      	lsls	r3, r3, #3
 8003da4:	4413      	add	r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	4413      	add	r3, r2
 8003db0:	3304      	adds	r3, #4
 8003db2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	683a      	ldr	r2, [r7, #0]
 8003dbe:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dcc:	7afb      	ldrb	r3, [r7, #11]
 8003dce:	f003 030f 	and.w	r3, r3, #15
 8003dd2:	b2da      	uxtb	r2, r3
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d102      	bne.n	8003de6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003de6:	7afb      	ldrb	r3, [r7, #11]
 8003de8:	f003 030f 	and.w	r3, r3, #15
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d109      	bne.n	8003e04 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6818      	ldr	r0, [r3, #0]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	6979      	ldr	r1, [r7, #20]
 8003dfe:	f001 ff0f 	bl	8005c20 <USB_EP0StartXfer>
 8003e02:	e008      	b.n	8003e16 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6818      	ldr	r0, [r3, #0]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	461a      	mov	r2, r3
 8003e10:	6979      	ldr	r1, [r7, #20]
 8003e12:	f001 fcbd 	bl	8005790 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3718      	adds	r7, #24
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	460b      	mov	r3, r1
 8003e2a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003e2c:	78fb      	ldrb	r3, [r7, #3]
 8003e2e:	f003 020f 	and.w	r2, r3, #15
 8003e32:	6879      	ldr	r1, [r7, #4]
 8003e34:	4613      	mov	r3, r2
 8003e36:	00db      	lsls	r3, r3, #3
 8003e38:	4413      	add	r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	440b      	add	r3, r1
 8003e3e:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8003e42:	681b      	ldr	r3, [r3, #0]
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	607a      	str	r2, [r7, #4]
 8003e5a:	603b      	str	r3, [r7, #0]
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e60:	7afb      	ldrb	r3, [r7, #11]
 8003e62:	f003 020f 	and.w	r2, r3, #15
 8003e66:	4613      	mov	r3, r2
 8003e68:	00db      	lsls	r3, r3, #3
 8003e6a:	4413      	add	r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	3338      	adds	r3, #56	@ 0x38
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	4413      	add	r3, r2
 8003e74:	3304      	adds	r3, #4
 8003e76:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	2200      	movs	r2, #0
 8003e88:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e90:	7afb      	ldrb	r3, [r7, #11]
 8003e92:	f003 030f 	and.w	r3, r3, #15
 8003e96:	b2da      	uxtb	r2, r3
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d102      	bne.n	8003eaa <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003eaa:	7afb      	ldrb	r3, [r7, #11]
 8003eac:	f003 030f 	and.w	r3, r3, #15
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d109      	bne.n	8003ec8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6818      	ldr	r0, [r3, #0]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	6979      	ldr	r1, [r7, #20]
 8003ec2:	f001 fead 	bl	8005c20 <USB_EP0StartXfer>
 8003ec6:	e008      	b.n	8003eda <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6818      	ldr	r0, [r3, #0]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	6979      	ldr	r1, [r7, #20]
 8003ed6:	f001 fc5b 	bl	8005790 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3718      	adds	r7, #24
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	460b      	mov	r3, r1
 8003eee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003ef0:	78fb      	ldrb	r3, [r7, #3]
 8003ef2:	f003 020f 	and.w	r2, r3, #15
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d901      	bls.n	8003f02 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e050      	b.n	8003fa4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	da0f      	bge.n	8003f2a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f0a:	78fb      	ldrb	r3, [r7, #3]
 8003f0c:	f003 020f 	and.w	r2, r3, #15
 8003f10:	4613      	mov	r3, r2
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	4413      	add	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	3338      	adds	r3, #56	@ 0x38
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	3304      	adds	r3, #4
 8003f20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2201      	movs	r2, #1
 8003f26:	705a      	strb	r2, [r3, #1]
 8003f28:	e00d      	b.n	8003f46 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003f2a:	78fa      	ldrb	r2, [r7, #3]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	4413      	add	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	3304      	adds	r3, #4
 8003f3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f4c:	78fb      	ldrb	r3, [r7, #3]
 8003f4e:	f003 030f 	and.w	r3, r3, #15
 8003f52:	b2da      	uxtb	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d101      	bne.n	8003f66 <HAL_PCD_EP_SetStall+0x82>
 8003f62:	2302      	movs	r3, #2
 8003f64:	e01e      	b.n	8003fa4 <HAL_PCD_EP_SetStall+0xc0>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68f9      	ldr	r1, [r7, #12]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f002 f8eb 	bl	8006150 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f7a:	78fb      	ldrb	r3, [r7, #3]
 8003f7c:	f003 030f 	and.w	r3, r3, #15
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10a      	bne.n	8003f9a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6818      	ldr	r0, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	b2d9      	uxtb	r1, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003f94:	461a      	mov	r2, r3
 8003f96:	f002 fadb 	bl	8006550 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003fb8:	78fb      	ldrb	r3, [r7, #3]
 8003fba:	f003 020f 	and.w	r2, r3, #15
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d901      	bls.n	8003fca <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e042      	b.n	8004050 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003fca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	da0f      	bge.n	8003ff2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fd2:	78fb      	ldrb	r3, [r7, #3]
 8003fd4:	f003 020f 	and.w	r2, r3, #15
 8003fd8:	4613      	mov	r3, r2
 8003fda:	00db      	lsls	r3, r3, #3
 8003fdc:	4413      	add	r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	3338      	adds	r3, #56	@ 0x38
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	3304      	adds	r3, #4
 8003fe8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2201      	movs	r2, #1
 8003fee:	705a      	strb	r2, [r3, #1]
 8003ff0:	e00f      	b.n	8004012 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ff2:	78fb      	ldrb	r3, [r7, #3]
 8003ff4:	f003 020f 	and.w	r2, r3, #15
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	00db      	lsls	r3, r3, #3
 8003ffc:	4413      	add	r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	4413      	add	r3, r2
 8004008:	3304      	adds	r3, #4
 800400a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004018:	78fb      	ldrb	r3, [r7, #3]
 800401a:	f003 030f 	and.w	r3, r3, #15
 800401e:	b2da      	uxtb	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800402a:	2b01      	cmp	r3, #1
 800402c:	d101      	bne.n	8004032 <HAL_PCD_EP_ClrStall+0x86>
 800402e:	2302      	movs	r3, #2
 8004030:	e00e      	b.n	8004050 <HAL_PCD_EP_ClrStall+0xa4>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2201      	movs	r2, #1
 8004036:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68f9      	ldr	r1, [r7, #12]
 8004040:	4618      	mov	r0, r3
 8004042:	f002 f8f3 	bl	800622c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	3710      	adds	r7, #16
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	460b      	mov	r3, r1
 8004062:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004064:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004068:	2b00      	cmp	r3, #0
 800406a:	da0c      	bge.n	8004086 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800406c:	78fb      	ldrb	r3, [r7, #3]
 800406e:	f003 020f 	and.w	r2, r3, #15
 8004072:	4613      	mov	r3, r2
 8004074:	00db      	lsls	r3, r3, #3
 8004076:	4413      	add	r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	3338      	adds	r3, #56	@ 0x38
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	4413      	add	r3, r2
 8004080:	3304      	adds	r3, #4
 8004082:	60fb      	str	r3, [r7, #12]
 8004084:	e00c      	b.n	80040a0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004086:	78fb      	ldrb	r3, [r7, #3]
 8004088:	f003 020f 	and.w	r2, r3, #15
 800408c:	4613      	mov	r3, r2
 800408e:	00db      	lsls	r3, r3, #3
 8004090:	4413      	add	r3, r2
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	4413      	add	r3, r2
 800409c:	3304      	adds	r3, #4
 800409e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68f9      	ldr	r1, [r7, #12]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f001 ff12 	bl	8005ed0 <USB_EPStopXfer>
 80040ac:	4603      	mov	r3, r0
 80040ae:	72fb      	strb	r3, [r7, #11]

  return ret;
 80040b0:	7afb      	ldrb	r3, [r7, #11]
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b08a      	sub	sp, #40	@ 0x28
 80040be:	af02      	add	r7, sp, #8
 80040c0:	6078      	str	r0, [r7, #4]
 80040c2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80040ce:	683a      	ldr	r2, [r7, #0]
 80040d0:	4613      	mov	r3, r2
 80040d2:	00db      	lsls	r3, r3, #3
 80040d4:	4413      	add	r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	3338      	adds	r3, #56	@ 0x38
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	4413      	add	r3, r2
 80040de:	3304      	adds	r3, #4
 80040e0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6a1a      	ldr	r2, [r3, #32]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d901      	bls.n	80040f2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e06c      	b.n	80041cc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	699a      	ldr	r2, [r3, #24]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	69fa      	ldr	r2, [r7, #28]
 8004104:	429a      	cmp	r2, r3
 8004106:	d902      	bls.n	800410e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	3303      	adds	r3, #3
 8004112:	089b      	lsrs	r3, r3, #2
 8004114:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004116:	e02b      	b.n	8004170 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	699a      	ldr	r2, [r3, #24]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6a1b      	ldr	r3, [r3, #32]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	69fa      	ldr	r2, [r7, #28]
 800412a:	429a      	cmp	r2, r3
 800412c:	d902      	bls.n	8004134 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	3303      	adds	r3, #3
 8004138:	089b      	lsrs	r3, r3, #2
 800413a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6919      	ldr	r1, [r3, #16]
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	b2da      	uxtb	r2, r3
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800414c:	b2db      	uxtb	r3, r3
 800414e:	9300      	str	r3, [sp, #0]
 8004150:	4603      	mov	r3, r0
 8004152:	6978      	ldr	r0, [r7, #20]
 8004154:	f001 ff66 	bl	8006024 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	691a      	ldr	r2, [r3, #16]
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	441a      	add	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6a1a      	ldr	r2, [r3, #32]
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	441a      	add	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	015a      	lsls	r2, r3, #5
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	4413      	add	r3, r2
 8004178:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004180:	69ba      	ldr	r2, [r7, #24]
 8004182:	429a      	cmp	r2, r3
 8004184:	d809      	bhi.n	800419a <PCD_WriteEmptyTxFifo+0xe0>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6a1a      	ldr	r2, [r3, #32]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800418e:	429a      	cmp	r2, r3
 8004190:	d203      	bcs.n	800419a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1be      	bne.n	8004118 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	699a      	ldr	r2, [r3, #24]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d811      	bhi.n	80041ca <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	f003 030f 	and.w	r3, r3, #15
 80041ac:	2201      	movs	r2, #1
 80041ae:	fa02 f303 	lsl.w	r3, r2, r3
 80041b2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	43db      	mvns	r3, r3
 80041c0:	6939      	ldr	r1, [r7, #16]
 80041c2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80041c6:	4013      	ands	r3, r2
 80041c8:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3720      	adds	r7, #32
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b088      	sub	sp, #32
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	333c      	adds	r3, #60	@ 0x3c
 80041ec:	3304      	adds	r3, #4
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	015a      	lsls	r2, r3, #5
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	4413      	add	r3, r2
 80041fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d17b      	bne.n	8004302 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	f003 0308 	and.w	r3, r3, #8
 8004210:	2b00      	cmp	r3, #0
 8004212:	d015      	beq.n	8004240 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	4a61      	ldr	r2, [pc, #388]	@ (800439c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004218:	4293      	cmp	r3, r2
 800421a:	f240 80b9 	bls.w	8004390 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004224:	2b00      	cmp	r3, #0
 8004226:	f000 80b3 	beq.w	8004390 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	015a      	lsls	r2, r3, #5
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	4413      	add	r3, r2
 8004232:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004236:	461a      	mov	r2, r3
 8004238:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800423c:	6093      	str	r3, [r2, #8]
 800423e:	e0a7      	b.n	8004390 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	f003 0320 	and.w	r3, r3, #32
 8004246:	2b00      	cmp	r3, #0
 8004248:	d009      	beq.n	800425e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	015a      	lsls	r2, r3, #5
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	4413      	add	r3, r2
 8004252:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004256:	461a      	mov	r2, r3
 8004258:	2320      	movs	r3, #32
 800425a:	6093      	str	r3, [r2, #8]
 800425c:	e098      	b.n	8004390 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004264:	2b00      	cmp	r3, #0
 8004266:	f040 8093 	bne.w	8004390 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	4a4b      	ldr	r2, [pc, #300]	@ (800439c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d90f      	bls.n	8004292 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00a      	beq.n	8004292 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	015a      	lsls	r2, r3, #5
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	4413      	add	r3, r2
 8004284:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004288:	461a      	mov	r2, r3
 800428a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800428e:	6093      	str	r3, [r2, #8]
 8004290:	e07e      	b.n	8004390 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004292:	683a      	ldr	r2, [r7, #0]
 8004294:	4613      	mov	r3, r2
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	4413      	add	r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	4413      	add	r3, r2
 80042a4:	3304      	adds	r3, #4
 80042a6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	69da      	ldr	r2, [r3, #28]
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	0159      	lsls	r1, r3, #5
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	440b      	add	r3, r1
 80042b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042be:	1ad2      	subs	r2, r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d114      	bne.n	80042f4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d109      	bne.n	80042e6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6818      	ldr	r0, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80042dc:	461a      	mov	r2, r3
 80042de:	2101      	movs	r1, #1
 80042e0:	f002 f936 	bl	8006550 <USB_EP0_OutStart>
 80042e4:	e006      	b.n	80042f4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	691a      	ldr	r2, [r3, #16]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	441a      	add	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	4619      	mov	r1, r3
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f004 fbfa 	bl	8008af4 <HAL_PCD_DataOutStageCallback>
 8004300:	e046      	b.n	8004390 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	4a26      	ldr	r2, [pc, #152]	@ (80043a0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d124      	bne.n	8004354 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00a      	beq.n	800432a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	015a      	lsls	r2, r3, #5
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	4413      	add	r3, r2
 800431c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004320:	461a      	mov	r2, r3
 8004322:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004326:	6093      	str	r3, [r2, #8]
 8004328:	e032      	b.n	8004390 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	f003 0320 	and.w	r3, r3, #32
 8004330:	2b00      	cmp	r3, #0
 8004332:	d008      	beq.n	8004346 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	015a      	lsls	r2, r3, #5
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	4413      	add	r3, r2
 800433c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004340:	461a      	mov	r2, r3
 8004342:	2320      	movs	r3, #32
 8004344:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	b2db      	uxtb	r3, r3
 800434a:	4619      	mov	r1, r3
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f004 fbd1 	bl	8008af4 <HAL_PCD_DataOutStageCallback>
 8004352:	e01d      	b.n	8004390 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d114      	bne.n	8004384 <PCD_EP_OutXfrComplete_int+0x1b0>
 800435a:	6879      	ldr	r1, [r7, #4]
 800435c:	683a      	ldr	r2, [r7, #0]
 800435e:	4613      	mov	r3, r2
 8004360:	00db      	lsls	r3, r3, #3
 8004362:	4413      	add	r3, r2
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	440b      	add	r3, r1
 8004368:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d108      	bne.n	8004384 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6818      	ldr	r0, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800437c:	461a      	mov	r2, r3
 800437e:	2100      	movs	r1, #0
 8004380:	f002 f8e6 	bl	8006550 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	b2db      	uxtb	r3, r3
 8004388:	4619      	mov	r1, r3
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f004 fbb2 	bl	8008af4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3720      	adds	r7, #32
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	4f54300a 	.word	0x4f54300a
 80043a0:	4f54310a 	.word	0x4f54310a

080043a4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	333c      	adds	r3, #60	@ 0x3c
 80043bc:	3304      	adds	r3, #4
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	015a      	lsls	r2, r3, #5
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	4413      	add	r3, r2
 80043ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	4a15      	ldr	r2, [pc, #84]	@ (800442c <PCD_EP_OutSetupPacket_int+0x88>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d90e      	bls.n	80043f8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d009      	beq.n	80043f8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	015a      	lsls	r2, r3, #5
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	4413      	add	r3, r2
 80043ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043f0:	461a      	mov	r2, r3
 80043f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043f6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f004 fb69 	bl	8008ad0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	4a0a      	ldr	r2, [pc, #40]	@ (800442c <PCD_EP_OutSetupPacket_int+0x88>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d90c      	bls.n	8004420 <PCD_EP_OutSetupPacket_int+0x7c>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d108      	bne.n	8004420 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6818      	ldr	r0, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004418:	461a      	mov	r2, r3
 800441a:	2101      	movs	r1, #1
 800441c:	f002 f898 	bl	8006550 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3718      	adds	r7, #24
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	4f54300a 	.word	0x4f54300a

08004430 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004430:	b480      	push	{r7}
 8004432:	b085      	sub	sp, #20
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	460b      	mov	r3, r1
 800443a:	70fb      	strb	r3, [r7, #3]
 800443c:	4613      	mov	r3, r2
 800443e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004446:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004448:	78fb      	ldrb	r3, [r7, #3]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d107      	bne.n	800445e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800444e:	883b      	ldrh	r3, [r7, #0]
 8004450:	0419      	lsls	r1, r3, #16
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68ba      	ldr	r2, [r7, #8]
 8004458:	430a      	orrs	r2, r1
 800445a:	629a      	str	r2, [r3, #40]	@ 0x28
 800445c:	e028      	b.n	80044b0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004464:	0c1b      	lsrs	r3, r3, #16
 8004466:	68ba      	ldr	r2, [r7, #8]
 8004468:	4413      	add	r3, r2
 800446a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800446c:	2300      	movs	r3, #0
 800446e:	73fb      	strb	r3, [r7, #15]
 8004470:	e00d      	b.n	800448e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	7bfb      	ldrb	r3, [r7, #15]
 8004478:	3340      	adds	r3, #64	@ 0x40
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	4413      	add	r3, r2
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	0c1b      	lsrs	r3, r3, #16
 8004482:	68ba      	ldr	r2, [r7, #8]
 8004484:	4413      	add	r3, r2
 8004486:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004488:	7bfb      	ldrb	r3, [r7, #15]
 800448a:	3301      	adds	r3, #1
 800448c:	73fb      	strb	r3, [r7, #15]
 800448e:	7bfa      	ldrb	r2, [r7, #15]
 8004490:	78fb      	ldrb	r3, [r7, #3]
 8004492:	3b01      	subs	r3, #1
 8004494:	429a      	cmp	r2, r3
 8004496:	d3ec      	bcc.n	8004472 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004498:	883b      	ldrh	r3, [r7, #0]
 800449a:	0418      	lsls	r0, r3, #16
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6819      	ldr	r1, [r3, #0]
 80044a0:	78fb      	ldrb	r3, [r7, #3]
 80044a2:	3b01      	subs	r3, #1
 80044a4:	68ba      	ldr	r2, [r7, #8]
 80044a6:	4302      	orrs	r2, r0
 80044a8:	3340      	adds	r3, #64	@ 0x40
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	440b      	add	r3, r1
 80044ae:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3714      	adds	r7, #20
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr

080044be <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80044be:	b480      	push	{r7}
 80044c0:	b083      	sub	sp, #12
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
 80044c6:	460b      	mov	r3, r1
 80044c8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	887a      	ldrh	r2, [r7, #2]
 80044d0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	460b      	mov	r3, r1
 80044ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80044ec:	bf00      	nop
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b086      	sub	sp, #24
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e267      	b.n	80049da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	2b00      	cmp	r3, #0
 8004514:	d075      	beq.n	8004602 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004516:	4b88      	ldr	r3, [pc, #544]	@ (8004738 <HAL_RCC_OscConfig+0x240>)
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f003 030c 	and.w	r3, r3, #12
 800451e:	2b04      	cmp	r3, #4
 8004520:	d00c      	beq.n	800453c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004522:	4b85      	ldr	r3, [pc, #532]	@ (8004738 <HAL_RCC_OscConfig+0x240>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800452a:	2b08      	cmp	r3, #8
 800452c:	d112      	bne.n	8004554 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800452e:	4b82      	ldr	r3, [pc, #520]	@ (8004738 <HAL_RCC_OscConfig+0x240>)
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004536:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800453a:	d10b      	bne.n	8004554 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800453c:	4b7e      	ldr	r3, [pc, #504]	@ (8004738 <HAL_RCC_OscConfig+0x240>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d05b      	beq.n	8004600 <HAL_RCC_OscConfig+0x108>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d157      	bne.n	8004600 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e242      	b.n	80049da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800455c:	d106      	bne.n	800456c <HAL_RCC_OscConfig+0x74>
 800455e:	4b76      	ldr	r3, [pc, #472]	@ (8004738 <HAL_RCC_OscConfig+0x240>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a75      	ldr	r2, [pc, #468]	@ (8004738 <HAL_RCC_OscConfig+0x240>)
 8004564:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004568:	6013      	str	r3, [r2, #0]
 800456a:	e01d      	b.n	80045a8 <HAL_RCC_OscConfig+0xb0>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004574:	d10c      	bne.n	8004590 <HAL_RCC_OscConfig+0x98>
 8004576:	4b70      	ldr	r3, [pc, #448]	@ (8004738 <HAL_RCC_OscConfig+0x240>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a6f      	ldr	r2, [pc, #444]	@ (8004738 <HAL_RCC_OscConfig+0x240>)
 800457c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004580:	6013      	str	r3, [r2, #0]
 8004582:	4b6d      	ldr	r3, [pc, #436]	@ (8004738 <HAL_RCC_OscConfig+0x240>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a6c      	ldr	r2, [pc, #432]	@ (8004738 <HAL_RCC_OscConfig+0x240>)
 8004588:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800458c:	6013      	str	r3, [r2, #0]
 800458e:	e00b      	b.n	80045a8 <HAL_RCC_OscConfig+0xb0>
 8004590:	4b69      	ldr	r3, [pc, #420]	@ (8004738 <HAL_RCC_OscConfig+0x240>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a68      	ldr	r2, [pc, #416]	@ (8004738 <HAL_RCC_OscConfig+0x240>)
 8004596:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800459a:	6013      	str	r3, [r2, #0]
 800459c:	4b66      	ldr	r3, [pc, #408]	@ (8004738 <HAL_RCC_OscConfig+0x240>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a65      	ldr	r2, [pc, #404]	@ (8004738 <HAL_RCC_OscConfig+0x240>)
 80045a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d013      	beq.n	80045d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045b0:	f7fd fbcc 	bl	8001d4c <HAL_GetTick>
 80045b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045b6:	e008      	b.n	80045ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045b8:	f7fd fbc8 	bl	8001d4c <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b64      	cmp	r3, #100	@ 0x64
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e207      	b.n	80049da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ca:	4b5b      	ldr	r3, [pc, #364]	@ (8004738 <HAL_RCC_OscConfig+0x240>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d0f0      	beq.n	80045b8 <HAL_RCC_OscConfig+0xc0>
 80045d6:	e014      	b.n	8004602 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045d8:	f7fd fbb8 	bl	8001d4c <HAL_GetTick>
 80045dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045de:	e008      	b.n	80045f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045e0:	f7fd fbb4 	bl	8001d4c <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	2b64      	cmp	r3, #100	@ 0x64
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e1f3      	b.n	80049da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045f2:	4b51      	ldr	r3, [pc, #324]	@ (8004738 <HAL_RCC_OscConfig+0x240>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1f0      	bne.n	80045e0 <HAL_RCC_OscConfig+0xe8>
 80045fe:	e000      	b.n	8004602 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004600:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d063      	beq.n	80046d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800460e:	4b4a      	ldr	r3, [pc, #296]	@ (8004738 <HAL_RCC_OscConfig+0x240>)
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f003 030c 	and.w	r3, r3, #12
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00b      	beq.n	8004632 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800461a:	4b47      	ldr	r3, [pc, #284]	@ (8004738 <HAL_RCC_OscConfig+0x240>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004622:	2b08      	cmp	r3, #8
 8004624:	d11c      	bne.n	8004660 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004626:	4b44      	ldr	r3, [pc, #272]	@ (8004738 <HAL_RCC_OscConfig+0x240>)
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d116      	bne.n	8004660 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004632:	4b41      	ldr	r3, [pc, #260]	@ (8004738 <HAL_RCC_OscConfig+0x240>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d005      	beq.n	800464a <HAL_RCC_OscConfig+0x152>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	2b01      	cmp	r3, #1
 8004644:	d001      	beq.n	800464a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e1c7      	b.n	80049da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800464a:	4b3b      	ldr	r3, [pc, #236]	@ (8004738 <HAL_RCC_OscConfig+0x240>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	00db      	lsls	r3, r3, #3
 8004658:	4937      	ldr	r1, [pc, #220]	@ (8004738 <HAL_RCC_OscConfig+0x240>)
 800465a:	4313      	orrs	r3, r2
 800465c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800465e:	e03a      	b.n	80046d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d020      	beq.n	80046aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004668:	4b34      	ldr	r3, [pc, #208]	@ (800473c <HAL_RCC_OscConfig+0x244>)
 800466a:	2201      	movs	r2, #1
 800466c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800466e:	f7fd fb6d 	bl	8001d4c <HAL_GetTick>
 8004672:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004674:	e008      	b.n	8004688 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004676:	f7fd fb69 	bl	8001d4c <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	2b02      	cmp	r3, #2
 8004682:	d901      	bls.n	8004688 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e1a8      	b.n	80049da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004688:	4b2b      	ldr	r3, [pc, #172]	@ (8004738 <HAL_RCC_OscConfig+0x240>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0302 	and.w	r3, r3, #2
 8004690:	2b00      	cmp	r3, #0
 8004692:	d0f0      	beq.n	8004676 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004694:	4b28      	ldr	r3, [pc, #160]	@ (8004738 <HAL_RCC_OscConfig+0x240>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	00db      	lsls	r3, r3, #3
 80046a2:	4925      	ldr	r1, [pc, #148]	@ (8004738 <HAL_RCC_OscConfig+0x240>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	600b      	str	r3, [r1, #0]
 80046a8:	e015      	b.n	80046d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046aa:	4b24      	ldr	r3, [pc, #144]	@ (800473c <HAL_RCC_OscConfig+0x244>)
 80046ac:	2200      	movs	r2, #0
 80046ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b0:	f7fd fb4c 	bl	8001d4c <HAL_GetTick>
 80046b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046b6:	e008      	b.n	80046ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046b8:	f7fd fb48 	bl	8001d4c <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e187      	b.n	80049da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046ca:	4b1b      	ldr	r3, [pc, #108]	@ (8004738 <HAL_RCC_OscConfig+0x240>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1f0      	bne.n	80046b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0308 	and.w	r3, r3, #8
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d036      	beq.n	8004750 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d016      	beq.n	8004718 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046ea:	4b15      	ldr	r3, [pc, #84]	@ (8004740 <HAL_RCC_OscConfig+0x248>)
 80046ec:	2201      	movs	r2, #1
 80046ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046f0:	f7fd fb2c 	bl	8001d4c <HAL_GetTick>
 80046f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046f6:	e008      	b.n	800470a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046f8:	f7fd fb28 	bl	8001d4c <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b02      	cmp	r3, #2
 8004704:	d901      	bls.n	800470a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e167      	b.n	80049da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800470a:	4b0b      	ldr	r3, [pc, #44]	@ (8004738 <HAL_RCC_OscConfig+0x240>)
 800470c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d0f0      	beq.n	80046f8 <HAL_RCC_OscConfig+0x200>
 8004716:	e01b      	b.n	8004750 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004718:	4b09      	ldr	r3, [pc, #36]	@ (8004740 <HAL_RCC_OscConfig+0x248>)
 800471a:	2200      	movs	r2, #0
 800471c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800471e:	f7fd fb15 	bl	8001d4c <HAL_GetTick>
 8004722:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004724:	e00e      	b.n	8004744 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004726:	f7fd fb11 	bl	8001d4c <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	2b02      	cmp	r3, #2
 8004732:	d907      	bls.n	8004744 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e150      	b.n	80049da <HAL_RCC_OscConfig+0x4e2>
 8004738:	40023800 	.word	0x40023800
 800473c:	42470000 	.word	0x42470000
 8004740:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004744:	4b88      	ldr	r3, [pc, #544]	@ (8004968 <HAL_RCC_OscConfig+0x470>)
 8004746:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004748:	f003 0302 	and.w	r3, r3, #2
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1ea      	bne.n	8004726 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0304 	and.w	r3, r3, #4
 8004758:	2b00      	cmp	r3, #0
 800475a:	f000 8097 	beq.w	800488c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800475e:	2300      	movs	r3, #0
 8004760:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004762:	4b81      	ldr	r3, [pc, #516]	@ (8004968 <HAL_RCC_OscConfig+0x470>)
 8004764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004766:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10f      	bne.n	800478e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800476e:	2300      	movs	r3, #0
 8004770:	60bb      	str	r3, [r7, #8]
 8004772:	4b7d      	ldr	r3, [pc, #500]	@ (8004968 <HAL_RCC_OscConfig+0x470>)
 8004774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004776:	4a7c      	ldr	r2, [pc, #496]	@ (8004968 <HAL_RCC_OscConfig+0x470>)
 8004778:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800477c:	6413      	str	r3, [r2, #64]	@ 0x40
 800477e:	4b7a      	ldr	r3, [pc, #488]	@ (8004968 <HAL_RCC_OscConfig+0x470>)
 8004780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004782:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004786:	60bb      	str	r3, [r7, #8]
 8004788:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800478a:	2301      	movs	r3, #1
 800478c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800478e:	4b77      	ldr	r3, [pc, #476]	@ (800496c <HAL_RCC_OscConfig+0x474>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004796:	2b00      	cmp	r3, #0
 8004798:	d118      	bne.n	80047cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800479a:	4b74      	ldr	r3, [pc, #464]	@ (800496c <HAL_RCC_OscConfig+0x474>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a73      	ldr	r2, [pc, #460]	@ (800496c <HAL_RCC_OscConfig+0x474>)
 80047a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047a6:	f7fd fad1 	bl	8001d4c <HAL_GetTick>
 80047aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ac:	e008      	b.n	80047c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ae:	f7fd facd 	bl	8001d4c <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d901      	bls.n	80047c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e10c      	b.n	80049da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047c0:	4b6a      	ldr	r3, [pc, #424]	@ (800496c <HAL_RCC_OscConfig+0x474>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d0f0      	beq.n	80047ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d106      	bne.n	80047e2 <HAL_RCC_OscConfig+0x2ea>
 80047d4:	4b64      	ldr	r3, [pc, #400]	@ (8004968 <HAL_RCC_OscConfig+0x470>)
 80047d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047d8:	4a63      	ldr	r2, [pc, #396]	@ (8004968 <HAL_RCC_OscConfig+0x470>)
 80047da:	f043 0301 	orr.w	r3, r3, #1
 80047de:	6713      	str	r3, [r2, #112]	@ 0x70
 80047e0:	e01c      	b.n	800481c <HAL_RCC_OscConfig+0x324>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	2b05      	cmp	r3, #5
 80047e8:	d10c      	bne.n	8004804 <HAL_RCC_OscConfig+0x30c>
 80047ea:	4b5f      	ldr	r3, [pc, #380]	@ (8004968 <HAL_RCC_OscConfig+0x470>)
 80047ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ee:	4a5e      	ldr	r2, [pc, #376]	@ (8004968 <HAL_RCC_OscConfig+0x470>)
 80047f0:	f043 0304 	orr.w	r3, r3, #4
 80047f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80047f6:	4b5c      	ldr	r3, [pc, #368]	@ (8004968 <HAL_RCC_OscConfig+0x470>)
 80047f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047fa:	4a5b      	ldr	r2, [pc, #364]	@ (8004968 <HAL_RCC_OscConfig+0x470>)
 80047fc:	f043 0301 	orr.w	r3, r3, #1
 8004800:	6713      	str	r3, [r2, #112]	@ 0x70
 8004802:	e00b      	b.n	800481c <HAL_RCC_OscConfig+0x324>
 8004804:	4b58      	ldr	r3, [pc, #352]	@ (8004968 <HAL_RCC_OscConfig+0x470>)
 8004806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004808:	4a57      	ldr	r2, [pc, #348]	@ (8004968 <HAL_RCC_OscConfig+0x470>)
 800480a:	f023 0301 	bic.w	r3, r3, #1
 800480e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004810:	4b55      	ldr	r3, [pc, #340]	@ (8004968 <HAL_RCC_OscConfig+0x470>)
 8004812:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004814:	4a54      	ldr	r2, [pc, #336]	@ (8004968 <HAL_RCC_OscConfig+0x470>)
 8004816:	f023 0304 	bic.w	r3, r3, #4
 800481a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d015      	beq.n	8004850 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004824:	f7fd fa92 	bl	8001d4c <HAL_GetTick>
 8004828:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800482a:	e00a      	b.n	8004842 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800482c:	f7fd fa8e 	bl	8001d4c <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	f241 3288 	movw	r2, #5000	@ 0x1388
 800483a:	4293      	cmp	r3, r2
 800483c:	d901      	bls.n	8004842 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e0cb      	b.n	80049da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004842:	4b49      	ldr	r3, [pc, #292]	@ (8004968 <HAL_RCC_OscConfig+0x470>)
 8004844:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b00      	cmp	r3, #0
 800484c:	d0ee      	beq.n	800482c <HAL_RCC_OscConfig+0x334>
 800484e:	e014      	b.n	800487a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004850:	f7fd fa7c 	bl	8001d4c <HAL_GetTick>
 8004854:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004856:	e00a      	b.n	800486e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004858:	f7fd fa78 	bl	8001d4c <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004866:	4293      	cmp	r3, r2
 8004868:	d901      	bls.n	800486e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e0b5      	b.n	80049da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800486e:	4b3e      	ldr	r3, [pc, #248]	@ (8004968 <HAL_RCC_OscConfig+0x470>)
 8004870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1ee      	bne.n	8004858 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800487a:	7dfb      	ldrb	r3, [r7, #23]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d105      	bne.n	800488c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004880:	4b39      	ldr	r3, [pc, #228]	@ (8004968 <HAL_RCC_OscConfig+0x470>)
 8004882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004884:	4a38      	ldr	r2, [pc, #224]	@ (8004968 <HAL_RCC_OscConfig+0x470>)
 8004886:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800488a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	699b      	ldr	r3, [r3, #24]
 8004890:	2b00      	cmp	r3, #0
 8004892:	f000 80a1 	beq.w	80049d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004896:	4b34      	ldr	r3, [pc, #208]	@ (8004968 <HAL_RCC_OscConfig+0x470>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f003 030c 	and.w	r3, r3, #12
 800489e:	2b08      	cmp	r3, #8
 80048a0:	d05c      	beq.n	800495c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d141      	bne.n	800492e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048aa:	4b31      	ldr	r3, [pc, #196]	@ (8004970 <HAL_RCC_OscConfig+0x478>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048b0:	f7fd fa4c 	bl	8001d4c <HAL_GetTick>
 80048b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048b6:	e008      	b.n	80048ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048b8:	f7fd fa48 	bl	8001d4c <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d901      	bls.n	80048ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e087      	b.n	80049da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ca:	4b27      	ldr	r3, [pc, #156]	@ (8004968 <HAL_RCC_OscConfig+0x470>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1f0      	bne.n	80048b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	69da      	ldr	r2, [r3, #28]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	431a      	orrs	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e4:	019b      	lsls	r3, r3, #6
 80048e6:	431a      	orrs	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ec:	085b      	lsrs	r3, r3, #1
 80048ee:	3b01      	subs	r3, #1
 80048f0:	041b      	lsls	r3, r3, #16
 80048f2:	431a      	orrs	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048f8:	061b      	lsls	r3, r3, #24
 80048fa:	491b      	ldr	r1, [pc, #108]	@ (8004968 <HAL_RCC_OscConfig+0x470>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004900:	4b1b      	ldr	r3, [pc, #108]	@ (8004970 <HAL_RCC_OscConfig+0x478>)
 8004902:	2201      	movs	r2, #1
 8004904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004906:	f7fd fa21 	bl	8001d4c <HAL_GetTick>
 800490a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800490c:	e008      	b.n	8004920 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800490e:	f7fd fa1d 	bl	8001d4c <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	2b02      	cmp	r3, #2
 800491a:	d901      	bls.n	8004920 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e05c      	b.n	80049da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004920:	4b11      	ldr	r3, [pc, #68]	@ (8004968 <HAL_RCC_OscConfig+0x470>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d0f0      	beq.n	800490e <HAL_RCC_OscConfig+0x416>
 800492c:	e054      	b.n	80049d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800492e:	4b10      	ldr	r3, [pc, #64]	@ (8004970 <HAL_RCC_OscConfig+0x478>)
 8004930:	2200      	movs	r2, #0
 8004932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004934:	f7fd fa0a 	bl	8001d4c <HAL_GetTick>
 8004938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800493a:	e008      	b.n	800494e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800493c:	f7fd fa06 	bl	8001d4c <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b02      	cmp	r3, #2
 8004948:	d901      	bls.n	800494e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e045      	b.n	80049da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800494e:	4b06      	ldr	r3, [pc, #24]	@ (8004968 <HAL_RCC_OscConfig+0x470>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1f0      	bne.n	800493c <HAL_RCC_OscConfig+0x444>
 800495a:	e03d      	b.n	80049d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	699b      	ldr	r3, [r3, #24]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d107      	bne.n	8004974 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e038      	b.n	80049da <HAL_RCC_OscConfig+0x4e2>
 8004968:	40023800 	.word	0x40023800
 800496c:	40007000 	.word	0x40007000
 8004970:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004974:	4b1b      	ldr	r3, [pc, #108]	@ (80049e4 <HAL_RCC_OscConfig+0x4ec>)
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	2b01      	cmp	r3, #1
 8004980:	d028      	beq.n	80049d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800498c:	429a      	cmp	r2, r3
 800498e:	d121      	bne.n	80049d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800499a:	429a      	cmp	r2, r3
 800499c:	d11a      	bne.n	80049d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80049a4:	4013      	ands	r3, r2
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80049aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d111      	bne.n	80049d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ba:	085b      	lsrs	r3, r3, #1
 80049bc:	3b01      	subs	r3, #1
 80049be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d107      	bne.n	80049d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d001      	beq.n	80049d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e000      	b.n	80049da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3718      	adds	r7, #24
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	40023800 	.word	0x40023800

080049e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d101      	bne.n	80049fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e0cc      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049fc:	4b68      	ldr	r3, [pc, #416]	@ (8004ba0 <HAL_RCC_ClockConfig+0x1b8>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0307 	and.w	r3, r3, #7
 8004a04:	683a      	ldr	r2, [r7, #0]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d90c      	bls.n	8004a24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a0a:	4b65      	ldr	r3, [pc, #404]	@ (8004ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a0c:	683a      	ldr	r2, [r7, #0]
 8004a0e:	b2d2      	uxtb	r2, r2
 8004a10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a12:	4b63      	ldr	r3, [pc, #396]	@ (8004ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0307 	and.w	r3, r3, #7
 8004a1a:	683a      	ldr	r2, [r7, #0]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d001      	beq.n	8004a24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e0b8      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0302 	and.w	r3, r3, #2
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d020      	beq.n	8004a72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0304 	and.w	r3, r3, #4
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d005      	beq.n	8004a48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a3c:	4b59      	ldr	r3, [pc, #356]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	4a58      	ldr	r2, [pc, #352]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a42:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004a46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0308 	and.w	r3, r3, #8
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d005      	beq.n	8004a60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a54:	4b53      	ldr	r3, [pc, #332]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	4a52      	ldr	r2, [pc, #328]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004a5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a60:	4b50      	ldr	r3, [pc, #320]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	494d      	ldr	r1, [pc, #308]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0301 	and.w	r3, r3, #1
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d044      	beq.n	8004b08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d107      	bne.n	8004a96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a86:	4b47      	ldr	r3, [pc, #284]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d119      	bne.n	8004ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e07f      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d003      	beq.n	8004aa6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004aa2:	2b03      	cmp	r3, #3
 8004aa4:	d107      	bne.n	8004ab6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aa6:	4b3f      	ldr	r3, [pc, #252]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d109      	bne.n	8004ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e06f      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ab6:	4b3b      	ldr	r3, [pc, #236]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0302 	and.w	r3, r3, #2
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d101      	bne.n	8004ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e067      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ac6:	4b37      	ldr	r3, [pc, #220]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f023 0203 	bic.w	r2, r3, #3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	4934      	ldr	r1, [pc, #208]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ad8:	f7fd f938 	bl	8001d4c <HAL_GetTick>
 8004adc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ade:	e00a      	b.n	8004af6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ae0:	f7fd f934 	bl	8001d4c <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d901      	bls.n	8004af6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e04f      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004af6:	4b2b      	ldr	r3, [pc, #172]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f003 020c 	and.w	r2, r3, #12
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d1eb      	bne.n	8004ae0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b08:	4b25      	ldr	r3, [pc, #148]	@ (8004ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0307 	and.w	r3, r3, #7
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d20c      	bcs.n	8004b30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b16:	4b22      	ldr	r3, [pc, #136]	@ (8004ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b18:	683a      	ldr	r2, [r7, #0]
 8004b1a:	b2d2      	uxtb	r2, r2
 8004b1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b1e:	4b20      	ldr	r3, [pc, #128]	@ (8004ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0307 	and.w	r3, r3, #7
 8004b26:	683a      	ldr	r2, [r7, #0]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d001      	beq.n	8004b30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e032      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0304 	and.w	r3, r3, #4
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d008      	beq.n	8004b4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b3c:	4b19      	ldr	r3, [pc, #100]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	4916      	ldr	r1, [pc, #88]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0308 	and.w	r3, r3, #8
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d009      	beq.n	8004b6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b5a:	4b12      	ldr	r3, [pc, #72]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	00db      	lsls	r3, r3, #3
 8004b68:	490e      	ldr	r1, [pc, #56]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b6e:	f000 f821 	bl	8004bb4 <HAL_RCC_GetSysClockFreq>
 8004b72:	4602      	mov	r2, r0
 8004b74:	4b0b      	ldr	r3, [pc, #44]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	091b      	lsrs	r3, r3, #4
 8004b7a:	f003 030f 	and.w	r3, r3, #15
 8004b7e:	490a      	ldr	r1, [pc, #40]	@ (8004ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8004b80:	5ccb      	ldrb	r3, [r1, r3]
 8004b82:	fa22 f303 	lsr.w	r3, r2, r3
 8004b86:	4a09      	ldr	r2, [pc, #36]	@ (8004bac <HAL_RCC_ClockConfig+0x1c4>)
 8004b88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b8a:	4b09      	ldr	r3, [pc, #36]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7fd f898 	bl	8001cc4 <HAL_InitTick>

  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3710      	adds	r7, #16
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	40023c00 	.word	0x40023c00
 8004ba4:	40023800 	.word	0x40023800
 8004ba8:	08009ab4 	.word	0x08009ab4
 8004bac:	20000000 	.word	0x20000000
 8004bb0:	20000004 	.word	0x20000004

08004bb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bb8:	b094      	sub	sp, #80	@ 0x50
 8004bba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bcc:	4b79      	ldr	r3, [pc, #484]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	f003 030c 	and.w	r3, r3, #12
 8004bd4:	2b08      	cmp	r3, #8
 8004bd6:	d00d      	beq.n	8004bf4 <HAL_RCC_GetSysClockFreq+0x40>
 8004bd8:	2b08      	cmp	r3, #8
 8004bda:	f200 80e1 	bhi.w	8004da0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d002      	beq.n	8004be8 <HAL_RCC_GetSysClockFreq+0x34>
 8004be2:	2b04      	cmp	r3, #4
 8004be4:	d003      	beq.n	8004bee <HAL_RCC_GetSysClockFreq+0x3a>
 8004be6:	e0db      	b.n	8004da0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004be8:	4b73      	ldr	r3, [pc, #460]	@ (8004db8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004bea:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004bec:	e0db      	b.n	8004da6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bee:	4b73      	ldr	r3, [pc, #460]	@ (8004dbc <HAL_RCC_GetSysClockFreq+0x208>)
 8004bf0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004bf2:	e0d8      	b.n	8004da6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bf4:	4b6f      	ldr	r3, [pc, #444]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004bfc:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bfe:	4b6d      	ldr	r3, [pc, #436]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d063      	beq.n	8004cd2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c0a:	4b6a      	ldr	r3, [pc, #424]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	099b      	lsrs	r3, r3, #6
 8004c10:	2200      	movs	r2, #0
 8004c12:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c14:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c1e:	2300      	movs	r3, #0
 8004c20:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004c26:	4622      	mov	r2, r4
 8004c28:	462b      	mov	r3, r5
 8004c2a:	f04f 0000 	mov.w	r0, #0
 8004c2e:	f04f 0100 	mov.w	r1, #0
 8004c32:	0159      	lsls	r1, r3, #5
 8004c34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c38:	0150      	lsls	r0, r2, #5
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	4621      	mov	r1, r4
 8004c40:	1a51      	subs	r1, r2, r1
 8004c42:	6139      	str	r1, [r7, #16]
 8004c44:	4629      	mov	r1, r5
 8004c46:	eb63 0301 	sbc.w	r3, r3, r1
 8004c4a:	617b      	str	r3, [r7, #20]
 8004c4c:	f04f 0200 	mov.w	r2, #0
 8004c50:	f04f 0300 	mov.w	r3, #0
 8004c54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c58:	4659      	mov	r1, fp
 8004c5a:	018b      	lsls	r3, r1, #6
 8004c5c:	4651      	mov	r1, sl
 8004c5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c62:	4651      	mov	r1, sl
 8004c64:	018a      	lsls	r2, r1, #6
 8004c66:	4651      	mov	r1, sl
 8004c68:	ebb2 0801 	subs.w	r8, r2, r1
 8004c6c:	4659      	mov	r1, fp
 8004c6e:	eb63 0901 	sbc.w	r9, r3, r1
 8004c72:	f04f 0200 	mov.w	r2, #0
 8004c76:	f04f 0300 	mov.w	r3, #0
 8004c7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c86:	4690      	mov	r8, r2
 8004c88:	4699      	mov	r9, r3
 8004c8a:	4623      	mov	r3, r4
 8004c8c:	eb18 0303 	adds.w	r3, r8, r3
 8004c90:	60bb      	str	r3, [r7, #8]
 8004c92:	462b      	mov	r3, r5
 8004c94:	eb49 0303 	adc.w	r3, r9, r3
 8004c98:	60fb      	str	r3, [r7, #12]
 8004c9a:	f04f 0200 	mov.w	r2, #0
 8004c9e:	f04f 0300 	mov.w	r3, #0
 8004ca2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004ca6:	4629      	mov	r1, r5
 8004ca8:	024b      	lsls	r3, r1, #9
 8004caa:	4621      	mov	r1, r4
 8004cac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004cb0:	4621      	mov	r1, r4
 8004cb2:	024a      	lsls	r2, r1, #9
 8004cb4:	4610      	mov	r0, r2
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cba:	2200      	movs	r2, #0
 8004cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004cbe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004cc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004cc4:	f7fb fadc 	bl	8000280 <__aeabi_uldivmod>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	460b      	mov	r3, r1
 8004ccc:	4613      	mov	r3, r2
 8004cce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cd0:	e058      	b.n	8004d84 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cd2:	4b38      	ldr	r3, [pc, #224]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	099b      	lsrs	r3, r3, #6
 8004cd8:	2200      	movs	r2, #0
 8004cda:	4618      	mov	r0, r3
 8004cdc:	4611      	mov	r1, r2
 8004cde:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004ce2:	623b      	str	r3, [r7, #32]
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ce8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004cec:	4642      	mov	r2, r8
 8004cee:	464b      	mov	r3, r9
 8004cf0:	f04f 0000 	mov.w	r0, #0
 8004cf4:	f04f 0100 	mov.w	r1, #0
 8004cf8:	0159      	lsls	r1, r3, #5
 8004cfa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cfe:	0150      	lsls	r0, r2, #5
 8004d00:	4602      	mov	r2, r0
 8004d02:	460b      	mov	r3, r1
 8004d04:	4641      	mov	r1, r8
 8004d06:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d0a:	4649      	mov	r1, r9
 8004d0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d10:	f04f 0200 	mov.w	r2, #0
 8004d14:	f04f 0300 	mov.w	r3, #0
 8004d18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d24:	ebb2 040a 	subs.w	r4, r2, sl
 8004d28:	eb63 050b 	sbc.w	r5, r3, fp
 8004d2c:	f04f 0200 	mov.w	r2, #0
 8004d30:	f04f 0300 	mov.w	r3, #0
 8004d34:	00eb      	lsls	r3, r5, #3
 8004d36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d3a:	00e2      	lsls	r2, r4, #3
 8004d3c:	4614      	mov	r4, r2
 8004d3e:	461d      	mov	r5, r3
 8004d40:	4643      	mov	r3, r8
 8004d42:	18e3      	adds	r3, r4, r3
 8004d44:	603b      	str	r3, [r7, #0]
 8004d46:	464b      	mov	r3, r9
 8004d48:	eb45 0303 	adc.w	r3, r5, r3
 8004d4c:	607b      	str	r3, [r7, #4]
 8004d4e:	f04f 0200 	mov.w	r2, #0
 8004d52:	f04f 0300 	mov.w	r3, #0
 8004d56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d5a:	4629      	mov	r1, r5
 8004d5c:	028b      	lsls	r3, r1, #10
 8004d5e:	4621      	mov	r1, r4
 8004d60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d64:	4621      	mov	r1, r4
 8004d66:	028a      	lsls	r2, r1, #10
 8004d68:	4610      	mov	r0, r2
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d6e:	2200      	movs	r2, #0
 8004d70:	61bb      	str	r3, [r7, #24]
 8004d72:	61fa      	str	r2, [r7, #28]
 8004d74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d78:	f7fb fa82 	bl	8000280 <__aeabi_uldivmod>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	460b      	mov	r3, r1
 8004d80:	4613      	mov	r3, r2
 8004d82:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d84:	4b0b      	ldr	r3, [pc, #44]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	0c1b      	lsrs	r3, r3, #16
 8004d8a:	f003 0303 	and.w	r3, r3, #3
 8004d8e:	3301      	adds	r3, #1
 8004d90:	005b      	lsls	r3, r3, #1
 8004d92:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004d94:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d9c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d9e:	e002      	b.n	8004da6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004da0:	4b05      	ldr	r3, [pc, #20]	@ (8004db8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004da2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004da4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004da6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3750      	adds	r7, #80	@ 0x50
 8004dac:	46bd      	mov	sp, r7
 8004dae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004db2:	bf00      	nop
 8004db4:	40023800 	.word	0x40023800
 8004db8:	00f42400 	.word	0x00f42400
 8004dbc:	007a1200 	.word	0x007a1200

08004dc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004dc4:	4b03      	ldr	r3, [pc, #12]	@ (8004dd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	20000000 	.word	0x20000000

08004dd8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004dd8:	b084      	sub	sp, #16
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b084      	sub	sp, #16
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
 8004de2:	f107 001c 	add.w	r0, r7, #28
 8004de6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d122      	bne.n	8004e36 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004df4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004e04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d105      	bne.n	8004e2a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f001 fbee 	bl	800660c <USB_CoreReset>
 8004e30:	4603      	mov	r3, r0
 8004e32:	73fb      	strb	r3, [r7, #15]
 8004e34:	e01a      	b.n	8004e6c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f001 fbe2 	bl	800660c <USB_CoreReset>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004e4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d106      	bne.n	8004e60 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e56:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	639a      	str	r2, [r3, #56]	@ 0x38
 8004e5e:	e005      	b.n	8004e6c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e64:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d10b      	bne.n	8004e8a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f043 0206 	orr.w	r2, r3, #6
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f043 0220 	orr.w	r2, r3, #32
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3710      	adds	r7, #16
 8004e90:	46bd      	mov	sp, r7
 8004e92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e96:	b004      	add	sp, #16
 8004e98:	4770      	bx	lr
	...

08004e9c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b087      	sub	sp, #28
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004eaa:	79fb      	ldrb	r3, [r7, #7]
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d165      	bne.n	8004f7c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	4a41      	ldr	r2, [pc, #260]	@ (8004fb8 <USB_SetTurnaroundTime+0x11c>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d906      	bls.n	8004ec6 <USB_SetTurnaroundTime+0x2a>
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	4a40      	ldr	r2, [pc, #256]	@ (8004fbc <USB_SetTurnaroundTime+0x120>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d202      	bcs.n	8004ec6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004ec0:	230f      	movs	r3, #15
 8004ec2:	617b      	str	r3, [r7, #20]
 8004ec4:	e062      	b.n	8004f8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	4a3c      	ldr	r2, [pc, #240]	@ (8004fbc <USB_SetTurnaroundTime+0x120>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d306      	bcc.n	8004edc <USB_SetTurnaroundTime+0x40>
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	4a3b      	ldr	r2, [pc, #236]	@ (8004fc0 <USB_SetTurnaroundTime+0x124>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d202      	bcs.n	8004edc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004ed6:	230e      	movs	r3, #14
 8004ed8:	617b      	str	r3, [r7, #20]
 8004eda:	e057      	b.n	8004f8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	4a38      	ldr	r2, [pc, #224]	@ (8004fc0 <USB_SetTurnaroundTime+0x124>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d306      	bcc.n	8004ef2 <USB_SetTurnaroundTime+0x56>
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	4a37      	ldr	r2, [pc, #220]	@ (8004fc4 <USB_SetTurnaroundTime+0x128>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d202      	bcs.n	8004ef2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004eec:	230d      	movs	r3, #13
 8004eee:	617b      	str	r3, [r7, #20]
 8004ef0:	e04c      	b.n	8004f8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	4a33      	ldr	r2, [pc, #204]	@ (8004fc4 <USB_SetTurnaroundTime+0x128>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d306      	bcc.n	8004f08 <USB_SetTurnaroundTime+0x6c>
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	4a32      	ldr	r2, [pc, #200]	@ (8004fc8 <USB_SetTurnaroundTime+0x12c>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d802      	bhi.n	8004f08 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004f02:	230c      	movs	r3, #12
 8004f04:	617b      	str	r3, [r7, #20]
 8004f06:	e041      	b.n	8004f8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	4a2f      	ldr	r2, [pc, #188]	@ (8004fc8 <USB_SetTurnaroundTime+0x12c>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d906      	bls.n	8004f1e <USB_SetTurnaroundTime+0x82>
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	4a2e      	ldr	r2, [pc, #184]	@ (8004fcc <USB_SetTurnaroundTime+0x130>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d802      	bhi.n	8004f1e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004f18:	230b      	movs	r3, #11
 8004f1a:	617b      	str	r3, [r7, #20]
 8004f1c:	e036      	b.n	8004f8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	4a2a      	ldr	r2, [pc, #168]	@ (8004fcc <USB_SetTurnaroundTime+0x130>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d906      	bls.n	8004f34 <USB_SetTurnaroundTime+0x98>
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	4a29      	ldr	r2, [pc, #164]	@ (8004fd0 <USB_SetTurnaroundTime+0x134>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d802      	bhi.n	8004f34 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004f2e:	230a      	movs	r3, #10
 8004f30:	617b      	str	r3, [r7, #20]
 8004f32:	e02b      	b.n	8004f8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	4a26      	ldr	r2, [pc, #152]	@ (8004fd0 <USB_SetTurnaroundTime+0x134>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d906      	bls.n	8004f4a <USB_SetTurnaroundTime+0xae>
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	4a25      	ldr	r2, [pc, #148]	@ (8004fd4 <USB_SetTurnaroundTime+0x138>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d202      	bcs.n	8004f4a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004f44:	2309      	movs	r3, #9
 8004f46:	617b      	str	r3, [r7, #20]
 8004f48:	e020      	b.n	8004f8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	4a21      	ldr	r2, [pc, #132]	@ (8004fd4 <USB_SetTurnaroundTime+0x138>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d306      	bcc.n	8004f60 <USB_SetTurnaroundTime+0xc4>
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	4a20      	ldr	r2, [pc, #128]	@ (8004fd8 <USB_SetTurnaroundTime+0x13c>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d802      	bhi.n	8004f60 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004f5a:	2308      	movs	r3, #8
 8004f5c:	617b      	str	r3, [r7, #20]
 8004f5e:	e015      	b.n	8004f8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	4a1d      	ldr	r2, [pc, #116]	@ (8004fd8 <USB_SetTurnaroundTime+0x13c>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d906      	bls.n	8004f76 <USB_SetTurnaroundTime+0xda>
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	4a1c      	ldr	r2, [pc, #112]	@ (8004fdc <USB_SetTurnaroundTime+0x140>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d202      	bcs.n	8004f76 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004f70:	2307      	movs	r3, #7
 8004f72:	617b      	str	r3, [r7, #20]
 8004f74:	e00a      	b.n	8004f8c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004f76:	2306      	movs	r3, #6
 8004f78:	617b      	str	r3, [r7, #20]
 8004f7a:	e007      	b.n	8004f8c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004f7c:	79fb      	ldrb	r3, [r7, #7]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d102      	bne.n	8004f88 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004f82:	2309      	movs	r3, #9
 8004f84:	617b      	str	r3, [r7, #20]
 8004f86:	e001      	b.n	8004f8c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004f88:	2309      	movs	r3, #9
 8004f8a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	68da      	ldr	r2, [r3, #12]
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	029b      	lsls	r3, r3, #10
 8004fa0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004fa4:	431a      	orrs	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	371c      	adds	r7, #28
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr
 8004fb8:	00d8acbf 	.word	0x00d8acbf
 8004fbc:	00e4e1c0 	.word	0x00e4e1c0
 8004fc0:	00f42400 	.word	0x00f42400
 8004fc4:	01067380 	.word	0x01067380
 8004fc8:	011a499f 	.word	0x011a499f
 8004fcc:	01312cff 	.word	0x01312cff
 8004fd0:	014ca43f 	.word	0x014ca43f
 8004fd4:	016e3600 	.word	0x016e3600
 8004fd8:	01a6ab1f 	.word	0x01a6ab1f
 8004fdc:	01e84800 	.word	0x01e84800

08004fe0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	f043 0201 	orr.w	r2, r3, #1
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005002:	b480      	push	{r7}
 8005004:	b083      	sub	sp, #12
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f023 0201 	bic.w	r2, r3, #1
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	460b      	mov	r3, r1
 800502e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005030:	2300      	movs	r3, #0
 8005032:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005040:	78fb      	ldrb	r3, [r7, #3]
 8005042:	2b01      	cmp	r3, #1
 8005044:	d115      	bne.n	8005072 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005052:	2001      	movs	r0, #1
 8005054:	f7fc fe86 	bl	8001d64 <HAL_Delay>
      ms++;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	3301      	adds	r3, #1
 800505c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f001 fa45 	bl	80064ee <USB_GetMode>
 8005064:	4603      	mov	r3, r0
 8005066:	2b01      	cmp	r3, #1
 8005068:	d01e      	beq.n	80050a8 <USB_SetCurrentMode+0x84>
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2b31      	cmp	r3, #49	@ 0x31
 800506e:	d9f0      	bls.n	8005052 <USB_SetCurrentMode+0x2e>
 8005070:	e01a      	b.n	80050a8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005072:	78fb      	ldrb	r3, [r7, #3]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d115      	bne.n	80050a4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005084:	2001      	movs	r0, #1
 8005086:	f7fc fe6d 	bl	8001d64 <HAL_Delay>
      ms++;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	3301      	adds	r3, #1
 800508e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f001 fa2c 	bl	80064ee <USB_GetMode>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d005      	beq.n	80050a8 <USB_SetCurrentMode+0x84>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2b31      	cmp	r3, #49	@ 0x31
 80050a0:	d9f0      	bls.n	8005084 <USB_SetCurrentMode+0x60>
 80050a2:	e001      	b.n	80050a8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e005      	b.n	80050b4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2b32      	cmp	r3, #50	@ 0x32
 80050ac:	d101      	bne.n	80050b2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e000      	b.n	80050b4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3710      	adds	r7, #16
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050bc:	b084      	sub	sp, #16
 80050be:	b580      	push	{r7, lr}
 80050c0:	b086      	sub	sp, #24
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
 80050c6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80050ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80050ce:	2300      	movs	r3, #0
 80050d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80050d6:	2300      	movs	r3, #0
 80050d8:	613b      	str	r3, [r7, #16]
 80050da:	e009      	b.n	80050f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	3340      	adds	r3, #64	@ 0x40
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	4413      	add	r3, r2
 80050e6:	2200      	movs	r2, #0
 80050e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	3301      	adds	r3, #1
 80050ee:	613b      	str	r3, [r7, #16]
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	2b0e      	cmp	r3, #14
 80050f4:	d9f2      	bls.n	80050dc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80050f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d11c      	bne.n	8005136 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800510a:	f043 0302 	orr.w	r3, r3, #2
 800510e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005114:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005120:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800512c:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	639a      	str	r2, [r3, #56]	@ 0x38
 8005134:	e00b      	b.n	800514e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800513a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005146:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005154:	461a      	mov	r2, r3
 8005156:	2300      	movs	r3, #0
 8005158:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005160:	4619      	mov	r1, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005168:	461a      	mov	r2, r3
 800516a:	680b      	ldr	r3, [r1, #0]
 800516c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800516e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005170:	2b01      	cmp	r3, #1
 8005172:	d10c      	bne.n	800518e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005176:	2b00      	cmp	r3, #0
 8005178:	d104      	bne.n	8005184 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800517a:	2100      	movs	r1, #0
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f000 f965 	bl	800544c <USB_SetDevSpeed>
 8005182:	e008      	b.n	8005196 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005184:	2101      	movs	r1, #1
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f960 	bl	800544c <USB_SetDevSpeed>
 800518c:	e003      	b.n	8005196 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800518e:	2103      	movs	r1, #3
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 f95b 	bl	800544c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005196:	2110      	movs	r1, #16
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 f8f3 	bl	8005384 <USB_FlushTxFifo>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d001      	beq.n	80051a8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 f91f 	bl	80053ec <USB_FlushRxFifo>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d001      	beq.n	80051b8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051be:	461a      	mov	r2, r3
 80051c0:	2300      	movs	r3, #0
 80051c2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051ca:	461a      	mov	r2, r3
 80051cc:	2300      	movs	r3, #0
 80051ce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051d6:	461a      	mov	r2, r3
 80051d8:	2300      	movs	r3, #0
 80051da:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051dc:	2300      	movs	r3, #0
 80051de:	613b      	str	r3, [r7, #16]
 80051e0:	e043      	b.n	800526a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	015a      	lsls	r2, r3, #5
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	4413      	add	r3, r2
 80051ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80051f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80051f8:	d118      	bne.n	800522c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d10a      	bne.n	8005216 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	015a      	lsls	r2, r3, #5
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	4413      	add	r3, r2
 8005208:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800520c:	461a      	mov	r2, r3
 800520e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005212:	6013      	str	r3, [r2, #0]
 8005214:	e013      	b.n	800523e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	015a      	lsls	r2, r3, #5
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	4413      	add	r3, r2
 800521e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005222:	461a      	mov	r2, r3
 8005224:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005228:	6013      	str	r3, [r2, #0]
 800522a:	e008      	b.n	800523e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	015a      	lsls	r2, r3, #5
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	4413      	add	r3, r2
 8005234:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005238:	461a      	mov	r2, r3
 800523a:	2300      	movs	r3, #0
 800523c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	015a      	lsls	r2, r3, #5
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	4413      	add	r3, r2
 8005246:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800524a:	461a      	mov	r2, r3
 800524c:	2300      	movs	r3, #0
 800524e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	015a      	lsls	r2, r3, #5
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	4413      	add	r3, r2
 8005258:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800525c:	461a      	mov	r2, r3
 800525e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005262:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	3301      	adds	r3, #1
 8005268:	613b      	str	r3, [r7, #16]
 800526a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800526c:	693a      	ldr	r2, [r7, #16]
 800526e:	429a      	cmp	r2, r3
 8005270:	d3b7      	bcc.n	80051e2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005272:	2300      	movs	r3, #0
 8005274:	613b      	str	r3, [r7, #16]
 8005276:	e043      	b.n	8005300 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	015a      	lsls	r2, r3, #5
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	4413      	add	r3, r2
 8005280:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800528a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800528e:	d118      	bne.n	80052c2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d10a      	bne.n	80052ac <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	015a      	lsls	r2, r3, #5
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	4413      	add	r3, r2
 800529e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052a2:	461a      	mov	r2, r3
 80052a4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80052a8:	6013      	str	r3, [r2, #0]
 80052aa:	e013      	b.n	80052d4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	015a      	lsls	r2, r3, #5
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	4413      	add	r3, r2
 80052b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052b8:	461a      	mov	r2, r3
 80052ba:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80052be:	6013      	str	r3, [r2, #0]
 80052c0:	e008      	b.n	80052d4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	015a      	lsls	r2, r3, #5
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	4413      	add	r3, r2
 80052ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052ce:	461a      	mov	r2, r3
 80052d0:	2300      	movs	r3, #0
 80052d2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	015a      	lsls	r2, r3, #5
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	4413      	add	r3, r2
 80052dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052e0:	461a      	mov	r2, r3
 80052e2:	2300      	movs	r3, #0
 80052e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	015a      	lsls	r2, r3, #5
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	4413      	add	r3, r2
 80052ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052f2:	461a      	mov	r2, r3
 80052f4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80052f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	3301      	adds	r3, #1
 80052fe:	613b      	str	r3, [r7, #16]
 8005300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005302:	693a      	ldr	r2, [r7, #16]
 8005304:	429a      	cmp	r2, r3
 8005306:	d3b7      	bcc.n	8005278 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005316:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800531a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005328:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800532a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800532c:	2b00      	cmp	r3, #0
 800532e:	d105      	bne.n	800533c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	f043 0210 	orr.w	r2, r3, #16
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	699a      	ldr	r2, [r3, #24]
 8005340:	4b0f      	ldr	r3, [pc, #60]	@ (8005380 <USB_DevInit+0x2c4>)
 8005342:	4313      	orrs	r3, r2
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005348:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800534a:	2b00      	cmp	r3, #0
 800534c:	d005      	beq.n	800535a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	f043 0208 	orr.w	r2, r3, #8
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800535a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800535c:	2b01      	cmp	r3, #1
 800535e:	d107      	bne.n	8005370 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005368:	f043 0304 	orr.w	r3, r3, #4
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005370:	7dfb      	ldrb	r3, [r7, #23]
}
 8005372:	4618      	mov	r0, r3
 8005374:	3718      	adds	r7, #24
 8005376:	46bd      	mov	sp, r7
 8005378:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800537c:	b004      	add	sp, #16
 800537e:	4770      	bx	lr
 8005380:	803c3800 	.word	0x803c3800

08005384 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800538e:	2300      	movs	r3, #0
 8005390:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	3301      	adds	r3, #1
 8005396:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	4a13      	ldr	r2, [pc, #76]	@ (80053e8 <USB_FlushTxFifo+0x64>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d901      	bls.n	80053a4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e01b      	b.n	80053dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	daf2      	bge.n	8005392 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80053ac:	2300      	movs	r3, #0
 80053ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	019b      	lsls	r3, r3, #6
 80053b4:	f043 0220 	orr.w	r2, r3, #32
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	3301      	adds	r3, #1
 80053c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	4a08      	ldr	r2, [pc, #32]	@ (80053e8 <USB_FlushTxFifo+0x64>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d901      	bls.n	80053ce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e006      	b.n	80053dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	f003 0320 	and.w	r3, r3, #32
 80053d6:	2b20      	cmp	r3, #32
 80053d8:	d0f0      	beq.n	80053bc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3714      	adds	r7, #20
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr
 80053e8:	00030d40 	.word	0x00030d40

080053ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80053f4:	2300      	movs	r3, #0
 80053f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	3301      	adds	r3, #1
 80053fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	4a11      	ldr	r2, [pc, #68]	@ (8005448 <USB_FlushRxFifo+0x5c>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d901      	bls.n	800540a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e018      	b.n	800543c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	2b00      	cmp	r3, #0
 8005410:	daf2      	bge.n	80053f8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005412:	2300      	movs	r3, #0
 8005414:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2210      	movs	r2, #16
 800541a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	3301      	adds	r3, #1
 8005420:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	4a08      	ldr	r2, [pc, #32]	@ (8005448 <USB_FlushRxFifo+0x5c>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d901      	bls.n	800542e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e006      	b.n	800543c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	f003 0310 	and.w	r3, r3, #16
 8005436:	2b10      	cmp	r3, #16
 8005438:	d0f0      	beq.n	800541c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	3714      	adds	r7, #20
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr
 8005448:	00030d40 	.word	0x00030d40

0800544c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800544c:	b480      	push	{r7}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	460b      	mov	r3, r1
 8005456:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	78fb      	ldrb	r3, [r7, #3]
 8005466:	68f9      	ldr	r1, [r7, #12]
 8005468:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800546c:	4313      	orrs	r3, r2
 800546e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3714      	adds	r7, #20
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr

0800547e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800547e:	b480      	push	{r7}
 8005480:	b087      	sub	sp, #28
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	f003 0306 	and.w	r3, r3, #6
 8005496:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d102      	bne.n	80054a4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800549e:	2300      	movs	r3, #0
 80054a0:	75fb      	strb	r3, [r7, #23]
 80054a2:	e00a      	b.n	80054ba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d002      	beq.n	80054b0 <USB_GetDevSpeed+0x32>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2b06      	cmp	r3, #6
 80054ae:	d102      	bne.n	80054b6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80054b0:	2302      	movs	r3, #2
 80054b2:	75fb      	strb	r3, [r7, #23]
 80054b4:	e001      	b.n	80054ba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80054b6:	230f      	movs	r3, #15
 80054b8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80054ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80054bc:	4618      	mov	r0, r3
 80054be:	371c      	adds	r7, #28
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	785b      	ldrb	r3, [r3, #1]
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d13a      	bne.n	800555a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054ea:	69da      	ldr	r2, [r3, #28]
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	f003 030f 	and.w	r3, r3, #15
 80054f4:	2101      	movs	r1, #1
 80054f6:	fa01 f303 	lsl.w	r3, r1, r3
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	68f9      	ldr	r1, [r7, #12]
 80054fe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005502:	4313      	orrs	r3, r2
 8005504:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	015a      	lsls	r2, r3, #5
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	4413      	add	r3, r2
 800550e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005518:	2b00      	cmp	r3, #0
 800551a:	d155      	bne.n	80055c8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	015a      	lsls	r2, r3, #5
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	4413      	add	r3, r2
 8005524:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	791b      	ldrb	r3, [r3, #4]
 8005536:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005538:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	059b      	lsls	r3, r3, #22
 800553e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005540:	4313      	orrs	r3, r2
 8005542:	68ba      	ldr	r2, [r7, #8]
 8005544:	0151      	lsls	r1, r2, #5
 8005546:	68fa      	ldr	r2, [r7, #12]
 8005548:	440a      	add	r2, r1
 800554a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800554e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005552:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005556:	6013      	str	r3, [r2, #0]
 8005558:	e036      	b.n	80055c8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005560:	69da      	ldr	r2, [r3, #28]
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	f003 030f 	and.w	r3, r3, #15
 800556a:	2101      	movs	r1, #1
 800556c:	fa01 f303 	lsl.w	r3, r1, r3
 8005570:	041b      	lsls	r3, r3, #16
 8005572:	68f9      	ldr	r1, [r7, #12]
 8005574:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005578:	4313      	orrs	r3, r2
 800557a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	015a      	lsls	r2, r3, #5
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	4413      	add	r3, r2
 8005584:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d11a      	bne.n	80055c8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	015a      	lsls	r2, r3, #5
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	4413      	add	r3, r2
 800559a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	791b      	ldrb	r3, [r3, #4]
 80055ac:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80055ae:	430b      	orrs	r3, r1
 80055b0:	4313      	orrs	r3, r2
 80055b2:	68ba      	ldr	r2, [r7, #8]
 80055b4:	0151      	lsls	r1, r2, #5
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	440a      	add	r2, r1
 80055ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055c6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3714      	adds	r7, #20
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr
	...

080055d8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	785b      	ldrb	r3, [r3, #1]
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d161      	bne.n	80056b8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	015a      	lsls	r2, r3, #5
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	4413      	add	r3, r2
 80055fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005606:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800560a:	d11f      	bne.n	800564c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	015a      	lsls	r2, r3, #5
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	4413      	add	r3, r2
 8005614:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68ba      	ldr	r2, [r7, #8]
 800561c:	0151      	lsls	r1, r2, #5
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	440a      	add	r2, r1
 8005622:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005626:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800562a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	015a      	lsls	r2, r3, #5
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	4413      	add	r3, r2
 8005634:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68ba      	ldr	r2, [r7, #8]
 800563c:	0151      	lsls	r1, r2, #5
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	440a      	add	r2, r1
 8005642:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005646:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800564a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005652:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	f003 030f 	and.w	r3, r3, #15
 800565c:	2101      	movs	r1, #1
 800565e:	fa01 f303 	lsl.w	r3, r1, r3
 8005662:	b29b      	uxth	r3, r3
 8005664:	43db      	mvns	r3, r3
 8005666:	68f9      	ldr	r1, [r7, #12]
 8005668:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800566c:	4013      	ands	r3, r2
 800566e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005676:	69da      	ldr	r2, [r3, #28]
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	f003 030f 	and.w	r3, r3, #15
 8005680:	2101      	movs	r1, #1
 8005682:	fa01 f303 	lsl.w	r3, r1, r3
 8005686:	b29b      	uxth	r3, r3
 8005688:	43db      	mvns	r3, r3
 800568a:	68f9      	ldr	r1, [r7, #12]
 800568c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005690:	4013      	ands	r3, r2
 8005692:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	015a      	lsls	r2, r3, #5
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	4413      	add	r3, r2
 800569c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	0159      	lsls	r1, r3, #5
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	440b      	add	r3, r1
 80056aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056ae:	4619      	mov	r1, r3
 80056b0:	4b35      	ldr	r3, [pc, #212]	@ (8005788 <USB_DeactivateEndpoint+0x1b0>)
 80056b2:	4013      	ands	r3, r2
 80056b4:	600b      	str	r3, [r1, #0]
 80056b6:	e060      	b.n	800577a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	015a      	lsls	r2, r3, #5
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	4413      	add	r3, r2
 80056c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80056ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056ce:	d11f      	bne.n	8005710 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	015a      	lsls	r2, r3, #5
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	4413      	add	r3, r2
 80056d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68ba      	ldr	r2, [r7, #8]
 80056e0:	0151      	lsls	r1, r2, #5
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	440a      	add	r2, r1
 80056e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056ea:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80056ee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	015a      	lsls	r2, r3, #5
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	4413      	add	r3, r2
 80056f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68ba      	ldr	r2, [r7, #8]
 8005700:	0151      	lsls	r1, r2, #5
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	440a      	add	r2, r1
 8005706:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800570a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800570e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005716:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	f003 030f 	and.w	r3, r3, #15
 8005720:	2101      	movs	r1, #1
 8005722:	fa01 f303 	lsl.w	r3, r1, r3
 8005726:	041b      	lsls	r3, r3, #16
 8005728:	43db      	mvns	r3, r3
 800572a:	68f9      	ldr	r1, [r7, #12]
 800572c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005730:	4013      	ands	r3, r2
 8005732:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800573a:	69da      	ldr	r2, [r3, #28]
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	f003 030f 	and.w	r3, r3, #15
 8005744:	2101      	movs	r1, #1
 8005746:	fa01 f303 	lsl.w	r3, r1, r3
 800574a:	041b      	lsls	r3, r3, #16
 800574c:	43db      	mvns	r3, r3
 800574e:	68f9      	ldr	r1, [r7, #12]
 8005750:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005754:	4013      	ands	r3, r2
 8005756:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	015a      	lsls	r2, r3, #5
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	4413      	add	r3, r2
 8005760:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	0159      	lsls	r1, r3, #5
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	440b      	add	r3, r1
 800576e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005772:	4619      	mov	r1, r3
 8005774:	4b05      	ldr	r3, [pc, #20]	@ (800578c <USB_DeactivateEndpoint+0x1b4>)
 8005776:	4013      	ands	r3, r2
 8005778:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3714      	adds	r7, #20
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr
 8005788:	ec337800 	.word	0xec337800
 800578c:	eff37800 	.word	0xeff37800

08005790 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b08a      	sub	sp, #40	@ 0x28
 8005794:	af02      	add	r7, sp, #8
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	4613      	mov	r3, r2
 800579c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	785b      	ldrb	r3, [r3, #1]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	f040 815c 	bne.w	8005a6a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d132      	bne.n	8005820 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	015a      	lsls	r2, r3, #5
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	4413      	add	r3, r2
 80057c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	69ba      	ldr	r2, [r7, #24]
 80057ca:	0151      	lsls	r1, r2, #5
 80057cc:	69fa      	ldr	r2, [r7, #28]
 80057ce:	440a      	add	r2, r1
 80057d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057d4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80057d8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80057dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	015a      	lsls	r2, r3, #5
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	4413      	add	r3, r2
 80057e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	69ba      	ldr	r2, [r7, #24]
 80057ee:	0151      	lsls	r1, r2, #5
 80057f0:	69fa      	ldr	r2, [r7, #28]
 80057f2:	440a      	add	r2, r1
 80057f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057f8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80057fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	015a      	lsls	r2, r3, #5
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	4413      	add	r3, r2
 8005806:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	69ba      	ldr	r2, [r7, #24]
 800580e:	0151      	lsls	r1, r2, #5
 8005810:	69fa      	ldr	r2, [r7, #28]
 8005812:	440a      	add	r2, r1
 8005814:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005818:	0cdb      	lsrs	r3, r3, #19
 800581a:	04db      	lsls	r3, r3, #19
 800581c:	6113      	str	r3, [r2, #16]
 800581e:	e074      	b.n	800590a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	015a      	lsls	r2, r3, #5
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	4413      	add	r3, r2
 8005828:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	69ba      	ldr	r2, [r7, #24]
 8005830:	0151      	lsls	r1, r2, #5
 8005832:	69fa      	ldr	r2, [r7, #28]
 8005834:	440a      	add	r2, r1
 8005836:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800583a:	0cdb      	lsrs	r3, r3, #19
 800583c:	04db      	lsls	r3, r3, #19
 800583e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	015a      	lsls	r2, r3, #5
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	4413      	add	r3, r2
 8005848:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	69ba      	ldr	r2, [r7, #24]
 8005850:	0151      	lsls	r1, r2, #5
 8005852:	69fa      	ldr	r2, [r7, #28]
 8005854:	440a      	add	r2, r1
 8005856:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800585a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800585e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005862:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	015a      	lsls	r2, r3, #5
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	4413      	add	r3, r2
 800586c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005870:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	6999      	ldr	r1, [r3, #24]
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	440b      	add	r3, r1
 800587c:	1e59      	subs	r1, r3, #1
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	fbb1 f3f3 	udiv	r3, r1, r3
 8005886:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005888:	4b9d      	ldr	r3, [pc, #628]	@ (8005b00 <USB_EPStartXfer+0x370>)
 800588a:	400b      	ands	r3, r1
 800588c:	69b9      	ldr	r1, [r7, #24]
 800588e:	0148      	lsls	r0, r1, #5
 8005890:	69f9      	ldr	r1, [r7, #28]
 8005892:	4401      	add	r1, r0
 8005894:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005898:	4313      	orrs	r3, r2
 800589a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	015a      	lsls	r2, r3, #5
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	4413      	add	r3, r2
 80058a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058a8:	691a      	ldr	r2, [r3, #16]
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	699b      	ldr	r3, [r3, #24]
 80058ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058b2:	69b9      	ldr	r1, [r7, #24]
 80058b4:	0148      	lsls	r0, r1, #5
 80058b6:	69f9      	ldr	r1, [r7, #28]
 80058b8:	4401      	add	r1, r0
 80058ba:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80058be:	4313      	orrs	r3, r2
 80058c0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	791b      	ldrb	r3, [r3, #4]
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d11f      	bne.n	800590a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	015a      	lsls	r2, r3, #5
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	4413      	add	r3, r2
 80058d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058d6:	691b      	ldr	r3, [r3, #16]
 80058d8:	69ba      	ldr	r2, [r7, #24]
 80058da:	0151      	lsls	r1, r2, #5
 80058dc:	69fa      	ldr	r2, [r7, #28]
 80058de:	440a      	add	r2, r1
 80058e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058e4:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80058e8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	015a      	lsls	r2, r3, #5
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	4413      	add	r3, r2
 80058f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	69ba      	ldr	r2, [r7, #24]
 80058fa:	0151      	lsls	r1, r2, #5
 80058fc:	69fa      	ldr	r2, [r7, #28]
 80058fe:	440a      	add	r2, r1
 8005900:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005904:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005908:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800590a:	79fb      	ldrb	r3, [r7, #7]
 800590c:	2b01      	cmp	r3, #1
 800590e:	d14b      	bne.n	80059a8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	695b      	ldr	r3, [r3, #20]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d009      	beq.n	800592c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	015a      	lsls	r2, r3, #5
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	4413      	add	r3, r2
 8005920:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005924:	461a      	mov	r2, r3
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	791b      	ldrb	r3, [r3, #4]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d128      	bne.n	8005986 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005940:	2b00      	cmp	r3, #0
 8005942:	d110      	bne.n	8005966 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	015a      	lsls	r2, r3, #5
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	4413      	add	r3, r2
 800594c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	69ba      	ldr	r2, [r7, #24]
 8005954:	0151      	lsls	r1, r2, #5
 8005956:	69fa      	ldr	r2, [r7, #28]
 8005958:	440a      	add	r2, r1
 800595a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800595e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005962:	6013      	str	r3, [r2, #0]
 8005964:	e00f      	b.n	8005986 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	015a      	lsls	r2, r3, #5
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	4413      	add	r3, r2
 800596e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	69ba      	ldr	r2, [r7, #24]
 8005976:	0151      	lsls	r1, r2, #5
 8005978:	69fa      	ldr	r2, [r7, #28]
 800597a:	440a      	add	r2, r1
 800597c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005980:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005984:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	015a      	lsls	r2, r3, #5
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	4413      	add	r3, r2
 800598e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	69ba      	ldr	r2, [r7, #24]
 8005996:	0151      	lsls	r1, r2, #5
 8005998:	69fa      	ldr	r2, [r7, #28]
 800599a:	440a      	add	r2, r1
 800599c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059a0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80059a4:	6013      	str	r3, [r2, #0]
 80059a6:	e133      	b.n	8005c10 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	015a      	lsls	r2, r3, #5
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	4413      	add	r3, r2
 80059b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	69ba      	ldr	r2, [r7, #24]
 80059b8:	0151      	lsls	r1, r2, #5
 80059ba:	69fa      	ldr	r2, [r7, #28]
 80059bc:	440a      	add	r2, r1
 80059be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059c2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80059c6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	791b      	ldrb	r3, [r3, #4]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d015      	beq.n	80059fc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f000 811b 	beq.w	8005c10 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	f003 030f 	and.w	r3, r3, #15
 80059ea:	2101      	movs	r1, #1
 80059ec:	fa01 f303 	lsl.w	r3, r1, r3
 80059f0:	69f9      	ldr	r1, [r7, #28]
 80059f2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80059f6:	4313      	orrs	r3, r2
 80059f8:	634b      	str	r3, [r1, #52]	@ 0x34
 80059fa:	e109      	b.n	8005c10 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d110      	bne.n	8005a2e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	015a      	lsls	r2, r3, #5
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	4413      	add	r3, r2
 8005a14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	69ba      	ldr	r2, [r7, #24]
 8005a1c:	0151      	lsls	r1, r2, #5
 8005a1e:	69fa      	ldr	r2, [r7, #28]
 8005a20:	440a      	add	r2, r1
 8005a22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a26:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005a2a:	6013      	str	r3, [r2, #0]
 8005a2c:	e00f      	b.n	8005a4e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	015a      	lsls	r2, r3, #5
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	4413      	add	r3, r2
 8005a36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	69ba      	ldr	r2, [r7, #24]
 8005a3e:	0151      	lsls	r1, r2, #5
 8005a40:	69fa      	ldr	r2, [r7, #28]
 8005a42:	440a      	add	r2, r1
 8005a44:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a4c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	6919      	ldr	r1, [r3, #16]
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	781a      	ldrb	r2, [r3, #0]
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	699b      	ldr	r3, [r3, #24]
 8005a5a:	b298      	uxth	r0, r3
 8005a5c:	79fb      	ldrb	r3, [r7, #7]
 8005a5e:	9300      	str	r3, [sp, #0]
 8005a60:	4603      	mov	r3, r0
 8005a62:	68f8      	ldr	r0, [r7, #12]
 8005a64:	f000 fade 	bl	8006024 <USB_WritePacket>
 8005a68:	e0d2      	b.n	8005c10 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	015a      	lsls	r2, r3, #5
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	4413      	add	r3, r2
 8005a72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	69ba      	ldr	r2, [r7, #24]
 8005a7a:	0151      	lsls	r1, r2, #5
 8005a7c:	69fa      	ldr	r2, [r7, #28]
 8005a7e:	440a      	add	r2, r1
 8005a80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a84:	0cdb      	lsrs	r3, r3, #19
 8005a86:	04db      	lsls	r3, r3, #19
 8005a88:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	015a      	lsls	r2, r3, #5
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	4413      	add	r3, r2
 8005a92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	69ba      	ldr	r2, [r7, #24]
 8005a9a:	0151      	lsls	r1, r2, #5
 8005a9c:	69fa      	ldr	r2, [r7, #28]
 8005a9e:	440a      	add	r2, r1
 8005aa0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005aa4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005aa8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005aac:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d126      	bne.n	8005b04 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	015a      	lsls	r2, r3, #5
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	4413      	add	r3, r2
 8005abe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ac2:	691a      	ldr	r2, [r3, #16]
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005acc:	69b9      	ldr	r1, [r7, #24]
 8005ace:	0148      	lsls	r0, r1, #5
 8005ad0:	69f9      	ldr	r1, [r7, #28]
 8005ad2:	4401      	add	r1, r0
 8005ad4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	015a      	lsls	r2, r3, #5
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	69ba      	ldr	r2, [r7, #24]
 8005aec:	0151      	lsls	r1, r2, #5
 8005aee:	69fa      	ldr	r2, [r7, #28]
 8005af0:	440a      	add	r2, r1
 8005af2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005af6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005afa:	6113      	str	r3, [r2, #16]
 8005afc:	e03a      	b.n	8005b74 <USB_EPStartXfer+0x3e4>
 8005afe:	bf00      	nop
 8005b00:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	699a      	ldr	r2, [r3, #24]
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	1e5a      	subs	r2, r3, #1
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b18:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	8afa      	ldrh	r2, [r7, #22]
 8005b20:	fb03 f202 	mul.w	r2, r3, r2
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	015a      	lsls	r2, r3, #5
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	4413      	add	r3, r2
 8005b30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b34:	691a      	ldr	r2, [r3, #16]
 8005b36:	8afb      	ldrh	r3, [r7, #22]
 8005b38:	04d9      	lsls	r1, r3, #19
 8005b3a:	4b38      	ldr	r3, [pc, #224]	@ (8005c1c <USB_EPStartXfer+0x48c>)
 8005b3c:	400b      	ands	r3, r1
 8005b3e:	69b9      	ldr	r1, [r7, #24]
 8005b40:	0148      	lsls	r0, r1, #5
 8005b42:	69f9      	ldr	r1, [r7, #28]
 8005b44:	4401      	add	r1, r0
 8005b46:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	015a      	lsls	r2, r3, #5
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	4413      	add	r3, r2
 8005b56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b5a:	691a      	ldr	r2, [r3, #16]
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	69db      	ldr	r3, [r3, #28]
 8005b60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b64:	69b9      	ldr	r1, [r7, #24]
 8005b66:	0148      	lsls	r0, r1, #5
 8005b68:	69f9      	ldr	r1, [r7, #28]
 8005b6a:	4401      	add	r1, r0
 8005b6c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005b70:	4313      	orrs	r3, r2
 8005b72:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005b74:	79fb      	ldrb	r3, [r7, #7]
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d10d      	bne.n	8005b96 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d009      	beq.n	8005b96 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	6919      	ldr	r1, [r3, #16]
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	015a      	lsls	r2, r3, #5
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b92:	460a      	mov	r2, r1
 8005b94:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	791b      	ldrb	r3, [r3, #4]
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d128      	bne.n	8005bf0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d110      	bne.n	8005bd0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	015a      	lsls	r2, r3, #5
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	69ba      	ldr	r2, [r7, #24]
 8005bbe:	0151      	lsls	r1, r2, #5
 8005bc0:	69fa      	ldr	r2, [r7, #28]
 8005bc2:	440a      	add	r2, r1
 8005bc4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bc8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005bcc:	6013      	str	r3, [r2, #0]
 8005bce:	e00f      	b.n	8005bf0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	015a      	lsls	r2, r3, #5
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	69ba      	ldr	r2, [r7, #24]
 8005be0:	0151      	lsls	r1, r2, #5
 8005be2:	69fa      	ldr	r2, [r7, #28]
 8005be4:	440a      	add	r2, r1
 8005be6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bee:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	015a      	lsls	r2, r3, #5
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	69ba      	ldr	r2, [r7, #24]
 8005c00:	0151      	lsls	r1, r2, #5
 8005c02:	69fa      	ldr	r2, [r7, #28]
 8005c04:	440a      	add	r2, r1
 8005c06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c0a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005c0e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3720      	adds	r7, #32
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	1ff80000 	.word	0x1ff80000

08005c20 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b087      	sub	sp, #28
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	4613      	mov	r3, r2
 8005c2c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	785b      	ldrb	r3, [r3, #1]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	f040 80ce 	bne.w	8005dde <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d132      	bne.n	8005cb0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	015a      	lsls	r2, r3, #5
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	4413      	add	r3, r2
 8005c52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	693a      	ldr	r2, [r7, #16]
 8005c5a:	0151      	lsls	r1, r2, #5
 8005c5c:	697a      	ldr	r2, [r7, #20]
 8005c5e:	440a      	add	r2, r1
 8005c60:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c64:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005c68:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005c6c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	015a      	lsls	r2, r3, #5
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	4413      	add	r3, r2
 8005c76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	0151      	lsls	r1, r2, #5
 8005c80:	697a      	ldr	r2, [r7, #20]
 8005c82:	440a      	add	r2, r1
 8005c84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c88:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005c8c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	015a      	lsls	r2, r3, #5
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	4413      	add	r3, r2
 8005c96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	693a      	ldr	r2, [r7, #16]
 8005c9e:	0151      	lsls	r1, r2, #5
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	440a      	add	r2, r1
 8005ca4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ca8:	0cdb      	lsrs	r3, r3, #19
 8005caa:	04db      	lsls	r3, r3, #19
 8005cac:	6113      	str	r3, [r2, #16]
 8005cae:	e04e      	b.n	8005d4e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	015a      	lsls	r2, r3, #5
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	693a      	ldr	r2, [r7, #16]
 8005cc0:	0151      	lsls	r1, r2, #5
 8005cc2:	697a      	ldr	r2, [r7, #20]
 8005cc4:	440a      	add	r2, r1
 8005cc6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cca:	0cdb      	lsrs	r3, r3, #19
 8005ccc:	04db      	lsls	r3, r3, #19
 8005cce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	015a      	lsls	r2, r3, #5
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	4413      	add	r3, r2
 8005cd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	693a      	ldr	r2, [r7, #16]
 8005ce0:	0151      	lsls	r1, r2, #5
 8005ce2:	697a      	ldr	r2, [r7, #20]
 8005ce4:	440a      	add	r2, r1
 8005ce6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cea:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005cee:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005cf2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	699a      	ldr	r2, [r3, #24]
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d903      	bls.n	8005d08 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	68da      	ldr	r2, [r3, #12]
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	015a      	lsls	r2, r3, #5
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	4413      	add	r3, r2
 8005d10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	693a      	ldr	r2, [r7, #16]
 8005d18:	0151      	lsls	r1, r2, #5
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	440a      	add	r2, r1
 8005d1e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d22:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005d26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	015a      	lsls	r2, r3, #5
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	4413      	add	r3, r2
 8005d30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d34:	691a      	ldr	r2, [r3, #16]
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	699b      	ldr	r3, [r3, #24]
 8005d3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d3e:	6939      	ldr	r1, [r7, #16]
 8005d40:	0148      	lsls	r0, r1, #5
 8005d42:	6979      	ldr	r1, [r7, #20]
 8005d44:	4401      	add	r1, r0
 8005d46:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005d4e:	79fb      	ldrb	r3, [r7, #7]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d11e      	bne.n	8005d92 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	695b      	ldr	r3, [r3, #20]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d009      	beq.n	8005d70 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	015a      	lsls	r2, r3, #5
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	4413      	add	r3, r2
 8005d64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d68:	461a      	mov	r2, r3
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	695b      	ldr	r3, [r3, #20]
 8005d6e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	015a      	lsls	r2, r3, #5
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	4413      	add	r3, r2
 8005d78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	693a      	ldr	r2, [r7, #16]
 8005d80:	0151      	lsls	r1, r2, #5
 8005d82:	697a      	ldr	r2, [r7, #20]
 8005d84:	440a      	add	r2, r1
 8005d86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d8a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005d8e:	6013      	str	r3, [r2, #0]
 8005d90:	e097      	b.n	8005ec2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	015a      	lsls	r2, r3, #5
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	4413      	add	r3, r2
 8005d9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	693a      	ldr	r2, [r7, #16]
 8005da2:	0151      	lsls	r1, r2, #5
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	440a      	add	r2, r1
 8005da8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005dac:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005db0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	699b      	ldr	r3, [r3, #24]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	f000 8083 	beq.w	8005ec2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	f003 030f 	and.w	r3, r3, #15
 8005dcc:	2101      	movs	r1, #1
 8005dce:	fa01 f303 	lsl.w	r3, r1, r3
 8005dd2:	6979      	ldr	r1, [r7, #20]
 8005dd4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	634b      	str	r3, [r1, #52]	@ 0x34
 8005ddc:	e071      	b.n	8005ec2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	015a      	lsls	r2, r3, #5
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	4413      	add	r3, r2
 8005de6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	693a      	ldr	r2, [r7, #16]
 8005dee:	0151      	lsls	r1, r2, #5
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	440a      	add	r2, r1
 8005df4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005df8:	0cdb      	lsrs	r3, r3, #19
 8005dfa:	04db      	lsls	r3, r3, #19
 8005dfc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	015a      	lsls	r2, r3, #5
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	4413      	add	r3, r2
 8005e06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	693a      	ldr	r2, [r7, #16]
 8005e0e:	0151      	lsls	r1, r2, #5
 8005e10:	697a      	ldr	r2, [r7, #20]
 8005e12:	440a      	add	r2, r1
 8005e14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e18:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005e1c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005e20:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	699b      	ldr	r3, [r3, #24]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d003      	beq.n	8005e32 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	68da      	ldr	r2, [r3, #12]
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	68da      	ldr	r2, [r3, #12]
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	015a      	lsls	r2, r3, #5
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	4413      	add	r3, r2
 8005e42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	0151      	lsls	r1, r2, #5
 8005e4c:	697a      	ldr	r2, [r7, #20]
 8005e4e:	440a      	add	r2, r1
 8005e50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e54:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005e58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	015a      	lsls	r2, r3, #5
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	4413      	add	r3, r2
 8005e62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e66:	691a      	ldr	r2, [r3, #16]
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	69db      	ldr	r3, [r3, #28]
 8005e6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e70:	6939      	ldr	r1, [r7, #16]
 8005e72:	0148      	lsls	r0, r1, #5
 8005e74:	6979      	ldr	r1, [r7, #20]
 8005e76:	4401      	add	r1, r0
 8005e78:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005e80:	79fb      	ldrb	r3, [r7, #7]
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d10d      	bne.n	8005ea2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d009      	beq.n	8005ea2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	6919      	ldr	r1, [r3, #16]
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	015a      	lsls	r2, r3, #5
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	4413      	add	r3, r2
 8005e9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e9e:	460a      	mov	r2, r1
 8005ea0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	015a      	lsls	r2, r3, #5
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	0151      	lsls	r1, r2, #5
 8005eb4:	697a      	ldr	r2, [r7, #20]
 8005eb6:	440a      	add	r2, r1
 8005eb8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ebc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005ec0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	371c      	adds	r7, #28
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b087      	sub	sp, #28
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005eda:	2300      	movs	r3, #0
 8005edc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	785b      	ldrb	r3, [r3, #1]
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d14a      	bne.n	8005f84 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	015a      	lsls	r2, r3, #5
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f02:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f06:	f040 8086 	bne.w	8006016 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	015a      	lsls	r2, r3, #5
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	4413      	add	r3, r2
 8005f14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	683a      	ldr	r2, [r7, #0]
 8005f1c:	7812      	ldrb	r2, [r2, #0]
 8005f1e:	0151      	lsls	r1, r2, #5
 8005f20:	693a      	ldr	r2, [r7, #16]
 8005f22:	440a      	add	r2, r1
 8005f24:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f28:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005f2c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	015a      	lsls	r2, r3, #5
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	4413      	add	r3, r2
 8005f38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	683a      	ldr	r2, [r7, #0]
 8005f40:	7812      	ldrb	r2, [r2, #0]
 8005f42:	0151      	lsls	r1, r2, #5
 8005f44:	693a      	ldr	r2, [r7, #16]
 8005f46:	440a      	add	r2, r1
 8005f48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f4c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f50:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	3301      	adds	r3, #1
 8005f56:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d902      	bls.n	8005f68 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	75fb      	strb	r3, [r7, #23]
          break;
 8005f66:	e056      	b.n	8006016 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	015a      	lsls	r2, r3, #5
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	4413      	add	r3, r2
 8005f72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f7c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f80:	d0e7      	beq.n	8005f52 <USB_EPStopXfer+0x82>
 8005f82:	e048      	b.n	8006016 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	015a      	lsls	r2, r3, #5
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f98:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f9c:	d13b      	bne.n	8006016 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	015a      	lsls	r2, r3, #5
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	683a      	ldr	r2, [r7, #0]
 8005fb0:	7812      	ldrb	r2, [r2, #0]
 8005fb2:	0151      	lsls	r1, r2, #5
 8005fb4:	693a      	ldr	r2, [r7, #16]
 8005fb6:	440a      	add	r2, r1
 8005fb8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005fbc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005fc0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	015a      	lsls	r2, r3, #5
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	4413      	add	r3, r2
 8005fcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	683a      	ldr	r2, [r7, #0]
 8005fd4:	7812      	ldrb	r2, [r2, #0]
 8005fd6:	0151      	lsls	r1, r2, #5
 8005fd8:	693a      	ldr	r2, [r7, #16]
 8005fda:	440a      	add	r2, r1
 8005fdc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005fe0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005fe4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	3301      	adds	r3, #1
 8005fea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d902      	bls.n	8005ffc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	75fb      	strb	r3, [r7, #23]
          break;
 8005ffa:	e00c      	b.n	8006016 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	015a      	lsls	r2, r3, #5
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	4413      	add	r3, r2
 8006006:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006010:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006014:	d0e7      	beq.n	8005fe6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006016:	7dfb      	ldrb	r3, [r7, #23]
}
 8006018:	4618      	mov	r0, r3
 800601a:	371c      	adds	r7, #28
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006024:	b480      	push	{r7}
 8006026:	b089      	sub	sp, #36	@ 0x24
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	4611      	mov	r1, r2
 8006030:	461a      	mov	r2, r3
 8006032:	460b      	mov	r3, r1
 8006034:	71fb      	strb	r3, [r7, #7]
 8006036:	4613      	mov	r3, r2
 8006038:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006042:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006046:	2b00      	cmp	r3, #0
 8006048:	d123      	bne.n	8006092 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800604a:	88bb      	ldrh	r3, [r7, #4]
 800604c:	3303      	adds	r3, #3
 800604e:	089b      	lsrs	r3, r3, #2
 8006050:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006052:	2300      	movs	r3, #0
 8006054:	61bb      	str	r3, [r7, #24]
 8006056:	e018      	b.n	800608a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006058:	79fb      	ldrb	r3, [r7, #7]
 800605a:	031a      	lsls	r2, r3, #12
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	4413      	add	r3, r2
 8006060:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006064:	461a      	mov	r2, r3
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	3301      	adds	r3, #1
 8006070:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	3301      	adds	r3, #1
 8006076:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	3301      	adds	r3, #1
 800607c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	3301      	adds	r3, #1
 8006082:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	3301      	adds	r3, #1
 8006088:	61bb      	str	r3, [r7, #24]
 800608a:	69ba      	ldr	r2, [r7, #24]
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	429a      	cmp	r2, r3
 8006090:	d3e2      	bcc.n	8006058 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	3724      	adds	r7, #36	@ 0x24
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b08b      	sub	sp, #44	@ 0x2c
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	4613      	mov	r3, r2
 80060ac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80060b6:	88fb      	ldrh	r3, [r7, #6]
 80060b8:	089b      	lsrs	r3, r3, #2
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80060be:	88fb      	ldrh	r3, [r7, #6]
 80060c0:	f003 0303 	and.w	r3, r3, #3
 80060c4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80060c6:	2300      	movs	r3, #0
 80060c8:	623b      	str	r3, [r7, #32]
 80060ca:	e014      	b.n	80060f6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d6:	601a      	str	r2, [r3, #0]
    pDest++;
 80060d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060da:	3301      	adds	r3, #1
 80060dc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80060de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e0:	3301      	adds	r3, #1
 80060e2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80060e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e6:	3301      	adds	r3, #1
 80060e8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80060ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ec:	3301      	adds	r3, #1
 80060ee:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80060f0:	6a3b      	ldr	r3, [r7, #32]
 80060f2:	3301      	adds	r3, #1
 80060f4:	623b      	str	r3, [r7, #32]
 80060f6:	6a3a      	ldr	r2, [r7, #32]
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d3e6      	bcc.n	80060cc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80060fe:	8bfb      	ldrh	r3, [r7, #30]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d01e      	beq.n	8006142 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006104:	2300      	movs	r3, #0
 8006106:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006108:	69bb      	ldr	r3, [r7, #24]
 800610a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800610e:	461a      	mov	r2, r3
 8006110:	f107 0310 	add.w	r3, r7, #16
 8006114:	6812      	ldr	r2, [r2, #0]
 8006116:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006118:	693a      	ldr	r2, [r7, #16]
 800611a:	6a3b      	ldr	r3, [r7, #32]
 800611c:	b2db      	uxtb	r3, r3
 800611e:	00db      	lsls	r3, r3, #3
 8006120:	fa22 f303 	lsr.w	r3, r2, r3
 8006124:	b2da      	uxtb	r2, r3
 8006126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006128:	701a      	strb	r2, [r3, #0]
      i++;
 800612a:	6a3b      	ldr	r3, [r7, #32]
 800612c:	3301      	adds	r3, #1
 800612e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006132:	3301      	adds	r3, #1
 8006134:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006136:	8bfb      	ldrh	r3, [r7, #30]
 8006138:	3b01      	subs	r3, #1
 800613a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800613c:	8bfb      	ldrh	r3, [r7, #30]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d1ea      	bne.n	8006118 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006144:	4618      	mov	r0, r3
 8006146:	372c      	adds	r7, #44	@ 0x2c
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006150:	b480      	push	{r7}
 8006152:	b085      	sub	sp, #20
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	785b      	ldrb	r3, [r3, #1]
 8006168:	2b01      	cmp	r3, #1
 800616a:	d12c      	bne.n	80061c6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	015a      	lsls	r2, r3, #5
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	4413      	add	r3, r2
 8006174:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	db12      	blt.n	80061a4 <USB_EPSetStall+0x54>
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d00f      	beq.n	80061a4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	015a      	lsls	r2, r3, #5
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	4413      	add	r3, r2
 800618c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68ba      	ldr	r2, [r7, #8]
 8006194:	0151      	lsls	r1, r2, #5
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	440a      	add	r2, r1
 800619a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800619e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80061a2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	015a      	lsls	r2, r3, #5
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	4413      	add	r3, r2
 80061ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	68ba      	ldr	r2, [r7, #8]
 80061b4:	0151      	lsls	r1, r2, #5
 80061b6:	68fa      	ldr	r2, [r7, #12]
 80061b8:	440a      	add	r2, r1
 80061ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061be:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80061c2:	6013      	str	r3, [r2, #0]
 80061c4:	e02b      	b.n	800621e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	015a      	lsls	r2, r3, #5
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	4413      	add	r3, r2
 80061ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	db12      	blt.n	80061fe <USB_EPSetStall+0xae>
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00f      	beq.n	80061fe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	015a      	lsls	r2, r3, #5
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	4413      	add	r3, r2
 80061e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	68ba      	ldr	r2, [r7, #8]
 80061ee:	0151      	lsls	r1, r2, #5
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	440a      	add	r2, r1
 80061f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061f8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80061fc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	015a      	lsls	r2, r3, #5
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	4413      	add	r3, r2
 8006206:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68ba      	ldr	r2, [r7, #8]
 800620e:	0151      	lsls	r1, r2, #5
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	440a      	add	r2, r1
 8006214:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006218:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800621c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800621e:	2300      	movs	r3, #0
}
 8006220:	4618      	mov	r0, r3
 8006222:	3714      	adds	r7, #20
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800622c:	b480      	push	{r7}
 800622e:	b085      	sub	sp, #20
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	785b      	ldrb	r3, [r3, #1]
 8006244:	2b01      	cmp	r3, #1
 8006246:	d128      	bne.n	800629a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	015a      	lsls	r2, r3, #5
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	4413      	add	r3, r2
 8006250:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68ba      	ldr	r2, [r7, #8]
 8006258:	0151      	lsls	r1, r2, #5
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	440a      	add	r2, r1
 800625e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006262:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006266:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	791b      	ldrb	r3, [r3, #4]
 800626c:	2b03      	cmp	r3, #3
 800626e:	d003      	beq.n	8006278 <USB_EPClearStall+0x4c>
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	791b      	ldrb	r3, [r3, #4]
 8006274:	2b02      	cmp	r3, #2
 8006276:	d138      	bne.n	80062ea <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	015a      	lsls	r2, r3, #5
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	4413      	add	r3, r2
 8006280:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	68ba      	ldr	r2, [r7, #8]
 8006288:	0151      	lsls	r1, r2, #5
 800628a:	68fa      	ldr	r2, [r7, #12]
 800628c:	440a      	add	r2, r1
 800628e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006292:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006296:	6013      	str	r3, [r2, #0]
 8006298:	e027      	b.n	80062ea <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	015a      	lsls	r2, r3, #5
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	4413      	add	r3, r2
 80062a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	68ba      	ldr	r2, [r7, #8]
 80062aa:	0151      	lsls	r1, r2, #5
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	440a      	add	r2, r1
 80062b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062b4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80062b8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	791b      	ldrb	r3, [r3, #4]
 80062be:	2b03      	cmp	r3, #3
 80062c0:	d003      	beq.n	80062ca <USB_EPClearStall+0x9e>
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	791b      	ldrb	r3, [r3, #4]
 80062c6:	2b02      	cmp	r3, #2
 80062c8:	d10f      	bne.n	80062ea <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	015a      	lsls	r2, r3, #5
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	4413      	add	r3, r2
 80062d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68ba      	ldr	r2, [r7, #8]
 80062da:	0151      	lsls	r1, r2, #5
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	440a      	add	r2, r1
 80062e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062e8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3714      	adds	r7, #20
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b085      	sub	sp, #20
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	460b      	mov	r3, r1
 8006302:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006316:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800631a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	78fb      	ldrb	r3, [r7, #3]
 8006326:	011b      	lsls	r3, r3, #4
 8006328:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800632c:	68f9      	ldr	r1, [r7, #12]
 800632e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006332:	4313      	orrs	r3, r2
 8006334:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006336:	2300      	movs	r3, #0
}
 8006338:	4618      	mov	r0, r3
 800633a:	3714      	adds	r7, #20
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006344:	b480      	push	{r7}
 8006346:	b085      	sub	sp, #20
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	68fa      	ldr	r2, [r7, #12]
 800635a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800635e:	f023 0303 	bic.w	r3, r3, #3
 8006362:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006372:	f023 0302 	bic.w	r3, r3, #2
 8006376:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3714      	adds	r7, #20
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr

08006386 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006386:	b480      	push	{r7}
 8006388:	b085      	sub	sp, #20
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80063a0:	f023 0303 	bic.w	r3, r3, #3
 80063a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80063b4:	f043 0302 	orr.w	r3, r3, #2
 80063b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80063ba:	2300      	movs	r3, #0
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3714      	adds	r7, #20
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	695b      	ldr	r3, [r3, #20]
 80063d4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	4013      	ands	r3, r2
 80063de:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80063e0:	68fb      	ldr	r3, [r7, #12]
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3714      	adds	r7, #20
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr

080063ee <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80063ee:	b480      	push	{r7}
 80063f0:	b085      	sub	sp, #20
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006400:	699b      	ldr	r3, [r3, #24]
 8006402:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800640a:	69db      	ldr	r3, [r3, #28]
 800640c:	68ba      	ldr	r2, [r7, #8]
 800640e:	4013      	ands	r3, r2
 8006410:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	0c1b      	lsrs	r3, r3, #16
}
 8006416:	4618      	mov	r0, r3
 8006418:	3714      	adds	r7, #20
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr

08006422 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006422:	b480      	push	{r7}
 8006424:	b085      	sub	sp, #20
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006434:	699b      	ldr	r3, [r3, #24]
 8006436:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800643e:	69db      	ldr	r3, [r3, #28]
 8006440:	68ba      	ldr	r2, [r7, #8]
 8006442:	4013      	ands	r3, r2
 8006444:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	b29b      	uxth	r3, r3
}
 800644a:	4618      	mov	r0, r3
 800644c:	3714      	adds	r7, #20
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr

08006456 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006456:	b480      	push	{r7}
 8006458:	b085      	sub	sp, #20
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
 800645e:	460b      	mov	r3, r1
 8006460:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006466:	78fb      	ldrb	r3, [r7, #3]
 8006468:	015a      	lsls	r2, r3, #5
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	4413      	add	r3, r2
 800646e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800647c:	695b      	ldr	r3, [r3, #20]
 800647e:	68ba      	ldr	r2, [r7, #8]
 8006480:	4013      	ands	r3, r2
 8006482:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006484:	68bb      	ldr	r3, [r7, #8]
}
 8006486:	4618      	mov	r0, r3
 8006488:	3714      	adds	r7, #20
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr

08006492 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006492:	b480      	push	{r7}
 8006494:	b087      	sub	sp, #28
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
 800649a:	460b      	mov	r3, r1
 800649c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064b4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80064b6:	78fb      	ldrb	r3, [r7, #3]
 80064b8:	f003 030f 	and.w	r3, r3, #15
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	fa22 f303 	lsr.w	r3, r2, r3
 80064c2:	01db      	lsls	r3, r3, #7
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	693a      	ldr	r2, [r7, #16]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80064cc:	78fb      	ldrb	r3, [r7, #3]
 80064ce:	015a      	lsls	r2, r3, #5
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	4413      	add	r3, r2
 80064d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	693a      	ldr	r2, [r7, #16]
 80064dc:	4013      	ands	r3, r2
 80064de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80064e0:	68bb      	ldr	r3, [r7, #8]
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	371c      	adds	r7, #28
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr

080064ee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80064ee:	b480      	push	{r7}
 80064f0:	b083      	sub	sp, #12
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	695b      	ldr	r3, [r3, #20]
 80064fa:	f003 0301 	and.w	r3, r3, #1
}
 80064fe:	4618      	mov	r0, r3
 8006500:	370c      	adds	r7, #12
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr

0800650a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800650a:	b480      	push	{r7}
 800650c:	b085      	sub	sp, #20
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006524:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006528:	f023 0307 	bic.w	r3, r3, #7
 800652c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	68fa      	ldr	r2, [r7, #12]
 8006538:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800653c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006540:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006542:	2300      	movs	r3, #0
}
 8006544:	4618      	mov	r0, r3
 8006546:	3714      	adds	r7, #20
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006550:	b480      	push	{r7}
 8006552:	b087      	sub	sp, #28
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	460b      	mov	r3, r1
 800655a:	607a      	str	r2, [r7, #4]
 800655c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	333c      	adds	r3, #60	@ 0x3c
 8006566:	3304      	adds	r3, #4
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	4a26      	ldr	r2, [pc, #152]	@ (8006608 <USB_EP0_OutStart+0xb8>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d90a      	bls.n	800658a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006580:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006584:	d101      	bne.n	800658a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006586:	2300      	movs	r3, #0
 8006588:	e037      	b.n	80065fa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006590:	461a      	mov	r2, r3
 8006592:	2300      	movs	r3, #0
 8006594:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	697a      	ldr	r2, [r7, #20]
 80065a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065a4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80065a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	697a      	ldr	r2, [r7, #20]
 80065b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065b8:	f043 0318 	orr.w	r3, r3, #24
 80065bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	697a      	ldr	r2, [r7, #20]
 80065c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065cc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80065d0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80065d2:	7afb      	ldrb	r3, [r7, #11]
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d10f      	bne.n	80065f8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065de:	461a      	mov	r2, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	697a      	ldr	r2, [r7, #20]
 80065ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065f2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80065f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80065f8:	2300      	movs	r3, #0
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	371c      	adds	r7, #28
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr
 8006606:	bf00      	nop
 8006608:	4f54300a 	.word	0x4f54300a

0800660c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800660c:	b480      	push	{r7}
 800660e:	b085      	sub	sp, #20
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006614:	2300      	movs	r3, #0
 8006616:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	3301      	adds	r3, #1
 800661c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	4a13      	ldr	r2, [pc, #76]	@ (8006670 <USB_CoreReset+0x64>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d901      	bls.n	800662a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006626:	2303      	movs	r3, #3
 8006628:	e01b      	b.n	8006662 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	2b00      	cmp	r3, #0
 8006630:	daf2      	bge.n	8006618 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006632:	2300      	movs	r3, #0
 8006634:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	f043 0201 	orr.w	r2, r3, #1
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	3301      	adds	r3, #1
 8006646:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	4a09      	ldr	r2, [pc, #36]	@ (8006670 <USB_CoreReset+0x64>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d901      	bls.n	8006654 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006650:	2303      	movs	r3, #3
 8006652:	e006      	b.n	8006662 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	f003 0301 	and.w	r3, r3, #1
 800665c:	2b01      	cmp	r3, #1
 800665e:	d0f0      	beq.n	8006642 <USB_CoreReset+0x36>

  return HAL_OK;
 8006660:	2300      	movs	r3, #0
}
 8006662:	4618      	mov	r0, r3
 8006664:	3714      	adds	r7, #20
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr
 800666e:	bf00      	nop
 8006670:	00030d40 	.word	0x00030d40

08006674 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b084      	sub	sp, #16
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	460b      	mov	r3, r1
 800667e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006680:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006684:	f002 fca0 	bl	8008fc8 <USBD_static_malloc>
 8006688:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d109      	bne.n	80066a4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	32b0      	adds	r2, #176	@ 0xb0
 800669a:	2100      	movs	r1, #0
 800669c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80066a0:	2302      	movs	r3, #2
 80066a2:	e0d4      	b.n	800684e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80066a4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80066a8:	2100      	movs	r1, #0
 80066aa:	68f8      	ldr	r0, [r7, #12]
 80066ac:	f002 fcf0 	bl	8009090 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	32b0      	adds	r2, #176	@ 0xb0
 80066ba:	68f9      	ldr	r1, [r7, #12]
 80066bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	32b0      	adds	r2, #176	@ 0xb0
 80066ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	7c1b      	ldrb	r3, [r3, #16]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d138      	bne.n	800674e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80066dc:	4b5e      	ldr	r3, [pc, #376]	@ (8006858 <USBD_CDC_Init+0x1e4>)
 80066de:	7819      	ldrb	r1, [r3, #0]
 80066e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80066e4:	2202      	movs	r2, #2
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f002 fb4b 	bl	8008d82 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80066ec:	4b5a      	ldr	r3, [pc, #360]	@ (8006858 <USBD_CDC_Init+0x1e4>)
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	f003 020f 	and.w	r2, r3, #15
 80066f4:	6879      	ldr	r1, [r7, #4]
 80066f6:	4613      	mov	r3, r2
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	4413      	add	r3, r2
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	440b      	add	r3, r1
 8006700:	3324      	adds	r3, #36	@ 0x24
 8006702:	2201      	movs	r2, #1
 8006704:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006706:	4b55      	ldr	r3, [pc, #340]	@ (800685c <USBD_CDC_Init+0x1e8>)
 8006708:	7819      	ldrb	r1, [r3, #0]
 800670a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800670e:	2202      	movs	r2, #2
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f002 fb36 	bl	8008d82 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006716:	4b51      	ldr	r3, [pc, #324]	@ (800685c <USBD_CDC_Init+0x1e8>)
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	f003 020f 	and.w	r2, r3, #15
 800671e:	6879      	ldr	r1, [r7, #4]
 8006720:	4613      	mov	r3, r2
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	4413      	add	r3, r2
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	440b      	add	r3, r1
 800672a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800672e:	2201      	movs	r2, #1
 8006730:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006732:	4b4b      	ldr	r3, [pc, #300]	@ (8006860 <USBD_CDC_Init+0x1ec>)
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	f003 020f 	and.w	r2, r3, #15
 800673a:	6879      	ldr	r1, [r7, #4]
 800673c:	4613      	mov	r3, r2
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	4413      	add	r3, r2
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	440b      	add	r3, r1
 8006746:	3326      	adds	r3, #38	@ 0x26
 8006748:	2210      	movs	r2, #16
 800674a:	801a      	strh	r2, [r3, #0]
 800674c:	e035      	b.n	80067ba <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800674e:	4b42      	ldr	r3, [pc, #264]	@ (8006858 <USBD_CDC_Init+0x1e4>)
 8006750:	7819      	ldrb	r1, [r3, #0]
 8006752:	2340      	movs	r3, #64	@ 0x40
 8006754:	2202      	movs	r2, #2
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f002 fb13 	bl	8008d82 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800675c:	4b3e      	ldr	r3, [pc, #248]	@ (8006858 <USBD_CDC_Init+0x1e4>)
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	f003 020f 	and.w	r2, r3, #15
 8006764:	6879      	ldr	r1, [r7, #4]
 8006766:	4613      	mov	r3, r2
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	4413      	add	r3, r2
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	440b      	add	r3, r1
 8006770:	3324      	adds	r3, #36	@ 0x24
 8006772:	2201      	movs	r2, #1
 8006774:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006776:	4b39      	ldr	r3, [pc, #228]	@ (800685c <USBD_CDC_Init+0x1e8>)
 8006778:	7819      	ldrb	r1, [r3, #0]
 800677a:	2340      	movs	r3, #64	@ 0x40
 800677c:	2202      	movs	r2, #2
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f002 faff 	bl	8008d82 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006784:	4b35      	ldr	r3, [pc, #212]	@ (800685c <USBD_CDC_Init+0x1e8>)
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	f003 020f 	and.w	r2, r3, #15
 800678c:	6879      	ldr	r1, [r7, #4]
 800678e:	4613      	mov	r3, r2
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	4413      	add	r3, r2
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	440b      	add	r3, r1
 8006798:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800679c:	2201      	movs	r2, #1
 800679e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80067a0:	4b2f      	ldr	r3, [pc, #188]	@ (8006860 <USBD_CDC_Init+0x1ec>)
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	f003 020f 	and.w	r2, r3, #15
 80067a8:	6879      	ldr	r1, [r7, #4]
 80067aa:	4613      	mov	r3, r2
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	4413      	add	r3, r2
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	440b      	add	r3, r1
 80067b4:	3326      	adds	r3, #38	@ 0x26
 80067b6:	2210      	movs	r2, #16
 80067b8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80067ba:	4b29      	ldr	r3, [pc, #164]	@ (8006860 <USBD_CDC_Init+0x1ec>)
 80067bc:	7819      	ldrb	r1, [r3, #0]
 80067be:	2308      	movs	r3, #8
 80067c0:	2203      	movs	r2, #3
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f002 fadd 	bl	8008d82 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80067c8:	4b25      	ldr	r3, [pc, #148]	@ (8006860 <USBD_CDC_Init+0x1ec>)
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	f003 020f 	and.w	r2, r3, #15
 80067d0:	6879      	ldr	r1, [r7, #4]
 80067d2:	4613      	mov	r3, r2
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	4413      	add	r3, r2
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	440b      	add	r3, r1
 80067dc:	3324      	adds	r3, #36	@ 0x24
 80067de:	2201      	movs	r2, #1
 80067e0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	33b0      	adds	r3, #176	@ 0xb0
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	4413      	add	r3, r2
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2200      	movs	r2, #0
 8006802:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2200      	movs	r2, #0
 800680a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006814:	2b00      	cmp	r3, #0
 8006816:	d101      	bne.n	800681c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006818:	2302      	movs	r3, #2
 800681a:	e018      	b.n	800684e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	7c1b      	ldrb	r3, [r3, #16]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d10a      	bne.n	800683a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006824:	4b0d      	ldr	r3, [pc, #52]	@ (800685c <USBD_CDC_Init+0x1e8>)
 8006826:	7819      	ldrb	r1, [r3, #0]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800682e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f002 fb94 	bl	8008f60 <USBD_LL_PrepareReceive>
 8006838:	e008      	b.n	800684c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800683a:	4b08      	ldr	r3, [pc, #32]	@ (800685c <USBD_CDC_Init+0x1e8>)
 800683c:	7819      	ldrb	r1, [r3, #0]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006844:	2340      	movs	r3, #64	@ 0x40
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f002 fb8a 	bl	8008f60 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800684c:	2300      	movs	r3, #0
}
 800684e:	4618      	mov	r0, r3
 8006850:	3710      	adds	r7, #16
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	20000093 	.word	0x20000093
 800685c:	20000094 	.word	0x20000094
 8006860:	20000095 	.word	0x20000095

08006864 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	460b      	mov	r3, r1
 800686e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006870:	4b3a      	ldr	r3, [pc, #232]	@ (800695c <USBD_CDC_DeInit+0xf8>)
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	4619      	mov	r1, r3
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f002 faa9 	bl	8008dce <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800687c:	4b37      	ldr	r3, [pc, #220]	@ (800695c <USBD_CDC_DeInit+0xf8>)
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	f003 020f 	and.w	r2, r3, #15
 8006884:	6879      	ldr	r1, [r7, #4]
 8006886:	4613      	mov	r3, r2
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	4413      	add	r3, r2
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	440b      	add	r3, r1
 8006890:	3324      	adds	r3, #36	@ 0x24
 8006892:	2200      	movs	r2, #0
 8006894:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006896:	4b32      	ldr	r3, [pc, #200]	@ (8006960 <USBD_CDC_DeInit+0xfc>)
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	4619      	mov	r1, r3
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f002 fa96 	bl	8008dce <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80068a2:	4b2f      	ldr	r3, [pc, #188]	@ (8006960 <USBD_CDC_DeInit+0xfc>)
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	f003 020f 	and.w	r2, r3, #15
 80068aa:	6879      	ldr	r1, [r7, #4]
 80068ac:	4613      	mov	r3, r2
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	4413      	add	r3, r2
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	440b      	add	r3, r1
 80068b6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80068ba:	2200      	movs	r2, #0
 80068bc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80068be:	4b29      	ldr	r3, [pc, #164]	@ (8006964 <USBD_CDC_DeInit+0x100>)
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	4619      	mov	r1, r3
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f002 fa82 	bl	8008dce <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80068ca:	4b26      	ldr	r3, [pc, #152]	@ (8006964 <USBD_CDC_DeInit+0x100>)
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	f003 020f 	and.w	r2, r3, #15
 80068d2:	6879      	ldr	r1, [r7, #4]
 80068d4:	4613      	mov	r3, r2
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	4413      	add	r3, r2
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	440b      	add	r3, r1
 80068de:	3324      	adds	r3, #36	@ 0x24
 80068e0:	2200      	movs	r2, #0
 80068e2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80068e4:	4b1f      	ldr	r3, [pc, #124]	@ (8006964 <USBD_CDC_DeInit+0x100>)
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	f003 020f 	and.w	r2, r3, #15
 80068ec:	6879      	ldr	r1, [r7, #4]
 80068ee:	4613      	mov	r3, r2
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	4413      	add	r3, r2
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	440b      	add	r3, r1
 80068f8:	3326      	adds	r3, #38	@ 0x26
 80068fa:	2200      	movs	r2, #0
 80068fc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	32b0      	adds	r2, #176	@ 0xb0
 8006908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d01f      	beq.n	8006950 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	33b0      	adds	r3, #176	@ 0xb0
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	4413      	add	r3, r2
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	32b0      	adds	r2, #176	@ 0xb0
 800692e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006932:	4618      	mov	r0, r3
 8006934:	f002 fb56 	bl	8008fe4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	32b0      	adds	r2, #176	@ 0xb0
 8006942:	2100      	movs	r1, #0
 8006944:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006950:	2300      	movs	r3, #0
}
 8006952:	4618      	mov	r0, r3
 8006954:	3708      	adds	r7, #8
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	20000093 	.word	0x20000093
 8006960:	20000094 	.word	0x20000094
 8006964:	20000095 	.word	0x20000095

08006968 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b086      	sub	sp, #24
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	32b0      	adds	r2, #176	@ 0xb0
 800697c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006980:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006982:	2300      	movs	r3, #0
 8006984:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006986:	2300      	movs	r3, #0
 8006988:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800698a:	2300      	movs	r3, #0
 800698c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d101      	bne.n	8006998 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006994:	2303      	movs	r3, #3
 8006996:	e0bf      	b.n	8006b18 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d050      	beq.n	8006a46 <USBD_CDC_Setup+0xde>
 80069a4:	2b20      	cmp	r3, #32
 80069a6:	f040 80af 	bne.w	8006b08 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	88db      	ldrh	r3, [r3, #6]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d03a      	beq.n	8006a28 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	b25b      	sxtb	r3, r3
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	da1b      	bge.n	80069f4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	33b0      	adds	r3, #176	@ 0xb0
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	4413      	add	r3, r2
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	683a      	ldr	r2, [r7, #0]
 80069d0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80069d2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80069d4:	683a      	ldr	r2, [r7, #0]
 80069d6:	88d2      	ldrh	r2, [r2, #6]
 80069d8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	88db      	ldrh	r3, [r3, #6]
 80069de:	2b07      	cmp	r3, #7
 80069e0:	bf28      	it	cs
 80069e2:	2307      	movcs	r3, #7
 80069e4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	89fa      	ldrh	r2, [r7, #14]
 80069ea:	4619      	mov	r1, r3
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f001 fd87 	bl	8008500 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80069f2:	e090      	b.n	8006b16 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	785a      	ldrb	r2, [r3, #1]
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	88db      	ldrh	r3, [r3, #6]
 8006a02:	2b3f      	cmp	r3, #63	@ 0x3f
 8006a04:	d803      	bhi.n	8006a0e <USBD_CDC_Setup+0xa6>
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	88db      	ldrh	r3, [r3, #6]
 8006a0a:	b2da      	uxtb	r2, r3
 8006a0c:	e000      	b.n	8006a10 <USBD_CDC_Setup+0xa8>
 8006a0e:	2240      	movs	r2, #64	@ 0x40
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006a16:	6939      	ldr	r1, [r7, #16]
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006a1e:	461a      	mov	r2, r3
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f001 fd99 	bl	8008558 <USBD_CtlPrepareRx>
      break;
 8006a26:	e076      	b.n	8006b16 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	33b0      	adds	r3, #176	@ 0xb0
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	4413      	add	r3, r2
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	683a      	ldr	r2, [r7, #0]
 8006a3c:	7850      	ldrb	r0, [r2, #1]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	6839      	ldr	r1, [r7, #0]
 8006a42:	4798      	blx	r3
      break;
 8006a44:	e067      	b.n	8006b16 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	785b      	ldrb	r3, [r3, #1]
 8006a4a:	2b0b      	cmp	r3, #11
 8006a4c:	d851      	bhi.n	8006af2 <USBD_CDC_Setup+0x18a>
 8006a4e:	a201      	add	r2, pc, #4	@ (adr r2, 8006a54 <USBD_CDC_Setup+0xec>)
 8006a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a54:	08006a85 	.word	0x08006a85
 8006a58:	08006b01 	.word	0x08006b01
 8006a5c:	08006af3 	.word	0x08006af3
 8006a60:	08006af3 	.word	0x08006af3
 8006a64:	08006af3 	.word	0x08006af3
 8006a68:	08006af3 	.word	0x08006af3
 8006a6c:	08006af3 	.word	0x08006af3
 8006a70:	08006af3 	.word	0x08006af3
 8006a74:	08006af3 	.word	0x08006af3
 8006a78:	08006af3 	.word	0x08006af3
 8006a7c:	08006aaf 	.word	0x08006aaf
 8006a80:	08006ad9 	.word	0x08006ad9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	2b03      	cmp	r3, #3
 8006a8e:	d107      	bne.n	8006aa0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006a90:	f107 030a 	add.w	r3, r7, #10
 8006a94:	2202      	movs	r2, #2
 8006a96:	4619      	mov	r1, r3
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f001 fd31 	bl	8008500 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a9e:	e032      	b.n	8006b06 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006aa0:	6839      	ldr	r1, [r7, #0]
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f001 fcbb 	bl	800841e <USBD_CtlError>
            ret = USBD_FAIL;
 8006aa8:	2303      	movs	r3, #3
 8006aaa:	75fb      	strb	r3, [r7, #23]
          break;
 8006aac:	e02b      	b.n	8006b06 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	2b03      	cmp	r3, #3
 8006ab8:	d107      	bne.n	8006aca <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006aba:	f107 030d 	add.w	r3, r7, #13
 8006abe:	2201      	movs	r2, #1
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f001 fd1c 	bl	8008500 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ac8:	e01d      	b.n	8006b06 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006aca:	6839      	ldr	r1, [r7, #0]
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f001 fca6 	bl	800841e <USBD_CtlError>
            ret = USBD_FAIL;
 8006ad2:	2303      	movs	r3, #3
 8006ad4:	75fb      	strb	r3, [r7, #23]
          break;
 8006ad6:	e016      	b.n	8006b06 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	2b03      	cmp	r3, #3
 8006ae2:	d00f      	beq.n	8006b04 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006ae4:	6839      	ldr	r1, [r7, #0]
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f001 fc99 	bl	800841e <USBD_CtlError>
            ret = USBD_FAIL;
 8006aec:	2303      	movs	r3, #3
 8006aee:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006af0:	e008      	b.n	8006b04 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006af2:	6839      	ldr	r1, [r7, #0]
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f001 fc92 	bl	800841e <USBD_CtlError>
          ret = USBD_FAIL;
 8006afa:	2303      	movs	r3, #3
 8006afc:	75fb      	strb	r3, [r7, #23]
          break;
 8006afe:	e002      	b.n	8006b06 <USBD_CDC_Setup+0x19e>
          break;
 8006b00:	bf00      	nop
 8006b02:	e008      	b.n	8006b16 <USBD_CDC_Setup+0x1ae>
          break;
 8006b04:	bf00      	nop
      }
      break;
 8006b06:	e006      	b.n	8006b16 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006b08:	6839      	ldr	r1, [r7, #0]
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f001 fc87 	bl	800841e <USBD_CtlError>
      ret = USBD_FAIL;
 8006b10:	2303      	movs	r3, #3
 8006b12:	75fb      	strb	r3, [r7, #23]
      break;
 8006b14:	bf00      	nop
  }

  return (uint8_t)ret;
 8006b16:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3718      	adds	r7, #24
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	460b      	mov	r3, r1
 8006b2a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006b32:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	32b0      	adds	r2, #176	@ 0xb0
 8006b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d101      	bne.n	8006b4a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006b46:	2303      	movs	r3, #3
 8006b48:	e065      	b.n	8006c16 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	32b0      	adds	r2, #176	@ 0xb0
 8006b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b58:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006b5a:	78fb      	ldrb	r3, [r7, #3]
 8006b5c:	f003 020f 	and.w	r2, r3, #15
 8006b60:	6879      	ldr	r1, [r7, #4]
 8006b62:	4613      	mov	r3, r2
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	4413      	add	r3, r2
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	440b      	add	r3, r1
 8006b6c:	3318      	adds	r3, #24
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d02f      	beq.n	8006bd4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006b74:	78fb      	ldrb	r3, [r7, #3]
 8006b76:	f003 020f 	and.w	r2, r3, #15
 8006b7a:	6879      	ldr	r1, [r7, #4]
 8006b7c:	4613      	mov	r3, r2
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	4413      	add	r3, r2
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	440b      	add	r3, r1
 8006b86:	3318      	adds	r3, #24
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	78fb      	ldrb	r3, [r7, #3]
 8006b8c:	f003 010f 	and.w	r1, r3, #15
 8006b90:	68f8      	ldr	r0, [r7, #12]
 8006b92:	460b      	mov	r3, r1
 8006b94:	00db      	lsls	r3, r3, #3
 8006b96:	440b      	add	r3, r1
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	4403      	add	r3, r0
 8006b9c:	3348      	adds	r3, #72	@ 0x48
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	fbb2 f1f3 	udiv	r1, r2, r3
 8006ba4:	fb01 f303 	mul.w	r3, r1, r3
 8006ba8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d112      	bne.n	8006bd4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006bae:	78fb      	ldrb	r3, [r7, #3]
 8006bb0:	f003 020f 	and.w	r2, r3, #15
 8006bb4:	6879      	ldr	r1, [r7, #4]
 8006bb6:	4613      	mov	r3, r2
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	4413      	add	r3, r2
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	440b      	add	r3, r1
 8006bc0:	3318      	adds	r3, #24
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006bc6:	78f9      	ldrb	r1, [r7, #3]
 8006bc8:	2300      	movs	r3, #0
 8006bca:	2200      	movs	r2, #0
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f002 f9a6 	bl	8008f1e <USBD_LL_Transmit>
 8006bd2:	e01f      	b.n	8006c14 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	33b0      	adds	r3, #176	@ 0xb0
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	4413      	add	r3, r2
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d010      	beq.n	8006c14 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	33b0      	adds	r3, #176	@ 0xb0
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	4413      	add	r3, r2
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	68ba      	ldr	r2, [r7, #8]
 8006c06:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006c0a:	68ba      	ldr	r2, [r7, #8]
 8006c0c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006c10:	78fa      	ldrb	r2, [r7, #3]
 8006c12:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3710      	adds	r7, #16
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}

08006c1e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006c1e:	b580      	push	{r7, lr}
 8006c20:	b084      	sub	sp, #16
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
 8006c26:	460b      	mov	r3, r1
 8006c28:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	32b0      	adds	r2, #176	@ 0xb0
 8006c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c38:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	32b0      	adds	r2, #176	@ 0xb0
 8006c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d101      	bne.n	8006c50 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006c4c:	2303      	movs	r3, #3
 8006c4e:	e01a      	b.n	8006c86 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006c50:	78fb      	ldrb	r3, [r7, #3]
 8006c52:	4619      	mov	r1, r3
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f002 f9a4 	bl	8008fa2 <USBD_LL_GetRxDataSize>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	33b0      	adds	r3, #176	@ 0xb0
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	4413      	add	r3, r2
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	68fa      	ldr	r2, [r7, #12]
 8006c76:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006c80:	4611      	mov	r1, r2
 8006c82:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3710      	adds	r7, #16
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}

08006c8e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006c8e:	b580      	push	{r7, lr}
 8006c90:	b084      	sub	sp, #16
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	32b0      	adds	r2, #176	@ 0xb0
 8006ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ca4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d101      	bne.n	8006cb0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006cac:	2303      	movs	r3, #3
 8006cae:	e024      	b.n	8006cfa <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	33b0      	adds	r3, #176	@ 0xb0
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	4413      	add	r3, r2
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d019      	beq.n	8006cf8 <USBD_CDC_EP0_RxReady+0x6a>
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006cca:	2bff      	cmp	r3, #255	@ 0xff
 8006ccc:	d014      	beq.n	8006cf8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	33b0      	adds	r3, #176	@ 0xb0
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	4413      	add	r3, r2
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	68fa      	ldr	r2, [r7, #12]
 8006ce2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8006ce6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006ce8:	68fa      	ldr	r2, [r7, #12]
 8006cea:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006cee:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	22ff      	movs	r2, #255	@ 0xff
 8006cf4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3710      	adds	r7, #16
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
	...

08006d04 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b086      	sub	sp, #24
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006d0c:	2182      	movs	r1, #130	@ 0x82
 8006d0e:	4818      	ldr	r0, [pc, #96]	@ (8006d70 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006d10:	f000 fd4f 	bl	80077b2 <USBD_GetEpDesc>
 8006d14:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006d16:	2101      	movs	r1, #1
 8006d18:	4815      	ldr	r0, [pc, #84]	@ (8006d70 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006d1a:	f000 fd4a 	bl	80077b2 <USBD_GetEpDesc>
 8006d1e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006d20:	2181      	movs	r1, #129	@ 0x81
 8006d22:	4813      	ldr	r0, [pc, #76]	@ (8006d70 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006d24:	f000 fd45 	bl	80077b2 <USBD_GetEpDesc>
 8006d28:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d002      	beq.n	8006d36 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	2210      	movs	r2, #16
 8006d34:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d006      	beq.n	8006d4a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d44:	711a      	strb	r2, [r3, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d006      	beq.n	8006d5e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d58:	711a      	strb	r2, [r3, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2243      	movs	r2, #67	@ 0x43
 8006d62:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006d64:	4b02      	ldr	r3, [pc, #8]	@ (8006d70 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3718      	adds	r7, #24
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	bf00      	nop
 8006d70:	20000050 	.word	0x20000050

08006d74 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b086      	sub	sp, #24
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006d7c:	2182      	movs	r1, #130	@ 0x82
 8006d7e:	4818      	ldr	r0, [pc, #96]	@ (8006de0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006d80:	f000 fd17 	bl	80077b2 <USBD_GetEpDesc>
 8006d84:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006d86:	2101      	movs	r1, #1
 8006d88:	4815      	ldr	r0, [pc, #84]	@ (8006de0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006d8a:	f000 fd12 	bl	80077b2 <USBD_GetEpDesc>
 8006d8e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006d90:	2181      	movs	r1, #129	@ 0x81
 8006d92:	4813      	ldr	r0, [pc, #76]	@ (8006de0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006d94:	f000 fd0d 	bl	80077b2 <USBD_GetEpDesc>
 8006d98:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d002      	beq.n	8006da6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	2210      	movs	r2, #16
 8006da4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d006      	beq.n	8006dba <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	2200      	movs	r2, #0
 8006db0:	711a      	strb	r2, [r3, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f042 0202 	orr.w	r2, r2, #2
 8006db8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d006      	beq.n	8006dce <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	711a      	strb	r2, [r3, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f042 0202 	orr.w	r2, r2, #2
 8006dcc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2243      	movs	r2, #67	@ 0x43
 8006dd2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006dd4:	4b02      	ldr	r3, [pc, #8]	@ (8006de0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3718      	adds	r7, #24
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	20000050 	.word	0x20000050

08006de4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b086      	sub	sp, #24
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006dec:	2182      	movs	r1, #130	@ 0x82
 8006dee:	4818      	ldr	r0, [pc, #96]	@ (8006e50 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006df0:	f000 fcdf 	bl	80077b2 <USBD_GetEpDesc>
 8006df4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006df6:	2101      	movs	r1, #1
 8006df8:	4815      	ldr	r0, [pc, #84]	@ (8006e50 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006dfa:	f000 fcda 	bl	80077b2 <USBD_GetEpDesc>
 8006dfe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006e00:	2181      	movs	r1, #129	@ 0x81
 8006e02:	4813      	ldr	r0, [pc, #76]	@ (8006e50 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006e04:	f000 fcd5 	bl	80077b2 <USBD_GetEpDesc>
 8006e08:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d002      	beq.n	8006e16 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	2210      	movs	r2, #16
 8006e14:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d006      	beq.n	8006e2a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006e24:	711a      	strb	r2, [r3, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d006      	beq.n	8006e3e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006e38:	711a      	strb	r2, [r3, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2243      	movs	r2, #67	@ 0x43
 8006e42:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006e44:	4b02      	ldr	r3, [pc, #8]	@ (8006e50 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3718      	adds	r7, #24
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	20000050 	.word	0x20000050

08006e54 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	220a      	movs	r2, #10
 8006e60:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006e62:	4b03      	ldr	r3, [pc, #12]	@ (8006e70 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr
 8006e70:	2000000c 	.word	0x2000000c

08006e74 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b083      	sub	sp, #12
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d101      	bne.n	8006e88 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006e84:	2303      	movs	r3, #3
 8006e86:	e009      	b.n	8006e9c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	33b0      	adds	r3, #176	@ 0xb0
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	4413      	add	r3, r2
 8006e96:	683a      	ldr	r2, [r7, #0]
 8006e98:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	370c      	adds	r7, #12
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b087      	sub	sp, #28
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	32b0      	adds	r2, #176	@ 0xb0
 8006ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ec2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d101      	bne.n	8006ece <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006eca:	2303      	movs	r3, #3
 8006ecc:	e008      	b.n	8006ee0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	68ba      	ldr	r2, [r7, #8]
 8006ed2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	371c      	adds	r7, #28
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b085      	sub	sp, #20
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	32b0      	adds	r2, #176	@ 0xb0
 8006f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f04:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d101      	bne.n	8006f10 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006f0c:	2303      	movs	r3, #3
 8006f0e:	e004      	b.n	8006f1a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	683a      	ldr	r2, [r7, #0]
 8006f14:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006f18:	2300      	movs	r3, #0
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3714      	adds	r7, #20
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr
	...

08006f28 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	32b0      	adds	r2, #176	@ 0xb0
 8006f3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f3e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006f40:	2301      	movs	r3, #1
 8006f42:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	32b0      	adds	r2, #176	@ 0xb0
 8006f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d101      	bne.n	8006f5a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006f56:	2303      	movs	r3, #3
 8006f58:	e025      	b.n	8006fa6 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d11f      	bne.n	8006fa4 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	2201      	movs	r2, #1
 8006f68:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006f6c:	4b10      	ldr	r3, [pc, #64]	@ (8006fb0 <USBD_CDC_TransmitPacket+0x88>)
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	f003 020f 	and.w	r2, r3, #15
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	4613      	mov	r3, r2
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	4413      	add	r3, r2
 8006f82:	009b      	lsls	r3, r3, #2
 8006f84:	4403      	add	r3, r0
 8006f86:	3318      	adds	r3, #24
 8006f88:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006f8a:	4b09      	ldr	r3, [pc, #36]	@ (8006fb0 <USBD_CDC_TransmitPacket+0x88>)
 8006f8c:	7819      	ldrb	r1, [r3, #0]
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f001 ffbf 	bl	8008f1e <USBD_LL_Transmit>

    ret = USBD_OK;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3710      	adds	r7, #16
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	20000093 	.word	0x20000093

08006fb4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	32b0      	adds	r2, #176	@ 0xb0
 8006fc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fca:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	32b0      	adds	r2, #176	@ 0xb0
 8006fd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d101      	bne.n	8006fe2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006fde:	2303      	movs	r3, #3
 8006fe0:	e018      	b.n	8007014 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	7c1b      	ldrb	r3, [r3, #16]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d10a      	bne.n	8007000 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006fea:	4b0c      	ldr	r3, [pc, #48]	@ (800701c <USBD_CDC_ReceivePacket+0x68>)
 8006fec:	7819      	ldrb	r1, [r3, #0]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006ff4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f001 ffb1 	bl	8008f60 <USBD_LL_PrepareReceive>
 8006ffe:	e008      	b.n	8007012 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007000:	4b06      	ldr	r3, [pc, #24]	@ (800701c <USBD_CDC_ReceivePacket+0x68>)
 8007002:	7819      	ldrb	r1, [r3, #0]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800700a:	2340      	movs	r3, #64	@ 0x40
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f001 ffa7 	bl	8008f60 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007012:	2300      	movs	r3, #0
}
 8007014:	4618      	mov	r0, r3
 8007016:	3710      	adds	r7, #16
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}
 800701c:	20000094 	.word	0x20000094

08007020 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b086      	sub	sp, #24
 8007024:	af00      	add	r7, sp, #0
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	60b9      	str	r1, [r7, #8]
 800702a:	4613      	mov	r3, r2
 800702c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d101      	bne.n	8007038 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007034:	2303      	movs	r3, #3
 8007036:	e01f      	b.n	8007078 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2200      	movs	r2, #0
 800703c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2200      	movs	r2, #0
 8007044:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2200      	movs	r2, #0
 800704c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d003      	beq.n	800705e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	68ba      	ldr	r2, [r7, #8]
 800705a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2201      	movs	r2, #1
 8007062:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	79fa      	ldrb	r2, [r7, #7]
 800706a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800706c:	68f8      	ldr	r0, [r7, #12]
 800706e:	f001 fe21 	bl	8008cb4 <USBD_LL_Init>
 8007072:	4603      	mov	r3, r0
 8007074:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007076:	7dfb      	ldrb	r3, [r7, #23]
}
 8007078:	4618      	mov	r0, r3
 800707a:	3718      	adds	r7, #24
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800708a:	2300      	movs	r3, #0
 800708c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d101      	bne.n	8007098 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007094:	2303      	movs	r3, #3
 8007096:	e025      	b.n	80070e4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	683a      	ldr	r2, [r7, #0]
 800709c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	32ae      	adds	r2, #174	@ 0xae
 80070aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d00f      	beq.n	80070d4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	32ae      	adds	r2, #174	@ 0xae
 80070be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070c4:	f107 020e 	add.w	r2, r7, #14
 80070c8:	4610      	mov	r0, r2
 80070ca:	4798      	blx	r3
 80070cc:	4602      	mov	r2, r0
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80070da:	1c5a      	adds	r2, r3, #1
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3710      	adds	r7, #16
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b082      	sub	sp, #8
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f001 fe29 	bl	8008d4c <USBD_LL_Start>
 80070fa:	4603      	mov	r3, r0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3708      	adds	r7, #8
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800710c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800710e:	4618      	mov	r0, r3
 8007110:	370c      	adds	r7, #12
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr

0800711a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800711a:	b580      	push	{r7, lr}
 800711c:	b084      	sub	sp, #16
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
 8007122:	460b      	mov	r3, r1
 8007124:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007126:	2300      	movs	r3, #0
 8007128:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007130:	2b00      	cmp	r3, #0
 8007132:	d009      	beq.n	8007148 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	78fa      	ldrb	r2, [r7, #3]
 800713e:	4611      	mov	r1, r2
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	4798      	blx	r3
 8007144:	4603      	mov	r3, r0
 8007146:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007148:	7bfb      	ldrb	r3, [r7, #15]
}
 800714a:	4618      	mov	r0, r3
 800714c:	3710      	adds	r7, #16
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}

08007152 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007152:	b580      	push	{r7, lr}
 8007154:	b084      	sub	sp, #16
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
 800715a:	460b      	mov	r3, r1
 800715c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800715e:	2300      	movs	r3, #0
 8007160:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	78fa      	ldrb	r2, [r7, #3]
 800716c:	4611      	mov	r1, r2
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	4798      	blx	r3
 8007172:	4603      	mov	r3, r0
 8007174:	2b00      	cmp	r3, #0
 8007176:	d001      	beq.n	800717c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007178:	2303      	movs	r3, #3
 800717a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800717c:	7bfb      	ldrb	r3, [r7, #15]
}
 800717e:	4618      	mov	r0, r3
 8007180:	3710      	adds	r7, #16
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}

08007186 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007186:	b580      	push	{r7, lr}
 8007188:	b084      	sub	sp, #16
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
 800718e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007196:	6839      	ldr	r1, [r7, #0]
 8007198:	4618      	mov	r0, r3
 800719a:	f001 f906 	bl	80083aa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2201      	movs	r2, #1
 80071a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80071ac:	461a      	mov	r2, r3
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80071ba:	f003 031f 	and.w	r3, r3, #31
 80071be:	2b02      	cmp	r3, #2
 80071c0:	d01a      	beq.n	80071f8 <USBD_LL_SetupStage+0x72>
 80071c2:	2b02      	cmp	r3, #2
 80071c4:	d822      	bhi.n	800720c <USBD_LL_SetupStage+0x86>
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d002      	beq.n	80071d0 <USBD_LL_SetupStage+0x4a>
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d00a      	beq.n	80071e4 <USBD_LL_SetupStage+0x5e>
 80071ce:	e01d      	b.n	800720c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80071d6:	4619      	mov	r1, r3
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 fb5d 	bl	8007898 <USBD_StdDevReq>
 80071de:	4603      	mov	r3, r0
 80071e0:	73fb      	strb	r3, [r7, #15]
      break;
 80071e2:	e020      	b.n	8007226 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80071ea:	4619      	mov	r1, r3
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 fbc5 	bl	800797c <USBD_StdItfReq>
 80071f2:	4603      	mov	r3, r0
 80071f4:	73fb      	strb	r3, [r7, #15]
      break;
 80071f6:	e016      	b.n	8007226 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80071fe:	4619      	mov	r1, r3
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 fc27 	bl	8007a54 <USBD_StdEPReq>
 8007206:	4603      	mov	r3, r0
 8007208:	73fb      	strb	r3, [r7, #15]
      break;
 800720a:	e00c      	b.n	8007226 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007212:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007216:	b2db      	uxtb	r3, r3
 8007218:	4619      	mov	r1, r3
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f001 fdf6 	bl	8008e0c <USBD_LL_StallEP>
 8007220:	4603      	mov	r3, r0
 8007222:	73fb      	strb	r3, [r7, #15]
      break;
 8007224:	bf00      	nop
  }

  return ret;
 8007226:	7bfb      	ldrb	r3, [r7, #15]
}
 8007228:	4618      	mov	r0, r3
 800722a:	3710      	adds	r7, #16
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b086      	sub	sp, #24
 8007234:	af00      	add	r7, sp, #0
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	460b      	mov	r3, r1
 800723a:	607a      	str	r2, [r7, #4]
 800723c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800723e:	2300      	movs	r3, #0
 8007240:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007242:	7afb      	ldrb	r3, [r7, #11]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d16e      	bne.n	8007326 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800724e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007256:	2b03      	cmp	r3, #3
 8007258:	f040 8098 	bne.w	800738c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	689a      	ldr	r2, [r3, #8]
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	429a      	cmp	r2, r3
 8007266:	d913      	bls.n	8007290 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	689a      	ldr	r2, [r3, #8]
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	1ad2      	subs	r2, r2, r3
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	68da      	ldr	r2, [r3, #12]
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	4293      	cmp	r3, r2
 8007280:	bf28      	it	cs
 8007282:	4613      	movcs	r3, r2
 8007284:	461a      	mov	r2, r3
 8007286:	6879      	ldr	r1, [r7, #4]
 8007288:	68f8      	ldr	r0, [r7, #12]
 800728a:	f001 f982 	bl	8008592 <USBD_CtlContinueRx>
 800728e:	e07d      	b.n	800738c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007296:	f003 031f 	and.w	r3, r3, #31
 800729a:	2b02      	cmp	r3, #2
 800729c:	d014      	beq.n	80072c8 <USBD_LL_DataOutStage+0x98>
 800729e:	2b02      	cmp	r3, #2
 80072a0:	d81d      	bhi.n	80072de <USBD_LL_DataOutStage+0xae>
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d002      	beq.n	80072ac <USBD_LL_DataOutStage+0x7c>
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d003      	beq.n	80072b2 <USBD_LL_DataOutStage+0x82>
 80072aa:	e018      	b.n	80072de <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80072ac:	2300      	movs	r3, #0
 80072ae:	75bb      	strb	r3, [r7, #22]
            break;
 80072b0:	e018      	b.n	80072e4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	4619      	mov	r1, r3
 80072bc:	68f8      	ldr	r0, [r7, #12]
 80072be:	f000 fa5e 	bl	800777e <USBD_CoreFindIF>
 80072c2:	4603      	mov	r3, r0
 80072c4:	75bb      	strb	r3, [r7, #22]
            break;
 80072c6:	e00d      	b.n	80072e4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	4619      	mov	r1, r3
 80072d2:	68f8      	ldr	r0, [r7, #12]
 80072d4:	f000 fa60 	bl	8007798 <USBD_CoreFindEP>
 80072d8:	4603      	mov	r3, r0
 80072da:	75bb      	strb	r3, [r7, #22]
            break;
 80072dc:	e002      	b.n	80072e4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80072de:	2300      	movs	r3, #0
 80072e0:	75bb      	strb	r3, [r7, #22]
            break;
 80072e2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80072e4:	7dbb      	ldrb	r3, [r7, #22]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d119      	bne.n	800731e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	2b03      	cmp	r3, #3
 80072f4:	d113      	bne.n	800731e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80072f6:	7dba      	ldrb	r2, [r7, #22]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	32ae      	adds	r2, #174	@ 0xae
 80072fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d00b      	beq.n	800731e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007306:	7dba      	ldrb	r2, [r7, #22]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800730e:	7dba      	ldrb	r2, [r7, #22]
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	32ae      	adds	r2, #174	@ 0xae
 8007314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007318:	691b      	ldr	r3, [r3, #16]
 800731a:	68f8      	ldr	r0, [r7, #12]
 800731c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800731e:	68f8      	ldr	r0, [r7, #12]
 8007320:	f001 f948 	bl	80085b4 <USBD_CtlSendStatus>
 8007324:	e032      	b.n	800738c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007326:	7afb      	ldrb	r3, [r7, #11]
 8007328:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800732c:	b2db      	uxtb	r3, r3
 800732e:	4619      	mov	r1, r3
 8007330:	68f8      	ldr	r0, [r7, #12]
 8007332:	f000 fa31 	bl	8007798 <USBD_CoreFindEP>
 8007336:	4603      	mov	r3, r0
 8007338:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800733a:	7dbb      	ldrb	r3, [r7, #22]
 800733c:	2bff      	cmp	r3, #255	@ 0xff
 800733e:	d025      	beq.n	800738c <USBD_LL_DataOutStage+0x15c>
 8007340:	7dbb      	ldrb	r3, [r7, #22]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d122      	bne.n	800738c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800734c:	b2db      	uxtb	r3, r3
 800734e:	2b03      	cmp	r3, #3
 8007350:	d117      	bne.n	8007382 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007352:	7dba      	ldrb	r2, [r7, #22]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	32ae      	adds	r2, #174	@ 0xae
 8007358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800735c:	699b      	ldr	r3, [r3, #24]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d00f      	beq.n	8007382 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007362:	7dba      	ldrb	r2, [r7, #22]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800736a:	7dba      	ldrb	r2, [r7, #22]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	32ae      	adds	r2, #174	@ 0xae
 8007370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007374:	699b      	ldr	r3, [r3, #24]
 8007376:	7afa      	ldrb	r2, [r7, #11]
 8007378:	4611      	mov	r1, r2
 800737a:	68f8      	ldr	r0, [r7, #12]
 800737c:	4798      	blx	r3
 800737e:	4603      	mov	r3, r0
 8007380:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007382:	7dfb      	ldrb	r3, [r7, #23]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d001      	beq.n	800738c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007388:	7dfb      	ldrb	r3, [r7, #23]
 800738a:	e000      	b.n	800738e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800738c:	2300      	movs	r3, #0
}
 800738e:	4618      	mov	r0, r3
 8007390:	3718      	adds	r7, #24
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007396:	b580      	push	{r7, lr}
 8007398:	b086      	sub	sp, #24
 800739a:	af00      	add	r7, sp, #0
 800739c:	60f8      	str	r0, [r7, #12]
 800739e:	460b      	mov	r3, r1
 80073a0:	607a      	str	r2, [r7, #4]
 80073a2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80073a4:	7afb      	ldrb	r3, [r7, #11]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d16f      	bne.n	800748a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	3314      	adds	r3, #20
 80073ae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80073b6:	2b02      	cmp	r3, #2
 80073b8:	d15a      	bne.n	8007470 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	689a      	ldr	r2, [r3, #8]
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d914      	bls.n	80073f0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	689a      	ldr	r2, [r3, #8]
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	1ad2      	subs	r2, r2, r3
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	461a      	mov	r2, r3
 80073da:	6879      	ldr	r1, [r7, #4]
 80073dc:	68f8      	ldr	r0, [r7, #12]
 80073de:	f001 f8aa 	bl	8008536 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073e2:	2300      	movs	r3, #0
 80073e4:	2200      	movs	r2, #0
 80073e6:	2100      	movs	r1, #0
 80073e8:	68f8      	ldr	r0, [r7, #12]
 80073ea:	f001 fdb9 	bl	8008f60 <USBD_LL_PrepareReceive>
 80073ee:	e03f      	b.n	8007470 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	68da      	ldr	r2, [r3, #12]
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d11c      	bne.n	8007436 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	685a      	ldr	r2, [r3, #4]
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007404:	429a      	cmp	r2, r3
 8007406:	d316      	bcc.n	8007436 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	685a      	ldr	r2, [r3, #4]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007412:	429a      	cmp	r2, r3
 8007414:	d20f      	bcs.n	8007436 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007416:	2200      	movs	r2, #0
 8007418:	2100      	movs	r1, #0
 800741a:	68f8      	ldr	r0, [r7, #12]
 800741c:	f001 f88b 	bl	8008536 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2200      	movs	r2, #0
 8007424:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007428:	2300      	movs	r3, #0
 800742a:	2200      	movs	r2, #0
 800742c:	2100      	movs	r1, #0
 800742e:	68f8      	ldr	r0, [r7, #12]
 8007430:	f001 fd96 	bl	8008f60 <USBD_LL_PrepareReceive>
 8007434:	e01c      	b.n	8007470 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800743c:	b2db      	uxtb	r3, r3
 800743e:	2b03      	cmp	r3, #3
 8007440:	d10f      	bne.n	8007462 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d009      	beq.n	8007462 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2200      	movs	r2, #0
 8007452:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	68f8      	ldr	r0, [r7, #12]
 8007460:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007462:	2180      	movs	r1, #128	@ 0x80
 8007464:	68f8      	ldr	r0, [r7, #12]
 8007466:	f001 fcd1 	bl	8008e0c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800746a:	68f8      	ldr	r0, [r7, #12]
 800746c:	f001 f8b5 	bl	80085da <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d03a      	beq.n	80074f0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800747a:	68f8      	ldr	r0, [r7, #12]
 800747c:	f7ff fe42 	bl	8007104 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2200      	movs	r2, #0
 8007484:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007488:	e032      	b.n	80074f0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800748a:	7afb      	ldrb	r3, [r7, #11]
 800748c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007490:	b2db      	uxtb	r3, r3
 8007492:	4619      	mov	r1, r3
 8007494:	68f8      	ldr	r0, [r7, #12]
 8007496:	f000 f97f 	bl	8007798 <USBD_CoreFindEP>
 800749a:	4603      	mov	r3, r0
 800749c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800749e:	7dfb      	ldrb	r3, [r7, #23]
 80074a0:	2bff      	cmp	r3, #255	@ 0xff
 80074a2:	d025      	beq.n	80074f0 <USBD_LL_DataInStage+0x15a>
 80074a4:	7dfb      	ldrb	r3, [r7, #23]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d122      	bne.n	80074f0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	2b03      	cmp	r3, #3
 80074b4:	d11c      	bne.n	80074f0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80074b6:	7dfa      	ldrb	r2, [r7, #23]
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	32ae      	adds	r2, #174	@ 0xae
 80074bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074c0:	695b      	ldr	r3, [r3, #20]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d014      	beq.n	80074f0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80074c6:	7dfa      	ldrb	r2, [r7, #23]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80074ce:	7dfa      	ldrb	r2, [r7, #23]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	32ae      	adds	r2, #174	@ 0xae
 80074d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074d8:	695b      	ldr	r3, [r3, #20]
 80074da:	7afa      	ldrb	r2, [r7, #11]
 80074dc:	4611      	mov	r1, r2
 80074de:	68f8      	ldr	r0, [r7, #12]
 80074e0:	4798      	blx	r3
 80074e2:	4603      	mov	r3, r0
 80074e4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80074e6:	7dbb      	ldrb	r3, [r7, #22]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d001      	beq.n	80074f0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80074ec:	7dbb      	ldrb	r3, [r7, #22]
 80074ee:	e000      	b.n	80074f2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3718      	adds	r7, #24
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}

080074fa <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80074fa:	b580      	push	{r7, lr}
 80074fc:	b084      	sub	sp, #16
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007502:	2300      	movs	r3, #0
 8007504:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2201      	movs	r2, #1
 800750a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2200      	movs	r2, #0
 8007512:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2200      	movs	r2, #0
 800751a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2200      	movs	r2, #0
 8007528:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007532:	2b00      	cmp	r3, #0
 8007534:	d014      	beq.n	8007560 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d00e      	beq.n	8007560 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	6852      	ldr	r2, [r2, #4]
 800754e:	b2d2      	uxtb	r2, r2
 8007550:	4611      	mov	r1, r2
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	4798      	blx	r3
 8007556:	4603      	mov	r3, r0
 8007558:	2b00      	cmp	r3, #0
 800755a:	d001      	beq.n	8007560 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800755c:	2303      	movs	r3, #3
 800755e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007560:	2340      	movs	r3, #64	@ 0x40
 8007562:	2200      	movs	r2, #0
 8007564:	2100      	movs	r1, #0
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f001 fc0b 	bl	8008d82 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2201      	movs	r2, #1
 8007570:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2240      	movs	r2, #64	@ 0x40
 8007578:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800757c:	2340      	movs	r3, #64	@ 0x40
 800757e:	2200      	movs	r2, #0
 8007580:	2180      	movs	r1, #128	@ 0x80
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f001 fbfd 	bl	8008d82 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2201      	movs	r2, #1
 800758c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2240      	movs	r2, #64	@ 0x40
 8007592:	621a      	str	r2, [r3, #32]

  return ret;
 8007594:	7bfb      	ldrb	r3, [r7, #15]
}
 8007596:	4618      	mov	r0, r3
 8007598:	3710      	adds	r7, #16
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}

0800759e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800759e:	b480      	push	{r7}
 80075a0:	b083      	sub	sp, #12
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]
 80075a6:	460b      	mov	r3, r1
 80075a8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	78fa      	ldrb	r2, [r7, #3]
 80075ae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	370c      	adds	r7, #12
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr

080075be <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80075be:	b480      	push	{r7}
 80075c0:	b083      	sub	sp, #12
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075cc:	b2da      	uxtb	r2, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2204      	movs	r2, #4
 80075d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80075dc:	2300      	movs	r3, #0
}
 80075de:	4618      	mov	r0, r3
 80075e0:	370c      	adds	r7, #12
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr

080075ea <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80075ea:	b480      	push	{r7}
 80075ec:	b083      	sub	sp, #12
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	2b04      	cmp	r3, #4
 80075fc:	d106      	bne.n	800760c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007604:	b2da      	uxtb	r2, r3
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800760c:	2300      	movs	r3, #0
}
 800760e:	4618      	mov	r0, r3
 8007610:	370c      	adds	r7, #12
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr

0800761a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800761a:	b580      	push	{r7, lr}
 800761c:	b082      	sub	sp, #8
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007628:	b2db      	uxtb	r3, r3
 800762a:	2b03      	cmp	r3, #3
 800762c:	d110      	bne.n	8007650 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007634:	2b00      	cmp	r3, #0
 8007636:	d00b      	beq.n	8007650 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800763e:	69db      	ldr	r3, [r3, #28]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d005      	beq.n	8007650 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800764a:	69db      	ldr	r3, [r3, #28]
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007650:	2300      	movs	r3, #0
}
 8007652:	4618      	mov	r0, r3
 8007654:	3708      	adds	r7, #8
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}

0800765a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800765a:	b580      	push	{r7, lr}
 800765c:	b082      	sub	sp, #8
 800765e:	af00      	add	r7, sp, #0
 8007660:	6078      	str	r0, [r7, #4]
 8007662:	460b      	mov	r3, r1
 8007664:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	32ae      	adds	r2, #174	@ 0xae
 8007670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d101      	bne.n	800767c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007678:	2303      	movs	r3, #3
 800767a:	e01c      	b.n	80076b6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007682:	b2db      	uxtb	r3, r3
 8007684:	2b03      	cmp	r3, #3
 8007686:	d115      	bne.n	80076b4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	32ae      	adds	r2, #174	@ 0xae
 8007692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007696:	6a1b      	ldr	r3, [r3, #32]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d00b      	beq.n	80076b4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	32ae      	adds	r2, #174	@ 0xae
 80076a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076aa:	6a1b      	ldr	r3, [r3, #32]
 80076ac:	78fa      	ldrb	r2, [r7, #3]
 80076ae:	4611      	mov	r1, r2
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3708      	adds	r7, #8
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}

080076be <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80076be:	b580      	push	{r7, lr}
 80076c0:	b082      	sub	sp, #8
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
 80076c6:	460b      	mov	r3, r1
 80076c8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	32ae      	adds	r2, #174	@ 0xae
 80076d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d101      	bne.n	80076e0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80076dc:	2303      	movs	r3, #3
 80076de:	e01c      	b.n	800771a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	2b03      	cmp	r3, #3
 80076ea:	d115      	bne.n	8007718 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	32ae      	adds	r2, #174	@ 0xae
 80076f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d00b      	beq.n	8007718 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	32ae      	adds	r2, #174	@ 0xae
 800770a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800770e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007710:	78fa      	ldrb	r2, [r7, #3]
 8007712:	4611      	mov	r1, r2
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007718:	2300      	movs	r3, #0
}
 800771a:	4618      	mov	r0, r3
 800771c:	3708      	adds	r7, #8
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}

08007722 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007722:	b480      	push	{r7}
 8007724:	b083      	sub	sp, #12
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800772a:	2300      	movs	r3, #0
}
 800772c:	4618      	mov	r0, r3
 800772e:	370c      	adds	r7, #12
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr

08007738 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007740:	2300      	movs	r3, #0
 8007742:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007752:	2b00      	cmp	r3, #0
 8007754:	d00e      	beq.n	8007774 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	6852      	ldr	r2, [r2, #4]
 8007762:	b2d2      	uxtb	r2, r2
 8007764:	4611      	mov	r1, r2
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	4798      	blx	r3
 800776a:	4603      	mov	r3, r0
 800776c:	2b00      	cmp	r3, #0
 800776e:	d001      	beq.n	8007774 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007770:	2303      	movs	r3, #3
 8007772:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007774:	7bfb      	ldrb	r3, [r7, #15]
}
 8007776:	4618      	mov	r0, r3
 8007778:	3710      	adds	r7, #16
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}

0800777e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800777e:	b480      	push	{r7}
 8007780:	b083      	sub	sp, #12
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
 8007786:	460b      	mov	r3, r1
 8007788:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800778a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800778c:	4618      	mov	r0, r3
 800778e:	370c      	adds	r7, #12
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	460b      	mov	r3, r1
 80077a2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80077a4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	370c      	adds	r7, #12
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr

080077b2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80077b2:	b580      	push	{r7, lr}
 80077b4:	b086      	sub	sp, #24
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
 80077ba:	460b      	mov	r3, r1
 80077bc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80077c6:	2300      	movs	r3, #0
 80077c8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	885b      	ldrh	r3, [r3, #2]
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	68fa      	ldr	r2, [r7, #12]
 80077d2:	7812      	ldrb	r2, [r2, #0]
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d91f      	bls.n	8007818 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80077de:	e013      	b.n	8007808 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80077e0:	f107 030a 	add.w	r3, r7, #10
 80077e4:	4619      	mov	r1, r3
 80077e6:	6978      	ldr	r0, [r7, #20]
 80077e8:	f000 f81b 	bl	8007822 <USBD_GetNextDesc>
 80077ec:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	785b      	ldrb	r3, [r3, #1]
 80077f2:	2b05      	cmp	r3, #5
 80077f4:	d108      	bne.n	8007808 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	789b      	ldrb	r3, [r3, #2]
 80077fe:	78fa      	ldrb	r2, [r7, #3]
 8007800:	429a      	cmp	r2, r3
 8007802:	d008      	beq.n	8007816 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007804:	2300      	movs	r3, #0
 8007806:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	885b      	ldrh	r3, [r3, #2]
 800780c:	b29a      	uxth	r2, r3
 800780e:	897b      	ldrh	r3, [r7, #10]
 8007810:	429a      	cmp	r2, r3
 8007812:	d8e5      	bhi.n	80077e0 <USBD_GetEpDesc+0x2e>
 8007814:	e000      	b.n	8007818 <USBD_GetEpDesc+0x66>
          break;
 8007816:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007818:	693b      	ldr	r3, [r7, #16]
}
 800781a:	4618      	mov	r0, r3
 800781c:	3718      	adds	r7, #24
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}

08007822 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007822:	b480      	push	{r7}
 8007824:	b085      	sub	sp, #20
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
 800782a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	881b      	ldrh	r3, [r3, #0]
 8007834:	68fa      	ldr	r2, [r7, #12]
 8007836:	7812      	ldrb	r2, [r2, #0]
 8007838:	4413      	add	r3, r2
 800783a:	b29a      	uxth	r2, r3
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	461a      	mov	r2, r3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	4413      	add	r3, r2
 800784a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800784c:	68fb      	ldr	r3, [r7, #12]
}
 800784e:	4618      	mov	r0, r3
 8007850:	3714      	adds	r7, #20
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr

0800785a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800785a:	b480      	push	{r7}
 800785c:	b087      	sub	sp, #28
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	3301      	adds	r3, #1
 8007870:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007878:	8a3b      	ldrh	r3, [r7, #16]
 800787a:	021b      	lsls	r3, r3, #8
 800787c:	b21a      	sxth	r2, r3
 800787e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007882:	4313      	orrs	r3, r2
 8007884:	b21b      	sxth	r3, r3
 8007886:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007888:	89fb      	ldrh	r3, [r7, #14]
}
 800788a:	4618      	mov	r0, r3
 800788c:	371c      	adds	r7, #28
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr
	...

08007898 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078a2:	2300      	movs	r3, #0
 80078a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80078ae:	2b40      	cmp	r3, #64	@ 0x40
 80078b0:	d005      	beq.n	80078be <USBD_StdDevReq+0x26>
 80078b2:	2b40      	cmp	r3, #64	@ 0x40
 80078b4:	d857      	bhi.n	8007966 <USBD_StdDevReq+0xce>
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d00f      	beq.n	80078da <USBD_StdDevReq+0x42>
 80078ba:	2b20      	cmp	r3, #32
 80078bc:	d153      	bne.n	8007966 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	32ae      	adds	r2, #174	@ 0xae
 80078c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	6839      	ldr	r1, [r7, #0]
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	4798      	blx	r3
 80078d4:	4603      	mov	r3, r0
 80078d6:	73fb      	strb	r3, [r7, #15]
      break;
 80078d8:	e04a      	b.n	8007970 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	785b      	ldrb	r3, [r3, #1]
 80078de:	2b09      	cmp	r3, #9
 80078e0:	d83b      	bhi.n	800795a <USBD_StdDevReq+0xc2>
 80078e2:	a201      	add	r2, pc, #4	@ (adr r2, 80078e8 <USBD_StdDevReq+0x50>)
 80078e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e8:	0800793d 	.word	0x0800793d
 80078ec:	08007951 	.word	0x08007951
 80078f0:	0800795b 	.word	0x0800795b
 80078f4:	08007947 	.word	0x08007947
 80078f8:	0800795b 	.word	0x0800795b
 80078fc:	0800791b 	.word	0x0800791b
 8007900:	08007911 	.word	0x08007911
 8007904:	0800795b 	.word	0x0800795b
 8007908:	08007933 	.word	0x08007933
 800790c:	08007925 	.word	0x08007925
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007910:	6839      	ldr	r1, [r7, #0]
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 fa3c 	bl	8007d90 <USBD_GetDescriptor>
          break;
 8007918:	e024      	b.n	8007964 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800791a:	6839      	ldr	r1, [r7, #0]
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 fba1 	bl	8008064 <USBD_SetAddress>
          break;
 8007922:	e01f      	b.n	8007964 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007924:	6839      	ldr	r1, [r7, #0]
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 fbe0 	bl	80080ec <USBD_SetConfig>
 800792c:	4603      	mov	r3, r0
 800792e:	73fb      	strb	r3, [r7, #15]
          break;
 8007930:	e018      	b.n	8007964 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007932:	6839      	ldr	r1, [r7, #0]
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 fc83 	bl	8008240 <USBD_GetConfig>
          break;
 800793a:	e013      	b.n	8007964 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800793c:	6839      	ldr	r1, [r7, #0]
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 fcb4 	bl	80082ac <USBD_GetStatus>
          break;
 8007944:	e00e      	b.n	8007964 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007946:	6839      	ldr	r1, [r7, #0]
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 fce3 	bl	8008314 <USBD_SetFeature>
          break;
 800794e:	e009      	b.n	8007964 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007950:	6839      	ldr	r1, [r7, #0]
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 fd07 	bl	8008366 <USBD_ClrFeature>
          break;
 8007958:	e004      	b.n	8007964 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800795a:	6839      	ldr	r1, [r7, #0]
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 fd5e 	bl	800841e <USBD_CtlError>
          break;
 8007962:	bf00      	nop
      }
      break;
 8007964:	e004      	b.n	8007970 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007966:	6839      	ldr	r1, [r7, #0]
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 fd58 	bl	800841e <USBD_CtlError>
      break;
 800796e:	bf00      	nop
  }

  return ret;
 8007970:	7bfb      	ldrb	r3, [r7, #15]
}
 8007972:	4618      	mov	r0, r3
 8007974:	3710      	adds	r7, #16
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop

0800797c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b084      	sub	sp, #16
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007986:	2300      	movs	r3, #0
 8007988:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007992:	2b40      	cmp	r3, #64	@ 0x40
 8007994:	d005      	beq.n	80079a2 <USBD_StdItfReq+0x26>
 8007996:	2b40      	cmp	r3, #64	@ 0x40
 8007998:	d852      	bhi.n	8007a40 <USBD_StdItfReq+0xc4>
 800799a:	2b00      	cmp	r3, #0
 800799c:	d001      	beq.n	80079a2 <USBD_StdItfReq+0x26>
 800799e:	2b20      	cmp	r3, #32
 80079a0:	d14e      	bne.n	8007a40 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	3b01      	subs	r3, #1
 80079ac:	2b02      	cmp	r3, #2
 80079ae:	d840      	bhi.n	8007a32 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	889b      	ldrh	r3, [r3, #4]
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	d836      	bhi.n	8007a28 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	889b      	ldrh	r3, [r3, #4]
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	4619      	mov	r1, r3
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f7ff fedb 	bl	800777e <USBD_CoreFindIF>
 80079c8:	4603      	mov	r3, r0
 80079ca:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80079cc:	7bbb      	ldrb	r3, [r7, #14]
 80079ce:	2bff      	cmp	r3, #255	@ 0xff
 80079d0:	d01d      	beq.n	8007a0e <USBD_StdItfReq+0x92>
 80079d2:	7bbb      	ldrb	r3, [r7, #14]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d11a      	bne.n	8007a0e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80079d8:	7bba      	ldrb	r2, [r7, #14]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	32ae      	adds	r2, #174	@ 0xae
 80079de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d00f      	beq.n	8007a08 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80079e8:	7bba      	ldrb	r2, [r7, #14]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80079f0:	7bba      	ldrb	r2, [r7, #14]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	32ae      	adds	r2, #174	@ 0xae
 80079f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	6839      	ldr	r1, [r7, #0]
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	4798      	blx	r3
 8007a02:	4603      	mov	r3, r0
 8007a04:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007a06:	e004      	b.n	8007a12 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007a08:	2303      	movs	r3, #3
 8007a0a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007a0c:	e001      	b.n	8007a12 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007a0e:	2303      	movs	r3, #3
 8007a10:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	88db      	ldrh	r3, [r3, #6]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d110      	bne.n	8007a3c <USBD_StdItfReq+0xc0>
 8007a1a:	7bfb      	ldrb	r3, [r7, #15]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d10d      	bne.n	8007a3c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 fdc7 	bl	80085b4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007a26:	e009      	b.n	8007a3c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007a28:	6839      	ldr	r1, [r7, #0]
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f000 fcf7 	bl	800841e <USBD_CtlError>
          break;
 8007a30:	e004      	b.n	8007a3c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007a32:	6839      	ldr	r1, [r7, #0]
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 fcf2 	bl	800841e <USBD_CtlError>
          break;
 8007a3a:	e000      	b.n	8007a3e <USBD_StdItfReq+0xc2>
          break;
 8007a3c:	bf00      	nop
      }
      break;
 8007a3e:	e004      	b.n	8007a4a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007a40:	6839      	ldr	r1, [r7, #0]
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 fceb 	bl	800841e <USBD_CtlError>
      break;
 8007a48:	bf00      	nop
  }

  return ret;
 8007a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3710      	adds	r7, #16
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b084      	sub	sp, #16
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	889b      	ldrh	r3, [r3, #4]
 8007a66:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	781b      	ldrb	r3, [r3, #0]
 8007a6c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007a70:	2b40      	cmp	r3, #64	@ 0x40
 8007a72:	d007      	beq.n	8007a84 <USBD_StdEPReq+0x30>
 8007a74:	2b40      	cmp	r3, #64	@ 0x40
 8007a76:	f200 817f 	bhi.w	8007d78 <USBD_StdEPReq+0x324>
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d02a      	beq.n	8007ad4 <USBD_StdEPReq+0x80>
 8007a7e:	2b20      	cmp	r3, #32
 8007a80:	f040 817a 	bne.w	8007d78 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007a84:	7bbb      	ldrb	r3, [r7, #14]
 8007a86:	4619      	mov	r1, r3
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f7ff fe85 	bl	8007798 <USBD_CoreFindEP>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a92:	7b7b      	ldrb	r3, [r7, #13]
 8007a94:	2bff      	cmp	r3, #255	@ 0xff
 8007a96:	f000 8174 	beq.w	8007d82 <USBD_StdEPReq+0x32e>
 8007a9a:	7b7b      	ldrb	r3, [r7, #13]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	f040 8170 	bne.w	8007d82 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007aa2:	7b7a      	ldrb	r2, [r7, #13]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007aaa:	7b7a      	ldrb	r2, [r7, #13]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	32ae      	adds	r2, #174	@ 0xae
 8007ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ab4:	689b      	ldr	r3, [r3, #8]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	f000 8163 	beq.w	8007d82 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007abc:	7b7a      	ldrb	r2, [r7, #13]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	32ae      	adds	r2, #174	@ 0xae
 8007ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	6839      	ldr	r1, [r7, #0]
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	4798      	blx	r3
 8007ace:	4603      	mov	r3, r0
 8007ad0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007ad2:	e156      	b.n	8007d82 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	785b      	ldrb	r3, [r3, #1]
 8007ad8:	2b03      	cmp	r3, #3
 8007ada:	d008      	beq.n	8007aee <USBD_StdEPReq+0x9a>
 8007adc:	2b03      	cmp	r3, #3
 8007ade:	f300 8145 	bgt.w	8007d6c <USBD_StdEPReq+0x318>
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	f000 809b 	beq.w	8007c1e <USBD_StdEPReq+0x1ca>
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d03c      	beq.n	8007b66 <USBD_StdEPReq+0x112>
 8007aec:	e13e      	b.n	8007d6c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	2b02      	cmp	r3, #2
 8007af8:	d002      	beq.n	8007b00 <USBD_StdEPReq+0xac>
 8007afa:	2b03      	cmp	r3, #3
 8007afc:	d016      	beq.n	8007b2c <USBD_StdEPReq+0xd8>
 8007afe:	e02c      	b.n	8007b5a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b00:	7bbb      	ldrb	r3, [r7, #14]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d00d      	beq.n	8007b22 <USBD_StdEPReq+0xce>
 8007b06:	7bbb      	ldrb	r3, [r7, #14]
 8007b08:	2b80      	cmp	r3, #128	@ 0x80
 8007b0a:	d00a      	beq.n	8007b22 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b0c:	7bbb      	ldrb	r3, [r7, #14]
 8007b0e:	4619      	mov	r1, r3
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f001 f97b 	bl	8008e0c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b16:	2180      	movs	r1, #128	@ 0x80
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f001 f977 	bl	8008e0c <USBD_LL_StallEP>
 8007b1e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b20:	e020      	b.n	8007b64 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007b22:	6839      	ldr	r1, [r7, #0]
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 fc7a 	bl	800841e <USBD_CtlError>
              break;
 8007b2a:	e01b      	b.n	8007b64 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	885b      	ldrh	r3, [r3, #2]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d10e      	bne.n	8007b52 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007b34:	7bbb      	ldrb	r3, [r7, #14]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d00b      	beq.n	8007b52 <USBD_StdEPReq+0xfe>
 8007b3a:	7bbb      	ldrb	r3, [r7, #14]
 8007b3c:	2b80      	cmp	r3, #128	@ 0x80
 8007b3e:	d008      	beq.n	8007b52 <USBD_StdEPReq+0xfe>
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	88db      	ldrh	r3, [r3, #6]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d104      	bne.n	8007b52 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b48:	7bbb      	ldrb	r3, [r7, #14]
 8007b4a:	4619      	mov	r1, r3
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f001 f95d 	bl	8008e0c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 fd2e 	bl	80085b4 <USBD_CtlSendStatus>

              break;
 8007b58:	e004      	b.n	8007b64 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007b5a:	6839      	ldr	r1, [r7, #0]
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 fc5e 	bl	800841e <USBD_CtlError>
              break;
 8007b62:	bf00      	nop
          }
          break;
 8007b64:	e107      	b.n	8007d76 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	2b02      	cmp	r3, #2
 8007b70:	d002      	beq.n	8007b78 <USBD_StdEPReq+0x124>
 8007b72:	2b03      	cmp	r3, #3
 8007b74:	d016      	beq.n	8007ba4 <USBD_StdEPReq+0x150>
 8007b76:	e04b      	b.n	8007c10 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b78:	7bbb      	ldrb	r3, [r7, #14]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00d      	beq.n	8007b9a <USBD_StdEPReq+0x146>
 8007b7e:	7bbb      	ldrb	r3, [r7, #14]
 8007b80:	2b80      	cmp	r3, #128	@ 0x80
 8007b82:	d00a      	beq.n	8007b9a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b84:	7bbb      	ldrb	r3, [r7, #14]
 8007b86:	4619      	mov	r1, r3
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f001 f93f 	bl	8008e0c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b8e:	2180      	movs	r1, #128	@ 0x80
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f001 f93b 	bl	8008e0c <USBD_LL_StallEP>
 8007b96:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b98:	e040      	b.n	8007c1c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007b9a:	6839      	ldr	r1, [r7, #0]
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 fc3e 	bl	800841e <USBD_CtlError>
              break;
 8007ba2:	e03b      	b.n	8007c1c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	885b      	ldrh	r3, [r3, #2]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d136      	bne.n	8007c1a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007bac:	7bbb      	ldrb	r3, [r7, #14]
 8007bae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d004      	beq.n	8007bc0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007bb6:	7bbb      	ldrb	r3, [r7, #14]
 8007bb8:	4619      	mov	r1, r3
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f001 f945 	bl	8008e4a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 fcf7 	bl	80085b4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007bc6:	7bbb      	ldrb	r3, [r7, #14]
 8007bc8:	4619      	mov	r1, r3
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f7ff fde4 	bl	8007798 <USBD_CoreFindEP>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007bd4:	7b7b      	ldrb	r3, [r7, #13]
 8007bd6:	2bff      	cmp	r3, #255	@ 0xff
 8007bd8:	d01f      	beq.n	8007c1a <USBD_StdEPReq+0x1c6>
 8007bda:	7b7b      	ldrb	r3, [r7, #13]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d11c      	bne.n	8007c1a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007be0:	7b7a      	ldrb	r2, [r7, #13]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007be8:	7b7a      	ldrb	r2, [r7, #13]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	32ae      	adds	r2, #174	@ 0xae
 8007bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d010      	beq.n	8007c1a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007bf8:	7b7a      	ldrb	r2, [r7, #13]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	32ae      	adds	r2, #174	@ 0xae
 8007bfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	6839      	ldr	r1, [r7, #0]
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	4798      	blx	r3
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007c0e:	e004      	b.n	8007c1a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007c10:	6839      	ldr	r1, [r7, #0]
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 fc03 	bl	800841e <USBD_CtlError>
              break;
 8007c18:	e000      	b.n	8007c1c <USBD_StdEPReq+0x1c8>
              break;
 8007c1a:	bf00      	nop
          }
          break;
 8007c1c:	e0ab      	b.n	8007d76 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	2b02      	cmp	r3, #2
 8007c28:	d002      	beq.n	8007c30 <USBD_StdEPReq+0x1dc>
 8007c2a:	2b03      	cmp	r3, #3
 8007c2c:	d032      	beq.n	8007c94 <USBD_StdEPReq+0x240>
 8007c2e:	e097      	b.n	8007d60 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c30:	7bbb      	ldrb	r3, [r7, #14]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d007      	beq.n	8007c46 <USBD_StdEPReq+0x1f2>
 8007c36:	7bbb      	ldrb	r3, [r7, #14]
 8007c38:	2b80      	cmp	r3, #128	@ 0x80
 8007c3a:	d004      	beq.n	8007c46 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007c3c:	6839      	ldr	r1, [r7, #0]
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 fbed 	bl	800841e <USBD_CtlError>
                break;
 8007c44:	e091      	b.n	8007d6a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	da0b      	bge.n	8007c66 <USBD_StdEPReq+0x212>
 8007c4e:	7bbb      	ldrb	r3, [r7, #14]
 8007c50:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007c54:	4613      	mov	r3, r2
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	4413      	add	r3, r2
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	3310      	adds	r3, #16
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	4413      	add	r3, r2
 8007c62:	3304      	adds	r3, #4
 8007c64:	e00b      	b.n	8007c7e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c66:	7bbb      	ldrb	r3, [r7, #14]
 8007c68:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c6c:	4613      	mov	r3, r2
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	4413      	add	r3, r2
 8007c72:	009b      	lsls	r3, r3, #2
 8007c74:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	4413      	add	r3, r2
 8007c7c:	3304      	adds	r3, #4
 8007c7e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	2200      	movs	r2, #0
 8007c84:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	2202      	movs	r2, #2
 8007c8a:	4619      	mov	r1, r3
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 fc37 	bl	8008500 <USBD_CtlSendData>
              break;
 8007c92:	e06a      	b.n	8007d6a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007c94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	da11      	bge.n	8007cc0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007c9c:	7bbb      	ldrb	r3, [r7, #14]
 8007c9e:	f003 020f 	and.w	r2, r3, #15
 8007ca2:	6879      	ldr	r1, [r7, #4]
 8007ca4:	4613      	mov	r3, r2
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	4413      	add	r3, r2
 8007caa:	009b      	lsls	r3, r3, #2
 8007cac:	440b      	add	r3, r1
 8007cae:	3324      	adds	r3, #36	@ 0x24
 8007cb0:	881b      	ldrh	r3, [r3, #0]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d117      	bne.n	8007ce6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007cb6:	6839      	ldr	r1, [r7, #0]
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 fbb0 	bl	800841e <USBD_CtlError>
                  break;
 8007cbe:	e054      	b.n	8007d6a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007cc0:	7bbb      	ldrb	r3, [r7, #14]
 8007cc2:	f003 020f 	and.w	r2, r3, #15
 8007cc6:	6879      	ldr	r1, [r7, #4]
 8007cc8:	4613      	mov	r3, r2
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	4413      	add	r3, r2
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	440b      	add	r3, r1
 8007cd2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007cd6:	881b      	ldrh	r3, [r3, #0]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d104      	bne.n	8007ce6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007cdc:	6839      	ldr	r1, [r7, #0]
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 fb9d 	bl	800841e <USBD_CtlError>
                  break;
 8007ce4:	e041      	b.n	8007d6a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ce6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	da0b      	bge.n	8007d06 <USBD_StdEPReq+0x2b2>
 8007cee:	7bbb      	ldrb	r3, [r7, #14]
 8007cf0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007cf4:	4613      	mov	r3, r2
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	4413      	add	r3, r2
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	3310      	adds	r3, #16
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	4413      	add	r3, r2
 8007d02:	3304      	adds	r3, #4
 8007d04:	e00b      	b.n	8007d1e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007d06:	7bbb      	ldrb	r3, [r7, #14]
 8007d08:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d0c:	4613      	mov	r3, r2
 8007d0e:	009b      	lsls	r3, r3, #2
 8007d10:	4413      	add	r3, r2
 8007d12:	009b      	lsls	r3, r3, #2
 8007d14:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	4413      	add	r3, r2
 8007d1c:	3304      	adds	r3, #4
 8007d1e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007d20:	7bbb      	ldrb	r3, [r7, #14]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d002      	beq.n	8007d2c <USBD_StdEPReq+0x2d8>
 8007d26:	7bbb      	ldrb	r3, [r7, #14]
 8007d28:	2b80      	cmp	r3, #128	@ 0x80
 8007d2a:	d103      	bne.n	8007d34 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	601a      	str	r2, [r3, #0]
 8007d32:	e00e      	b.n	8007d52 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007d34:	7bbb      	ldrb	r3, [r7, #14]
 8007d36:	4619      	mov	r1, r3
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f001 f8a5 	bl	8008e88 <USBD_LL_IsStallEP>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d003      	beq.n	8007d4c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	2201      	movs	r2, #1
 8007d48:	601a      	str	r2, [r3, #0]
 8007d4a:	e002      	b.n	8007d52 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	2202      	movs	r2, #2
 8007d56:	4619      	mov	r1, r3
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 fbd1 	bl	8008500 <USBD_CtlSendData>
              break;
 8007d5e:	e004      	b.n	8007d6a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007d60:	6839      	ldr	r1, [r7, #0]
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 fb5b 	bl	800841e <USBD_CtlError>
              break;
 8007d68:	bf00      	nop
          }
          break;
 8007d6a:	e004      	b.n	8007d76 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007d6c:	6839      	ldr	r1, [r7, #0]
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 fb55 	bl	800841e <USBD_CtlError>
          break;
 8007d74:	bf00      	nop
      }
      break;
 8007d76:	e005      	b.n	8007d84 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007d78:	6839      	ldr	r1, [r7, #0]
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 fb4f 	bl	800841e <USBD_CtlError>
      break;
 8007d80:	e000      	b.n	8007d84 <USBD_StdEPReq+0x330>
      break;
 8007d82:	bf00      	nop
  }

  return ret;
 8007d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3710      	adds	r7, #16
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}
	...

08007d90 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b084      	sub	sp, #16
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007da2:	2300      	movs	r3, #0
 8007da4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	885b      	ldrh	r3, [r3, #2]
 8007daa:	0a1b      	lsrs	r3, r3, #8
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	3b01      	subs	r3, #1
 8007db0:	2b06      	cmp	r3, #6
 8007db2:	f200 8128 	bhi.w	8008006 <USBD_GetDescriptor+0x276>
 8007db6:	a201      	add	r2, pc, #4	@ (adr r2, 8007dbc <USBD_GetDescriptor+0x2c>)
 8007db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dbc:	08007dd9 	.word	0x08007dd9
 8007dc0:	08007df1 	.word	0x08007df1
 8007dc4:	08007e31 	.word	0x08007e31
 8007dc8:	08008007 	.word	0x08008007
 8007dcc:	08008007 	.word	0x08008007
 8007dd0:	08007fa7 	.word	0x08007fa7
 8007dd4:	08007fd3 	.word	0x08007fd3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	7c12      	ldrb	r2, [r2, #16]
 8007de4:	f107 0108 	add.w	r1, r7, #8
 8007de8:	4610      	mov	r0, r2
 8007dea:	4798      	blx	r3
 8007dec:	60f8      	str	r0, [r7, #12]
      break;
 8007dee:	e112      	b.n	8008016 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	7c1b      	ldrb	r3, [r3, #16]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d10d      	bne.n	8007e14 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e00:	f107 0208 	add.w	r2, r7, #8
 8007e04:	4610      	mov	r0, r2
 8007e06:	4798      	blx	r3
 8007e08:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	2202      	movs	r2, #2
 8007e10:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007e12:	e100      	b.n	8008016 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e1c:	f107 0208 	add.w	r2, r7, #8
 8007e20:	4610      	mov	r0, r2
 8007e22:	4798      	blx	r3
 8007e24:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	3301      	adds	r3, #1
 8007e2a:	2202      	movs	r2, #2
 8007e2c:	701a      	strb	r2, [r3, #0]
      break;
 8007e2e:	e0f2      	b.n	8008016 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	885b      	ldrh	r3, [r3, #2]
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	2b05      	cmp	r3, #5
 8007e38:	f200 80ac 	bhi.w	8007f94 <USBD_GetDescriptor+0x204>
 8007e3c:	a201      	add	r2, pc, #4	@ (adr r2, 8007e44 <USBD_GetDescriptor+0xb4>)
 8007e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e42:	bf00      	nop
 8007e44:	08007e5d 	.word	0x08007e5d
 8007e48:	08007e91 	.word	0x08007e91
 8007e4c:	08007ec5 	.word	0x08007ec5
 8007e50:	08007ef9 	.word	0x08007ef9
 8007e54:	08007f2d 	.word	0x08007f2d
 8007e58:	08007f61 	.word	0x08007f61
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d00b      	beq.n	8007e80 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	7c12      	ldrb	r2, [r2, #16]
 8007e74:	f107 0108 	add.w	r1, r7, #8
 8007e78:	4610      	mov	r0, r2
 8007e7a:	4798      	blx	r3
 8007e7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e7e:	e091      	b.n	8007fa4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e80:	6839      	ldr	r1, [r7, #0]
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 facb 	bl	800841e <USBD_CtlError>
            err++;
 8007e88:	7afb      	ldrb	r3, [r7, #11]
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	72fb      	strb	r3, [r7, #11]
          break;
 8007e8e:	e089      	b.n	8007fa4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d00b      	beq.n	8007eb4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	7c12      	ldrb	r2, [r2, #16]
 8007ea8:	f107 0108 	add.w	r1, r7, #8
 8007eac:	4610      	mov	r0, r2
 8007eae:	4798      	blx	r3
 8007eb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007eb2:	e077      	b.n	8007fa4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007eb4:	6839      	ldr	r1, [r7, #0]
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 fab1 	bl	800841e <USBD_CtlError>
            err++;
 8007ebc:	7afb      	ldrb	r3, [r7, #11]
 8007ebe:	3301      	adds	r3, #1
 8007ec0:	72fb      	strb	r3, [r7, #11]
          break;
 8007ec2:	e06f      	b.n	8007fa4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007eca:	68db      	ldr	r3, [r3, #12]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d00b      	beq.n	8007ee8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ed6:	68db      	ldr	r3, [r3, #12]
 8007ed8:	687a      	ldr	r2, [r7, #4]
 8007eda:	7c12      	ldrb	r2, [r2, #16]
 8007edc:	f107 0108 	add.w	r1, r7, #8
 8007ee0:	4610      	mov	r0, r2
 8007ee2:	4798      	blx	r3
 8007ee4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ee6:	e05d      	b.n	8007fa4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ee8:	6839      	ldr	r1, [r7, #0]
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 fa97 	bl	800841e <USBD_CtlError>
            err++;
 8007ef0:	7afb      	ldrb	r3, [r7, #11]
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ef6:	e055      	b.n	8007fa4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007efe:	691b      	ldr	r3, [r3, #16]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d00b      	beq.n	8007f1c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f0a:	691b      	ldr	r3, [r3, #16]
 8007f0c:	687a      	ldr	r2, [r7, #4]
 8007f0e:	7c12      	ldrb	r2, [r2, #16]
 8007f10:	f107 0108 	add.w	r1, r7, #8
 8007f14:	4610      	mov	r0, r2
 8007f16:	4798      	blx	r3
 8007f18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f1a:	e043      	b.n	8007fa4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f1c:	6839      	ldr	r1, [r7, #0]
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 fa7d 	bl	800841e <USBD_CtlError>
            err++;
 8007f24:	7afb      	ldrb	r3, [r7, #11]
 8007f26:	3301      	adds	r3, #1
 8007f28:	72fb      	strb	r3, [r7, #11]
          break;
 8007f2a:	e03b      	b.n	8007fa4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f32:	695b      	ldr	r3, [r3, #20]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d00b      	beq.n	8007f50 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f3e:	695b      	ldr	r3, [r3, #20]
 8007f40:	687a      	ldr	r2, [r7, #4]
 8007f42:	7c12      	ldrb	r2, [r2, #16]
 8007f44:	f107 0108 	add.w	r1, r7, #8
 8007f48:	4610      	mov	r0, r2
 8007f4a:	4798      	blx	r3
 8007f4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f4e:	e029      	b.n	8007fa4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f50:	6839      	ldr	r1, [r7, #0]
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 fa63 	bl	800841e <USBD_CtlError>
            err++;
 8007f58:	7afb      	ldrb	r3, [r7, #11]
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	72fb      	strb	r3, [r7, #11]
          break;
 8007f5e:	e021      	b.n	8007fa4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f66:	699b      	ldr	r3, [r3, #24]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d00b      	beq.n	8007f84 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f72:	699b      	ldr	r3, [r3, #24]
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	7c12      	ldrb	r2, [r2, #16]
 8007f78:	f107 0108 	add.w	r1, r7, #8
 8007f7c:	4610      	mov	r0, r2
 8007f7e:	4798      	blx	r3
 8007f80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f82:	e00f      	b.n	8007fa4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f84:	6839      	ldr	r1, [r7, #0]
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 fa49 	bl	800841e <USBD_CtlError>
            err++;
 8007f8c:	7afb      	ldrb	r3, [r7, #11]
 8007f8e:	3301      	adds	r3, #1
 8007f90:	72fb      	strb	r3, [r7, #11]
          break;
 8007f92:	e007      	b.n	8007fa4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007f94:	6839      	ldr	r1, [r7, #0]
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 fa41 	bl	800841e <USBD_CtlError>
          err++;
 8007f9c:	7afb      	ldrb	r3, [r7, #11]
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007fa2:	bf00      	nop
      }
      break;
 8007fa4:	e037      	b.n	8008016 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	7c1b      	ldrb	r3, [r3, #16]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d109      	bne.n	8007fc2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fb6:	f107 0208 	add.w	r2, r7, #8
 8007fba:	4610      	mov	r0, r2
 8007fbc:	4798      	blx	r3
 8007fbe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007fc0:	e029      	b.n	8008016 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007fc2:	6839      	ldr	r1, [r7, #0]
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 fa2a 	bl	800841e <USBD_CtlError>
        err++;
 8007fca:	7afb      	ldrb	r3, [r7, #11]
 8007fcc:	3301      	adds	r3, #1
 8007fce:	72fb      	strb	r3, [r7, #11]
      break;
 8007fd0:	e021      	b.n	8008016 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	7c1b      	ldrb	r3, [r3, #16]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d10d      	bne.n	8007ff6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fe2:	f107 0208 	add.w	r2, r7, #8
 8007fe6:	4610      	mov	r0, r2
 8007fe8:	4798      	blx	r3
 8007fea:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	3301      	adds	r3, #1
 8007ff0:	2207      	movs	r2, #7
 8007ff2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ff4:	e00f      	b.n	8008016 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007ff6:	6839      	ldr	r1, [r7, #0]
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 fa10 	bl	800841e <USBD_CtlError>
        err++;
 8007ffe:	7afb      	ldrb	r3, [r7, #11]
 8008000:	3301      	adds	r3, #1
 8008002:	72fb      	strb	r3, [r7, #11]
      break;
 8008004:	e007      	b.n	8008016 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008006:	6839      	ldr	r1, [r7, #0]
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 fa08 	bl	800841e <USBD_CtlError>
      err++;
 800800e:	7afb      	ldrb	r3, [r7, #11]
 8008010:	3301      	adds	r3, #1
 8008012:	72fb      	strb	r3, [r7, #11]
      break;
 8008014:	bf00      	nop
  }

  if (err != 0U)
 8008016:	7afb      	ldrb	r3, [r7, #11]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d11e      	bne.n	800805a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	88db      	ldrh	r3, [r3, #6]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d016      	beq.n	8008052 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008024:	893b      	ldrh	r3, [r7, #8]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d00e      	beq.n	8008048 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	88da      	ldrh	r2, [r3, #6]
 800802e:	893b      	ldrh	r3, [r7, #8]
 8008030:	4293      	cmp	r3, r2
 8008032:	bf28      	it	cs
 8008034:	4613      	movcs	r3, r2
 8008036:	b29b      	uxth	r3, r3
 8008038:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800803a:	893b      	ldrh	r3, [r7, #8]
 800803c:	461a      	mov	r2, r3
 800803e:	68f9      	ldr	r1, [r7, #12]
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 fa5d 	bl	8008500 <USBD_CtlSendData>
 8008046:	e009      	b.n	800805c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008048:	6839      	ldr	r1, [r7, #0]
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f000 f9e7 	bl	800841e <USBD_CtlError>
 8008050:	e004      	b.n	800805c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 faae 	bl	80085b4 <USBD_CtlSendStatus>
 8008058:	e000      	b.n	800805c <USBD_GetDescriptor+0x2cc>
    return;
 800805a:	bf00      	nop
  }
}
 800805c:	3710      	adds	r7, #16
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
 8008062:	bf00      	nop

08008064 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b084      	sub	sp, #16
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	889b      	ldrh	r3, [r3, #4]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d131      	bne.n	80080da <USBD_SetAddress+0x76>
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	88db      	ldrh	r3, [r3, #6]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d12d      	bne.n	80080da <USBD_SetAddress+0x76>
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	885b      	ldrh	r3, [r3, #2]
 8008082:	2b7f      	cmp	r3, #127	@ 0x7f
 8008084:	d829      	bhi.n	80080da <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	885b      	ldrh	r3, [r3, #2]
 800808a:	b2db      	uxtb	r3, r3
 800808c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008090:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008098:	b2db      	uxtb	r3, r3
 800809a:	2b03      	cmp	r3, #3
 800809c:	d104      	bne.n	80080a8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800809e:	6839      	ldr	r1, [r7, #0]
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 f9bc 	bl	800841e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080a6:	e01d      	b.n	80080e4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	7bfa      	ldrb	r2, [r7, #15]
 80080ac:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80080b0:	7bfb      	ldrb	r3, [r7, #15]
 80080b2:	4619      	mov	r1, r3
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 ff13 	bl	8008ee0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 fa7a 	bl	80085b4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80080c0:	7bfb      	ldrb	r3, [r7, #15]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d004      	beq.n	80080d0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2202      	movs	r2, #2
 80080ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080ce:	e009      	b.n	80080e4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2201      	movs	r2, #1
 80080d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080d8:	e004      	b.n	80080e4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80080da:	6839      	ldr	r1, [r7, #0]
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 f99e 	bl	800841e <USBD_CtlError>
  }
}
 80080e2:	bf00      	nop
 80080e4:	bf00      	nop
 80080e6:	3710      	adds	r7, #16
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080f6:	2300      	movs	r3, #0
 80080f8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	885b      	ldrh	r3, [r3, #2]
 80080fe:	b2da      	uxtb	r2, r3
 8008100:	4b4e      	ldr	r3, [pc, #312]	@ (800823c <USBD_SetConfig+0x150>)
 8008102:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008104:	4b4d      	ldr	r3, [pc, #308]	@ (800823c <USBD_SetConfig+0x150>)
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	2b01      	cmp	r3, #1
 800810a:	d905      	bls.n	8008118 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800810c:	6839      	ldr	r1, [r7, #0]
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 f985 	bl	800841e <USBD_CtlError>
    return USBD_FAIL;
 8008114:	2303      	movs	r3, #3
 8008116:	e08c      	b.n	8008232 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800811e:	b2db      	uxtb	r3, r3
 8008120:	2b02      	cmp	r3, #2
 8008122:	d002      	beq.n	800812a <USBD_SetConfig+0x3e>
 8008124:	2b03      	cmp	r3, #3
 8008126:	d029      	beq.n	800817c <USBD_SetConfig+0x90>
 8008128:	e075      	b.n	8008216 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800812a:	4b44      	ldr	r3, [pc, #272]	@ (800823c <USBD_SetConfig+0x150>)
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d020      	beq.n	8008174 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008132:	4b42      	ldr	r3, [pc, #264]	@ (800823c <USBD_SetConfig+0x150>)
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	461a      	mov	r2, r3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800813c:	4b3f      	ldr	r3, [pc, #252]	@ (800823c <USBD_SetConfig+0x150>)
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	4619      	mov	r1, r3
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f7fe ffe9 	bl	800711a <USBD_SetClassConfig>
 8008148:	4603      	mov	r3, r0
 800814a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800814c:	7bfb      	ldrb	r3, [r7, #15]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d008      	beq.n	8008164 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008152:	6839      	ldr	r1, [r7, #0]
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f000 f962 	bl	800841e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2202      	movs	r2, #2
 800815e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008162:	e065      	b.n	8008230 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 fa25 	bl	80085b4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2203      	movs	r2, #3
 800816e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008172:	e05d      	b.n	8008230 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 fa1d 	bl	80085b4 <USBD_CtlSendStatus>
      break;
 800817a:	e059      	b.n	8008230 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800817c:	4b2f      	ldr	r3, [pc, #188]	@ (800823c <USBD_SetConfig+0x150>)
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d112      	bne.n	80081aa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2202      	movs	r2, #2
 8008188:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800818c:	4b2b      	ldr	r3, [pc, #172]	@ (800823c <USBD_SetConfig+0x150>)
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	461a      	mov	r2, r3
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008196:	4b29      	ldr	r3, [pc, #164]	@ (800823c <USBD_SetConfig+0x150>)
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	4619      	mov	r1, r3
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f7fe ffd8 	bl	8007152 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 fa06 	bl	80085b4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80081a8:	e042      	b.n	8008230 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80081aa:	4b24      	ldr	r3, [pc, #144]	@ (800823c <USBD_SetConfig+0x150>)
 80081ac:	781b      	ldrb	r3, [r3, #0]
 80081ae:	461a      	mov	r2, r3
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d02a      	beq.n	800820e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	4619      	mov	r1, r3
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f7fe ffc6 	bl	8007152 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80081c6:	4b1d      	ldr	r3, [pc, #116]	@ (800823c <USBD_SetConfig+0x150>)
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	461a      	mov	r2, r3
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80081d0:	4b1a      	ldr	r3, [pc, #104]	@ (800823c <USBD_SetConfig+0x150>)
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	4619      	mov	r1, r3
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f7fe ff9f 	bl	800711a <USBD_SetClassConfig>
 80081dc:	4603      	mov	r3, r0
 80081de:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80081e0:	7bfb      	ldrb	r3, [r7, #15]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d00f      	beq.n	8008206 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80081e6:	6839      	ldr	r1, [r7, #0]
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f000 f918 	bl	800841e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	4619      	mov	r1, r3
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f7fe ffab 	bl	8007152 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2202      	movs	r2, #2
 8008200:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008204:	e014      	b.n	8008230 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 f9d4 	bl	80085b4 <USBD_CtlSendStatus>
      break;
 800820c:	e010      	b.n	8008230 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 f9d0 	bl	80085b4 <USBD_CtlSendStatus>
      break;
 8008214:	e00c      	b.n	8008230 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008216:	6839      	ldr	r1, [r7, #0]
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 f900 	bl	800841e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800821e:	4b07      	ldr	r3, [pc, #28]	@ (800823c <USBD_SetConfig+0x150>)
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	4619      	mov	r1, r3
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f7fe ff94 	bl	8007152 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800822a:	2303      	movs	r3, #3
 800822c:	73fb      	strb	r3, [r7, #15]
      break;
 800822e:	bf00      	nop
  }

  return ret;
 8008230:	7bfb      	ldrb	r3, [r7, #15]
}
 8008232:	4618      	mov	r0, r3
 8008234:	3710      	adds	r7, #16
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	200002ec 	.word	0x200002ec

08008240 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b082      	sub	sp, #8
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	88db      	ldrh	r3, [r3, #6]
 800824e:	2b01      	cmp	r3, #1
 8008250:	d004      	beq.n	800825c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008252:	6839      	ldr	r1, [r7, #0]
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 f8e2 	bl	800841e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800825a:	e023      	b.n	80082a4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008262:	b2db      	uxtb	r3, r3
 8008264:	2b02      	cmp	r3, #2
 8008266:	dc02      	bgt.n	800826e <USBD_GetConfig+0x2e>
 8008268:	2b00      	cmp	r3, #0
 800826a:	dc03      	bgt.n	8008274 <USBD_GetConfig+0x34>
 800826c:	e015      	b.n	800829a <USBD_GetConfig+0x5a>
 800826e:	2b03      	cmp	r3, #3
 8008270:	d00b      	beq.n	800828a <USBD_GetConfig+0x4a>
 8008272:	e012      	b.n	800829a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2200      	movs	r2, #0
 8008278:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	3308      	adds	r3, #8
 800827e:	2201      	movs	r2, #1
 8008280:	4619      	mov	r1, r3
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 f93c 	bl	8008500 <USBD_CtlSendData>
        break;
 8008288:	e00c      	b.n	80082a4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	3304      	adds	r3, #4
 800828e:	2201      	movs	r2, #1
 8008290:	4619      	mov	r1, r3
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 f934 	bl	8008500 <USBD_CtlSendData>
        break;
 8008298:	e004      	b.n	80082a4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800829a:	6839      	ldr	r1, [r7, #0]
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 f8be 	bl	800841e <USBD_CtlError>
        break;
 80082a2:	bf00      	nop
}
 80082a4:	bf00      	nop
 80082a6:	3708      	adds	r7, #8
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b082      	sub	sp, #8
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	3b01      	subs	r3, #1
 80082c0:	2b02      	cmp	r3, #2
 80082c2:	d81e      	bhi.n	8008302 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	88db      	ldrh	r3, [r3, #6]
 80082c8:	2b02      	cmp	r3, #2
 80082ca:	d004      	beq.n	80082d6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80082cc:	6839      	ldr	r1, [r7, #0]
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 f8a5 	bl	800841e <USBD_CtlError>
        break;
 80082d4:	e01a      	b.n	800830c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2201      	movs	r2, #1
 80082da:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d005      	beq.n	80082f2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	68db      	ldr	r3, [r3, #12]
 80082ea:	f043 0202 	orr.w	r2, r3, #2
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	330c      	adds	r3, #12
 80082f6:	2202      	movs	r2, #2
 80082f8:	4619      	mov	r1, r3
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 f900 	bl	8008500 <USBD_CtlSendData>
      break;
 8008300:	e004      	b.n	800830c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008302:	6839      	ldr	r1, [r7, #0]
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 f88a 	bl	800841e <USBD_CtlError>
      break;
 800830a:	bf00      	nop
  }
}
 800830c:	bf00      	nop
 800830e:	3708      	adds	r7, #8
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b082      	sub	sp, #8
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	885b      	ldrh	r3, [r3, #2]
 8008322:	2b01      	cmp	r3, #1
 8008324:	d107      	bne.n	8008336 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2201      	movs	r2, #1
 800832a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 f940 	bl	80085b4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008334:	e013      	b.n	800835e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	885b      	ldrh	r3, [r3, #2]
 800833a:	2b02      	cmp	r3, #2
 800833c:	d10b      	bne.n	8008356 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	889b      	ldrh	r3, [r3, #4]
 8008342:	0a1b      	lsrs	r3, r3, #8
 8008344:	b29b      	uxth	r3, r3
 8008346:	b2da      	uxtb	r2, r3
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 f930 	bl	80085b4 <USBD_CtlSendStatus>
}
 8008354:	e003      	b.n	800835e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008356:	6839      	ldr	r1, [r7, #0]
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f000 f860 	bl	800841e <USBD_CtlError>
}
 800835e:	bf00      	nop
 8008360:	3708      	adds	r7, #8
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}

08008366 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008366:	b580      	push	{r7, lr}
 8008368:	b082      	sub	sp, #8
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
 800836e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008376:	b2db      	uxtb	r3, r3
 8008378:	3b01      	subs	r3, #1
 800837a:	2b02      	cmp	r3, #2
 800837c:	d80b      	bhi.n	8008396 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	885b      	ldrh	r3, [r3, #2]
 8008382:	2b01      	cmp	r3, #1
 8008384:	d10c      	bne.n	80083a0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2200      	movs	r2, #0
 800838a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 f910 	bl	80085b4 <USBD_CtlSendStatus>
      }
      break;
 8008394:	e004      	b.n	80083a0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008396:	6839      	ldr	r1, [r7, #0]
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f000 f840 	bl	800841e <USBD_CtlError>
      break;
 800839e:	e000      	b.n	80083a2 <USBD_ClrFeature+0x3c>
      break;
 80083a0:	bf00      	nop
  }
}
 80083a2:	bf00      	nop
 80083a4:	3708      	adds	r7, #8
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}

080083aa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80083aa:	b580      	push	{r7, lr}
 80083ac:	b084      	sub	sp, #16
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
 80083b2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	781a      	ldrb	r2, [r3, #0]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	3301      	adds	r3, #1
 80083c4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	781a      	ldrb	r2, [r3, #0]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	3301      	adds	r3, #1
 80083d2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80083d4:	68f8      	ldr	r0, [r7, #12]
 80083d6:	f7ff fa40 	bl	800785a <SWAPBYTE>
 80083da:	4603      	mov	r3, r0
 80083dc:	461a      	mov	r2, r3
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	3301      	adds	r3, #1
 80083e6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	3301      	adds	r3, #1
 80083ec:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80083ee:	68f8      	ldr	r0, [r7, #12]
 80083f0:	f7ff fa33 	bl	800785a <SWAPBYTE>
 80083f4:	4603      	mov	r3, r0
 80083f6:	461a      	mov	r2, r3
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	3301      	adds	r3, #1
 8008400:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	3301      	adds	r3, #1
 8008406:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008408:	68f8      	ldr	r0, [r7, #12]
 800840a:	f7ff fa26 	bl	800785a <SWAPBYTE>
 800840e:	4603      	mov	r3, r0
 8008410:	461a      	mov	r2, r3
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	80da      	strh	r2, [r3, #6]
}
 8008416:	bf00      	nop
 8008418:	3710      	adds	r7, #16
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}

0800841e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800841e:	b580      	push	{r7, lr}
 8008420:	b082      	sub	sp, #8
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
 8008426:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008428:	2180      	movs	r1, #128	@ 0x80
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 fcee 	bl	8008e0c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008430:	2100      	movs	r1, #0
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 fcea 	bl	8008e0c <USBD_LL_StallEP>
}
 8008438:	bf00      	nop
 800843a:	3708      	adds	r7, #8
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b086      	sub	sp, #24
 8008444:	af00      	add	r7, sp, #0
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	60b9      	str	r1, [r7, #8]
 800844a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800844c:	2300      	movs	r3, #0
 800844e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d036      	beq.n	80084c4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800845a:	6938      	ldr	r0, [r7, #16]
 800845c:	f000 f836 	bl	80084cc <USBD_GetLen>
 8008460:	4603      	mov	r3, r0
 8008462:	3301      	adds	r3, #1
 8008464:	b29b      	uxth	r3, r3
 8008466:	005b      	lsls	r3, r3, #1
 8008468:	b29a      	uxth	r2, r3
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800846e:	7dfb      	ldrb	r3, [r7, #23]
 8008470:	68ba      	ldr	r2, [r7, #8]
 8008472:	4413      	add	r3, r2
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	7812      	ldrb	r2, [r2, #0]
 8008478:	701a      	strb	r2, [r3, #0]
  idx++;
 800847a:	7dfb      	ldrb	r3, [r7, #23]
 800847c:	3301      	adds	r3, #1
 800847e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008480:	7dfb      	ldrb	r3, [r7, #23]
 8008482:	68ba      	ldr	r2, [r7, #8]
 8008484:	4413      	add	r3, r2
 8008486:	2203      	movs	r2, #3
 8008488:	701a      	strb	r2, [r3, #0]
  idx++;
 800848a:	7dfb      	ldrb	r3, [r7, #23]
 800848c:	3301      	adds	r3, #1
 800848e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008490:	e013      	b.n	80084ba <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008492:	7dfb      	ldrb	r3, [r7, #23]
 8008494:	68ba      	ldr	r2, [r7, #8]
 8008496:	4413      	add	r3, r2
 8008498:	693a      	ldr	r2, [r7, #16]
 800849a:	7812      	ldrb	r2, [r2, #0]
 800849c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	3301      	adds	r3, #1
 80084a2:	613b      	str	r3, [r7, #16]
    idx++;
 80084a4:	7dfb      	ldrb	r3, [r7, #23]
 80084a6:	3301      	adds	r3, #1
 80084a8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80084aa:	7dfb      	ldrb	r3, [r7, #23]
 80084ac:	68ba      	ldr	r2, [r7, #8]
 80084ae:	4413      	add	r3, r2
 80084b0:	2200      	movs	r2, #0
 80084b2:	701a      	strb	r2, [r3, #0]
    idx++;
 80084b4:	7dfb      	ldrb	r3, [r7, #23]
 80084b6:	3301      	adds	r3, #1
 80084b8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d1e7      	bne.n	8008492 <USBD_GetString+0x52>
 80084c2:	e000      	b.n	80084c6 <USBD_GetString+0x86>
    return;
 80084c4:	bf00      	nop
  }
}
 80084c6:	3718      	adds	r7, #24
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b085      	sub	sp, #20
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80084d4:	2300      	movs	r3, #0
 80084d6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80084dc:	e005      	b.n	80084ea <USBD_GetLen+0x1e>
  {
    len++;
 80084de:	7bfb      	ldrb	r3, [r7, #15]
 80084e0:	3301      	adds	r3, #1
 80084e2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	3301      	adds	r3, #1
 80084e8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d1f5      	bne.n	80084de <USBD_GetLen+0x12>
  }

  return len;
 80084f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3714      	adds	r7, #20
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr

08008500 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	60f8      	str	r0, [r7, #12]
 8008508:	60b9      	str	r1, [r7, #8]
 800850a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2202      	movs	r2, #2
 8008510:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	68ba      	ldr	r2, [r7, #8]
 8008524:	2100      	movs	r1, #0
 8008526:	68f8      	ldr	r0, [r7, #12]
 8008528:	f000 fcf9 	bl	8008f1e <USBD_LL_Transmit>

  return USBD_OK;
 800852c:	2300      	movs	r3, #0
}
 800852e:	4618      	mov	r0, r3
 8008530:	3710      	adds	r7, #16
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}

08008536 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008536:	b580      	push	{r7, lr}
 8008538:	b084      	sub	sp, #16
 800853a:	af00      	add	r7, sp, #0
 800853c:	60f8      	str	r0, [r7, #12]
 800853e:	60b9      	str	r1, [r7, #8]
 8008540:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	68ba      	ldr	r2, [r7, #8]
 8008546:	2100      	movs	r1, #0
 8008548:	68f8      	ldr	r0, [r7, #12]
 800854a:	f000 fce8 	bl	8008f1e <USBD_LL_Transmit>

  return USBD_OK;
 800854e:	2300      	movs	r3, #0
}
 8008550:	4618      	mov	r0, r3
 8008552:	3710      	adds	r7, #16
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}

08008558 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	60b9      	str	r1, [r7, #8]
 8008562:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2203      	movs	r2, #3
 8008568:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	687a      	ldr	r2, [r7, #4]
 8008578:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	68ba      	ldr	r2, [r7, #8]
 8008580:	2100      	movs	r1, #0
 8008582:	68f8      	ldr	r0, [r7, #12]
 8008584:	f000 fcec 	bl	8008f60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008588:	2300      	movs	r3, #0
}
 800858a:	4618      	mov	r0, r3
 800858c:	3710      	adds	r7, #16
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}

08008592 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008592:	b580      	push	{r7, lr}
 8008594:	b084      	sub	sp, #16
 8008596:	af00      	add	r7, sp, #0
 8008598:	60f8      	str	r0, [r7, #12]
 800859a:	60b9      	str	r1, [r7, #8]
 800859c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	68ba      	ldr	r2, [r7, #8]
 80085a2:	2100      	movs	r1, #0
 80085a4:	68f8      	ldr	r0, [r7, #12]
 80085a6:	f000 fcdb 	bl	8008f60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80085aa:	2300      	movs	r3, #0
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3710      	adds	r7, #16
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b082      	sub	sp, #8
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2204      	movs	r2, #4
 80085c0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80085c4:	2300      	movs	r3, #0
 80085c6:	2200      	movs	r2, #0
 80085c8:	2100      	movs	r1, #0
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 fca7 	bl	8008f1e <USBD_LL_Transmit>

  return USBD_OK;
 80085d0:	2300      	movs	r3, #0
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3708      	adds	r7, #8
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}

080085da <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80085da:	b580      	push	{r7, lr}
 80085dc:	b082      	sub	sp, #8
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2205      	movs	r2, #5
 80085e6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80085ea:	2300      	movs	r3, #0
 80085ec:	2200      	movs	r2, #0
 80085ee:	2100      	movs	r1, #0
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 fcb5 	bl	8008f60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80085f6:	2300      	movs	r3, #0
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3708      	adds	r7, #8
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008604:	2200      	movs	r2, #0
 8008606:	4912      	ldr	r1, [pc, #72]	@ (8008650 <MX_USB_DEVICE_Init+0x50>)
 8008608:	4812      	ldr	r0, [pc, #72]	@ (8008654 <MX_USB_DEVICE_Init+0x54>)
 800860a:	f7fe fd09 	bl	8007020 <USBD_Init>
 800860e:	4603      	mov	r3, r0
 8008610:	2b00      	cmp	r3, #0
 8008612:	d001      	beq.n	8008618 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008614:	f7f9 f928 	bl	8001868 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008618:	490f      	ldr	r1, [pc, #60]	@ (8008658 <MX_USB_DEVICE_Init+0x58>)
 800861a:	480e      	ldr	r0, [pc, #56]	@ (8008654 <MX_USB_DEVICE_Init+0x54>)
 800861c:	f7fe fd30 	bl	8007080 <USBD_RegisterClass>
 8008620:	4603      	mov	r3, r0
 8008622:	2b00      	cmp	r3, #0
 8008624:	d001      	beq.n	800862a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008626:	f7f9 f91f 	bl	8001868 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800862a:	490c      	ldr	r1, [pc, #48]	@ (800865c <MX_USB_DEVICE_Init+0x5c>)
 800862c:	4809      	ldr	r0, [pc, #36]	@ (8008654 <MX_USB_DEVICE_Init+0x54>)
 800862e:	f7fe fc21 	bl	8006e74 <USBD_CDC_RegisterInterface>
 8008632:	4603      	mov	r3, r0
 8008634:	2b00      	cmp	r3, #0
 8008636:	d001      	beq.n	800863c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008638:	f7f9 f916 	bl	8001868 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800863c:	4805      	ldr	r0, [pc, #20]	@ (8008654 <MX_USB_DEVICE_Init+0x54>)
 800863e:	f7fe fd55 	bl	80070ec <USBD_Start>
 8008642:	4603      	mov	r3, r0
 8008644:	2b00      	cmp	r3, #0
 8008646:	d001      	beq.n	800864c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008648:	f7f9 f90e 	bl	8001868 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800864c:	bf00      	nop
 800864e:	bd80      	pop	{r7, pc}
 8008650:	200000ac 	.word	0x200000ac
 8008654:	200002f0 	.word	0x200002f0
 8008658:	20000018 	.word	0x20000018
 800865c:	20000098 	.word	0x20000098

08008660 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008664:	2200      	movs	r2, #0
 8008666:	4905      	ldr	r1, [pc, #20]	@ (800867c <CDC_Init_FS+0x1c>)
 8008668:	4805      	ldr	r0, [pc, #20]	@ (8008680 <CDC_Init_FS+0x20>)
 800866a:	f7fe fc1d 	bl	8006ea8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800866e:	4905      	ldr	r1, [pc, #20]	@ (8008684 <CDC_Init_FS+0x24>)
 8008670:	4803      	ldr	r0, [pc, #12]	@ (8008680 <CDC_Init_FS+0x20>)
 8008672:	f7fe fc3b 	bl	8006eec <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008676:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008678:	4618      	mov	r0, r3
 800867a:	bd80      	pop	{r7, pc}
 800867c:	20000dcc 	.word	0x20000dcc
 8008680:	200002f0 	.word	0x200002f0
 8008684:	200005cc 	.word	0x200005cc

08008688 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008688:	b480      	push	{r7}
 800868a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800868c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800868e:	4618      	mov	r0, r3
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr

08008698 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008698:	b480      	push	{r7}
 800869a:	b083      	sub	sp, #12
 800869c:	af00      	add	r7, sp, #0
 800869e:	4603      	mov	r3, r0
 80086a0:	6039      	str	r1, [r7, #0]
 80086a2:	71fb      	strb	r3, [r7, #7]
 80086a4:	4613      	mov	r3, r2
 80086a6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80086a8:	79fb      	ldrb	r3, [r7, #7]
 80086aa:	2b23      	cmp	r3, #35	@ 0x23
 80086ac:	d84a      	bhi.n	8008744 <CDC_Control_FS+0xac>
 80086ae:	a201      	add	r2, pc, #4	@ (adr r2, 80086b4 <CDC_Control_FS+0x1c>)
 80086b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b4:	08008745 	.word	0x08008745
 80086b8:	08008745 	.word	0x08008745
 80086bc:	08008745 	.word	0x08008745
 80086c0:	08008745 	.word	0x08008745
 80086c4:	08008745 	.word	0x08008745
 80086c8:	08008745 	.word	0x08008745
 80086cc:	08008745 	.word	0x08008745
 80086d0:	08008745 	.word	0x08008745
 80086d4:	08008745 	.word	0x08008745
 80086d8:	08008745 	.word	0x08008745
 80086dc:	08008745 	.word	0x08008745
 80086e0:	08008745 	.word	0x08008745
 80086e4:	08008745 	.word	0x08008745
 80086e8:	08008745 	.word	0x08008745
 80086ec:	08008745 	.word	0x08008745
 80086f0:	08008745 	.word	0x08008745
 80086f4:	08008745 	.word	0x08008745
 80086f8:	08008745 	.word	0x08008745
 80086fc:	08008745 	.word	0x08008745
 8008700:	08008745 	.word	0x08008745
 8008704:	08008745 	.word	0x08008745
 8008708:	08008745 	.word	0x08008745
 800870c:	08008745 	.word	0x08008745
 8008710:	08008745 	.word	0x08008745
 8008714:	08008745 	.word	0x08008745
 8008718:	08008745 	.word	0x08008745
 800871c:	08008745 	.word	0x08008745
 8008720:	08008745 	.word	0x08008745
 8008724:	08008745 	.word	0x08008745
 8008728:	08008745 	.word	0x08008745
 800872c:	08008745 	.word	0x08008745
 8008730:	08008745 	.word	0x08008745
 8008734:	08008745 	.word	0x08008745
 8008738:	08008745 	.word	0x08008745
 800873c:	08008745 	.word	0x08008745
 8008740:	08008745 	.word	0x08008745
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008744:	bf00      	nop
  }

  return (USBD_OK);
 8008746:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008748:	4618      	mov	r0, r3
 800874a:	370c      	adds	r7, #12
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800875e:	6879      	ldr	r1, [r7, #4]
 8008760:	4805      	ldr	r0, [pc, #20]	@ (8008778 <CDC_Receive_FS+0x24>)
 8008762:	f7fe fbc3 	bl	8006eec <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008766:	4804      	ldr	r0, [pc, #16]	@ (8008778 <CDC_Receive_FS+0x24>)
 8008768:	f7fe fc24 	bl	8006fb4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800876c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800876e:	4618      	mov	r0, r3
 8008770:	3708      	adds	r7, #8
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	200002f0 	.word	0x200002f0

0800877c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	460b      	mov	r3, r1
 8008786:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008788:	2300      	movs	r3, #0
 800878a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800878c:	4b0d      	ldr	r3, [pc, #52]	@ (80087c4 <CDC_Transmit_FS+0x48>)
 800878e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008792:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800879a:	2b00      	cmp	r3, #0
 800879c:	d001      	beq.n	80087a2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800879e:	2301      	movs	r3, #1
 80087a0:	e00b      	b.n	80087ba <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80087a2:	887b      	ldrh	r3, [r7, #2]
 80087a4:	461a      	mov	r2, r3
 80087a6:	6879      	ldr	r1, [r7, #4]
 80087a8:	4806      	ldr	r0, [pc, #24]	@ (80087c4 <CDC_Transmit_FS+0x48>)
 80087aa:	f7fe fb7d 	bl	8006ea8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80087ae:	4805      	ldr	r0, [pc, #20]	@ (80087c4 <CDC_Transmit_FS+0x48>)
 80087b0:	f7fe fbba 	bl	8006f28 <USBD_CDC_TransmitPacket>
 80087b4:	4603      	mov	r3, r0
 80087b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80087b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3710      	adds	r7, #16
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	bf00      	nop
 80087c4:	200002f0 	.word	0x200002f0

080087c8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b087      	sub	sp, #28
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	60b9      	str	r1, [r7, #8]
 80087d2:	4613      	mov	r3, r2
 80087d4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80087d6:	2300      	movs	r3, #0
 80087d8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80087da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80087de:	4618      	mov	r0, r3
 80087e0:	371c      	adds	r7, #28
 80087e2:	46bd      	mov	sp, r7
 80087e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e8:	4770      	bx	lr
	...

080087ec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	4603      	mov	r3, r0
 80087f4:	6039      	str	r1, [r7, #0]
 80087f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	2212      	movs	r2, #18
 80087fc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80087fe:	4b03      	ldr	r3, [pc, #12]	@ (800880c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008800:	4618      	mov	r0, r3
 8008802:	370c      	adds	r7, #12
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr
 800880c:	200000c8 	.word	0x200000c8

08008810 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008810:	b480      	push	{r7}
 8008812:	b083      	sub	sp, #12
 8008814:	af00      	add	r7, sp, #0
 8008816:	4603      	mov	r3, r0
 8008818:	6039      	str	r1, [r7, #0]
 800881a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	2204      	movs	r2, #4
 8008820:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008822:	4b03      	ldr	r3, [pc, #12]	@ (8008830 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008824:	4618      	mov	r0, r3
 8008826:	370c      	adds	r7, #12
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr
 8008830:	200000dc 	.word	0x200000dc

08008834 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b082      	sub	sp, #8
 8008838:	af00      	add	r7, sp, #0
 800883a:	4603      	mov	r3, r0
 800883c:	6039      	str	r1, [r7, #0]
 800883e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008840:	79fb      	ldrb	r3, [r7, #7]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d105      	bne.n	8008852 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008846:	683a      	ldr	r2, [r7, #0]
 8008848:	4907      	ldr	r1, [pc, #28]	@ (8008868 <USBD_FS_ProductStrDescriptor+0x34>)
 800884a:	4808      	ldr	r0, [pc, #32]	@ (800886c <USBD_FS_ProductStrDescriptor+0x38>)
 800884c:	f7ff fdf8 	bl	8008440 <USBD_GetString>
 8008850:	e004      	b.n	800885c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008852:	683a      	ldr	r2, [r7, #0]
 8008854:	4904      	ldr	r1, [pc, #16]	@ (8008868 <USBD_FS_ProductStrDescriptor+0x34>)
 8008856:	4805      	ldr	r0, [pc, #20]	@ (800886c <USBD_FS_ProductStrDescriptor+0x38>)
 8008858:	f7ff fdf2 	bl	8008440 <USBD_GetString>
  }
  return USBD_StrDesc;
 800885c:	4b02      	ldr	r3, [pc, #8]	@ (8008868 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800885e:	4618      	mov	r0, r3
 8008860:	3708      	adds	r7, #8
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}
 8008866:	bf00      	nop
 8008868:	200015cc 	.word	0x200015cc
 800886c:	08009a6c 	.word	0x08009a6c

08008870 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b082      	sub	sp, #8
 8008874:	af00      	add	r7, sp, #0
 8008876:	4603      	mov	r3, r0
 8008878:	6039      	str	r1, [r7, #0]
 800887a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800887c:	683a      	ldr	r2, [r7, #0]
 800887e:	4904      	ldr	r1, [pc, #16]	@ (8008890 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008880:	4804      	ldr	r0, [pc, #16]	@ (8008894 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008882:	f7ff fddd 	bl	8008440 <USBD_GetString>
  return USBD_StrDesc;
 8008886:	4b02      	ldr	r3, [pc, #8]	@ (8008890 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008888:	4618      	mov	r0, r3
 800888a:	3708      	adds	r7, #8
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}
 8008890:	200015cc 	.word	0x200015cc
 8008894:	08009a84 	.word	0x08009a84

08008898 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
 800889e:	4603      	mov	r3, r0
 80088a0:	6039      	str	r1, [r7, #0]
 80088a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	221a      	movs	r2, #26
 80088a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80088aa:	f000 f843 	bl	8008934 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80088ae:	4b02      	ldr	r3, [pc, #8]	@ (80088b8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3708      	adds	r7, #8
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}
 80088b8:	200000e0 	.word	0x200000e0

080088bc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b082      	sub	sp, #8
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	4603      	mov	r3, r0
 80088c4:	6039      	str	r1, [r7, #0]
 80088c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80088c8:	79fb      	ldrb	r3, [r7, #7]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d105      	bne.n	80088da <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80088ce:	683a      	ldr	r2, [r7, #0]
 80088d0:	4907      	ldr	r1, [pc, #28]	@ (80088f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80088d2:	4808      	ldr	r0, [pc, #32]	@ (80088f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80088d4:	f7ff fdb4 	bl	8008440 <USBD_GetString>
 80088d8:	e004      	b.n	80088e4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80088da:	683a      	ldr	r2, [r7, #0]
 80088dc:	4904      	ldr	r1, [pc, #16]	@ (80088f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80088de:	4805      	ldr	r0, [pc, #20]	@ (80088f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80088e0:	f7ff fdae 	bl	8008440 <USBD_GetString>
  }
  return USBD_StrDesc;
 80088e4:	4b02      	ldr	r3, [pc, #8]	@ (80088f0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3708      	adds	r7, #8
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
 80088ee:	bf00      	nop
 80088f0:	200015cc 	.word	0x200015cc
 80088f4:	08009a98 	.word	0x08009a98

080088f8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b082      	sub	sp, #8
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	4603      	mov	r3, r0
 8008900:	6039      	str	r1, [r7, #0]
 8008902:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008904:	79fb      	ldrb	r3, [r7, #7]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d105      	bne.n	8008916 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800890a:	683a      	ldr	r2, [r7, #0]
 800890c:	4907      	ldr	r1, [pc, #28]	@ (800892c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800890e:	4808      	ldr	r0, [pc, #32]	@ (8008930 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008910:	f7ff fd96 	bl	8008440 <USBD_GetString>
 8008914:	e004      	b.n	8008920 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008916:	683a      	ldr	r2, [r7, #0]
 8008918:	4904      	ldr	r1, [pc, #16]	@ (800892c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800891a:	4805      	ldr	r0, [pc, #20]	@ (8008930 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800891c:	f7ff fd90 	bl	8008440 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008920:	4b02      	ldr	r3, [pc, #8]	@ (800892c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008922:	4618      	mov	r0, r3
 8008924:	3708      	adds	r7, #8
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}
 800892a:	bf00      	nop
 800892c:	200015cc 	.word	0x200015cc
 8008930:	08009aa4 	.word	0x08009aa4

08008934 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800893a:	4b0f      	ldr	r3, [pc, #60]	@ (8008978 <Get_SerialNum+0x44>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008940:	4b0e      	ldr	r3, [pc, #56]	@ (800897c <Get_SerialNum+0x48>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008946:	4b0e      	ldr	r3, [pc, #56]	@ (8008980 <Get_SerialNum+0x4c>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800894c:	68fa      	ldr	r2, [r7, #12]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	4413      	add	r3, r2
 8008952:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d009      	beq.n	800896e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800895a:	2208      	movs	r2, #8
 800895c:	4909      	ldr	r1, [pc, #36]	@ (8008984 <Get_SerialNum+0x50>)
 800895e:	68f8      	ldr	r0, [r7, #12]
 8008960:	f000 f814 	bl	800898c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008964:	2204      	movs	r2, #4
 8008966:	4908      	ldr	r1, [pc, #32]	@ (8008988 <Get_SerialNum+0x54>)
 8008968:	68b8      	ldr	r0, [r7, #8]
 800896a:	f000 f80f 	bl	800898c <IntToUnicode>
  }
}
 800896e:	bf00      	nop
 8008970:	3710      	adds	r7, #16
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
 8008976:	bf00      	nop
 8008978:	1fff7a10 	.word	0x1fff7a10
 800897c:	1fff7a14 	.word	0x1fff7a14
 8008980:	1fff7a18 	.word	0x1fff7a18
 8008984:	200000e2 	.word	0x200000e2
 8008988:	200000f2 	.word	0x200000f2

0800898c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800898c:	b480      	push	{r7}
 800898e:	b087      	sub	sp, #28
 8008990:	af00      	add	r7, sp, #0
 8008992:	60f8      	str	r0, [r7, #12]
 8008994:	60b9      	str	r1, [r7, #8]
 8008996:	4613      	mov	r3, r2
 8008998:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800899a:	2300      	movs	r3, #0
 800899c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800899e:	2300      	movs	r3, #0
 80089a0:	75fb      	strb	r3, [r7, #23]
 80089a2:	e027      	b.n	80089f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	0f1b      	lsrs	r3, r3, #28
 80089a8:	2b09      	cmp	r3, #9
 80089aa:	d80b      	bhi.n	80089c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	0f1b      	lsrs	r3, r3, #28
 80089b0:	b2da      	uxtb	r2, r3
 80089b2:	7dfb      	ldrb	r3, [r7, #23]
 80089b4:	005b      	lsls	r3, r3, #1
 80089b6:	4619      	mov	r1, r3
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	440b      	add	r3, r1
 80089bc:	3230      	adds	r2, #48	@ 0x30
 80089be:	b2d2      	uxtb	r2, r2
 80089c0:	701a      	strb	r2, [r3, #0]
 80089c2:	e00a      	b.n	80089da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	0f1b      	lsrs	r3, r3, #28
 80089c8:	b2da      	uxtb	r2, r3
 80089ca:	7dfb      	ldrb	r3, [r7, #23]
 80089cc:	005b      	lsls	r3, r3, #1
 80089ce:	4619      	mov	r1, r3
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	440b      	add	r3, r1
 80089d4:	3237      	adds	r2, #55	@ 0x37
 80089d6:	b2d2      	uxtb	r2, r2
 80089d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	011b      	lsls	r3, r3, #4
 80089de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80089e0:	7dfb      	ldrb	r3, [r7, #23]
 80089e2:	005b      	lsls	r3, r3, #1
 80089e4:	3301      	adds	r3, #1
 80089e6:	68ba      	ldr	r2, [r7, #8]
 80089e8:	4413      	add	r3, r2
 80089ea:	2200      	movs	r2, #0
 80089ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80089ee:	7dfb      	ldrb	r3, [r7, #23]
 80089f0:	3301      	adds	r3, #1
 80089f2:	75fb      	strb	r3, [r7, #23]
 80089f4:	7dfa      	ldrb	r2, [r7, #23]
 80089f6:	79fb      	ldrb	r3, [r7, #7]
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d3d3      	bcc.n	80089a4 <IntToUnicode+0x18>
  }
}
 80089fc:	bf00      	nop
 80089fe:	bf00      	nop
 8008a00:	371c      	adds	r7, #28
 8008a02:	46bd      	mov	sp, r7
 8008a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a08:	4770      	bx	lr
	...

08008a0c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b08a      	sub	sp, #40	@ 0x28
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a14:	f107 0314 	add.w	r3, r7, #20
 8008a18:	2200      	movs	r2, #0
 8008a1a:	601a      	str	r2, [r3, #0]
 8008a1c:	605a      	str	r2, [r3, #4]
 8008a1e:	609a      	str	r2, [r3, #8]
 8008a20:	60da      	str	r2, [r3, #12]
 8008a22:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008a2c:	d147      	bne.n	8008abe <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a2e:	2300      	movs	r3, #0
 8008a30:	613b      	str	r3, [r7, #16]
 8008a32:	4b25      	ldr	r3, [pc, #148]	@ (8008ac8 <HAL_PCD_MspInit+0xbc>)
 8008a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a36:	4a24      	ldr	r2, [pc, #144]	@ (8008ac8 <HAL_PCD_MspInit+0xbc>)
 8008a38:	f043 0301 	orr.w	r3, r3, #1
 8008a3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8008a3e:	4b22      	ldr	r3, [pc, #136]	@ (8008ac8 <HAL_PCD_MspInit+0xbc>)
 8008a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a42:	f003 0301 	and.w	r3, r3, #1
 8008a46:	613b      	str	r3, [r7, #16]
 8008a48:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008a4a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008a4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008a50:	2300      	movs	r3, #0
 8008a52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a54:	2300      	movs	r3, #0
 8008a56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008a58:	f107 0314 	add.w	r3, r7, #20
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	481b      	ldr	r0, [pc, #108]	@ (8008acc <HAL_PCD_MspInit+0xc0>)
 8008a60:	f7fa f900 	bl	8002c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008a64:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8008a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a6a:	2302      	movs	r3, #2
 8008a6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a72:	2300      	movs	r3, #0
 8008a74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008a76:	230a      	movs	r3, #10
 8008a78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a7a:	f107 0314 	add.w	r3, r7, #20
 8008a7e:	4619      	mov	r1, r3
 8008a80:	4812      	ldr	r0, [pc, #72]	@ (8008acc <HAL_PCD_MspInit+0xc0>)
 8008a82:	f7fa f8ef 	bl	8002c64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008a86:	4b10      	ldr	r3, [pc, #64]	@ (8008ac8 <HAL_PCD_MspInit+0xbc>)
 8008a88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a8a:	4a0f      	ldr	r2, [pc, #60]	@ (8008ac8 <HAL_PCD_MspInit+0xbc>)
 8008a8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a90:	6353      	str	r3, [r2, #52]	@ 0x34
 8008a92:	2300      	movs	r3, #0
 8008a94:	60fb      	str	r3, [r7, #12]
 8008a96:	4b0c      	ldr	r3, [pc, #48]	@ (8008ac8 <HAL_PCD_MspInit+0xbc>)
 8008a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a9a:	4a0b      	ldr	r2, [pc, #44]	@ (8008ac8 <HAL_PCD_MspInit+0xbc>)
 8008a9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008aa0:	6453      	str	r3, [r2, #68]	@ 0x44
 8008aa2:	4b09      	ldr	r3, [pc, #36]	@ (8008ac8 <HAL_PCD_MspInit+0xbc>)
 8008aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008aa6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008aaa:	60fb      	str	r3, [r7, #12]
 8008aac:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008aae:	2200      	movs	r2, #0
 8008ab0:	2100      	movs	r1, #0
 8008ab2:	2043      	movs	r0, #67	@ 0x43
 8008ab4:	f7f9 ffb7 	bl	8002a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008ab8:	2043      	movs	r0, #67	@ 0x43
 8008aba:	f7f9 ffd0 	bl	8002a5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008abe:	bf00      	nop
 8008ac0:	3728      	adds	r7, #40	@ 0x28
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
 8008ac6:	bf00      	nop
 8008ac8:	40023800 	.word	0x40023800
 8008acc:	40020000 	.word	0x40020000

08008ad0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b082      	sub	sp, #8
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	4610      	mov	r0, r2
 8008ae8:	f7fe fb4d 	bl	8007186 <USBD_LL_SetupStage>
}
 8008aec:	bf00      	nop
 8008aee:	3708      	adds	r7, #8
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b082      	sub	sp, #8
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	460b      	mov	r3, r1
 8008afe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 8008b06:	78fa      	ldrb	r2, [r7, #3]
 8008b08:	6879      	ldr	r1, [r7, #4]
 8008b0a:	4613      	mov	r3, r2
 8008b0c:	00db      	lsls	r3, r3, #3
 8008b0e:	4413      	add	r3, r2
 8008b10:	009b      	lsls	r3, r3, #2
 8008b12:	440b      	add	r3, r1
 8008b14:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8008b18:	681a      	ldr	r2, [r3, #0]
 8008b1a:	78fb      	ldrb	r3, [r7, #3]
 8008b1c:	4619      	mov	r1, r3
 8008b1e:	f7fe fb87 	bl	8007230 <USBD_LL_DataOutStage>
}
 8008b22:	bf00      	nop
 8008b24:	3708      	adds	r7, #8
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}

08008b2a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b2a:	b580      	push	{r7, lr}
 8008b2c:	b082      	sub	sp, #8
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	6078      	str	r0, [r7, #4]
 8008b32:	460b      	mov	r3, r1
 8008b34:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 8008b3c:	78fa      	ldrb	r2, [r7, #3]
 8008b3e:	6879      	ldr	r1, [r7, #4]
 8008b40:	4613      	mov	r3, r2
 8008b42:	00db      	lsls	r3, r3, #3
 8008b44:	4413      	add	r3, r2
 8008b46:	009b      	lsls	r3, r3, #2
 8008b48:	440b      	add	r3, r1
 8008b4a:	334c      	adds	r3, #76	@ 0x4c
 8008b4c:	681a      	ldr	r2, [r3, #0]
 8008b4e:	78fb      	ldrb	r3, [r7, #3]
 8008b50:	4619      	mov	r1, r3
 8008b52:	f7fe fc20 	bl	8007396 <USBD_LL_DataInStage>
}
 8008b56:	bf00      	nop
 8008b58:	3708      	adds	r7, #8
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}

08008b5e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b5e:	b580      	push	{r7, lr}
 8008b60:	b082      	sub	sp, #8
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f7fe fd54 	bl	800761a <USBD_LL_SOF>
}
 8008b72:	bf00      	nop
 8008b74:	3708      	adds	r7, #8
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}

08008b7a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b7a:	b580      	push	{r7, lr}
 8008b7c:	b084      	sub	sp, #16
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008b82:	2301      	movs	r3, #1
 8008b84:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	68db      	ldr	r3, [r3, #12]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d102      	bne.n	8008b94 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	73fb      	strb	r3, [r7, #15]
 8008b92:	e008      	b.n	8008ba6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	68db      	ldr	r3, [r3, #12]
 8008b98:	2b02      	cmp	r3, #2
 8008b9a:	d102      	bne.n	8008ba2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	73fb      	strb	r3, [r7, #15]
 8008ba0:	e001      	b.n	8008ba6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008ba2:	f7f8 fe61 	bl	8001868 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008bac:	7bfa      	ldrb	r2, [r7, #15]
 8008bae:	4611      	mov	r1, r2
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f7fe fcf4 	bl	800759e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f7fe fc9c 	bl	80074fa <USBD_LL_Reset>
}
 8008bc2:	bf00      	nop
 8008bc4:	3710      	adds	r7, #16
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
	...

08008bcc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b082      	sub	sp, #8
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f7fe fcef 	bl	80075be <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	687a      	ldr	r2, [r7, #4]
 8008bec:	6812      	ldr	r2, [r2, #0]
 8008bee:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008bf2:	f043 0301 	orr.w	r3, r3, #1
 8008bf6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6a1b      	ldr	r3, [r3, #32]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d005      	beq.n	8008c0c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008c00:	4b04      	ldr	r3, [pc, #16]	@ (8008c14 <HAL_PCD_SuspendCallback+0x48>)
 8008c02:	691b      	ldr	r3, [r3, #16]
 8008c04:	4a03      	ldr	r2, [pc, #12]	@ (8008c14 <HAL_PCD_SuspendCallback+0x48>)
 8008c06:	f043 0306 	orr.w	r3, r3, #6
 8008c0a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008c0c:	bf00      	nop
 8008c0e:	3708      	adds	r7, #8
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}
 8008c14:	e000ed00 	.word	0xe000ed00

08008c18 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008c26:	4618      	mov	r0, r3
 8008c28:	f7fe fcdf 	bl	80075ea <USBD_LL_Resume>
}
 8008c2c:	bf00      	nop
 8008c2e:	3708      	adds	r7, #8
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b082      	sub	sp, #8
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	460b      	mov	r3, r1
 8008c3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008c46:	78fa      	ldrb	r2, [r7, #3]
 8008c48:	4611      	mov	r1, r2
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f7fe fd37 	bl	80076be <USBD_LL_IsoOUTIncomplete>
}
 8008c50:	bf00      	nop
 8008c52:	3708      	adds	r7, #8
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	460b      	mov	r3, r1
 8008c62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008c6a:	78fa      	ldrb	r2, [r7, #3]
 8008c6c:	4611      	mov	r1, r2
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f7fe fcf3 	bl	800765a <USBD_LL_IsoINIncomplete>
}
 8008c74:	bf00      	nop
 8008c76:	3708      	adds	r7, #8
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b082      	sub	sp, #8
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f7fe fd49 	bl	8007722 <USBD_LL_DevConnected>
}
 8008c90:	bf00      	nop
 8008c92:	3708      	adds	r7, #8
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b082      	sub	sp, #8
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f7fe fd46 	bl	8007738 <USBD_LL_DevDisconnected>
}
 8008cac:	bf00      	nop
 8008cae:	3708      	adds	r7, #8
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b082      	sub	sp, #8
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	781b      	ldrb	r3, [r3, #0]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d13c      	bne.n	8008d3e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008cc4:	4a20      	ldr	r2, [pc, #128]	@ (8008d48 <USBD_LL_Init+0x94>)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	4a1e      	ldr	r2, [pc, #120]	@ (8008d48 <USBD_LL_Init+0x94>)
 8008cd0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008cd4:	4b1c      	ldr	r3, [pc, #112]	@ (8008d48 <USBD_LL_Init+0x94>)
 8008cd6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008cda:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008cdc:	4b1a      	ldr	r3, [pc, #104]	@ (8008d48 <USBD_LL_Init+0x94>)
 8008cde:	2204      	movs	r2, #4
 8008ce0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008ce2:	4b19      	ldr	r3, [pc, #100]	@ (8008d48 <USBD_LL_Init+0x94>)
 8008ce4:	2202      	movs	r2, #2
 8008ce6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008ce8:	4b17      	ldr	r3, [pc, #92]	@ (8008d48 <USBD_LL_Init+0x94>)
 8008cea:	2200      	movs	r2, #0
 8008cec:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008cee:	4b16      	ldr	r3, [pc, #88]	@ (8008d48 <USBD_LL_Init+0x94>)
 8008cf0:	2202      	movs	r2, #2
 8008cf2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008cf4:	4b14      	ldr	r3, [pc, #80]	@ (8008d48 <USBD_LL_Init+0x94>)
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008cfa:	4b13      	ldr	r3, [pc, #76]	@ (8008d48 <USBD_LL_Init+0x94>)
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008d00:	4b11      	ldr	r3, [pc, #68]	@ (8008d48 <USBD_LL_Init+0x94>)
 8008d02:	2200      	movs	r2, #0
 8008d04:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8008d06:	4b10      	ldr	r3, [pc, #64]	@ (8008d48 <USBD_LL_Init+0x94>)
 8008d08:	2201      	movs	r2, #1
 8008d0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008d0c:	4b0e      	ldr	r3, [pc, #56]	@ (8008d48 <USBD_LL_Init+0x94>)
 8008d0e:	2200      	movs	r2, #0
 8008d10:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008d12:	480d      	ldr	r0, [pc, #52]	@ (8008d48 <USBD_LL_Init+0x94>)
 8008d14:	f7fa f973 	bl	8002ffe <HAL_PCD_Init>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d001      	beq.n	8008d22 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008d1e:	f7f8 fda3 	bl	8001868 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008d22:	2180      	movs	r1, #128	@ 0x80
 8008d24:	4808      	ldr	r0, [pc, #32]	@ (8008d48 <USBD_LL_Init+0x94>)
 8008d26:	f7fb fbca 	bl	80044be <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008d2a:	2240      	movs	r2, #64	@ 0x40
 8008d2c:	2100      	movs	r1, #0
 8008d2e:	4806      	ldr	r0, [pc, #24]	@ (8008d48 <USBD_LL_Init+0x94>)
 8008d30:	f7fb fb7e 	bl	8004430 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008d34:	2280      	movs	r2, #128	@ 0x80
 8008d36:	2101      	movs	r1, #1
 8008d38:	4803      	ldr	r0, [pc, #12]	@ (8008d48 <USBD_LL_Init+0x94>)
 8008d3a:	f7fb fb79 	bl	8004430 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008d3e:	2300      	movs	r3, #0
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3708      	adds	r7, #8
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}
 8008d48:	200017cc 	.word	0x200017cc

08008d4c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b084      	sub	sp, #16
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d54:	2300      	movs	r3, #0
 8008d56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008d62:	4618      	mov	r0, r3
 8008d64:	f7fa fa68 	bl	8003238 <HAL_PCD_Start>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d6c:	7bfb      	ldrb	r3, [r7, #15]
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f000 f942 	bl	8008ff8 <USBD_Get_USB_Status>
 8008d74:	4603      	mov	r3, r0
 8008d76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d78:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3710      	adds	r7, #16
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}

08008d82 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008d82:	b580      	push	{r7, lr}
 8008d84:	b084      	sub	sp, #16
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	6078      	str	r0, [r7, #4]
 8008d8a:	4608      	mov	r0, r1
 8008d8c:	4611      	mov	r1, r2
 8008d8e:	461a      	mov	r2, r3
 8008d90:	4603      	mov	r3, r0
 8008d92:	70fb      	strb	r3, [r7, #3]
 8008d94:	460b      	mov	r3, r1
 8008d96:	70bb      	strb	r3, [r7, #2]
 8008d98:	4613      	mov	r3, r2
 8008d9a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008da0:	2300      	movs	r3, #0
 8008da2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008daa:	78bb      	ldrb	r3, [r7, #2]
 8008dac:	883a      	ldrh	r2, [r7, #0]
 8008dae:	78f9      	ldrb	r1, [r7, #3]
 8008db0:	f7fa ff39 	bl	8003c26 <HAL_PCD_EP_Open>
 8008db4:	4603      	mov	r3, r0
 8008db6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008db8:	7bfb      	ldrb	r3, [r7, #15]
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f000 f91c 	bl	8008ff8 <USBD_Get_USB_Status>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3710      	adds	r7, #16
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}

08008dce <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008dce:	b580      	push	{r7, lr}
 8008dd0:	b084      	sub	sp, #16
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
 8008dd6:	460b      	mov	r3, r1
 8008dd8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dde:	2300      	movs	r3, #0
 8008de0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008de8:	78fa      	ldrb	r2, [r7, #3]
 8008dea:	4611      	mov	r1, r2
 8008dec:	4618      	mov	r0, r3
 8008dee:	f7fa ff82 	bl	8003cf6 <HAL_PCD_EP_Close>
 8008df2:	4603      	mov	r3, r0
 8008df4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008df6:	7bfb      	ldrb	r3, [r7, #15]
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f000 f8fd 	bl	8008ff8 <USBD_Get_USB_Status>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e02:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3710      	adds	r7, #16
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}

08008e0c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b084      	sub	sp, #16
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	460b      	mov	r3, r1
 8008e16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008e26:	78fa      	ldrb	r2, [r7, #3]
 8008e28:	4611      	mov	r1, r2
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f7fb f85a 	bl	8003ee4 <HAL_PCD_EP_SetStall>
 8008e30:	4603      	mov	r3, r0
 8008e32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e34:	7bfb      	ldrb	r3, [r7, #15]
 8008e36:	4618      	mov	r0, r3
 8008e38:	f000 f8de 	bl	8008ff8 <USBD_Get_USB_Status>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e40:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3710      	adds	r7, #16
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}

08008e4a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e4a:	b580      	push	{r7, lr}
 8008e4c:	b084      	sub	sp, #16
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	6078      	str	r0, [r7, #4]
 8008e52:	460b      	mov	r3, r1
 8008e54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e56:	2300      	movs	r3, #0
 8008e58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008e64:	78fa      	ldrb	r2, [r7, #3]
 8008e66:	4611      	mov	r1, r2
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f7fb f89f 	bl	8003fac <HAL_PCD_EP_ClrStall>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e72:	7bfb      	ldrb	r3, [r7, #15]
 8008e74:	4618      	mov	r0, r3
 8008e76:	f000 f8bf 	bl	8008ff8 <USBD_Get_USB_Status>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3710      	adds	r7, #16
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}

08008e88 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b085      	sub	sp, #20
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	460b      	mov	r3, r1
 8008e92:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008e9a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008e9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	da0b      	bge.n	8008ebc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008ea4:	78fb      	ldrb	r3, [r7, #3]
 8008ea6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008eaa:	68f9      	ldr	r1, [r7, #12]
 8008eac:	4613      	mov	r3, r2
 8008eae:	00db      	lsls	r3, r3, #3
 8008eb0:	4413      	add	r3, r2
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	440b      	add	r3, r1
 8008eb6:	333e      	adds	r3, #62	@ 0x3e
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	e00b      	b.n	8008ed4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008ebc:	78fb      	ldrb	r3, [r7, #3]
 8008ebe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008ec2:	68f9      	ldr	r1, [r7, #12]
 8008ec4:	4613      	mov	r3, r2
 8008ec6:	00db      	lsls	r3, r3, #3
 8008ec8:	4413      	add	r3, r2
 8008eca:	009b      	lsls	r3, r3, #2
 8008ecc:	440b      	add	r3, r1
 8008ece:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 8008ed2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3714      	adds	r7, #20
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr

08008ee0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	460b      	mov	r3, r1
 8008eea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008eec:	2300      	movs	r3, #0
 8008eee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008efa:	78fa      	ldrb	r2, [r7, #3]
 8008efc:	4611      	mov	r1, r2
 8008efe:	4618      	mov	r0, r3
 8008f00:	f7fa fe6c 	bl	8003bdc <HAL_PCD_SetAddress>
 8008f04:	4603      	mov	r3, r0
 8008f06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f08:	7bfb      	ldrb	r3, [r7, #15]
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f000 f874 	bl	8008ff8 <USBD_Get_USB_Status>
 8008f10:	4603      	mov	r3, r0
 8008f12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f14:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3710      	adds	r7, #16
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}

08008f1e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008f1e:	b580      	push	{r7, lr}
 8008f20:	b086      	sub	sp, #24
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	60f8      	str	r0, [r7, #12]
 8008f26:	607a      	str	r2, [r7, #4]
 8008f28:	603b      	str	r3, [r7, #0]
 8008f2a:	460b      	mov	r3, r1
 8008f2c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f32:	2300      	movs	r3, #0
 8008f34:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008f3c:	7af9      	ldrb	r1, [r7, #11]
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	687a      	ldr	r2, [r7, #4]
 8008f42:	f7fa ff85 	bl	8003e50 <HAL_PCD_EP_Transmit>
 8008f46:	4603      	mov	r3, r0
 8008f48:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f4a:	7dfb      	ldrb	r3, [r7, #23]
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f000 f853 	bl	8008ff8 <USBD_Get_USB_Status>
 8008f52:	4603      	mov	r3, r0
 8008f54:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008f56:	7dbb      	ldrb	r3, [r7, #22]
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3718      	adds	r7, #24
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b086      	sub	sp, #24
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	60f8      	str	r0, [r7, #12]
 8008f68:	607a      	str	r2, [r7, #4]
 8008f6a:	603b      	str	r3, [r7, #0]
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f70:	2300      	movs	r3, #0
 8008f72:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f74:	2300      	movs	r3, #0
 8008f76:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008f7e:	7af9      	ldrb	r1, [r7, #11]
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	687a      	ldr	r2, [r7, #4]
 8008f84:	f7fa ff01 	bl	8003d8a <HAL_PCD_EP_Receive>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f8c:	7dfb      	ldrb	r3, [r7, #23]
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f000 f832 	bl	8008ff8 <USBD_Get_USB_Status>
 8008f94:	4603      	mov	r3, r0
 8008f96:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008f98:	7dbb      	ldrb	r3, [r7, #22]
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3718      	adds	r7, #24
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}

08008fa2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008fa2:	b580      	push	{r7, lr}
 8008fa4:	b082      	sub	sp, #8
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	6078      	str	r0, [r7, #4]
 8008faa:	460b      	mov	r3, r1
 8008fac:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008fb4:	78fa      	ldrb	r2, [r7, #3]
 8008fb6:	4611      	mov	r1, r2
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f7fa ff31 	bl	8003e20 <HAL_PCD_EP_GetRxCount>
 8008fbe:	4603      	mov	r3, r0
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3708      	adds	r7, #8
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008fd0:	4b03      	ldr	r3, [pc, #12]	@ (8008fe0 <USBD_static_malloc+0x18>)
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	370c      	adds	r7, #12
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fdc:	4770      	bx	lr
 8008fde:	bf00      	nop
 8008fe0:	20001cd8 	.word	0x20001cd8

08008fe4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b083      	sub	sp, #12
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]

}
 8008fec:	bf00      	nop
 8008fee:	370c      	adds	r7, #12
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr

08008ff8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b085      	sub	sp, #20
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	4603      	mov	r3, r0
 8009000:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009002:	2300      	movs	r3, #0
 8009004:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009006:	79fb      	ldrb	r3, [r7, #7]
 8009008:	2b03      	cmp	r3, #3
 800900a:	d817      	bhi.n	800903c <USBD_Get_USB_Status+0x44>
 800900c:	a201      	add	r2, pc, #4	@ (adr r2, 8009014 <USBD_Get_USB_Status+0x1c>)
 800900e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009012:	bf00      	nop
 8009014:	08009025 	.word	0x08009025
 8009018:	0800902b 	.word	0x0800902b
 800901c:	08009031 	.word	0x08009031
 8009020:	08009037 	.word	0x08009037
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009024:	2300      	movs	r3, #0
 8009026:	73fb      	strb	r3, [r7, #15]
    break;
 8009028:	e00b      	b.n	8009042 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800902a:	2303      	movs	r3, #3
 800902c:	73fb      	strb	r3, [r7, #15]
    break;
 800902e:	e008      	b.n	8009042 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009030:	2301      	movs	r3, #1
 8009032:	73fb      	strb	r3, [r7, #15]
    break;
 8009034:	e005      	b.n	8009042 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009036:	2303      	movs	r3, #3
 8009038:	73fb      	strb	r3, [r7, #15]
    break;
 800903a:	e002      	b.n	8009042 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800903c:	2303      	movs	r3, #3
 800903e:	73fb      	strb	r3, [r7, #15]
    break;
 8009040:	bf00      	nop
  }
  return usb_status;
 8009042:	7bfb      	ldrb	r3, [r7, #15]
}
 8009044:	4618      	mov	r0, r3
 8009046:	3714      	adds	r7, #20
 8009048:	46bd      	mov	sp, r7
 800904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904e:	4770      	bx	lr

08009050 <siprintf>:
 8009050:	b40e      	push	{r1, r2, r3}
 8009052:	b500      	push	{lr}
 8009054:	b09c      	sub	sp, #112	@ 0x70
 8009056:	ab1d      	add	r3, sp, #116	@ 0x74
 8009058:	9002      	str	r0, [sp, #8]
 800905a:	9006      	str	r0, [sp, #24]
 800905c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009060:	4809      	ldr	r0, [pc, #36]	@ (8009088 <siprintf+0x38>)
 8009062:	9107      	str	r1, [sp, #28]
 8009064:	9104      	str	r1, [sp, #16]
 8009066:	4909      	ldr	r1, [pc, #36]	@ (800908c <siprintf+0x3c>)
 8009068:	f853 2b04 	ldr.w	r2, [r3], #4
 800906c:	9105      	str	r1, [sp, #20]
 800906e:	6800      	ldr	r0, [r0, #0]
 8009070:	9301      	str	r3, [sp, #4]
 8009072:	a902      	add	r1, sp, #8
 8009074:	f000 f994 	bl	80093a0 <_svfiprintf_r>
 8009078:	9b02      	ldr	r3, [sp, #8]
 800907a:	2200      	movs	r2, #0
 800907c:	701a      	strb	r2, [r3, #0]
 800907e:	b01c      	add	sp, #112	@ 0x70
 8009080:	f85d eb04 	ldr.w	lr, [sp], #4
 8009084:	b003      	add	sp, #12
 8009086:	4770      	bx	lr
 8009088:	200000fc 	.word	0x200000fc
 800908c:	ffff0208 	.word	0xffff0208

08009090 <memset>:
 8009090:	4402      	add	r2, r0
 8009092:	4603      	mov	r3, r0
 8009094:	4293      	cmp	r3, r2
 8009096:	d100      	bne.n	800909a <memset+0xa>
 8009098:	4770      	bx	lr
 800909a:	f803 1b01 	strb.w	r1, [r3], #1
 800909e:	e7f9      	b.n	8009094 <memset+0x4>

080090a0 <__errno>:
 80090a0:	4b01      	ldr	r3, [pc, #4]	@ (80090a8 <__errno+0x8>)
 80090a2:	6818      	ldr	r0, [r3, #0]
 80090a4:	4770      	bx	lr
 80090a6:	bf00      	nop
 80090a8:	200000fc 	.word	0x200000fc

080090ac <__libc_init_array>:
 80090ac:	b570      	push	{r4, r5, r6, lr}
 80090ae:	4d0d      	ldr	r5, [pc, #52]	@ (80090e4 <__libc_init_array+0x38>)
 80090b0:	4c0d      	ldr	r4, [pc, #52]	@ (80090e8 <__libc_init_array+0x3c>)
 80090b2:	1b64      	subs	r4, r4, r5
 80090b4:	10a4      	asrs	r4, r4, #2
 80090b6:	2600      	movs	r6, #0
 80090b8:	42a6      	cmp	r6, r4
 80090ba:	d109      	bne.n	80090d0 <__libc_init_array+0x24>
 80090bc:	4d0b      	ldr	r5, [pc, #44]	@ (80090ec <__libc_init_array+0x40>)
 80090be:	4c0c      	ldr	r4, [pc, #48]	@ (80090f0 <__libc_init_array+0x44>)
 80090c0:	f000 fc66 	bl	8009990 <_init>
 80090c4:	1b64      	subs	r4, r4, r5
 80090c6:	10a4      	asrs	r4, r4, #2
 80090c8:	2600      	movs	r6, #0
 80090ca:	42a6      	cmp	r6, r4
 80090cc:	d105      	bne.n	80090da <__libc_init_array+0x2e>
 80090ce:	bd70      	pop	{r4, r5, r6, pc}
 80090d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80090d4:	4798      	blx	r3
 80090d6:	3601      	adds	r6, #1
 80090d8:	e7ee      	b.n	80090b8 <__libc_init_array+0xc>
 80090da:	f855 3b04 	ldr.w	r3, [r5], #4
 80090de:	4798      	blx	r3
 80090e0:	3601      	adds	r6, #1
 80090e2:	e7f2      	b.n	80090ca <__libc_init_array+0x1e>
 80090e4:	08009b00 	.word	0x08009b00
 80090e8:	08009b00 	.word	0x08009b00
 80090ec:	08009b00 	.word	0x08009b00
 80090f0:	08009b04 	.word	0x08009b04

080090f4 <__retarget_lock_acquire_recursive>:
 80090f4:	4770      	bx	lr

080090f6 <__retarget_lock_release_recursive>:
 80090f6:	4770      	bx	lr

080090f8 <_free_r>:
 80090f8:	b538      	push	{r3, r4, r5, lr}
 80090fa:	4605      	mov	r5, r0
 80090fc:	2900      	cmp	r1, #0
 80090fe:	d041      	beq.n	8009184 <_free_r+0x8c>
 8009100:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009104:	1f0c      	subs	r4, r1, #4
 8009106:	2b00      	cmp	r3, #0
 8009108:	bfb8      	it	lt
 800910a:	18e4      	addlt	r4, r4, r3
 800910c:	f000 f8e0 	bl	80092d0 <__malloc_lock>
 8009110:	4a1d      	ldr	r2, [pc, #116]	@ (8009188 <_free_r+0x90>)
 8009112:	6813      	ldr	r3, [r2, #0]
 8009114:	b933      	cbnz	r3, 8009124 <_free_r+0x2c>
 8009116:	6063      	str	r3, [r4, #4]
 8009118:	6014      	str	r4, [r2, #0]
 800911a:	4628      	mov	r0, r5
 800911c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009120:	f000 b8dc 	b.w	80092dc <__malloc_unlock>
 8009124:	42a3      	cmp	r3, r4
 8009126:	d908      	bls.n	800913a <_free_r+0x42>
 8009128:	6820      	ldr	r0, [r4, #0]
 800912a:	1821      	adds	r1, r4, r0
 800912c:	428b      	cmp	r3, r1
 800912e:	bf01      	itttt	eq
 8009130:	6819      	ldreq	r1, [r3, #0]
 8009132:	685b      	ldreq	r3, [r3, #4]
 8009134:	1809      	addeq	r1, r1, r0
 8009136:	6021      	streq	r1, [r4, #0]
 8009138:	e7ed      	b.n	8009116 <_free_r+0x1e>
 800913a:	461a      	mov	r2, r3
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	b10b      	cbz	r3, 8009144 <_free_r+0x4c>
 8009140:	42a3      	cmp	r3, r4
 8009142:	d9fa      	bls.n	800913a <_free_r+0x42>
 8009144:	6811      	ldr	r1, [r2, #0]
 8009146:	1850      	adds	r0, r2, r1
 8009148:	42a0      	cmp	r0, r4
 800914a:	d10b      	bne.n	8009164 <_free_r+0x6c>
 800914c:	6820      	ldr	r0, [r4, #0]
 800914e:	4401      	add	r1, r0
 8009150:	1850      	adds	r0, r2, r1
 8009152:	4283      	cmp	r3, r0
 8009154:	6011      	str	r1, [r2, #0]
 8009156:	d1e0      	bne.n	800911a <_free_r+0x22>
 8009158:	6818      	ldr	r0, [r3, #0]
 800915a:	685b      	ldr	r3, [r3, #4]
 800915c:	6053      	str	r3, [r2, #4]
 800915e:	4408      	add	r0, r1
 8009160:	6010      	str	r0, [r2, #0]
 8009162:	e7da      	b.n	800911a <_free_r+0x22>
 8009164:	d902      	bls.n	800916c <_free_r+0x74>
 8009166:	230c      	movs	r3, #12
 8009168:	602b      	str	r3, [r5, #0]
 800916a:	e7d6      	b.n	800911a <_free_r+0x22>
 800916c:	6820      	ldr	r0, [r4, #0]
 800916e:	1821      	adds	r1, r4, r0
 8009170:	428b      	cmp	r3, r1
 8009172:	bf04      	itt	eq
 8009174:	6819      	ldreq	r1, [r3, #0]
 8009176:	685b      	ldreq	r3, [r3, #4]
 8009178:	6063      	str	r3, [r4, #4]
 800917a:	bf04      	itt	eq
 800917c:	1809      	addeq	r1, r1, r0
 800917e:	6021      	streq	r1, [r4, #0]
 8009180:	6054      	str	r4, [r2, #4]
 8009182:	e7ca      	b.n	800911a <_free_r+0x22>
 8009184:	bd38      	pop	{r3, r4, r5, pc}
 8009186:	bf00      	nop
 8009188:	2000203c 	.word	0x2000203c

0800918c <sbrk_aligned>:
 800918c:	b570      	push	{r4, r5, r6, lr}
 800918e:	4e0f      	ldr	r6, [pc, #60]	@ (80091cc <sbrk_aligned+0x40>)
 8009190:	460c      	mov	r4, r1
 8009192:	6831      	ldr	r1, [r6, #0]
 8009194:	4605      	mov	r5, r0
 8009196:	b911      	cbnz	r1, 800919e <sbrk_aligned+0x12>
 8009198:	f000 fba6 	bl	80098e8 <_sbrk_r>
 800919c:	6030      	str	r0, [r6, #0]
 800919e:	4621      	mov	r1, r4
 80091a0:	4628      	mov	r0, r5
 80091a2:	f000 fba1 	bl	80098e8 <_sbrk_r>
 80091a6:	1c43      	adds	r3, r0, #1
 80091a8:	d103      	bne.n	80091b2 <sbrk_aligned+0x26>
 80091aa:	f04f 34ff 	mov.w	r4, #4294967295
 80091ae:	4620      	mov	r0, r4
 80091b0:	bd70      	pop	{r4, r5, r6, pc}
 80091b2:	1cc4      	adds	r4, r0, #3
 80091b4:	f024 0403 	bic.w	r4, r4, #3
 80091b8:	42a0      	cmp	r0, r4
 80091ba:	d0f8      	beq.n	80091ae <sbrk_aligned+0x22>
 80091bc:	1a21      	subs	r1, r4, r0
 80091be:	4628      	mov	r0, r5
 80091c0:	f000 fb92 	bl	80098e8 <_sbrk_r>
 80091c4:	3001      	adds	r0, #1
 80091c6:	d1f2      	bne.n	80091ae <sbrk_aligned+0x22>
 80091c8:	e7ef      	b.n	80091aa <sbrk_aligned+0x1e>
 80091ca:	bf00      	nop
 80091cc:	20002038 	.word	0x20002038

080091d0 <_malloc_r>:
 80091d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091d4:	1ccd      	adds	r5, r1, #3
 80091d6:	f025 0503 	bic.w	r5, r5, #3
 80091da:	3508      	adds	r5, #8
 80091dc:	2d0c      	cmp	r5, #12
 80091de:	bf38      	it	cc
 80091e0:	250c      	movcc	r5, #12
 80091e2:	2d00      	cmp	r5, #0
 80091e4:	4606      	mov	r6, r0
 80091e6:	db01      	blt.n	80091ec <_malloc_r+0x1c>
 80091e8:	42a9      	cmp	r1, r5
 80091ea:	d904      	bls.n	80091f6 <_malloc_r+0x26>
 80091ec:	230c      	movs	r3, #12
 80091ee:	6033      	str	r3, [r6, #0]
 80091f0:	2000      	movs	r0, #0
 80091f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80092cc <_malloc_r+0xfc>
 80091fa:	f000 f869 	bl	80092d0 <__malloc_lock>
 80091fe:	f8d8 3000 	ldr.w	r3, [r8]
 8009202:	461c      	mov	r4, r3
 8009204:	bb44      	cbnz	r4, 8009258 <_malloc_r+0x88>
 8009206:	4629      	mov	r1, r5
 8009208:	4630      	mov	r0, r6
 800920a:	f7ff ffbf 	bl	800918c <sbrk_aligned>
 800920e:	1c43      	adds	r3, r0, #1
 8009210:	4604      	mov	r4, r0
 8009212:	d158      	bne.n	80092c6 <_malloc_r+0xf6>
 8009214:	f8d8 4000 	ldr.w	r4, [r8]
 8009218:	4627      	mov	r7, r4
 800921a:	2f00      	cmp	r7, #0
 800921c:	d143      	bne.n	80092a6 <_malloc_r+0xd6>
 800921e:	2c00      	cmp	r4, #0
 8009220:	d04b      	beq.n	80092ba <_malloc_r+0xea>
 8009222:	6823      	ldr	r3, [r4, #0]
 8009224:	4639      	mov	r1, r7
 8009226:	4630      	mov	r0, r6
 8009228:	eb04 0903 	add.w	r9, r4, r3
 800922c:	f000 fb5c 	bl	80098e8 <_sbrk_r>
 8009230:	4581      	cmp	r9, r0
 8009232:	d142      	bne.n	80092ba <_malloc_r+0xea>
 8009234:	6821      	ldr	r1, [r4, #0]
 8009236:	1a6d      	subs	r5, r5, r1
 8009238:	4629      	mov	r1, r5
 800923a:	4630      	mov	r0, r6
 800923c:	f7ff ffa6 	bl	800918c <sbrk_aligned>
 8009240:	3001      	adds	r0, #1
 8009242:	d03a      	beq.n	80092ba <_malloc_r+0xea>
 8009244:	6823      	ldr	r3, [r4, #0]
 8009246:	442b      	add	r3, r5
 8009248:	6023      	str	r3, [r4, #0]
 800924a:	f8d8 3000 	ldr.w	r3, [r8]
 800924e:	685a      	ldr	r2, [r3, #4]
 8009250:	bb62      	cbnz	r2, 80092ac <_malloc_r+0xdc>
 8009252:	f8c8 7000 	str.w	r7, [r8]
 8009256:	e00f      	b.n	8009278 <_malloc_r+0xa8>
 8009258:	6822      	ldr	r2, [r4, #0]
 800925a:	1b52      	subs	r2, r2, r5
 800925c:	d420      	bmi.n	80092a0 <_malloc_r+0xd0>
 800925e:	2a0b      	cmp	r2, #11
 8009260:	d917      	bls.n	8009292 <_malloc_r+0xc2>
 8009262:	1961      	adds	r1, r4, r5
 8009264:	42a3      	cmp	r3, r4
 8009266:	6025      	str	r5, [r4, #0]
 8009268:	bf18      	it	ne
 800926a:	6059      	strne	r1, [r3, #4]
 800926c:	6863      	ldr	r3, [r4, #4]
 800926e:	bf08      	it	eq
 8009270:	f8c8 1000 	streq.w	r1, [r8]
 8009274:	5162      	str	r2, [r4, r5]
 8009276:	604b      	str	r3, [r1, #4]
 8009278:	4630      	mov	r0, r6
 800927a:	f000 f82f 	bl	80092dc <__malloc_unlock>
 800927e:	f104 000b 	add.w	r0, r4, #11
 8009282:	1d23      	adds	r3, r4, #4
 8009284:	f020 0007 	bic.w	r0, r0, #7
 8009288:	1ac2      	subs	r2, r0, r3
 800928a:	bf1c      	itt	ne
 800928c:	1a1b      	subne	r3, r3, r0
 800928e:	50a3      	strne	r3, [r4, r2]
 8009290:	e7af      	b.n	80091f2 <_malloc_r+0x22>
 8009292:	6862      	ldr	r2, [r4, #4]
 8009294:	42a3      	cmp	r3, r4
 8009296:	bf0c      	ite	eq
 8009298:	f8c8 2000 	streq.w	r2, [r8]
 800929c:	605a      	strne	r2, [r3, #4]
 800929e:	e7eb      	b.n	8009278 <_malloc_r+0xa8>
 80092a0:	4623      	mov	r3, r4
 80092a2:	6864      	ldr	r4, [r4, #4]
 80092a4:	e7ae      	b.n	8009204 <_malloc_r+0x34>
 80092a6:	463c      	mov	r4, r7
 80092a8:	687f      	ldr	r7, [r7, #4]
 80092aa:	e7b6      	b.n	800921a <_malloc_r+0x4a>
 80092ac:	461a      	mov	r2, r3
 80092ae:	685b      	ldr	r3, [r3, #4]
 80092b0:	42a3      	cmp	r3, r4
 80092b2:	d1fb      	bne.n	80092ac <_malloc_r+0xdc>
 80092b4:	2300      	movs	r3, #0
 80092b6:	6053      	str	r3, [r2, #4]
 80092b8:	e7de      	b.n	8009278 <_malloc_r+0xa8>
 80092ba:	230c      	movs	r3, #12
 80092bc:	6033      	str	r3, [r6, #0]
 80092be:	4630      	mov	r0, r6
 80092c0:	f000 f80c 	bl	80092dc <__malloc_unlock>
 80092c4:	e794      	b.n	80091f0 <_malloc_r+0x20>
 80092c6:	6005      	str	r5, [r0, #0]
 80092c8:	e7d6      	b.n	8009278 <_malloc_r+0xa8>
 80092ca:	bf00      	nop
 80092cc:	2000203c 	.word	0x2000203c

080092d0 <__malloc_lock>:
 80092d0:	4801      	ldr	r0, [pc, #4]	@ (80092d8 <__malloc_lock+0x8>)
 80092d2:	f7ff bf0f 	b.w	80090f4 <__retarget_lock_acquire_recursive>
 80092d6:	bf00      	nop
 80092d8:	20002034 	.word	0x20002034

080092dc <__malloc_unlock>:
 80092dc:	4801      	ldr	r0, [pc, #4]	@ (80092e4 <__malloc_unlock+0x8>)
 80092de:	f7ff bf0a 	b.w	80090f6 <__retarget_lock_release_recursive>
 80092e2:	bf00      	nop
 80092e4:	20002034 	.word	0x20002034

080092e8 <__ssputs_r>:
 80092e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092ec:	688e      	ldr	r6, [r1, #8]
 80092ee:	461f      	mov	r7, r3
 80092f0:	42be      	cmp	r6, r7
 80092f2:	680b      	ldr	r3, [r1, #0]
 80092f4:	4682      	mov	sl, r0
 80092f6:	460c      	mov	r4, r1
 80092f8:	4690      	mov	r8, r2
 80092fa:	d82d      	bhi.n	8009358 <__ssputs_r+0x70>
 80092fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009300:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009304:	d026      	beq.n	8009354 <__ssputs_r+0x6c>
 8009306:	6965      	ldr	r5, [r4, #20]
 8009308:	6909      	ldr	r1, [r1, #16]
 800930a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800930e:	eba3 0901 	sub.w	r9, r3, r1
 8009312:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009316:	1c7b      	adds	r3, r7, #1
 8009318:	444b      	add	r3, r9
 800931a:	106d      	asrs	r5, r5, #1
 800931c:	429d      	cmp	r5, r3
 800931e:	bf38      	it	cc
 8009320:	461d      	movcc	r5, r3
 8009322:	0553      	lsls	r3, r2, #21
 8009324:	d527      	bpl.n	8009376 <__ssputs_r+0x8e>
 8009326:	4629      	mov	r1, r5
 8009328:	f7ff ff52 	bl	80091d0 <_malloc_r>
 800932c:	4606      	mov	r6, r0
 800932e:	b360      	cbz	r0, 800938a <__ssputs_r+0xa2>
 8009330:	6921      	ldr	r1, [r4, #16]
 8009332:	464a      	mov	r2, r9
 8009334:	f000 fae8 	bl	8009908 <memcpy>
 8009338:	89a3      	ldrh	r3, [r4, #12]
 800933a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800933e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009342:	81a3      	strh	r3, [r4, #12]
 8009344:	6126      	str	r6, [r4, #16]
 8009346:	6165      	str	r5, [r4, #20]
 8009348:	444e      	add	r6, r9
 800934a:	eba5 0509 	sub.w	r5, r5, r9
 800934e:	6026      	str	r6, [r4, #0]
 8009350:	60a5      	str	r5, [r4, #8]
 8009352:	463e      	mov	r6, r7
 8009354:	42be      	cmp	r6, r7
 8009356:	d900      	bls.n	800935a <__ssputs_r+0x72>
 8009358:	463e      	mov	r6, r7
 800935a:	6820      	ldr	r0, [r4, #0]
 800935c:	4632      	mov	r2, r6
 800935e:	4641      	mov	r1, r8
 8009360:	f000 faa8 	bl	80098b4 <memmove>
 8009364:	68a3      	ldr	r3, [r4, #8]
 8009366:	1b9b      	subs	r3, r3, r6
 8009368:	60a3      	str	r3, [r4, #8]
 800936a:	6823      	ldr	r3, [r4, #0]
 800936c:	4433      	add	r3, r6
 800936e:	6023      	str	r3, [r4, #0]
 8009370:	2000      	movs	r0, #0
 8009372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009376:	462a      	mov	r2, r5
 8009378:	f000 fad4 	bl	8009924 <_realloc_r>
 800937c:	4606      	mov	r6, r0
 800937e:	2800      	cmp	r0, #0
 8009380:	d1e0      	bne.n	8009344 <__ssputs_r+0x5c>
 8009382:	6921      	ldr	r1, [r4, #16]
 8009384:	4650      	mov	r0, sl
 8009386:	f7ff feb7 	bl	80090f8 <_free_r>
 800938a:	230c      	movs	r3, #12
 800938c:	f8ca 3000 	str.w	r3, [sl]
 8009390:	89a3      	ldrh	r3, [r4, #12]
 8009392:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009396:	81a3      	strh	r3, [r4, #12]
 8009398:	f04f 30ff 	mov.w	r0, #4294967295
 800939c:	e7e9      	b.n	8009372 <__ssputs_r+0x8a>
	...

080093a0 <_svfiprintf_r>:
 80093a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093a4:	4698      	mov	r8, r3
 80093a6:	898b      	ldrh	r3, [r1, #12]
 80093a8:	061b      	lsls	r3, r3, #24
 80093aa:	b09d      	sub	sp, #116	@ 0x74
 80093ac:	4607      	mov	r7, r0
 80093ae:	460d      	mov	r5, r1
 80093b0:	4614      	mov	r4, r2
 80093b2:	d510      	bpl.n	80093d6 <_svfiprintf_r+0x36>
 80093b4:	690b      	ldr	r3, [r1, #16]
 80093b6:	b973      	cbnz	r3, 80093d6 <_svfiprintf_r+0x36>
 80093b8:	2140      	movs	r1, #64	@ 0x40
 80093ba:	f7ff ff09 	bl	80091d0 <_malloc_r>
 80093be:	6028      	str	r0, [r5, #0]
 80093c0:	6128      	str	r0, [r5, #16]
 80093c2:	b930      	cbnz	r0, 80093d2 <_svfiprintf_r+0x32>
 80093c4:	230c      	movs	r3, #12
 80093c6:	603b      	str	r3, [r7, #0]
 80093c8:	f04f 30ff 	mov.w	r0, #4294967295
 80093cc:	b01d      	add	sp, #116	@ 0x74
 80093ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093d2:	2340      	movs	r3, #64	@ 0x40
 80093d4:	616b      	str	r3, [r5, #20]
 80093d6:	2300      	movs	r3, #0
 80093d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80093da:	2320      	movs	r3, #32
 80093dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80093e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80093e4:	2330      	movs	r3, #48	@ 0x30
 80093e6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009584 <_svfiprintf_r+0x1e4>
 80093ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80093ee:	f04f 0901 	mov.w	r9, #1
 80093f2:	4623      	mov	r3, r4
 80093f4:	469a      	mov	sl, r3
 80093f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093fa:	b10a      	cbz	r2, 8009400 <_svfiprintf_r+0x60>
 80093fc:	2a25      	cmp	r2, #37	@ 0x25
 80093fe:	d1f9      	bne.n	80093f4 <_svfiprintf_r+0x54>
 8009400:	ebba 0b04 	subs.w	fp, sl, r4
 8009404:	d00b      	beq.n	800941e <_svfiprintf_r+0x7e>
 8009406:	465b      	mov	r3, fp
 8009408:	4622      	mov	r2, r4
 800940a:	4629      	mov	r1, r5
 800940c:	4638      	mov	r0, r7
 800940e:	f7ff ff6b 	bl	80092e8 <__ssputs_r>
 8009412:	3001      	adds	r0, #1
 8009414:	f000 80a7 	beq.w	8009566 <_svfiprintf_r+0x1c6>
 8009418:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800941a:	445a      	add	r2, fp
 800941c:	9209      	str	r2, [sp, #36]	@ 0x24
 800941e:	f89a 3000 	ldrb.w	r3, [sl]
 8009422:	2b00      	cmp	r3, #0
 8009424:	f000 809f 	beq.w	8009566 <_svfiprintf_r+0x1c6>
 8009428:	2300      	movs	r3, #0
 800942a:	f04f 32ff 	mov.w	r2, #4294967295
 800942e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009432:	f10a 0a01 	add.w	sl, sl, #1
 8009436:	9304      	str	r3, [sp, #16]
 8009438:	9307      	str	r3, [sp, #28]
 800943a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800943e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009440:	4654      	mov	r4, sl
 8009442:	2205      	movs	r2, #5
 8009444:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009448:	484e      	ldr	r0, [pc, #312]	@ (8009584 <_svfiprintf_r+0x1e4>)
 800944a:	f7f6 fec9 	bl	80001e0 <memchr>
 800944e:	9a04      	ldr	r2, [sp, #16]
 8009450:	b9d8      	cbnz	r0, 800948a <_svfiprintf_r+0xea>
 8009452:	06d0      	lsls	r0, r2, #27
 8009454:	bf44      	itt	mi
 8009456:	2320      	movmi	r3, #32
 8009458:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800945c:	0711      	lsls	r1, r2, #28
 800945e:	bf44      	itt	mi
 8009460:	232b      	movmi	r3, #43	@ 0x2b
 8009462:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009466:	f89a 3000 	ldrb.w	r3, [sl]
 800946a:	2b2a      	cmp	r3, #42	@ 0x2a
 800946c:	d015      	beq.n	800949a <_svfiprintf_r+0xfa>
 800946e:	9a07      	ldr	r2, [sp, #28]
 8009470:	4654      	mov	r4, sl
 8009472:	2000      	movs	r0, #0
 8009474:	f04f 0c0a 	mov.w	ip, #10
 8009478:	4621      	mov	r1, r4
 800947a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800947e:	3b30      	subs	r3, #48	@ 0x30
 8009480:	2b09      	cmp	r3, #9
 8009482:	d94b      	bls.n	800951c <_svfiprintf_r+0x17c>
 8009484:	b1b0      	cbz	r0, 80094b4 <_svfiprintf_r+0x114>
 8009486:	9207      	str	r2, [sp, #28]
 8009488:	e014      	b.n	80094b4 <_svfiprintf_r+0x114>
 800948a:	eba0 0308 	sub.w	r3, r0, r8
 800948e:	fa09 f303 	lsl.w	r3, r9, r3
 8009492:	4313      	orrs	r3, r2
 8009494:	9304      	str	r3, [sp, #16]
 8009496:	46a2      	mov	sl, r4
 8009498:	e7d2      	b.n	8009440 <_svfiprintf_r+0xa0>
 800949a:	9b03      	ldr	r3, [sp, #12]
 800949c:	1d19      	adds	r1, r3, #4
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	9103      	str	r1, [sp, #12]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	bfbb      	ittet	lt
 80094a6:	425b      	neglt	r3, r3
 80094a8:	f042 0202 	orrlt.w	r2, r2, #2
 80094ac:	9307      	strge	r3, [sp, #28]
 80094ae:	9307      	strlt	r3, [sp, #28]
 80094b0:	bfb8      	it	lt
 80094b2:	9204      	strlt	r2, [sp, #16]
 80094b4:	7823      	ldrb	r3, [r4, #0]
 80094b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80094b8:	d10a      	bne.n	80094d0 <_svfiprintf_r+0x130>
 80094ba:	7863      	ldrb	r3, [r4, #1]
 80094bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80094be:	d132      	bne.n	8009526 <_svfiprintf_r+0x186>
 80094c0:	9b03      	ldr	r3, [sp, #12]
 80094c2:	1d1a      	adds	r2, r3, #4
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	9203      	str	r2, [sp, #12]
 80094c8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80094cc:	3402      	adds	r4, #2
 80094ce:	9305      	str	r3, [sp, #20]
 80094d0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009594 <_svfiprintf_r+0x1f4>
 80094d4:	7821      	ldrb	r1, [r4, #0]
 80094d6:	2203      	movs	r2, #3
 80094d8:	4650      	mov	r0, sl
 80094da:	f7f6 fe81 	bl	80001e0 <memchr>
 80094de:	b138      	cbz	r0, 80094f0 <_svfiprintf_r+0x150>
 80094e0:	9b04      	ldr	r3, [sp, #16]
 80094e2:	eba0 000a 	sub.w	r0, r0, sl
 80094e6:	2240      	movs	r2, #64	@ 0x40
 80094e8:	4082      	lsls	r2, r0
 80094ea:	4313      	orrs	r3, r2
 80094ec:	3401      	adds	r4, #1
 80094ee:	9304      	str	r3, [sp, #16]
 80094f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094f4:	4824      	ldr	r0, [pc, #144]	@ (8009588 <_svfiprintf_r+0x1e8>)
 80094f6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80094fa:	2206      	movs	r2, #6
 80094fc:	f7f6 fe70 	bl	80001e0 <memchr>
 8009500:	2800      	cmp	r0, #0
 8009502:	d036      	beq.n	8009572 <_svfiprintf_r+0x1d2>
 8009504:	4b21      	ldr	r3, [pc, #132]	@ (800958c <_svfiprintf_r+0x1ec>)
 8009506:	bb1b      	cbnz	r3, 8009550 <_svfiprintf_r+0x1b0>
 8009508:	9b03      	ldr	r3, [sp, #12]
 800950a:	3307      	adds	r3, #7
 800950c:	f023 0307 	bic.w	r3, r3, #7
 8009510:	3308      	adds	r3, #8
 8009512:	9303      	str	r3, [sp, #12]
 8009514:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009516:	4433      	add	r3, r6
 8009518:	9309      	str	r3, [sp, #36]	@ 0x24
 800951a:	e76a      	b.n	80093f2 <_svfiprintf_r+0x52>
 800951c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009520:	460c      	mov	r4, r1
 8009522:	2001      	movs	r0, #1
 8009524:	e7a8      	b.n	8009478 <_svfiprintf_r+0xd8>
 8009526:	2300      	movs	r3, #0
 8009528:	3401      	adds	r4, #1
 800952a:	9305      	str	r3, [sp, #20]
 800952c:	4619      	mov	r1, r3
 800952e:	f04f 0c0a 	mov.w	ip, #10
 8009532:	4620      	mov	r0, r4
 8009534:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009538:	3a30      	subs	r2, #48	@ 0x30
 800953a:	2a09      	cmp	r2, #9
 800953c:	d903      	bls.n	8009546 <_svfiprintf_r+0x1a6>
 800953e:	2b00      	cmp	r3, #0
 8009540:	d0c6      	beq.n	80094d0 <_svfiprintf_r+0x130>
 8009542:	9105      	str	r1, [sp, #20]
 8009544:	e7c4      	b.n	80094d0 <_svfiprintf_r+0x130>
 8009546:	fb0c 2101 	mla	r1, ip, r1, r2
 800954a:	4604      	mov	r4, r0
 800954c:	2301      	movs	r3, #1
 800954e:	e7f0      	b.n	8009532 <_svfiprintf_r+0x192>
 8009550:	ab03      	add	r3, sp, #12
 8009552:	9300      	str	r3, [sp, #0]
 8009554:	462a      	mov	r2, r5
 8009556:	4b0e      	ldr	r3, [pc, #56]	@ (8009590 <_svfiprintf_r+0x1f0>)
 8009558:	a904      	add	r1, sp, #16
 800955a:	4638      	mov	r0, r7
 800955c:	f3af 8000 	nop.w
 8009560:	1c42      	adds	r2, r0, #1
 8009562:	4606      	mov	r6, r0
 8009564:	d1d6      	bne.n	8009514 <_svfiprintf_r+0x174>
 8009566:	89ab      	ldrh	r3, [r5, #12]
 8009568:	065b      	lsls	r3, r3, #25
 800956a:	f53f af2d 	bmi.w	80093c8 <_svfiprintf_r+0x28>
 800956e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009570:	e72c      	b.n	80093cc <_svfiprintf_r+0x2c>
 8009572:	ab03      	add	r3, sp, #12
 8009574:	9300      	str	r3, [sp, #0]
 8009576:	462a      	mov	r2, r5
 8009578:	4b05      	ldr	r3, [pc, #20]	@ (8009590 <_svfiprintf_r+0x1f0>)
 800957a:	a904      	add	r1, sp, #16
 800957c:	4638      	mov	r0, r7
 800957e:	f000 f879 	bl	8009674 <_printf_i>
 8009582:	e7ed      	b.n	8009560 <_svfiprintf_r+0x1c0>
 8009584:	08009ac4 	.word	0x08009ac4
 8009588:	08009ace 	.word	0x08009ace
 800958c:	00000000 	.word	0x00000000
 8009590:	080092e9 	.word	0x080092e9
 8009594:	08009aca 	.word	0x08009aca

08009598 <_printf_common>:
 8009598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800959c:	4616      	mov	r6, r2
 800959e:	4698      	mov	r8, r3
 80095a0:	688a      	ldr	r2, [r1, #8]
 80095a2:	690b      	ldr	r3, [r1, #16]
 80095a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80095a8:	4293      	cmp	r3, r2
 80095aa:	bfb8      	it	lt
 80095ac:	4613      	movlt	r3, r2
 80095ae:	6033      	str	r3, [r6, #0]
 80095b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80095b4:	4607      	mov	r7, r0
 80095b6:	460c      	mov	r4, r1
 80095b8:	b10a      	cbz	r2, 80095be <_printf_common+0x26>
 80095ba:	3301      	adds	r3, #1
 80095bc:	6033      	str	r3, [r6, #0]
 80095be:	6823      	ldr	r3, [r4, #0]
 80095c0:	0699      	lsls	r1, r3, #26
 80095c2:	bf42      	ittt	mi
 80095c4:	6833      	ldrmi	r3, [r6, #0]
 80095c6:	3302      	addmi	r3, #2
 80095c8:	6033      	strmi	r3, [r6, #0]
 80095ca:	6825      	ldr	r5, [r4, #0]
 80095cc:	f015 0506 	ands.w	r5, r5, #6
 80095d0:	d106      	bne.n	80095e0 <_printf_common+0x48>
 80095d2:	f104 0a19 	add.w	sl, r4, #25
 80095d6:	68e3      	ldr	r3, [r4, #12]
 80095d8:	6832      	ldr	r2, [r6, #0]
 80095da:	1a9b      	subs	r3, r3, r2
 80095dc:	42ab      	cmp	r3, r5
 80095de:	dc26      	bgt.n	800962e <_printf_common+0x96>
 80095e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80095e4:	6822      	ldr	r2, [r4, #0]
 80095e6:	3b00      	subs	r3, #0
 80095e8:	bf18      	it	ne
 80095ea:	2301      	movne	r3, #1
 80095ec:	0692      	lsls	r2, r2, #26
 80095ee:	d42b      	bmi.n	8009648 <_printf_common+0xb0>
 80095f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80095f4:	4641      	mov	r1, r8
 80095f6:	4638      	mov	r0, r7
 80095f8:	47c8      	blx	r9
 80095fa:	3001      	adds	r0, #1
 80095fc:	d01e      	beq.n	800963c <_printf_common+0xa4>
 80095fe:	6823      	ldr	r3, [r4, #0]
 8009600:	6922      	ldr	r2, [r4, #16]
 8009602:	f003 0306 	and.w	r3, r3, #6
 8009606:	2b04      	cmp	r3, #4
 8009608:	bf02      	ittt	eq
 800960a:	68e5      	ldreq	r5, [r4, #12]
 800960c:	6833      	ldreq	r3, [r6, #0]
 800960e:	1aed      	subeq	r5, r5, r3
 8009610:	68a3      	ldr	r3, [r4, #8]
 8009612:	bf0c      	ite	eq
 8009614:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009618:	2500      	movne	r5, #0
 800961a:	4293      	cmp	r3, r2
 800961c:	bfc4      	itt	gt
 800961e:	1a9b      	subgt	r3, r3, r2
 8009620:	18ed      	addgt	r5, r5, r3
 8009622:	2600      	movs	r6, #0
 8009624:	341a      	adds	r4, #26
 8009626:	42b5      	cmp	r5, r6
 8009628:	d11a      	bne.n	8009660 <_printf_common+0xc8>
 800962a:	2000      	movs	r0, #0
 800962c:	e008      	b.n	8009640 <_printf_common+0xa8>
 800962e:	2301      	movs	r3, #1
 8009630:	4652      	mov	r2, sl
 8009632:	4641      	mov	r1, r8
 8009634:	4638      	mov	r0, r7
 8009636:	47c8      	blx	r9
 8009638:	3001      	adds	r0, #1
 800963a:	d103      	bne.n	8009644 <_printf_common+0xac>
 800963c:	f04f 30ff 	mov.w	r0, #4294967295
 8009640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009644:	3501      	adds	r5, #1
 8009646:	e7c6      	b.n	80095d6 <_printf_common+0x3e>
 8009648:	18e1      	adds	r1, r4, r3
 800964a:	1c5a      	adds	r2, r3, #1
 800964c:	2030      	movs	r0, #48	@ 0x30
 800964e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009652:	4422      	add	r2, r4
 8009654:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009658:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800965c:	3302      	adds	r3, #2
 800965e:	e7c7      	b.n	80095f0 <_printf_common+0x58>
 8009660:	2301      	movs	r3, #1
 8009662:	4622      	mov	r2, r4
 8009664:	4641      	mov	r1, r8
 8009666:	4638      	mov	r0, r7
 8009668:	47c8      	blx	r9
 800966a:	3001      	adds	r0, #1
 800966c:	d0e6      	beq.n	800963c <_printf_common+0xa4>
 800966e:	3601      	adds	r6, #1
 8009670:	e7d9      	b.n	8009626 <_printf_common+0x8e>
	...

08009674 <_printf_i>:
 8009674:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009678:	7e0f      	ldrb	r7, [r1, #24]
 800967a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800967c:	2f78      	cmp	r7, #120	@ 0x78
 800967e:	4691      	mov	r9, r2
 8009680:	4680      	mov	r8, r0
 8009682:	460c      	mov	r4, r1
 8009684:	469a      	mov	sl, r3
 8009686:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800968a:	d807      	bhi.n	800969c <_printf_i+0x28>
 800968c:	2f62      	cmp	r7, #98	@ 0x62
 800968e:	d80a      	bhi.n	80096a6 <_printf_i+0x32>
 8009690:	2f00      	cmp	r7, #0
 8009692:	f000 80d2 	beq.w	800983a <_printf_i+0x1c6>
 8009696:	2f58      	cmp	r7, #88	@ 0x58
 8009698:	f000 80b9 	beq.w	800980e <_printf_i+0x19a>
 800969c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80096a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80096a4:	e03a      	b.n	800971c <_printf_i+0xa8>
 80096a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80096aa:	2b15      	cmp	r3, #21
 80096ac:	d8f6      	bhi.n	800969c <_printf_i+0x28>
 80096ae:	a101      	add	r1, pc, #4	@ (adr r1, 80096b4 <_printf_i+0x40>)
 80096b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80096b4:	0800970d 	.word	0x0800970d
 80096b8:	08009721 	.word	0x08009721
 80096bc:	0800969d 	.word	0x0800969d
 80096c0:	0800969d 	.word	0x0800969d
 80096c4:	0800969d 	.word	0x0800969d
 80096c8:	0800969d 	.word	0x0800969d
 80096cc:	08009721 	.word	0x08009721
 80096d0:	0800969d 	.word	0x0800969d
 80096d4:	0800969d 	.word	0x0800969d
 80096d8:	0800969d 	.word	0x0800969d
 80096dc:	0800969d 	.word	0x0800969d
 80096e0:	08009821 	.word	0x08009821
 80096e4:	0800974b 	.word	0x0800974b
 80096e8:	080097db 	.word	0x080097db
 80096ec:	0800969d 	.word	0x0800969d
 80096f0:	0800969d 	.word	0x0800969d
 80096f4:	08009843 	.word	0x08009843
 80096f8:	0800969d 	.word	0x0800969d
 80096fc:	0800974b 	.word	0x0800974b
 8009700:	0800969d 	.word	0x0800969d
 8009704:	0800969d 	.word	0x0800969d
 8009708:	080097e3 	.word	0x080097e3
 800970c:	6833      	ldr	r3, [r6, #0]
 800970e:	1d1a      	adds	r2, r3, #4
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	6032      	str	r2, [r6, #0]
 8009714:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009718:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800971c:	2301      	movs	r3, #1
 800971e:	e09d      	b.n	800985c <_printf_i+0x1e8>
 8009720:	6833      	ldr	r3, [r6, #0]
 8009722:	6820      	ldr	r0, [r4, #0]
 8009724:	1d19      	adds	r1, r3, #4
 8009726:	6031      	str	r1, [r6, #0]
 8009728:	0606      	lsls	r6, r0, #24
 800972a:	d501      	bpl.n	8009730 <_printf_i+0xbc>
 800972c:	681d      	ldr	r5, [r3, #0]
 800972e:	e003      	b.n	8009738 <_printf_i+0xc4>
 8009730:	0645      	lsls	r5, r0, #25
 8009732:	d5fb      	bpl.n	800972c <_printf_i+0xb8>
 8009734:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009738:	2d00      	cmp	r5, #0
 800973a:	da03      	bge.n	8009744 <_printf_i+0xd0>
 800973c:	232d      	movs	r3, #45	@ 0x2d
 800973e:	426d      	negs	r5, r5
 8009740:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009744:	4859      	ldr	r0, [pc, #356]	@ (80098ac <_printf_i+0x238>)
 8009746:	230a      	movs	r3, #10
 8009748:	e011      	b.n	800976e <_printf_i+0xfa>
 800974a:	6821      	ldr	r1, [r4, #0]
 800974c:	6833      	ldr	r3, [r6, #0]
 800974e:	0608      	lsls	r0, r1, #24
 8009750:	f853 5b04 	ldr.w	r5, [r3], #4
 8009754:	d402      	bmi.n	800975c <_printf_i+0xe8>
 8009756:	0649      	lsls	r1, r1, #25
 8009758:	bf48      	it	mi
 800975a:	b2ad      	uxthmi	r5, r5
 800975c:	2f6f      	cmp	r7, #111	@ 0x6f
 800975e:	4853      	ldr	r0, [pc, #332]	@ (80098ac <_printf_i+0x238>)
 8009760:	6033      	str	r3, [r6, #0]
 8009762:	bf14      	ite	ne
 8009764:	230a      	movne	r3, #10
 8009766:	2308      	moveq	r3, #8
 8009768:	2100      	movs	r1, #0
 800976a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800976e:	6866      	ldr	r6, [r4, #4]
 8009770:	60a6      	str	r6, [r4, #8]
 8009772:	2e00      	cmp	r6, #0
 8009774:	bfa2      	ittt	ge
 8009776:	6821      	ldrge	r1, [r4, #0]
 8009778:	f021 0104 	bicge.w	r1, r1, #4
 800977c:	6021      	strge	r1, [r4, #0]
 800977e:	b90d      	cbnz	r5, 8009784 <_printf_i+0x110>
 8009780:	2e00      	cmp	r6, #0
 8009782:	d04b      	beq.n	800981c <_printf_i+0x1a8>
 8009784:	4616      	mov	r6, r2
 8009786:	fbb5 f1f3 	udiv	r1, r5, r3
 800978a:	fb03 5711 	mls	r7, r3, r1, r5
 800978e:	5dc7      	ldrb	r7, [r0, r7]
 8009790:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009794:	462f      	mov	r7, r5
 8009796:	42bb      	cmp	r3, r7
 8009798:	460d      	mov	r5, r1
 800979a:	d9f4      	bls.n	8009786 <_printf_i+0x112>
 800979c:	2b08      	cmp	r3, #8
 800979e:	d10b      	bne.n	80097b8 <_printf_i+0x144>
 80097a0:	6823      	ldr	r3, [r4, #0]
 80097a2:	07df      	lsls	r7, r3, #31
 80097a4:	d508      	bpl.n	80097b8 <_printf_i+0x144>
 80097a6:	6923      	ldr	r3, [r4, #16]
 80097a8:	6861      	ldr	r1, [r4, #4]
 80097aa:	4299      	cmp	r1, r3
 80097ac:	bfde      	ittt	le
 80097ae:	2330      	movle	r3, #48	@ 0x30
 80097b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80097b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80097b8:	1b92      	subs	r2, r2, r6
 80097ba:	6122      	str	r2, [r4, #16]
 80097bc:	f8cd a000 	str.w	sl, [sp]
 80097c0:	464b      	mov	r3, r9
 80097c2:	aa03      	add	r2, sp, #12
 80097c4:	4621      	mov	r1, r4
 80097c6:	4640      	mov	r0, r8
 80097c8:	f7ff fee6 	bl	8009598 <_printf_common>
 80097cc:	3001      	adds	r0, #1
 80097ce:	d14a      	bne.n	8009866 <_printf_i+0x1f2>
 80097d0:	f04f 30ff 	mov.w	r0, #4294967295
 80097d4:	b004      	add	sp, #16
 80097d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097da:	6823      	ldr	r3, [r4, #0]
 80097dc:	f043 0320 	orr.w	r3, r3, #32
 80097e0:	6023      	str	r3, [r4, #0]
 80097e2:	4833      	ldr	r0, [pc, #204]	@ (80098b0 <_printf_i+0x23c>)
 80097e4:	2778      	movs	r7, #120	@ 0x78
 80097e6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80097ea:	6823      	ldr	r3, [r4, #0]
 80097ec:	6831      	ldr	r1, [r6, #0]
 80097ee:	061f      	lsls	r7, r3, #24
 80097f0:	f851 5b04 	ldr.w	r5, [r1], #4
 80097f4:	d402      	bmi.n	80097fc <_printf_i+0x188>
 80097f6:	065f      	lsls	r7, r3, #25
 80097f8:	bf48      	it	mi
 80097fa:	b2ad      	uxthmi	r5, r5
 80097fc:	6031      	str	r1, [r6, #0]
 80097fe:	07d9      	lsls	r1, r3, #31
 8009800:	bf44      	itt	mi
 8009802:	f043 0320 	orrmi.w	r3, r3, #32
 8009806:	6023      	strmi	r3, [r4, #0]
 8009808:	b11d      	cbz	r5, 8009812 <_printf_i+0x19e>
 800980a:	2310      	movs	r3, #16
 800980c:	e7ac      	b.n	8009768 <_printf_i+0xf4>
 800980e:	4827      	ldr	r0, [pc, #156]	@ (80098ac <_printf_i+0x238>)
 8009810:	e7e9      	b.n	80097e6 <_printf_i+0x172>
 8009812:	6823      	ldr	r3, [r4, #0]
 8009814:	f023 0320 	bic.w	r3, r3, #32
 8009818:	6023      	str	r3, [r4, #0]
 800981a:	e7f6      	b.n	800980a <_printf_i+0x196>
 800981c:	4616      	mov	r6, r2
 800981e:	e7bd      	b.n	800979c <_printf_i+0x128>
 8009820:	6833      	ldr	r3, [r6, #0]
 8009822:	6825      	ldr	r5, [r4, #0]
 8009824:	6961      	ldr	r1, [r4, #20]
 8009826:	1d18      	adds	r0, r3, #4
 8009828:	6030      	str	r0, [r6, #0]
 800982a:	062e      	lsls	r6, r5, #24
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	d501      	bpl.n	8009834 <_printf_i+0x1c0>
 8009830:	6019      	str	r1, [r3, #0]
 8009832:	e002      	b.n	800983a <_printf_i+0x1c6>
 8009834:	0668      	lsls	r0, r5, #25
 8009836:	d5fb      	bpl.n	8009830 <_printf_i+0x1bc>
 8009838:	8019      	strh	r1, [r3, #0]
 800983a:	2300      	movs	r3, #0
 800983c:	6123      	str	r3, [r4, #16]
 800983e:	4616      	mov	r6, r2
 8009840:	e7bc      	b.n	80097bc <_printf_i+0x148>
 8009842:	6833      	ldr	r3, [r6, #0]
 8009844:	1d1a      	adds	r2, r3, #4
 8009846:	6032      	str	r2, [r6, #0]
 8009848:	681e      	ldr	r6, [r3, #0]
 800984a:	6862      	ldr	r2, [r4, #4]
 800984c:	2100      	movs	r1, #0
 800984e:	4630      	mov	r0, r6
 8009850:	f7f6 fcc6 	bl	80001e0 <memchr>
 8009854:	b108      	cbz	r0, 800985a <_printf_i+0x1e6>
 8009856:	1b80      	subs	r0, r0, r6
 8009858:	6060      	str	r0, [r4, #4]
 800985a:	6863      	ldr	r3, [r4, #4]
 800985c:	6123      	str	r3, [r4, #16]
 800985e:	2300      	movs	r3, #0
 8009860:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009864:	e7aa      	b.n	80097bc <_printf_i+0x148>
 8009866:	6923      	ldr	r3, [r4, #16]
 8009868:	4632      	mov	r2, r6
 800986a:	4649      	mov	r1, r9
 800986c:	4640      	mov	r0, r8
 800986e:	47d0      	blx	sl
 8009870:	3001      	adds	r0, #1
 8009872:	d0ad      	beq.n	80097d0 <_printf_i+0x15c>
 8009874:	6823      	ldr	r3, [r4, #0]
 8009876:	079b      	lsls	r3, r3, #30
 8009878:	d413      	bmi.n	80098a2 <_printf_i+0x22e>
 800987a:	68e0      	ldr	r0, [r4, #12]
 800987c:	9b03      	ldr	r3, [sp, #12]
 800987e:	4298      	cmp	r0, r3
 8009880:	bfb8      	it	lt
 8009882:	4618      	movlt	r0, r3
 8009884:	e7a6      	b.n	80097d4 <_printf_i+0x160>
 8009886:	2301      	movs	r3, #1
 8009888:	4632      	mov	r2, r6
 800988a:	4649      	mov	r1, r9
 800988c:	4640      	mov	r0, r8
 800988e:	47d0      	blx	sl
 8009890:	3001      	adds	r0, #1
 8009892:	d09d      	beq.n	80097d0 <_printf_i+0x15c>
 8009894:	3501      	adds	r5, #1
 8009896:	68e3      	ldr	r3, [r4, #12]
 8009898:	9903      	ldr	r1, [sp, #12]
 800989a:	1a5b      	subs	r3, r3, r1
 800989c:	42ab      	cmp	r3, r5
 800989e:	dcf2      	bgt.n	8009886 <_printf_i+0x212>
 80098a0:	e7eb      	b.n	800987a <_printf_i+0x206>
 80098a2:	2500      	movs	r5, #0
 80098a4:	f104 0619 	add.w	r6, r4, #25
 80098a8:	e7f5      	b.n	8009896 <_printf_i+0x222>
 80098aa:	bf00      	nop
 80098ac:	08009ad5 	.word	0x08009ad5
 80098b0:	08009ae6 	.word	0x08009ae6

080098b4 <memmove>:
 80098b4:	4288      	cmp	r0, r1
 80098b6:	b510      	push	{r4, lr}
 80098b8:	eb01 0402 	add.w	r4, r1, r2
 80098bc:	d902      	bls.n	80098c4 <memmove+0x10>
 80098be:	4284      	cmp	r4, r0
 80098c0:	4623      	mov	r3, r4
 80098c2:	d807      	bhi.n	80098d4 <memmove+0x20>
 80098c4:	1e43      	subs	r3, r0, #1
 80098c6:	42a1      	cmp	r1, r4
 80098c8:	d008      	beq.n	80098dc <memmove+0x28>
 80098ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80098ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80098d2:	e7f8      	b.n	80098c6 <memmove+0x12>
 80098d4:	4402      	add	r2, r0
 80098d6:	4601      	mov	r1, r0
 80098d8:	428a      	cmp	r2, r1
 80098da:	d100      	bne.n	80098de <memmove+0x2a>
 80098dc:	bd10      	pop	{r4, pc}
 80098de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80098e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80098e6:	e7f7      	b.n	80098d8 <memmove+0x24>

080098e8 <_sbrk_r>:
 80098e8:	b538      	push	{r3, r4, r5, lr}
 80098ea:	4d06      	ldr	r5, [pc, #24]	@ (8009904 <_sbrk_r+0x1c>)
 80098ec:	2300      	movs	r3, #0
 80098ee:	4604      	mov	r4, r0
 80098f0:	4608      	mov	r0, r1
 80098f2:	602b      	str	r3, [r5, #0]
 80098f4:	f7f8 f952 	bl	8001b9c <_sbrk>
 80098f8:	1c43      	adds	r3, r0, #1
 80098fa:	d102      	bne.n	8009902 <_sbrk_r+0x1a>
 80098fc:	682b      	ldr	r3, [r5, #0]
 80098fe:	b103      	cbz	r3, 8009902 <_sbrk_r+0x1a>
 8009900:	6023      	str	r3, [r4, #0]
 8009902:	bd38      	pop	{r3, r4, r5, pc}
 8009904:	20002030 	.word	0x20002030

08009908 <memcpy>:
 8009908:	440a      	add	r2, r1
 800990a:	4291      	cmp	r1, r2
 800990c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009910:	d100      	bne.n	8009914 <memcpy+0xc>
 8009912:	4770      	bx	lr
 8009914:	b510      	push	{r4, lr}
 8009916:	f811 4b01 	ldrb.w	r4, [r1], #1
 800991a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800991e:	4291      	cmp	r1, r2
 8009920:	d1f9      	bne.n	8009916 <memcpy+0xe>
 8009922:	bd10      	pop	{r4, pc}

08009924 <_realloc_r>:
 8009924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009928:	4680      	mov	r8, r0
 800992a:	4615      	mov	r5, r2
 800992c:	460c      	mov	r4, r1
 800992e:	b921      	cbnz	r1, 800993a <_realloc_r+0x16>
 8009930:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009934:	4611      	mov	r1, r2
 8009936:	f7ff bc4b 	b.w	80091d0 <_malloc_r>
 800993a:	b92a      	cbnz	r2, 8009948 <_realloc_r+0x24>
 800993c:	f7ff fbdc 	bl	80090f8 <_free_r>
 8009940:	2400      	movs	r4, #0
 8009942:	4620      	mov	r0, r4
 8009944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009948:	f000 f81a 	bl	8009980 <_malloc_usable_size_r>
 800994c:	4285      	cmp	r5, r0
 800994e:	4606      	mov	r6, r0
 8009950:	d802      	bhi.n	8009958 <_realloc_r+0x34>
 8009952:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009956:	d8f4      	bhi.n	8009942 <_realloc_r+0x1e>
 8009958:	4629      	mov	r1, r5
 800995a:	4640      	mov	r0, r8
 800995c:	f7ff fc38 	bl	80091d0 <_malloc_r>
 8009960:	4607      	mov	r7, r0
 8009962:	2800      	cmp	r0, #0
 8009964:	d0ec      	beq.n	8009940 <_realloc_r+0x1c>
 8009966:	42b5      	cmp	r5, r6
 8009968:	462a      	mov	r2, r5
 800996a:	4621      	mov	r1, r4
 800996c:	bf28      	it	cs
 800996e:	4632      	movcs	r2, r6
 8009970:	f7ff ffca 	bl	8009908 <memcpy>
 8009974:	4621      	mov	r1, r4
 8009976:	4640      	mov	r0, r8
 8009978:	f7ff fbbe 	bl	80090f8 <_free_r>
 800997c:	463c      	mov	r4, r7
 800997e:	e7e0      	b.n	8009942 <_realloc_r+0x1e>

08009980 <_malloc_usable_size_r>:
 8009980:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009984:	1f18      	subs	r0, r3, #4
 8009986:	2b00      	cmp	r3, #0
 8009988:	bfbc      	itt	lt
 800998a:	580b      	ldrlt	r3, [r1, r0]
 800998c:	18c0      	addlt	r0, r0, r3
 800998e:	4770      	bx	lr

08009990 <_init>:
 8009990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009992:	bf00      	nop
 8009994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009996:	bc08      	pop	{r3}
 8009998:	469e      	mov	lr, r3
 800999a:	4770      	bx	lr

0800999c <_fini>:
 800999c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800999e:	bf00      	nop
 80099a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099a2:	bc08      	pop	{r3}
 80099a4:	469e      	mov	lr, r3
 80099a6:	4770      	bx	lr
