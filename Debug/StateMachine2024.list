
StateMachine2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097f0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08009980  08009980  0000a980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ad0  08009ad0  0000b14c  2**0
                  CONTENTS
  4 .ARM          00000008  08009ad0  08009ad0  0000aad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ad8  08009ad8  0000b14c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ad8  08009ad8  0000aad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009adc  08009adc  0000aadc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  08009ae0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b14c  2**0
                  CONTENTS
 10 .bss          00001ef4  2000014c  2000014c  0000b14c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002040  20002040  0000b14c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b14c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011ab0  00000000  00000000  0000b17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003324  00000000  00000000  0001cc2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f00  00000000  00000000  0001ff50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b34  00000000  00000000  00020e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025bba  00000000  00000000  00021984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014096  00000000  00000000  0004753e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7526  00000000  00000000  0005b5d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00132afa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000041c8  00000000  00000000  00132b40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  00136d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000014c 	.word	0x2000014c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009968 	.word	0x08009968

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000150 	.word	0x20000150
 80001cc:	08009968 	.word	0x08009968

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f001 fb70 	bl	8001c58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 fdfc 	bl	8001174 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f001 f802 	bl	8001584 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000580:	f000 fe62 	bl	8001248 <MX_ADC1_Init>
  MX_DAC_Init();
 8000584:	f000 ffca 	bl	800151c <MX_DAC_Init>
  MX_USB_DEVICE_Init();
 8000588:	f008 f826 	bl	80085d8 <MX_USB_DEVICE_Init>
  MX_ADC2_Init();
 800058c:	f000 feae 	bl	80012ec <MX_ADC2_Init>
  MX_CAN1_Init();
 8000590:	f000 ff50 	bl	8001434 <MX_CAN1_Init>
  MX_ADC3_Init();
 8000594:	f000 fefc 	bl	8001390 <MX_ADC3_Init>


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  i_keyIGN 				= HAL_GPIO_ReadPin(keyIGNPort, keyIGN);
 8000598:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800059c:	483e      	ldr	r0, [pc, #248]	@ (8000698 <main+0x128>)
 800059e:	f002 fce9 	bl	8002f74 <HAL_GPIO_ReadPin>
 80005a2:	4603      	mov	r3, r0
 80005a4:	461a      	mov	r2, r3
 80005a6:	4b3d      	ldr	r3, [pc, #244]	@ (800069c <main+0x12c>)
 80005a8:	701a      	strb	r2, [r3, #0]
	  i_keyACC 				= HAL_GPIO_ReadPin(keyACCPort, keyACC);
 80005aa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005ae:	483a      	ldr	r0, [pc, #232]	@ (8000698 <main+0x128>)
 80005b0:	f002 fce0 	bl	8002f74 <HAL_GPIO_ReadPin>
 80005b4:	4603      	mov	r3, r0
 80005b6:	461a      	mov	r2, r3
 80005b8:	4b39      	ldr	r3, [pc, #228]	@ (80006a0 <main+0x130>)
 80005ba:	701a      	strb	r2, [r3, #0]
	  i_killSwitch 			= !HAL_GPIO_ReadPin(killSwitchPort, killSwitch);
 80005bc:	2102      	movs	r1, #2
 80005be:	4839      	ldr	r0, [pc, #228]	@ (80006a4 <main+0x134>)
 80005c0:	f002 fcd8 	bl	8002f74 <HAL_GPIO_ReadPin>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	bf0c      	ite	eq
 80005ca:	2301      	moveq	r3, #1
 80005cc:	2300      	movne	r3, #0
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	461a      	mov	r2, r3
 80005d2:	4b35      	ldr	r3, [pc, #212]	@ (80006a8 <main+0x138>)
 80005d4:	701a      	strb	r2, [r3, #0]
	  i_chargeContactor 	= HAL_GPIO_ReadPin(chargeContactorPort, chargeContactor);
 80005d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005da:	482f      	ldr	r0, [pc, #188]	@ (8000698 <main+0x128>)
 80005dc:	f002 fcca 	bl	8002f74 <HAL_GPIO_ReadPin>
 80005e0:	4603      	mov	r3, r0
 80005e2:	461a      	mov	r2, r3
 80005e4:	4b31      	ldr	r3, [pc, #196]	@ (80006ac <main+0x13c>)
 80005e6:	701a      	strb	r2, [r3, #0]
	  i_chargeEnable 		= !HAL_GPIO_ReadPin(chargeEnablePort, chargeEnable);
 80005e8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005ec:	482a      	ldr	r0, [pc, #168]	@ (8000698 <main+0x128>)
 80005ee:	f002 fcc1 	bl	8002f74 <HAL_GPIO_ReadPin>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	bf0c      	ite	eq
 80005f8:	2301      	moveq	r3, #1
 80005fa:	2300      	movne	r3, #0
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	461a      	mov	r2, r3
 8000600:	4b2b      	ldr	r3, [pc, #172]	@ (80006b0 <main+0x140>)
 8000602:	701a      	strb	r2, [r3, #0]
	  i_disChargeEnable 	= !HAL_GPIO_ReadPin(disChargeEnablePort, disChargeEnable);
 8000604:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000608:	4823      	ldr	r0, [pc, #140]	@ (8000698 <main+0x128>)
 800060a:	f002 fcb3 	bl	8002f74 <HAL_GPIO_ReadPin>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	bf0c      	ite	eq
 8000614:	2301      	moveq	r3, #1
 8000616:	2300      	movne	r3, #0
 8000618:	b2db      	uxtb	r3, r3
 800061a:	461a      	mov	r2, r3
 800061c:	4b25      	ldr	r3, [pc, #148]	@ (80006b4 <main+0x144>)
 800061e:	701a      	strb	r2, [r3, #0]
	  i_brakeSwitchInput 	= HAL_GPIO_ReadPin(brakeSwitchInputPort, brakeSwitchInput);
 8000620:	2104      	movs	r1, #4
 8000622:	4820      	ldr	r0, [pc, #128]	@ (80006a4 <main+0x134>)
 8000624:	f002 fca6 	bl	8002f74 <HAL_GPIO_ReadPin>
 8000628:	4603      	mov	r3, r0
 800062a:	461a      	mov	r2, r3
 800062c:	4b22      	ldr	r3, [pc, #136]	@ (80006b8 <main+0x148>)
 800062e:	701a      	strb	r2, [r3, #0]


	switch(currentState) {
 8000630:	4b22      	ldr	r3, [pc, #136]	@ (80006bc <main+0x14c>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2b07      	cmp	r3, #7
 8000636:	d82b      	bhi.n	8000690 <main+0x120>
 8000638:	a201      	add	r2, pc, #4	@ (adr r2, 8000640 <main+0xd0>)
 800063a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800063e:	bf00      	nop
 8000640:	08000661 	.word	0x08000661
 8000644:	08000667 	.word	0x08000667
 8000648:	0800066d 	.word	0x0800066d
 800064c:	08000673 	.word	0x08000673
 8000650:	08000679 	.word	0x08000679
 8000654:	0800067f 	.word	0x0800067f
 8000658:	08000685 	.word	0x08000685
 800065c:	0800068b 	.word	0x0800068b
			case OFF:
				off_state();
 8000660:	f000 f82e 	bl	80006c0 <off_state>
				break;
 8000664:	e014      	b.n	8000690 <main+0x120>
			case ACC:
				acc_state();
 8000666:	f000 f8a3 	bl	80007b0 <acc_state>
				break;
 800066a:	e011      	b.n	8000690 <main+0x120>
			case IGN:
				ign_state();
 800066c:	f000 f916 	bl	800089c <ign_state>
				break;
 8000670:	e00e      	b.n	8000690 <main+0x120>
			case DCDC:
				dcdc_state();
 8000672:	f000 f9a7 	bl	80009c4 <dcdc_state>
				break;
 8000676:	e00b      	b.n	8000690 <main+0x120>
			case ON:
				on_state();
 8000678:	f000 fa30 	bl	8000adc <on_state>
				break;
 800067c:	e008      	b.n	8000690 <main+0x120>
			case CHARGE:
				charge_state();
 800067e:	f000 fb37 	bl	8000cf0 <charge_state>
				break;
 8000682:	e005      	b.n	8000690 <main+0x120>
			case FAULT:
				fault_state();
 8000684:	f000 fbc0 	bl	8000e08 <fault_state>
				break;
 8000688:	e002      	b.n	8000690 <main+0x120>
			case FAULT_TEMP:
				faultTemp_state();
 800068a:	f000 fa91 	bl	8000bb0 <faultTemp_state>
				break;
 800068e:	bf00      	nop
		}

	if (1)
	{
		debugMonitor();
 8000690:	f000 fc26 	bl	8000ee0 <debugMonitor>
	  i_keyIGN 				= HAL_GPIO_ReadPin(keyIGNPort, keyIGN);
 8000694:	e780      	b.n	8000598 <main+0x28>
 8000696:	bf00      	nop
 8000698:	40021000 	.word	0x40021000
 800069c:	2000028d 	.word	0x2000028d
 80006a0:	2000028e 	.word	0x2000028e
 80006a4:	40020c00 	.word	0x40020c00
 80006a8:	2000028f 	.word	0x2000028f
 80006ac:	20000290 	.word	0x20000290
 80006b0:	20000291 	.word	0x20000291
 80006b4:	20000292 	.word	0x20000292
 80006b8:	20000293 	.word	0x20000293
 80006bc:	2000027c 	.word	0x2000027c

080006c0 <off_state>:
}

//add brake lights

//Initial setting of bits
void off_state(void){		// State 0
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	currentTime = HAL_GetTick();
 80006c4:	f001 fb2e 	bl	8001d24 <HAL_GetTick>
 80006c8:	4603      	mov	r3, r0
 80006ca:	4a29      	ldr	r2, [pc, #164]	@ (8000770 <off_state+0xb0>)
 80006cc:	6013      	str	r3, [r2, #0]
	lastState = OFF;
 80006ce:	4b29      	ldr	r3, [pc, #164]	@ (8000774 <off_state+0xb4>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(preChargeRelayPort,preChargeRelay,GPIO_PIN_RESET);
 80006d4:	2200      	movs	r2, #0
 80006d6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006da:	4827      	ldr	r0, [pc, #156]	@ (8000778 <off_state+0xb8>)
 80006dc:	f002 fc62 	bl	8002fa4 <HAL_GPIO_WritePin>
	o_preChargeRelay = GPIO_PIN_RESET;
 80006e0:	4b26      	ldr	r3, [pc, #152]	@ (800077c <off_state+0xbc>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(hvContactorPort,hvContactor,GPIO_PIN_RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006ec:	4822      	ldr	r0, [pc, #136]	@ (8000778 <off_state+0xb8>)
 80006ee:	f002 fc59 	bl	8002fa4 <HAL_GPIO_WritePin>
	o_hvContactor = GPIO_PIN_RESET;
 80006f2:	4b23      	ldr	r3, [pc, #140]	@ (8000780 <off_state+0xc0>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(auxDCDCDisablePort,auxDCDCDisable,GPIO_PIN_RESET);
 80006f8:	2200      	movs	r2, #0
 80006fa:	2180      	movs	r1, #128	@ 0x80
 80006fc:	481e      	ldr	r0, [pc, #120]	@ (8000778 <off_state+0xb8>)
 80006fe:	f002 fc51 	bl	8002fa4 <HAL_GPIO_WritePin>
	o_auxDCDCDisable = GPIO_PIN_RESET;
 8000702:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <off_state+0xc4>)
 8000704:	2200      	movs	r2, #0
 8000706:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(hvDCDCEnablePort,hvDCDCEnable,GPIO_PIN_RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800070e:	481a      	ldr	r0, [pc, #104]	@ (8000778 <off_state+0xb8>)
 8000710:	f002 fc48 	bl	8002fa4 <HAL_GPIO_WritePin>
	o_hvDCDCEnable = GPIO_PIN_RESET;
 8000714:	4b1c      	ldr	r3, [pc, #112]	@ (8000788 <off_state+0xc8>)
 8000716:	2200      	movs	r2, #0
 8000718:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(chargeIndicatorPort,chargeIndicator,RESET);
 800071a:	2200      	movs	r2, #0
 800071c:	2110      	movs	r1, #16
 800071e:	481b      	ldr	r0, [pc, #108]	@ (800078c <off_state+0xcc>)
 8000720:	f002 fc40 	bl	8002fa4 <HAL_GPIO_WritePin>
	o_chargeIndicator = GPIO_PIN_RESET;
 8000724:	4b1a      	ldr	r3, [pc, #104]	@ (8000790 <off_state+0xd0>)
 8000726:	2200      	movs	r2, #0
 8000728:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(faultIndicatorPort,faultIndicator,RESET);
 800072a:	2200      	movs	r2, #0
 800072c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000730:	4818      	ldr	r0, [pc, #96]	@ (8000794 <off_state+0xd4>)
 8000732:	f002 fc37 	bl	8002fa4 <HAL_GPIO_WritePin>
	o_faultIndicator = GPIO_PIN_RESET;
 8000736:	4b18      	ldr	r3, [pc, #96]	@ (8000798 <off_state+0xd8>)
 8000738:	2200      	movs	r2, #0
 800073a:	701a      	strb	r2, [r3, #0]

	updateAuxADC();
 800073c:	f000 fcd4 	bl	80010e8 <updateAuxADC>
	//Changes States
	if ((i_keyACC != 0 ) && (i_disChargeEnable != 0) && (i_killSwitch != 1) && (ai_auxVoltage > UNDERVOLTAGE)){
 8000740:	4b16      	ldr	r3, [pc, #88]	@ (800079c <off_state+0xdc>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d011      	beq.n	800076c <off_state+0xac>
 8000748:	4b15      	ldr	r3, [pc, #84]	@ (80007a0 <off_state+0xe0>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d00d      	beq.n	800076c <off_state+0xac>
 8000750:	4b14      	ldr	r3, [pc, #80]	@ (80007a4 <off_state+0xe4>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2b01      	cmp	r3, #1
 8000756:	d009      	beq.n	800076c <off_state+0xac>
 8000758:	4b13      	ldr	r3, [pc, #76]	@ (80007a8 <off_state+0xe8>)
 800075a:	881b      	ldrh	r3, [r3, #0]
 800075c:	461a      	mov	r2, r3
 800075e:	f640 438a 	movw	r3, #3210	@ 0xc8a
 8000762:	429a      	cmp	r2, r3
 8000764:	dd02      	ble.n	800076c <off_state+0xac>
		currentState = ACC;
 8000766:	4b11      	ldr	r3, [pc, #68]	@ (80007ac <off_state+0xec>)
 8000768:	2201      	movs	r2, #1
 800076a:	701a      	strb	r2, [r3, #0]
	}
}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000284 	.word	0x20000284
 8000774:	2000027d 	.word	0x2000027d
 8000778:	40021000 	.word	0x40021000
 800077c:	20000299 	.word	0x20000299
 8000780:	20000298 	.word	0x20000298
 8000784:	20000295 	.word	0x20000295
 8000788:	20000294 	.word	0x20000294
 800078c:	40020c00 	.word	0x40020c00
 8000790:	20000296 	.word	0x20000296
 8000794:	40020800 	.word	0x40020800
 8000798:	20000297 	.word	0x20000297
 800079c:	2000028e 	.word	0x2000028e
 80007a0:	20000292 	.word	0x20000292
 80007a4:	2000028f 	.word	0x2000028f
 80007a8:	2000029e 	.word	0x2000029e
 80007ac:	2000027c 	.word	0x2000027c

080007b0 <acc_state>:


void acc_state(void){		// State 1
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
	if( lastState != ACC)
 80007b4:	4b2b      	ldr	r3, [pc, #172]	@ (8000864 <acc_state+0xb4>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d027      	beq.n	800080c <acc_state+0x5c>
	{
		enterStateTime = HAL_GetTick();
 80007bc:	f001 fab2 	bl	8001d24 <HAL_GetTick>
 80007c0:	4603      	mov	r3, r0
 80007c2:	4a29      	ldr	r2, [pc, #164]	@ (8000868 <acc_state+0xb8>)
 80007c4:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(preChargeRelayPort,preChargeRelay,GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007cc:	4827      	ldr	r0, [pc, #156]	@ (800086c <acc_state+0xbc>)
 80007ce:	f002 fbe9 	bl	8002fa4 <HAL_GPIO_WritePin>
		o_preChargeRelay = GPIO_PIN_RESET;
 80007d2:	4b27      	ldr	r3, [pc, #156]	@ (8000870 <acc_state+0xc0>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(hvContactorPort,hvContactor,GPIO_PIN_RESET);
 80007d8:	2200      	movs	r2, #0
 80007da:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007de:	4823      	ldr	r0, [pc, #140]	@ (800086c <acc_state+0xbc>)
 80007e0:	f002 fbe0 	bl	8002fa4 <HAL_GPIO_WritePin>
		o_hvContactor = GPIO_PIN_RESET;
 80007e4:	4b23      	ldr	r3, [pc, #140]	@ (8000874 <acc_state+0xc4>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(auxDCDCDisablePort,auxDCDCDisable,GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2180      	movs	r1, #128	@ 0x80
 80007ee:	481f      	ldr	r0, [pc, #124]	@ (800086c <acc_state+0xbc>)
 80007f0:	f002 fbd8 	bl	8002fa4 <HAL_GPIO_WritePin>
		o_auxDCDCDisable = GPIO_PIN_RESET;
 80007f4:	4b20      	ldr	r3, [pc, #128]	@ (8000878 <acc_state+0xc8>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(hvDCDCEnablePort,hvDCDCEnable,GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000800:	481a      	ldr	r0, [pc, #104]	@ (800086c <acc_state+0xbc>)
 8000802:	f002 fbcf 	bl	8002fa4 <HAL_GPIO_WritePin>
		o_hvDCDCEnable = GPIO_PIN_RESET;
 8000806:	4b1d      	ldr	r3, [pc, #116]	@ (800087c <acc_state+0xcc>)
 8000808:	2200      	movs	r2, #0
 800080a:	701a      	strb	r2, [r3, #0]
	}
	lastState = ACC;
 800080c:	4b15      	ldr	r3, [pc, #84]	@ (8000864 <acc_state+0xb4>)
 800080e:	2201      	movs	r2, #1
 8000810:	701a      	strb	r2, [r3, #0]

	currentTime = HAL_GetTick();
 8000812:	f001 fa87 	bl	8001d24 <HAL_GetTick>
 8000816:	4603      	mov	r3, r0
 8000818:	4a19      	ldr	r2, [pc, #100]	@ (8000880 <acc_state+0xd0>)
 800081a:	6013      	str	r3, [r2, #0]
	// goes back to off if any one bit is wrong
	if((i_keyACC != 1) || (i_disChargeEnable != 1) || (i_killSwitch != 0))			//(i_chargeEnable != 1) ||
 800081c:	4b19      	ldr	r3, [pc, #100]	@ (8000884 <acc_state+0xd4>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d107      	bne.n	8000834 <acc_state+0x84>
 8000824:	4b18      	ldr	r3, [pc, #96]	@ (8000888 <acc_state+0xd8>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2b01      	cmp	r3, #1
 800082a:	d103      	bne.n	8000834 <acc_state+0x84>
 800082c:	4b17      	ldr	r3, [pc, #92]	@ (800088c <acc_state+0xdc>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d002      	beq.n	800083a <acc_state+0x8a>
		currentState = OFF; 			// No fault occurs
 8000834:	4b16      	ldr	r3, [pc, #88]	@ (8000890 <acc_state+0xe0>)
 8000836:	2200      	movs	r2, #0
 8000838:	701a      	strb	r2, [r3, #0]

	//Changes States
	if ((i_keyIGN != 0) && (i_disChargeEnable != 0) && (i_keyACC != 0) && (i_chargeEnable != 0))
 800083a:	4b16      	ldr	r3, [pc, #88]	@ (8000894 <acc_state+0xe4>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d00e      	beq.n	8000860 <acc_state+0xb0>
 8000842:	4b11      	ldr	r3, [pc, #68]	@ (8000888 <acc_state+0xd8>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d00a      	beq.n	8000860 <acc_state+0xb0>
 800084a:	4b0e      	ldr	r3, [pc, #56]	@ (8000884 <acc_state+0xd4>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d006      	beq.n	8000860 <acc_state+0xb0>
 8000852:	4b11      	ldr	r3, [pc, #68]	@ (8000898 <acc_state+0xe8>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d002      	beq.n	8000860 <acc_state+0xb0>
	{
		currentState = IGN;
 800085a:	4b0d      	ldr	r3, [pc, #52]	@ (8000890 <acc_state+0xe0>)
 800085c:	2202      	movs	r2, #2
 800085e:	701a      	strb	r2, [r3, #0]
	}
}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}
 8000864:	2000027d 	.word	0x2000027d
 8000868:	20000280 	.word	0x20000280
 800086c:	40021000 	.word	0x40021000
 8000870:	20000299 	.word	0x20000299
 8000874:	20000298 	.word	0x20000298
 8000878:	20000295 	.word	0x20000295
 800087c:	20000294 	.word	0x20000294
 8000880:	20000284 	.word	0x20000284
 8000884:	2000028e 	.word	0x2000028e
 8000888:	20000292 	.word	0x20000292
 800088c:	2000028f 	.word	0x2000028f
 8000890:	2000027c 	.word	0x2000027c
 8000894:	2000028d 	.word	0x2000028d
 8000898:	20000291 	.word	0x20000291

0800089c <ign_state>:


void ign_state(void){		// State 2
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0

	if( lastState == ACC )
 80008a0:	4b3a      	ldr	r3, [pc, #232]	@ (800098c <ign_state+0xf0>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d112      	bne.n	80008ce <ign_state+0x32>
	{
		enterStateTime = HAL_GetTick();
 80008a8:	f001 fa3c 	bl	8001d24 <HAL_GetTick>
 80008ac:	4603      	mov	r3, r0
 80008ae:	4a38      	ldr	r2, [pc, #224]	@ (8000990 <ign_state+0xf4>)
 80008b0:	6013      	str	r3, [r2, #0]

		HAL_GPIO_WritePin(preChargeRelayPort, preChargeRelay, GPIO_PIN_SET);
 80008b2:	2201      	movs	r2, #1
 80008b4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80008b8:	4836      	ldr	r0, [pc, #216]	@ (8000994 <ign_state+0xf8>)
 80008ba:	f002 fb73 	bl	8002fa4 <HAL_GPIO_WritePin>
		o_preChargeRelay = GPIO_PIN_SET;
 80008be:	4b36      	ldr	r3, [pc, #216]	@ (8000998 <ign_state+0xfc>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(spareOutput3Port, spareOutput3, GPIO_PIN_SET); //why does this exist? test point?
 80008c4:	2201      	movs	r2, #1
 80008c6:	2140      	movs	r1, #64	@ 0x40
 80008c8:	4834      	ldr	r0, [pc, #208]	@ (800099c <ign_state+0x100>)
 80008ca:	f002 fb6b 	bl	8002fa4 <HAL_GPIO_WritePin>
	}
	lastState = IGN;
 80008ce:	4b2f      	ldr	r3, [pc, #188]	@ (800098c <ign_state+0xf0>)
 80008d0:	2202      	movs	r2, #2
 80008d2:	701a      	strb	r2, [r3, #0]
	currentTime = HAL_GetTick();
 80008d4:	f001 fa26 	bl	8001d24 <HAL_GetTick>
 80008d8:	4603      	mov	r3, r0
 80008da:	4a31      	ldr	r2, [pc, #196]	@ (80009a0 <ign_state+0x104>)
 80008dc:	6013      	str	r3, [r2, #0]

	// Key was not held long enough
	if (i_keyIGN != 1)
 80008de:	4b31      	ldr	r3, [pc, #196]	@ (80009a4 <ign_state+0x108>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d003      	beq.n	80008ee <ign_state+0x52>
	{
		currentState = ACC;
 80008e6:	4b30      	ldr	r3, [pc, #192]	@ (80009a8 <ign_state+0x10c>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(hvContactorPort, hvContactor, GPIO_PIN_SET);
		o_hvContactor = GPIO_PIN_SET;

		currentState = DCDC;
	}
}
 80008ec:	e04b      	b.n	8000986 <ign_state+0xea>
	else if ((i_keyACC != 1) || (i_disChargeEnable != 1) || (i_chargeEnable != 1) || (i_killSwitch != 0))
 80008ee:	4b2f      	ldr	r3, [pc, #188]	@ (80009ac <ign_state+0x110>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d10b      	bne.n	800090e <ign_state+0x72>
 80008f6:	4b2e      	ldr	r3, [pc, #184]	@ (80009b0 <ign_state+0x114>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d107      	bne.n	800090e <ign_state+0x72>
 80008fe:	4b2d      	ldr	r3, [pc, #180]	@ (80009b4 <ign_state+0x118>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2b01      	cmp	r3, #1
 8000904:	d103      	bne.n	800090e <ign_state+0x72>
 8000906:	4b2c      	ldr	r3, [pc, #176]	@ (80009b8 <ign_state+0x11c>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d026      	beq.n	800095c <ign_state+0xc0>
		currentState = FAULT;
 800090e:	4b26      	ldr	r3, [pc, #152]	@ (80009a8 <ign_state+0x10c>)
 8000910:	2206      	movs	r2, #6
 8000912:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000914:	4b25      	ldr	r3, [pc, #148]	@ (80009ac <ign_state+0x110>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b01      	cmp	r3, #1
 800091a:	d003      	beq.n	8000924 <ign_state+0x88>
			faultCode = 21;
 800091c:	4b27      	ldr	r3, [pc, #156]	@ (80009bc <ign_state+0x120>)
 800091e:	2215      	movs	r2, #21
 8000920:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000922:	e030      	b.n	8000986 <ign_state+0xea>
		else if (i_disChargeEnable != 1)
 8000924:	4b22      	ldr	r3, [pc, #136]	@ (80009b0 <ign_state+0x114>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2b01      	cmp	r3, #1
 800092a:	d003      	beq.n	8000934 <ign_state+0x98>
			faultCode = 22;
 800092c:	4b23      	ldr	r3, [pc, #140]	@ (80009bc <ign_state+0x120>)
 800092e:	2216      	movs	r2, #22
 8000930:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000932:	e028      	b.n	8000986 <ign_state+0xea>
		else if (i_chargeEnable != 1)
 8000934:	4b1f      	ldr	r3, [pc, #124]	@ (80009b4 <ign_state+0x118>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b01      	cmp	r3, #1
 800093a:	d003      	beq.n	8000944 <ign_state+0xa8>
			faultCode = 23;
 800093c:	4b1f      	ldr	r3, [pc, #124]	@ (80009bc <ign_state+0x120>)
 800093e:	2217      	movs	r2, #23
 8000940:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000942:	e020      	b.n	8000986 <ign_state+0xea>
		else if (i_killSwitch != 0)
 8000944:	4b1c      	ldr	r3, [pc, #112]	@ (80009b8 <ign_state+0x11c>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d003      	beq.n	8000954 <ign_state+0xb8>
			faultCode = 24;
 800094c:	4b1b      	ldr	r3, [pc, #108]	@ (80009bc <ign_state+0x120>)
 800094e:	2218      	movs	r2, #24
 8000950:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000952:	e018      	b.n	8000986 <ign_state+0xea>
			faultCode = 29;
 8000954:	4b19      	ldr	r3, [pc, #100]	@ (80009bc <ign_state+0x120>)
 8000956:	221d      	movs	r2, #29
 8000958:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 800095a:	e014      	b.n	8000986 <ign_state+0xea>
	else if(currentTime - enterStateTime >= 4000)
 800095c:	4b10      	ldr	r3, [pc, #64]	@ (80009a0 <ign_state+0x104>)
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	4b0b      	ldr	r3, [pc, #44]	@ (8000990 <ign_state+0xf4>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	1ad3      	subs	r3, r2, r3
 8000966:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 800096a:	d30c      	bcc.n	8000986 <ign_state+0xea>
		HAL_GPIO_WritePin(hvContactorPort, hvContactor, GPIO_PIN_SET);
 800096c:	2201      	movs	r2, #1
 800096e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000972:	4808      	ldr	r0, [pc, #32]	@ (8000994 <ign_state+0xf8>)
 8000974:	f002 fb16 	bl	8002fa4 <HAL_GPIO_WritePin>
		o_hvContactor = GPIO_PIN_SET;
 8000978:	4b11      	ldr	r3, [pc, #68]	@ (80009c0 <ign_state+0x124>)
 800097a:	2201      	movs	r2, #1
 800097c:	701a      	strb	r2, [r3, #0]
		currentState = DCDC;
 800097e:	4b0a      	ldr	r3, [pc, #40]	@ (80009a8 <ign_state+0x10c>)
 8000980:	2203      	movs	r2, #3
 8000982:	701a      	strb	r2, [r3, #0]
}
 8000984:	e7ff      	b.n	8000986 <ign_state+0xea>
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	2000027d 	.word	0x2000027d
 8000990:	20000280 	.word	0x20000280
 8000994:	40021000 	.word	0x40021000
 8000998:	20000299 	.word	0x20000299
 800099c:	40020c00 	.word	0x40020c00
 80009a0:	20000284 	.word	0x20000284
 80009a4:	2000028d 	.word	0x2000028d
 80009a8:	2000027c 	.word	0x2000027c
 80009ac:	2000028e 	.word	0x2000028e
 80009b0:	20000292 	.word	0x20000292
 80009b4:	20000291 	.word	0x20000291
 80009b8:	2000028f 	.word	0x2000028f
 80009bc:	2000028c 	.word	0x2000028c
 80009c0:	20000298 	.word	0x20000298

080009c4 <dcdc_state>:


//Short state for the transition between the two DCDC's
void dcdc_state(void){		// State 3
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0


	if ( lastState == IGN )
 80009c8:	4b37      	ldr	r3, [pc, #220]	@ (8000aa8 <dcdc_state+0xe4>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b02      	cmp	r3, #2
 80009ce:	d116      	bne.n	80009fe <dcdc_state+0x3a>
	{
		enterStateTime = HAL_GetTick();
 80009d0:	f001 f9a8 	bl	8001d24 <HAL_GetTick>
 80009d4:	4603      	mov	r3, r0
 80009d6:	4a35      	ldr	r2, [pc, #212]	@ (8000aac <dcdc_state+0xe8>)
 80009d8:	6013      	str	r3, [r2, #0]

		HAL_GPIO_WritePin(hvDCDCEnablePort,hvDCDCEnable, GPIO_PIN_SET);
 80009da:	2201      	movs	r2, #1
 80009dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009e0:	4833      	ldr	r0, [pc, #204]	@ (8000ab0 <dcdc_state+0xec>)
 80009e2:	f002 fadf 	bl	8002fa4 <HAL_GPIO_WritePin>
		o_hvDCDCEnable = GPIO_PIN_SET;
 80009e6:	4b33      	ldr	r3, [pc, #204]	@ (8000ab4 <dcdc_state+0xf0>)
 80009e8:	2201      	movs	r2, #1
 80009ea:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(preChargeRelayPort,preChargeRelay, GPIO_PIN_RESET);
 80009ec:	2200      	movs	r2, #0
 80009ee:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009f2:	482f      	ldr	r0, [pc, #188]	@ (8000ab0 <dcdc_state+0xec>)
 80009f4:	f002 fad6 	bl	8002fa4 <HAL_GPIO_WritePin>
		o_preChargeRelay = GPIO_PIN_RESET;
 80009f8:	4b2f      	ldr	r3, [pc, #188]	@ (8000ab8 <dcdc_state+0xf4>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	701a      	strb	r2, [r3, #0]
	}

	lastState = DCDC;
 80009fe:	4b2a      	ldr	r3, [pc, #168]	@ (8000aa8 <dcdc_state+0xe4>)
 8000a00:	2203      	movs	r2, #3
 8000a02:	701a      	strb	r2, [r3, #0]

	currentTime = HAL_GetTick();
 8000a04:	f001 f98e 	bl	8001d24 <HAL_GetTick>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	4a2c      	ldr	r2, [pc, #176]	@ (8000abc <dcdc_state+0xf8>)
 8000a0c:	6013      	str	r3, [r2, #0]
	// Check if any signal is missing --> FAULT State
	if ((i_keyACC != 1) || (i_disChargeEnable != 1) || (i_chargeEnable != 1) || (i_killSwitch != 0))
 8000a0e:	4b2c      	ldr	r3, [pc, #176]	@ (8000ac0 <dcdc_state+0xfc>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d10b      	bne.n	8000a2e <dcdc_state+0x6a>
 8000a16:	4b2b      	ldr	r3, [pc, #172]	@ (8000ac4 <dcdc_state+0x100>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d107      	bne.n	8000a2e <dcdc_state+0x6a>
 8000a1e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ac8 <dcdc_state+0x104>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d103      	bne.n	8000a2e <dcdc_state+0x6a>
 8000a26:	4b29      	ldr	r3, [pc, #164]	@ (8000acc <dcdc_state+0x108>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d026      	beq.n	8000a7c <dcdc_state+0xb8>
	{
		currentState = FAULT;
 8000a2e:	4b28      	ldr	r3, [pc, #160]	@ (8000ad0 <dcdc_state+0x10c>)
 8000a30:	2206      	movs	r2, #6
 8000a32:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000a34:	4b22      	ldr	r3, [pc, #136]	@ (8000ac0 <dcdc_state+0xfc>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d003      	beq.n	8000a44 <dcdc_state+0x80>
		{
			faultCode = 31;
 8000a3c:	4b25      	ldr	r3, [pc, #148]	@ (8000ad4 <dcdc_state+0x110>)
 8000a3e:	221f      	movs	r2, #31
 8000a40:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000a42:	e02f      	b.n	8000aa4 <dcdc_state+0xe0>
		}
		else if (i_disChargeEnable != 1)
 8000a44:	4b1f      	ldr	r3, [pc, #124]	@ (8000ac4 <dcdc_state+0x100>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d003      	beq.n	8000a54 <dcdc_state+0x90>
		{
			faultCode = 32;
 8000a4c:	4b21      	ldr	r3, [pc, #132]	@ (8000ad4 <dcdc_state+0x110>)
 8000a4e:	2220      	movs	r2, #32
 8000a50:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000a52:	e027      	b.n	8000aa4 <dcdc_state+0xe0>
		}
		else if (i_chargeEnable != 1)
 8000a54:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac8 <dcdc_state+0x104>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d003      	beq.n	8000a64 <dcdc_state+0xa0>
		{
			faultCode = 33;
 8000a5c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad4 <dcdc_state+0x110>)
 8000a5e:	2221      	movs	r2, #33	@ 0x21
 8000a60:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000a62:	e01f      	b.n	8000aa4 <dcdc_state+0xe0>
		}
		else if (i_killSwitch != 0)
 8000a64:	4b19      	ldr	r3, [pc, #100]	@ (8000acc <dcdc_state+0x108>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d003      	beq.n	8000a74 <dcdc_state+0xb0>
		{
			faultCode = 34;
 8000a6c:	4b19      	ldr	r3, [pc, #100]	@ (8000ad4 <dcdc_state+0x110>)
 8000a6e:	2222      	movs	r2, #34	@ 0x22
 8000a70:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000a72:	e017      	b.n	8000aa4 <dcdc_state+0xe0>
		}
		else
		{
			faultCode = 39;
 8000a74:	4b17      	ldr	r3, [pc, #92]	@ (8000ad4 <dcdc_state+0x110>)
 8000a76:	2227      	movs	r2, #39	@ 0x27
 8000a78:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000a7a:	e013      	b.n	8000aa4 <dcdc_state+0xe0>
		}
	}
	// Switch off the AUX-DCDC after 1000 ms(1sec)
	else if (currentTime - enterStateTime >= 1000)
 8000a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000abc <dcdc_state+0xf8>)
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	4b0a      	ldr	r3, [pc, #40]	@ (8000aac <dcdc_state+0xe8>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000a8a:	d30b      	bcc.n	8000aa4 <dcdc_state+0xe0>
	{
		HAL_GPIO_WritePin(auxDCDCDisablePort,auxDCDCDisable, GPIO_PIN_SET);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	2180      	movs	r1, #128	@ 0x80
 8000a90:	4807      	ldr	r0, [pc, #28]	@ (8000ab0 <dcdc_state+0xec>)
 8000a92:	f002 fa87 	bl	8002fa4 <HAL_GPIO_WritePin>
		o_auxDCDCDisable = GPIO_PIN_SET;
 8000a96:	4b10      	ldr	r3, [pc, #64]	@ (8000ad8 <dcdc_state+0x114>)
 8000a98:	2201      	movs	r2, #1
 8000a9a:	701a      	strb	r2, [r3, #0]
		currentState = ON;
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad0 <dcdc_state+0x10c>)
 8000a9e:	2204      	movs	r2, #4
 8000aa0:	701a      	strb	r2, [r3, #0]
	}
}
 8000aa2:	e7ff      	b.n	8000aa4 <dcdc_state+0xe0>
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	2000027d 	.word	0x2000027d
 8000aac:	20000280 	.word	0x20000280
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	20000294 	.word	0x20000294
 8000ab8:	20000299 	.word	0x20000299
 8000abc:	20000284 	.word	0x20000284
 8000ac0:	2000028e 	.word	0x2000028e
 8000ac4:	20000292 	.word	0x20000292
 8000ac8:	20000291 	.word	0x20000291
 8000acc:	2000028f 	.word	0x2000028f
 8000ad0:	2000027c 	.word	0x2000027c
 8000ad4:	2000028c 	.word	0x2000028c
 8000ad8:	20000295 	.word	0x20000295

08000adc <on_state>:


void on_state(void){		// State 4 = DRIVING
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0


	if ( lastState == DCDC )
 8000ae0:	4b29      	ldr	r3, [pc, #164]	@ (8000b88 <on_state+0xac>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b03      	cmp	r3, #3
 8000ae6:	d104      	bne.n	8000af2 <on_state+0x16>
	{
		enterStateTime = HAL_GetTick();
 8000ae8:	f001 f91c 	bl	8001d24 <HAL_GetTick>
 8000aec:	4603      	mov	r3, r0
 8000aee:	4a27      	ldr	r2, [pc, #156]	@ (8000b8c <on_state+0xb0>)
 8000af0:	6013      	str	r3, [r2, #0]
	}
	lastState = ON;
 8000af2:	4b25      	ldr	r3, [pc, #148]	@ (8000b88 <on_state+0xac>)
 8000af4:	2204      	movs	r2, #4
 8000af6:	701a      	strb	r2, [r3, #0]

	currentTime = HAL_GetTick();
 8000af8:	f001 f914 	bl	8001d24 <HAL_GetTick>
 8000afc:	4603      	mov	r3, r0
 8000afe:	4a24      	ldr	r2, [pc, #144]	@ (8000b90 <on_state+0xb4>)
 8000b00:	6013      	str	r3, [r2, #0]


	// SETS THE OUTPUTS!!!
	// Throttle pedal output function

	updatePedal();
 8000b02:	f000 fa81 	bl	8001008 <updatePedal>

	updateRegen();
 8000b06:	f000 fac7 	bl	8001098 <updateRegen>


	// Go to FAULT_TEMP state because we might want to charge if disChargeEnable goes 0
	if (i_disChargeEnable != 1)
 8000b0a:	4b22      	ldr	r3, [pc, #136]	@ (8000b94 <on_state+0xb8>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d002      	beq.n	8000b18 <on_state+0x3c>
	{
		currentState = FAULT_TEMP;
 8000b12:	4b21      	ldr	r3, [pc, #132]	@ (8000b98 <on_state+0xbc>)
 8000b14:	2207      	movs	r2, #7
 8000b16:	701a      	strb	r2, [r3, #0]
	}

	// Check if any signal is missing --> FAULT State
	if ((i_keyACC != 1) || (i_chargeEnable != 1) || (i_chargeContactor != 0) || (i_killSwitch != 0))
 8000b18:	4b20      	ldr	r3, [pc, #128]	@ (8000b9c <on_state+0xc0>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d10b      	bne.n	8000b38 <on_state+0x5c>
 8000b20:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba0 <on_state+0xc4>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d107      	bne.n	8000b38 <on_state+0x5c>
 8000b28:	4b1e      	ldr	r3, [pc, #120]	@ (8000ba4 <on_state+0xc8>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d103      	bne.n	8000b38 <on_state+0x5c>
 8000b30:	4b1d      	ldr	r3, [pc, #116]	@ (8000ba8 <on_state+0xcc>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d025      	beq.n	8000b84 <on_state+0xa8>
	{
		currentState = FAULT;
 8000b38:	4b17      	ldr	r3, [pc, #92]	@ (8000b98 <on_state+0xbc>)
 8000b3a:	2206      	movs	r2, #6
 8000b3c:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000b3e:	4b17      	ldr	r3, [pc, #92]	@ (8000b9c <on_state+0xc0>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d003      	beq.n	8000b4e <on_state+0x72>
		{
			faultCode = 41;
 8000b46:	4b19      	ldr	r3, [pc, #100]	@ (8000bac <on_state+0xd0>)
 8000b48:	2229      	movs	r2, #41	@ 0x29
 8000b4a:	701a      	strb	r2, [r3, #0]
		else
		{
			faultCode = 49;
		}
	}
}
 8000b4c:	e01a      	b.n	8000b84 <on_state+0xa8>
		else if (i_chargeEnable != 1)
 8000b4e:	4b14      	ldr	r3, [pc, #80]	@ (8000ba0 <on_state+0xc4>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d003      	beq.n	8000b5e <on_state+0x82>
			faultCode = 43;
 8000b56:	4b15      	ldr	r3, [pc, #84]	@ (8000bac <on_state+0xd0>)
 8000b58:	222b      	movs	r2, #43	@ 0x2b
 8000b5a:	701a      	strb	r2, [r3, #0]
}
 8000b5c:	e012      	b.n	8000b84 <on_state+0xa8>
		else if (i_killSwitch != 0)
 8000b5e:	4b12      	ldr	r3, [pc, #72]	@ (8000ba8 <on_state+0xcc>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d003      	beq.n	8000b6e <on_state+0x92>
			faultCode = 44;
 8000b66:	4b11      	ldr	r3, [pc, #68]	@ (8000bac <on_state+0xd0>)
 8000b68:	222c      	movs	r2, #44	@ 0x2c
 8000b6a:	701a      	strb	r2, [r3, #0]
}
 8000b6c:	e00a      	b.n	8000b84 <on_state+0xa8>
		else if (i_chargeContactor != 0)
 8000b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba4 <on_state+0xc8>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d003      	beq.n	8000b7e <on_state+0xa2>
			faultCode = 45;
 8000b76:	4b0d      	ldr	r3, [pc, #52]	@ (8000bac <on_state+0xd0>)
 8000b78:	222d      	movs	r2, #45	@ 0x2d
 8000b7a:	701a      	strb	r2, [r3, #0]
}
 8000b7c:	e002      	b.n	8000b84 <on_state+0xa8>
			faultCode = 49;
 8000b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000bac <on_state+0xd0>)
 8000b80:	2231      	movs	r2, #49	@ 0x31
 8000b82:	701a      	strb	r2, [r3, #0]
}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	2000027d 	.word	0x2000027d
 8000b8c:	20000280 	.word	0x20000280
 8000b90:	20000284 	.word	0x20000284
 8000b94:	20000292 	.word	0x20000292
 8000b98:	2000027c 	.word	0x2000027c
 8000b9c:	2000028e 	.word	0x2000028e
 8000ba0:	20000291 	.word	0x20000291
 8000ba4:	20000290 	.word	0x20000290
 8000ba8:	2000028f 	.word	0x2000028f
 8000bac:	2000028c 	.word	0x2000028c

08000bb0 <faultTemp_state>:

void faultTemp_state(void){			// State 7
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
	if (lastState == ON)
 8000bb4:	4b3f      	ldr	r3, [pc, #252]	@ (8000cb4 <faultTemp_state+0x104>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	2b04      	cmp	r3, #4
 8000bba:	d115      	bne.n	8000be8 <faultTemp_state+0x38>
	{
		// Set fault indicator GPIO pin
		HAL_GPIO_WritePin(faultIndicatorPort, faultIndicator, GPIO_PIN_SET);
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bc2:	483d      	ldr	r0, [pc, #244]	@ (8000cb8 <faultTemp_state+0x108>)
 8000bc4:	f002 f9ee 	bl	8002fa4 <HAL_GPIO_WritePin>
		o_faultIndicator = GPIO_PIN_SET;
 8000bc8:	4b3c      	ldr	r3, [pc, #240]	@ (8000cbc <faultTemp_state+0x10c>)
 8000bca:	2201      	movs	r2, #1
 8000bcc:	701a      	strb	r2, [r3, #0]

        //Reset auxDCDCDisable GPIO pin
        HAL_GPIO_WritePin(auxDCDCDisablePort,auxDCDCDisable, GPIO_PIN_RESET);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2180      	movs	r1, #128	@ 0x80
 8000bd2:	483b      	ldr	r0, [pc, #236]	@ (8000cc0 <faultTemp_state+0x110>)
 8000bd4:	f002 f9e6 	bl	8002fa4 <HAL_GPIO_WritePin>
        o_auxDCDCDisable = GPIO_PIN_RESET;
 8000bd8:	4b3a      	ldr	r3, [pc, #232]	@ (8000cc4 <faultTemp_state+0x114>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	701a      	strb	r2, [r3, #0]

		enterStateTime = HAL_GetTick();
 8000bde:	f001 f8a1 	bl	8001d24 <HAL_GetTick>
 8000be2:	4603      	mov	r3, r0
 8000be4:	4a38      	ldr	r2, [pc, #224]	@ (8000cc8 <faultTemp_state+0x118>)
 8000be6:	6013      	str	r3, [r2, #0]
	}
	lastState = FAULT_TEMP;
 8000be8:	4b32      	ldr	r3, [pc, #200]	@ (8000cb4 <faultTemp_state+0x104>)
 8000bea:	2207      	movs	r2, #7
 8000bec:	701a      	strb	r2, [r3, #0]

	currentTime = HAL_GetTick();
 8000bee:	f001 f899 	bl	8001d24 <HAL_GetTick>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	4a35      	ldr	r2, [pc, #212]	@ (8000ccc <faultTemp_state+0x11c>)
 8000bf6:	6013      	str	r3, [r2, #0]



    if (currentTime - enterStateTime >= 500) {
 8000bf8:	4b34      	ldr	r3, [pc, #208]	@ (8000ccc <faultTemp_state+0x11c>)
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	4b32      	ldr	r3, [pc, #200]	@ (8000cc8 <faultTemp_state+0x118>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000c06:	d311      	bcc.n	8000c2c <faultTemp_state+0x7c>
        // Reset hvDCDCEnable GPIO pin after 500ms
        HAL_GPIO_WritePin(hvDCDCEnablePort, hvDCDCEnable, GPIO_PIN_RESET);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c0e:	482c      	ldr	r0, [pc, #176]	@ (8000cc0 <faultTemp_state+0x110>)
 8000c10:	f002 f9c8 	bl	8002fa4 <HAL_GPIO_WritePin>
        o_hvDCDCEnable = GPIO_PIN_RESET;
 8000c14:	4b2e      	ldr	r3, [pc, #184]	@ (8000cd0 <faultTemp_state+0x120>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	701a      	strb	r2, [r3, #0]

        // Open HV Contactor
        HAL_GPIO_WritePin(hvContactorPort, hvContactor, GPIO_PIN_RESET);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c20:	4827      	ldr	r0, [pc, #156]	@ (8000cc0 <faultTemp_state+0x110>)
 8000c22:	f002 f9bf 	bl	8002fa4 <HAL_GPIO_WritePin>
        o_hvContactor = GPIO_PIN_RESET;
 8000c26:	4b2b      	ldr	r3, [pc, #172]	@ (8000cd4 <faultTemp_state+0x124>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	701a      	strb	r2, [r3, #0]
    }

    // FAULT INDICATOR
    faultBlinker();
 8000c2c:	f000 fa72 	bl	8001114 <faultBlinker>

    // Switch to charging state because chargeContactor = 1
    if (i_chargeContactor == 1){
 8000c30:	4b29      	ldr	r3, [pc, #164]	@ (8000cd8 <faultTemp_state+0x128>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d103      	bne.n	8000c40 <faultTemp_state+0x90>
    	currentState = CHARGE;
 8000c38:	4b28      	ldr	r3, [pc, #160]	@ (8000cdc <faultTemp_state+0x12c>)
 8000c3a:	2205      	movs	r2, #5
 8000c3c:	701a      	strb	r2, [r3, #0]
	{
		currentState = FAULT;
		faultCode = 72;
	}

}
 8000c3e:	e037      	b.n	8000cb0 <faultTemp_state+0x100>
    else if((i_keyACC != 1) || (i_chargeEnable != 1) || (i_killSwitch != 0))
 8000c40:	4b27      	ldr	r3, [pc, #156]	@ (8000ce0 <faultTemp_state+0x130>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d107      	bne.n	8000c58 <faultTemp_state+0xa8>
 8000c48:	4b26      	ldr	r3, [pc, #152]	@ (8000ce4 <faultTemp_state+0x134>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d103      	bne.n	8000c58 <faultTemp_state+0xa8>
 8000c50:	4b25      	ldr	r3, [pc, #148]	@ (8000ce8 <faultTemp_state+0x138>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d01a      	beq.n	8000c8e <faultTemp_state+0xde>
		currentState = FAULT;
 8000c58:	4b20      	ldr	r3, [pc, #128]	@ (8000cdc <faultTemp_state+0x12c>)
 8000c5a:	2206      	movs	r2, #6
 8000c5c:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000c5e:	4b20      	ldr	r3, [pc, #128]	@ (8000ce0 <faultTemp_state+0x130>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d003      	beq.n	8000c6e <faultTemp_state+0xbe>
			faultCode = 71;
 8000c66:	4b21      	ldr	r3, [pc, #132]	@ (8000cec <faultTemp_state+0x13c>)
 8000c68:	2247      	movs	r2, #71	@ 0x47
 8000c6a:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000c6c:	e01f      	b.n	8000cae <faultTemp_state+0xfe>
		else if (i_chargeEnable != 1)
 8000c6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce4 <faultTemp_state+0x134>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d003      	beq.n	8000c7e <faultTemp_state+0xce>
			faultCode = 73;
 8000c76:	4b1d      	ldr	r3, [pc, #116]	@ (8000cec <faultTemp_state+0x13c>)
 8000c78:	2249      	movs	r2, #73	@ 0x49
 8000c7a:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000c7c:	e017      	b.n	8000cae <faultTemp_state+0xfe>
		else if (i_killSwitch != 0)
 8000c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce8 <faultTemp_state+0x138>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d013      	beq.n	8000cae <faultTemp_state+0xfe>
			faultCode = 75;
 8000c86:	4b19      	ldr	r3, [pc, #100]	@ (8000cec <faultTemp_state+0x13c>)
 8000c88:	224b      	movs	r2, #75	@ 0x4b
 8000c8a:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000c8c:	e00f      	b.n	8000cae <faultTemp_state+0xfe>
    else if (currentTime - enterStateTime >= 10000)
 8000c8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000ccc <faultTemp_state+0x11c>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	4b0d      	ldr	r3, [pc, #52]	@ (8000cc8 <faultTemp_state+0x118>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	1ad3      	subs	r3, r2, r3
 8000c98:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d907      	bls.n	8000cb0 <faultTemp_state+0x100>
		currentState = FAULT;
 8000ca0:	4b0e      	ldr	r3, [pc, #56]	@ (8000cdc <faultTemp_state+0x12c>)
 8000ca2:	2206      	movs	r2, #6
 8000ca4:	701a      	strb	r2, [r3, #0]
		faultCode = 72;
 8000ca6:	4b11      	ldr	r3, [pc, #68]	@ (8000cec <faultTemp_state+0x13c>)
 8000ca8:	2248      	movs	r2, #72	@ 0x48
 8000caa:	701a      	strb	r2, [r3, #0]
}
 8000cac:	e000      	b.n	8000cb0 <faultTemp_state+0x100>
		if (i_keyACC != 1)
 8000cae:	bf00      	nop
}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	2000027d 	.word	0x2000027d
 8000cb8:	40020800 	.word	0x40020800
 8000cbc:	20000297 	.word	0x20000297
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	20000295 	.word	0x20000295
 8000cc8:	20000280 	.word	0x20000280
 8000ccc:	20000284 	.word	0x20000284
 8000cd0:	20000294 	.word	0x20000294
 8000cd4:	20000298 	.word	0x20000298
 8000cd8:	20000290 	.word	0x20000290
 8000cdc:	2000027c 	.word	0x2000027c
 8000ce0:	2000028e 	.word	0x2000028e
 8000ce4:	20000291 	.word	0x20000291
 8000ce8:	2000028f 	.word	0x2000028f
 8000cec:	2000028c 	.word	0x2000028c

08000cf0 <charge_state>:

void charge_state(void){	// State 5
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0

	// Start charging routine by enabling AUX DCDC
	if (lastState == FAULT_TEMP)
 8000cf4:	4b34      	ldr	r3, [pc, #208]	@ (8000dc8 <charge_state+0xd8>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2b07      	cmp	r3, #7
 8000cfa:	d11d      	bne.n	8000d38 <charge_state+0x48>
	{
        // Set auxDCDCDisable GPIO pin -> AUX-DCDC off
        HAL_GPIO_WritePin(auxDCDCDisablePort,auxDCDCDisable, GPIO_PIN_SET);
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	2180      	movs	r1, #128	@ 0x80
 8000d00:	4832      	ldr	r0, [pc, #200]	@ (8000dcc <charge_state+0xdc>)
 8000d02:	f002 f94f 	bl	8002fa4 <HAL_GPIO_WritePin>
        o_auxDCDCDisable = GPIO_PIN_SET;
 8000d06:	4b32      	ldr	r3, [pc, #200]	@ (8000dd0 <charge_state+0xe0>)
 8000d08:	2201      	movs	r2, #1
 8000d0a:	701a      	strb	r2, [r3, #0]

		// Reset fault indicator GPIO pin
		HAL_GPIO_WritePin(faultIndicatorPort, faultIndicator, GPIO_PIN_RESET);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d12:	4830      	ldr	r0, [pc, #192]	@ (8000dd4 <charge_state+0xe4>)
 8000d14:	f002 f946 	bl	8002fa4 <HAL_GPIO_WritePin>
		o_faultIndicator = GPIO_PIN_RESET;
 8000d18:	4b2f      	ldr	r3, [pc, #188]	@ (8000dd8 <charge_state+0xe8>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	701a      	strb	r2, [r3, #0]

        // Set charge indicator GPIO pin
        HAL_GPIO_WritePin(chargeIndicatorPort, chargeIndicator, GPIO_PIN_SET);
 8000d1e:	2201      	movs	r2, #1
 8000d20:	2110      	movs	r1, #16
 8000d22:	482e      	ldr	r0, [pc, #184]	@ (8000ddc <charge_state+0xec>)
 8000d24:	f002 f93e 	bl	8002fa4 <HAL_GPIO_WritePin>
        o_chargeIndicator = GPIO_PIN_SET;
 8000d28:	4b2d      	ldr	r3, [pc, #180]	@ (8000de0 <charge_state+0xf0>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	701a      	strb	r2, [r3, #0]

		enterStateTime = HAL_GetTick();
 8000d2e:	f000 fff9 	bl	8001d24 <HAL_GetTick>
 8000d32:	4603      	mov	r3, r0
 8000d34:	4a2b      	ldr	r2, [pc, #172]	@ (8000de4 <charge_state+0xf4>)
 8000d36:	6013      	str	r3, [r2, #0]
	}
	lastState = CHARGE;
 8000d38:	4b23      	ldr	r3, [pc, #140]	@ (8000dc8 <charge_state+0xd8>)
 8000d3a:	2205      	movs	r2, #5
 8000d3c:	701a      	strb	r2, [r3, #0]

	currentTime = HAL_GetTick();
 8000d3e:	f000 fff1 	bl	8001d24 <HAL_GetTick>
 8000d42:	4603      	mov	r3, r0
 8000d44:	4a28      	ldr	r2, [pc, #160]	@ (8000de8 <charge_state+0xf8>)
 8000d46:	6013      	str	r3, [r2, #0]

	if((i_keyACC != 1) || (i_chargeEnable != 1) || (i_disChargeEnable != 0)  || (i_killSwitch != 0))
 8000d48:	4b28      	ldr	r3, [pc, #160]	@ (8000dec <charge_state+0xfc>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d10b      	bne.n	8000d68 <charge_state+0x78>
 8000d50:	4b27      	ldr	r3, [pc, #156]	@ (8000df0 <charge_state+0x100>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d107      	bne.n	8000d68 <charge_state+0x78>
 8000d58:	4b26      	ldr	r3, [pc, #152]	@ (8000df4 <charge_state+0x104>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d103      	bne.n	8000d68 <charge_state+0x78>
 8000d60:	4b25      	ldr	r3, [pc, #148]	@ (8000df8 <charge_state+0x108>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d02d      	beq.n	8000dc4 <charge_state+0xd4>
	{
		currentState = FAULT;
 8000d68:	4b24      	ldr	r3, [pc, #144]	@ (8000dfc <charge_state+0x10c>)
 8000d6a:	2206      	movs	r2, #6
 8000d6c:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000d6e:	4b1f      	ldr	r3, [pc, #124]	@ (8000dec <charge_state+0xfc>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d003      	beq.n	8000d7e <charge_state+0x8e>
		{
			faultCode = 51;
 8000d76:	4b22      	ldr	r3, [pc, #136]	@ (8000e00 <charge_state+0x110>)
 8000d78:	2233      	movs	r2, #51	@ 0x33
 8000d7a:	701a      	strb	r2, [r3, #0]
		{
			faultCode = 59;
		}
	}

}
 8000d7c:	e022      	b.n	8000dc4 <charge_state+0xd4>
		else if (i_disChargeEnable != 0)
 8000d7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000df4 <charge_state+0x104>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d003      	beq.n	8000d8e <charge_state+0x9e>
			faultCode = 52;
 8000d86:	4b1e      	ldr	r3, [pc, #120]	@ (8000e00 <charge_state+0x110>)
 8000d88:	2234      	movs	r2, #52	@ 0x34
 8000d8a:	701a      	strb	r2, [r3, #0]
}
 8000d8c:	e01a      	b.n	8000dc4 <charge_state+0xd4>
		else if (i_chargeEnable != 1)
 8000d8e:	4b18      	ldr	r3, [pc, #96]	@ (8000df0 <charge_state+0x100>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d003      	beq.n	8000d9e <charge_state+0xae>
			faultCode = 53;
 8000d96:	4b1a      	ldr	r3, [pc, #104]	@ (8000e00 <charge_state+0x110>)
 8000d98:	2235      	movs	r2, #53	@ 0x35
 8000d9a:	701a      	strb	r2, [r3, #0]
}
 8000d9c:	e012      	b.n	8000dc4 <charge_state+0xd4>
		else if (i_chargeContactor != 1)
 8000d9e:	4b19      	ldr	r3, [pc, #100]	@ (8000e04 <charge_state+0x114>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d003      	beq.n	8000dae <charge_state+0xbe>
			faultCode = 54;
 8000da6:	4b16      	ldr	r3, [pc, #88]	@ (8000e00 <charge_state+0x110>)
 8000da8:	2236      	movs	r2, #54	@ 0x36
 8000daa:	701a      	strb	r2, [r3, #0]
}
 8000dac:	e00a      	b.n	8000dc4 <charge_state+0xd4>
		else if (i_killSwitch != 0)
 8000dae:	4b12      	ldr	r3, [pc, #72]	@ (8000df8 <charge_state+0x108>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d003      	beq.n	8000dbe <charge_state+0xce>
			faultCode = 55;
 8000db6:	4b12      	ldr	r3, [pc, #72]	@ (8000e00 <charge_state+0x110>)
 8000db8:	2237      	movs	r2, #55	@ 0x37
 8000dba:	701a      	strb	r2, [r3, #0]
}
 8000dbc:	e002      	b.n	8000dc4 <charge_state+0xd4>
			faultCode = 59;
 8000dbe:	4b10      	ldr	r3, [pc, #64]	@ (8000e00 <charge_state+0x110>)
 8000dc0:	223b      	movs	r2, #59	@ 0x3b
 8000dc2:	701a      	strb	r2, [r3, #0]
}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	2000027d 	.word	0x2000027d
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	20000295 	.word	0x20000295
 8000dd4:	40020800 	.word	0x40020800
 8000dd8:	20000297 	.word	0x20000297
 8000ddc:	40020c00 	.word	0x40020c00
 8000de0:	20000296 	.word	0x20000296
 8000de4:	20000280 	.word	0x20000280
 8000de8:	20000284 	.word	0x20000284
 8000dec:	2000028e 	.word	0x2000028e
 8000df0:	20000291 	.word	0x20000291
 8000df4:	20000292 	.word	0x20000292
 8000df8:	2000028f 	.word	0x2000028f
 8000dfc:	2000027c 	.word	0x2000027c
 8000e00:	2000028c 	.word	0x2000028c
 8000e04:	20000290 	.word	0x20000290

08000e08 <fault_state>:


void fault_state(void) { // State 6
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0

    if (lastState != FAULT) {
 8000e0c:	4b28      	ldr	r3, [pc, #160]	@ (8000eb0 <fault_state+0xa8>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b06      	cmp	r3, #6
 8000e12:	d029      	beq.n	8000e68 <fault_state+0x60>
        // Set fault indicator GPIO pin
        HAL_GPIO_WritePin(faultIndicatorPort, faultIndicator, GPIO_PIN_SET);
 8000e14:	2201      	movs	r2, #1
 8000e16:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e1a:	4826      	ldr	r0, [pc, #152]	@ (8000eb4 <fault_state+0xac>)
 8000e1c:	f002 f8c2 	bl	8002fa4 <HAL_GPIO_WritePin>
        o_faultIndicator = GPIO_PIN_SET;
 8000e20:	4b25      	ldr	r3, [pc, #148]	@ (8000eb8 <fault_state+0xb0>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	701a      	strb	r2, [r3, #0]

        // Reset charge indicator GPIO pin
        HAL_GPIO_WritePin(chargeIndicatorPort, chargeIndicator, GPIO_PIN_RESET);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2110      	movs	r1, #16
 8000e2a:	4824      	ldr	r0, [pc, #144]	@ (8000ebc <fault_state+0xb4>)
 8000e2c:	f002 f8ba 	bl	8002fa4 <HAL_GPIO_WritePin>
        o_chargeIndicator = GPIO_PIN_RESET;
 8000e30:	4b23      	ldr	r3, [pc, #140]	@ (8000ec0 <fault_state+0xb8>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	701a      	strb	r2, [r3, #0]

        // Reset pre-charge relay GPIO pin
        HAL_GPIO_WritePin(preChargeRelayPort, preChargeRelay, GPIO_PIN_RESET);
 8000e36:	2200      	movs	r2, #0
 8000e38:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e3c:	4821      	ldr	r0, [pc, #132]	@ (8000ec4 <fault_state+0xbc>)
 8000e3e:	f002 f8b1 	bl	8002fa4 <HAL_GPIO_WritePin>
        o_preChargeRelay = GPIO_PIN_RESET;
 8000e42:	4b21      	ldr	r3, [pc, #132]	@ (8000ec8 <fault_state+0xc0>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	701a      	strb	r2, [r3, #0]

        //Reset auxDCDCDisable GPIO pin -> Aux-DCDC turns on
        HAL_GPIO_WritePin(auxDCDCDisablePort,auxDCDCDisable, GPIO_PIN_RESET);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2180      	movs	r1, #128	@ 0x80
 8000e4c:	481d      	ldr	r0, [pc, #116]	@ (8000ec4 <fault_state+0xbc>)
 8000e4e:	f002 f8a9 	bl	8002fa4 <HAL_GPIO_WritePin>
        o_auxDCDCDisable = GPIO_PIN_RESET;
 8000e52:	4b1e      	ldr	r3, [pc, #120]	@ (8000ecc <fault_state+0xc4>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	701a      	strb	r2, [r3, #0]

        // Update last state to FAULT
        lastState = FAULT;
 8000e58:	4b15      	ldr	r3, [pc, #84]	@ (8000eb0 <fault_state+0xa8>)
 8000e5a:	2206      	movs	r2, #6
 8000e5c:	701a      	strb	r2, [r3, #0]

        // Record the time when entering the FAULT state
        enterStateTime = HAL_GetTick();
 8000e5e:	f000 ff61 	bl	8001d24 <HAL_GetTick>
 8000e62:	4603      	mov	r3, r0
 8000e64:	4a1a      	ldr	r2, [pc, #104]	@ (8000ed0 <fault_state+0xc8>)
 8000e66:	6013      	str	r3, [r2, #0]

    }

    currentTime = HAL_GetTick();
 8000e68:	f000 ff5c 	bl	8001d24 <HAL_GetTick>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	4a19      	ldr	r2, [pc, #100]	@ (8000ed4 <fault_state+0xcc>)
 8000e70:	6013      	str	r3, [r2, #0]

    if (currentTime - enterStateTime >= 500) {
 8000e72:	4b18      	ldr	r3, [pc, #96]	@ (8000ed4 <fault_state+0xcc>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	4b16      	ldr	r3, [pc, #88]	@ (8000ed0 <fault_state+0xc8>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	1ad3      	subs	r3, r2, r3
 8000e7c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000e80:	d311      	bcc.n	8000ea6 <fault_state+0x9e>
        // Reset hvDCDCEnable GPIO pin after 500ms
        HAL_GPIO_WritePin(hvDCDCEnablePort, hvDCDCEnable, GPIO_PIN_RESET);
 8000e82:	2200      	movs	r2, #0
 8000e84:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e88:	480e      	ldr	r0, [pc, #56]	@ (8000ec4 <fault_state+0xbc>)
 8000e8a:	f002 f88b 	bl	8002fa4 <HAL_GPIO_WritePin>
        o_hvDCDCEnable = GPIO_PIN_RESET;
 8000e8e:	4b12      	ldr	r3, [pc, #72]	@ (8000ed8 <fault_state+0xd0>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	701a      	strb	r2, [r3, #0]

        // Open HV Contactor
        HAL_GPIO_WritePin(hvContactorPort, hvContactor, GPIO_PIN_RESET);
 8000e94:	2200      	movs	r2, #0
 8000e96:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e9a:	480a      	ldr	r0, [pc, #40]	@ (8000ec4 <fault_state+0xbc>)
 8000e9c:	f002 f882 	bl	8002fa4 <HAL_GPIO_WritePin>
        o_hvContactor = GPIO_PIN_RESET;
 8000ea0:	4b0e      	ldr	r3, [pc, #56]	@ (8000edc <fault_state+0xd4>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	701a      	strb	r2, [r3, #0]
    }

    faultBlinker();
 8000ea6:	f000 f935 	bl	8001114 <faultBlinker>
    // FAULT INDICATOR
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	2000027d 	.word	0x2000027d
 8000eb4:	40020800 	.word	0x40020800
 8000eb8:	20000297 	.word	0x20000297
 8000ebc:	40020c00 	.word	0x40020c00
 8000ec0:	20000296 	.word	0x20000296
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	20000299 	.word	0x20000299
 8000ecc:	20000295 	.word	0x20000295
 8000ed0:	20000280 	.word	0x20000280
 8000ed4:	20000284 	.word	0x20000284
 8000ed8:	20000294 	.word	0x20000294
 8000edc:	20000298 	.word	0x20000298

08000ee0 <debugMonitor>:

void debugMonitor(void)
{
 8000ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ee2:	f5ad 7d01 	sub.w	sp, sp, #516	@ 0x204
 8000ee6:	af0c      	add	r7, sp, #48	@ 0x30
	char  analogBuffer[200], outBuffer[240];
	//stateBuffer[240] inBuffer[300], outBuffer[240], outBufferOld[240,;
	//old unused  String arrays ^^^

	sprintf(analogBuffer, "\rPedalADC : %d PedalDAC: %d RegenADC: %d RegenDAC: %d\n",
 8000ee8:	4b33      	ldr	r3, [pc, #204]	@ (8000fb8 <debugMonitor+0xd8>)
 8000eea:	881b      	ldrh	r3, [r3, #0]
 8000eec:	4619      	mov	r1, r3
 8000eee:	4b33      	ldr	r3, [pc, #204]	@ (8000fbc <debugMonitor+0xdc>)
 8000ef0:	881b      	ldrh	r3, [r3, #0]
 8000ef2:	461c      	mov	r4, r3
 8000ef4:	4b32      	ldr	r3, [pc, #200]	@ (8000fc0 <debugMonitor+0xe0>)
 8000ef6:	881b      	ldrh	r3, [r3, #0]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4b32      	ldr	r3, [pc, #200]	@ (8000fc4 <debugMonitor+0xe4>)
 8000efc:	881b      	ldrh	r3, [r3, #0]
 8000efe:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8000f02:	9301      	str	r3, [sp, #4]
 8000f04:	9200      	str	r2, [sp, #0]
 8000f06:	4623      	mov	r3, r4
 8000f08:	460a      	mov	r2, r1
 8000f0a:	492f      	ldr	r1, [pc, #188]	@ (8000fc8 <debugMonitor+0xe8>)
 8000f0c:	f008 f88c 	bl	8009028 <siprintf>
			i_pedalADC, o_pedalDAC, i_regenADC, o_regenDAC);

	sprintf(outBuffer, "\rS: %d HVDCDCen+=%d AuxDCDCdi=%d ChgIn=%d FltIn=%d HV+Con=%d PChg=%d KeyIgn=%d KeyACC=%d DisChEn=%d KillSw=%d ChgEn=%d ChgCon=%d Code=%d\n",
 8000f10:	4b2e      	ldr	r3, [pc, #184]	@ (8000fcc <debugMonitor+0xec>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	469c      	mov	ip, r3
 8000f16:	4b2e      	ldr	r3, [pc, #184]	@ (8000fd0 <debugMonitor+0xf0>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	469e      	mov	lr, r3
 8000f1c:	4b2d      	ldr	r3, [pc, #180]	@ (8000fd4 <debugMonitor+0xf4>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	461a      	mov	r2, r3
 8000f22:	4b2d      	ldr	r3, [pc, #180]	@ (8000fd8 <debugMonitor+0xf8>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	4619      	mov	r1, r3
 8000f28:	4b2c      	ldr	r3, [pc, #176]	@ (8000fdc <debugMonitor+0xfc>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	461c      	mov	r4, r3
 8000f2e:	4b2c      	ldr	r3, [pc, #176]	@ (8000fe0 <debugMonitor+0x100>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	461d      	mov	r5, r3
 8000f34:	4b2b      	ldr	r3, [pc, #172]	@ (8000fe4 <debugMonitor+0x104>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	461e      	mov	r6, r3
 8000f3a:	4b2b      	ldr	r3, [pc, #172]	@ (8000fe8 <debugMonitor+0x108>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	617b      	str	r3, [r7, #20]
 8000f40:	4b2a      	ldr	r3, [pc, #168]	@ (8000fec <debugMonitor+0x10c>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	613b      	str	r3, [r7, #16]
 8000f46:	4b2a      	ldr	r3, [pc, #168]	@ (8000ff0 <debugMonitor+0x110>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	4b29      	ldr	r3, [pc, #164]	@ (8000ff4 <debugMonitor+0x114>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	60bb      	str	r3, [r7, #8]
 8000f52:	4b29      	ldr	r3, [pc, #164]	@ (8000ff8 <debugMonitor+0x118>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	607b      	str	r3, [r7, #4]
 8000f58:	4b28      	ldr	r3, [pc, #160]	@ (8000ffc <debugMonitor+0x11c>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	603b      	str	r3, [r7, #0]
 8000f5e:	4b28      	ldr	r3, [pc, #160]	@ (8001000 <debugMonitor+0x120>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	f107 0018 	add.w	r0, r7, #24
 8000f66:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	930a      	str	r3, [sp, #40]	@ 0x28
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	9308      	str	r3, [sp, #32]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	9307      	str	r3, [sp, #28]
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	9306      	str	r3, [sp, #24]
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	9305      	str	r3, [sp, #20]
 8000f80:	9604      	str	r6, [sp, #16]
 8000f82:	9503      	str	r5, [sp, #12]
 8000f84:	9402      	str	r4, [sp, #8]
 8000f86:	9101      	str	r1, [sp, #4]
 8000f88:	9200      	str	r2, [sp, #0]
 8000f8a:	4673      	mov	r3, lr
 8000f8c:	4662      	mov	r2, ip
 8000f8e:	491d      	ldr	r1, [pc, #116]	@ (8001004 <debugMonitor+0x124>)
 8000f90:	f008 f84a 	bl	8009028 <siprintf>
//						currentState, i_chargeContactor,i_chargeEnable, o_hvDCDCEnable, o_auxDCDCDisable,o_chargeIndicator, o_faultIndicator, o_hvContactor, faultCode);

//	sprintf(outBuffer,"\rS: %d Discharge=%d KillSwitch= %d\n",
//			currentState, i_disChargeEnable, i_killSwitch);

	CDC_Transmit_FS((uint8_t*)outBuffer, strlen((char*)outBuffer));
 8000f94:	f107 0318 	add.w	r3, r7, #24
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff f919 	bl	80001d0 <strlen>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	f107 0318 	add.w	r3, r7, #24
 8000fa4:	4611      	mov	r1, r2
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f007 fbd4 	bl	8008754 <CDC_Transmit_FS>


}
 8000fac:	bf00      	nop
 8000fae:	f507 77ea 	add.w	r7, r7, #468	@ 0x1d4
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	2000029c 	.word	0x2000029c
 8000fbc:	2000029a 	.word	0x2000029a
 8000fc0:	200002a2 	.word	0x200002a2
 8000fc4:	200002a0 	.word	0x200002a0
 8000fc8:	08009980 	.word	0x08009980
 8000fcc:	2000027c 	.word	0x2000027c
 8000fd0:	20000294 	.word	0x20000294
 8000fd4:	20000295 	.word	0x20000295
 8000fd8:	20000296 	.word	0x20000296
 8000fdc:	20000297 	.word	0x20000297
 8000fe0:	20000298 	.word	0x20000298
 8000fe4:	20000299 	.word	0x20000299
 8000fe8:	2000028d 	.word	0x2000028d
 8000fec:	2000028e 	.word	0x2000028e
 8000ff0:	20000292 	.word	0x20000292
 8000ff4:	2000028f 	.word	0x2000028f
 8000ff8:	20000291 	.word	0x20000291
 8000ffc:	20000290 	.word	0x20000290
 8001000:	2000028c 	.word	0x2000028c
 8001004:	080099b8 	.word	0x080099b8

08001008 <updatePedal>:

void updatePedal(void){
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0

    HAL_ADC_Start(&hadc1);
 800100c:	481e      	ldr	r0, [pc, #120]	@ (8001088 <updatePedal+0x80>)
 800100e:	f000 fefd 	bl	8001e0c <HAL_ADC_Start>
    HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8001012:	2100      	movs	r1, #0
 8001014:	481d      	ldr	r0, [pc, #116]	@ (800108c <updatePedal+0x84>)
 8001016:	f001 fd4a 	bl	8002aae <HAL_DAC_Start>

    // Get input from PA0
    	i_pedalADC = HAL_ADC_GetValue(&hadc1);
 800101a:	481b      	ldr	r0, [pc, #108]	@ (8001088 <updatePedal+0x80>)
 800101c:	f000 ffc8 	bl	8001fb0 <HAL_ADC_GetValue>
 8001020:	4603      	mov	r3, r0
 8001022:	b29a      	uxth	r2, r3
 8001024:	4b1a      	ldr	r3, [pc, #104]	@ (8001090 <updatePedal+0x88>)
 8001026:	801a      	strh	r2, [r3, #0]
    	//o_DAC = ( (i_ADC - min_ADC) * (max_DAC - min_DAC) )/(max_ADC - min_ADC)+ min_DAC
    	//o_DAC = max_DAC - o_DAC;

    	// map value_adc to the range 740-4095 to value dac range to 4095
    	// vaule_dac starts high then goes low(4095-->0)
        o_pedalDAC = ((i_pedalADC - MIN_ADC) * (MAX_DAC- MIN_DAC)) / (MAX_ADC - MIN_ADC) + MIN_DAC;
 8001028:	4b19      	ldr	r3, [pc, #100]	@ (8001090 <updatePedal+0x88>)
 800102a:	881b      	ldrh	r3, [r3, #0]
 800102c:	461a      	mov	r2, r3
 800102e:	f240 2376 	movw	r3, #630	@ 0x276
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	f640 71ff 	movw	r1, #4095	@ 0xfff
 8001038:	2200      	movs	r2, #0
 800103a:	1a8a      	subs	r2, r1, r2
 800103c:	fb03 f202 	mul.w	r2, r3, r2
 8001040:	f640 713c 	movw	r1, #3900	@ 0xf3c
 8001044:	f240 2376 	movw	r3, #630	@ 0x276
 8001048:	1acb      	subs	r3, r1, r3
 800104a:	fb92 f3f3 	sdiv	r3, r2, r3
 800104e:	b29a      	uxth	r2, r3
 8001050:	2300      	movs	r3, #0
 8001052:	b29b      	uxth	r3, r3
 8001054:	4413      	add	r3, r2
 8001056:	b29a      	uxth	r2, r3
 8001058:	4b0e      	ldr	r3, [pc, #56]	@ (8001094 <updatePedal+0x8c>)
 800105a:	801a      	strh	r2, [r3, #0]
        //invert value
        o_pedalDAC = MAX_DAC - o_pedalDAC;
 800105c:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8001060:	b29a      	uxth	r2, r3
 8001062:	4b0c      	ldr	r3, [pc, #48]	@ (8001094 <updatePedal+0x8c>)
 8001064:	881b      	ldrh	r3, [r3, #0]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	b29a      	uxth	r2, r3
 800106a:	4b0a      	ldr	r3, [pc, #40]	@ (8001094 <updatePedal+0x8c>)
 800106c:	801a      	strh	r2, [r3, #0]

        // Outputting DAC value to PA4
        HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, o_pedalDAC);
 800106e:	4b09      	ldr	r3, [pc, #36]	@ (8001094 <updatePedal+0x8c>)
 8001070:	881b      	ldrh	r3, [r3, #0]
 8001072:	2200      	movs	r2, #0
 8001074:	2100      	movs	r1, #0
 8001076:	4805      	ldr	r0, [pc, #20]	@ (800108c <updatePedal+0x84>)
 8001078:	f001 fd6b 	bl	8002b52 <HAL_DAC_SetValue>
        HAL_Delay(1);
 800107c:	2001      	movs	r0, #1
 800107e:	f000 fe5d 	bl	8001d3c <HAL_Delay>
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000168 	.word	0x20000168
 800108c:	20000268 	.word	0x20000268
 8001090:	2000029c 	.word	0x2000029c
 8001094:	2000029a 	.word	0x2000029a

08001098 <updateRegen>:

void updateRegen(void) {
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0

            HAL_ADC_Start(&hadc2);
 800109c:	480e      	ldr	r0, [pc, #56]	@ (80010d8 <updateRegen+0x40>)
 800109e:	f000 feb5 	bl	8001e0c <HAL_ADC_Start>
            HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 80010a2:	2110      	movs	r1, #16
 80010a4:	480d      	ldr	r0, [pc, #52]	@ (80010dc <updateRegen+0x44>)
 80010a6:	f001 fd02 	bl	8002aae <HAL_DAC_Start>

            	i_regenADC = HAL_ADC_GetValue(&hadc2);
 80010aa:	480b      	ldr	r0, [pc, #44]	@ (80010d8 <updateRegen+0x40>)
 80010ac:	f000 ff80 	bl	8001fb0 <HAL_ADC_GetValue>
 80010b0:	4603      	mov	r3, r0
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	4b0a      	ldr	r3, [pc, #40]	@ (80010e0 <updateRegen+0x48>)
 80010b6:	801a      	strh	r2, [r3, #0]

                // Map value_adc to the range 740-4095 to value_dac range 0-4095
                o_regenDAC = i_regenADC;
 80010b8:	4b09      	ldr	r3, [pc, #36]	@ (80010e0 <updateRegen+0x48>)
 80010ba:	881a      	ldrh	r2, [r3, #0]
 80010bc:	4b09      	ldr	r3, [pc, #36]	@ (80010e4 <updateRegen+0x4c>)
 80010be:	801a      	strh	r2, [r3, #0]
                //throttle_pos = (uint32_t)((value_dac / 4096) * 100); // Truncate to integer
                // Output DAC value to PA
                HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, o_regenDAC);
 80010c0:	4b08      	ldr	r3, [pc, #32]	@ (80010e4 <updateRegen+0x4c>)
 80010c2:	881b      	ldrh	r3, [r3, #0]
 80010c4:	2200      	movs	r2, #0
 80010c6:	2110      	movs	r1, #16
 80010c8:	4804      	ldr	r0, [pc, #16]	@ (80010dc <updateRegen+0x44>)
 80010ca:	f001 fd42 	bl	8002b52 <HAL_DAC_SetValue>
                HAL_Delay(1);
 80010ce:	2001      	movs	r0, #1
 80010d0:	f000 fe34 	bl	8001d3c <HAL_Delay>
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	200001b0 	.word	0x200001b0
 80010dc:	20000268 	.word	0x20000268
 80010e0:	200002a2 	.word	0x200002a2
 80010e4:	200002a0 	.word	0x200002a0

080010e8 <updateAuxADC>:

void updateAuxADC(void){
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc3);
 80010ec:	4807      	ldr	r0, [pc, #28]	@ (800110c <updateAuxADC+0x24>)
 80010ee:	f000 fe8d 	bl	8001e0c <HAL_ADC_Start>
	ai_auxVoltage = HAL_ADC_GetValue(&hadc3);			// Measure aux voltage and compare to threshold value
 80010f2:	4806      	ldr	r0, [pc, #24]	@ (800110c <updateAuxADC+0x24>)
 80010f4:	f000 ff5c 	bl	8001fb0 <HAL_ADC_GetValue>
 80010f8:	4603      	mov	r3, r0
 80010fa:	b29a      	uxth	r2, r3
 80010fc:	4b04      	ldr	r3, [pc, #16]	@ (8001110 <updateAuxADC+0x28>)
 80010fe:	801a      	strh	r2, [r3, #0]
	HAL_Delay(1);
 8001100:	2001      	movs	r0, #1
 8001102:	f000 fe1b 	bl	8001d3c <HAL_Delay>
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	200001f8 	.word	0x200001f8
 8001110:	2000029e 	.word	0x2000029e

08001114 <faultBlinker>:

void faultBlinker(void) {
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
    // Blinks the Fault Indicator at 1.5 Hz (1.5p second on/off)
    if (currentTime - extraTime >= 750) {
 8001118:	4b12      	ldr	r3, [pc, #72]	@ (8001164 <faultBlinker+0x50>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	4b12      	ldr	r3, [pc, #72]	@ (8001168 <faultBlinker+0x54>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	f240 22ed 	movw	r2, #749	@ 0x2ed
 8001126:	4293      	cmp	r3, r2
 8001128:	d91a      	bls.n	8001160 <faultBlinker+0x4c>

        // Toggle fault indicator GPIO pin
        if (o_faultIndicator == GPIO_PIN_RESET) { // Checks to see if Fault Light is OFF
 800112a:	4b10      	ldr	r3, [pc, #64]	@ (800116c <faultBlinker+0x58>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d109      	bne.n	8001146 <faultBlinker+0x32>

            // Turns on the Fault Light
            HAL_GPIO_WritePin(faultIndicatorPort, faultIndicator, GPIO_PIN_SET);
 8001132:	2201      	movs	r2, #1
 8001134:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001138:	480d      	ldr	r0, [pc, #52]	@ (8001170 <faultBlinker+0x5c>)
 800113a:	f001 ff33 	bl	8002fa4 <HAL_GPIO_WritePin>
            o_faultIndicator = GPIO_PIN_SET;
 800113e:	4b0b      	ldr	r3, [pc, #44]	@ (800116c <faultBlinker+0x58>)
 8001140:	2201      	movs	r2, #1
 8001142:	701a      	strb	r2, [r3, #0]
 8001144:	e008      	b.n	8001158 <faultBlinker+0x44>
        } else {
            // Turns off the Fault Light
            HAL_GPIO_WritePin(faultIndicatorPort, faultIndicator, GPIO_PIN_RESET);
 8001146:	2200      	movs	r2, #0
 8001148:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800114c:	4808      	ldr	r0, [pc, #32]	@ (8001170 <faultBlinker+0x5c>)
 800114e:	f001 ff29 	bl	8002fa4 <HAL_GPIO_WritePin>
            o_faultIndicator = GPIO_PIN_RESET;
 8001152:	4b06      	ldr	r3, [pc, #24]	@ (800116c <faultBlinker+0x58>)
 8001154:	2200      	movs	r2, #0
 8001156:	701a      	strb	r2, [r3, #0]
        }

        extraTime = currentTime;
 8001158:	4b02      	ldr	r3, [pc, #8]	@ (8001164 <faultBlinker+0x50>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a02      	ldr	r2, [pc, #8]	@ (8001168 <faultBlinker+0x54>)
 800115e:	6013      	str	r3, [r2, #0]
    }


  /* USER CODE END 3 */
}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000284 	.word	0x20000284
 8001168:	20000288 	.word	0x20000288
 800116c:	20000297 	.word	0x20000297
 8001170:	40020800 	.word	0x40020800

08001174 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b094      	sub	sp, #80	@ 0x50
 8001178:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800117a:	f107 0320 	add.w	r3, r7, #32
 800117e:	2230      	movs	r2, #48	@ 0x30
 8001180:	2100      	movs	r1, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f007 ff70 	bl	8009068 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001188:	f107 030c 	add.w	r3, r7, #12
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001198:	2300      	movs	r3, #0
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	4b28      	ldr	r3, [pc, #160]	@ (8001240 <SystemClock_Config+0xcc>)
 800119e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a0:	4a27      	ldr	r2, [pc, #156]	@ (8001240 <SystemClock_Config+0xcc>)
 80011a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80011a8:	4b25      	ldr	r3, [pc, #148]	@ (8001240 <SystemClock_Config+0xcc>)
 80011aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011b0:	60bb      	str	r3, [r7, #8]
 80011b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011b4:	2300      	movs	r3, #0
 80011b6:	607b      	str	r3, [r7, #4]
 80011b8:	4b22      	ldr	r3, [pc, #136]	@ (8001244 <SystemClock_Config+0xd0>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a21      	ldr	r2, [pc, #132]	@ (8001244 <SystemClock_Config+0xd0>)
 80011be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011c2:	6013      	str	r3, [r2, #0]
 80011c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001244 <SystemClock_Config+0xd0>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011cc:	607b      	str	r3, [r7, #4]
 80011ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011d0:	2301      	movs	r3, #1
 80011d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011d8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011da:	2302      	movs	r3, #2
 80011dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011de:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80011e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011e4:	2308      	movs	r3, #8
 80011e6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011e8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80011ec:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011ee:	2302      	movs	r3, #2
 80011f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011f2:	2307      	movs	r3, #7
 80011f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f6:	f107 0320 	add.w	r3, r7, #32
 80011fa:	4618      	mov	r0, r3
 80011fc:	f003 f968 	bl	80044d0 <HAL_RCC_OscConfig>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001206:	f000 fb1b 	bl	8001840 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800120a:	230f      	movs	r3, #15
 800120c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800120e:	2302      	movs	r3, #2
 8001210:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001212:	2300      	movs	r3, #0
 8001214:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001216:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800121a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800121c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001220:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001222:	f107 030c 	add.w	r3, r7, #12
 8001226:	2105      	movs	r1, #5
 8001228:	4618      	mov	r0, r3
 800122a:	f003 fbc9 	bl	80049c0 <HAL_RCC_ClockConfig>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001234:	f000 fb04 	bl	8001840 <Error_Handler>
  }
}
 8001238:	bf00      	nop
 800123a:	3750      	adds	r7, #80	@ 0x50
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40023800 	.word	0x40023800
 8001244:	40007000 	.word	0x40007000

08001248 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800124e:	463b      	mov	r3, r7
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800125a:	4b21      	ldr	r3, [pc, #132]	@ (80012e0 <MX_ADC1_Init+0x98>)
 800125c:	4a21      	ldr	r2, [pc, #132]	@ (80012e4 <MX_ADC1_Init+0x9c>)
 800125e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001260:	4b1f      	ldr	r3, [pc, #124]	@ (80012e0 <MX_ADC1_Init+0x98>)
 8001262:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001266:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001268:	4b1d      	ldr	r3, [pc, #116]	@ (80012e0 <MX_ADC1_Init+0x98>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800126e:	4b1c      	ldr	r3, [pc, #112]	@ (80012e0 <MX_ADC1_Init+0x98>)
 8001270:	2200      	movs	r2, #0
 8001272:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001274:	4b1a      	ldr	r3, [pc, #104]	@ (80012e0 <MX_ADC1_Init+0x98>)
 8001276:	2201      	movs	r2, #1
 8001278:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800127a:	4b19      	ldr	r3, [pc, #100]	@ (80012e0 <MX_ADC1_Init+0x98>)
 800127c:	2200      	movs	r2, #0
 800127e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001282:	4b17      	ldr	r3, [pc, #92]	@ (80012e0 <MX_ADC1_Init+0x98>)
 8001284:	2200      	movs	r2, #0
 8001286:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001288:	4b15      	ldr	r3, [pc, #84]	@ (80012e0 <MX_ADC1_Init+0x98>)
 800128a:	4a17      	ldr	r2, [pc, #92]	@ (80012e8 <MX_ADC1_Init+0xa0>)
 800128c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800128e:	4b14      	ldr	r3, [pc, #80]	@ (80012e0 <MX_ADC1_Init+0x98>)
 8001290:	2200      	movs	r2, #0
 8001292:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001294:	4b12      	ldr	r3, [pc, #72]	@ (80012e0 <MX_ADC1_Init+0x98>)
 8001296:	2201      	movs	r2, #1
 8001298:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800129a:	4b11      	ldr	r3, [pc, #68]	@ (80012e0 <MX_ADC1_Init+0x98>)
 800129c:	2200      	movs	r2, #0
 800129e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012a2:	4b0f      	ldr	r3, [pc, #60]	@ (80012e0 <MX_ADC1_Init+0x98>)
 80012a4:	2201      	movs	r2, #1
 80012a6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012a8:	480d      	ldr	r0, [pc, #52]	@ (80012e0 <MX_ADC1_Init+0x98>)
 80012aa:	f000 fd6b 	bl	8001d84 <HAL_ADC_Init>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80012b4:	f000 fac4 	bl	8001840 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012b8:	2301      	movs	r3, #1
 80012ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012bc:	2301      	movs	r3, #1
 80012be:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80012c0:	2301      	movs	r3, #1
 80012c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012c4:	463b      	mov	r3, r7
 80012c6:	4619      	mov	r1, r3
 80012c8:	4805      	ldr	r0, [pc, #20]	@ (80012e0 <MX_ADC1_Init+0x98>)
 80012ca:	f000 fe7f 	bl	8001fcc <HAL_ADC_ConfigChannel>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80012d4:	f000 fab4 	bl	8001840 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012d8:	bf00      	nop
 80012da:	3710      	adds	r7, #16
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20000168 	.word	0x20000168
 80012e4:	40012000 	.word	0x40012000
 80012e8:	0f000001 	.word	0x0f000001

080012ec <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012f2:	463b      	mov	r3, r7
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80012fe:	4b21      	ldr	r3, [pc, #132]	@ (8001384 <MX_ADC2_Init+0x98>)
 8001300:	4a21      	ldr	r2, [pc, #132]	@ (8001388 <MX_ADC2_Init+0x9c>)
 8001302:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001304:	4b1f      	ldr	r3, [pc, #124]	@ (8001384 <MX_ADC2_Init+0x98>)
 8001306:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800130a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800130c:	4b1d      	ldr	r3, [pc, #116]	@ (8001384 <MX_ADC2_Init+0x98>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001312:	4b1c      	ldr	r3, [pc, #112]	@ (8001384 <MX_ADC2_Init+0x98>)
 8001314:	2200      	movs	r2, #0
 8001316:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001318:	4b1a      	ldr	r3, [pc, #104]	@ (8001384 <MX_ADC2_Init+0x98>)
 800131a:	2201      	movs	r2, #1
 800131c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800131e:	4b19      	ldr	r3, [pc, #100]	@ (8001384 <MX_ADC2_Init+0x98>)
 8001320:	2200      	movs	r2, #0
 8001322:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001326:	4b17      	ldr	r3, [pc, #92]	@ (8001384 <MX_ADC2_Init+0x98>)
 8001328:	2200      	movs	r2, #0
 800132a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800132c:	4b15      	ldr	r3, [pc, #84]	@ (8001384 <MX_ADC2_Init+0x98>)
 800132e:	4a17      	ldr	r2, [pc, #92]	@ (800138c <MX_ADC2_Init+0xa0>)
 8001330:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001332:	4b14      	ldr	r3, [pc, #80]	@ (8001384 <MX_ADC2_Init+0x98>)
 8001334:	2200      	movs	r2, #0
 8001336:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001338:	4b12      	ldr	r3, [pc, #72]	@ (8001384 <MX_ADC2_Init+0x98>)
 800133a:	2201      	movs	r2, #1
 800133c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800133e:	4b11      	ldr	r3, [pc, #68]	@ (8001384 <MX_ADC2_Init+0x98>)
 8001340:	2200      	movs	r2, #0
 8001342:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001346:	4b0f      	ldr	r3, [pc, #60]	@ (8001384 <MX_ADC2_Init+0x98>)
 8001348:	2201      	movs	r2, #1
 800134a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800134c:	480d      	ldr	r0, [pc, #52]	@ (8001384 <MX_ADC2_Init+0x98>)
 800134e:	f000 fd19 	bl	8001d84 <HAL_ADC_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001358:	f000 fa72 	bl	8001840 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800135c:	2302      	movs	r3, #2
 800135e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001360:	2301      	movs	r3, #1
 8001362:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001364:	2300      	movs	r3, #0
 8001366:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001368:	463b      	mov	r3, r7
 800136a:	4619      	mov	r1, r3
 800136c:	4805      	ldr	r0, [pc, #20]	@ (8001384 <MX_ADC2_Init+0x98>)
 800136e:	f000 fe2d 	bl	8001fcc <HAL_ADC_ConfigChannel>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001378:	f000 fa62 	bl	8001840 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800137c:	bf00      	nop
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	200001b0 	.word	0x200001b0
 8001388:	40012100 	.word	0x40012100
 800138c:	0f000001 	.word	0x0f000001

08001390 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001396:	463b      	mov	r3, r7
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80013a2:	4b21      	ldr	r3, [pc, #132]	@ (8001428 <MX_ADC3_Init+0x98>)
 80013a4:	4a21      	ldr	r2, [pc, #132]	@ (800142c <MX_ADC3_Init+0x9c>)
 80013a6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001428 <MX_ADC3_Init+0x98>)
 80013aa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80013ae:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80013b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001428 <MX_ADC3_Init+0x98>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80013b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001428 <MX_ADC3_Init+0x98>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80013bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001428 <MX_ADC3_Init+0x98>)
 80013be:	2201      	movs	r2, #1
 80013c0:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80013c2:	4b19      	ldr	r3, [pc, #100]	@ (8001428 <MX_ADC3_Init+0x98>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013ca:	4b17      	ldr	r3, [pc, #92]	@ (8001428 <MX_ADC3_Init+0x98>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013d0:	4b15      	ldr	r3, [pc, #84]	@ (8001428 <MX_ADC3_Init+0x98>)
 80013d2:	4a17      	ldr	r2, [pc, #92]	@ (8001430 <MX_ADC3_Init+0xa0>)
 80013d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013d6:	4b14      	ldr	r3, [pc, #80]	@ (8001428 <MX_ADC3_Init+0x98>)
 80013d8:	2200      	movs	r2, #0
 80013da:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80013dc:	4b12      	ldr	r3, [pc, #72]	@ (8001428 <MX_ADC3_Init+0x98>)
 80013de:	2201      	movs	r2, #1
 80013e0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80013e2:	4b11      	ldr	r3, [pc, #68]	@ (8001428 <MX_ADC3_Init+0x98>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001428 <MX_ADC3_Init+0x98>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80013f0:	480d      	ldr	r0, [pc, #52]	@ (8001428 <MX_ADC3_Init+0x98>)
 80013f2:	f000 fcc7 	bl	8001d84 <HAL_ADC_Init>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80013fc:	f000 fa20 	bl	8001840 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001400:	230c      	movs	r3, #12
 8001402:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001404:	2301      	movs	r3, #1
 8001406:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001408:	2300      	movs	r3, #0
 800140a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800140c:	463b      	mov	r3, r7
 800140e:	4619      	mov	r1, r3
 8001410:	4805      	ldr	r0, [pc, #20]	@ (8001428 <MX_ADC3_Init+0x98>)
 8001412:	f000 fddb 	bl	8001fcc <HAL_ADC_ConfigChannel>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800141c:	f000 fa10 	bl	8001840 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001420:	bf00      	nop
 8001422:	3710      	adds	r7, #16
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	200001f8 	.word	0x200001f8
 800142c:	40012200 	.word	0x40012200
 8001430:	0f000001 	.word	0x0f000001

08001434 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001438:	4b34      	ldr	r3, [pc, #208]	@ (800150c <MX_CAN1_Init+0xd8>)
 800143a:	4a35      	ldr	r2, [pc, #212]	@ (8001510 <MX_CAN1_Init+0xdc>)
 800143c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800143e:	4b33      	ldr	r3, [pc, #204]	@ (800150c <MX_CAN1_Init+0xd8>)
 8001440:	2210      	movs	r2, #16
 8001442:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001444:	4b31      	ldr	r3, [pc, #196]	@ (800150c <MX_CAN1_Init+0xd8>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800144a:	4b30      	ldr	r3, [pc, #192]	@ (800150c <MX_CAN1_Init+0xd8>)
 800144c:	2200      	movs	r2, #0
 800144e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001450:	4b2e      	ldr	r3, [pc, #184]	@ (800150c <MX_CAN1_Init+0xd8>)
 8001452:	2200      	movs	r2, #0
 8001454:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001456:	4b2d      	ldr	r3, [pc, #180]	@ (800150c <MX_CAN1_Init+0xd8>)
 8001458:	2200      	movs	r2, #0
 800145a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800145c:	4b2b      	ldr	r3, [pc, #172]	@ (800150c <MX_CAN1_Init+0xd8>)
 800145e:	2200      	movs	r2, #0
 8001460:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001462:	4b2a      	ldr	r3, [pc, #168]	@ (800150c <MX_CAN1_Init+0xd8>)
 8001464:	2200      	movs	r2, #0
 8001466:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001468:	4b28      	ldr	r3, [pc, #160]	@ (800150c <MX_CAN1_Init+0xd8>)
 800146a:	2200      	movs	r2, #0
 800146c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800146e:	4b27      	ldr	r3, [pc, #156]	@ (800150c <MX_CAN1_Init+0xd8>)
 8001470:	2200      	movs	r2, #0
 8001472:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001474:	4b25      	ldr	r3, [pc, #148]	@ (800150c <MX_CAN1_Init+0xd8>)
 8001476:	2200      	movs	r2, #0
 8001478:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800147a:	4b24      	ldr	r3, [pc, #144]	@ (800150c <MX_CAN1_Init+0xd8>)
 800147c:	2200      	movs	r2, #0
 800147e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001480:	4822      	ldr	r0, [pc, #136]	@ (800150c <MX_CAN1_Init+0xd8>)
 8001482:	f000 ffc1 	bl	8002408 <HAL_CAN_Init>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 800148c:	f000 f9d8 	bl	8001840 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  //Sets Up the First part of the CAN FRAME
  TxHeader.IDE = CAN_ID_STD;
 8001490:	4b20      	ldr	r3, [pc, #128]	@ (8001514 <MX_CAN1_Init+0xe0>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
  TxHeader.StdId = 0x420;
 8001496:	4b1f      	ldr	r3, [pc, #124]	@ (8001514 <MX_CAN1_Init+0xe0>)
 8001498:	f44f 6284 	mov.w	r2, #1056	@ 0x420
 800149c:	601a      	str	r2, [r3, #0]
  TxHeader.RTR = CAN_RTR_DATA;
 800149e:	4b1d      	ldr	r3, [pc, #116]	@ (8001514 <MX_CAN1_Init+0xe0>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	60da      	str	r2, [r3, #12]
  TxHeader.DLC = 8;
 80014a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001514 <MX_CAN1_Init+0xe0>)
 80014a6:	2208      	movs	r2, #8
 80014a8:	611a      	str	r2, [r3, #16]

  Filter.FilterActivation = CAN_FILTER_ENABLE;
 80014aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001518 <MX_CAN1_Init+0xe4>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	621a      	str	r2, [r3, #32]
  Filter.FilterBank = 0;
 80014b0:	4b19      	ldr	r3, [pc, #100]	@ (8001518 <MX_CAN1_Init+0xe4>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	615a      	str	r2, [r3, #20]
  Filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80014b6:	4b18      	ldr	r3, [pc, #96]	@ (8001518 <MX_CAN1_Init+0xe4>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	611a      	str	r2, [r3, #16]
  Filter.FilterIdHigh = 0x0000;
 80014bc:	4b16      	ldr	r3, [pc, #88]	@ (8001518 <MX_CAN1_Init+0xe4>)
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
  Filter.FilterIdLow = 0x0000;
 80014c2:	4b15      	ldr	r3, [pc, #84]	@ (8001518 <MX_CAN1_Init+0xe4>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	605a      	str	r2, [r3, #4]
  Filter.FilterMaskIdHigh = 0x0000;
 80014c8:	4b13      	ldr	r3, [pc, #76]	@ (8001518 <MX_CAN1_Init+0xe4>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  Filter.FilterMaskIdLow = 0x0000;
 80014ce:	4b12      	ldr	r3, [pc, #72]	@ (8001518 <MX_CAN1_Init+0xe4>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	60da      	str	r2, [r3, #12]
  Filter.FilterMode = CAN_FILTERMODE_IDMASK;
 80014d4:	4b10      	ldr	r3, [pc, #64]	@ (8001518 <MX_CAN1_Init+0xe4>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	619a      	str	r2, [r3, #24]
  Filter.FilterScale = CAN_FILTERSCALE_32BIT;
 80014da:	4b0f      	ldr	r3, [pc, #60]	@ (8001518 <MX_CAN1_Init+0xe4>)
 80014dc:	2201      	movs	r2, #1
 80014de:	61da      	str	r2, [r3, #28]
  Filter.SlaveStartFilterBank = 14;
 80014e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001518 <MX_CAN1_Init+0xe4>)
 80014e2:	220e      	movs	r2, #14
 80014e4:	625a      	str	r2, [r3, #36]	@ 0x24

  if (HAL_CAN_ConfigFilter(&hcan1, &Filter) != HAL_OK){
 80014e6:	490c      	ldr	r1, [pc, #48]	@ (8001518 <MX_CAN1_Init+0xe4>)
 80014e8:	4808      	ldr	r0, [pc, #32]	@ (800150c <MX_CAN1_Init+0xd8>)
 80014ea:	f001 f889 	bl	8002600 <HAL_CAN_ConfigFilter>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_CAN1_Init+0xc4>
	  Error_Handler();
 80014f4:	f000 f9a4 	bl	8001840 <Error_Handler>
  }
  if(HAL_CAN_Start(&hcan1)!= HAL_OK){
 80014f8:	4804      	ldr	r0, [pc, #16]	@ (800150c <MX_CAN1_Init+0xd8>)
 80014fa:	f001 f961 	bl	80027c0 <HAL_CAN_Start>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_CAN1_Init+0xd4>
	  Error_Handler();
 8001504:	f000 f99c 	bl	8001840 <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 8001508:	bf00      	nop
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20000240 	.word	0x20000240
 8001510:	40006400 	.word	0x40006400
 8001514:	200002cc 	.word	0x200002cc
 8001518:	200002a4 	.word	0x200002a4

0800151c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001522:	463b      	mov	r3, r7
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800152a:	4b14      	ldr	r3, [pc, #80]	@ (800157c <MX_DAC_Init+0x60>)
 800152c:	4a14      	ldr	r2, [pc, #80]	@ (8001580 <MX_DAC_Init+0x64>)
 800152e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001530:	4812      	ldr	r0, [pc, #72]	@ (800157c <MX_DAC_Init+0x60>)
 8001532:	f001 fa9a 	bl	8002a6a <HAL_DAC_Init>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800153c:	f000 f980 	bl	8001840 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001540:	2300      	movs	r3, #0
 8001542:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001544:	2300      	movs	r3, #0
 8001546:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001548:	463b      	mov	r3, r7
 800154a:	2200      	movs	r2, #0
 800154c:	4619      	mov	r1, r3
 800154e:	480b      	ldr	r0, [pc, #44]	@ (800157c <MX_DAC_Init+0x60>)
 8001550:	f001 fb24 	bl	8002b9c <HAL_DAC_ConfigChannel>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800155a:	f000 f971 	bl	8001840 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800155e:	463b      	mov	r3, r7
 8001560:	2210      	movs	r2, #16
 8001562:	4619      	mov	r1, r3
 8001564:	4805      	ldr	r0, [pc, #20]	@ (800157c <MX_DAC_Init+0x60>)
 8001566:	f001 fb19 	bl	8002b9c <HAL_DAC_ConfigChannel>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8001570:	f000 f966 	bl	8001840 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001574:	bf00      	nop
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20000268 	.word	0x20000268
 8001580:	40007400 	.word	0x40007400

08001584 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08c      	sub	sp, #48	@ 0x30
 8001588:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158a:	f107 031c 	add.w	r3, r7, #28
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	60da      	str	r2, [r3, #12]
 8001598:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	61bb      	str	r3, [r7, #24]
 800159e:	4ba2      	ldr	r3, [pc, #648]	@ (8001828 <MX_GPIO_Init+0x2a4>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a2:	4aa1      	ldr	r2, [pc, #644]	@ (8001828 <MX_GPIO_Init+0x2a4>)
 80015a4:	f043 0310 	orr.w	r3, r3, #16
 80015a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015aa:	4b9f      	ldr	r3, [pc, #636]	@ (8001828 <MX_GPIO_Init+0x2a4>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ae:	f003 0310 	and.w	r3, r3, #16
 80015b2:	61bb      	str	r3, [r7, #24]
 80015b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	617b      	str	r3, [r7, #20]
 80015ba:	4b9b      	ldr	r3, [pc, #620]	@ (8001828 <MX_GPIO_Init+0x2a4>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015be:	4a9a      	ldr	r2, [pc, #616]	@ (8001828 <MX_GPIO_Init+0x2a4>)
 80015c0:	f043 0304 	orr.w	r3, r3, #4
 80015c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015c6:	4b98      	ldr	r3, [pc, #608]	@ (8001828 <MX_GPIO_Init+0x2a4>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ca:	f003 0304 	and.w	r3, r3, #4
 80015ce:	617b      	str	r3, [r7, #20]
 80015d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	613b      	str	r3, [r7, #16]
 80015d6:	4b94      	ldr	r3, [pc, #592]	@ (8001828 <MX_GPIO_Init+0x2a4>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015da:	4a93      	ldr	r2, [pc, #588]	@ (8001828 <MX_GPIO_Init+0x2a4>)
 80015dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015e2:	4b91      	ldr	r3, [pc, #580]	@ (8001828 <MX_GPIO_Init+0x2a4>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015ea:	613b      	str	r3, [r7, #16]
 80015ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	4b8d      	ldr	r3, [pc, #564]	@ (8001828 <MX_GPIO_Init+0x2a4>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f6:	4a8c      	ldr	r2, [pc, #560]	@ (8001828 <MX_GPIO_Init+0x2a4>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015fe:	4b8a      	ldr	r3, [pc, #552]	@ (8001828 <MX_GPIO_Init+0x2a4>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	60bb      	str	r3, [r7, #8]
 800160e:	4b86      	ldr	r3, [pc, #536]	@ (8001828 <MX_GPIO_Init+0x2a4>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001612:	4a85      	ldr	r2, [pc, #532]	@ (8001828 <MX_GPIO_Init+0x2a4>)
 8001614:	f043 0302 	orr.w	r3, r3, #2
 8001618:	6313      	str	r3, [r2, #48]	@ 0x30
 800161a:	4b83      	ldr	r3, [pc, #524]	@ (8001828 <MX_GPIO_Init+0x2a4>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	60bb      	str	r3, [r7, #8]
 8001624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	607b      	str	r3, [r7, #4]
 800162a:	4b7f      	ldr	r3, [pc, #508]	@ (8001828 <MX_GPIO_Init+0x2a4>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162e:	4a7e      	ldr	r2, [pc, #504]	@ (8001828 <MX_GPIO_Init+0x2a4>)
 8001630:	f043 0308 	orr.w	r3, r3, #8
 8001634:	6313      	str	r3, [r2, #48]	@ 0x30
 8001636:	4b7c      	ldr	r3, [pc, #496]	@ (8001828 <MX_GPIO_Init+0x2a4>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163a:	f003 0308 	and.w	r3, r3, #8
 800163e:	607b      	str	r3, [r7, #4]
 8001640:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|auxDCDCDisable_Pin|hvDCDCEnable_Pin|preChargeRelay_Pin
 8001642:	2200      	movs	r2, #0
 8001644:	f641 1188 	movw	r1, #6536	@ 0x1988
 8001648:	4878      	ldr	r0, [pc, #480]	@ (800182c <MX_GPIO_Init+0x2a8>)
 800164a:	f001 fcab 	bl	8002fa4 <HAL_GPIO_WritePin>
                          |hvContactor_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800164e:	2201      	movs	r2, #1
 8001650:	2101      	movs	r1, #1
 8001652:	4877      	ldr	r0, [pc, #476]	@ (8001830 <MX_GPIO_Init+0x2ac>)
 8001654:	f001 fca6 	bl	8002fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(hvContactorB15_GPIO_Port, hvContactorB15_Pin, GPIO_PIN_RESET);
 8001658:	2200      	movs	r2, #0
 800165a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800165e:	4875      	ldr	r0, [pc, #468]	@ (8001834 <MX_GPIO_Init+0x2b0>)
 8001660:	f001 fca0 	bl	8002fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD6_Pin|spareOutput2_Pin
 8001664:	2200      	movs	r2, #0
 8001666:	f24b 0199 	movw	r1, #45209	@ 0xb099
 800166a:	4873      	ldr	r0, [pc, #460]	@ (8001838 <MX_GPIO_Init+0x2b4>)
 800166c:	f001 fc9a 	bl	8002fa4 <HAL_GPIO_WritePin>
                          |faultIndicatorD3_Pin|chargeIndicator_Pin|NA2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(faultIndicator_GPIO_Port, faultIndicator_Pin, GPIO_PIN_RESET);
 8001670:	2200      	movs	r2, #0
 8001672:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001676:	486e      	ldr	r0, [pc, #440]	@ (8001830 <MX_GPIO_Init+0x2ac>)
 8001678:	f001 fc94 	bl	8002fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(spareOutput3_GPIO_Port, spareOutput3_Pin, GPIO_PIN_SET);
 800167c:	2201      	movs	r2, #1
 800167e:	2140      	movs	r1, #64	@ 0x40
 8001680:	486d      	ldr	r0, [pc, #436]	@ (8001838 <MX_GPIO_Init+0x2b4>)
 8001682:	f001 fc8f 	bl	8002fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_I2C_SPI_Pin auxDCDCDisable_Pin hvDCDCEnable_Pin preChargeRelay_Pin
                           hvContactor_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|auxDCDCDisable_Pin|hvDCDCEnable_Pin|preChargeRelay_Pin
 8001686:	f641 1388 	movw	r3, #6536	@ 0x1988
 800168a:	61fb      	str	r3, [r7, #28]
                          |hvContactor_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168c:	2301      	movs	r3, #1
 800168e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001694:	2300      	movs	r3, #0
 8001696:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001698:	f107 031c 	add.w	r3, r7, #28
 800169c:	4619      	mov	r1, r3
 800169e:	4863      	ldr	r0, [pc, #396]	@ (800182c <MX_GPIO_Init+0x2a8>)
 80016a0:	f001 facc 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin faultIndicator_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|faultIndicator_Pin;
 80016a4:	f241 0301 	movw	r3, #4097	@ 0x1001
 80016a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016aa:	2301      	movs	r3, #1
 80016ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b2:	2300      	movs	r3, #0
 80016b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016b6:	f107 031c 	add.w	r3, r7, #28
 80016ba:	4619      	mov	r1, r3
 80016bc:	485c      	ldr	r0, [pc, #368]	@ (8001830 <MX_GPIO_Init+0x2ac>)
 80016be:	f001 fabd 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80016c2:	2308      	movs	r3, #8
 80016c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c6:	2302      	movs	r3, #2
 80016c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ce:	2300      	movs	r3, #0
 80016d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016d2:	2305      	movs	r3, #5
 80016d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80016d6:	f107 031c 	add.w	r3, r7, #28
 80016da:	4619      	mov	r1, r3
 80016dc:	4854      	ldr	r0, [pc, #336]	@ (8001830 <MX_GPIO_Init+0x2ac>)
 80016de:	f001 faad 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016e2:	2301      	movs	r3, #1
 80016e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80016e6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80016ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016f0:	f107 031c 	add.w	r3, r7, #28
 80016f4:	4619      	mov	r1, r3
 80016f6:	4851      	ldr	r0, [pc, #324]	@ (800183c <MX_GPIO_Init+0x2b8>)
 80016f8:	f001 faa0 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_MISO_Pin */
  GPIO_InitStruct.Pin = SPI1_MISO_Pin;
 80016fc:	2340      	movs	r3, #64	@ 0x40
 80016fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001700:	2302      	movs	r3, #2
 8001702:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001708:	2300      	movs	r3, #0
 800170a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800170c:	2305      	movs	r3, #5
 800170e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(SPI1_MISO_GPIO_Port, &GPIO_InitStruct);
 8001710:	f107 031c 	add.w	r3, r7, #28
 8001714:	4619      	mov	r1, r3
 8001716:	4849      	ldr	r0, [pc, #292]	@ (800183c <MX_GPIO_Init+0x2b8>)
 8001718:	f001 fa90 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800171c:	2304      	movs	r3, #4
 800171e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001720:	2300      	movs	r3, #0
 8001722:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001728:	f107 031c 	add.w	r3, r7, #28
 800172c:	4619      	mov	r1, r3
 800172e:	4841      	ldr	r0, [pc, #260]	@ (8001834 <MX_GPIO_Init+0x2b0>)
 8001730:	f001 fa84 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : keyIGN_Pin keyACC_Pin chargeContactor_Pin disChargeEnable_Pin
                           chargeEnable_Pin */
  GPIO_InitStruct.Pin = keyIGN_Pin|keyACC_Pin|chargeContactor_Pin|disChargeEnable_Pin
 8001734:	f44f 4366 	mov.w	r3, #58880	@ 0xe600
 8001738:	61fb      	str	r3, [r7, #28]
                          |chargeEnable_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800173a:	2300      	movs	r3, #0
 800173c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001742:	f107 031c 	add.w	r3, r7, #28
 8001746:	4619      	mov	r1, r3
 8001748:	4838      	ldr	r0, [pc, #224]	@ (800182c <MX_GPIO_Init+0x2a8>)
 800174a:	f001 fa77 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800174e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001752:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001754:	2302      	movs	r3, #2
 8001756:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175c:	2300      	movs	r3, #0
 800175e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001760:	2305      	movs	r3, #5
 8001762:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001764:	f107 031c 	add.w	r3, r7, #28
 8001768:	4619      	mov	r1, r3
 800176a:	4832      	ldr	r0, [pc, #200]	@ (8001834 <MX_GPIO_Init+0x2b0>)
 800176c:	f001 fa66 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : hvContactorB15_Pin */
  GPIO_InitStruct.Pin = hvContactorB15_Pin;
 8001770:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001774:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001776:	2301      	movs	r3, #1
 8001778:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177e:	2300      	movs	r3, #0
 8001780:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(hvContactorB15_GPIO_Port, &GPIO_InitStruct);
 8001782:	f107 031c 	add.w	r3, r7, #28
 8001786:	4619      	mov	r1, r3
 8001788:	482a      	ldr	r0, [pc, #168]	@ (8001834 <MX_GPIO_Init+0x2b0>)
 800178a:	f001 fa57 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : spareInput2_Pin spareInput1_Pin spareInput3_Pin killSwitch_Pin
                           brakeSwitchInput_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = spareInput2_Pin|spareInput1_Pin|spareInput3_Pin|killSwitch_Pin
 800178e:	f240 7326 	movw	r3, #1830	@ 0x726
 8001792:	61fb      	str	r3, [r7, #28]
                          |brakeSwitchInput_Pin|OTG_FS_OverCurrent_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001794:	2300      	movs	r3, #0
 8001796:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800179c:	f107 031c 	add.w	r3, r7, #28
 80017a0:	4619      	mov	r1, r3
 80017a2:	4825      	ldr	r0, [pc, #148]	@ (8001838 <MX_GPIO_Init+0x2b4>)
 80017a4:	f001 fa4a 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD6_Pin spareOutput2_Pin
                           faultIndicatorD3_Pin chargeIndicator_Pin NA2_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD6_Pin|spareOutput2_Pin
 80017a8:	f24b 0399 	movw	r3, #45209	@ 0xb099
 80017ac:	61fb      	str	r3, [r7, #28]
                          |faultIndicatorD3_Pin|chargeIndicator_Pin|NA2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ae:	2301      	movs	r3, #1
 80017b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b6:	2300      	movs	r3, #0
 80017b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017ba:	f107 031c 	add.w	r3, r7, #28
 80017be:	4619      	mov	r1, r3
 80017c0:	481d      	ldr	r0, [pc, #116]	@ (8001838 <MX_GPIO_Init+0x2b4>)
 80017c2:	f001 fa3b 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_SCK_Pin */
  GPIO_InitStruct.Pin = I2S3_SCK_Pin;
 80017c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017cc:	2302      	movs	r3, #2
 80017ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d4:	2300      	movs	r3, #0
 80017d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017d8:	2306      	movs	r3, #6
 80017da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_SCK_GPIO_Port, &GPIO_InitStruct);
 80017dc:	f107 031c 	add.w	r3, r7, #28
 80017e0:	4619      	mov	r1, r3
 80017e2:	4813      	ldr	r0, [pc, #76]	@ (8001830 <MX_GPIO_Init+0x2ac>)
 80017e4:	f001 fa2a 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : spareOutput3_Pin */
  GPIO_InitStruct.Pin = spareOutput3_Pin;
 80017e8:	2340      	movs	r3, #64	@ 0x40
 80017ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ec:	2301      	movs	r3, #1
 80017ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017f0:	2302      	movs	r3, #2
 80017f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017f4:	2302      	movs	r3, #2
 80017f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(spareOutput3_GPIO_Port, &GPIO_InitStruct);
 80017f8:	f107 031c 	add.w	r3, r7, #28
 80017fc:	4619      	mov	r1, r3
 80017fe:	480e      	ldr	r0, [pc, #56]	@ (8001838 <MX_GPIO_Init+0x2b4>)
 8001800:	f001 fa1c 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001804:	2302      	movs	r3, #2
 8001806:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001808:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800180c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001812:	f107 031c 	add.w	r3, r7, #28
 8001816:	4619      	mov	r1, r3
 8001818:	4804      	ldr	r0, [pc, #16]	@ (800182c <MX_GPIO_Init+0x2a8>)
 800181a:	f001 fa0f 	bl	8002c3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800181e:	bf00      	nop
 8001820:	3730      	adds	r7, #48	@ 0x30
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40023800 	.word	0x40023800
 800182c:	40021000 	.word	0x40021000
 8001830:	40020800 	.word	0x40020800
 8001834:	40020400 	.word	0x40020400
 8001838:	40020c00 	.word	0x40020c00
 800183c:	40020000 	.word	0x40020000

08001840 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001844:	b672      	cpsid	i
}
 8001846:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001848:	bf00      	nop
 800184a:	e7fd      	b.n	8001848 <Error_Handler+0x8>

0800184c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	607b      	str	r3, [r7, #4]
 8001856:	4b10      	ldr	r3, [pc, #64]	@ (8001898 <HAL_MspInit+0x4c>)
 8001858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800185a:	4a0f      	ldr	r2, [pc, #60]	@ (8001898 <HAL_MspInit+0x4c>)
 800185c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001860:	6453      	str	r3, [r2, #68]	@ 0x44
 8001862:	4b0d      	ldr	r3, [pc, #52]	@ (8001898 <HAL_MspInit+0x4c>)
 8001864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001866:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800186a:	607b      	str	r3, [r7, #4]
 800186c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	603b      	str	r3, [r7, #0]
 8001872:	4b09      	ldr	r3, [pc, #36]	@ (8001898 <HAL_MspInit+0x4c>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001876:	4a08      	ldr	r2, [pc, #32]	@ (8001898 <HAL_MspInit+0x4c>)
 8001878:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800187c:	6413      	str	r3, [r2, #64]	@ 0x40
 800187e:	4b06      	ldr	r3, [pc, #24]	@ (8001898 <HAL_MspInit+0x4c>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001882:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001886:	603b      	str	r3, [r7, #0]
 8001888:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800188a:	2007      	movs	r0, #7
 800188c:	f001 f8ac 	bl	80029e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001890:	bf00      	nop
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40023800 	.word	0x40023800

0800189c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b08e      	sub	sp, #56	@ 0x38
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a45      	ldr	r2, [pc, #276]	@ (80019d0 <HAL_ADC_MspInit+0x134>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d128      	bne.n	8001910 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	623b      	str	r3, [r7, #32]
 80018c2:	4b44      	ldr	r3, [pc, #272]	@ (80019d4 <HAL_ADC_MspInit+0x138>)
 80018c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018c6:	4a43      	ldr	r2, [pc, #268]	@ (80019d4 <HAL_ADC_MspInit+0x138>)
 80018c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80018ce:	4b41      	ldr	r3, [pc, #260]	@ (80019d4 <HAL_ADC_MspInit+0x138>)
 80018d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018d6:	623b      	str	r3, [r7, #32]
 80018d8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]
 80018de:	4b3d      	ldr	r3, [pc, #244]	@ (80019d4 <HAL_ADC_MspInit+0x138>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e2:	4a3c      	ldr	r2, [pc, #240]	@ (80019d4 <HAL_ADC_MspInit+0x138>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ea:	4b3a      	ldr	r3, [pc, #232]	@ (80019d4 <HAL_ADC_MspInit+0x138>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	61fb      	str	r3, [r7, #28]
 80018f4:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = pedalADC_Pin;
 80018f6:	2302      	movs	r3, #2
 80018f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018fa:	2303      	movs	r3, #3
 80018fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(pedalADC_GPIO_Port, &GPIO_InitStruct);
 8001902:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001906:	4619      	mov	r1, r3
 8001908:	4833      	ldr	r0, [pc, #204]	@ (80019d8 <HAL_ADC_MspInit+0x13c>)
 800190a:	f001 f997 	bl	8002c3c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800190e:	e05a      	b.n	80019c6 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a31      	ldr	r2, [pc, #196]	@ (80019dc <HAL_ADC_MspInit+0x140>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d128      	bne.n	800196c <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	61bb      	str	r3, [r7, #24]
 800191e:	4b2d      	ldr	r3, [pc, #180]	@ (80019d4 <HAL_ADC_MspInit+0x138>)
 8001920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001922:	4a2c      	ldr	r2, [pc, #176]	@ (80019d4 <HAL_ADC_MspInit+0x138>)
 8001924:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001928:	6453      	str	r3, [r2, #68]	@ 0x44
 800192a:	4b2a      	ldr	r3, [pc, #168]	@ (80019d4 <HAL_ADC_MspInit+0x138>)
 800192c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800192e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001932:	61bb      	str	r3, [r7, #24]
 8001934:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]
 800193a:	4b26      	ldr	r3, [pc, #152]	@ (80019d4 <HAL_ADC_MspInit+0x138>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193e:	4a25      	ldr	r2, [pc, #148]	@ (80019d4 <HAL_ADC_MspInit+0x138>)
 8001940:	f043 0301 	orr.w	r3, r3, #1
 8001944:	6313      	str	r3, [r2, #48]	@ 0x30
 8001946:	4b23      	ldr	r3, [pc, #140]	@ (80019d4 <HAL_ADC_MspInit+0x138>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	617b      	str	r3, [r7, #20]
 8001950:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = regenADC_Pin;
 8001952:	2304      	movs	r3, #4
 8001954:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001956:	2303      	movs	r3, #3
 8001958:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195a:	2300      	movs	r3, #0
 800195c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(regenADC_GPIO_Port, &GPIO_InitStruct);
 800195e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001962:	4619      	mov	r1, r3
 8001964:	481c      	ldr	r0, [pc, #112]	@ (80019d8 <HAL_ADC_MspInit+0x13c>)
 8001966:	f001 f969 	bl	8002c3c <HAL_GPIO_Init>
}
 800196a:	e02c      	b.n	80019c6 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a1b      	ldr	r2, [pc, #108]	@ (80019e0 <HAL_ADC_MspInit+0x144>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d127      	bne.n	80019c6 <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	613b      	str	r3, [r7, #16]
 800197a:	4b16      	ldr	r3, [pc, #88]	@ (80019d4 <HAL_ADC_MspInit+0x138>)
 800197c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800197e:	4a15      	ldr	r2, [pc, #84]	@ (80019d4 <HAL_ADC_MspInit+0x138>)
 8001980:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001984:	6453      	str	r3, [r2, #68]	@ 0x44
 8001986:	4b13      	ldr	r3, [pc, #76]	@ (80019d4 <HAL_ADC_MspInit+0x138>)
 8001988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800198a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800198e:	613b      	str	r3, [r7, #16]
 8001990:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	4b0f      	ldr	r3, [pc, #60]	@ (80019d4 <HAL_ADC_MspInit+0x138>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199a:	4a0e      	ldr	r2, [pc, #56]	@ (80019d4 <HAL_ADC_MspInit+0x138>)
 800199c:	f043 0304 	orr.w	r3, r3, #4
 80019a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019a2:	4b0c      	ldr	r3, [pc, #48]	@ (80019d4 <HAL_ADC_MspInit+0x138>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a6:	f003 0304 	and.w	r3, r3, #4
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = auxVoltageIN_Pin;
 80019ae:	2304      	movs	r3, #4
 80019b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019b2:	2303      	movs	r3, #3
 80019b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(auxVoltageIN_GPIO_Port, &GPIO_InitStruct);
 80019ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019be:	4619      	mov	r1, r3
 80019c0:	4808      	ldr	r0, [pc, #32]	@ (80019e4 <HAL_ADC_MspInit+0x148>)
 80019c2:	f001 f93b 	bl	8002c3c <HAL_GPIO_Init>
}
 80019c6:	bf00      	nop
 80019c8:	3738      	adds	r7, #56	@ 0x38
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40012000 	.word	0x40012000
 80019d4:	40023800 	.word	0x40023800
 80019d8:	40020000 	.word	0x40020000
 80019dc:	40012100 	.word	0x40012100
 80019e0:	40012200 	.word	0x40012200
 80019e4:	40020800 	.word	0x40020800

080019e8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08a      	sub	sp, #40	@ 0x28
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f0:	f107 0314 	add.w	r3, r7, #20
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	609a      	str	r2, [r3, #8]
 80019fc:	60da      	str	r2, [r3, #12]
 80019fe:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a19      	ldr	r2, [pc, #100]	@ (8001a6c <HAL_CAN_MspInit+0x84>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d12c      	bne.n	8001a64 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	613b      	str	r3, [r7, #16]
 8001a0e:	4b18      	ldr	r3, [pc, #96]	@ (8001a70 <HAL_CAN_MspInit+0x88>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a12:	4a17      	ldr	r2, [pc, #92]	@ (8001a70 <HAL_CAN_MspInit+0x88>)
 8001a14:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a18:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a1a:	4b15      	ldr	r3, [pc, #84]	@ (8001a70 <HAL_CAN_MspInit+0x88>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a22:	613b      	str	r3, [r7, #16]
 8001a24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	4b11      	ldr	r3, [pc, #68]	@ (8001a70 <HAL_CAN_MspInit+0x88>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2e:	4a10      	ldr	r2, [pc, #64]	@ (8001a70 <HAL_CAN_MspInit+0x88>)
 8001a30:	f043 0302 	orr.w	r3, r3, #2
 8001a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a36:	4b0e      	ldr	r3, [pc, #56]	@ (8001a70 <HAL_CAN_MspInit+0x88>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = canRX_Pin|canTX_Pin;
 8001a42:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a50:	2303      	movs	r3, #3
 8001a52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001a54:	2309      	movs	r3, #9
 8001a56:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4805      	ldr	r0, [pc, #20]	@ (8001a74 <HAL_CAN_MspInit+0x8c>)
 8001a60:	f001 f8ec 	bl	8002c3c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001a64:	bf00      	nop
 8001a66:	3728      	adds	r7, #40	@ 0x28
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40006400 	.word	0x40006400
 8001a70:	40023800 	.word	0x40023800
 8001a74:	40020400 	.word	0x40020400

08001a78 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08a      	sub	sp, #40	@ 0x28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a80:	f107 0314 	add.w	r3, r7, #20
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	60da      	str	r2, [r3, #12]
 8001a8e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a17      	ldr	r2, [pc, #92]	@ (8001af4 <HAL_DAC_MspInit+0x7c>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d127      	bne.n	8001aea <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	613b      	str	r3, [r7, #16]
 8001a9e:	4b16      	ldr	r3, [pc, #88]	@ (8001af8 <HAL_DAC_MspInit+0x80>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa2:	4a15      	ldr	r2, [pc, #84]	@ (8001af8 <HAL_DAC_MspInit+0x80>)
 8001aa4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001aa8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aaa:	4b13      	ldr	r3, [pc, #76]	@ (8001af8 <HAL_DAC_MspInit+0x80>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ab2:	613b      	str	r3, [r7, #16]
 8001ab4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	4b0f      	ldr	r3, [pc, #60]	@ (8001af8 <HAL_DAC_MspInit+0x80>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001abe:	4a0e      	ldr	r2, [pc, #56]	@ (8001af8 <HAL_DAC_MspInit+0x80>)
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8001af8 <HAL_DAC_MspInit+0x80>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = pedalDAC_Pin|regenDAC_Pin;
 8001ad2:	2330      	movs	r3, #48	@ 0x30
 8001ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ade:	f107 0314 	add.w	r3, r7, #20
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4805      	ldr	r0, [pc, #20]	@ (8001afc <HAL_DAC_MspInit+0x84>)
 8001ae6:	f001 f8a9 	bl	8002c3c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001aea:	bf00      	nop
 8001aec:	3728      	adds	r7, #40	@ 0x28
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40007400 	.word	0x40007400
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40020000 	.word	0x40020000

08001b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b04:	bf00      	nop
 8001b06:	e7fd      	b.n	8001b04 <NMI_Handler+0x4>

08001b08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b0c:	bf00      	nop
 8001b0e:	e7fd      	b.n	8001b0c <HardFault_Handler+0x4>

08001b10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b14:	bf00      	nop
 8001b16:	e7fd      	b.n	8001b14 <MemManage_Handler+0x4>

08001b18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b1c:	bf00      	nop
 8001b1e:	e7fd      	b.n	8001b1c <BusFault_Handler+0x4>

08001b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b24:	bf00      	nop
 8001b26:	e7fd      	b.n	8001b24 <UsageFault_Handler+0x4>

08001b28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b36:	b480      	push	{r7}
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b56:	f000 f8d1 	bl	8001cfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
	...

08001b60 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001b64:	4802      	ldr	r0, [pc, #8]	@ (8001b70 <OTG_FS_IRQHandler+0x10>)
 8001b66:	f001 fb86 	bl	8003276 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	200017cc 	.word	0x200017cc

08001b74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b7c:	4a14      	ldr	r2, [pc, #80]	@ (8001bd0 <_sbrk+0x5c>)
 8001b7e:	4b15      	ldr	r3, [pc, #84]	@ (8001bd4 <_sbrk+0x60>)
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b88:	4b13      	ldr	r3, [pc, #76]	@ (8001bd8 <_sbrk+0x64>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d102      	bne.n	8001b96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b90:	4b11      	ldr	r3, [pc, #68]	@ (8001bd8 <_sbrk+0x64>)
 8001b92:	4a12      	ldr	r2, [pc, #72]	@ (8001bdc <_sbrk+0x68>)
 8001b94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b96:	4b10      	ldr	r3, [pc, #64]	@ (8001bd8 <_sbrk+0x64>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d207      	bcs.n	8001bb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ba4:	f007 fa68 	bl	8009078 <__errno>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	220c      	movs	r2, #12
 8001bac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bae:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb2:	e009      	b.n	8001bc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bb4:	4b08      	ldr	r3, [pc, #32]	@ (8001bd8 <_sbrk+0x64>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bba:	4b07      	ldr	r3, [pc, #28]	@ (8001bd8 <_sbrk+0x64>)
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	4a05      	ldr	r2, [pc, #20]	@ (8001bd8 <_sbrk+0x64>)
 8001bc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20020000 	.word	0x20020000
 8001bd4:	00000400 	.word	0x00000400
 8001bd8:	200002e4 	.word	0x200002e4
 8001bdc:	20002040 	.word	0x20002040

08001be0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001be4:	4b06      	ldr	r3, [pc, #24]	@ (8001c00 <SystemInit+0x20>)
 8001be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bea:	4a05      	ldr	r2, [pc, #20]	@ (8001c00 <SystemInit+0x20>)
 8001bec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bf0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bf4:	bf00      	nop
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c08:	480d      	ldr	r0, [pc, #52]	@ (8001c40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c0a:	490e      	ldr	r1, [pc, #56]	@ (8001c44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c0c:	4a0e      	ldr	r2, [pc, #56]	@ (8001c48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c10:	e002      	b.n	8001c18 <LoopCopyDataInit>

08001c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c16:	3304      	adds	r3, #4

08001c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c1c:	d3f9      	bcc.n	8001c12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c1e:	4a0b      	ldr	r2, [pc, #44]	@ (8001c4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c20:	4c0b      	ldr	r4, [pc, #44]	@ (8001c50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c24:	e001      	b.n	8001c2a <LoopFillZerobss>

08001c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c28:	3204      	adds	r2, #4

08001c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c2c:	d3fb      	bcc.n	8001c26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c2e:	f7ff ffd7 	bl	8001be0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c32:	f007 fa27 	bl	8009084 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c36:	f7fe fc9b 	bl	8000570 <main>
  bx  lr    
 8001c3a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c44:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8001c48:	08009ae0 	.word	0x08009ae0
  ldr r2, =_sbss
 8001c4c:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8001c50:	20002040 	.word	0x20002040

08001c54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c54:	e7fe      	b.n	8001c54 <ADC_IRQHandler>
	...

08001c58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c5c:	4b0e      	ldr	r3, [pc, #56]	@ (8001c98 <HAL_Init+0x40>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a0d      	ldr	r2, [pc, #52]	@ (8001c98 <HAL_Init+0x40>)
 8001c62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c68:	4b0b      	ldr	r3, [pc, #44]	@ (8001c98 <HAL_Init+0x40>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a0a      	ldr	r2, [pc, #40]	@ (8001c98 <HAL_Init+0x40>)
 8001c6e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c74:	4b08      	ldr	r3, [pc, #32]	@ (8001c98 <HAL_Init+0x40>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a07      	ldr	r2, [pc, #28]	@ (8001c98 <HAL_Init+0x40>)
 8001c7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c80:	2003      	movs	r0, #3
 8001c82:	f000 feb1 	bl	80029e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c86:	2000      	movs	r0, #0
 8001c88:	f000 f808 	bl	8001c9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c8c:	f7ff fdde 	bl	800184c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40023c00 	.word	0x40023c00

08001c9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ca4:	4b12      	ldr	r3, [pc, #72]	@ (8001cf0 <HAL_InitTick+0x54>)
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	4b12      	ldr	r3, [pc, #72]	@ (8001cf4 <HAL_InitTick+0x58>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	4619      	mov	r1, r3
 8001cae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f000 fec9 	bl	8002a52 <HAL_SYSTICK_Config>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e00e      	b.n	8001ce8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2b0f      	cmp	r3, #15
 8001cce:	d80a      	bhi.n	8001ce6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd8:	f000 fe91 	bl	80029fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cdc:	4a06      	ldr	r2, [pc, #24]	@ (8001cf8 <HAL_InitTick+0x5c>)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	e000      	b.n	8001ce8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	20000000 	.word	0x20000000
 8001cf4:	20000008 	.word	0x20000008
 8001cf8:	20000004 	.word	0x20000004

08001cfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d00:	4b06      	ldr	r3, [pc, #24]	@ (8001d1c <HAL_IncTick+0x20>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	461a      	mov	r2, r3
 8001d06:	4b06      	ldr	r3, [pc, #24]	@ (8001d20 <HAL_IncTick+0x24>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	4a04      	ldr	r2, [pc, #16]	@ (8001d20 <HAL_IncTick+0x24>)
 8001d0e:	6013      	str	r3, [r2, #0]
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	20000008 	.word	0x20000008
 8001d20:	200002e8 	.word	0x200002e8

08001d24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  return uwTick;
 8001d28:	4b03      	ldr	r3, [pc, #12]	@ (8001d38 <HAL_GetTick+0x14>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	200002e8 	.word	0x200002e8

08001d3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d44:	f7ff ffee 	bl	8001d24 <HAL_GetTick>
 8001d48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d54:	d005      	beq.n	8001d62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d56:	4b0a      	ldr	r3, [pc, #40]	@ (8001d80 <HAL_Delay+0x44>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	4413      	add	r3, r2
 8001d60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d62:	bf00      	nop
 8001d64:	f7ff ffde 	bl	8001d24 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d8f7      	bhi.n	8001d64 <HAL_Delay+0x28>
  {
  }
}
 8001d74:	bf00      	nop
 8001d76:	bf00      	nop
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20000008 	.word	0x20000008

08001d84 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e033      	b.n	8001e02 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d109      	bne.n	8001db6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7ff fd7a 	bl	800189c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dba:	f003 0310 	and.w	r3, r3, #16
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d118      	bne.n	8001df4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001dca:	f023 0302 	bic.w	r3, r3, #2
 8001dce:	f043 0202 	orr.w	r2, r3, #2
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 fa1a 	bl	8002210 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de6:	f023 0303 	bic.w	r3, r3, #3
 8001dea:	f043 0201 	orr.w	r2, r3, #1
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	641a      	str	r2, [r3, #64]	@ 0x40
 8001df2:	e001      	b.n	8001df8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
	...

08001e0c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001e14:	2300      	movs	r3, #0
 8001e16:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d101      	bne.n	8001e26 <HAL_ADC_Start+0x1a>
 8001e22:	2302      	movs	r3, #2
 8001e24:	e0b2      	b.n	8001f8c <HAL_ADC_Start+0x180>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d018      	beq.n	8001e6e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	689a      	ldr	r2, [r3, #8]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f042 0201 	orr.w	r2, r2, #1
 8001e4a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e4c:	4b52      	ldr	r3, [pc, #328]	@ (8001f98 <HAL_ADC_Start+0x18c>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a52      	ldr	r2, [pc, #328]	@ (8001f9c <HAL_ADC_Start+0x190>)
 8001e52:	fba2 2303 	umull	r2, r3, r2, r3
 8001e56:	0c9a      	lsrs	r2, r3, #18
 8001e58:	4613      	mov	r3, r2
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	4413      	add	r3, r2
 8001e5e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001e60:	e002      	b.n	8001e68 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	3b01      	subs	r3, #1
 8001e66:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1f9      	bne.n	8001e62 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d17a      	bne.n	8001f72 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e80:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001e84:	f023 0301 	bic.w	r3, r3, #1
 8001e88:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d007      	beq.n	8001eae <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001ea6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001eb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001eba:	d106      	bne.n	8001eca <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ec0:	f023 0206 	bic.w	r2, r3, #6
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	645a      	str	r2, [r3, #68]	@ 0x44
 8001ec8:	e002      	b.n	8001ed0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	645a      	str	r2, [r3, #68]	@ 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ed8:	4b31      	ldr	r3, [pc, #196]	@ (8001fa0 <HAL_ADC_Start+0x194>)
 8001eda:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001ee4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f003 031f 	and.w	r3, r3, #31
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d12a      	bne.n	8001f48 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a2b      	ldr	r2, [pc, #172]	@ (8001fa4 <HAL_ADC_Start+0x198>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d015      	beq.n	8001f28 <HAL_ADC_Start+0x11c>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a29      	ldr	r2, [pc, #164]	@ (8001fa8 <HAL_ADC_Start+0x19c>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d105      	bne.n	8001f12 <HAL_ADC_Start+0x106>
 8001f06:	4b26      	ldr	r3, [pc, #152]	@ (8001fa0 <HAL_ADC_Start+0x194>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f003 031f 	and.w	r3, r3, #31
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d00a      	beq.n	8001f28 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a25      	ldr	r2, [pc, #148]	@ (8001fac <HAL_ADC_Start+0x1a0>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d136      	bne.n	8001f8a <HAL_ADC_Start+0x17e>
 8001f1c:	4b20      	ldr	r3, [pc, #128]	@ (8001fa0 <HAL_ADC_Start+0x194>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f003 0310 	and.w	r3, r3, #16
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d130      	bne.n	8001f8a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d129      	bne.n	8001f8a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001f44:	609a      	str	r2, [r3, #8]
 8001f46:	e020      	b.n	8001f8a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a15      	ldr	r2, [pc, #84]	@ (8001fa4 <HAL_ADC_Start+0x198>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d11b      	bne.n	8001f8a <HAL_ADC_Start+0x17e>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d114      	bne.n	8001f8a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	689a      	ldr	r2, [r3, #8]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001f6e:	609a      	str	r2, [r3, #8]
 8001f70:	e00b      	b.n	8001f8a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f76:	f043 0210 	orr.w	r2, r3, #16
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f82:	f043 0201 	orr.w	r2, r3, #1
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	20000000 	.word	0x20000000
 8001f9c:	431bde83 	.word	0x431bde83
 8001fa0:	40012300 	.word	0x40012300
 8001fa4:	40012000 	.word	0x40012000
 8001fa8:	40012100 	.word	0x40012100
 8001fac:	40012200 	.word	0x40012200

08001fb0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
	...

08001fcc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d101      	bne.n	8001fe8 <HAL_ADC_ConfigChannel+0x1c>
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	e105      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x228>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2b09      	cmp	r3, #9
 8001ff6:	d925      	bls.n	8002044 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68d9      	ldr	r1, [r3, #12]
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	b29b      	uxth	r3, r3
 8002004:	461a      	mov	r2, r3
 8002006:	4613      	mov	r3, r2
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	4413      	add	r3, r2
 800200c:	3b1e      	subs	r3, #30
 800200e:	2207      	movs	r2, #7
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	43da      	mvns	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	400a      	ands	r2, r1
 800201c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68d9      	ldr	r1, [r3, #12]
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	b29b      	uxth	r3, r3
 800202e:	4618      	mov	r0, r3
 8002030:	4603      	mov	r3, r0
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	4403      	add	r3, r0
 8002036:	3b1e      	subs	r3, #30
 8002038:	409a      	lsls	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	430a      	orrs	r2, r1
 8002040:	60da      	str	r2, [r3, #12]
 8002042:	e022      	b.n	800208a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6919      	ldr	r1, [r3, #16]
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	b29b      	uxth	r3, r3
 8002050:	461a      	mov	r2, r3
 8002052:	4613      	mov	r3, r2
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	4413      	add	r3, r2
 8002058:	2207      	movs	r2, #7
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	43da      	mvns	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	400a      	ands	r2, r1
 8002066:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6919      	ldr	r1, [r3, #16]
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	689a      	ldr	r2, [r3, #8]
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	b29b      	uxth	r3, r3
 8002078:	4618      	mov	r0, r3
 800207a:	4603      	mov	r3, r0
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	4403      	add	r3, r0
 8002080:	409a      	lsls	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	430a      	orrs	r2, r1
 8002088:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b06      	cmp	r3, #6
 8002090:	d824      	bhi.n	80020dc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	4613      	mov	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4413      	add	r3, r2
 80020a2:	3b05      	subs	r3, #5
 80020a4:	221f      	movs	r2, #31
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	43da      	mvns	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	400a      	ands	r2, r1
 80020b2:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	b29b      	uxth	r3, r3
 80020c0:	4618      	mov	r0, r3
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	4613      	mov	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	3b05      	subs	r3, #5
 80020ce:	fa00 f203 	lsl.w	r2, r0, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80020da:	e04c      	b.n	8002176 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2b0c      	cmp	r3, #12
 80020e2:	d824      	bhi.n	800212e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685a      	ldr	r2, [r3, #4]
 80020ee:	4613      	mov	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4413      	add	r3, r2
 80020f4:	3b23      	subs	r3, #35	@ 0x23
 80020f6:	221f      	movs	r2, #31
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	43da      	mvns	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	400a      	ands	r2, r1
 8002104:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	b29b      	uxth	r3, r3
 8002112:	4618      	mov	r0, r3
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685a      	ldr	r2, [r3, #4]
 8002118:	4613      	mov	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	3b23      	subs	r3, #35	@ 0x23
 8002120:	fa00 f203 	lsl.w	r2, r0, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	430a      	orrs	r2, r1
 800212a:	631a      	str	r2, [r3, #48]	@ 0x30
 800212c:	e023      	b.n	8002176 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	4613      	mov	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	3b41      	subs	r3, #65	@ 0x41
 8002140:	221f      	movs	r2, #31
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	43da      	mvns	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	400a      	ands	r2, r1
 800214e:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	b29b      	uxth	r3, r3
 800215c:	4618      	mov	r0, r3
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685a      	ldr	r2, [r3, #4]
 8002162:	4613      	mov	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4413      	add	r3, r2
 8002168:	3b41      	subs	r3, #65	@ 0x41
 800216a:	fa00 f203 	lsl.w	r2, r0, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	430a      	orrs	r2, r1
 8002174:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002176:	4b22      	ldr	r3, [pc, #136]	@ (8002200 <HAL_ADC_ConfigChannel+0x234>)
 8002178:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a21      	ldr	r2, [pc, #132]	@ (8002204 <HAL_ADC_ConfigChannel+0x238>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d109      	bne.n	8002198 <HAL_ADC_ConfigChannel+0x1cc>
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2b12      	cmp	r3, #18
 800218a:	d105      	bne.n	8002198 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a19      	ldr	r2, [pc, #100]	@ (8002204 <HAL_ADC_ConfigChannel+0x238>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d123      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x21e>
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2b10      	cmp	r3, #16
 80021a8:	d003      	beq.n	80021b2 <HAL_ADC_ConfigChannel+0x1e6>
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2b11      	cmp	r3, #17
 80021b0:	d11b      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2b10      	cmp	r3, #16
 80021c4:	d111      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021c6:	4b10      	ldr	r3, [pc, #64]	@ (8002208 <HAL_ADC_ConfigChannel+0x23c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a10      	ldr	r2, [pc, #64]	@ (800220c <HAL_ADC_ConfigChannel+0x240>)
 80021cc:	fba2 2303 	umull	r2, r3, r2, r3
 80021d0:	0c9a      	lsrs	r2, r3, #18
 80021d2:	4613      	mov	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	4413      	add	r3, r2
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80021dc:	e002      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	3b01      	subs	r3, #1
 80021e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1f9      	bne.n	80021de <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3714      	adds	r7, #20
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	40012300 	.word	0x40012300
 8002204:	40012000 	.word	0x40012000
 8002208:	20000000 	.word	0x20000000
 800220c:	431bde83 	.word	0x431bde83

08002210 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002218:	4b79      	ldr	r3, [pc, #484]	@ (8002400 <ADC_Init+0x1f0>)
 800221a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	685a      	ldr	r2, [r3, #4]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	431a      	orrs	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002244:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6859      	ldr	r1, [r3, #4]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	691b      	ldr	r3, [r3, #16]
 8002250:	021a      	lsls	r2, r3, #8
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	430a      	orrs	r2, r1
 8002258:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002268:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	6859      	ldr	r1, [r3, #4]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	430a      	orrs	r2, r1
 800227a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	689a      	ldr	r2, [r3, #8]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800228a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6899      	ldr	r1, [r3, #8]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	68da      	ldr	r2, [r3, #12]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	430a      	orrs	r2, r1
 800229c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022a2:	4a58      	ldr	r2, [pc, #352]	@ (8002404 <ADC_Init+0x1f4>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d022      	beq.n	80022ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	689a      	ldr	r2, [r3, #8]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80022b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6899      	ldr	r1, [r3, #8]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	430a      	orrs	r2, r1
 80022c8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80022d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	6899      	ldr	r1, [r3, #8]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	430a      	orrs	r2, r1
 80022ea:	609a      	str	r2, [r3, #8]
 80022ec:	e00f      	b.n	800230e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80022fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	689a      	ldr	r2, [r3, #8]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800230c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 0202 	bic.w	r2, r2, #2
 800231c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6899      	ldr	r1, [r3, #8]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	7e1b      	ldrb	r3, [r3, #24]
 8002328:	005a      	lsls	r2, r3, #1
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	430a      	orrs	r2, r1
 8002330:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d01b      	beq.n	8002374 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800234a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	685a      	ldr	r2, [r3, #4]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800235a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6859      	ldr	r1, [r3, #4]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002366:	3b01      	subs	r3, #1
 8002368:	035a      	lsls	r2, r3, #13
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	430a      	orrs	r2, r1
 8002370:	605a      	str	r2, [r3, #4]
 8002372:	e007      	b.n	8002384 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002382:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002392:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	3b01      	subs	r3, #1
 80023a0:	051a      	lsls	r2, r3, #20
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	430a      	orrs	r2, r1
 80023a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80023b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6899      	ldr	r1, [r3, #8]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80023c6:	025a      	lsls	r2, r3, #9
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	430a      	orrs	r2, r1
 80023ce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	689a      	ldr	r2, [r3, #8]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6899      	ldr	r1, [r3, #8]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	029a      	lsls	r2, r3, #10
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	430a      	orrs	r2, r1
 80023f2:	609a      	str	r2, [r3, #8]
}
 80023f4:	bf00      	nop
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	40012300 	.word	0x40012300
 8002404:	0f000001 	.word	0x0f000001

08002408 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e0ed      	b.n	80025f6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d102      	bne.n	800242c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f7ff fade 	bl	80019e8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f042 0201 	orr.w	r2, r2, #1
 800243a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800243c:	f7ff fc72 	bl	8001d24 <HAL_GetTick>
 8002440:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002442:	e012      	b.n	800246a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002444:	f7ff fc6e 	bl	8001d24 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b0a      	cmp	r3, #10
 8002450:	d90b      	bls.n	800246a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002456:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2205      	movs	r2, #5
 8002462:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e0c5      	b.n	80025f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	2b00      	cmp	r3, #0
 8002476:	d0e5      	beq.n	8002444 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f022 0202 	bic.w	r2, r2, #2
 8002486:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002488:	f7ff fc4c 	bl	8001d24 <HAL_GetTick>
 800248c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800248e:	e012      	b.n	80024b6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002490:	f7ff fc48 	bl	8001d24 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b0a      	cmp	r3, #10
 800249c:	d90b      	bls.n	80024b6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2205      	movs	r2, #5
 80024ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e09f      	b.n	80025f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1e5      	bne.n	8002490 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	7e1b      	ldrb	r3, [r3, #24]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d108      	bne.n	80024de <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	e007      	b.n	80024ee <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80024ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	7e5b      	ldrb	r3, [r3, #25]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d108      	bne.n	8002508 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	e007      	b.n	8002518 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002516:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	7e9b      	ldrb	r3, [r3, #26]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d108      	bne.n	8002532 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 0220 	orr.w	r2, r2, #32
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	e007      	b.n	8002542 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f022 0220 	bic.w	r2, r2, #32
 8002540:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	7edb      	ldrb	r3, [r3, #27]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d108      	bne.n	800255c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 0210 	bic.w	r2, r2, #16
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	e007      	b.n	800256c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f042 0210 	orr.w	r2, r2, #16
 800256a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	7f1b      	ldrb	r3, [r3, #28]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d108      	bne.n	8002586 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f042 0208 	orr.w	r2, r2, #8
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	e007      	b.n	8002596 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 0208 	bic.w	r2, r2, #8
 8002594:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	7f5b      	ldrb	r3, [r3, #29]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d108      	bne.n	80025b0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f042 0204 	orr.w	r2, r2, #4
 80025ac:	601a      	str	r2, [r3, #0]
 80025ae:	e007      	b.n	80025c0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f022 0204 	bic.w	r2, r2, #4
 80025be:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	431a      	orrs	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	431a      	orrs	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	695b      	ldr	r3, [r3, #20]
 80025d4:	ea42 0103 	orr.w	r1, r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	1e5a      	subs	r2, r3, #1
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	430a      	orrs	r2, r1
 80025e4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
	...

08002600 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002600:	b480      	push	{r7}
 8002602:	b087      	sub	sp, #28
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002616:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002618:	7cfb      	ldrb	r3, [r7, #19]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d003      	beq.n	8002626 <HAL_CAN_ConfigFilter+0x26>
 800261e:	7cfb      	ldrb	r3, [r7, #19]
 8002620:	2b02      	cmp	r3, #2
 8002622:	f040 80be 	bne.w	80027a2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002626:	4b65      	ldr	r3, [pc, #404]	@ (80027bc <HAL_CAN_ConfigFilter+0x1bc>)
 8002628:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002630:	f043 0201 	orr.w	r2, r3, #1
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002640:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002654:	021b      	lsls	r3, r3, #8
 8002656:	431a      	orrs	r2, r3
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	f003 031f 	and.w	r3, r3, #31
 8002666:	2201      	movs	r2, #1
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	43db      	mvns	r3, r3
 8002678:	401a      	ands	r2, r3
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	69db      	ldr	r3, [r3, #28]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d123      	bne.n	80026d0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	43db      	mvns	r3, r3
 8002692:	401a      	ands	r2, r3
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80026aa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	3248      	adds	r2, #72	@ 0x48
 80026b0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026c4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026c6:	6979      	ldr	r1, [r7, #20]
 80026c8:	3348      	adds	r3, #72	@ 0x48
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	440b      	add	r3, r1
 80026ce:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	69db      	ldr	r3, [r3, #28]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d122      	bne.n	800271e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	431a      	orrs	r2, r3
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80026f8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	3248      	adds	r2, #72	@ 0x48
 80026fe:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002712:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002714:	6979      	ldr	r1, [r7, #20]
 8002716:	3348      	adds	r3, #72	@ 0x48
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	440b      	add	r3, r1
 800271c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d109      	bne.n	800273a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	43db      	mvns	r3, r3
 8002730:	401a      	ands	r2, r3
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002738:	e007      	b.n	800274a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	431a      	orrs	r2, r3
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d109      	bne.n	8002766 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	43db      	mvns	r3, r3
 800275c:	401a      	ands	r2, r3
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002764:	e007      	b.n	8002776 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	431a      	orrs	r2, r3
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	6a1b      	ldr	r3, [r3, #32]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d107      	bne.n	800278e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	431a      	orrs	r2, r3
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002794:	f023 0201 	bic.w	r2, r3, #1
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800279e:	2300      	movs	r3, #0
 80027a0:	e006      	b.n	80027b0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
  }
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	371c      	adds	r7, #28
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	40006400 	.word	0x40006400

080027c0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d12e      	bne.n	8002832 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2202      	movs	r2, #2
 80027d8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 0201 	bic.w	r2, r2, #1
 80027ea:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80027ec:	f7ff fa9a 	bl	8001d24 <HAL_GetTick>
 80027f0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80027f2:	e012      	b.n	800281a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80027f4:	f7ff fa96 	bl	8001d24 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b0a      	cmp	r3, #10
 8002800:	d90b      	bls.n	800281a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002806:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2205      	movs	r2, #5
 8002812:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e012      	b.n	8002840 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1e5      	bne.n	80027f4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800282e:	2300      	movs	r3, #0
 8002830:	e006      	b.n	8002840 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002836:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
  }
}
 8002840:	4618      	mov	r0, r3
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f003 0307 	and.w	r3, r3, #7
 8002856:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002858:	4b0c      	ldr	r3, [pc, #48]	@ (800288c <__NVIC_SetPriorityGrouping+0x44>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800285e:	68ba      	ldr	r2, [r7, #8]
 8002860:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002864:	4013      	ands	r3, r2
 8002866:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002870:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002874:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002878:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800287a:	4a04      	ldr	r2, [pc, #16]	@ (800288c <__NVIC_SetPriorityGrouping+0x44>)
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	60d3      	str	r3, [r2, #12]
}
 8002880:	bf00      	nop
 8002882:	3714      	adds	r7, #20
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	e000ed00 	.word	0xe000ed00

08002890 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002894:	4b04      	ldr	r3, [pc, #16]	@ (80028a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	0a1b      	lsrs	r3, r3, #8
 800289a:	f003 0307 	and.w	r3, r3, #7
}
 800289e:	4618      	mov	r0, r3
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	e000ed00 	.word	0xe000ed00

080028ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	4603      	mov	r3, r0
 80028b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	db0b      	blt.n	80028d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028be:	79fb      	ldrb	r3, [r7, #7]
 80028c0:	f003 021f 	and.w	r2, r3, #31
 80028c4:	4907      	ldr	r1, [pc, #28]	@ (80028e4 <__NVIC_EnableIRQ+0x38>)
 80028c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ca:	095b      	lsrs	r3, r3, #5
 80028cc:	2001      	movs	r0, #1
 80028ce:	fa00 f202 	lsl.w	r2, r0, r2
 80028d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	e000e100 	.word	0xe000e100

080028e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	4603      	mov	r3, r0
 80028f0:	6039      	str	r1, [r7, #0]
 80028f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	db0a      	blt.n	8002912 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	b2da      	uxtb	r2, r3
 8002900:	490c      	ldr	r1, [pc, #48]	@ (8002934 <__NVIC_SetPriority+0x4c>)
 8002902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002906:	0112      	lsls	r2, r2, #4
 8002908:	b2d2      	uxtb	r2, r2
 800290a:	440b      	add	r3, r1
 800290c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002910:	e00a      	b.n	8002928 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	b2da      	uxtb	r2, r3
 8002916:	4908      	ldr	r1, [pc, #32]	@ (8002938 <__NVIC_SetPriority+0x50>)
 8002918:	79fb      	ldrb	r3, [r7, #7]
 800291a:	f003 030f 	and.w	r3, r3, #15
 800291e:	3b04      	subs	r3, #4
 8002920:	0112      	lsls	r2, r2, #4
 8002922:	b2d2      	uxtb	r2, r2
 8002924:	440b      	add	r3, r1
 8002926:	761a      	strb	r2, [r3, #24]
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr
 8002934:	e000e100 	.word	0xe000e100
 8002938:	e000ed00 	.word	0xe000ed00

0800293c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800293c:	b480      	push	{r7}
 800293e:	b089      	sub	sp, #36	@ 0x24
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f003 0307 	and.w	r3, r3, #7
 800294e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	f1c3 0307 	rsb	r3, r3, #7
 8002956:	2b04      	cmp	r3, #4
 8002958:	bf28      	it	cs
 800295a:	2304      	movcs	r3, #4
 800295c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	3304      	adds	r3, #4
 8002962:	2b06      	cmp	r3, #6
 8002964:	d902      	bls.n	800296c <NVIC_EncodePriority+0x30>
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	3b03      	subs	r3, #3
 800296a:	e000      	b.n	800296e <NVIC_EncodePriority+0x32>
 800296c:	2300      	movs	r3, #0
 800296e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002970:	f04f 32ff 	mov.w	r2, #4294967295
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	43da      	mvns	r2, r3
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	401a      	ands	r2, r3
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002984:	f04f 31ff 	mov.w	r1, #4294967295
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	fa01 f303 	lsl.w	r3, r1, r3
 800298e:	43d9      	mvns	r1, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002994:	4313      	orrs	r3, r2
         );
}
 8002996:	4618      	mov	r0, r3
 8002998:	3724      	adds	r7, #36	@ 0x24
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
	...

080029a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	3b01      	subs	r3, #1
 80029b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029b4:	d301      	bcc.n	80029ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029b6:	2301      	movs	r3, #1
 80029b8:	e00f      	b.n	80029da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029ba:	4a0a      	ldr	r2, [pc, #40]	@ (80029e4 <SysTick_Config+0x40>)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	3b01      	subs	r3, #1
 80029c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029c2:	210f      	movs	r1, #15
 80029c4:	f04f 30ff 	mov.w	r0, #4294967295
 80029c8:	f7ff ff8e 	bl	80028e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029cc:	4b05      	ldr	r3, [pc, #20]	@ (80029e4 <SysTick_Config+0x40>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029d2:	4b04      	ldr	r3, [pc, #16]	@ (80029e4 <SysTick_Config+0x40>)
 80029d4:	2207      	movs	r2, #7
 80029d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	e000e010 	.word	0xe000e010

080029e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f7ff ff29 	bl	8002848 <__NVIC_SetPriorityGrouping>
}
 80029f6:	bf00      	nop
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b086      	sub	sp, #24
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	4603      	mov	r3, r0
 8002a06:	60b9      	str	r1, [r7, #8]
 8002a08:	607a      	str	r2, [r7, #4]
 8002a0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a10:	f7ff ff3e 	bl	8002890 <__NVIC_GetPriorityGrouping>
 8002a14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	68b9      	ldr	r1, [r7, #8]
 8002a1a:	6978      	ldr	r0, [r7, #20]
 8002a1c:	f7ff ff8e 	bl	800293c <NVIC_EncodePriority>
 8002a20:	4602      	mov	r2, r0
 8002a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a26:	4611      	mov	r1, r2
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff ff5d 	bl	80028e8 <__NVIC_SetPriority>
}
 8002a2e:	bf00      	nop
 8002a30:	3718      	adds	r7, #24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b082      	sub	sp, #8
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff ff31 	bl	80028ac <__NVIC_EnableIRQ>
}
 8002a4a:	bf00      	nop
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b082      	sub	sp, #8
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7ff ffa2 	bl	80029a4 <SysTick_Config>
 8002a60:	4603      	mov	r3, r0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b082      	sub	sp, #8
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d101      	bne.n	8002a7c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e014      	b.n	8002aa6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	791b      	ldrb	r3, [r3, #4]
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d105      	bne.n	8002a92 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f7fe fff3 	bl	8001a78 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2202      	movs	r2, #2
 8002a96:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b083      	sub	sp, #12
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
 8002ab6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	795b      	ldrb	r3, [r3, #5]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d101      	bne.n	8002ac4 <HAL_DAC_Start+0x16>
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	e040      	b.n	8002b46 <HAL_DAC_Start+0x98>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2202      	movs	r2, #2
 8002ace:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	6819      	ldr	r1, [r3, #0]
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	f003 0310 	and.w	r3, r3, #16
 8002adc:	2201      	movs	r2, #1
 8002ade:	409a      	lsls	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10f      	bne.n	8002b0e <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8002af8:	2b3c      	cmp	r3, #60	@ 0x3c
 8002afa:	d11d      	bne.n	8002b38 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	685a      	ldr	r2, [r3, #4]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f042 0201 	orr.w	r2, r2, #1
 8002b0a:	605a      	str	r2, [r3, #4]
 8002b0c:	e014      	b.n	8002b38 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	f003 0310 	and.w	r3, r3, #16
 8002b1e:	213c      	movs	r1, #60	@ 0x3c
 8002b20:	fa01 f303 	lsl.w	r3, r1, r3
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d107      	bne.n	8002b38 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	685a      	ldr	r2, [r3, #4]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f042 0202 	orr.w	r2, r2, #2
 8002b36:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b087      	sub	sp, #28
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	60f8      	str	r0, [r7, #12]
 8002b5a:	60b9      	str	r1, [r7, #8]
 8002b5c:	607a      	str	r2, [r7, #4]
 8002b5e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002b60:	2300      	movs	r3, #0
 8002b62:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d105      	bne.n	8002b7c <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002b70:	697a      	ldr	r2, [r7, #20]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4413      	add	r3, r2
 8002b76:	3308      	adds	r3, #8
 8002b78:	617b      	str	r3, [r7, #20]
 8002b7a:	e004      	b.n	8002b86 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002b7c:	697a      	ldr	r2, [r7, #20]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4413      	add	r3, r2
 8002b82:	3314      	adds	r3, #20
 8002b84:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	461a      	mov	r2, r3
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	371c      	adds	r7, #28
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b087      	sub	sp, #28
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	795b      	ldrb	r3, [r3, #5]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d101      	bne.n	8002bb4 <HAL_DAC_ConfigChannel+0x18>
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	e03c      	b.n	8002c2e <HAL_DAC_ConfigChannel+0x92>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2202      	movs	r2, #2
 8002bbe:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f003 0310 	and.w	r3, r3, #16
 8002bce:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	43db      	mvns	r3, r3
 8002bd8:	697a      	ldr	r2, [r7, #20]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f003 0310 	and.w	r3, r3, #16
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	697a      	ldr	r2, [r7, #20]
 8002c02:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6819      	ldr	r1, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f003 0310 	and.w	r3, r3, #16
 8002c10:	22c0      	movs	r2, #192	@ 0xc0
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	43da      	mvns	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	400a      	ands	r2, r1
 8002c1e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2201      	movs	r2, #1
 8002c24:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	371c      	adds	r7, #28
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
	...

08002c3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b089      	sub	sp, #36	@ 0x24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c46:	2300      	movs	r3, #0
 8002c48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c52:	2300      	movs	r3, #0
 8002c54:	61fb      	str	r3, [r7, #28]
 8002c56:	e16b      	b.n	8002f30 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c58:	2201      	movs	r2, #1
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	f040 815a 	bne.w	8002f2a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f003 0303 	and.w	r3, r3, #3
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d005      	beq.n	8002c8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d130      	bne.n	8002cf0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	2203      	movs	r2, #3
 8002c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9e:	43db      	mvns	r3, r3
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	68da      	ldr	r2, [r3, #12]
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	091b      	lsrs	r3, r3, #4
 8002cda:	f003 0201 	and.w	r2, r3, #1
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f003 0303 	and.w	r3, r3, #3
 8002cf8:	2b03      	cmp	r3, #3
 8002cfa:	d017      	beq.n	8002d2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	2203      	movs	r2, #3
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	4013      	ands	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	689a      	ldr	r2, [r3, #8]
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f003 0303 	and.w	r3, r3, #3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d123      	bne.n	8002d80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	08da      	lsrs	r2, r3, #3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	3208      	adds	r2, #8
 8002d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	f003 0307 	and.w	r3, r3, #7
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	220f      	movs	r2, #15
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	43db      	mvns	r3, r3
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	691a      	ldr	r2, [r3, #16]
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	f003 0307 	and.w	r3, r3, #7
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	08da      	lsrs	r2, r3, #3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	3208      	adds	r2, #8
 8002d7a:	69b9      	ldr	r1, [r7, #24]
 8002d7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	2203      	movs	r2, #3
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	43db      	mvns	r3, r3
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	4013      	ands	r3, r2
 8002d96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f003 0203 	and.w	r2, r3, #3
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 80b4 	beq.w	8002f2a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	60fb      	str	r3, [r7, #12]
 8002dc6:	4b60      	ldr	r3, [pc, #384]	@ (8002f48 <HAL_GPIO_Init+0x30c>)
 8002dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dca:	4a5f      	ldr	r2, [pc, #380]	@ (8002f48 <HAL_GPIO_Init+0x30c>)
 8002dcc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002dd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dd2:	4b5d      	ldr	r3, [pc, #372]	@ (8002f48 <HAL_GPIO_Init+0x30c>)
 8002dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dda:	60fb      	str	r3, [r7, #12]
 8002ddc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dde:	4a5b      	ldr	r2, [pc, #364]	@ (8002f4c <HAL_GPIO_Init+0x310>)
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	089b      	lsrs	r3, r3, #2
 8002de4:	3302      	adds	r3, #2
 8002de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	f003 0303 	and.w	r3, r3, #3
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	220f      	movs	r2, #15
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	43db      	mvns	r3, r3
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a52      	ldr	r2, [pc, #328]	@ (8002f50 <HAL_GPIO_Init+0x314>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d02b      	beq.n	8002e62 <HAL_GPIO_Init+0x226>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a51      	ldr	r2, [pc, #324]	@ (8002f54 <HAL_GPIO_Init+0x318>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d025      	beq.n	8002e5e <HAL_GPIO_Init+0x222>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a50      	ldr	r2, [pc, #320]	@ (8002f58 <HAL_GPIO_Init+0x31c>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d01f      	beq.n	8002e5a <HAL_GPIO_Init+0x21e>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a4f      	ldr	r2, [pc, #316]	@ (8002f5c <HAL_GPIO_Init+0x320>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d019      	beq.n	8002e56 <HAL_GPIO_Init+0x21a>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a4e      	ldr	r2, [pc, #312]	@ (8002f60 <HAL_GPIO_Init+0x324>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d013      	beq.n	8002e52 <HAL_GPIO_Init+0x216>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a4d      	ldr	r2, [pc, #308]	@ (8002f64 <HAL_GPIO_Init+0x328>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d00d      	beq.n	8002e4e <HAL_GPIO_Init+0x212>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a4c      	ldr	r2, [pc, #304]	@ (8002f68 <HAL_GPIO_Init+0x32c>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d007      	beq.n	8002e4a <HAL_GPIO_Init+0x20e>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a4b      	ldr	r2, [pc, #300]	@ (8002f6c <HAL_GPIO_Init+0x330>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d101      	bne.n	8002e46 <HAL_GPIO_Init+0x20a>
 8002e42:	2307      	movs	r3, #7
 8002e44:	e00e      	b.n	8002e64 <HAL_GPIO_Init+0x228>
 8002e46:	2308      	movs	r3, #8
 8002e48:	e00c      	b.n	8002e64 <HAL_GPIO_Init+0x228>
 8002e4a:	2306      	movs	r3, #6
 8002e4c:	e00a      	b.n	8002e64 <HAL_GPIO_Init+0x228>
 8002e4e:	2305      	movs	r3, #5
 8002e50:	e008      	b.n	8002e64 <HAL_GPIO_Init+0x228>
 8002e52:	2304      	movs	r3, #4
 8002e54:	e006      	b.n	8002e64 <HAL_GPIO_Init+0x228>
 8002e56:	2303      	movs	r3, #3
 8002e58:	e004      	b.n	8002e64 <HAL_GPIO_Init+0x228>
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	e002      	b.n	8002e64 <HAL_GPIO_Init+0x228>
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e000      	b.n	8002e64 <HAL_GPIO_Init+0x228>
 8002e62:	2300      	movs	r3, #0
 8002e64:	69fa      	ldr	r2, [r7, #28]
 8002e66:	f002 0203 	and.w	r2, r2, #3
 8002e6a:	0092      	lsls	r2, r2, #2
 8002e6c:	4093      	lsls	r3, r2
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e74:	4935      	ldr	r1, [pc, #212]	@ (8002f4c <HAL_GPIO_Init+0x310>)
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	089b      	lsrs	r3, r3, #2
 8002e7a:	3302      	adds	r3, #2
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e82:	4b3b      	ldr	r3, [pc, #236]	@ (8002f70 <HAL_GPIO_Init+0x334>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	43db      	mvns	r3, r3
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d003      	beq.n	8002ea6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ea6:	4a32      	ldr	r2, [pc, #200]	@ (8002f70 <HAL_GPIO_Init+0x334>)
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002eac:	4b30      	ldr	r3, [pc, #192]	@ (8002f70 <HAL_GPIO_Init+0x334>)
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d003      	beq.n	8002ed0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ed0:	4a27      	ldr	r2, [pc, #156]	@ (8002f70 <HAL_GPIO_Init+0x334>)
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ed6:	4b26      	ldr	r3, [pc, #152]	@ (8002f70 <HAL_GPIO_Init+0x334>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	43db      	mvns	r3, r3
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002efa:	4a1d      	ldr	r2, [pc, #116]	@ (8002f70 <HAL_GPIO_Init+0x334>)
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f00:	4b1b      	ldr	r3, [pc, #108]	@ (8002f70 <HAL_GPIO_Init+0x334>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	43db      	mvns	r3, r3
 8002f0a:	69ba      	ldr	r2, [r7, #24]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d003      	beq.n	8002f24 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f24:	4a12      	ldr	r2, [pc, #72]	@ (8002f70 <HAL_GPIO_Init+0x334>)
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	61fb      	str	r3, [r7, #28]
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	2b0f      	cmp	r3, #15
 8002f34:	f67f ae90 	bls.w	8002c58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f38:	bf00      	nop
 8002f3a:	bf00      	nop
 8002f3c:	3724      	adds	r7, #36	@ 0x24
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	40013800 	.word	0x40013800
 8002f50:	40020000 	.word	0x40020000
 8002f54:	40020400 	.word	0x40020400
 8002f58:	40020800 	.word	0x40020800
 8002f5c:	40020c00 	.word	0x40020c00
 8002f60:	40021000 	.word	0x40021000
 8002f64:	40021400 	.word	0x40021400
 8002f68:	40021800 	.word	0x40021800
 8002f6c:	40021c00 	.word	0x40021c00
 8002f70:	40013c00 	.word	0x40013c00

08002f74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	691a      	ldr	r2, [r3, #16]
 8002f84:	887b      	ldrh	r3, [r7, #2]
 8002f86:	4013      	ands	r3, r2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d002      	beq.n	8002f92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	73fb      	strb	r3, [r7, #15]
 8002f90:	e001      	b.n	8002f96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f92:	2300      	movs	r3, #0
 8002f94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3714      	adds	r7, #20
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	460b      	mov	r3, r1
 8002fae:	807b      	strh	r3, [r7, #2]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fb4:	787b      	ldrb	r3, [r7, #1]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d003      	beq.n	8002fc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fba:	887a      	ldrh	r2, [r7, #2]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fc0:	e003      	b.n	8002fca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fc2:	887b      	ldrh	r3, [r7, #2]
 8002fc4:	041a      	lsls	r2, r3, #16
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	619a      	str	r2, [r3, #24]
}
 8002fca:	bf00      	nop
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr

08002fd6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002fd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fd8:	b08f      	sub	sp, #60	@ 0x3c
 8002fda:	af0a      	add	r7, sp, #40	@ 0x28
 8002fdc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d101      	bne.n	8002fe8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e10f      	b.n	8003208 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d106      	bne.n	8003008 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f005 fcee 	bl	80089e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2203      	movs	r2, #3
 800300c:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003014:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003018:	2b00      	cmp	r3, #0
 800301a:	d102      	bne.n	8003022 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4618      	mov	r0, r3
 8003028:	f001 ffd7 	bl	8004fda <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	603b      	str	r3, [r7, #0]
 8003032:	687e      	ldr	r6, [r7, #4]
 8003034:	466d      	mov	r5, sp
 8003036:	f106 0410 	add.w	r4, r6, #16
 800303a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800303c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800303e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003040:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003042:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003046:	e885 0003 	stmia.w	r5, {r0, r1}
 800304a:	1d33      	adds	r3, r6, #4
 800304c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800304e:	6838      	ldr	r0, [r7, #0]
 8003050:	f001 feae 	bl	8004db0 <USB_CoreInit>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d005      	beq.n	8003066 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2202      	movs	r2, #2
 800305e:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e0d0      	b.n	8003208 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2100      	movs	r1, #0
 800306c:	4618      	mov	r0, r3
 800306e:	f001 ffc5 	bl	8004ffc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003072:	2300      	movs	r3, #0
 8003074:	73fb      	strb	r3, [r7, #15]
 8003076:	e04a      	b.n	800310e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003078:	7bfa      	ldrb	r2, [r7, #15]
 800307a:	6879      	ldr	r1, [r7, #4]
 800307c:	4613      	mov	r3, r2
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	4413      	add	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	440b      	add	r3, r1
 8003086:	333d      	adds	r3, #61	@ 0x3d
 8003088:	2201      	movs	r2, #1
 800308a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800308c:	7bfa      	ldrb	r2, [r7, #15]
 800308e:	6879      	ldr	r1, [r7, #4]
 8003090:	4613      	mov	r3, r2
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	4413      	add	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	440b      	add	r3, r1
 800309a:	333c      	adds	r3, #60	@ 0x3c
 800309c:	7bfa      	ldrb	r2, [r7, #15]
 800309e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80030a0:	7bfa      	ldrb	r2, [r7, #15]
 80030a2:	7bfb      	ldrb	r3, [r7, #15]
 80030a4:	b298      	uxth	r0, r3
 80030a6:	6879      	ldr	r1, [r7, #4]
 80030a8:	4613      	mov	r3, r2
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	4413      	add	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	440b      	add	r3, r1
 80030b2:	3344      	adds	r3, #68	@ 0x44
 80030b4:	4602      	mov	r2, r0
 80030b6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80030b8:	7bfa      	ldrb	r2, [r7, #15]
 80030ba:	6879      	ldr	r1, [r7, #4]
 80030bc:	4613      	mov	r3, r2
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	4413      	add	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	440b      	add	r3, r1
 80030c6:	3340      	adds	r3, #64	@ 0x40
 80030c8:	2200      	movs	r2, #0
 80030ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80030cc:	7bfa      	ldrb	r2, [r7, #15]
 80030ce:	6879      	ldr	r1, [r7, #4]
 80030d0:	4613      	mov	r3, r2
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	4413      	add	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	440b      	add	r3, r1
 80030da:	3348      	adds	r3, #72	@ 0x48
 80030dc:	2200      	movs	r2, #0
 80030de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80030e0:	7bfa      	ldrb	r2, [r7, #15]
 80030e2:	6879      	ldr	r1, [r7, #4]
 80030e4:	4613      	mov	r3, r2
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	4413      	add	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	440b      	add	r3, r1
 80030ee:	334c      	adds	r3, #76	@ 0x4c
 80030f0:	2200      	movs	r2, #0
 80030f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80030f4:	7bfa      	ldrb	r2, [r7, #15]
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	4613      	mov	r3, r2
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	4413      	add	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	440b      	add	r3, r1
 8003102:	3354      	adds	r3, #84	@ 0x54
 8003104:	2200      	movs	r2, #0
 8003106:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003108:	7bfb      	ldrb	r3, [r7, #15]
 800310a:	3301      	adds	r3, #1
 800310c:	73fb      	strb	r3, [r7, #15]
 800310e:	7bfa      	ldrb	r2, [r7, #15]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	429a      	cmp	r2, r3
 8003116:	d3af      	bcc.n	8003078 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003118:	2300      	movs	r3, #0
 800311a:	73fb      	strb	r3, [r7, #15]
 800311c:	e044      	b.n	80031a8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800311e:	7bfa      	ldrb	r2, [r7, #15]
 8003120:	6879      	ldr	r1, [r7, #4]
 8003122:	4613      	mov	r3, r2
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	4413      	add	r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	440b      	add	r3, r1
 800312c:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8003130:	2200      	movs	r2, #0
 8003132:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003134:	7bfa      	ldrb	r2, [r7, #15]
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	4613      	mov	r3, r2
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	4413      	add	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	440b      	add	r3, r1
 8003142:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8003146:	7bfa      	ldrb	r2, [r7, #15]
 8003148:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800314a:	7bfa      	ldrb	r2, [r7, #15]
 800314c:	6879      	ldr	r1, [r7, #4]
 800314e:	4613      	mov	r3, r2
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	4413      	add	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	440b      	add	r3, r1
 8003158:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800315c:	2200      	movs	r2, #0
 800315e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003160:	7bfa      	ldrb	r2, [r7, #15]
 8003162:	6879      	ldr	r1, [r7, #4]
 8003164:	4613      	mov	r3, r2
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	4413      	add	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	440b      	add	r3, r1
 800316e:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8003172:	2200      	movs	r2, #0
 8003174:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003176:	7bfa      	ldrb	r2, [r7, #15]
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	4613      	mov	r3, r2
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	4413      	add	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	440b      	add	r3, r1
 8003184:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800318c:	7bfa      	ldrb	r2, [r7, #15]
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	4613      	mov	r3, r2
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	4413      	add	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 800319e:	2200      	movs	r2, #0
 80031a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031a2:	7bfb      	ldrb	r3, [r7, #15]
 80031a4:	3301      	adds	r3, #1
 80031a6:	73fb      	strb	r3, [r7, #15]
 80031a8:	7bfa      	ldrb	r2, [r7, #15]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d3b5      	bcc.n	800311e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	603b      	str	r3, [r7, #0]
 80031b8:	687e      	ldr	r6, [r7, #4]
 80031ba:	466d      	mov	r5, sp
 80031bc:	f106 0410 	add.w	r4, r6, #16
 80031c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031cc:	e885 0003 	stmia.w	r5, {r0, r1}
 80031d0:	1d33      	adds	r3, r6, #4
 80031d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031d4:	6838      	ldr	r0, [r7, #0]
 80031d6:	f001 ff5d 	bl	8005094 <USB_DevInit>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d005      	beq.n	80031ec <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2202      	movs	r2, #2
 80031e4:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e00d      	b.n	8003208 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4618      	mov	r0, r3
 8003202:	f003 f8ac 	bl	800635e <USB_DevDisconnect>

  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3714      	adds	r7, #20
 800320c:	46bd      	mov	sp, r7
 800320e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003210 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003224:	2b01      	cmp	r3, #1
 8003226:	d101      	bne.n	800322c <HAL_PCD_Start+0x1c>
 8003228:	2302      	movs	r3, #2
 800322a:	e020      	b.n	800326e <HAL_PCD_Start+0x5e>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003238:	2b01      	cmp	r3, #1
 800323a:	d109      	bne.n	8003250 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003240:	2b01      	cmp	r3, #1
 8003242:	d005      	beq.n	8003250 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003248:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4618      	mov	r0, r3
 8003256:	f001 feaf 	bl	8004fb8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4618      	mov	r0, r3
 8003260:	f003 f85c 	bl	800631c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003276:	b590      	push	{r4, r7, lr}
 8003278:	b08d      	sub	sp, #52	@ 0x34
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003284:	6a3b      	ldr	r3, [r7, #32]
 8003286:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4618      	mov	r0, r3
 800328e:	f003 f91a 	bl	80064c6 <USB_GetMode>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	f040 848a 	bne.w	8003bae <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4618      	mov	r0, r3
 80032a0:	f003 f87e 	bl	80063a0 <USB_ReadInterrupts>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f000 8480 	beq.w	8003bac <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	0a1b      	lsrs	r3, r3, #8
 80032b6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f003 f86b 	bl	80063a0 <USB_ReadInterrupts>
 80032ca:	4603      	mov	r3, r0
 80032cc:	f003 0302 	and.w	r3, r3, #2
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d107      	bne.n	80032e4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	695a      	ldr	r2, [r3, #20]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f002 0202 	and.w	r2, r2, #2
 80032e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f003 f859 	bl	80063a0 <USB_ReadInterrupts>
 80032ee:	4603      	mov	r3, r0
 80032f0:	f003 0310 	and.w	r3, r3, #16
 80032f4:	2b10      	cmp	r3, #16
 80032f6:	d161      	bne.n	80033bc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	699a      	ldr	r2, [r3, #24]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f022 0210 	bic.w	r2, r2, #16
 8003306:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003308:	6a3b      	ldr	r3, [r7, #32]
 800330a:	6a1b      	ldr	r3, [r3, #32]
 800330c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	f003 020f 	and.w	r2, r3, #15
 8003314:	4613      	mov	r3, r2
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	4413      	add	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	4413      	add	r3, r2
 8003324:	3304      	adds	r3, #4
 8003326:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	0c5b      	lsrs	r3, r3, #17
 800332c:	f003 030f 	and.w	r3, r3, #15
 8003330:	2b02      	cmp	r3, #2
 8003332:	d124      	bne.n	800337e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800333a:	4013      	ands	r3, r2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d035      	beq.n	80033ac <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	091b      	lsrs	r3, r3, #4
 8003348:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800334a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800334e:	b29b      	uxth	r3, r3
 8003350:	461a      	mov	r2, r3
 8003352:	6a38      	ldr	r0, [r7, #32]
 8003354:	f002 fe90 	bl	8006078 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	691a      	ldr	r2, [r3, #16]
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	091b      	lsrs	r3, r3, #4
 8003360:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003364:	441a      	add	r2, r3
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	6a1a      	ldr	r2, [r3, #32]
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	091b      	lsrs	r3, r3, #4
 8003372:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003376:	441a      	add	r2, r3
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	621a      	str	r2, [r3, #32]
 800337c:	e016      	b.n	80033ac <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	0c5b      	lsrs	r3, r3, #17
 8003382:	f003 030f 	and.w	r3, r3, #15
 8003386:	2b06      	cmp	r3, #6
 8003388:	d110      	bne.n	80033ac <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003390:	2208      	movs	r2, #8
 8003392:	4619      	mov	r1, r3
 8003394:	6a38      	ldr	r0, [r7, #32]
 8003396:	f002 fe6f 	bl	8006078 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	6a1a      	ldr	r2, [r3, #32]
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	091b      	lsrs	r3, r3, #4
 80033a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033a6:	441a      	add	r2, r3
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	699a      	ldr	r2, [r3, #24]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f042 0210 	orr.w	r2, r2, #16
 80033ba:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f002 ffed 	bl	80063a0 <USB_ReadInterrupts>
 80033c6:	4603      	mov	r3, r0
 80033c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033cc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80033d0:	f040 80a7 	bne.w	8003522 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80033d4:	2300      	movs	r3, #0
 80033d6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4618      	mov	r0, r3
 80033de:	f002 fff2 	bl	80063c6 <USB_ReadDevAllOutEpInterrupt>
 80033e2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80033e4:	e099      	b.n	800351a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80033e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f000 808e 	beq.w	800350e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033f8:	b2d2      	uxtb	r2, r2
 80033fa:	4611      	mov	r1, r2
 80033fc:	4618      	mov	r0, r3
 80033fe:	f003 f816 	bl	800642e <USB_ReadDevOutEPInterrupt>
 8003402:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00c      	beq.n	8003428 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800340e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003410:	015a      	lsls	r2, r3, #5
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	4413      	add	r3, r2
 8003416:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800341a:	461a      	mov	r2, r3
 800341c:	2301      	movs	r3, #1
 800341e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003420:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 fec2 	bl	80041ac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	f003 0308 	and.w	r3, r3, #8
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00c      	beq.n	800344c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003434:	015a      	lsls	r2, r3, #5
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	4413      	add	r3, r2
 800343a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800343e:	461a      	mov	r2, r3
 8003440:	2308      	movs	r3, #8
 8003442:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003444:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 ff98 	bl	800437c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	f003 0310 	and.w	r3, r3, #16
 8003452:	2b00      	cmp	r3, #0
 8003454:	d008      	beq.n	8003468 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003458:	015a      	lsls	r2, r3, #5
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	4413      	add	r3, r2
 800345e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003462:	461a      	mov	r2, r3
 8003464:	2310      	movs	r3, #16
 8003466:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d030      	beq.n	80034d4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003472:	6a3b      	ldr	r3, [r7, #32]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800347a:	2b80      	cmp	r3, #128	@ 0x80
 800347c:	d109      	bne.n	8003492 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	69fa      	ldr	r2, [r7, #28]
 8003488:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800348c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003490:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003492:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003494:	4613      	mov	r3, r2
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	4413      	add	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	4413      	add	r3, r2
 80034a4:	3304      	adds	r3, #4
 80034a6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	78db      	ldrb	r3, [r3, #3]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d108      	bne.n	80034c2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	2200      	movs	r2, #0
 80034b4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80034b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	4619      	mov	r1, r3
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f005 fba5 	bl	8008c0c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80034c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c4:	015a      	lsls	r2, r3, #5
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	4413      	add	r3, r2
 80034ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034ce:	461a      	mov	r2, r3
 80034d0:	2302      	movs	r3, #2
 80034d2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	f003 0320 	and.w	r3, r3, #32
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d008      	beq.n	80034f0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e0:	015a      	lsls	r2, r3, #5
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	4413      	add	r3, r2
 80034e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034ea:	461a      	mov	r2, r3
 80034ec:	2320      	movs	r3, #32
 80034ee:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d009      	beq.n	800350e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80034fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034fc:	015a      	lsls	r2, r3, #5
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	4413      	add	r3, r2
 8003502:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003506:	461a      	mov	r2, r3
 8003508:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800350c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800350e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003510:	3301      	adds	r3, #1
 8003512:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003516:	085b      	lsrs	r3, r3, #1
 8003518:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800351a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800351c:	2b00      	cmp	r3, #0
 800351e:	f47f af62 	bne.w	80033e6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4618      	mov	r0, r3
 8003528:	f002 ff3a 	bl	80063a0 <USB_ReadInterrupts>
 800352c:	4603      	mov	r3, r0
 800352e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003532:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003536:	f040 80db 	bne.w	80036f0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4618      	mov	r0, r3
 8003540:	f002 ff5b 	bl	80063fa <USB_ReadDevAllInEpInterrupt>
 8003544:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003546:	2300      	movs	r3, #0
 8003548:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800354a:	e0cd      	b.n	80036e8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800354c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b00      	cmp	r3, #0
 8003554:	f000 80c2 	beq.w	80036dc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800355e:	b2d2      	uxtb	r2, r2
 8003560:	4611      	mov	r1, r2
 8003562:	4618      	mov	r0, r3
 8003564:	f002 ff81 	bl	800646a <USB_ReadDevInEPInterrupt>
 8003568:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	2b00      	cmp	r3, #0
 8003572:	d057      	beq.n	8003624 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003576:	f003 030f 	and.w	r3, r3, #15
 800357a:	2201      	movs	r2, #1
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003588:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	43db      	mvns	r3, r3
 800358e:	69f9      	ldr	r1, [r7, #28]
 8003590:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003594:	4013      	ands	r3, r2
 8003596:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800359a:	015a      	lsls	r2, r3, #5
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	4413      	add	r3, r2
 80035a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035a4:	461a      	mov	r2, r3
 80035a6:	2301      	movs	r3, #1
 80035a8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d132      	bne.n	8003618 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80035b2:	6879      	ldr	r1, [r7, #4]
 80035b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035b6:	4613      	mov	r3, r2
 80035b8:	00db      	lsls	r3, r3, #3
 80035ba:	4413      	add	r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	440b      	add	r3, r1
 80035c0:	334c      	adds	r3, #76	@ 0x4c
 80035c2:	6819      	ldr	r1, [r3, #0]
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035c8:	4613      	mov	r3, r2
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	4413      	add	r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	4403      	add	r3, r0
 80035d2:	3348      	adds	r3, #72	@ 0x48
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4419      	add	r1, r3
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035dc:	4613      	mov	r3, r2
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	4413      	add	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4403      	add	r3, r0
 80035e6:	334c      	adds	r3, #76	@ 0x4c
 80035e8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80035ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d113      	bne.n	8003618 <HAL_PCD_IRQHandler+0x3a2>
 80035f0:	6879      	ldr	r1, [r7, #4]
 80035f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035f4:	4613      	mov	r3, r2
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	4413      	add	r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	440b      	add	r3, r1
 80035fe:	3354      	adds	r3, #84	@ 0x54
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d108      	bne.n	8003618 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6818      	ldr	r0, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003610:	461a      	mov	r2, r3
 8003612:	2101      	movs	r1, #1
 8003614:	f002 ff88 	bl	8006528 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800361a:	b2db      	uxtb	r3, r3
 800361c:	4619      	mov	r1, r3
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f005 fa6f 	bl	8008b02 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	f003 0308 	and.w	r3, r3, #8
 800362a:	2b00      	cmp	r3, #0
 800362c:	d008      	beq.n	8003640 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800362e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003630:	015a      	lsls	r2, r3, #5
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	4413      	add	r3, r2
 8003636:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800363a:	461a      	mov	r2, r3
 800363c:	2308      	movs	r3, #8
 800363e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	f003 0310 	and.w	r3, r3, #16
 8003646:	2b00      	cmp	r3, #0
 8003648:	d008      	beq.n	800365c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800364a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800364c:	015a      	lsls	r2, r3, #5
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	4413      	add	r3, r2
 8003652:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003656:	461a      	mov	r2, r3
 8003658:	2310      	movs	r3, #16
 800365a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003662:	2b00      	cmp	r3, #0
 8003664:	d008      	beq.n	8003678 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003668:	015a      	lsls	r2, r3, #5
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	4413      	add	r3, r2
 800366e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003672:	461a      	mov	r2, r3
 8003674:	2340      	movs	r3, #64	@ 0x40
 8003676:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d023      	beq.n	80036ca <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003682:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003684:	6a38      	ldr	r0, [r7, #32]
 8003686:	f001 fe69 	bl	800535c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800368a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800368c:	4613      	mov	r3, r2
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	4413      	add	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	3338      	adds	r3, #56	@ 0x38
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	4413      	add	r3, r2
 800369a:	3304      	adds	r3, #4
 800369c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	78db      	ldrb	r3, [r3, #3]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d108      	bne.n	80036b8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	2200      	movs	r2, #0
 80036aa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80036ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	4619      	mov	r1, r3
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f005 fabc 	bl	8008c30 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80036b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ba:	015a      	lsls	r2, r3, #5
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	4413      	add	r3, r2
 80036c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036c4:	461a      	mov	r2, r3
 80036c6:	2302      	movs	r3, #2
 80036c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d003      	beq.n	80036dc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80036d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 fcdb 	bl	8004092 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80036dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036de:	3301      	adds	r3, #1
 80036e0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80036e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036e4:	085b      	lsrs	r3, r3, #1
 80036e6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80036e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f47f af2e 	bne.w	800354c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f002 fe53 	bl	80063a0 <USB_ReadInterrupts>
 80036fa:	4603      	mov	r3, r0
 80036fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003700:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003704:	d122      	bne.n	800374c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	69fa      	ldr	r2, [r7, #28]
 8003710:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003714:	f023 0301 	bic.w	r3, r3, #1
 8003718:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8003720:	2b01      	cmp	r3, #1
 8003722:	d108      	bne.n	8003736 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800372c:	2100      	movs	r1, #0
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 fec2 	bl	80044b8 <HAL_PCDEx_LPM_Callback>
 8003734:	e002      	b.n	800373c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f005 fa5a 	bl	8008bf0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	695a      	ldr	r2, [r3, #20]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800374a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4618      	mov	r0, r3
 8003752:	f002 fe25 	bl	80063a0 <USB_ReadInterrupts>
 8003756:	4603      	mov	r3, r0
 8003758:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800375c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003760:	d112      	bne.n	8003788 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b01      	cmp	r3, #1
 8003770:	d102      	bne.n	8003778 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f005 fa16 	bl	8008ba4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	695a      	ldr	r2, [r3, #20]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003786:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4618      	mov	r0, r3
 800378e:	f002 fe07 	bl	80063a0 <USB_ReadInterrupts>
 8003792:	4603      	mov	r3, r0
 8003794:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003798:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800379c:	f040 80b7 	bne.w	800390e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	69fa      	ldr	r2, [r7, #28]
 80037aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80037ae:	f023 0301 	bic.w	r3, r3, #1
 80037b2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2110      	movs	r1, #16
 80037ba:	4618      	mov	r0, r3
 80037bc:	f001 fdce 	bl	800535c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037c0:	2300      	movs	r3, #0
 80037c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037c4:	e046      	b.n	8003854 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80037c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037c8:	015a      	lsls	r2, r3, #5
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	4413      	add	r3, r2
 80037ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037d2:	461a      	mov	r2, r3
 80037d4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80037d8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80037da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037dc:	015a      	lsls	r2, r3, #5
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	4413      	add	r3, r2
 80037e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037ea:	0151      	lsls	r1, r2, #5
 80037ec:	69fa      	ldr	r2, [r7, #28]
 80037ee:	440a      	add	r2, r1
 80037f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80037f4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80037f8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80037fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037fc:	015a      	lsls	r2, r3, #5
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	4413      	add	r3, r2
 8003802:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003806:	461a      	mov	r2, r3
 8003808:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800380c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800380e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003810:	015a      	lsls	r2, r3, #5
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	4413      	add	r3, r2
 8003816:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800381e:	0151      	lsls	r1, r2, #5
 8003820:	69fa      	ldr	r2, [r7, #28]
 8003822:	440a      	add	r2, r1
 8003824:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003828:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800382c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800382e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003830:	015a      	lsls	r2, r3, #5
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	4413      	add	r3, r2
 8003836:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800383e:	0151      	lsls	r1, r2, #5
 8003840:	69fa      	ldr	r2, [r7, #28]
 8003842:	440a      	add	r2, r1
 8003844:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003848:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800384c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800384e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003850:	3301      	adds	r3, #1
 8003852:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800385a:	429a      	cmp	r2, r3
 800385c:	d3b3      	bcc.n	80037c6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003864:	69db      	ldr	r3, [r3, #28]
 8003866:	69fa      	ldr	r2, [r7, #28]
 8003868:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800386c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003870:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003876:	2b00      	cmp	r3, #0
 8003878:	d016      	beq.n	80038a8 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003880:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003884:	69fa      	ldr	r2, [r7, #28]
 8003886:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800388a:	f043 030b 	orr.w	r3, r3, #11
 800388e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800389a:	69fa      	ldr	r2, [r7, #28]
 800389c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038a0:	f043 030b 	orr.w	r3, r3, #11
 80038a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80038a6:	e015      	b.n	80038d4 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	69fa      	ldr	r2, [r7, #28]
 80038b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038b6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80038ba:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80038be:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	69fa      	ldr	r2, [r7, #28]
 80038ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038ce:	f043 030b 	orr.w	r3, r3, #11
 80038d2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	69fa      	ldr	r2, [r7, #28]
 80038de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038e2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80038e6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6818      	ldr	r0, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80038f8:	461a      	mov	r2, r3
 80038fa:	f002 fe15 	bl	8006528 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	695a      	ldr	r2, [r3, #20]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800390c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4618      	mov	r0, r3
 8003914:	f002 fd44 	bl	80063a0 <USB_ReadInterrupts>
 8003918:	4603      	mov	r3, r0
 800391a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800391e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003922:	d124      	bne.n	800396e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4618      	mov	r0, r3
 800392a:	f002 fdda 	bl	80064e2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4618      	mov	r0, r3
 8003934:	f001 fd8f 	bl	8005456 <USB_GetDevSpeed>
 8003938:	4603      	mov	r3, r0
 800393a:	461a      	mov	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681c      	ldr	r4, [r3, #0]
 8003944:	f001 fa28 	bl	8004d98 <HAL_RCC_GetHCLKFreq>
 8003948:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800394e:	b2db      	uxtb	r3, r3
 8003950:	461a      	mov	r2, r3
 8003952:	4620      	mov	r0, r4
 8003954:	f001 fa8e 	bl	8004e74 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f005 f8fa 	bl	8008b52 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	695a      	ldr	r2, [r3, #20]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800396c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4618      	mov	r0, r3
 8003974:	f002 fd14 	bl	80063a0 <USB_ReadInterrupts>
 8003978:	4603      	mov	r3, r0
 800397a:	f003 0308 	and.w	r3, r3, #8
 800397e:	2b08      	cmp	r3, #8
 8003980:	d10a      	bne.n	8003998 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f005 f8d7 	bl	8008b36 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	695a      	ldr	r2, [r3, #20]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f002 0208 	and.w	r2, r2, #8
 8003996:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4618      	mov	r0, r3
 800399e:	f002 fcff 	bl	80063a0 <USB_ReadInterrupts>
 80039a2:	4603      	mov	r3, r0
 80039a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039a8:	2b80      	cmp	r3, #128	@ 0x80
 80039aa:	d122      	bne.n	80039f2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80039ac:	6a3b      	ldr	r3, [r7, #32]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80039b4:	6a3b      	ldr	r3, [r7, #32]
 80039b6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039b8:	2301      	movs	r3, #1
 80039ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80039bc:	e014      	b.n	80039e8 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80039be:	6879      	ldr	r1, [r7, #4]
 80039c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039c2:	4613      	mov	r3, r2
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	4413      	add	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	440b      	add	r3, r1
 80039cc:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d105      	bne.n	80039e2 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80039d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	4619      	mov	r1, r3
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 fb27 	bl	8004030 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e4:	3301      	adds	r3, #1
 80039e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d3e5      	bcc.n	80039be <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f002 fcd2 	bl	80063a0 <USB_ReadInterrupts>
 80039fc:	4603      	mov	r3, r0
 80039fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a06:	d13b      	bne.n	8003a80 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a08:	2301      	movs	r3, #1
 8003a0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a0c:	e02b      	b.n	8003a66 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a10:	015a      	lsls	r2, r3, #5
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	4413      	add	r3, r2
 8003a16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a1e:	6879      	ldr	r1, [r7, #4]
 8003a20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a22:	4613      	mov	r3, r2
 8003a24:	00db      	lsls	r3, r3, #3
 8003a26:	4413      	add	r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	440b      	add	r3, r1
 8003a2c:	3340      	adds	r3, #64	@ 0x40
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d115      	bne.n	8003a60 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003a34:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	da12      	bge.n	8003a60 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003a3a:	6879      	ldr	r1, [r7, #4]
 8003a3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a3e:	4613      	mov	r3, r2
 8003a40:	00db      	lsls	r3, r3, #3
 8003a42:	4413      	add	r3, r2
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	440b      	add	r3, r1
 8003a48:	333f      	adds	r3, #63	@ 0x3f
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	4619      	mov	r1, r3
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 fae8 	bl	8004030 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a62:	3301      	adds	r3, #1
 8003a64:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d3ce      	bcc.n	8003a0e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	695a      	ldr	r2, [r3, #20]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003a7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4618      	mov	r0, r3
 8003a86:	f002 fc8b 	bl	80063a0 <USB_ReadInterrupts>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a90:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a94:	d155      	bne.n	8003b42 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a96:	2301      	movs	r3, #1
 8003a98:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a9a:	e045      	b.n	8003b28 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a9e:	015a      	lsls	r2, r3, #5
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003aac:	6879      	ldr	r1, [r7, #4]
 8003aae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	4413      	add	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	440b      	add	r3, r1
 8003aba:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d12e      	bne.n	8003b22 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003ac4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	da2b      	bge.n	8003b22 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8003ad6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d121      	bne.n	8003b22 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003ade:	6879      	ldr	r1, [r7, #4]
 8003ae0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	00db      	lsls	r3, r3, #3
 8003ae6:	4413      	add	r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	440b      	add	r3, r1
 8003aec:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8003af0:	2201      	movs	r2, #1
 8003af2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003af4:	6a3b      	ldr	r3, [r7, #32]
 8003af6:	699b      	ldr	r3, [r3, #24]
 8003af8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003afc:	6a3b      	ldr	r3, [r7, #32]
 8003afe:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003b00:	6a3b      	ldr	r3, [r7, #32]
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d10a      	bne.n	8003b22 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	69fa      	ldr	r2, [r7, #28]
 8003b16:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b1e:	6053      	str	r3, [r2, #4]
            break;
 8003b20:	e007      	b.n	8003b32 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b24:	3301      	adds	r3, #1
 8003b26:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d3b4      	bcc.n	8003a9c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	695a      	ldr	r2, [r3, #20]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003b40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f002 fc2a 	bl	80063a0 <USB_ReadInterrupts>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003b52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b56:	d10a      	bne.n	8003b6e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f005 f87b 	bl	8008c54 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	695a      	ldr	r2, [r3, #20]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003b6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f002 fc14 	bl	80063a0 <USB_ReadInterrupts>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	f003 0304 	and.w	r3, r3, #4
 8003b7e:	2b04      	cmp	r3, #4
 8003b80:	d115      	bne.n	8003bae <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	f003 0304 	and.w	r3, r3, #4
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d002      	beq.n	8003b9a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f005 f86b 	bl	8008c70 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	6859      	ldr	r1, [r3, #4]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	605a      	str	r2, [r3, #4]
 8003baa:	e000      	b.n	8003bae <HAL_PCD_IRQHandler+0x938>
      return;
 8003bac:	bf00      	nop
    }
  }
}
 8003bae:	3734      	adds	r7, #52	@ 0x34
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd90      	pop	{r4, r7, pc}

08003bb4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d101      	bne.n	8003bce <HAL_PCD_SetAddress+0x1a>
 8003bca:	2302      	movs	r3, #2
 8003bcc:	e013      	b.n	8003bf6 <HAL_PCD_SetAddress+0x42>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	78fa      	ldrb	r2, [r7, #3]
 8003bda:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	78fa      	ldrb	r2, [r7, #3]
 8003be4:	4611      	mov	r1, r2
 8003be6:	4618      	mov	r0, r3
 8003be8:	f002 fb72 	bl	80062d0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3708      	adds	r7, #8
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b084      	sub	sp, #16
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
 8003c06:	4608      	mov	r0, r1
 8003c08:	4611      	mov	r1, r2
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	70fb      	strb	r3, [r7, #3]
 8003c10:	460b      	mov	r3, r1
 8003c12:	803b      	strh	r3, [r7, #0]
 8003c14:	4613      	mov	r3, r2
 8003c16:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	da0f      	bge.n	8003c44 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c24:	78fb      	ldrb	r3, [r7, #3]
 8003c26:	f003 020f 	and.w	r2, r3, #15
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	00db      	lsls	r3, r3, #3
 8003c2e:	4413      	add	r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	3338      	adds	r3, #56	@ 0x38
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	4413      	add	r3, r2
 8003c38:	3304      	adds	r3, #4
 8003c3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	705a      	strb	r2, [r3, #1]
 8003c42:	e00f      	b.n	8003c64 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c44:	78fb      	ldrb	r3, [r7, #3]
 8003c46:	f003 020f 	and.w	r2, r3, #15
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	00db      	lsls	r3, r3, #3
 8003c4e:	4413      	add	r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	4413      	add	r3, r2
 8003c5a:	3304      	adds	r3, #4
 8003c5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003c64:	78fb      	ldrb	r3, [r7, #3]
 8003c66:	f003 030f 	and.w	r3, r3, #15
 8003c6a:	b2da      	uxtb	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003c70:	883a      	ldrh	r2, [r7, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	78ba      	ldrb	r2, [r7, #2]
 8003c7a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	785b      	ldrb	r3, [r3, #1]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d004      	beq.n	8003c8e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	461a      	mov	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003c8e:	78bb      	ldrb	r3, [r7, #2]
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d102      	bne.n	8003c9a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d101      	bne.n	8003ca8 <HAL_PCD_EP_Open+0xaa>
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	e00e      	b.n	8003cc6 <HAL_PCD_EP_Open+0xc8>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68f9      	ldr	r1, [r7, #12]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f001 fbf2 	bl	80054a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 8003cc4:	7afb      	ldrb	r3, [r7, #11]
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b084      	sub	sp, #16
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003cda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	da0f      	bge.n	8003d02 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ce2:	78fb      	ldrb	r3, [r7, #3]
 8003ce4:	f003 020f 	and.w	r2, r3, #15
 8003ce8:	4613      	mov	r3, r2
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	4413      	add	r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	3338      	adds	r3, #56	@ 0x38
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	3304      	adds	r3, #4
 8003cf8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	705a      	strb	r2, [r3, #1]
 8003d00:	e00f      	b.n	8003d22 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d02:	78fb      	ldrb	r3, [r7, #3]
 8003d04:	f003 020f 	and.w	r2, r3, #15
 8003d08:	4613      	mov	r3, r2
 8003d0a:	00db      	lsls	r3, r3, #3
 8003d0c:	4413      	add	r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	4413      	add	r3, r2
 8003d18:	3304      	adds	r3, #4
 8003d1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003d22:	78fb      	ldrb	r3, [r7, #3]
 8003d24:	f003 030f 	and.w	r3, r3, #15
 8003d28:	b2da      	uxtb	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d101      	bne.n	8003d3c <HAL_PCD_EP_Close+0x6e>
 8003d38:	2302      	movs	r3, #2
 8003d3a:	e00e      	b.n	8003d5a <HAL_PCD_EP_Close+0x8c>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68f9      	ldr	r1, [r7, #12]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f001 fc30 	bl	80055b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b086      	sub	sp, #24
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	60f8      	str	r0, [r7, #12]
 8003d6a:	607a      	str	r2, [r7, #4]
 8003d6c:	603b      	str	r3, [r7, #0]
 8003d6e:	460b      	mov	r3, r1
 8003d70:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d72:	7afb      	ldrb	r3, [r7, #11]
 8003d74:	f003 020f 	and.w	r2, r3, #15
 8003d78:	4613      	mov	r3, r2
 8003d7a:	00db      	lsls	r3, r3, #3
 8003d7c:	4413      	add	r3, r2
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	4413      	add	r3, r2
 8003d88:	3304      	adds	r3, #4
 8003d8a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	2200      	movs	r2, #0
 8003da2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003da4:	7afb      	ldrb	r3, [r7, #11]
 8003da6:	f003 030f 	and.w	r3, r3, #15
 8003daa:	b2da      	uxtb	r2, r3
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d102      	bne.n	8003dbe <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003dbe:	7afb      	ldrb	r3, [r7, #11]
 8003dc0:	f003 030f 	and.w	r3, r3, #15
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d109      	bne.n	8003ddc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6818      	ldr	r0, [r3, #0]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	6979      	ldr	r1, [r7, #20]
 8003dd6:	f001 ff0f 	bl	8005bf8 <USB_EP0StartXfer>
 8003dda:	e008      	b.n	8003dee <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6818      	ldr	r0, [r3, #0]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	461a      	mov	r2, r3
 8003de8:	6979      	ldr	r1, [r7, #20]
 8003dea:	f001 fcbd 	bl	8005768 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3718      	adds	r7, #24
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	460b      	mov	r3, r1
 8003e02:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003e04:	78fb      	ldrb	r3, [r7, #3]
 8003e06:	f003 020f 	and.w	r2, r3, #15
 8003e0a:	6879      	ldr	r1, [r7, #4]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	00db      	lsls	r3, r3, #3
 8003e10:	4413      	add	r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	440b      	add	r3, r1
 8003e16:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8003e1a:	681b      	ldr	r3, [r3, #0]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	607a      	str	r2, [r7, #4]
 8003e32:	603b      	str	r3, [r7, #0]
 8003e34:	460b      	mov	r3, r1
 8003e36:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e38:	7afb      	ldrb	r3, [r7, #11]
 8003e3a:	f003 020f 	and.w	r2, r3, #15
 8003e3e:	4613      	mov	r3, r2
 8003e40:	00db      	lsls	r3, r3, #3
 8003e42:	4413      	add	r3, r2
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	3338      	adds	r3, #56	@ 0x38
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	3304      	adds	r3, #4
 8003e4e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	2201      	movs	r2, #1
 8003e66:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e68:	7afb      	ldrb	r3, [r7, #11]
 8003e6a:	f003 030f 	and.w	r3, r3, #15
 8003e6e:	b2da      	uxtb	r2, r3
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d102      	bne.n	8003e82 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e82:	7afb      	ldrb	r3, [r7, #11]
 8003e84:	f003 030f 	and.w	r3, r3, #15
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d109      	bne.n	8003ea0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6818      	ldr	r0, [r3, #0]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	461a      	mov	r2, r3
 8003e98:	6979      	ldr	r1, [r7, #20]
 8003e9a:	f001 fead 	bl	8005bf8 <USB_EP0StartXfer>
 8003e9e:	e008      	b.n	8003eb2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6818      	ldr	r0, [r3, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	461a      	mov	r2, r3
 8003eac:	6979      	ldr	r1, [r7, #20]
 8003eae:	f001 fc5b 	bl	8005768 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3718      	adds	r7, #24
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003ec8:	78fb      	ldrb	r3, [r7, #3]
 8003eca:	f003 020f 	and.w	r2, r3, #15
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d901      	bls.n	8003eda <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e050      	b.n	8003f7c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003eda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	da0f      	bge.n	8003f02 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ee2:	78fb      	ldrb	r3, [r7, #3]
 8003ee4:	f003 020f 	and.w	r2, r3, #15
 8003ee8:	4613      	mov	r3, r2
 8003eea:	00db      	lsls	r3, r3, #3
 8003eec:	4413      	add	r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	3338      	adds	r3, #56	@ 0x38
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	3304      	adds	r3, #4
 8003ef8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2201      	movs	r2, #1
 8003efe:	705a      	strb	r2, [r3, #1]
 8003f00:	e00d      	b.n	8003f1e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003f02:	78fa      	ldrb	r2, [r7, #3]
 8003f04:	4613      	mov	r3, r2
 8003f06:	00db      	lsls	r3, r3, #3
 8003f08:	4413      	add	r3, r2
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	4413      	add	r3, r2
 8003f14:	3304      	adds	r3, #4
 8003f16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2201      	movs	r2, #1
 8003f22:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f24:	78fb      	ldrb	r3, [r7, #3]
 8003f26:	f003 030f 	and.w	r3, r3, #15
 8003f2a:	b2da      	uxtb	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d101      	bne.n	8003f3e <HAL_PCD_EP_SetStall+0x82>
 8003f3a:	2302      	movs	r3, #2
 8003f3c:	e01e      	b.n	8003f7c <HAL_PCD_EP_SetStall+0xc0>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68f9      	ldr	r1, [r7, #12]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f002 f8eb 	bl	8006128 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f52:	78fb      	ldrb	r3, [r7, #3]
 8003f54:	f003 030f 	and.w	r3, r3, #15
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d10a      	bne.n	8003f72 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6818      	ldr	r0, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	b2d9      	uxtb	r1, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	f002 fadb 	bl	8006528 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3710      	adds	r7, #16
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003f90:	78fb      	ldrb	r3, [r7, #3]
 8003f92:	f003 020f 	and.w	r2, r3, #15
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d901      	bls.n	8003fa2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e042      	b.n	8004028 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003fa2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	da0f      	bge.n	8003fca <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003faa:	78fb      	ldrb	r3, [r7, #3]
 8003fac:	f003 020f 	and.w	r2, r3, #15
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	4413      	add	r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	3338      	adds	r3, #56	@ 0x38
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	3304      	adds	r3, #4
 8003fc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	705a      	strb	r2, [r3, #1]
 8003fc8:	e00f      	b.n	8003fea <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fca:	78fb      	ldrb	r3, [r7, #3]
 8003fcc:	f003 020f 	and.w	r2, r3, #15
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	00db      	lsls	r3, r3, #3
 8003fd4:	4413      	add	r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	4413      	add	r3, r2
 8003fe0:	3304      	adds	r3, #4
 8003fe2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ff0:	78fb      	ldrb	r3, [r7, #3]
 8003ff2:	f003 030f 	and.w	r3, r3, #15
 8003ff6:	b2da      	uxtb	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004002:	2b01      	cmp	r3, #1
 8004004:	d101      	bne.n	800400a <HAL_PCD_EP_ClrStall+0x86>
 8004006:	2302      	movs	r3, #2
 8004008:	e00e      	b.n	8004028 <HAL_PCD_EP_ClrStall+0xa4>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68f9      	ldr	r1, [r7, #12]
 8004018:	4618      	mov	r0, r3
 800401a:	f002 f8f3 	bl	8006204 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3710      	adds	r7, #16
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	460b      	mov	r3, r1
 800403a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800403c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004040:	2b00      	cmp	r3, #0
 8004042:	da0c      	bge.n	800405e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004044:	78fb      	ldrb	r3, [r7, #3]
 8004046:	f003 020f 	and.w	r2, r3, #15
 800404a:	4613      	mov	r3, r2
 800404c:	00db      	lsls	r3, r3, #3
 800404e:	4413      	add	r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	3338      	adds	r3, #56	@ 0x38
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	4413      	add	r3, r2
 8004058:	3304      	adds	r3, #4
 800405a:	60fb      	str	r3, [r7, #12]
 800405c:	e00c      	b.n	8004078 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800405e:	78fb      	ldrb	r3, [r7, #3]
 8004060:	f003 020f 	and.w	r2, r3, #15
 8004064:	4613      	mov	r3, r2
 8004066:	00db      	lsls	r3, r3, #3
 8004068:	4413      	add	r3, r2
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	4413      	add	r3, r2
 8004074:	3304      	adds	r3, #4
 8004076:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68f9      	ldr	r1, [r7, #12]
 800407e:	4618      	mov	r0, r3
 8004080:	f001 ff12 	bl	8005ea8 <USB_EPStopXfer>
 8004084:	4603      	mov	r3, r0
 8004086:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004088:	7afb      	ldrb	r3, [r7, #11]
}
 800408a:	4618      	mov	r0, r3
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004092:	b580      	push	{r7, lr}
 8004094:	b08a      	sub	sp, #40	@ 0x28
 8004096:	af02      	add	r7, sp, #8
 8004098:	6078      	str	r0, [r7, #4]
 800409a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	4613      	mov	r3, r2
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	4413      	add	r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	3338      	adds	r3, #56	@ 0x38
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	4413      	add	r3, r2
 80040b6:	3304      	adds	r3, #4
 80040b8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6a1a      	ldr	r2, [r3, #32]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d901      	bls.n	80040ca <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e06c      	b.n	80041a4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	699a      	ldr	r2, [r3, #24]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	69fa      	ldr	r2, [r7, #28]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d902      	bls.n	80040e6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	3303      	adds	r3, #3
 80040ea:	089b      	lsrs	r3, r3, #2
 80040ec:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80040ee:	e02b      	b.n	8004148 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	699a      	ldr	r2, [r3, #24]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6a1b      	ldr	r3, [r3, #32]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	69fa      	ldr	r2, [r7, #28]
 8004102:	429a      	cmp	r2, r3
 8004104:	d902      	bls.n	800410c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	3303      	adds	r3, #3
 8004110:	089b      	lsrs	r3, r3, #2
 8004112:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6919      	ldr	r1, [r3, #16]
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	b2da      	uxtb	r2, r3
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004124:	b2db      	uxtb	r3, r3
 8004126:	9300      	str	r3, [sp, #0]
 8004128:	4603      	mov	r3, r0
 800412a:	6978      	ldr	r0, [r7, #20]
 800412c:	f001 ff66 	bl	8005ffc <USB_WritePacket>

    ep->xfer_buff  += len;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	691a      	ldr	r2, [r3, #16]
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	441a      	add	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6a1a      	ldr	r2, [r3, #32]
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	441a      	add	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	015a      	lsls	r2, r3, #5
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	4413      	add	r3, r2
 8004150:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	429a      	cmp	r2, r3
 800415c:	d809      	bhi.n	8004172 <PCD_WriteEmptyTxFifo+0xe0>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6a1a      	ldr	r2, [r3, #32]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004166:	429a      	cmp	r2, r3
 8004168:	d203      	bcs.n	8004172 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1be      	bne.n	80040f0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	699a      	ldr	r2, [r3, #24]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	429a      	cmp	r2, r3
 800417c:	d811      	bhi.n	80041a2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	f003 030f 	and.w	r3, r3, #15
 8004184:	2201      	movs	r2, #1
 8004186:	fa02 f303 	lsl.w	r3, r2, r3
 800418a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004192:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	43db      	mvns	r3, r3
 8004198:	6939      	ldr	r1, [r7, #16]
 800419a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800419e:	4013      	ands	r3, r2
 80041a0:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80041a2:	2300      	movs	r3, #0
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3720      	adds	r7, #32
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b088      	sub	sp, #32
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	333c      	adds	r3, #60	@ 0x3c
 80041c4:	3304      	adds	r3, #4
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	015a      	lsls	r2, r3, #5
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	4413      	add	r3, r2
 80041d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d17b      	bne.n	80042da <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	f003 0308 	and.w	r3, r3, #8
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d015      	beq.n	8004218 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	4a61      	ldr	r2, [pc, #388]	@ (8004374 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	f240 80b9 	bls.w	8004368 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f000 80b3 	beq.w	8004368 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	015a      	lsls	r2, r3, #5
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	4413      	add	r3, r2
 800420a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800420e:	461a      	mov	r2, r3
 8004210:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004214:	6093      	str	r3, [r2, #8]
 8004216:	e0a7      	b.n	8004368 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	f003 0320 	and.w	r3, r3, #32
 800421e:	2b00      	cmp	r3, #0
 8004220:	d009      	beq.n	8004236 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	015a      	lsls	r2, r3, #5
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	4413      	add	r3, r2
 800422a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800422e:	461a      	mov	r2, r3
 8004230:	2320      	movs	r3, #32
 8004232:	6093      	str	r3, [r2, #8]
 8004234:	e098      	b.n	8004368 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800423c:	2b00      	cmp	r3, #0
 800423e:	f040 8093 	bne.w	8004368 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	4a4b      	ldr	r2, [pc, #300]	@ (8004374 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d90f      	bls.n	800426a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00a      	beq.n	800426a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	015a      	lsls	r2, r3, #5
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	4413      	add	r3, r2
 800425c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004260:	461a      	mov	r2, r3
 8004262:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004266:	6093      	str	r3, [r2, #8]
 8004268:	e07e      	b.n	8004368 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800426a:	683a      	ldr	r2, [r7, #0]
 800426c:	4613      	mov	r3, r2
 800426e:	00db      	lsls	r3, r3, #3
 8004270:	4413      	add	r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	4413      	add	r3, r2
 800427c:	3304      	adds	r3, #4
 800427e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	69da      	ldr	r2, [r3, #28]
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	0159      	lsls	r1, r3, #5
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	440b      	add	r3, r1
 800428c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004296:	1ad2      	subs	r2, r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d114      	bne.n	80042cc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d109      	bne.n	80042be <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6818      	ldr	r0, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80042b4:	461a      	mov	r2, r3
 80042b6:	2101      	movs	r1, #1
 80042b8:	f002 f936 	bl	8006528 <USB_EP0_OutStart>
 80042bc:	e006      	b.n	80042cc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	691a      	ldr	r2, [r3, #16]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	441a      	add	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	4619      	mov	r1, r3
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f004 fbfa 	bl	8008acc <HAL_PCD_DataOutStageCallback>
 80042d8:	e046      	b.n	8004368 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	4a26      	ldr	r2, [pc, #152]	@ (8004378 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d124      	bne.n	800432c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00a      	beq.n	8004302 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	015a      	lsls	r2, r3, #5
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	4413      	add	r3, r2
 80042f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042f8:	461a      	mov	r2, r3
 80042fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042fe:	6093      	str	r3, [r2, #8]
 8004300:	e032      	b.n	8004368 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	f003 0320 	and.w	r3, r3, #32
 8004308:	2b00      	cmp	r3, #0
 800430a:	d008      	beq.n	800431e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	015a      	lsls	r2, r3, #5
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	4413      	add	r3, r2
 8004314:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004318:	461a      	mov	r2, r3
 800431a:	2320      	movs	r3, #32
 800431c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	b2db      	uxtb	r3, r3
 8004322:	4619      	mov	r1, r3
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f004 fbd1 	bl	8008acc <HAL_PCD_DataOutStageCallback>
 800432a:	e01d      	b.n	8004368 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d114      	bne.n	800435c <PCD_EP_OutXfrComplete_int+0x1b0>
 8004332:	6879      	ldr	r1, [r7, #4]
 8004334:	683a      	ldr	r2, [r7, #0]
 8004336:	4613      	mov	r3, r2
 8004338:	00db      	lsls	r3, r3, #3
 800433a:	4413      	add	r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	440b      	add	r3, r1
 8004340:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d108      	bne.n	800435c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6818      	ldr	r0, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004354:	461a      	mov	r2, r3
 8004356:	2100      	movs	r1, #0
 8004358:	f002 f8e6 	bl	8006528 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	b2db      	uxtb	r3, r3
 8004360:	4619      	mov	r1, r3
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f004 fbb2 	bl	8008acc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3720      	adds	r7, #32
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	4f54300a 	.word	0x4f54300a
 8004378:	4f54310a 	.word	0x4f54310a

0800437c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	333c      	adds	r3, #60	@ 0x3c
 8004394:	3304      	adds	r3, #4
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	015a      	lsls	r2, r3, #5
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	4413      	add	r3, r2
 80043a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	4a15      	ldr	r2, [pc, #84]	@ (8004404 <PCD_EP_OutSetupPacket_int+0x88>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d90e      	bls.n	80043d0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d009      	beq.n	80043d0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	015a      	lsls	r2, r3, #5
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	4413      	add	r3, r2
 80043c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043c8:	461a      	mov	r2, r3
 80043ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043ce:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f004 fb69 	bl	8008aa8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	4a0a      	ldr	r2, [pc, #40]	@ (8004404 <PCD_EP_OutSetupPacket_int+0x88>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d90c      	bls.n	80043f8 <PCD_EP_OutSetupPacket_int+0x7c>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d108      	bne.n	80043f8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6818      	ldr	r0, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80043f0:	461a      	mov	r2, r3
 80043f2:	2101      	movs	r1, #1
 80043f4:	f002 f898 	bl	8006528 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3718      	adds	r7, #24
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	4f54300a 	.word	0x4f54300a

08004408 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	460b      	mov	r3, r1
 8004412:	70fb      	strb	r3, [r7, #3]
 8004414:	4613      	mov	r3, r2
 8004416:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800441e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004420:	78fb      	ldrb	r3, [r7, #3]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d107      	bne.n	8004436 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004426:	883b      	ldrh	r3, [r7, #0]
 8004428:	0419      	lsls	r1, r3, #16
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68ba      	ldr	r2, [r7, #8]
 8004430:	430a      	orrs	r2, r1
 8004432:	629a      	str	r2, [r3, #40]	@ 0x28
 8004434:	e028      	b.n	8004488 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800443c:	0c1b      	lsrs	r3, r3, #16
 800443e:	68ba      	ldr	r2, [r7, #8]
 8004440:	4413      	add	r3, r2
 8004442:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004444:	2300      	movs	r3, #0
 8004446:	73fb      	strb	r3, [r7, #15]
 8004448:	e00d      	b.n	8004466 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	7bfb      	ldrb	r3, [r7, #15]
 8004450:	3340      	adds	r3, #64	@ 0x40
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	4413      	add	r3, r2
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	0c1b      	lsrs	r3, r3, #16
 800445a:	68ba      	ldr	r2, [r7, #8]
 800445c:	4413      	add	r3, r2
 800445e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004460:	7bfb      	ldrb	r3, [r7, #15]
 8004462:	3301      	adds	r3, #1
 8004464:	73fb      	strb	r3, [r7, #15]
 8004466:	7bfa      	ldrb	r2, [r7, #15]
 8004468:	78fb      	ldrb	r3, [r7, #3]
 800446a:	3b01      	subs	r3, #1
 800446c:	429a      	cmp	r2, r3
 800446e:	d3ec      	bcc.n	800444a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004470:	883b      	ldrh	r3, [r7, #0]
 8004472:	0418      	lsls	r0, r3, #16
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6819      	ldr	r1, [r3, #0]
 8004478:	78fb      	ldrb	r3, [r7, #3]
 800447a:	3b01      	subs	r3, #1
 800447c:	68ba      	ldr	r2, [r7, #8]
 800447e:	4302      	orrs	r2, r0
 8004480:	3340      	adds	r3, #64	@ 0x40
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	440b      	add	r3, r1
 8004486:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3714      	adds	r7, #20
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr

08004496 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004496:	b480      	push	{r7}
 8004498:	b083      	sub	sp, #12
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
 800449e:	460b      	mov	r3, r1
 80044a0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	887a      	ldrh	r2, [r7, #2]
 80044a8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	460b      	mov	r3, r1
 80044c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80044c4:	bf00      	nop
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b086      	sub	sp, #24
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e267      	b.n	80049b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d075      	beq.n	80045da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044ee:	4b88      	ldr	r3, [pc, #544]	@ (8004710 <HAL_RCC_OscConfig+0x240>)
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f003 030c 	and.w	r3, r3, #12
 80044f6:	2b04      	cmp	r3, #4
 80044f8:	d00c      	beq.n	8004514 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044fa:	4b85      	ldr	r3, [pc, #532]	@ (8004710 <HAL_RCC_OscConfig+0x240>)
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004502:	2b08      	cmp	r3, #8
 8004504:	d112      	bne.n	800452c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004506:	4b82      	ldr	r3, [pc, #520]	@ (8004710 <HAL_RCC_OscConfig+0x240>)
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800450e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004512:	d10b      	bne.n	800452c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004514:	4b7e      	ldr	r3, [pc, #504]	@ (8004710 <HAL_RCC_OscConfig+0x240>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d05b      	beq.n	80045d8 <HAL_RCC_OscConfig+0x108>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d157      	bne.n	80045d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e242      	b.n	80049b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004534:	d106      	bne.n	8004544 <HAL_RCC_OscConfig+0x74>
 8004536:	4b76      	ldr	r3, [pc, #472]	@ (8004710 <HAL_RCC_OscConfig+0x240>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a75      	ldr	r2, [pc, #468]	@ (8004710 <HAL_RCC_OscConfig+0x240>)
 800453c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004540:	6013      	str	r3, [r2, #0]
 8004542:	e01d      	b.n	8004580 <HAL_RCC_OscConfig+0xb0>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800454c:	d10c      	bne.n	8004568 <HAL_RCC_OscConfig+0x98>
 800454e:	4b70      	ldr	r3, [pc, #448]	@ (8004710 <HAL_RCC_OscConfig+0x240>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a6f      	ldr	r2, [pc, #444]	@ (8004710 <HAL_RCC_OscConfig+0x240>)
 8004554:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004558:	6013      	str	r3, [r2, #0]
 800455a:	4b6d      	ldr	r3, [pc, #436]	@ (8004710 <HAL_RCC_OscConfig+0x240>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a6c      	ldr	r2, [pc, #432]	@ (8004710 <HAL_RCC_OscConfig+0x240>)
 8004560:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004564:	6013      	str	r3, [r2, #0]
 8004566:	e00b      	b.n	8004580 <HAL_RCC_OscConfig+0xb0>
 8004568:	4b69      	ldr	r3, [pc, #420]	@ (8004710 <HAL_RCC_OscConfig+0x240>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a68      	ldr	r2, [pc, #416]	@ (8004710 <HAL_RCC_OscConfig+0x240>)
 800456e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004572:	6013      	str	r3, [r2, #0]
 8004574:	4b66      	ldr	r3, [pc, #408]	@ (8004710 <HAL_RCC_OscConfig+0x240>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a65      	ldr	r2, [pc, #404]	@ (8004710 <HAL_RCC_OscConfig+0x240>)
 800457a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800457e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d013      	beq.n	80045b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004588:	f7fd fbcc 	bl	8001d24 <HAL_GetTick>
 800458c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800458e:	e008      	b.n	80045a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004590:	f7fd fbc8 	bl	8001d24 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b64      	cmp	r3, #100	@ 0x64
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e207      	b.n	80049b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045a2:	4b5b      	ldr	r3, [pc, #364]	@ (8004710 <HAL_RCC_OscConfig+0x240>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d0f0      	beq.n	8004590 <HAL_RCC_OscConfig+0xc0>
 80045ae:	e014      	b.n	80045da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045b0:	f7fd fbb8 	bl	8001d24 <HAL_GetTick>
 80045b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045b6:	e008      	b.n	80045ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045b8:	f7fd fbb4 	bl	8001d24 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b64      	cmp	r3, #100	@ 0x64
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e1f3      	b.n	80049b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ca:	4b51      	ldr	r3, [pc, #324]	@ (8004710 <HAL_RCC_OscConfig+0x240>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1f0      	bne.n	80045b8 <HAL_RCC_OscConfig+0xe8>
 80045d6:	e000      	b.n	80045da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d063      	beq.n	80046ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045e6:	4b4a      	ldr	r3, [pc, #296]	@ (8004710 <HAL_RCC_OscConfig+0x240>)
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f003 030c 	and.w	r3, r3, #12
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00b      	beq.n	800460a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045f2:	4b47      	ldr	r3, [pc, #284]	@ (8004710 <HAL_RCC_OscConfig+0x240>)
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045fa:	2b08      	cmp	r3, #8
 80045fc:	d11c      	bne.n	8004638 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045fe:	4b44      	ldr	r3, [pc, #272]	@ (8004710 <HAL_RCC_OscConfig+0x240>)
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d116      	bne.n	8004638 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800460a:	4b41      	ldr	r3, [pc, #260]	@ (8004710 <HAL_RCC_OscConfig+0x240>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d005      	beq.n	8004622 <HAL_RCC_OscConfig+0x152>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d001      	beq.n	8004622 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e1c7      	b.n	80049b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004622:	4b3b      	ldr	r3, [pc, #236]	@ (8004710 <HAL_RCC_OscConfig+0x240>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	00db      	lsls	r3, r3, #3
 8004630:	4937      	ldr	r1, [pc, #220]	@ (8004710 <HAL_RCC_OscConfig+0x240>)
 8004632:	4313      	orrs	r3, r2
 8004634:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004636:	e03a      	b.n	80046ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d020      	beq.n	8004682 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004640:	4b34      	ldr	r3, [pc, #208]	@ (8004714 <HAL_RCC_OscConfig+0x244>)
 8004642:	2201      	movs	r2, #1
 8004644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004646:	f7fd fb6d 	bl	8001d24 <HAL_GetTick>
 800464a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800464c:	e008      	b.n	8004660 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800464e:	f7fd fb69 	bl	8001d24 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d901      	bls.n	8004660 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e1a8      	b.n	80049b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004660:	4b2b      	ldr	r3, [pc, #172]	@ (8004710 <HAL_RCC_OscConfig+0x240>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0302 	and.w	r3, r3, #2
 8004668:	2b00      	cmp	r3, #0
 800466a:	d0f0      	beq.n	800464e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800466c:	4b28      	ldr	r3, [pc, #160]	@ (8004710 <HAL_RCC_OscConfig+0x240>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	00db      	lsls	r3, r3, #3
 800467a:	4925      	ldr	r1, [pc, #148]	@ (8004710 <HAL_RCC_OscConfig+0x240>)
 800467c:	4313      	orrs	r3, r2
 800467e:	600b      	str	r3, [r1, #0]
 8004680:	e015      	b.n	80046ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004682:	4b24      	ldr	r3, [pc, #144]	@ (8004714 <HAL_RCC_OscConfig+0x244>)
 8004684:	2200      	movs	r2, #0
 8004686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004688:	f7fd fb4c 	bl	8001d24 <HAL_GetTick>
 800468c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800468e:	e008      	b.n	80046a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004690:	f7fd fb48 	bl	8001d24 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	2b02      	cmp	r3, #2
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e187      	b.n	80049b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046a2:	4b1b      	ldr	r3, [pc, #108]	@ (8004710 <HAL_RCC_OscConfig+0x240>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d1f0      	bne.n	8004690 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0308 	and.w	r3, r3, #8
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d036      	beq.n	8004728 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d016      	beq.n	80046f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046c2:	4b15      	ldr	r3, [pc, #84]	@ (8004718 <HAL_RCC_OscConfig+0x248>)
 80046c4:	2201      	movs	r2, #1
 80046c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c8:	f7fd fb2c 	bl	8001d24 <HAL_GetTick>
 80046cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046ce:	e008      	b.n	80046e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046d0:	f7fd fb28 	bl	8001d24 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e167      	b.n	80049b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004710 <HAL_RCC_OscConfig+0x240>)
 80046e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046e6:	f003 0302 	and.w	r3, r3, #2
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d0f0      	beq.n	80046d0 <HAL_RCC_OscConfig+0x200>
 80046ee:	e01b      	b.n	8004728 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046f0:	4b09      	ldr	r3, [pc, #36]	@ (8004718 <HAL_RCC_OscConfig+0x248>)
 80046f2:	2200      	movs	r2, #0
 80046f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046f6:	f7fd fb15 	bl	8001d24 <HAL_GetTick>
 80046fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046fc:	e00e      	b.n	800471c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046fe:	f7fd fb11 	bl	8001d24 <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	2b02      	cmp	r3, #2
 800470a:	d907      	bls.n	800471c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e150      	b.n	80049b2 <HAL_RCC_OscConfig+0x4e2>
 8004710:	40023800 	.word	0x40023800
 8004714:	42470000 	.word	0x42470000
 8004718:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800471c:	4b88      	ldr	r3, [pc, #544]	@ (8004940 <HAL_RCC_OscConfig+0x470>)
 800471e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004720:	f003 0302 	and.w	r3, r3, #2
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1ea      	bne.n	80046fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0304 	and.w	r3, r3, #4
 8004730:	2b00      	cmp	r3, #0
 8004732:	f000 8097 	beq.w	8004864 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004736:	2300      	movs	r3, #0
 8004738:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800473a:	4b81      	ldr	r3, [pc, #516]	@ (8004940 <HAL_RCC_OscConfig+0x470>)
 800473c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800473e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d10f      	bne.n	8004766 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004746:	2300      	movs	r3, #0
 8004748:	60bb      	str	r3, [r7, #8]
 800474a:	4b7d      	ldr	r3, [pc, #500]	@ (8004940 <HAL_RCC_OscConfig+0x470>)
 800474c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474e:	4a7c      	ldr	r2, [pc, #496]	@ (8004940 <HAL_RCC_OscConfig+0x470>)
 8004750:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004754:	6413      	str	r3, [r2, #64]	@ 0x40
 8004756:	4b7a      	ldr	r3, [pc, #488]	@ (8004940 <HAL_RCC_OscConfig+0x470>)
 8004758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800475a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800475e:	60bb      	str	r3, [r7, #8]
 8004760:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004762:	2301      	movs	r3, #1
 8004764:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004766:	4b77      	ldr	r3, [pc, #476]	@ (8004944 <HAL_RCC_OscConfig+0x474>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800476e:	2b00      	cmp	r3, #0
 8004770:	d118      	bne.n	80047a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004772:	4b74      	ldr	r3, [pc, #464]	@ (8004944 <HAL_RCC_OscConfig+0x474>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a73      	ldr	r2, [pc, #460]	@ (8004944 <HAL_RCC_OscConfig+0x474>)
 8004778:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800477c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800477e:	f7fd fad1 	bl	8001d24 <HAL_GetTick>
 8004782:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004784:	e008      	b.n	8004798 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004786:	f7fd facd 	bl	8001d24 <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	2b02      	cmp	r3, #2
 8004792:	d901      	bls.n	8004798 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e10c      	b.n	80049b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004798:	4b6a      	ldr	r3, [pc, #424]	@ (8004944 <HAL_RCC_OscConfig+0x474>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d0f0      	beq.n	8004786 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d106      	bne.n	80047ba <HAL_RCC_OscConfig+0x2ea>
 80047ac:	4b64      	ldr	r3, [pc, #400]	@ (8004940 <HAL_RCC_OscConfig+0x470>)
 80047ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047b0:	4a63      	ldr	r2, [pc, #396]	@ (8004940 <HAL_RCC_OscConfig+0x470>)
 80047b2:	f043 0301 	orr.w	r3, r3, #1
 80047b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80047b8:	e01c      	b.n	80047f4 <HAL_RCC_OscConfig+0x324>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	2b05      	cmp	r3, #5
 80047c0:	d10c      	bne.n	80047dc <HAL_RCC_OscConfig+0x30c>
 80047c2:	4b5f      	ldr	r3, [pc, #380]	@ (8004940 <HAL_RCC_OscConfig+0x470>)
 80047c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047c6:	4a5e      	ldr	r2, [pc, #376]	@ (8004940 <HAL_RCC_OscConfig+0x470>)
 80047c8:	f043 0304 	orr.w	r3, r3, #4
 80047cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80047ce:	4b5c      	ldr	r3, [pc, #368]	@ (8004940 <HAL_RCC_OscConfig+0x470>)
 80047d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047d2:	4a5b      	ldr	r2, [pc, #364]	@ (8004940 <HAL_RCC_OscConfig+0x470>)
 80047d4:	f043 0301 	orr.w	r3, r3, #1
 80047d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80047da:	e00b      	b.n	80047f4 <HAL_RCC_OscConfig+0x324>
 80047dc:	4b58      	ldr	r3, [pc, #352]	@ (8004940 <HAL_RCC_OscConfig+0x470>)
 80047de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047e0:	4a57      	ldr	r2, [pc, #348]	@ (8004940 <HAL_RCC_OscConfig+0x470>)
 80047e2:	f023 0301 	bic.w	r3, r3, #1
 80047e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80047e8:	4b55      	ldr	r3, [pc, #340]	@ (8004940 <HAL_RCC_OscConfig+0x470>)
 80047ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ec:	4a54      	ldr	r2, [pc, #336]	@ (8004940 <HAL_RCC_OscConfig+0x470>)
 80047ee:	f023 0304 	bic.w	r3, r3, #4
 80047f2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d015      	beq.n	8004828 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047fc:	f7fd fa92 	bl	8001d24 <HAL_GetTick>
 8004800:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004802:	e00a      	b.n	800481a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004804:	f7fd fa8e 	bl	8001d24 <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004812:	4293      	cmp	r3, r2
 8004814:	d901      	bls.n	800481a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e0cb      	b.n	80049b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800481a:	4b49      	ldr	r3, [pc, #292]	@ (8004940 <HAL_RCC_OscConfig+0x470>)
 800481c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800481e:	f003 0302 	and.w	r3, r3, #2
 8004822:	2b00      	cmp	r3, #0
 8004824:	d0ee      	beq.n	8004804 <HAL_RCC_OscConfig+0x334>
 8004826:	e014      	b.n	8004852 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004828:	f7fd fa7c 	bl	8001d24 <HAL_GetTick>
 800482c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800482e:	e00a      	b.n	8004846 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004830:	f7fd fa78 	bl	8001d24 <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800483e:	4293      	cmp	r3, r2
 8004840:	d901      	bls.n	8004846 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e0b5      	b.n	80049b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004846:	4b3e      	ldr	r3, [pc, #248]	@ (8004940 <HAL_RCC_OscConfig+0x470>)
 8004848:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800484a:	f003 0302 	and.w	r3, r3, #2
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1ee      	bne.n	8004830 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004852:	7dfb      	ldrb	r3, [r7, #23]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d105      	bne.n	8004864 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004858:	4b39      	ldr	r3, [pc, #228]	@ (8004940 <HAL_RCC_OscConfig+0x470>)
 800485a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800485c:	4a38      	ldr	r2, [pc, #224]	@ (8004940 <HAL_RCC_OscConfig+0x470>)
 800485e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004862:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	2b00      	cmp	r3, #0
 800486a:	f000 80a1 	beq.w	80049b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800486e:	4b34      	ldr	r3, [pc, #208]	@ (8004940 <HAL_RCC_OscConfig+0x470>)
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f003 030c 	and.w	r3, r3, #12
 8004876:	2b08      	cmp	r3, #8
 8004878:	d05c      	beq.n	8004934 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	2b02      	cmp	r3, #2
 8004880:	d141      	bne.n	8004906 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004882:	4b31      	ldr	r3, [pc, #196]	@ (8004948 <HAL_RCC_OscConfig+0x478>)
 8004884:	2200      	movs	r2, #0
 8004886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004888:	f7fd fa4c 	bl	8001d24 <HAL_GetTick>
 800488c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800488e:	e008      	b.n	80048a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004890:	f7fd fa48 	bl	8001d24 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	2b02      	cmp	r3, #2
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e087      	b.n	80049b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048a2:	4b27      	ldr	r3, [pc, #156]	@ (8004940 <HAL_RCC_OscConfig+0x470>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1f0      	bne.n	8004890 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	69da      	ldr	r2, [r3, #28]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	431a      	orrs	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048bc:	019b      	lsls	r3, r3, #6
 80048be:	431a      	orrs	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c4:	085b      	lsrs	r3, r3, #1
 80048c6:	3b01      	subs	r3, #1
 80048c8:	041b      	lsls	r3, r3, #16
 80048ca:	431a      	orrs	r2, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048d0:	061b      	lsls	r3, r3, #24
 80048d2:	491b      	ldr	r1, [pc, #108]	@ (8004940 <HAL_RCC_OscConfig+0x470>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048d8:	4b1b      	ldr	r3, [pc, #108]	@ (8004948 <HAL_RCC_OscConfig+0x478>)
 80048da:	2201      	movs	r2, #1
 80048dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048de:	f7fd fa21 	bl	8001d24 <HAL_GetTick>
 80048e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048e4:	e008      	b.n	80048f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048e6:	f7fd fa1d 	bl	8001d24 <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d901      	bls.n	80048f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e05c      	b.n	80049b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048f8:	4b11      	ldr	r3, [pc, #68]	@ (8004940 <HAL_RCC_OscConfig+0x470>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d0f0      	beq.n	80048e6 <HAL_RCC_OscConfig+0x416>
 8004904:	e054      	b.n	80049b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004906:	4b10      	ldr	r3, [pc, #64]	@ (8004948 <HAL_RCC_OscConfig+0x478>)
 8004908:	2200      	movs	r2, #0
 800490a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800490c:	f7fd fa0a 	bl	8001d24 <HAL_GetTick>
 8004910:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004912:	e008      	b.n	8004926 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004914:	f7fd fa06 	bl	8001d24 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	2b02      	cmp	r3, #2
 8004920:	d901      	bls.n	8004926 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e045      	b.n	80049b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004926:	4b06      	ldr	r3, [pc, #24]	@ (8004940 <HAL_RCC_OscConfig+0x470>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1f0      	bne.n	8004914 <HAL_RCC_OscConfig+0x444>
 8004932:	e03d      	b.n	80049b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d107      	bne.n	800494c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e038      	b.n	80049b2 <HAL_RCC_OscConfig+0x4e2>
 8004940:	40023800 	.word	0x40023800
 8004944:	40007000 	.word	0x40007000
 8004948:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800494c:	4b1b      	ldr	r3, [pc, #108]	@ (80049bc <HAL_RCC_OscConfig+0x4ec>)
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d028      	beq.n	80049ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004964:	429a      	cmp	r2, r3
 8004966:	d121      	bne.n	80049ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004972:	429a      	cmp	r2, r3
 8004974:	d11a      	bne.n	80049ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800497c:	4013      	ands	r3, r2
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004982:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004984:	4293      	cmp	r3, r2
 8004986:	d111      	bne.n	80049ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004992:	085b      	lsrs	r3, r3, #1
 8004994:	3b01      	subs	r3, #1
 8004996:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004998:	429a      	cmp	r2, r3
 800499a:	d107      	bne.n	80049ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d001      	beq.n	80049b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e000      	b.n	80049b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3718      	adds	r7, #24
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	40023800 	.word	0x40023800

080049c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d101      	bne.n	80049d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e0cc      	b.n	8004b6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049d4:	4b68      	ldr	r3, [pc, #416]	@ (8004b78 <HAL_RCC_ClockConfig+0x1b8>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0307 	and.w	r3, r3, #7
 80049dc:	683a      	ldr	r2, [r7, #0]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d90c      	bls.n	80049fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049e2:	4b65      	ldr	r3, [pc, #404]	@ (8004b78 <HAL_RCC_ClockConfig+0x1b8>)
 80049e4:	683a      	ldr	r2, [r7, #0]
 80049e6:	b2d2      	uxtb	r2, r2
 80049e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ea:	4b63      	ldr	r3, [pc, #396]	@ (8004b78 <HAL_RCC_ClockConfig+0x1b8>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0307 	and.w	r3, r3, #7
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d001      	beq.n	80049fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e0b8      	b.n	8004b6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0302 	and.w	r3, r3, #2
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d020      	beq.n	8004a4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0304 	and.w	r3, r3, #4
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d005      	beq.n	8004a20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a14:	4b59      	ldr	r3, [pc, #356]	@ (8004b7c <HAL_RCC_ClockConfig+0x1bc>)
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	4a58      	ldr	r2, [pc, #352]	@ (8004b7c <HAL_RCC_ClockConfig+0x1bc>)
 8004a1a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004a1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0308 	and.w	r3, r3, #8
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d005      	beq.n	8004a38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a2c:	4b53      	ldr	r3, [pc, #332]	@ (8004b7c <HAL_RCC_ClockConfig+0x1bc>)
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	4a52      	ldr	r2, [pc, #328]	@ (8004b7c <HAL_RCC_ClockConfig+0x1bc>)
 8004a32:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004a36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a38:	4b50      	ldr	r3, [pc, #320]	@ (8004b7c <HAL_RCC_ClockConfig+0x1bc>)
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	494d      	ldr	r1, [pc, #308]	@ (8004b7c <HAL_RCC_ClockConfig+0x1bc>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0301 	and.w	r3, r3, #1
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d044      	beq.n	8004ae0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d107      	bne.n	8004a6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a5e:	4b47      	ldr	r3, [pc, #284]	@ (8004b7c <HAL_RCC_ClockConfig+0x1bc>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d119      	bne.n	8004a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e07f      	b.n	8004b6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d003      	beq.n	8004a7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a7a:	2b03      	cmp	r3, #3
 8004a7c:	d107      	bne.n	8004a8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a7e:	4b3f      	ldr	r3, [pc, #252]	@ (8004b7c <HAL_RCC_ClockConfig+0x1bc>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d109      	bne.n	8004a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e06f      	b.n	8004b6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a8e:	4b3b      	ldr	r3, [pc, #236]	@ (8004b7c <HAL_RCC_ClockConfig+0x1bc>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0302 	and.w	r3, r3, #2
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e067      	b.n	8004b6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a9e:	4b37      	ldr	r3, [pc, #220]	@ (8004b7c <HAL_RCC_ClockConfig+0x1bc>)
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f023 0203 	bic.w	r2, r3, #3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	4934      	ldr	r1, [pc, #208]	@ (8004b7c <HAL_RCC_ClockConfig+0x1bc>)
 8004aac:	4313      	orrs	r3, r2
 8004aae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ab0:	f7fd f938 	bl	8001d24 <HAL_GetTick>
 8004ab4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ab6:	e00a      	b.n	8004ace <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ab8:	f7fd f934 	bl	8001d24 <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e04f      	b.n	8004b6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ace:	4b2b      	ldr	r3, [pc, #172]	@ (8004b7c <HAL_RCC_ClockConfig+0x1bc>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f003 020c 	and.w	r2, r3, #12
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d1eb      	bne.n	8004ab8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ae0:	4b25      	ldr	r3, [pc, #148]	@ (8004b78 <HAL_RCC_ClockConfig+0x1b8>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0307 	and.w	r3, r3, #7
 8004ae8:	683a      	ldr	r2, [r7, #0]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d20c      	bcs.n	8004b08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aee:	4b22      	ldr	r3, [pc, #136]	@ (8004b78 <HAL_RCC_ClockConfig+0x1b8>)
 8004af0:	683a      	ldr	r2, [r7, #0]
 8004af2:	b2d2      	uxtb	r2, r2
 8004af4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004af6:	4b20      	ldr	r3, [pc, #128]	@ (8004b78 <HAL_RCC_ClockConfig+0x1b8>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0307 	and.w	r3, r3, #7
 8004afe:	683a      	ldr	r2, [r7, #0]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d001      	beq.n	8004b08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e032      	b.n	8004b6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0304 	and.w	r3, r3, #4
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d008      	beq.n	8004b26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b14:	4b19      	ldr	r3, [pc, #100]	@ (8004b7c <HAL_RCC_ClockConfig+0x1bc>)
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	4916      	ldr	r1, [pc, #88]	@ (8004b7c <HAL_RCC_ClockConfig+0x1bc>)
 8004b22:	4313      	orrs	r3, r2
 8004b24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0308 	and.w	r3, r3, #8
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d009      	beq.n	8004b46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b32:	4b12      	ldr	r3, [pc, #72]	@ (8004b7c <HAL_RCC_ClockConfig+0x1bc>)
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	00db      	lsls	r3, r3, #3
 8004b40:	490e      	ldr	r1, [pc, #56]	@ (8004b7c <HAL_RCC_ClockConfig+0x1bc>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b46:	f000 f821 	bl	8004b8c <HAL_RCC_GetSysClockFreq>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b7c <HAL_RCC_ClockConfig+0x1bc>)
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	091b      	lsrs	r3, r3, #4
 8004b52:	f003 030f 	and.w	r3, r3, #15
 8004b56:	490a      	ldr	r1, [pc, #40]	@ (8004b80 <HAL_RCC_ClockConfig+0x1c0>)
 8004b58:	5ccb      	ldrb	r3, [r1, r3]
 8004b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b5e:	4a09      	ldr	r2, [pc, #36]	@ (8004b84 <HAL_RCC_ClockConfig+0x1c4>)
 8004b60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b62:	4b09      	ldr	r3, [pc, #36]	@ (8004b88 <HAL_RCC_ClockConfig+0x1c8>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7fd f898 	bl	8001c9c <HAL_InitTick>

  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	40023c00 	.word	0x40023c00
 8004b7c:	40023800 	.word	0x40023800
 8004b80:	08009a8c 	.word	0x08009a8c
 8004b84:	20000000 	.word	0x20000000
 8004b88:	20000004 	.word	0x20000004

08004b8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b90:	b094      	sub	sp, #80	@ 0x50
 8004b92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b94:	2300      	movs	r3, #0
 8004b96:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b98:	2300      	movs	r3, #0
 8004b9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ba4:	4b79      	ldr	r3, [pc, #484]	@ (8004d8c <HAL_RCC_GetSysClockFreq+0x200>)
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f003 030c 	and.w	r3, r3, #12
 8004bac:	2b08      	cmp	r3, #8
 8004bae:	d00d      	beq.n	8004bcc <HAL_RCC_GetSysClockFreq+0x40>
 8004bb0:	2b08      	cmp	r3, #8
 8004bb2:	f200 80e1 	bhi.w	8004d78 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d002      	beq.n	8004bc0 <HAL_RCC_GetSysClockFreq+0x34>
 8004bba:	2b04      	cmp	r3, #4
 8004bbc:	d003      	beq.n	8004bc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004bbe:	e0db      	b.n	8004d78 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bc0:	4b73      	ldr	r3, [pc, #460]	@ (8004d90 <HAL_RCC_GetSysClockFreq+0x204>)
 8004bc2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004bc4:	e0db      	b.n	8004d7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bc6:	4b73      	ldr	r3, [pc, #460]	@ (8004d94 <HAL_RCC_GetSysClockFreq+0x208>)
 8004bc8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004bca:	e0d8      	b.n	8004d7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bcc:	4b6f      	ldr	r3, [pc, #444]	@ (8004d8c <HAL_RCC_GetSysClockFreq+0x200>)
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004bd4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bd6:	4b6d      	ldr	r3, [pc, #436]	@ (8004d8c <HAL_RCC_GetSysClockFreq+0x200>)
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d063      	beq.n	8004caa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004be2:	4b6a      	ldr	r3, [pc, #424]	@ (8004d8c <HAL_RCC_GetSysClockFreq+0x200>)
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	099b      	lsrs	r3, r3, #6
 8004be8:	2200      	movs	r2, #0
 8004bea:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004bec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bf4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bfa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004bfe:	4622      	mov	r2, r4
 8004c00:	462b      	mov	r3, r5
 8004c02:	f04f 0000 	mov.w	r0, #0
 8004c06:	f04f 0100 	mov.w	r1, #0
 8004c0a:	0159      	lsls	r1, r3, #5
 8004c0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c10:	0150      	lsls	r0, r2, #5
 8004c12:	4602      	mov	r2, r0
 8004c14:	460b      	mov	r3, r1
 8004c16:	4621      	mov	r1, r4
 8004c18:	1a51      	subs	r1, r2, r1
 8004c1a:	6139      	str	r1, [r7, #16]
 8004c1c:	4629      	mov	r1, r5
 8004c1e:	eb63 0301 	sbc.w	r3, r3, r1
 8004c22:	617b      	str	r3, [r7, #20]
 8004c24:	f04f 0200 	mov.w	r2, #0
 8004c28:	f04f 0300 	mov.w	r3, #0
 8004c2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c30:	4659      	mov	r1, fp
 8004c32:	018b      	lsls	r3, r1, #6
 8004c34:	4651      	mov	r1, sl
 8004c36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c3a:	4651      	mov	r1, sl
 8004c3c:	018a      	lsls	r2, r1, #6
 8004c3e:	4651      	mov	r1, sl
 8004c40:	ebb2 0801 	subs.w	r8, r2, r1
 8004c44:	4659      	mov	r1, fp
 8004c46:	eb63 0901 	sbc.w	r9, r3, r1
 8004c4a:	f04f 0200 	mov.w	r2, #0
 8004c4e:	f04f 0300 	mov.w	r3, #0
 8004c52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c5e:	4690      	mov	r8, r2
 8004c60:	4699      	mov	r9, r3
 8004c62:	4623      	mov	r3, r4
 8004c64:	eb18 0303 	adds.w	r3, r8, r3
 8004c68:	60bb      	str	r3, [r7, #8]
 8004c6a:	462b      	mov	r3, r5
 8004c6c:	eb49 0303 	adc.w	r3, r9, r3
 8004c70:	60fb      	str	r3, [r7, #12]
 8004c72:	f04f 0200 	mov.w	r2, #0
 8004c76:	f04f 0300 	mov.w	r3, #0
 8004c7a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c7e:	4629      	mov	r1, r5
 8004c80:	024b      	lsls	r3, r1, #9
 8004c82:	4621      	mov	r1, r4
 8004c84:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c88:	4621      	mov	r1, r4
 8004c8a:	024a      	lsls	r2, r1, #9
 8004c8c:	4610      	mov	r0, r2
 8004c8e:	4619      	mov	r1, r3
 8004c90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c92:	2200      	movs	r2, #0
 8004c94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c9c:	f7fb faf0 	bl	8000280 <__aeabi_uldivmod>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ca8:	e058      	b.n	8004d5c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004caa:	4b38      	ldr	r3, [pc, #224]	@ (8004d8c <HAL_RCC_GetSysClockFreq+0x200>)
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	099b      	lsrs	r3, r3, #6
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	4611      	mov	r1, r2
 8004cb6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004cba:	623b      	str	r3, [r7, #32]
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cc0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004cc4:	4642      	mov	r2, r8
 8004cc6:	464b      	mov	r3, r9
 8004cc8:	f04f 0000 	mov.w	r0, #0
 8004ccc:	f04f 0100 	mov.w	r1, #0
 8004cd0:	0159      	lsls	r1, r3, #5
 8004cd2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cd6:	0150      	lsls	r0, r2, #5
 8004cd8:	4602      	mov	r2, r0
 8004cda:	460b      	mov	r3, r1
 8004cdc:	4641      	mov	r1, r8
 8004cde:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ce2:	4649      	mov	r1, r9
 8004ce4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ce8:	f04f 0200 	mov.w	r2, #0
 8004cec:	f04f 0300 	mov.w	r3, #0
 8004cf0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004cf4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004cf8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004cfc:	ebb2 040a 	subs.w	r4, r2, sl
 8004d00:	eb63 050b 	sbc.w	r5, r3, fp
 8004d04:	f04f 0200 	mov.w	r2, #0
 8004d08:	f04f 0300 	mov.w	r3, #0
 8004d0c:	00eb      	lsls	r3, r5, #3
 8004d0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d12:	00e2      	lsls	r2, r4, #3
 8004d14:	4614      	mov	r4, r2
 8004d16:	461d      	mov	r5, r3
 8004d18:	4643      	mov	r3, r8
 8004d1a:	18e3      	adds	r3, r4, r3
 8004d1c:	603b      	str	r3, [r7, #0]
 8004d1e:	464b      	mov	r3, r9
 8004d20:	eb45 0303 	adc.w	r3, r5, r3
 8004d24:	607b      	str	r3, [r7, #4]
 8004d26:	f04f 0200 	mov.w	r2, #0
 8004d2a:	f04f 0300 	mov.w	r3, #0
 8004d2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d32:	4629      	mov	r1, r5
 8004d34:	028b      	lsls	r3, r1, #10
 8004d36:	4621      	mov	r1, r4
 8004d38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d3c:	4621      	mov	r1, r4
 8004d3e:	028a      	lsls	r2, r1, #10
 8004d40:	4610      	mov	r0, r2
 8004d42:	4619      	mov	r1, r3
 8004d44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d46:	2200      	movs	r2, #0
 8004d48:	61bb      	str	r3, [r7, #24]
 8004d4a:	61fa      	str	r2, [r7, #28]
 8004d4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d50:	f7fb fa96 	bl	8000280 <__aeabi_uldivmod>
 8004d54:	4602      	mov	r2, r0
 8004d56:	460b      	mov	r3, r1
 8004d58:	4613      	mov	r3, r2
 8004d5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d8c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	0c1b      	lsrs	r3, r3, #16
 8004d62:	f003 0303 	and.w	r3, r3, #3
 8004d66:	3301      	adds	r3, #1
 8004d68:	005b      	lsls	r3, r3, #1
 8004d6a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004d6c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d74:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d76:	e002      	b.n	8004d7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d78:	4b05      	ldr	r3, [pc, #20]	@ (8004d90 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d7a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3750      	adds	r7, #80	@ 0x50
 8004d84:	46bd      	mov	sp, r7
 8004d86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d8a:	bf00      	nop
 8004d8c:	40023800 	.word	0x40023800
 8004d90:	00f42400 	.word	0x00f42400
 8004d94:	007a1200 	.word	0x007a1200

08004d98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d9c:	4b03      	ldr	r3, [pc, #12]	@ (8004dac <HAL_RCC_GetHCLKFreq+0x14>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	20000000 	.word	0x20000000

08004db0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004db0:	b084      	sub	sp, #16
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b084      	sub	sp, #16
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
 8004dba:	f107 001c 	add.w	r0, r7, #28
 8004dbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d122      	bne.n	8004e0e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dcc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004ddc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004df0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d105      	bne.n	8004e02 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f001 fbee 	bl	80065e4 <USB_CoreReset>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	73fb      	strb	r3, [r7, #15]
 8004e0c:	e01a      	b.n	8004e44 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f001 fbe2 	bl	80065e4 <USB_CoreReset>
 8004e20:	4603      	mov	r3, r0
 8004e22:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004e24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d106      	bne.n	8004e38 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e2e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	639a      	str	r2, [r3, #56]	@ 0x38
 8004e36:	e005      	b.n	8004e44 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e3c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d10b      	bne.n	8004e62 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f043 0206 	orr.w	r2, r3, #6
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f043 0220 	orr.w	r2, r3, #32
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e6e:	b004      	add	sp, #16
 8004e70:	4770      	bx	lr
	...

08004e74 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b087      	sub	sp, #28
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	4613      	mov	r3, r2
 8004e80:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004e82:	79fb      	ldrb	r3, [r7, #7]
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d165      	bne.n	8004f54 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	4a41      	ldr	r2, [pc, #260]	@ (8004f90 <USB_SetTurnaroundTime+0x11c>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d906      	bls.n	8004e9e <USB_SetTurnaroundTime+0x2a>
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	4a40      	ldr	r2, [pc, #256]	@ (8004f94 <USB_SetTurnaroundTime+0x120>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d202      	bcs.n	8004e9e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004e98:	230f      	movs	r3, #15
 8004e9a:	617b      	str	r3, [r7, #20]
 8004e9c:	e062      	b.n	8004f64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	4a3c      	ldr	r2, [pc, #240]	@ (8004f94 <USB_SetTurnaroundTime+0x120>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d306      	bcc.n	8004eb4 <USB_SetTurnaroundTime+0x40>
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	4a3b      	ldr	r2, [pc, #236]	@ (8004f98 <USB_SetTurnaroundTime+0x124>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d202      	bcs.n	8004eb4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004eae:	230e      	movs	r3, #14
 8004eb0:	617b      	str	r3, [r7, #20]
 8004eb2:	e057      	b.n	8004f64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	4a38      	ldr	r2, [pc, #224]	@ (8004f98 <USB_SetTurnaroundTime+0x124>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d306      	bcc.n	8004eca <USB_SetTurnaroundTime+0x56>
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	4a37      	ldr	r2, [pc, #220]	@ (8004f9c <USB_SetTurnaroundTime+0x128>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d202      	bcs.n	8004eca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004ec4:	230d      	movs	r3, #13
 8004ec6:	617b      	str	r3, [r7, #20]
 8004ec8:	e04c      	b.n	8004f64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	4a33      	ldr	r2, [pc, #204]	@ (8004f9c <USB_SetTurnaroundTime+0x128>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d306      	bcc.n	8004ee0 <USB_SetTurnaroundTime+0x6c>
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	4a32      	ldr	r2, [pc, #200]	@ (8004fa0 <USB_SetTurnaroundTime+0x12c>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d802      	bhi.n	8004ee0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004eda:	230c      	movs	r3, #12
 8004edc:	617b      	str	r3, [r7, #20]
 8004ede:	e041      	b.n	8004f64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	4a2f      	ldr	r2, [pc, #188]	@ (8004fa0 <USB_SetTurnaroundTime+0x12c>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d906      	bls.n	8004ef6 <USB_SetTurnaroundTime+0x82>
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	4a2e      	ldr	r2, [pc, #184]	@ (8004fa4 <USB_SetTurnaroundTime+0x130>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d802      	bhi.n	8004ef6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004ef0:	230b      	movs	r3, #11
 8004ef2:	617b      	str	r3, [r7, #20]
 8004ef4:	e036      	b.n	8004f64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	4a2a      	ldr	r2, [pc, #168]	@ (8004fa4 <USB_SetTurnaroundTime+0x130>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d906      	bls.n	8004f0c <USB_SetTurnaroundTime+0x98>
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	4a29      	ldr	r2, [pc, #164]	@ (8004fa8 <USB_SetTurnaroundTime+0x134>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d802      	bhi.n	8004f0c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004f06:	230a      	movs	r3, #10
 8004f08:	617b      	str	r3, [r7, #20]
 8004f0a:	e02b      	b.n	8004f64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	4a26      	ldr	r2, [pc, #152]	@ (8004fa8 <USB_SetTurnaroundTime+0x134>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d906      	bls.n	8004f22 <USB_SetTurnaroundTime+0xae>
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	4a25      	ldr	r2, [pc, #148]	@ (8004fac <USB_SetTurnaroundTime+0x138>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d202      	bcs.n	8004f22 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004f1c:	2309      	movs	r3, #9
 8004f1e:	617b      	str	r3, [r7, #20]
 8004f20:	e020      	b.n	8004f64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	4a21      	ldr	r2, [pc, #132]	@ (8004fac <USB_SetTurnaroundTime+0x138>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d306      	bcc.n	8004f38 <USB_SetTurnaroundTime+0xc4>
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	4a20      	ldr	r2, [pc, #128]	@ (8004fb0 <USB_SetTurnaroundTime+0x13c>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d802      	bhi.n	8004f38 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004f32:	2308      	movs	r3, #8
 8004f34:	617b      	str	r3, [r7, #20]
 8004f36:	e015      	b.n	8004f64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	4a1d      	ldr	r2, [pc, #116]	@ (8004fb0 <USB_SetTurnaroundTime+0x13c>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d906      	bls.n	8004f4e <USB_SetTurnaroundTime+0xda>
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	4a1c      	ldr	r2, [pc, #112]	@ (8004fb4 <USB_SetTurnaroundTime+0x140>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d202      	bcs.n	8004f4e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004f48:	2307      	movs	r3, #7
 8004f4a:	617b      	str	r3, [r7, #20]
 8004f4c:	e00a      	b.n	8004f64 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004f4e:	2306      	movs	r3, #6
 8004f50:	617b      	str	r3, [r7, #20]
 8004f52:	e007      	b.n	8004f64 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004f54:	79fb      	ldrb	r3, [r7, #7]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d102      	bne.n	8004f60 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004f5a:	2309      	movs	r3, #9
 8004f5c:	617b      	str	r3, [r7, #20]
 8004f5e:	e001      	b.n	8004f64 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004f60:	2309      	movs	r3, #9
 8004f62:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	68da      	ldr	r2, [r3, #12]
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	029b      	lsls	r3, r3, #10
 8004f78:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004f7c:	431a      	orrs	r2, r3
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f82:	2300      	movs	r3, #0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	371c      	adds	r7, #28
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr
 8004f90:	00d8acbf 	.word	0x00d8acbf
 8004f94:	00e4e1c0 	.word	0x00e4e1c0
 8004f98:	00f42400 	.word	0x00f42400
 8004f9c:	01067380 	.word	0x01067380
 8004fa0:	011a499f 	.word	0x011a499f
 8004fa4:	01312cff 	.word	0x01312cff
 8004fa8:	014ca43f 	.word	0x014ca43f
 8004fac:	016e3600 	.word	0x016e3600
 8004fb0:	01a6ab1f 	.word	0x01a6ab1f
 8004fb4:	01e84800 	.word	0x01e84800

08004fb8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	f043 0201 	orr.w	r2, r3, #1
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	370c      	adds	r7, #12
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr

08004fda <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fda:	b480      	push	{r7}
 8004fdc:	b083      	sub	sp, #12
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	f023 0201 	bic.w	r2, r3, #1
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	460b      	mov	r3, r1
 8005006:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005008:	2300      	movs	r3, #0
 800500a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005018:	78fb      	ldrb	r3, [r7, #3]
 800501a:	2b01      	cmp	r3, #1
 800501c:	d115      	bne.n	800504a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800502a:	2001      	movs	r0, #1
 800502c:	f7fc fe86 	bl	8001d3c <HAL_Delay>
      ms++;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	3301      	adds	r3, #1
 8005034:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f001 fa45 	bl	80064c6 <USB_GetMode>
 800503c:	4603      	mov	r3, r0
 800503e:	2b01      	cmp	r3, #1
 8005040:	d01e      	beq.n	8005080 <USB_SetCurrentMode+0x84>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2b31      	cmp	r3, #49	@ 0x31
 8005046:	d9f0      	bls.n	800502a <USB_SetCurrentMode+0x2e>
 8005048:	e01a      	b.n	8005080 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800504a:	78fb      	ldrb	r3, [r7, #3]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d115      	bne.n	800507c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800505c:	2001      	movs	r0, #1
 800505e:	f7fc fe6d 	bl	8001d3c <HAL_Delay>
      ms++;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	3301      	adds	r3, #1
 8005066:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f001 fa2c 	bl	80064c6 <USB_GetMode>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d005      	beq.n	8005080 <USB_SetCurrentMode+0x84>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2b31      	cmp	r3, #49	@ 0x31
 8005078:	d9f0      	bls.n	800505c <USB_SetCurrentMode+0x60>
 800507a:	e001      	b.n	8005080 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e005      	b.n	800508c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2b32      	cmp	r3, #50	@ 0x32
 8005084:	d101      	bne.n	800508a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e000      	b.n	800508c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800508a:	2300      	movs	r3, #0
}
 800508c:	4618      	mov	r0, r3
 800508e:	3710      	adds	r7, #16
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005094:	b084      	sub	sp, #16
 8005096:	b580      	push	{r7, lr}
 8005098:	b086      	sub	sp, #24
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
 800509e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80050a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80050a6:	2300      	movs	r3, #0
 80050a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80050ae:	2300      	movs	r3, #0
 80050b0:	613b      	str	r3, [r7, #16]
 80050b2:	e009      	b.n	80050c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	3340      	adds	r3, #64	@ 0x40
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	4413      	add	r3, r2
 80050be:	2200      	movs	r2, #0
 80050c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	3301      	adds	r3, #1
 80050c6:	613b      	str	r3, [r7, #16]
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	2b0e      	cmp	r3, #14
 80050cc:	d9f2      	bls.n	80050b4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80050ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d11c      	bne.n	800510e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80050e2:	f043 0302 	orr.w	r3, r3, #2
 80050e6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ec:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050f8:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005104:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	639a      	str	r2, [r3, #56]	@ 0x38
 800510c:	e00b      	b.n	8005126 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005112:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800511e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800512c:	461a      	mov	r2, r3
 800512e:	2300      	movs	r3, #0
 8005130:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005138:	4619      	mov	r1, r3
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005140:	461a      	mov	r2, r3
 8005142:	680b      	ldr	r3, [r1, #0]
 8005144:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005148:	2b01      	cmp	r3, #1
 800514a:	d10c      	bne.n	8005166 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800514c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800514e:	2b00      	cmp	r3, #0
 8005150:	d104      	bne.n	800515c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005152:	2100      	movs	r1, #0
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 f965 	bl	8005424 <USB_SetDevSpeed>
 800515a:	e008      	b.n	800516e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800515c:	2101      	movs	r1, #1
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 f960 	bl	8005424 <USB_SetDevSpeed>
 8005164:	e003      	b.n	800516e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005166:	2103      	movs	r1, #3
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 f95b 	bl	8005424 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800516e:	2110      	movs	r1, #16
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 f8f3 	bl	800535c <USB_FlushTxFifo>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d001      	beq.n	8005180 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 f91f 	bl	80053c4 <USB_FlushRxFifo>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d001      	beq.n	8005190 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005196:	461a      	mov	r2, r3
 8005198:	2300      	movs	r3, #0
 800519a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051a2:	461a      	mov	r2, r3
 80051a4:	2300      	movs	r3, #0
 80051a6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051ae:	461a      	mov	r2, r3
 80051b0:	2300      	movs	r3, #0
 80051b2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051b4:	2300      	movs	r3, #0
 80051b6:	613b      	str	r3, [r7, #16]
 80051b8:	e043      	b.n	8005242 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	015a      	lsls	r2, r3, #5
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	4413      	add	r3, r2
 80051c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80051cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80051d0:	d118      	bne.n	8005204 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d10a      	bne.n	80051ee <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	015a      	lsls	r2, r3, #5
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	4413      	add	r3, r2
 80051e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051e4:	461a      	mov	r2, r3
 80051e6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80051ea:	6013      	str	r3, [r2, #0]
 80051ec:	e013      	b.n	8005216 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	015a      	lsls	r2, r3, #5
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	4413      	add	r3, r2
 80051f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051fa:	461a      	mov	r2, r3
 80051fc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005200:	6013      	str	r3, [r2, #0]
 8005202:	e008      	b.n	8005216 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	015a      	lsls	r2, r3, #5
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	4413      	add	r3, r2
 800520c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005210:	461a      	mov	r2, r3
 8005212:	2300      	movs	r3, #0
 8005214:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	015a      	lsls	r2, r3, #5
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	4413      	add	r3, r2
 800521e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005222:	461a      	mov	r2, r3
 8005224:	2300      	movs	r3, #0
 8005226:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	015a      	lsls	r2, r3, #5
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	4413      	add	r3, r2
 8005230:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005234:	461a      	mov	r2, r3
 8005236:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800523a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	3301      	adds	r3, #1
 8005240:	613b      	str	r3, [r7, #16]
 8005242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005244:	693a      	ldr	r2, [r7, #16]
 8005246:	429a      	cmp	r2, r3
 8005248:	d3b7      	bcc.n	80051ba <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800524a:	2300      	movs	r3, #0
 800524c:	613b      	str	r3, [r7, #16]
 800524e:	e043      	b.n	80052d8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	015a      	lsls	r2, r3, #5
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	4413      	add	r3, r2
 8005258:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005262:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005266:	d118      	bne.n	800529a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d10a      	bne.n	8005284 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	015a      	lsls	r2, r3, #5
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	4413      	add	r3, r2
 8005276:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800527a:	461a      	mov	r2, r3
 800527c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005280:	6013      	str	r3, [r2, #0]
 8005282:	e013      	b.n	80052ac <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	015a      	lsls	r2, r3, #5
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	4413      	add	r3, r2
 800528c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005290:	461a      	mov	r2, r3
 8005292:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005296:	6013      	str	r3, [r2, #0]
 8005298:	e008      	b.n	80052ac <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	015a      	lsls	r2, r3, #5
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	4413      	add	r3, r2
 80052a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052a6:	461a      	mov	r2, r3
 80052a8:	2300      	movs	r3, #0
 80052aa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	015a      	lsls	r2, r3, #5
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	4413      	add	r3, r2
 80052b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052b8:	461a      	mov	r2, r3
 80052ba:	2300      	movs	r3, #0
 80052bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	015a      	lsls	r2, r3, #5
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	4413      	add	r3, r2
 80052c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052ca:	461a      	mov	r2, r3
 80052cc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80052d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	3301      	adds	r3, #1
 80052d6:	613b      	str	r3, [r7, #16]
 80052d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052da:	693a      	ldr	r2, [r7, #16]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d3b7      	bcc.n	8005250 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80052ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052f2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005300:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005304:	2b00      	cmp	r3, #0
 8005306:	d105      	bne.n	8005314 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	f043 0210 	orr.w	r2, r3, #16
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	699a      	ldr	r2, [r3, #24]
 8005318:	4b0f      	ldr	r3, [pc, #60]	@ (8005358 <USB_DevInit+0x2c4>)
 800531a:	4313      	orrs	r3, r2
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005320:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005322:	2b00      	cmp	r3, #0
 8005324:	d005      	beq.n	8005332 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	f043 0208 	orr.w	r2, r3, #8
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005332:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005334:	2b01      	cmp	r3, #1
 8005336:	d107      	bne.n	8005348 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005340:	f043 0304 	orr.w	r3, r3, #4
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005348:	7dfb      	ldrb	r3, [r7, #23]
}
 800534a:	4618      	mov	r0, r3
 800534c:	3718      	adds	r7, #24
 800534e:	46bd      	mov	sp, r7
 8005350:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005354:	b004      	add	sp, #16
 8005356:	4770      	bx	lr
 8005358:	803c3800 	.word	0x803c3800

0800535c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005366:	2300      	movs	r3, #0
 8005368:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	3301      	adds	r3, #1
 800536e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	4a13      	ldr	r2, [pc, #76]	@ (80053c0 <USB_FlushTxFifo+0x64>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d901      	bls.n	800537c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005378:	2303      	movs	r3, #3
 800537a:	e01b      	b.n	80053b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	2b00      	cmp	r3, #0
 8005382:	daf2      	bge.n	800536a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005384:	2300      	movs	r3, #0
 8005386:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	019b      	lsls	r3, r3, #6
 800538c:	f043 0220 	orr.w	r2, r3, #32
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	3301      	adds	r3, #1
 8005398:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	4a08      	ldr	r2, [pc, #32]	@ (80053c0 <USB_FlushTxFifo+0x64>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d901      	bls.n	80053a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e006      	b.n	80053b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	f003 0320 	and.w	r3, r3, #32
 80053ae:	2b20      	cmp	r3, #32
 80053b0:	d0f0      	beq.n	8005394 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80053b2:	2300      	movs	r3, #0
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3714      	adds	r7, #20
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr
 80053c0:	00030d40 	.word	0x00030d40

080053c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80053cc:	2300      	movs	r3, #0
 80053ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	3301      	adds	r3, #1
 80053d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	4a11      	ldr	r2, [pc, #68]	@ (8005420 <USB_FlushRxFifo+0x5c>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d901      	bls.n	80053e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e018      	b.n	8005414 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	daf2      	bge.n	80053d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80053ea:	2300      	movs	r3, #0
 80053ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2210      	movs	r2, #16
 80053f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	3301      	adds	r3, #1
 80053f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	4a08      	ldr	r2, [pc, #32]	@ (8005420 <USB_FlushRxFifo+0x5c>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d901      	bls.n	8005406 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	e006      	b.n	8005414 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	f003 0310 	and.w	r3, r3, #16
 800540e:	2b10      	cmp	r3, #16
 8005410:	d0f0      	beq.n	80053f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	3714      	adds	r7, #20
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr
 8005420:	00030d40 	.word	0x00030d40

08005424 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	460b      	mov	r3, r1
 800542e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	78fb      	ldrb	r3, [r7, #3]
 800543e:	68f9      	ldr	r1, [r7, #12]
 8005440:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005444:	4313      	orrs	r3, r2
 8005446:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3714      	adds	r7, #20
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr

08005456 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005456:	b480      	push	{r7}
 8005458:	b087      	sub	sp, #28
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f003 0306 	and.w	r3, r3, #6
 800546e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d102      	bne.n	800547c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005476:	2300      	movs	r3, #0
 8005478:	75fb      	strb	r3, [r7, #23]
 800547a:	e00a      	b.n	8005492 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2b02      	cmp	r3, #2
 8005480:	d002      	beq.n	8005488 <USB_GetDevSpeed+0x32>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2b06      	cmp	r3, #6
 8005486:	d102      	bne.n	800548e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005488:	2302      	movs	r3, #2
 800548a:	75fb      	strb	r3, [r7, #23]
 800548c:	e001      	b.n	8005492 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800548e:	230f      	movs	r3, #15
 8005490:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005492:	7dfb      	ldrb	r3, [r7, #23]
}
 8005494:	4618      	mov	r0, r3
 8005496:	371c      	adds	r7, #28
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	785b      	ldrb	r3, [r3, #1]
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d13a      	bne.n	8005532 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054c2:	69da      	ldr	r2, [r3, #28]
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	f003 030f 	and.w	r3, r3, #15
 80054cc:	2101      	movs	r1, #1
 80054ce:	fa01 f303 	lsl.w	r3, r1, r3
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	68f9      	ldr	r1, [r7, #12]
 80054d6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80054da:	4313      	orrs	r3, r2
 80054dc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	015a      	lsls	r2, r3, #5
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	4413      	add	r3, r2
 80054e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d155      	bne.n	80055a0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	015a      	lsls	r2, r3, #5
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	4413      	add	r3, r2
 80054fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	791b      	ldrb	r3, [r3, #4]
 800550e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005510:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	059b      	lsls	r3, r3, #22
 8005516:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005518:	4313      	orrs	r3, r2
 800551a:	68ba      	ldr	r2, [r7, #8]
 800551c:	0151      	lsls	r1, r2, #5
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	440a      	add	r2, r1
 8005522:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005526:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800552a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800552e:	6013      	str	r3, [r2, #0]
 8005530:	e036      	b.n	80055a0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005538:	69da      	ldr	r2, [r3, #28]
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	f003 030f 	and.w	r3, r3, #15
 8005542:	2101      	movs	r1, #1
 8005544:	fa01 f303 	lsl.w	r3, r1, r3
 8005548:	041b      	lsls	r3, r3, #16
 800554a:	68f9      	ldr	r1, [r7, #12]
 800554c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005550:	4313      	orrs	r3, r2
 8005552:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	015a      	lsls	r2, r3, #5
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	4413      	add	r3, r2
 800555c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d11a      	bne.n	80055a0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	015a      	lsls	r2, r3, #5
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	4413      	add	r3, r2
 8005572:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	791b      	ldrb	r3, [r3, #4]
 8005584:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005586:	430b      	orrs	r3, r1
 8005588:	4313      	orrs	r3, r2
 800558a:	68ba      	ldr	r2, [r7, #8]
 800558c:	0151      	lsls	r1, r2, #5
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	440a      	add	r2, r1
 8005592:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005596:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800559a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800559e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3714      	adds	r7, #20
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
	...

080055b0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b085      	sub	sp, #20
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	785b      	ldrb	r3, [r3, #1]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d161      	bne.n	8005690 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	015a      	lsls	r2, r3, #5
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	4413      	add	r3, r2
 80055d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80055de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80055e2:	d11f      	bne.n	8005624 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	015a      	lsls	r2, r3, #5
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	4413      	add	r3, r2
 80055ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68ba      	ldr	r2, [r7, #8]
 80055f4:	0151      	lsls	r1, r2, #5
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	440a      	add	r2, r1
 80055fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055fe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005602:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	015a      	lsls	r2, r3, #5
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	4413      	add	r3, r2
 800560c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68ba      	ldr	r2, [r7, #8]
 8005614:	0151      	lsls	r1, r2, #5
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	440a      	add	r2, r1
 800561a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800561e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005622:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800562a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	f003 030f 	and.w	r3, r3, #15
 8005634:	2101      	movs	r1, #1
 8005636:	fa01 f303 	lsl.w	r3, r1, r3
 800563a:	b29b      	uxth	r3, r3
 800563c:	43db      	mvns	r3, r3
 800563e:	68f9      	ldr	r1, [r7, #12]
 8005640:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005644:	4013      	ands	r3, r2
 8005646:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800564e:	69da      	ldr	r2, [r3, #28]
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	f003 030f 	and.w	r3, r3, #15
 8005658:	2101      	movs	r1, #1
 800565a:	fa01 f303 	lsl.w	r3, r1, r3
 800565e:	b29b      	uxth	r3, r3
 8005660:	43db      	mvns	r3, r3
 8005662:	68f9      	ldr	r1, [r7, #12]
 8005664:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005668:	4013      	ands	r3, r2
 800566a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	015a      	lsls	r2, r3, #5
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	4413      	add	r3, r2
 8005674:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	0159      	lsls	r1, r3, #5
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	440b      	add	r3, r1
 8005682:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005686:	4619      	mov	r1, r3
 8005688:	4b35      	ldr	r3, [pc, #212]	@ (8005760 <USB_DeactivateEndpoint+0x1b0>)
 800568a:	4013      	ands	r3, r2
 800568c:	600b      	str	r3, [r1, #0]
 800568e:	e060      	b.n	8005752 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	015a      	lsls	r2, r3, #5
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	4413      	add	r3, r2
 8005698:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80056a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056a6:	d11f      	bne.n	80056e8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	015a      	lsls	r2, r3, #5
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	4413      	add	r3, r2
 80056b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68ba      	ldr	r2, [r7, #8]
 80056b8:	0151      	lsls	r1, r2, #5
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	440a      	add	r2, r1
 80056be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056c2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80056c6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	015a      	lsls	r2, r3, #5
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	4413      	add	r3, r2
 80056d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	68ba      	ldr	r2, [r7, #8]
 80056d8:	0151      	lsls	r1, r2, #5
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	440a      	add	r2, r1
 80056de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056e2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80056e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	f003 030f 	and.w	r3, r3, #15
 80056f8:	2101      	movs	r1, #1
 80056fa:	fa01 f303 	lsl.w	r3, r1, r3
 80056fe:	041b      	lsls	r3, r3, #16
 8005700:	43db      	mvns	r3, r3
 8005702:	68f9      	ldr	r1, [r7, #12]
 8005704:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005708:	4013      	ands	r3, r2
 800570a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005712:	69da      	ldr	r2, [r3, #28]
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	f003 030f 	and.w	r3, r3, #15
 800571c:	2101      	movs	r1, #1
 800571e:	fa01 f303 	lsl.w	r3, r1, r3
 8005722:	041b      	lsls	r3, r3, #16
 8005724:	43db      	mvns	r3, r3
 8005726:	68f9      	ldr	r1, [r7, #12]
 8005728:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800572c:	4013      	ands	r3, r2
 800572e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	015a      	lsls	r2, r3, #5
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	4413      	add	r3, r2
 8005738:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	0159      	lsls	r1, r3, #5
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	440b      	add	r3, r1
 8005746:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800574a:	4619      	mov	r1, r3
 800574c:	4b05      	ldr	r3, [pc, #20]	@ (8005764 <USB_DeactivateEndpoint+0x1b4>)
 800574e:	4013      	ands	r3, r2
 8005750:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005752:	2300      	movs	r3, #0
}
 8005754:	4618      	mov	r0, r3
 8005756:	3714      	adds	r7, #20
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr
 8005760:	ec337800 	.word	0xec337800
 8005764:	eff37800 	.word	0xeff37800

08005768 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b08a      	sub	sp, #40	@ 0x28
 800576c:	af02      	add	r7, sp, #8
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	4613      	mov	r3, r2
 8005774:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	785b      	ldrb	r3, [r3, #1]
 8005784:	2b01      	cmp	r3, #1
 8005786:	f040 815c 	bne.w	8005a42 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d132      	bne.n	80057f8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	015a      	lsls	r2, r3, #5
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	4413      	add	r3, r2
 800579a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	69ba      	ldr	r2, [r7, #24]
 80057a2:	0151      	lsls	r1, r2, #5
 80057a4:	69fa      	ldr	r2, [r7, #28]
 80057a6:	440a      	add	r2, r1
 80057a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057ac:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80057b0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80057b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	015a      	lsls	r2, r3, #5
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	4413      	add	r3, r2
 80057be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	69ba      	ldr	r2, [r7, #24]
 80057c6:	0151      	lsls	r1, r2, #5
 80057c8:	69fa      	ldr	r2, [r7, #28]
 80057ca:	440a      	add	r2, r1
 80057cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80057d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	015a      	lsls	r2, r3, #5
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	4413      	add	r3, r2
 80057de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	69ba      	ldr	r2, [r7, #24]
 80057e6:	0151      	lsls	r1, r2, #5
 80057e8:	69fa      	ldr	r2, [r7, #28]
 80057ea:	440a      	add	r2, r1
 80057ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057f0:	0cdb      	lsrs	r3, r3, #19
 80057f2:	04db      	lsls	r3, r3, #19
 80057f4:	6113      	str	r3, [r2, #16]
 80057f6:	e074      	b.n	80058e2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	015a      	lsls	r2, r3, #5
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	4413      	add	r3, r2
 8005800:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	69ba      	ldr	r2, [r7, #24]
 8005808:	0151      	lsls	r1, r2, #5
 800580a:	69fa      	ldr	r2, [r7, #28]
 800580c:	440a      	add	r2, r1
 800580e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005812:	0cdb      	lsrs	r3, r3, #19
 8005814:	04db      	lsls	r3, r3, #19
 8005816:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	015a      	lsls	r2, r3, #5
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	4413      	add	r3, r2
 8005820:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	69ba      	ldr	r2, [r7, #24]
 8005828:	0151      	lsls	r1, r2, #5
 800582a:	69fa      	ldr	r2, [r7, #28]
 800582c:	440a      	add	r2, r1
 800582e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005832:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005836:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800583a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	015a      	lsls	r2, r3, #5
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	4413      	add	r3, r2
 8005844:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005848:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	6999      	ldr	r1, [r3, #24]
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	440b      	add	r3, r1
 8005854:	1e59      	subs	r1, r3, #1
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	fbb1 f3f3 	udiv	r3, r1, r3
 800585e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005860:	4b9d      	ldr	r3, [pc, #628]	@ (8005ad8 <USB_EPStartXfer+0x370>)
 8005862:	400b      	ands	r3, r1
 8005864:	69b9      	ldr	r1, [r7, #24]
 8005866:	0148      	lsls	r0, r1, #5
 8005868:	69f9      	ldr	r1, [r7, #28]
 800586a:	4401      	add	r1, r0
 800586c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005870:	4313      	orrs	r3, r2
 8005872:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	015a      	lsls	r2, r3, #5
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	4413      	add	r3, r2
 800587c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005880:	691a      	ldr	r2, [r3, #16]
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	699b      	ldr	r3, [r3, #24]
 8005886:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800588a:	69b9      	ldr	r1, [r7, #24]
 800588c:	0148      	lsls	r0, r1, #5
 800588e:	69f9      	ldr	r1, [r7, #28]
 8005890:	4401      	add	r1, r0
 8005892:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005896:	4313      	orrs	r3, r2
 8005898:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	791b      	ldrb	r3, [r3, #4]
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d11f      	bne.n	80058e2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	015a      	lsls	r2, r3, #5
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	4413      	add	r3, r2
 80058aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058ae:	691b      	ldr	r3, [r3, #16]
 80058b0:	69ba      	ldr	r2, [r7, #24]
 80058b2:	0151      	lsls	r1, r2, #5
 80058b4:	69fa      	ldr	r2, [r7, #28]
 80058b6:	440a      	add	r2, r1
 80058b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058bc:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80058c0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	015a      	lsls	r2, r3, #5
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	4413      	add	r3, r2
 80058ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	69ba      	ldr	r2, [r7, #24]
 80058d2:	0151      	lsls	r1, r2, #5
 80058d4:	69fa      	ldr	r2, [r7, #28]
 80058d6:	440a      	add	r2, r1
 80058d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058dc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80058e0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80058e2:	79fb      	ldrb	r3, [r7, #7]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d14b      	bne.n	8005980 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	695b      	ldr	r3, [r3, #20]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d009      	beq.n	8005904 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	015a      	lsls	r2, r3, #5
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	4413      	add	r3, r2
 80058f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058fc:	461a      	mov	r2, r3
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	791b      	ldrb	r3, [r3, #4]
 8005908:	2b01      	cmp	r3, #1
 800590a:	d128      	bne.n	800595e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005918:	2b00      	cmp	r3, #0
 800591a:	d110      	bne.n	800593e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	015a      	lsls	r2, r3, #5
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	4413      	add	r3, r2
 8005924:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	69ba      	ldr	r2, [r7, #24]
 800592c:	0151      	lsls	r1, r2, #5
 800592e:	69fa      	ldr	r2, [r7, #28]
 8005930:	440a      	add	r2, r1
 8005932:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005936:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800593a:	6013      	str	r3, [r2, #0]
 800593c:	e00f      	b.n	800595e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	015a      	lsls	r2, r3, #5
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	4413      	add	r3, r2
 8005946:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	69ba      	ldr	r2, [r7, #24]
 800594e:	0151      	lsls	r1, r2, #5
 8005950:	69fa      	ldr	r2, [r7, #28]
 8005952:	440a      	add	r2, r1
 8005954:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005958:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800595c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	015a      	lsls	r2, r3, #5
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	4413      	add	r3, r2
 8005966:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	69ba      	ldr	r2, [r7, #24]
 800596e:	0151      	lsls	r1, r2, #5
 8005970:	69fa      	ldr	r2, [r7, #28]
 8005972:	440a      	add	r2, r1
 8005974:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005978:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800597c:	6013      	str	r3, [r2, #0]
 800597e:	e133      	b.n	8005be8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	015a      	lsls	r2, r3, #5
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	4413      	add	r3, r2
 8005988:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	69ba      	ldr	r2, [r7, #24]
 8005990:	0151      	lsls	r1, r2, #5
 8005992:	69fa      	ldr	r2, [r7, #28]
 8005994:	440a      	add	r2, r1
 8005996:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800599a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800599e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	791b      	ldrb	r3, [r3, #4]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d015      	beq.n	80059d4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	699b      	ldr	r3, [r3, #24]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	f000 811b 	beq.w	8005be8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	f003 030f 	and.w	r3, r3, #15
 80059c2:	2101      	movs	r1, #1
 80059c4:	fa01 f303 	lsl.w	r3, r1, r3
 80059c8:	69f9      	ldr	r1, [r7, #28]
 80059ca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80059ce:	4313      	orrs	r3, r2
 80059d0:	634b      	str	r3, [r1, #52]	@ 0x34
 80059d2:	e109      	b.n	8005be8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d110      	bne.n	8005a06 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	015a      	lsls	r2, r3, #5
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	4413      	add	r3, r2
 80059ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	69ba      	ldr	r2, [r7, #24]
 80059f4:	0151      	lsls	r1, r2, #5
 80059f6:	69fa      	ldr	r2, [r7, #28]
 80059f8:	440a      	add	r2, r1
 80059fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059fe:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005a02:	6013      	str	r3, [r2, #0]
 8005a04:	e00f      	b.n	8005a26 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	015a      	lsls	r2, r3, #5
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	69ba      	ldr	r2, [r7, #24]
 8005a16:	0151      	lsls	r1, r2, #5
 8005a18:	69fa      	ldr	r2, [r7, #28]
 8005a1a:	440a      	add	r2, r1
 8005a1c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a24:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	6919      	ldr	r1, [r3, #16]
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	781a      	ldrb	r2, [r3, #0]
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	b298      	uxth	r0, r3
 8005a34:	79fb      	ldrb	r3, [r7, #7]
 8005a36:	9300      	str	r3, [sp, #0]
 8005a38:	4603      	mov	r3, r0
 8005a3a:	68f8      	ldr	r0, [r7, #12]
 8005a3c:	f000 fade 	bl	8005ffc <USB_WritePacket>
 8005a40:	e0d2      	b.n	8005be8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	015a      	lsls	r2, r3, #5
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	4413      	add	r3, r2
 8005a4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	69ba      	ldr	r2, [r7, #24]
 8005a52:	0151      	lsls	r1, r2, #5
 8005a54:	69fa      	ldr	r2, [r7, #28]
 8005a56:	440a      	add	r2, r1
 8005a58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a5c:	0cdb      	lsrs	r3, r3, #19
 8005a5e:	04db      	lsls	r3, r3, #19
 8005a60:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	015a      	lsls	r2, r3, #5
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	4413      	add	r3, r2
 8005a6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	69ba      	ldr	r2, [r7, #24]
 8005a72:	0151      	lsls	r1, r2, #5
 8005a74:	69fa      	ldr	r2, [r7, #28]
 8005a76:	440a      	add	r2, r1
 8005a78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a7c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005a80:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005a84:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d126      	bne.n	8005adc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	015a      	lsls	r2, r3, #5
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	4413      	add	r3, r2
 8005a96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a9a:	691a      	ldr	r2, [r3, #16]
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005aa4:	69b9      	ldr	r1, [r7, #24]
 8005aa6:	0148      	lsls	r0, r1, #5
 8005aa8:	69f9      	ldr	r1, [r7, #28]
 8005aaa:	4401      	add	r1, r0
 8005aac:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	015a      	lsls	r2, r3, #5
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	4413      	add	r3, r2
 8005abc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	69ba      	ldr	r2, [r7, #24]
 8005ac4:	0151      	lsls	r1, r2, #5
 8005ac6:	69fa      	ldr	r2, [r7, #28]
 8005ac8:	440a      	add	r2, r1
 8005aca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ace:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005ad2:	6113      	str	r3, [r2, #16]
 8005ad4:	e03a      	b.n	8005b4c <USB_EPStartXfer+0x3e4>
 8005ad6:	bf00      	nop
 8005ad8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	699a      	ldr	r2, [r3, #24]
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	1e5a      	subs	r2, r3, #1
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8005af0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	8afa      	ldrh	r2, [r7, #22]
 8005af8:	fb03 f202 	mul.w	r2, r3, r2
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	015a      	lsls	r2, r3, #5
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	4413      	add	r3, r2
 8005b08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b0c:	691a      	ldr	r2, [r3, #16]
 8005b0e:	8afb      	ldrh	r3, [r7, #22]
 8005b10:	04d9      	lsls	r1, r3, #19
 8005b12:	4b38      	ldr	r3, [pc, #224]	@ (8005bf4 <USB_EPStartXfer+0x48c>)
 8005b14:	400b      	ands	r3, r1
 8005b16:	69b9      	ldr	r1, [r7, #24]
 8005b18:	0148      	lsls	r0, r1, #5
 8005b1a:	69f9      	ldr	r1, [r7, #28]
 8005b1c:	4401      	add	r1, r0
 8005b1e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005b22:	4313      	orrs	r3, r2
 8005b24:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	015a      	lsls	r2, r3, #5
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b32:	691a      	ldr	r2, [r3, #16]
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	69db      	ldr	r3, [r3, #28]
 8005b38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b3c:	69b9      	ldr	r1, [r7, #24]
 8005b3e:	0148      	lsls	r0, r1, #5
 8005b40:	69f9      	ldr	r1, [r7, #28]
 8005b42:	4401      	add	r1, r0
 8005b44:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005b4c:	79fb      	ldrb	r3, [r7, #7]
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d10d      	bne.n	8005b6e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d009      	beq.n	8005b6e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	6919      	ldr	r1, [r3, #16]
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	015a      	lsls	r2, r3, #5
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	4413      	add	r3, r2
 8005b66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b6a:	460a      	mov	r2, r1
 8005b6c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	791b      	ldrb	r3, [r3, #4]
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d128      	bne.n	8005bc8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d110      	bne.n	8005ba8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	015a      	lsls	r2, r3, #5
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	69ba      	ldr	r2, [r7, #24]
 8005b96:	0151      	lsls	r1, r2, #5
 8005b98:	69fa      	ldr	r2, [r7, #28]
 8005b9a:	440a      	add	r2, r1
 8005b9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ba0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005ba4:	6013      	str	r3, [r2, #0]
 8005ba6:	e00f      	b.n	8005bc8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	015a      	lsls	r2, r3, #5
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	4413      	add	r3, r2
 8005bb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	69ba      	ldr	r2, [r7, #24]
 8005bb8:	0151      	lsls	r1, r2, #5
 8005bba:	69fa      	ldr	r2, [r7, #28]
 8005bbc:	440a      	add	r2, r1
 8005bbe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bc6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	015a      	lsls	r2, r3, #5
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	4413      	add	r3, r2
 8005bd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	69ba      	ldr	r2, [r7, #24]
 8005bd8:	0151      	lsls	r1, r2, #5
 8005bda:	69fa      	ldr	r2, [r7, #28]
 8005bdc:	440a      	add	r2, r1
 8005bde:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005be2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005be6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3720      	adds	r7, #32
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	1ff80000 	.word	0x1ff80000

08005bf8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b087      	sub	sp, #28
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	4613      	mov	r3, r2
 8005c04:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	785b      	ldrb	r3, [r3, #1]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	f040 80ce 	bne.w	8005db6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d132      	bne.n	8005c88 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	015a      	lsls	r2, r3, #5
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	4413      	add	r3, r2
 8005c2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	693a      	ldr	r2, [r7, #16]
 8005c32:	0151      	lsls	r1, r2, #5
 8005c34:	697a      	ldr	r2, [r7, #20]
 8005c36:	440a      	add	r2, r1
 8005c38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c3c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005c40:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005c44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	015a      	lsls	r2, r3, #5
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	0151      	lsls	r1, r2, #5
 8005c58:	697a      	ldr	r2, [r7, #20]
 8005c5a:	440a      	add	r2, r1
 8005c5c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c60:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005c64:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	015a      	lsls	r2, r3, #5
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	0151      	lsls	r1, r2, #5
 8005c78:	697a      	ldr	r2, [r7, #20]
 8005c7a:	440a      	add	r2, r1
 8005c7c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c80:	0cdb      	lsrs	r3, r3, #19
 8005c82:	04db      	lsls	r3, r3, #19
 8005c84:	6113      	str	r3, [r2, #16]
 8005c86:	e04e      	b.n	8005d26 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	015a      	lsls	r2, r3, #5
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	4413      	add	r3, r2
 8005c90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	693a      	ldr	r2, [r7, #16]
 8005c98:	0151      	lsls	r1, r2, #5
 8005c9a:	697a      	ldr	r2, [r7, #20]
 8005c9c:	440a      	add	r2, r1
 8005c9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ca2:	0cdb      	lsrs	r3, r3, #19
 8005ca4:	04db      	lsls	r3, r3, #19
 8005ca6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	015a      	lsls	r2, r3, #5
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	4413      	add	r3, r2
 8005cb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	693a      	ldr	r2, [r7, #16]
 8005cb8:	0151      	lsls	r1, r2, #5
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	440a      	add	r2, r1
 8005cbe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cc2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005cc6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005cca:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	699a      	ldr	r2, [r3, #24]
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d903      	bls.n	8005ce0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	68da      	ldr	r2, [r3, #12]
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	015a      	lsls	r2, r3, #5
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	4413      	add	r3, r2
 8005ce8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	693a      	ldr	r2, [r7, #16]
 8005cf0:	0151      	lsls	r1, r2, #5
 8005cf2:	697a      	ldr	r2, [r7, #20]
 8005cf4:	440a      	add	r2, r1
 8005cf6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cfa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005cfe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	015a      	lsls	r2, r3, #5
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	4413      	add	r3, r2
 8005d08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d0c:	691a      	ldr	r2, [r3, #16]
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	699b      	ldr	r3, [r3, #24]
 8005d12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d16:	6939      	ldr	r1, [r7, #16]
 8005d18:	0148      	lsls	r0, r1, #5
 8005d1a:	6979      	ldr	r1, [r7, #20]
 8005d1c:	4401      	add	r1, r0
 8005d1e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005d22:	4313      	orrs	r3, r2
 8005d24:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005d26:	79fb      	ldrb	r3, [r7, #7]
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d11e      	bne.n	8005d6a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	695b      	ldr	r3, [r3, #20]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d009      	beq.n	8005d48 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	015a      	lsls	r2, r3, #5
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d40:	461a      	mov	r2, r3
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	015a      	lsls	r2, r3, #5
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	4413      	add	r3, r2
 8005d50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	693a      	ldr	r2, [r7, #16]
 8005d58:	0151      	lsls	r1, r2, #5
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	440a      	add	r2, r1
 8005d5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d62:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005d66:	6013      	str	r3, [r2, #0]
 8005d68:	e097      	b.n	8005e9a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	015a      	lsls	r2, r3, #5
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	4413      	add	r3, r2
 8005d72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	0151      	lsls	r1, r2, #5
 8005d7c:	697a      	ldr	r2, [r7, #20]
 8005d7e:	440a      	add	r2, r1
 8005d80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d84:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005d88:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	699b      	ldr	r3, [r3, #24]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	f000 8083 	beq.w	8005e9a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	f003 030f 	and.w	r3, r3, #15
 8005da4:	2101      	movs	r1, #1
 8005da6:	fa01 f303 	lsl.w	r3, r1, r3
 8005daa:	6979      	ldr	r1, [r7, #20]
 8005dac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005db0:	4313      	orrs	r3, r2
 8005db2:	634b      	str	r3, [r1, #52]	@ 0x34
 8005db4:	e071      	b.n	8005e9a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	015a      	lsls	r2, r3, #5
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	0151      	lsls	r1, r2, #5
 8005dc8:	697a      	ldr	r2, [r7, #20]
 8005dca:	440a      	add	r2, r1
 8005dcc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005dd0:	0cdb      	lsrs	r3, r3, #19
 8005dd2:	04db      	lsls	r3, r3, #19
 8005dd4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	015a      	lsls	r2, r3, #5
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	4413      	add	r3, r2
 8005dde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	693a      	ldr	r2, [r7, #16]
 8005de6:	0151      	lsls	r1, r2, #5
 8005de8:	697a      	ldr	r2, [r7, #20]
 8005dea:	440a      	add	r2, r1
 8005dec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005df0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005df4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005df8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d003      	beq.n	8005e0a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	68da      	ldr	r2, [r3, #12]
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	68da      	ldr	r2, [r3, #12]
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	015a      	lsls	r2, r3, #5
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	4413      	add	r3, r2
 8005e1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	693a      	ldr	r2, [r7, #16]
 8005e22:	0151      	lsls	r1, r2, #5
 8005e24:	697a      	ldr	r2, [r7, #20]
 8005e26:	440a      	add	r2, r1
 8005e28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e2c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005e30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	015a      	lsls	r2, r3, #5
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	4413      	add	r3, r2
 8005e3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e3e:	691a      	ldr	r2, [r3, #16]
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	69db      	ldr	r3, [r3, #28]
 8005e44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e48:	6939      	ldr	r1, [r7, #16]
 8005e4a:	0148      	lsls	r0, r1, #5
 8005e4c:	6979      	ldr	r1, [r7, #20]
 8005e4e:	4401      	add	r1, r0
 8005e50:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005e54:	4313      	orrs	r3, r2
 8005e56:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005e58:	79fb      	ldrb	r3, [r7, #7]
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d10d      	bne.n	8005e7a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d009      	beq.n	8005e7a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	6919      	ldr	r1, [r3, #16]
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	015a      	lsls	r2, r3, #5
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	4413      	add	r3, r2
 8005e72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e76:	460a      	mov	r2, r1
 8005e78:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	015a      	lsls	r2, r3, #5
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	4413      	add	r3, r2
 8005e82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	693a      	ldr	r2, [r7, #16]
 8005e8a:	0151      	lsls	r1, r2, #5
 8005e8c:	697a      	ldr	r2, [r7, #20]
 8005e8e:	440a      	add	r2, r1
 8005e90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e94:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005e98:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	371c      	adds	r7, #28
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b087      	sub	sp, #28
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	785b      	ldrb	r3, [r3, #1]
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d14a      	bne.n	8005f5c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	015a      	lsls	r2, r3, #5
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	4413      	add	r3, r2
 8005ed0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005eda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ede:	f040 8086 	bne.w	8005fee <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	015a      	lsls	r2, r3, #5
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	4413      	add	r3, r2
 8005eec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	683a      	ldr	r2, [r7, #0]
 8005ef4:	7812      	ldrb	r2, [r2, #0]
 8005ef6:	0151      	lsls	r1, r2, #5
 8005ef8:	693a      	ldr	r2, [r7, #16]
 8005efa:	440a      	add	r2, r1
 8005efc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f00:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005f04:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	015a      	lsls	r2, r3, #5
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	4413      	add	r3, r2
 8005f10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	683a      	ldr	r2, [r7, #0]
 8005f18:	7812      	ldrb	r2, [r2, #0]
 8005f1a:	0151      	lsls	r1, r2, #5
 8005f1c:	693a      	ldr	r2, [r7, #16]
 8005f1e:	440a      	add	r2, r1
 8005f20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f24:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f28:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d902      	bls.n	8005f40 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	75fb      	strb	r3, [r7, #23]
          break;
 8005f3e:	e056      	b.n	8005fee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	015a      	lsls	r2, r3, #5
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	4413      	add	r3, r2
 8005f4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f54:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f58:	d0e7      	beq.n	8005f2a <USB_EPStopXfer+0x82>
 8005f5a:	e048      	b.n	8005fee <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	015a      	lsls	r2, r3, #5
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	4413      	add	r3, r2
 8005f66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f70:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f74:	d13b      	bne.n	8005fee <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	015a      	lsls	r2, r3, #5
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	4413      	add	r3, r2
 8005f80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	683a      	ldr	r2, [r7, #0]
 8005f88:	7812      	ldrb	r2, [r2, #0]
 8005f8a:	0151      	lsls	r1, r2, #5
 8005f8c:	693a      	ldr	r2, [r7, #16]
 8005f8e:	440a      	add	r2, r1
 8005f90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f94:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005f98:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	015a      	lsls	r2, r3, #5
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	4413      	add	r3, r2
 8005fa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	683a      	ldr	r2, [r7, #0]
 8005fac:	7812      	ldrb	r2, [r2, #0]
 8005fae:	0151      	lsls	r1, r2, #5
 8005fb0:	693a      	ldr	r2, [r7, #16]
 8005fb2:	440a      	add	r2, r1
 8005fb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005fb8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005fbc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d902      	bls.n	8005fd4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	75fb      	strb	r3, [r7, #23]
          break;
 8005fd2:	e00c      	b.n	8005fee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	015a      	lsls	r2, r3, #5
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	4413      	add	r3, r2
 8005fde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005fe8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005fec:	d0e7      	beq.n	8005fbe <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005fee:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	371c      	adds	r7, #28
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b089      	sub	sp, #36	@ 0x24
 8006000:	af00      	add	r7, sp, #0
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	4611      	mov	r1, r2
 8006008:	461a      	mov	r2, r3
 800600a:	460b      	mov	r3, r1
 800600c:	71fb      	strb	r3, [r7, #7]
 800600e:	4613      	mov	r3, r2
 8006010:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800601a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800601e:	2b00      	cmp	r3, #0
 8006020:	d123      	bne.n	800606a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006022:	88bb      	ldrh	r3, [r7, #4]
 8006024:	3303      	adds	r3, #3
 8006026:	089b      	lsrs	r3, r3, #2
 8006028:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800602a:	2300      	movs	r3, #0
 800602c:	61bb      	str	r3, [r7, #24]
 800602e:	e018      	b.n	8006062 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006030:	79fb      	ldrb	r3, [r7, #7]
 8006032:	031a      	lsls	r2, r3, #12
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	4413      	add	r3, r2
 8006038:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800603c:	461a      	mov	r2, r3
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	3301      	adds	r3, #1
 8006048:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	3301      	adds	r3, #1
 800604e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	3301      	adds	r3, #1
 8006054:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006056:	69fb      	ldr	r3, [r7, #28]
 8006058:	3301      	adds	r3, #1
 800605a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	3301      	adds	r3, #1
 8006060:	61bb      	str	r3, [r7, #24]
 8006062:	69ba      	ldr	r2, [r7, #24]
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	429a      	cmp	r2, r3
 8006068:	d3e2      	bcc.n	8006030 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800606a:	2300      	movs	r3, #0
}
 800606c:	4618      	mov	r0, r3
 800606e:	3724      	adds	r7, #36	@ 0x24
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006078:	b480      	push	{r7}
 800607a:	b08b      	sub	sp, #44	@ 0x2c
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	4613      	mov	r3, r2
 8006084:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800608e:	88fb      	ldrh	r3, [r7, #6]
 8006090:	089b      	lsrs	r3, r3, #2
 8006092:	b29b      	uxth	r3, r3
 8006094:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006096:	88fb      	ldrh	r3, [r7, #6]
 8006098:	f003 0303 	and.w	r3, r3, #3
 800609c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800609e:	2300      	movs	r3, #0
 80060a0:	623b      	str	r3, [r7, #32]
 80060a2:	e014      	b.n	80060ce <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ae:	601a      	str	r2, [r3, #0]
    pDest++;
 80060b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b2:	3301      	adds	r3, #1
 80060b4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80060b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b8:	3301      	adds	r3, #1
 80060ba:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80060bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060be:	3301      	adds	r3, #1
 80060c0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80060c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c4:	3301      	adds	r3, #1
 80060c6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80060c8:	6a3b      	ldr	r3, [r7, #32]
 80060ca:	3301      	adds	r3, #1
 80060cc:	623b      	str	r3, [r7, #32]
 80060ce:	6a3a      	ldr	r2, [r7, #32]
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d3e6      	bcc.n	80060a4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80060d6:	8bfb      	ldrh	r3, [r7, #30]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d01e      	beq.n	800611a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80060dc:	2300      	movs	r3, #0
 80060de:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060e6:	461a      	mov	r2, r3
 80060e8:	f107 0310 	add.w	r3, r7, #16
 80060ec:	6812      	ldr	r2, [r2, #0]
 80060ee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80060f0:	693a      	ldr	r2, [r7, #16]
 80060f2:	6a3b      	ldr	r3, [r7, #32]
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	00db      	lsls	r3, r3, #3
 80060f8:	fa22 f303 	lsr.w	r3, r2, r3
 80060fc:	b2da      	uxtb	r2, r3
 80060fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006100:	701a      	strb	r2, [r3, #0]
      i++;
 8006102:	6a3b      	ldr	r3, [r7, #32]
 8006104:	3301      	adds	r3, #1
 8006106:	623b      	str	r3, [r7, #32]
      pDest++;
 8006108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800610a:	3301      	adds	r3, #1
 800610c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800610e:	8bfb      	ldrh	r3, [r7, #30]
 8006110:	3b01      	subs	r3, #1
 8006112:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006114:	8bfb      	ldrh	r3, [r7, #30]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d1ea      	bne.n	80060f0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800611a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800611c:	4618      	mov	r0, r3
 800611e:	372c      	adds	r7, #44	@ 0x2c
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006128:	b480      	push	{r7}
 800612a:	b085      	sub	sp, #20
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	785b      	ldrb	r3, [r3, #1]
 8006140:	2b01      	cmp	r3, #1
 8006142:	d12c      	bne.n	800619e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	015a      	lsls	r2, r3, #5
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	4413      	add	r3, r2
 800614c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2b00      	cmp	r3, #0
 8006154:	db12      	blt.n	800617c <USB_EPSetStall+0x54>
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d00f      	beq.n	800617c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	015a      	lsls	r2, r3, #5
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	4413      	add	r3, r2
 8006164:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68ba      	ldr	r2, [r7, #8]
 800616c:	0151      	lsls	r1, r2, #5
 800616e:	68fa      	ldr	r2, [r7, #12]
 8006170:	440a      	add	r2, r1
 8006172:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006176:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800617a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	015a      	lsls	r2, r3, #5
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	4413      	add	r3, r2
 8006184:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68ba      	ldr	r2, [r7, #8]
 800618c:	0151      	lsls	r1, r2, #5
 800618e:	68fa      	ldr	r2, [r7, #12]
 8006190:	440a      	add	r2, r1
 8006192:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006196:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800619a:	6013      	str	r3, [r2, #0]
 800619c:	e02b      	b.n	80061f6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	015a      	lsls	r2, r3, #5
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	4413      	add	r3, r2
 80061a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	db12      	blt.n	80061d6 <USB_EPSetStall+0xae>
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d00f      	beq.n	80061d6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	015a      	lsls	r2, r3, #5
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	4413      	add	r3, r2
 80061be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68ba      	ldr	r2, [r7, #8]
 80061c6:	0151      	lsls	r1, r2, #5
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	440a      	add	r2, r1
 80061cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061d0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80061d4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	015a      	lsls	r2, r3, #5
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	4413      	add	r3, r2
 80061de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68ba      	ldr	r2, [r7, #8]
 80061e6:	0151      	lsls	r1, r2, #5
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	440a      	add	r2, r1
 80061ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80061f4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80061f6:	2300      	movs	r3, #0
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3714      	adds	r7, #20
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006204:	b480      	push	{r7}
 8006206:	b085      	sub	sp, #20
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	785b      	ldrb	r3, [r3, #1]
 800621c:	2b01      	cmp	r3, #1
 800621e:	d128      	bne.n	8006272 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	015a      	lsls	r2, r3, #5
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	4413      	add	r3, r2
 8006228:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68ba      	ldr	r2, [r7, #8]
 8006230:	0151      	lsls	r1, r2, #5
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	440a      	add	r2, r1
 8006236:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800623a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800623e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	791b      	ldrb	r3, [r3, #4]
 8006244:	2b03      	cmp	r3, #3
 8006246:	d003      	beq.n	8006250 <USB_EPClearStall+0x4c>
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	791b      	ldrb	r3, [r3, #4]
 800624c:	2b02      	cmp	r3, #2
 800624e:	d138      	bne.n	80062c2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	015a      	lsls	r2, r3, #5
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	4413      	add	r3, r2
 8006258:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68ba      	ldr	r2, [r7, #8]
 8006260:	0151      	lsls	r1, r2, #5
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	440a      	add	r2, r1
 8006266:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800626a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800626e:	6013      	str	r3, [r2, #0]
 8006270:	e027      	b.n	80062c2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	015a      	lsls	r2, r3, #5
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	4413      	add	r3, r2
 800627a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68ba      	ldr	r2, [r7, #8]
 8006282:	0151      	lsls	r1, r2, #5
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	440a      	add	r2, r1
 8006288:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800628c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006290:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	791b      	ldrb	r3, [r3, #4]
 8006296:	2b03      	cmp	r3, #3
 8006298:	d003      	beq.n	80062a2 <USB_EPClearStall+0x9e>
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	791b      	ldrb	r3, [r3, #4]
 800629e:	2b02      	cmp	r3, #2
 80062a0:	d10f      	bne.n	80062c2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	015a      	lsls	r2, r3, #5
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	4413      	add	r3, r2
 80062aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68ba      	ldr	r2, [r7, #8]
 80062b2:	0151      	lsls	r1, r2, #5
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	440a      	add	r2, r1
 80062b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062c0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3714      	adds	r7, #20
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b085      	sub	sp, #20
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	460b      	mov	r3, r1
 80062da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80062ee:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80062f2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	78fb      	ldrb	r3, [r7, #3]
 80062fe:	011b      	lsls	r3, r3, #4
 8006300:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006304:	68f9      	ldr	r1, [r7, #12]
 8006306:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800630a:	4313      	orrs	r3, r2
 800630c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	3714      	adds	r7, #20
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800631c:	b480      	push	{r7}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68fa      	ldr	r2, [r7, #12]
 8006332:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006336:	f023 0303 	bic.w	r3, r3, #3
 800633a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	68fa      	ldr	r2, [r7, #12]
 8006346:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800634a:	f023 0302 	bic.w	r3, r3, #2
 800634e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	3714      	adds	r7, #20
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr

0800635e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800635e:	b480      	push	{r7}
 8006360:	b085      	sub	sp, #20
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006378:	f023 0303 	bic.w	r3, r3, #3
 800637c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800638c:	f043 0302 	orr.w	r3, r3, #2
 8006390:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006392:	2300      	movs	r3, #0
}
 8006394:	4618      	mov	r0, r3
 8006396:	3714      	adds	r7, #20
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b085      	sub	sp, #20
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	695b      	ldr	r3, [r3, #20]
 80063ac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	699b      	ldr	r3, [r3, #24]
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	4013      	ands	r3, r2
 80063b6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80063b8:	68fb      	ldr	r3, [r7, #12]
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3714      	adds	r7, #20
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr

080063c6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80063c6:	b480      	push	{r7}
 80063c8:	b085      	sub	sp, #20
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063e2:	69db      	ldr	r3, [r3, #28]
 80063e4:	68ba      	ldr	r2, [r7, #8]
 80063e6:	4013      	ands	r3, r2
 80063e8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	0c1b      	lsrs	r3, r3, #16
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3714      	adds	r7, #20
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr

080063fa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80063fa:	b480      	push	{r7}
 80063fc:	b085      	sub	sp, #20
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800640c:	699b      	ldr	r3, [r3, #24]
 800640e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006416:	69db      	ldr	r3, [r3, #28]
 8006418:	68ba      	ldr	r2, [r7, #8]
 800641a:	4013      	ands	r3, r2
 800641c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	b29b      	uxth	r3, r3
}
 8006422:	4618      	mov	r0, r3
 8006424:	3714      	adds	r7, #20
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr

0800642e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800642e:	b480      	push	{r7}
 8006430:	b085      	sub	sp, #20
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
 8006436:	460b      	mov	r3, r1
 8006438:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800643e:	78fb      	ldrb	r3, [r7, #3]
 8006440:	015a      	lsls	r2, r3, #5
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	4413      	add	r3, r2
 8006446:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006454:	695b      	ldr	r3, [r3, #20]
 8006456:	68ba      	ldr	r2, [r7, #8]
 8006458:	4013      	ands	r3, r2
 800645a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800645c:	68bb      	ldr	r3, [r7, #8]
}
 800645e:	4618      	mov	r0, r3
 8006460:	3714      	adds	r7, #20
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr

0800646a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800646a:	b480      	push	{r7}
 800646c:	b087      	sub	sp, #28
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
 8006472:	460b      	mov	r3, r1
 8006474:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800648a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800648c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800648e:	78fb      	ldrb	r3, [r7, #3]
 8006490:	f003 030f 	and.w	r3, r3, #15
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	fa22 f303 	lsr.w	r3, r2, r3
 800649a:	01db      	lsls	r3, r3, #7
 800649c:	b2db      	uxtb	r3, r3
 800649e:	693a      	ldr	r2, [r7, #16]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80064a4:	78fb      	ldrb	r3, [r7, #3]
 80064a6:	015a      	lsls	r2, r3, #5
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	4413      	add	r3, r2
 80064ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	693a      	ldr	r2, [r7, #16]
 80064b4:	4013      	ands	r3, r2
 80064b6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80064b8:	68bb      	ldr	r3, [r7, #8]
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	371c      	adds	r7, #28
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr

080064c6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80064c6:	b480      	push	{r7}
 80064c8:	b083      	sub	sp, #12
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	695b      	ldr	r3, [r3, #20]
 80064d2:	f003 0301 	and.w	r3, r3, #1
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	370c      	adds	r7, #12
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr

080064e2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80064e2:	b480      	push	{r7}
 80064e4:	b085      	sub	sp, #20
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064fc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006500:	f023 0307 	bic.w	r3, r3, #7
 8006504:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006514:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006518:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	3714      	adds	r7, #20
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006528:	b480      	push	{r7}
 800652a:	b087      	sub	sp, #28
 800652c:	af00      	add	r7, sp, #0
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	460b      	mov	r3, r1
 8006532:	607a      	str	r2, [r7, #4]
 8006534:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	333c      	adds	r3, #60	@ 0x3c
 800653e:	3304      	adds	r3, #4
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	4a26      	ldr	r2, [pc, #152]	@ (80065e0 <USB_EP0_OutStart+0xb8>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d90a      	bls.n	8006562 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006558:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800655c:	d101      	bne.n	8006562 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800655e:	2300      	movs	r3, #0
 8006560:	e037      	b.n	80065d2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006568:	461a      	mov	r2, r3
 800656a:	2300      	movs	r3, #0
 800656c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	697a      	ldr	r2, [r7, #20]
 8006578:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800657c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006580:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	697a      	ldr	r2, [r7, #20]
 800658c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006590:	f043 0318 	orr.w	r3, r3, #24
 8006594:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	697a      	ldr	r2, [r7, #20]
 80065a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065a4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80065a8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80065aa:	7afb      	ldrb	r3, [r7, #11]
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d10f      	bne.n	80065d0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065b6:	461a      	mov	r2, r3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	697a      	ldr	r2, [r7, #20]
 80065c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065ca:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80065ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80065d0:	2300      	movs	r3, #0
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	371c      	adds	r7, #28
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr
 80065de:	bf00      	nop
 80065e0:	4f54300a 	.word	0x4f54300a

080065e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065ec:	2300      	movs	r3, #0
 80065ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	3301      	adds	r3, #1
 80065f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	4a13      	ldr	r2, [pc, #76]	@ (8006648 <USB_CoreReset+0x64>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d901      	bls.n	8006602 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80065fe:	2303      	movs	r3, #3
 8006600:	e01b      	b.n	800663a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	2b00      	cmp	r3, #0
 8006608:	daf2      	bge.n	80065f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800660a:	2300      	movs	r3, #0
 800660c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	f043 0201 	orr.w	r2, r3, #1
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	3301      	adds	r3, #1
 800661e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	4a09      	ldr	r2, [pc, #36]	@ (8006648 <USB_CoreReset+0x64>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d901      	bls.n	800662c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006628:	2303      	movs	r3, #3
 800662a:	e006      	b.n	800663a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	f003 0301 	and.w	r3, r3, #1
 8006634:	2b01      	cmp	r3, #1
 8006636:	d0f0      	beq.n	800661a <USB_CoreReset+0x36>

  return HAL_OK;
 8006638:	2300      	movs	r3, #0
}
 800663a:	4618      	mov	r0, r3
 800663c:	3714      	adds	r7, #20
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr
 8006646:	bf00      	nop
 8006648:	00030d40 	.word	0x00030d40

0800664c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	460b      	mov	r3, r1
 8006656:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006658:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800665c:	f002 fca0 	bl	8008fa0 <USBD_static_malloc>
 8006660:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d109      	bne.n	800667c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	32b0      	adds	r2, #176	@ 0xb0
 8006672:	2100      	movs	r1, #0
 8006674:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006678:	2302      	movs	r3, #2
 800667a:	e0d4      	b.n	8006826 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800667c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006680:	2100      	movs	r1, #0
 8006682:	68f8      	ldr	r0, [r7, #12]
 8006684:	f002 fcf0 	bl	8009068 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	32b0      	adds	r2, #176	@ 0xb0
 8006692:	68f9      	ldr	r1, [r7, #12]
 8006694:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	32b0      	adds	r2, #176	@ 0xb0
 80066a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	7c1b      	ldrb	r3, [r3, #16]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d138      	bne.n	8006726 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80066b4:	4b5e      	ldr	r3, [pc, #376]	@ (8006830 <USBD_CDC_Init+0x1e4>)
 80066b6:	7819      	ldrb	r1, [r3, #0]
 80066b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80066bc:	2202      	movs	r2, #2
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f002 fb4b 	bl	8008d5a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80066c4:	4b5a      	ldr	r3, [pc, #360]	@ (8006830 <USBD_CDC_Init+0x1e4>)
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	f003 020f 	and.w	r2, r3, #15
 80066cc:	6879      	ldr	r1, [r7, #4]
 80066ce:	4613      	mov	r3, r2
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	4413      	add	r3, r2
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	440b      	add	r3, r1
 80066d8:	3324      	adds	r3, #36	@ 0x24
 80066da:	2201      	movs	r2, #1
 80066dc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80066de:	4b55      	ldr	r3, [pc, #340]	@ (8006834 <USBD_CDC_Init+0x1e8>)
 80066e0:	7819      	ldrb	r1, [r3, #0]
 80066e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80066e6:	2202      	movs	r2, #2
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f002 fb36 	bl	8008d5a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80066ee:	4b51      	ldr	r3, [pc, #324]	@ (8006834 <USBD_CDC_Init+0x1e8>)
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	f003 020f 	and.w	r2, r3, #15
 80066f6:	6879      	ldr	r1, [r7, #4]
 80066f8:	4613      	mov	r3, r2
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	4413      	add	r3, r2
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	440b      	add	r3, r1
 8006702:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006706:	2201      	movs	r2, #1
 8006708:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800670a:	4b4b      	ldr	r3, [pc, #300]	@ (8006838 <USBD_CDC_Init+0x1ec>)
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	f003 020f 	and.w	r2, r3, #15
 8006712:	6879      	ldr	r1, [r7, #4]
 8006714:	4613      	mov	r3, r2
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	4413      	add	r3, r2
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	440b      	add	r3, r1
 800671e:	3326      	adds	r3, #38	@ 0x26
 8006720:	2210      	movs	r2, #16
 8006722:	801a      	strh	r2, [r3, #0]
 8006724:	e035      	b.n	8006792 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006726:	4b42      	ldr	r3, [pc, #264]	@ (8006830 <USBD_CDC_Init+0x1e4>)
 8006728:	7819      	ldrb	r1, [r3, #0]
 800672a:	2340      	movs	r3, #64	@ 0x40
 800672c:	2202      	movs	r2, #2
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f002 fb13 	bl	8008d5a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006734:	4b3e      	ldr	r3, [pc, #248]	@ (8006830 <USBD_CDC_Init+0x1e4>)
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	f003 020f 	and.w	r2, r3, #15
 800673c:	6879      	ldr	r1, [r7, #4]
 800673e:	4613      	mov	r3, r2
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	4413      	add	r3, r2
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	440b      	add	r3, r1
 8006748:	3324      	adds	r3, #36	@ 0x24
 800674a:	2201      	movs	r2, #1
 800674c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800674e:	4b39      	ldr	r3, [pc, #228]	@ (8006834 <USBD_CDC_Init+0x1e8>)
 8006750:	7819      	ldrb	r1, [r3, #0]
 8006752:	2340      	movs	r3, #64	@ 0x40
 8006754:	2202      	movs	r2, #2
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f002 faff 	bl	8008d5a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800675c:	4b35      	ldr	r3, [pc, #212]	@ (8006834 <USBD_CDC_Init+0x1e8>)
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	f003 020f 	and.w	r2, r3, #15
 8006764:	6879      	ldr	r1, [r7, #4]
 8006766:	4613      	mov	r3, r2
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	4413      	add	r3, r2
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	440b      	add	r3, r1
 8006770:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006774:	2201      	movs	r2, #1
 8006776:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006778:	4b2f      	ldr	r3, [pc, #188]	@ (8006838 <USBD_CDC_Init+0x1ec>)
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	f003 020f 	and.w	r2, r3, #15
 8006780:	6879      	ldr	r1, [r7, #4]
 8006782:	4613      	mov	r3, r2
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	4413      	add	r3, r2
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	440b      	add	r3, r1
 800678c:	3326      	adds	r3, #38	@ 0x26
 800678e:	2210      	movs	r2, #16
 8006790:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006792:	4b29      	ldr	r3, [pc, #164]	@ (8006838 <USBD_CDC_Init+0x1ec>)
 8006794:	7819      	ldrb	r1, [r3, #0]
 8006796:	2308      	movs	r3, #8
 8006798:	2203      	movs	r2, #3
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f002 fadd 	bl	8008d5a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80067a0:	4b25      	ldr	r3, [pc, #148]	@ (8006838 <USBD_CDC_Init+0x1ec>)
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	f003 020f 	and.w	r2, r3, #15
 80067a8:	6879      	ldr	r1, [r7, #4]
 80067aa:	4613      	mov	r3, r2
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	4413      	add	r3, r2
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	440b      	add	r3, r1
 80067b4:	3324      	adds	r3, #36	@ 0x24
 80067b6:	2201      	movs	r2, #1
 80067b8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2200      	movs	r2, #0
 80067be:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	33b0      	adds	r3, #176	@ 0xb0
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	4413      	add	r3, r2
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2200      	movs	r2, #0
 80067da:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d101      	bne.n	80067f4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80067f0:	2302      	movs	r3, #2
 80067f2:	e018      	b.n	8006826 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	7c1b      	ldrb	r3, [r3, #16]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d10a      	bne.n	8006812 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80067fc:	4b0d      	ldr	r3, [pc, #52]	@ (8006834 <USBD_CDC_Init+0x1e8>)
 80067fe:	7819      	ldrb	r1, [r3, #0]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006806:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f002 fb94 	bl	8008f38 <USBD_LL_PrepareReceive>
 8006810:	e008      	b.n	8006824 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006812:	4b08      	ldr	r3, [pc, #32]	@ (8006834 <USBD_CDC_Init+0x1e8>)
 8006814:	7819      	ldrb	r1, [r3, #0]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800681c:	2340      	movs	r3, #64	@ 0x40
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f002 fb8a 	bl	8008f38 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3710      	adds	r7, #16
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	20000093 	.word	0x20000093
 8006834:	20000094 	.word	0x20000094
 8006838:	20000095 	.word	0x20000095

0800683c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b082      	sub	sp, #8
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	460b      	mov	r3, r1
 8006846:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006848:	4b3a      	ldr	r3, [pc, #232]	@ (8006934 <USBD_CDC_DeInit+0xf8>)
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	4619      	mov	r1, r3
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f002 faa9 	bl	8008da6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006854:	4b37      	ldr	r3, [pc, #220]	@ (8006934 <USBD_CDC_DeInit+0xf8>)
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	f003 020f 	and.w	r2, r3, #15
 800685c:	6879      	ldr	r1, [r7, #4]
 800685e:	4613      	mov	r3, r2
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	4413      	add	r3, r2
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	440b      	add	r3, r1
 8006868:	3324      	adds	r3, #36	@ 0x24
 800686a:	2200      	movs	r2, #0
 800686c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800686e:	4b32      	ldr	r3, [pc, #200]	@ (8006938 <USBD_CDC_DeInit+0xfc>)
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	4619      	mov	r1, r3
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f002 fa96 	bl	8008da6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800687a:	4b2f      	ldr	r3, [pc, #188]	@ (8006938 <USBD_CDC_DeInit+0xfc>)
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	f003 020f 	and.w	r2, r3, #15
 8006882:	6879      	ldr	r1, [r7, #4]
 8006884:	4613      	mov	r3, r2
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	4413      	add	r3, r2
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	440b      	add	r3, r1
 800688e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006892:	2200      	movs	r2, #0
 8006894:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006896:	4b29      	ldr	r3, [pc, #164]	@ (800693c <USBD_CDC_DeInit+0x100>)
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	4619      	mov	r1, r3
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f002 fa82 	bl	8008da6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80068a2:	4b26      	ldr	r3, [pc, #152]	@ (800693c <USBD_CDC_DeInit+0x100>)
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	f003 020f 	and.w	r2, r3, #15
 80068aa:	6879      	ldr	r1, [r7, #4]
 80068ac:	4613      	mov	r3, r2
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	4413      	add	r3, r2
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	440b      	add	r3, r1
 80068b6:	3324      	adds	r3, #36	@ 0x24
 80068b8:	2200      	movs	r2, #0
 80068ba:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80068bc:	4b1f      	ldr	r3, [pc, #124]	@ (800693c <USBD_CDC_DeInit+0x100>)
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	f003 020f 	and.w	r2, r3, #15
 80068c4:	6879      	ldr	r1, [r7, #4]
 80068c6:	4613      	mov	r3, r2
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	4413      	add	r3, r2
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	440b      	add	r3, r1
 80068d0:	3326      	adds	r3, #38	@ 0x26
 80068d2:	2200      	movs	r2, #0
 80068d4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	32b0      	adds	r2, #176	@ 0xb0
 80068e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d01f      	beq.n	8006928 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	33b0      	adds	r3, #176	@ 0xb0
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	4413      	add	r3, r2
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	32b0      	adds	r2, #176	@ 0xb0
 8006906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800690a:	4618      	mov	r0, r3
 800690c:	f002 fb56 	bl	8008fbc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	32b0      	adds	r2, #176	@ 0xb0
 800691a:	2100      	movs	r1, #0
 800691c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	3708      	adds	r7, #8
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	20000093 	.word	0x20000093
 8006938:	20000094 	.word	0x20000094
 800693c:	20000095 	.word	0x20000095

08006940 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b086      	sub	sp, #24
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	32b0      	adds	r2, #176	@ 0xb0
 8006954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006958:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800695a:	2300      	movs	r3, #0
 800695c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800695e:	2300      	movs	r3, #0
 8006960:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006962:	2300      	movs	r3, #0
 8006964:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d101      	bne.n	8006970 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800696c:	2303      	movs	r3, #3
 800696e:	e0bf      	b.n	8006af0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006978:	2b00      	cmp	r3, #0
 800697a:	d050      	beq.n	8006a1e <USBD_CDC_Setup+0xde>
 800697c:	2b20      	cmp	r3, #32
 800697e:	f040 80af 	bne.w	8006ae0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	88db      	ldrh	r3, [r3, #6]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d03a      	beq.n	8006a00 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	b25b      	sxtb	r3, r3
 8006990:	2b00      	cmp	r3, #0
 8006992:	da1b      	bge.n	80069cc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	33b0      	adds	r3, #176	@ 0xb0
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	4413      	add	r3, r2
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	683a      	ldr	r2, [r7, #0]
 80069a8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80069aa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80069ac:	683a      	ldr	r2, [r7, #0]
 80069ae:	88d2      	ldrh	r2, [r2, #6]
 80069b0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	88db      	ldrh	r3, [r3, #6]
 80069b6:	2b07      	cmp	r3, #7
 80069b8:	bf28      	it	cs
 80069ba:	2307      	movcs	r3, #7
 80069bc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	89fa      	ldrh	r2, [r7, #14]
 80069c2:	4619      	mov	r1, r3
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f001 fd87 	bl	80084d8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80069ca:	e090      	b.n	8006aee <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	785a      	ldrb	r2, [r3, #1]
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	88db      	ldrh	r3, [r3, #6]
 80069da:	2b3f      	cmp	r3, #63	@ 0x3f
 80069dc:	d803      	bhi.n	80069e6 <USBD_CDC_Setup+0xa6>
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	88db      	ldrh	r3, [r3, #6]
 80069e2:	b2da      	uxtb	r2, r3
 80069e4:	e000      	b.n	80069e8 <USBD_CDC_Setup+0xa8>
 80069e6:	2240      	movs	r2, #64	@ 0x40
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80069ee:	6939      	ldr	r1, [r7, #16]
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80069f6:	461a      	mov	r2, r3
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f001 fd99 	bl	8008530 <USBD_CtlPrepareRx>
      break;
 80069fe:	e076      	b.n	8006aee <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	33b0      	adds	r3, #176	@ 0xb0
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	4413      	add	r3, r2
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	683a      	ldr	r2, [r7, #0]
 8006a14:	7850      	ldrb	r0, [r2, #1]
 8006a16:	2200      	movs	r2, #0
 8006a18:	6839      	ldr	r1, [r7, #0]
 8006a1a:	4798      	blx	r3
      break;
 8006a1c:	e067      	b.n	8006aee <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	785b      	ldrb	r3, [r3, #1]
 8006a22:	2b0b      	cmp	r3, #11
 8006a24:	d851      	bhi.n	8006aca <USBD_CDC_Setup+0x18a>
 8006a26:	a201      	add	r2, pc, #4	@ (adr r2, 8006a2c <USBD_CDC_Setup+0xec>)
 8006a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a2c:	08006a5d 	.word	0x08006a5d
 8006a30:	08006ad9 	.word	0x08006ad9
 8006a34:	08006acb 	.word	0x08006acb
 8006a38:	08006acb 	.word	0x08006acb
 8006a3c:	08006acb 	.word	0x08006acb
 8006a40:	08006acb 	.word	0x08006acb
 8006a44:	08006acb 	.word	0x08006acb
 8006a48:	08006acb 	.word	0x08006acb
 8006a4c:	08006acb 	.word	0x08006acb
 8006a50:	08006acb 	.word	0x08006acb
 8006a54:	08006a87 	.word	0x08006a87
 8006a58:	08006ab1 	.word	0x08006ab1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	2b03      	cmp	r3, #3
 8006a66:	d107      	bne.n	8006a78 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006a68:	f107 030a 	add.w	r3, r7, #10
 8006a6c:	2202      	movs	r2, #2
 8006a6e:	4619      	mov	r1, r3
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f001 fd31 	bl	80084d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a76:	e032      	b.n	8006ade <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006a78:	6839      	ldr	r1, [r7, #0]
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f001 fcbb 	bl	80083f6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a80:	2303      	movs	r3, #3
 8006a82:	75fb      	strb	r3, [r7, #23]
          break;
 8006a84:	e02b      	b.n	8006ade <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	2b03      	cmp	r3, #3
 8006a90:	d107      	bne.n	8006aa2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006a92:	f107 030d 	add.w	r3, r7, #13
 8006a96:	2201      	movs	r2, #1
 8006a98:	4619      	mov	r1, r3
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f001 fd1c 	bl	80084d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006aa0:	e01d      	b.n	8006ade <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006aa2:	6839      	ldr	r1, [r7, #0]
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f001 fca6 	bl	80083f6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006aaa:	2303      	movs	r3, #3
 8006aac:	75fb      	strb	r3, [r7, #23]
          break;
 8006aae:	e016      	b.n	8006ade <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	2b03      	cmp	r3, #3
 8006aba:	d00f      	beq.n	8006adc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006abc:	6839      	ldr	r1, [r7, #0]
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f001 fc99 	bl	80083f6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006ac4:	2303      	movs	r3, #3
 8006ac6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006ac8:	e008      	b.n	8006adc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006aca:	6839      	ldr	r1, [r7, #0]
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f001 fc92 	bl	80083f6 <USBD_CtlError>
          ret = USBD_FAIL;
 8006ad2:	2303      	movs	r3, #3
 8006ad4:	75fb      	strb	r3, [r7, #23]
          break;
 8006ad6:	e002      	b.n	8006ade <USBD_CDC_Setup+0x19e>
          break;
 8006ad8:	bf00      	nop
 8006ada:	e008      	b.n	8006aee <USBD_CDC_Setup+0x1ae>
          break;
 8006adc:	bf00      	nop
      }
      break;
 8006ade:	e006      	b.n	8006aee <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006ae0:	6839      	ldr	r1, [r7, #0]
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f001 fc87 	bl	80083f6 <USBD_CtlError>
      ret = USBD_FAIL;
 8006ae8:	2303      	movs	r3, #3
 8006aea:	75fb      	strb	r3, [r7, #23]
      break;
 8006aec:	bf00      	nop
  }

  return (uint8_t)ret;
 8006aee:	7dfb      	ldrb	r3, [r7, #23]
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3718      	adds	r7, #24
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	460b      	mov	r3, r1
 8006b02:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006b0a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	32b0      	adds	r2, #176	@ 0xb0
 8006b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d101      	bne.n	8006b22 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006b1e:	2303      	movs	r3, #3
 8006b20:	e065      	b.n	8006bee <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	32b0      	adds	r2, #176	@ 0xb0
 8006b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b30:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006b32:	78fb      	ldrb	r3, [r7, #3]
 8006b34:	f003 020f 	and.w	r2, r3, #15
 8006b38:	6879      	ldr	r1, [r7, #4]
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	4413      	add	r3, r2
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	440b      	add	r3, r1
 8006b44:	3318      	adds	r3, #24
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d02f      	beq.n	8006bac <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006b4c:	78fb      	ldrb	r3, [r7, #3]
 8006b4e:	f003 020f 	and.w	r2, r3, #15
 8006b52:	6879      	ldr	r1, [r7, #4]
 8006b54:	4613      	mov	r3, r2
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	4413      	add	r3, r2
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	440b      	add	r3, r1
 8006b5e:	3318      	adds	r3, #24
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	78fb      	ldrb	r3, [r7, #3]
 8006b64:	f003 010f 	and.w	r1, r3, #15
 8006b68:	68f8      	ldr	r0, [r7, #12]
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	00db      	lsls	r3, r3, #3
 8006b6e:	440b      	add	r3, r1
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	4403      	add	r3, r0
 8006b74:	3348      	adds	r3, #72	@ 0x48
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	fbb2 f1f3 	udiv	r1, r2, r3
 8006b7c:	fb01 f303 	mul.w	r3, r1, r3
 8006b80:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d112      	bne.n	8006bac <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006b86:	78fb      	ldrb	r3, [r7, #3]
 8006b88:	f003 020f 	and.w	r2, r3, #15
 8006b8c:	6879      	ldr	r1, [r7, #4]
 8006b8e:	4613      	mov	r3, r2
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	4413      	add	r3, r2
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	440b      	add	r3, r1
 8006b98:	3318      	adds	r3, #24
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006b9e:	78f9      	ldrb	r1, [r7, #3]
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f002 f9a6 	bl	8008ef6 <USBD_LL_Transmit>
 8006baa:	e01f      	b.n	8006bec <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	33b0      	adds	r3, #176	@ 0xb0
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	4413      	add	r3, r2
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d010      	beq.n	8006bec <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	33b0      	adds	r3, #176	@ 0xb0
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	4413      	add	r3, r2
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	691b      	ldr	r3, [r3, #16]
 8006bdc:	68ba      	ldr	r2, [r7, #8]
 8006bde:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006be2:	68ba      	ldr	r2, [r7, #8]
 8006be4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006be8:	78fa      	ldrb	r2, [r7, #3]
 8006bea:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3710      	adds	r7, #16
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}

08006bf6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006bf6:	b580      	push	{r7, lr}
 8006bf8:	b084      	sub	sp, #16
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
 8006bfe:	460b      	mov	r3, r1
 8006c00:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	32b0      	adds	r2, #176	@ 0xb0
 8006c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c10:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	32b0      	adds	r2, #176	@ 0xb0
 8006c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d101      	bne.n	8006c28 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006c24:	2303      	movs	r3, #3
 8006c26:	e01a      	b.n	8006c5e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006c28:	78fb      	ldrb	r3, [r7, #3]
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f002 f9a4 	bl	8008f7a <USBD_LL_GetRxDataSize>
 8006c32:	4602      	mov	r2, r0
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	33b0      	adds	r3, #176	@ 0xb0
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	4413      	add	r3, r2
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006c52:	68fa      	ldr	r2, [r7, #12]
 8006c54:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006c58:	4611      	mov	r1, r2
 8006c5a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006c5c:	2300      	movs	r3, #0
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3710      	adds	r7, #16
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}

08006c66 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006c66:	b580      	push	{r7, lr}
 8006c68:	b084      	sub	sp, #16
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	32b0      	adds	r2, #176	@ 0xb0
 8006c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c7c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d101      	bne.n	8006c88 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006c84:	2303      	movs	r3, #3
 8006c86:	e024      	b.n	8006cd2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	33b0      	adds	r3, #176	@ 0xb0
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	4413      	add	r3, r2
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d019      	beq.n	8006cd0 <USBD_CDC_EP0_RxReady+0x6a>
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006ca2:	2bff      	cmp	r3, #255	@ 0xff
 8006ca4:	d014      	beq.n	8006cd0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	33b0      	adds	r3, #176	@ 0xb0
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	4413      	add	r3, r2
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	68fa      	ldr	r2, [r7, #12]
 8006cba:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8006cbe:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006cc0:	68fa      	ldr	r2, [r7, #12]
 8006cc2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006cc6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	22ff      	movs	r2, #255	@ 0xff
 8006ccc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006cd0:	2300      	movs	r3, #0
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3710      	adds	r7, #16
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
	...

08006cdc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b086      	sub	sp, #24
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006ce4:	2182      	movs	r1, #130	@ 0x82
 8006ce6:	4818      	ldr	r0, [pc, #96]	@ (8006d48 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006ce8:	f000 fd4f 	bl	800778a <USBD_GetEpDesc>
 8006cec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006cee:	2101      	movs	r1, #1
 8006cf0:	4815      	ldr	r0, [pc, #84]	@ (8006d48 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006cf2:	f000 fd4a 	bl	800778a <USBD_GetEpDesc>
 8006cf6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006cf8:	2181      	movs	r1, #129	@ 0x81
 8006cfa:	4813      	ldr	r0, [pc, #76]	@ (8006d48 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006cfc:	f000 fd45 	bl	800778a <USBD_GetEpDesc>
 8006d00:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d002      	beq.n	8006d0e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	2210      	movs	r2, #16
 8006d0c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d006      	beq.n	8006d22 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d1c:	711a      	strb	r2, [r3, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d006      	beq.n	8006d36 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d30:	711a      	strb	r2, [r3, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2243      	movs	r2, #67	@ 0x43
 8006d3a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006d3c:	4b02      	ldr	r3, [pc, #8]	@ (8006d48 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3718      	adds	r7, #24
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop
 8006d48:	20000050 	.word	0x20000050

08006d4c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b086      	sub	sp, #24
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006d54:	2182      	movs	r1, #130	@ 0x82
 8006d56:	4818      	ldr	r0, [pc, #96]	@ (8006db8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006d58:	f000 fd17 	bl	800778a <USBD_GetEpDesc>
 8006d5c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006d5e:	2101      	movs	r1, #1
 8006d60:	4815      	ldr	r0, [pc, #84]	@ (8006db8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006d62:	f000 fd12 	bl	800778a <USBD_GetEpDesc>
 8006d66:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006d68:	2181      	movs	r1, #129	@ 0x81
 8006d6a:	4813      	ldr	r0, [pc, #76]	@ (8006db8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006d6c:	f000 fd0d 	bl	800778a <USBD_GetEpDesc>
 8006d70:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d002      	beq.n	8006d7e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	2210      	movs	r2, #16
 8006d7c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d006      	beq.n	8006d92 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	2200      	movs	r2, #0
 8006d88:	711a      	strb	r2, [r3, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f042 0202 	orr.w	r2, r2, #2
 8006d90:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d006      	beq.n	8006da6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	711a      	strb	r2, [r3, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f042 0202 	orr.w	r2, r2, #2
 8006da4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2243      	movs	r2, #67	@ 0x43
 8006daa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006dac:	4b02      	ldr	r3, [pc, #8]	@ (8006db8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3718      	adds	r7, #24
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop
 8006db8:	20000050 	.word	0x20000050

08006dbc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b086      	sub	sp, #24
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006dc4:	2182      	movs	r1, #130	@ 0x82
 8006dc6:	4818      	ldr	r0, [pc, #96]	@ (8006e28 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006dc8:	f000 fcdf 	bl	800778a <USBD_GetEpDesc>
 8006dcc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006dce:	2101      	movs	r1, #1
 8006dd0:	4815      	ldr	r0, [pc, #84]	@ (8006e28 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006dd2:	f000 fcda 	bl	800778a <USBD_GetEpDesc>
 8006dd6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006dd8:	2181      	movs	r1, #129	@ 0x81
 8006dda:	4813      	ldr	r0, [pc, #76]	@ (8006e28 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006ddc:	f000 fcd5 	bl	800778a <USBD_GetEpDesc>
 8006de0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d002      	beq.n	8006dee <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	2210      	movs	r2, #16
 8006dec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d006      	beq.n	8006e02 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	2200      	movs	r2, #0
 8006df8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006dfc:	711a      	strb	r2, [r3, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d006      	beq.n	8006e16 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006e10:	711a      	strb	r2, [r3, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2243      	movs	r2, #67	@ 0x43
 8006e1a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006e1c:	4b02      	ldr	r3, [pc, #8]	@ (8006e28 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3718      	adds	r7, #24
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	20000050 	.word	0x20000050

08006e2c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	220a      	movs	r2, #10
 8006e38:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006e3a:	4b03      	ldr	r3, [pc, #12]	@ (8006e48 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	370c      	adds	r7, #12
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr
 8006e48:	2000000c 	.word	0x2000000c

08006e4c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d101      	bne.n	8006e60 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006e5c:	2303      	movs	r3, #3
 8006e5e:	e009      	b.n	8006e74 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	33b0      	adds	r3, #176	@ 0xb0
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	4413      	add	r3, r2
 8006e6e:	683a      	ldr	r2, [r7, #0]
 8006e70:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006e72:	2300      	movs	r3, #0
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b087      	sub	sp, #28
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	60b9      	str	r1, [r7, #8]
 8006e8a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	32b0      	adds	r2, #176	@ 0xb0
 8006e96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e9a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d101      	bne.n	8006ea6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	e008      	b.n	8006eb8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	68ba      	ldr	r2, [r7, #8]
 8006eaa:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006eb6:	2300      	movs	r3, #0
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	371c      	adds	r7, #28
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b085      	sub	sp, #20
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	32b0      	adds	r2, #176	@ 0xb0
 8006ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006edc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d101      	bne.n	8006ee8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006ee4:	2303      	movs	r3, #3
 8006ee6:	e004      	b.n	8006ef2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	683a      	ldr	r2, [r7, #0]
 8006eec:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006ef0:	2300      	movs	r3, #0
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3714      	adds	r7, #20
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr
	...

08006f00 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	32b0      	adds	r2, #176	@ 0xb0
 8006f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f16:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	32b0      	adds	r2, #176	@ 0xb0
 8006f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d101      	bne.n	8006f32 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006f2e:	2303      	movs	r3, #3
 8006f30:	e025      	b.n	8006f7e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d11f      	bne.n	8006f7c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006f44:	4b10      	ldr	r3, [pc, #64]	@ (8006f88 <USBD_CDC_TransmitPacket+0x88>)
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	f003 020f 	and.w	r2, r3, #15
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	4613      	mov	r3, r2
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	4413      	add	r3, r2
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	4403      	add	r3, r0
 8006f5e:	3318      	adds	r3, #24
 8006f60:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006f62:	4b09      	ldr	r3, [pc, #36]	@ (8006f88 <USBD_CDC_TransmitPacket+0x88>)
 8006f64:	7819      	ldrb	r1, [r3, #0]
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f001 ffbf 	bl	8008ef6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3710      	adds	r7, #16
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	20000093 	.word	0x20000093

08006f8c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	32b0      	adds	r2, #176	@ 0xb0
 8006f9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fa2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	32b0      	adds	r2, #176	@ 0xb0
 8006fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d101      	bne.n	8006fba <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006fb6:	2303      	movs	r3, #3
 8006fb8:	e018      	b.n	8006fec <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	7c1b      	ldrb	r3, [r3, #16]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d10a      	bne.n	8006fd8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8006ff4 <USBD_CDC_ReceivePacket+0x68>)
 8006fc4:	7819      	ldrb	r1, [r3, #0]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006fcc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f001 ffb1 	bl	8008f38 <USBD_LL_PrepareReceive>
 8006fd6:	e008      	b.n	8006fea <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006fd8:	4b06      	ldr	r3, [pc, #24]	@ (8006ff4 <USBD_CDC_ReceivePacket+0x68>)
 8006fda:	7819      	ldrb	r1, [r3, #0]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006fe2:	2340      	movs	r3, #64	@ 0x40
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f001 ffa7 	bl	8008f38 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006fea:	2300      	movs	r3, #0
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3710      	adds	r7, #16
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}
 8006ff4:	20000094 	.word	0x20000094

08006ff8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b086      	sub	sp, #24
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	60f8      	str	r0, [r7, #12]
 8007000:	60b9      	str	r1, [r7, #8]
 8007002:	4613      	mov	r3, r2
 8007004:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d101      	bne.n	8007010 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800700c:	2303      	movs	r3, #3
 800700e:	e01f      	b.n	8007050 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2200      	movs	r2, #0
 8007014:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2200      	movs	r2, #0
 800701c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2200      	movs	r2, #0
 8007024:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d003      	beq.n	8007036 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	68ba      	ldr	r2, [r7, #8]
 8007032:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2201      	movs	r2, #1
 800703a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	79fa      	ldrb	r2, [r7, #7]
 8007042:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007044:	68f8      	ldr	r0, [r7, #12]
 8007046:	f001 fe21 	bl	8008c8c <USBD_LL_Init>
 800704a:	4603      	mov	r3, r0
 800704c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800704e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007050:	4618      	mov	r0, r3
 8007052:	3718      	adds	r7, #24
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007062:	2300      	movs	r3, #0
 8007064:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d101      	bne.n	8007070 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800706c:	2303      	movs	r3, #3
 800706e:	e025      	b.n	80070bc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	683a      	ldr	r2, [r7, #0]
 8007074:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	32ae      	adds	r2, #174	@ 0xae
 8007082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007088:	2b00      	cmp	r3, #0
 800708a:	d00f      	beq.n	80070ac <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	32ae      	adds	r2, #174	@ 0xae
 8007096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800709a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800709c:	f107 020e 	add.w	r2, r7, #14
 80070a0:	4610      	mov	r0, r2
 80070a2:	4798      	blx	r3
 80070a4:	4602      	mov	r2, r0
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80070b2:	1c5a      	adds	r2, r3, #1
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80070ba:	2300      	movs	r3, #0
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3710      	adds	r7, #16
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b082      	sub	sp, #8
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f001 fe29 	bl	8008d24 <USBD_LL_Start>
 80070d2:	4603      	mov	r3, r0
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3708      	adds	r7, #8
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80070dc:	b480      	push	{r7}
 80070de:	b083      	sub	sp, #12
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80070e4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	370c      	adds	r7, #12
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr

080070f2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b084      	sub	sp, #16
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
 80070fa:	460b      	mov	r3, r1
 80070fc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80070fe:	2300      	movs	r3, #0
 8007100:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007108:	2b00      	cmp	r3, #0
 800710a:	d009      	beq.n	8007120 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	78fa      	ldrb	r2, [r7, #3]
 8007116:	4611      	mov	r1, r2
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	4798      	blx	r3
 800711c:	4603      	mov	r3, r0
 800711e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007120:	7bfb      	ldrb	r3, [r7, #15]
}
 8007122:	4618      	mov	r0, r3
 8007124:	3710      	adds	r7, #16
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}

0800712a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800712a:	b580      	push	{r7, lr}
 800712c:	b084      	sub	sp, #16
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
 8007132:	460b      	mov	r3, r1
 8007134:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007136:	2300      	movs	r3, #0
 8007138:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	78fa      	ldrb	r2, [r7, #3]
 8007144:	4611      	mov	r1, r2
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	4798      	blx	r3
 800714a:	4603      	mov	r3, r0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d001      	beq.n	8007154 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007150:	2303      	movs	r3, #3
 8007152:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007154:	7bfb      	ldrb	r3, [r7, #15]
}
 8007156:	4618      	mov	r0, r3
 8007158:	3710      	adds	r7, #16
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}

0800715e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800715e:	b580      	push	{r7, lr}
 8007160:	b084      	sub	sp, #16
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
 8007166:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800716e:	6839      	ldr	r1, [r7, #0]
 8007170:	4618      	mov	r0, r3
 8007172:	f001 f906 	bl	8008382 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2201      	movs	r2, #1
 800717a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007184:	461a      	mov	r2, r3
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007192:	f003 031f 	and.w	r3, r3, #31
 8007196:	2b02      	cmp	r3, #2
 8007198:	d01a      	beq.n	80071d0 <USBD_LL_SetupStage+0x72>
 800719a:	2b02      	cmp	r3, #2
 800719c:	d822      	bhi.n	80071e4 <USBD_LL_SetupStage+0x86>
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d002      	beq.n	80071a8 <USBD_LL_SetupStage+0x4a>
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d00a      	beq.n	80071bc <USBD_LL_SetupStage+0x5e>
 80071a6:	e01d      	b.n	80071e4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80071ae:	4619      	mov	r1, r3
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 fb5d 	bl	8007870 <USBD_StdDevReq>
 80071b6:	4603      	mov	r3, r0
 80071b8:	73fb      	strb	r3, [r7, #15]
      break;
 80071ba:	e020      	b.n	80071fe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80071c2:	4619      	mov	r1, r3
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 fbc5 	bl	8007954 <USBD_StdItfReq>
 80071ca:	4603      	mov	r3, r0
 80071cc:	73fb      	strb	r3, [r7, #15]
      break;
 80071ce:	e016      	b.n	80071fe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80071d6:	4619      	mov	r1, r3
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 fc27 	bl	8007a2c <USBD_StdEPReq>
 80071de:	4603      	mov	r3, r0
 80071e0:	73fb      	strb	r3, [r7, #15]
      break;
 80071e2:	e00c      	b.n	80071fe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80071ea:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80071ee:	b2db      	uxtb	r3, r3
 80071f0:	4619      	mov	r1, r3
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f001 fdf6 	bl	8008de4 <USBD_LL_StallEP>
 80071f8:	4603      	mov	r3, r0
 80071fa:	73fb      	strb	r3, [r7, #15]
      break;
 80071fc:	bf00      	nop
  }

  return ret;
 80071fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007200:	4618      	mov	r0, r3
 8007202:	3710      	adds	r7, #16
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b086      	sub	sp, #24
 800720c:	af00      	add	r7, sp, #0
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	460b      	mov	r3, r1
 8007212:	607a      	str	r2, [r7, #4]
 8007214:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007216:	2300      	movs	r3, #0
 8007218:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800721a:	7afb      	ldrb	r3, [r7, #11]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d16e      	bne.n	80072fe <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007226:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800722e:	2b03      	cmp	r3, #3
 8007230:	f040 8098 	bne.w	8007364 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	689a      	ldr	r2, [r3, #8]
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	429a      	cmp	r2, r3
 800723e:	d913      	bls.n	8007268 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	689a      	ldr	r2, [r3, #8]
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	1ad2      	subs	r2, r2, r3
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	68da      	ldr	r2, [r3, #12]
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	4293      	cmp	r3, r2
 8007258:	bf28      	it	cs
 800725a:	4613      	movcs	r3, r2
 800725c:	461a      	mov	r2, r3
 800725e:	6879      	ldr	r1, [r7, #4]
 8007260:	68f8      	ldr	r0, [r7, #12]
 8007262:	f001 f982 	bl	800856a <USBD_CtlContinueRx>
 8007266:	e07d      	b.n	8007364 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800726e:	f003 031f 	and.w	r3, r3, #31
 8007272:	2b02      	cmp	r3, #2
 8007274:	d014      	beq.n	80072a0 <USBD_LL_DataOutStage+0x98>
 8007276:	2b02      	cmp	r3, #2
 8007278:	d81d      	bhi.n	80072b6 <USBD_LL_DataOutStage+0xae>
 800727a:	2b00      	cmp	r3, #0
 800727c:	d002      	beq.n	8007284 <USBD_LL_DataOutStage+0x7c>
 800727e:	2b01      	cmp	r3, #1
 8007280:	d003      	beq.n	800728a <USBD_LL_DataOutStage+0x82>
 8007282:	e018      	b.n	80072b6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007284:	2300      	movs	r3, #0
 8007286:	75bb      	strb	r3, [r7, #22]
            break;
 8007288:	e018      	b.n	80072bc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007290:	b2db      	uxtb	r3, r3
 8007292:	4619      	mov	r1, r3
 8007294:	68f8      	ldr	r0, [r7, #12]
 8007296:	f000 fa5e 	bl	8007756 <USBD_CoreFindIF>
 800729a:	4603      	mov	r3, r0
 800729c:	75bb      	strb	r3, [r7, #22]
            break;
 800729e:	e00d      	b.n	80072bc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	4619      	mov	r1, r3
 80072aa:	68f8      	ldr	r0, [r7, #12]
 80072ac:	f000 fa60 	bl	8007770 <USBD_CoreFindEP>
 80072b0:	4603      	mov	r3, r0
 80072b2:	75bb      	strb	r3, [r7, #22]
            break;
 80072b4:	e002      	b.n	80072bc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80072b6:	2300      	movs	r3, #0
 80072b8:	75bb      	strb	r3, [r7, #22]
            break;
 80072ba:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80072bc:	7dbb      	ldrb	r3, [r7, #22]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d119      	bne.n	80072f6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	2b03      	cmp	r3, #3
 80072cc:	d113      	bne.n	80072f6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80072ce:	7dba      	ldrb	r2, [r7, #22]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	32ae      	adds	r2, #174	@ 0xae
 80072d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072d8:	691b      	ldr	r3, [r3, #16]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d00b      	beq.n	80072f6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80072de:	7dba      	ldrb	r2, [r7, #22]
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80072e6:	7dba      	ldrb	r2, [r7, #22]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	32ae      	adds	r2, #174	@ 0xae
 80072ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072f0:	691b      	ldr	r3, [r3, #16]
 80072f2:	68f8      	ldr	r0, [r7, #12]
 80072f4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80072f6:	68f8      	ldr	r0, [r7, #12]
 80072f8:	f001 f948 	bl	800858c <USBD_CtlSendStatus>
 80072fc:	e032      	b.n	8007364 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80072fe:	7afb      	ldrb	r3, [r7, #11]
 8007300:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007304:	b2db      	uxtb	r3, r3
 8007306:	4619      	mov	r1, r3
 8007308:	68f8      	ldr	r0, [r7, #12]
 800730a:	f000 fa31 	bl	8007770 <USBD_CoreFindEP>
 800730e:	4603      	mov	r3, r0
 8007310:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007312:	7dbb      	ldrb	r3, [r7, #22]
 8007314:	2bff      	cmp	r3, #255	@ 0xff
 8007316:	d025      	beq.n	8007364 <USBD_LL_DataOutStage+0x15c>
 8007318:	7dbb      	ldrb	r3, [r7, #22]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d122      	bne.n	8007364 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007324:	b2db      	uxtb	r3, r3
 8007326:	2b03      	cmp	r3, #3
 8007328:	d117      	bne.n	800735a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800732a:	7dba      	ldrb	r2, [r7, #22]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	32ae      	adds	r2, #174	@ 0xae
 8007330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007334:	699b      	ldr	r3, [r3, #24]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d00f      	beq.n	800735a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800733a:	7dba      	ldrb	r2, [r7, #22]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007342:	7dba      	ldrb	r2, [r7, #22]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	32ae      	adds	r2, #174	@ 0xae
 8007348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800734c:	699b      	ldr	r3, [r3, #24]
 800734e:	7afa      	ldrb	r2, [r7, #11]
 8007350:	4611      	mov	r1, r2
 8007352:	68f8      	ldr	r0, [r7, #12]
 8007354:	4798      	blx	r3
 8007356:	4603      	mov	r3, r0
 8007358:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800735a:	7dfb      	ldrb	r3, [r7, #23]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d001      	beq.n	8007364 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007360:	7dfb      	ldrb	r3, [r7, #23]
 8007362:	e000      	b.n	8007366 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3718      	adds	r7, #24
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b086      	sub	sp, #24
 8007372:	af00      	add	r7, sp, #0
 8007374:	60f8      	str	r0, [r7, #12]
 8007376:	460b      	mov	r3, r1
 8007378:	607a      	str	r2, [r7, #4]
 800737a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800737c:	7afb      	ldrb	r3, [r7, #11]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d16f      	bne.n	8007462 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	3314      	adds	r3, #20
 8007386:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800738e:	2b02      	cmp	r3, #2
 8007390:	d15a      	bne.n	8007448 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	689a      	ldr	r2, [r3, #8]
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	68db      	ldr	r3, [r3, #12]
 800739a:	429a      	cmp	r2, r3
 800739c:	d914      	bls.n	80073c8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	689a      	ldr	r2, [r3, #8]
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	68db      	ldr	r3, [r3, #12]
 80073a6:	1ad2      	subs	r2, r2, r3
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	461a      	mov	r2, r3
 80073b2:	6879      	ldr	r1, [r7, #4]
 80073b4:	68f8      	ldr	r0, [r7, #12]
 80073b6:	f001 f8aa 	bl	800850e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073ba:	2300      	movs	r3, #0
 80073bc:	2200      	movs	r2, #0
 80073be:	2100      	movs	r1, #0
 80073c0:	68f8      	ldr	r0, [r7, #12]
 80073c2:	f001 fdb9 	bl	8008f38 <USBD_LL_PrepareReceive>
 80073c6:	e03f      	b.n	8007448 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	68da      	ldr	r2, [r3, #12]
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d11c      	bne.n	800740e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	685a      	ldr	r2, [r3, #4]
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80073dc:	429a      	cmp	r2, r3
 80073de:	d316      	bcc.n	800740e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	685a      	ldr	r2, [r3, #4]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d20f      	bcs.n	800740e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80073ee:	2200      	movs	r2, #0
 80073f0:	2100      	movs	r1, #0
 80073f2:	68f8      	ldr	r0, [r7, #12]
 80073f4:	f001 f88b 	bl	800850e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007400:	2300      	movs	r3, #0
 8007402:	2200      	movs	r2, #0
 8007404:	2100      	movs	r1, #0
 8007406:	68f8      	ldr	r0, [r7, #12]
 8007408:	f001 fd96 	bl	8008f38 <USBD_LL_PrepareReceive>
 800740c:	e01c      	b.n	8007448 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007414:	b2db      	uxtb	r3, r3
 8007416:	2b03      	cmp	r3, #3
 8007418:	d10f      	bne.n	800743a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d009      	beq.n	800743a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2200      	movs	r2, #0
 800742a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007434:	68db      	ldr	r3, [r3, #12]
 8007436:	68f8      	ldr	r0, [r7, #12]
 8007438:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800743a:	2180      	movs	r1, #128	@ 0x80
 800743c:	68f8      	ldr	r0, [r7, #12]
 800743e:	f001 fcd1 	bl	8008de4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007442:	68f8      	ldr	r0, [r7, #12]
 8007444:	f001 f8b5 	bl	80085b2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d03a      	beq.n	80074c8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007452:	68f8      	ldr	r0, [r7, #12]
 8007454:	f7ff fe42 	bl	80070dc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2200      	movs	r2, #0
 800745c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007460:	e032      	b.n	80074c8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007462:	7afb      	ldrb	r3, [r7, #11]
 8007464:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007468:	b2db      	uxtb	r3, r3
 800746a:	4619      	mov	r1, r3
 800746c:	68f8      	ldr	r0, [r7, #12]
 800746e:	f000 f97f 	bl	8007770 <USBD_CoreFindEP>
 8007472:	4603      	mov	r3, r0
 8007474:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007476:	7dfb      	ldrb	r3, [r7, #23]
 8007478:	2bff      	cmp	r3, #255	@ 0xff
 800747a:	d025      	beq.n	80074c8 <USBD_LL_DataInStage+0x15a>
 800747c:	7dfb      	ldrb	r3, [r7, #23]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d122      	bne.n	80074c8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007488:	b2db      	uxtb	r3, r3
 800748a:	2b03      	cmp	r3, #3
 800748c:	d11c      	bne.n	80074c8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800748e:	7dfa      	ldrb	r2, [r7, #23]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	32ae      	adds	r2, #174	@ 0xae
 8007494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007498:	695b      	ldr	r3, [r3, #20]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d014      	beq.n	80074c8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800749e:	7dfa      	ldrb	r2, [r7, #23]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80074a6:	7dfa      	ldrb	r2, [r7, #23]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	32ae      	adds	r2, #174	@ 0xae
 80074ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074b0:	695b      	ldr	r3, [r3, #20]
 80074b2:	7afa      	ldrb	r2, [r7, #11]
 80074b4:	4611      	mov	r1, r2
 80074b6:	68f8      	ldr	r0, [r7, #12]
 80074b8:	4798      	blx	r3
 80074ba:	4603      	mov	r3, r0
 80074bc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80074be:	7dbb      	ldrb	r3, [r7, #22]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d001      	beq.n	80074c8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80074c4:	7dbb      	ldrb	r3, [r7, #22]
 80074c6:	e000      	b.n	80074ca <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3718      	adds	r7, #24
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80074d2:	b580      	push	{r7, lr}
 80074d4:	b084      	sub	sp, #16
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80074da:	2300      	movs	r3, #0
 80074dc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2201      	movs	r2, #1
 80074e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2200      	movs	r2, #0
 80074f2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2200      	movs	r2, #0
 8007500:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800750a:	2b00      	cmp	r3, #0
 800750c:	d014      	beq.n	8007538 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d00e      	beq.n	8007538 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	6852      	ldr	r2, [r2, #4]
 8007526:	b2d2      	uxtb	r2, r2
 8007528:	4611      	mov	r1, r2
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	4798      	blx	r3
 800752e:	4603      	mov	r3, r0
 8007530:	2b00      	cmp	r3, #0
 8007532:	d001      	beq.n	8007538 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007534:	2303      	movs	r3, #3
 8007536:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007538:	2340      	movs	r3, #64	@ 0x40
 800753a:	2200      	movs	r2, #0
 800753c:	2100      	movs	r1, #0
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f001 fc0b 	bl	8008d5a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2201      	movs	r2, #1
 8007548:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2240      	movs	r2, #64	@ 0x40
 8007550:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007554:	2340      	movs	r3, #64	@ 0x40
 8007556:	2200      	movs	r2, #0
 8007558:	2180      	movs	r1, #128	@ 0x80
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f001 fbfd 	bl	8008d5a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2201      	movs	r2, #1
 8007564:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2240      	movs	r2, #64	@ 0x40
 800756a:	621a      	str	r2, [r3, #32]

  return ret;
 800756c:	7bfb      	ldrb	r3, [r7, #15]
}
 800756e:	4618      	mov	r0, r3
 8007570:	3710      	adds	r7, #16
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}

08007576 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007576:	b480      	push	{r7}
 8007578:	b083      	sub	sp, #12
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
 800757e:	460b      	mov	r3, r1
 8007580:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	78fa      	ldrb	r2, [r7, #3]
 8007586:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007588:	2300      	movs	r3, #0
}
 800758a:	4618      	mov	r0, r3
 800758c:	370c      	adds	r7, #12
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr

08007596 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007596:	b480      	push	{r7}
 8007598:	b083      	sub	sp, #12
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075a4:	b2da      	uxtb	r2, r3
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2204      	movs	r2, #4
 80075b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80075b4:	2300      	movs	r3, #0
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	370c      	adds	r7, #12
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr

080075c2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80075c2:	b480      	push	{r7}
 80075c4:	b083      	sub	sp, #12
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	2b04      	cmp	r3, #4
 80075d4:	d106      	bne.n	80075e4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80075dc:	b2da      	uxtb	r2, r3
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	370c      	adds	r7, #12
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr

080075f2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80075f2:	b580      	push	{r7, lr}
 80075f4:	b082      	sub	sp, #8
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007600:	b2db      	uxtb	r3, r3
 8007602:	2b03      	cmp	r3, #3
 8007604:	d110      	bne.n	8007628 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800760c:	2b00      	cmp	r3, #0
 800760e:	d00b      	beq.n	8007628 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007616:	69db      	ldr	r3, [r3, #28]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d005      	beq.n	8007628 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007622:	69db      	ldr	r3, [r3, #28]
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007628:	2300      	movs	r3, #0
}
 800762a:	4618      	mov	r0, r3
 800762c:	3708      	adds	r7, #8
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}

08007632 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007632:	b580      	push	{r7, lr}
 8007634:	b082      	sub	sp, #8
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
 800763a:	460b      	mov	r3, r1
 800763c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	32ae      	adds	r2, #174	@ 0xae
 8007648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d101      	bne.n	8007654 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007650:	2303      	movs	r3, #3
 8007652:	e01c      	b.n	800768e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800765a:	b2db      	uxtb	r3, r3
 800765c:	2b03      	cmp	r3, #3
 800765e:	d115      	bne.n	800768c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	32ae      	adds	r2, #174	@ 0xae
 800766a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800766e:	6a1b      	ldr	r3, [r3, #32]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d00b      	beq.n	800768c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	32ae      	adds	r2, #174	@ 0xae
 800767e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007682:	6a1b      	ldr	r3, [r3, #32]
 8007684:	78fa      	ldrb	r2, [r7, #3]
 8007686:	4611      	mov	r1, r2
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800768c:	2300      	movs	r3, #0
}
 800768e:	4618      	mov	r0, r3
 8007690:	3708      	adds	r7, #8
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}

08007696 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007696:	b580      	push	{r7, lr}
 8007698:	b082      	sub	sp, #8
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
 800769e:	460b      	mov	r3, r1
 80076a0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	32ae      	adds	r2, #174	@ 0xae
 80076ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d101      	bne.n	80076b8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80076b4:	2303      	movs	r3, #3
 80076b6:	e01c      	b.n	80076f2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	2b03      	cmp	r3, #3
 80076c2:	d115      	bne.n	80076f0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	32ae      	adds	r2, #174	@ 0xae
 80076ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d00b      	beq.n	80076f0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	32ae      	adds	r2, #174	@ 0xae
 80076e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076e8:	78fa      	ldrb	r2, [r7, #3]
 80076ea:	4611      	mov	r1, r2
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80076f0:	2300      	movs	r3, #0
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3708      	adds	r7, #8
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}

080076fa <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80076fa:	b480      	push	{r7}
 80076fc:	b083      	sub	sp, #12
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007702:	2300      	movs	r3, #0
}
 8007704:	4618      	mov	r0, r3
 8007706:	370c      	adds	r7, #12
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr

08007710 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007718:	2300      	movs	r3, #0
 800771a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2201      	movs	r2, #1
 8007720:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800772a:	2b00      	cmp	r3, #0
 800772c:	d00e      	beq.n	800774c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	6852      	ldr	r2, [r2, #4]
 800773a:	b2d2      	uxtb	r2, r2
 800773c:	4611      	mov	r1, r2
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	4798      	blx	r3
 8007742:	4603      	mov	r3, r0
 8007744:	2b00      	cmp	r3, #0
 8007746:	d001      	beq.n	800774c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007748:	2303      	movs	r3, #3
 800774a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800774c:	7bfb      	ldrb	r3, [r7, #15]
}
 800774e:	4618      	mov	r0, r3
 8007750:	3710      	adds	r7, #16
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}

08007756 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007756:	b480      	push	{r7}
 8007758:	b083      	sub	sp, #12
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
 800775e:	460b      	mov	r3, r1
 8007760:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007762:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007764:	4618      	mov	r0, r3
 8007766:	370c      	adds	r7, #12
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007770:	b480      	push	{r7}
 8007772:	b083      	sub	sp, #12
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	460b      	mov	r3, r1
 800777a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800777c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800777e:	4618      	mov	r0, r3
 8007780:	370c      	adds	r7, #12
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr

0800778a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800778a:	b580      	push	{r7, lr}
 800778c:	b086      	sub	sp, #24
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
 8007792:	460b      	mov	r3, r1
 8007794:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800779e:	2300      	movs	r3, #0
 80077a0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	885b      	ldrh	r3, [r3, #2]
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	7812      	ldrb	r2, [r2, #0]
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d91f      	bls.n	80077f0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80077b6:	e013      	b.n	80077e0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80077b8:	f107 030a 	add.w	r3, r7, #10
 80077bc:	4619      	mov	r1, r3
 80077be:	6978      	ldr	r0, [r7, #20]
 80077c0:	f000 f81b 	bl	80077fa <USBD_GetNextDesc>
 80077c4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	785b      	ldrb	r3, [r3, #1]
 80077ca:	2b05      	cmp	r3, #5
 80077cc:	d108      	bne.n	80077e0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	789b      	ldrb	r3, [r3, #2]
 80077d6:	78fa      	ldrb	r2, [r7, #3]
 80077d8:	429a      	cmp	r2, r3
 80077da:	d008      	beq.n	80077ee <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80077dc:	2300      	movs	r3, #0
 80077de:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	885b      	ldrh	r3, [r3, #2]
 80077e4:	b29a      	uxth	r2, r3
 80077e6:	897b      	ldrh	r3, [r7, #10]
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d8e5      	bhi.n	80077b8 <USBD_GetEpDesc+0x2e>
 80077ec:	e000      	b.n	80077f0 <USBD_GetEpDesc+0x66>
          break;
 80077ee:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80077f0:	693b      	ldr	r3, [r7, #16]
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3718      	adds	r7, #24
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}

080077fa <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80077fa:	b480      	push	{r7}
 80077fc:	b085      	sub	sp, #20
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
 8007802:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	881b      	ldrh	r3, [r3, #0]
 800780c:	68fa      	ldr	r2, [r7, #12]
 800780e:	7812      	ldrb	r2, [r2, #0]
 8007810:	4413      	add	r3, r2
 8007812:	b29a      	uxth	r2, r3
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	461a      	mov	r2, r3
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	4413      	add	r3, r2
 8007822:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007824:	68fb      	ldr	r3, [r7, #12]
}
 8007826:	4618      	mov	r0, r3
 8007828:	3714      	adds	r7, #20
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr

08007832 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007832:	b480      	push	{r7}
 8007834:	b087      	sub	sp, #28
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	3301      	adds	r3, #1
 8007848:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007850:	8a3b      	ldrh	r3, [r7, #16]
 8007852:	021b      	lsls	r3, r3, #8
 8007854:	b21a      	sxth	r2, r3
 8007856:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800785a:	4313      	orrs	r3, r2
 800785c:	b21b      	sxth	r3, r3
 800785e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007860:	89fb      	ldrh	r3, [r7, #14]
}
 8007862:	4618      	mov	r0, r3
 8007864:	371c      	adds	r7, #28
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr
	...

08007870 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800787a:	2300      	movs	r3, #0
 800787c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007886:	2b40      	cmp	r3, #64	@ 0x40
 8007888:	d005      	beq.n	8007896 <USBD_StdDevReq+0x26>
 800788a:	2b40      	cmp	r3, #64	@ 0x40
 800788c:	d857      	bhi.n	800793e <USBD_StdDevReq+0xce>
 800788e:	2b00      	cmp	r3, #0
 8007890:	d00f      	beq.n	80078b2 <USBD_StdDevReq+0x42>
 8007892:	2b20      	cmp	r3, #32
 8007894:	d153      	bne.n	800793e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	32ae      	adds	r2, #174	@ 0xae
 80078a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	6839      	ldr	r1, [r7, #0]
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	4798      	blx	r3
 80078ac:	4603      	mov	r3, r0
 80078ae:	73fb      	strb	r3, [r7, #15]
      break;
 80078b0:	e04a      	b.n	8007948 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	785b      	ldrb	r3, [r3, #1]
 80078b6:	2b09      	cmp	r3, #9
 80078b8:	d83b      	bhi.n	8007932 <USBD_StdDevReq+0xc2>
 80078ba:	a201      	add	r2, pc, #4	@ (adr r2, 80078c0 <USBD_StdDevReq+0x50>)
 80078bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c0:	08007915 	.word	0x08007915
 80078c4:	08007929 	.word	0x08007929
 80078c8:	08007933 	.word	0x08007933
 80078cc:	0800791f 	.word	0x0800791f
 80078d0:	08007933 	.word	0x08007933
 80078d4:	080078f3 	.word	0x080078f3
 80078d8:	080078e9 	.word	0x080078e9
 80078dc:	08007933 	.word	0x08007933
 80078e0:	0800790b 	.word	0x0800790b
 80078e4:	080078fd 	.word	0x080078fd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80078e8:	6839      	ldr	r1, [r7, #0]
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 fa3c 	bl	8007d68 <USBD_GetDescriptor>
          break;
 80078f0:	e024      	b.n	800793c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80078f2:	6839      	ldr	r1, [r7, #0]
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 fba1 	bl	800803c <USBD_SetAddress>
          break;
 80078fa:	e01f      	b.n	800793c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80078fc:	6839      	ldr	r1, [r7, #0]
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 fbe0 	bl	80080c4 <USBD_SetConfig>
 8007904:	4603      	mov	r3, r0
 8007906:	73fb      	strb	r3, [r7, #15]
          break;
 8007908:	e018      	b.n	800793c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800790a:	6839      	ldr	r1, [r7, #0]
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 fc83 	bl	8008218 <USBD_GetConfig>
          break;
 8007912:	e013      	b.n	800793c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007914:	6839      	ldr	r1, [r7, #0]
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 fcb4 	bl	8008284 <USBD_GetStatus>
          break;
 800791c:	e00e      	b.n	800793c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800791e:	6839      	ldr	r1, [r7, #0]
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 fce3 	bl	80082ec <USBD_SetFeature>
          break;
 8007926:	e009      	b.n	800793c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007928:	6839      	ldr	r1, [r7, #0]
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 fd07 	bl	800833e <USBD_ClrFeature>
          break;
 8007930:	e004      	b.n	800793c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007932:	6839      	ldr	r1, [r7, #0]
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 fd5e 	bl	80083f6 <USBD_CtlError>
          break;
 800793a:	bf00      	nop
      }
      break;
 800793c:	e004      	b.n	8007948 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800793e:	6839      	ldr	r1, [r7, #0]
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 fd58 	bl	80083f6 <USBD_CtlError>
      break;
 8007946:	bf00      	nop
  }

  return ret;
 8007948:	7bfb      	ldrb	r3, [r7, #15]
}
 800794a:	4618      	mov	r0, r3
 800794c:	3710      	adds	r7, #16
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
 8007952:	bf00      	nop

08007954 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800795e:	2300      	movs	r3, #0
 8007960:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800796a:	2b40      	cmp	r3, #64	@ 0x40
 800796c:	d005      	beq.n	800797a <USBD_StdItfReq+0x26>
 800796e:	2b40      	cmp	r3, #64	@ 0x40
 8007970:	d852      	bhi.n	8007a18 <USBD_StdItfReq+0xc4>
 8007972:	2b00      	cmp	r3, #0
 8007974:	d001      	beq.n	800797a <USBD_StdItfReq+0x26>
 8007976:	2b20      	cmp	r3, #32
 8007978:	d14e      	bne.n	8007a18 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007980:	b2db      	uxtb	r3, r3
 8007982:	3b01      	subs	r3, #1
 8007984:	2b02      	cmp	r3, #2
 8007986:	d840      	bhi.n	8007a0a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	889b      	ldrh	r3, [r3, #4]
 800798c:	b2db      	uxtb	r3, r3
 800798e:	2b01      	cmp	r3, #1
 8007990:	d836      	bhi.n	8007a00 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	889b      	ldrh	r3, [r3, #4]
 8007996:	b2db      	uxtb	r3, r3
 8007998:	4619      	mov	r1, r3
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f7ff fedb 	bl	8007756 <USBD_CoreFindIF>
 80079a0:	4603      	mov	r3, r0
 80079a2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80079a4:	7bbb      	ldrb	r3, [r7, #14]
 80079a6:	2bff      	cmp	r3, #255	@ 0xff
 80079a8:	d01d      	beq.n	80079e6 <USBD_StdItfReq+0x92>
 80079aa:	7bbb      	ldrb	r3, [r7, #14]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d11a      	bne.n	80079e6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80079b0:	7bba      	ldrb	r2, [r7, #14]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	32ae      	adds	r2, #174	@ 0xae
 80079b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d00f      	beq.n	80079e0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80079c0:	7bba      	ldrb	r2, [r7, #14]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80079c8:	7bba      	ldrb	r2, [r7, #14]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	32ae      	adds	r2, #174	@ 0xae
 80079ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	6839      	ldr	r1, [r7, #0]
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	4798      	blx	r3
 80079da:	4603      	mov	r3, r0
 80079dc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80079de:	e004      	b.n	80079ea <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80079e0:	2303      	movs	r3, #3
 80079e2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80079e4:	e001      	b.n	80079ea <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80079e6:	2303      	movs	r3, #3
 80079e8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	88db      	ldrh	r3, [r3, #6]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d110      	bne.n	8007a14 <USBD_StdItfReq+0xc0>
 80079f2:	7bfb      	ldrb	r3, [r7, #15]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d10d      	bne.n	8007a14 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 fdc7 	bl	800858c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80079fe:	e009      	b.n	8007a14 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007a00:	6839      	ldr	r1, [r7, #0]
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 fcf7 	bl	80083f6 <USBD_CtlError>
          break;
 8007a08:	e004      	b.n	8007a14 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007a0a:	6839      	ldr	r1, [r7, #0]
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 fcf2 	bl	80083f6 <USBD_CtlError>
          break;
 8007a12:	e000      	b.n	8007a16 <USBD_StdItfReq+0xc2>
          break;
 8007a14:	bf00      	nop
      }
      break;
 8007a16:	e004      	b.n	8007a22 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007a18:	6839      	ldr	r1, [r7, #0]
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 fceb 	bl	80083f6 <USBD_CtlError>
      break;
 8007a20:	bf00      	nop
  }

  return ret;
 8007a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3710      	adds	r7, #16
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007a36:	2300      	movs	r3, #0
 8007a38:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	889b      	ldrh	r3, [r3, #4]
 8007a3e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007a48:	2b40      	cmp	r3, #64	@ 0x40
 8007a4a:	d007      	beq.n	8007a5c <USBD_StdEPReq+0x30>
 8007a4c:	2b40      	cmp	r3, #64	@ 0x40
 8007a4e:	f200 817f 	bhi.w	8007d50 <USBD_StdEPReq+0x324>
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d02a      	beq.n	8007aac <USBD_StdEPReq+0x80>
 8007a56:	2b20      	cmp	r3, #32
 8007a58:	f040 817a 	bne.w	8007d50 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007a5c:	7bbb      	ldrb	r3, [r7, #14]
 8007a5e:	4619      	mov	r1, r3
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f7ff fe85 	bl	8007770 <USBD_CoreFindEP>
 8007a66:	4603      	mov	r3, r0
 8007a68:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a6a:	7b7b      	ldrb	r3, [r7, #13]
 8007a6c:	2bff      	cmp	r3, #255	@ 0xff
 8007a6e:	f000 8174 	beq.w	8007d5a <USBD_StdEPReq+0x32e>
 8007a72:	7b7b      	ldrb	r3, [r7, #13]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	f040 8170 	bne.w	8007d5a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007a7a:	7b7a      	ldrb	r2, [r7, #13]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007a82:	7b7a      	ldrb	r2, [r7, #13]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	32ae      	adds	r2, #174	@ 0xae
 8007a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a8c:	689b      	ldr	r3, [r3, #8]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	f000 8163 	beq.w	8007d5a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007a94:	7b7a      	ldrb	r2, [r7, #13]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	32ae      	adds	r2, #174	@ 0xae
 8007a9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	6839      	ldr	r1, [r7, #0]
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	4798      	blx	r3
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007aaa:	e156      	b.n	8007d5a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	785b      	ldrb	r3, [r3, #1]
 8007ab0:	2b03      	cmp	r3, #3
 8007ab2:	d008      	beq.n	8007ac6 <USBD_StdEPReq+0x9a>
 8007ab4:	2b03      	cmp	r3, #3
 8007ab6:	f300 8145 	bgt.w	8007d44 <USBD_StdEPReq+0x318>
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	f000 809b 	beq.w	8007bf6 <USBD_StdEPReq+0x1ca>
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d03c      	beq.n	8007b3e <USBD_StdEPReq+0x112>
 8007ac4:	e13e      	b.n	8007d44 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	2b02      	cmp	r3, #2
 8007ad0:	d002      	beq.n	8007ad8 <USBD_StdEPReq+0xac>
 8007ad2:	2b03      	cmp	r3, #3
 8007ad4:	d016      	beq.n	8007b04 <USBD_StdEPReq+0xd8>
 8007ad6:	e02c      	b.n	8007b32 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ad8:	7bbb      	ldrb	r3, [r7, #14]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00d      	beq.n	8007afa <USBD_StdEPReq+0xce>
 8007ade:	7bbb      	ldrb	r3, [r7, #14]
 8007ae0:	2b80      	cmp	r3, #128	@ 0x80
 8007ae2:	d00a      	beq.n	8007afa <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ae4:	7bbb      	ldrb	r3, [r7, #14]
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f001 f97b 	bl	8008de4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007aee:	2180      	movs	r1, #128	@ 0x80
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f001 f977 	bl	8008de4 <USBD_LL_StallEP>
 8007af6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007af8:	e020      	b.n	8007b3c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007afa:	6839      	ldr	r1, [r7, #0]
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 fc7a 	bl	80083f6 <USBD_CtlError>
              break;
 8007b02:	e01b      	b.n	8007b3c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	885b      	ldrh	r3, [r3, #2]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d10e      	bne.n	8007b2a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007b0c:	7bbb      	ldrb	r3, [r7, #14]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d00b      	beq.n	8007b2a <USBD_StdEPReq+0xfe>
 8007b12:	7bbb      	ldrb	r3, [r7, #14]
 8007b14:	2b80      	cmp	r3, #128	@ 0x80
 8007b16:	d008      	beq.n	8007b2a <USBD_StdEPReq+0xfe>
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	88db      	ldrh	r3, [r3, #6]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d104      	bne.n	8007b2a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b20:	7bbb      	ldrb	r3, [r7, #14]
 8007b22:	4619      	mov	r1, r3
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f001 f95d 	bl	8008de4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 fd2e 	bl	800858c <USBD_CtlSendStatus>

              break;
 8007b30:	e004      	b.n	8007b3c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007b32:	6839      	ldr	r1, [r7, #0]
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f000 fc5e 	bl	80083f6 <USBD_CtlError>
              break;
 8007b3a:	bf00      	nop
          }
          break;
 8007b3c:	e107      	b.n	8007d4e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	2b02      	cmp	r3, #2
 8007b48:	d002      	beq.n	8007b50 <USBD_StdEPReq+0x124>
 8007b4a:	2b03      	cmp	r3, #3
 8007b4c:	d016      	beq.n	8007b7c <USBD_StdEPReq+0x150>
 8007b4e:	e04b      	b.n	8007be8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b50:	7bbb      	ldrb	r3, [r7, #14]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d00d      	beq.n	8007b72 <USBD_StdEPReq+0x146>
 8007b56:	7bbb      	ldrb	r3, [r7, #14]
 8007b58:	2b80      	cmp	r3, #128	@ 0x80
 8007b5a:	d00a      	beq.n	8007b72 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b5c:	7bbb      	ldrb	r3, [r7, #14]
 8007b5e:	4619      	mov	r1, r3
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f001 f93f 	bl	8008de4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b66:	2180      	movs	r1, #128	@ 0x80
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f001 f93b 	bl	8008de4 <USBD_LL_StallEP>
 8007b6e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b70:	e040      	b.n	8007bf4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007b72:	6839      	ldr	r1, [r7, #0]
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 fc3e 	bl	80083f6 <USBD_CtlError>
              break;
 8007b7a:	e03b      	b.n	8007bf4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	885b      	ldrh	r3, [r3, #2]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d136      	bne.n	8007bf2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007b84:	7bbb      	ldrb	r3, [r7, #14]
 8007b86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d004      	beq.n	8007b98 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007b8e:	7bbb      	ldrb	r3, [r7, #14]
 8007b90:	4619      	mov	r1, r3
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f001 f945 	bl	8008e22 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 fcf7 	bl	800858c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007b9e:	7bbb      	ldrb	r3, [r7, #14]
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f7ff fde4 	bl	8007770 <USBD_CoreFindEP>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007bac:	7b7b      	ldrb	r3, [r7, #13]
 8007bae:	2bff      	cmp	r3, #255	@ 0xff
 8007bb0:	d01f      	beq.n	8007bf2 <USBD_StdEPReq+0x1c6>
 8007bb2:	7b7b      	ldrb	r3, [r7, #13]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d11c      	bne.n	8007bf2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007bb8:	7b7a      	ldrb	r2, [r7, #13]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007bc0:	7b7a      	ldrb	r2, [r7, #13]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	32ae      	adds	r2, #174	@ 0xae
 8007bc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d010      	beq.n	8007bf2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007bd0:	7b7a      	ldrb	r2, [r7, #13]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	32ae      	adds	r2, #174	@ 0xae
 8007bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	6839      	ldr	r1, [r7, #0]
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	4798      	blx	r3
 8007be2:	4603      	mov	r3, r0
 8007be4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007be6:	e004      	b.n	8007bf2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007be8:	6839      	ldr	r1, [r7, #0]
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 fc03 	bl	80083f6 <USBD_CtlError>
              break;
 8007bf0:	e000      	b.n	8007bf4 <USBD_StdEPReq+0x1c8>
              break;
 8007bf2:	bf00      	nop
          }
          break;
 8007bf4:	e0ab      	b.n	8007d4e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bfc:	b2db      	uxtb	r3, r3
 8007bfe:	2b02      	cmp	r3, #2
 8007c00:	d002      	beq.n	8007c08 <USBD_StdEPReq+0x1dc>
 8007c02:	2b03      	cmp	r3, #3
 8007c04:	d032      	beq.n	8007c6c <USBD_StdEPReq+0x240>
 8007c06:	e097      	b.n	8007d38 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c08:	7bbb      	ldrb	r3, [r7, #14]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d007      	beq.n	8007c1e <USBD_StdEPReq+0x1f2>
 8007c0e:	7bbb      	ldrb	r3, [r7, #14]
 8007c10:	2b80      	cmp	r3, #128	@ 0x80
 8007c12:	d004      	beq.n	8007c1e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007c14:	6839      	ldr	r1, [r7, #0]
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 fbed 	bl	80083f6 <USBD_CtlError>
                break;
 8007c1c:	e091      	b.n	8007d42 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	da0b      	bge.n	8007c3e <USBD_StdEPReq+0x212>
 8007c26:	7bbb      	ldrb	r3, [r7, #14]
 8007c28:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007c2c:	4613      	mov	r3, r2
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	4413      	add	r3, r2
 8007c32:	009b      	lsls	r3, r3, #2
 8007c34:	3310      	adds	r3, #16
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	4413      	add	r3, r2
 8007c3a:	3304      	adds	r3, #4
 8007c3c:	e00b      	b.n	8007c56 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c3e:	7bbb      	ldrb	r3, [r7, #14]
 8007c40:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c44:	4613      	mov	r3, r2
 8007c46:	009b      	lsls	r3, r3, #2
 8007c48:	4413      	add	r3, r2
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	4413      	add	r3, r2
 8007c54:	3304      	adds	r3, #4
 8007c56:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	2202      	movs	r2, #2
 8007c62:	4619      	mov	r1, r3
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 fc37 	bl	80084d8 <USBD_CtlSendData>
              break;
 8007c6a:	e06a      	b.n	8007d42 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007c6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	da11      	bge.n	8007c98 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007c74:	7bbb      	ldrb	r3, [r7, #14]
 8007c76:	f003 020f 	and.w	r2, r3, #15
 8007c7a:	6879      	ldr	r1, [r7, #4]
 8007c7c:	4613      	mov	r3, r2
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	4413      	add	r3, r2
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	440b      	add	r3, r1
 8007c86:	3324      	adds	r3, #36	@ 0x24
 8007c88:	881b      	ldrh	r3, [r3, #0]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d117      	bne.n	8007cbe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007c8e:	6839      	ldr	r1, [r7, #0]
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 fbb0 	bl	80083f6 <USBD_CtlError>
                  break;
 8007c96:	e054      	b.n	8007d42 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007c98:	7bbb      	ldrb	r3, [r7, #14]
 8007c9a:	f003 020f 	and.w	r2, r3, #15
 8007c9e:	6879      	ldr	r1, [r7, #4]
 8007ca0:	4613      	mov	r3, r2
 8007ca2:	009b      	lsls	r3, r3, #2
 8007ca4:	4413      	add	r3, r2
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	440b      	add	r3, r1
 8007caa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007cae:	881b      	ldrh	r3, [r3, #0]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d104      	bne.n	8007cbe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007cb4:	6839      	ldr	r1, [r7, #0]
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 fb9d 	bl	80083f6 <USBD_CtlError>
                  break;
 8007cbc:	e041      	b.n	8007d42 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007cbe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	da0b      	bge.n	8007cde <USBD_StdEPReq+0x2b2>
 8007cc6:	7bbb      	ldrb	r3, [r7, #14]
 8007cc8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007ccc:	4613      	mov	r3, r2
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	4413      	add	r3, r2
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	3310      	adds	r3, #16
 8007cd6:	687a      	ldr	r2, [r7, #4]
 8007cd8:	4413      	add	r3, r2
 8007cda:	3304      	adds	r3, #4
 8007cdc:	e00b      	b.n	8007cf6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007cde:	7bbb      	ldrb	r3, [r7, #14]
 8007ce0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ce4:	4613      	mov	r3, r2
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	4413      	add	r3, r2
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	4413      	add	r3, r2
 8007cf4:	3304      	adds	r3, #4
 8007cf6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007cf8:	7bbb      	ldrb	r3, [r7, #14]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d002      	beq.n	8007d04 <USBD_StdEPReq+0x2d8>
 8007cfe:	7bbb      	ldrb	r3, [r7, #14]
 8007d00:	2b80      	cmp	r3, #128	@ 0x80
 8007d02:	d103      	bne.n	8007d0c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	2200      	movs	r2, #0
 8007d08:	601a      	str	r2, [r3, #0]
 8007d0a:	e00e      	b.n	8007d2a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007d0c:	7bbb      	ldrb	r3, [r7, #14]
 8007d0e:	4619      	mov	r1, r3
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f001 f8a5 	bl	8008e60 <USBD_LL_IsStallEP>
 8007d16:	4603      	mov	r3, r0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d003      	beq.n	8007d24 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	601a      	str	r2, [r3, #0]
 8007d22:	e002      	b.n	8007d2a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	2200      	movs	r2, #0
 8007d28:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	2202      	movs	r2, #2
 8007d2e:	4619      	mov	r1, r3
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 fbd1 	bl	80084d8 <USBD_CtlSendData>
              break;
 8007d36:	e004      	b.n	8007d42 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007d38:	6839      	ldr	r1, [r7, #0]
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 fb5b 	bl	80083f6 <USBD_CtlError>
              break;
 8007d40:	bf00      	nop
          }
          break;
 8007d42:	e004      	b.n	8007d4e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007d44:	6839      	ldr	r1, [r7, #0]
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 fb55 	bl	80083f6 <USBD_CtlError>
          break;
 8007d4c:	bf00      	nop
      }
      break;
 8007d4e:	e005      	b.n	8007d5c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007d50:	6839      	ldr	r1, [r7, #0]
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 fb4f 	bl	80083f6 <USBD_CtlError>
      break;
 8007d58:	e000      	b.n	8007d5c <USBD_StdEPReq+0x330>
      break;
 8007d5a:	bf00      	nop
  }

  return ret;
 8007d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3710      	adds	r7, #16
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
	...

08007d68 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b084      	sub	sp, #16
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007d72:	2300      	movs	r3, #0
 8007d74:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007d76:	2300      	movs	r3, #0
 8007d78:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	885b      	ldrh	r3, [r3, #2]
 8007d82:	0a1b      	lsrs	r3, r3, #8
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	3b01      	subs	r3, #1
 8007d88:	2b06      	cmp	r3, #6
 8007d8a:	f200 8128 	bhi.w	8007fde <USBD_GetDescriptor+0x276>
 8007d8e:	a201      	add	r2, pc, #4	@ (adr r2, 8007d94 <USBD_GetDescriptor+0x2c>)
 8007d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d94:	08007db1 	.word	0x08007db1
 8007d98:	08007dc9 	.word	0x08007dc9
 8007d9c:	08007e09 	.word	0x08007e09
 8007da0:	08007fdf 	.word	0x08007fdf
 8007da4:	08007fdf 	.word	0x08007fdf
 8007da8:	08007f7f 	.word	0x08007f7f
 8007dac:	08007fab 	.word	0x08007fab
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	7c12      	ldrb	r2, [r2, #16]
 8007dbc:	f107 0108 	add.w	r1, r7, #8
 8007dc0:	4610      	mov	r0, r2
 8007dc2:	4798      	blx	r3
 8007dc4:	60f8      	str	r0, [r7, #12]
      break;
 8007dc6:	e112      	b.n	8007fee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	7c1b      	ldrb	r3, [r3, #16]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d10d      	bne.n	8007dec <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dd8:	f107 0208 	add.w	r2, r7, #8
 8007ddc:	4610      	mov	r0, r2
 8007dde:	4798      	blx	r3
 8007de0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	3301      	adds	r3, #1
 8007de6:	2202      	movs	r2, #2
 8007de8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007dea:	e100      	b.n	8007fee <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007df4:	f107 0208 	add.w	r2, r7, #8
 8007df8:	4610      	mov	r0, r2
 8007dfa:	4798      	blx	r3
 8007dfc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	3301      	adds	r3, #1
 8007e02:	2202      	movs	r2, #2
 8007e04:	701a      	strb	r2, [r3, #0]
      break;
 8007e06:	e0f2      	b.n	8007fee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	885b      	ldrh	r3, [r3, #2]
 8007e0c:	b2db      	uxtb	r3, r3
 8007e0e:	2b05      	cmp	r3, #5
 8007e10:	f200 80ac 	bhi.w	8007f6c <USBD_GetDescriptor+0x204>
 8007e14:	a201      	add	r2, pc, #4	@ (adr r2, 8007e1c <USBD_GetDescriptor+0xb4>)
 8007e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e1a:	bf00      	nop
 8007e1c:	08007e35 	.word	0x08007e35
 8007e20:	08007e69 	.word	0x08007e69
 8007e24:	08007e9d 	.word	0x08007e9d
 8007e28:	08007ed1 	.word	0x08007ed1
 8007e2c:	08007f05 	.word	0x08007f05
 8007e30:	08007f39 	.word	0x08007f39
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d00b      	beq.n	8007e58 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	7c12      	ldrb	r2, [r2, #16]
 8007e4c:	f107 0108 	add.w	r1, r7, #8
 8007e50:	4610      	mov	r0, r2
 8007e52:	4798      	blx	r3
 8007e54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e56:	e091      	b.n	8007f7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e58:	6839      	ldr	r1, [r7, #0]
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 facb 	bl	80083f6 <USBD_CtlError>
            err++;
 8007e60:	7afb      	ldrb	r3, [r7, #11]
 8007e62:	3301      	adds	r3, #1
 8007e64:	72fb      	strb	r3, [r7, #11]
          break;
 8007e66:	e089      	b.n	8007f7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d00b      	beq.n	8007e8c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	7c12      	ldrb	r2, [r2, #16]
 8007e80:	f107 0108 	add.w	r1, r7, #8
 8007e84:	4610      	mov	r0, r2
 8007e86:	4798      	blx	r3
 8007e88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e8a:	e077      	b.n	8007f7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e8c:	6839      	ldr	r1, [r7, #0]
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 fab1 	bl	80083f6 <USBD_CtlError>
            err++;
 8007e94:	7afb      	ldrb	r3, [r7, #11]
 8007e96:	3301      	adds	r3, #1
 8007e98:	72fb      	strb	r3, [r7, #11]
          break;
 8007e9a:	e06f      	b.n	8007f7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ea2:	68db      	ldr	r3, [r3, #12]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d00b      	beq.n	8007ec0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007eae:	68db      	ldr	r3, [r3, #12]
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	7c12      	ldrb	r2, [r2, #16]
 8007eb4:	f107 0108 	add.w	r1, r7, #8
 8007eb8:	4610      	mov	r0, r2
 8007eba:	4798      	blx	r3
 8007ebc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ebe:	e05d      	b.n	8007f7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ec0:	6839      	ldr	r1, [r7, #0]
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 fa97 	bl	80083f6 <USBD_CtlError>
            err++;
 8007ec8:	7afb      	ldrb	r3, [r7, #11]
 8007eca:	3301      	adds	r3, #1
 8007ecc:	72fb      	strb	r3, [r7, #11]
          break;
 8007ece:	e055      	b.n	8007f7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ed6:	691b      	ldr	r3, [r3, #16]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d00b      	beq.n	8007ef4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ee2:	691b      	ldr	r3, [r3, #16]
 8007ee4:	687a      	ldr	r2, [r7, #4]
 8007ee6:	7c12      	ldrb	r2, [r2, #16]
 8007ee8:	f107 0108 	add.w	r1, r7, #8
 8007eec:	4610      	mov	r0, r2
 8007eee:	4798      	blx	r3
 8007ef0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ef2:	e043      	b.n	8007f7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ef4:	6839      	ldr	r1, [r7, #0]
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 fa7d 	bl	80083f6 <USBD_CtlError>
            err++;
 8007efc:	7afb      	ldrb	r3, [r7, #11]
 8007efe:	3301      	adds	r3, #1
 8007f00:	72fb      	strb	r3, [r7, #11]
          break;
 8007f02:	e03b      	b.n	8007f7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f0a:	695b      	ldr	r3, [r3, #20]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d00b      	beq.n	8007f28 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f16:	695b      	ldr	r3, [r3, #20]
 8007f18:	687a      	ldr	r2, [r7, #4]
 8007f1a:	7c12      	ldrb	r2, [r2, #16]
 8007f1c:	f107 0108 	add.w	r1, r7, #8
 8007f20:	4610      	mov	r0, r2
 8007f22:	4798      	blx	r3
 8007f24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f26:	e029      	b.n	8007f7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f28:	6839      	ldr	r1, [r7, #0]
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 fa63 	bl	80083f6 <USBD_CtlError>
            err++;
 8007f30:	7afb      	ldrb	r3, [r7, #11]
 8007f32:	3301      	adds	r3, #1
 8007f34:	72fb      	strb	r3, [r7, #11]
          break;
 8007f36:	e021      	b.n	8007f7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f3e:	699b      	ldr	r3, [r3, #24]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d00b      	beq.n	8007f5c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f4a:	699b      	ldr	r3, [r3, #24]
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	7c12      	ldrb	r2, [r2, #16]
 8007f50:	f107 0108 	add.w	r1, r7, #8
 8007f54:	4610      	mov	r0, r2
 8007f56:	4798      	blx	r3
 8007f58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f5a:	e00f      	b.n	8007f7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f5c:	6839      	ldr	r1, [r7, #0]
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 fa49 	bl	80083f6 <USBD_CtlError>
            err++;
 8007f64:	7afb      	ldrb	r3, [r7, #11]
 8007f66:	3301      	adds	r3, #1
 8007f68:	72fb      	strb	r3, [r7, #11]
          break;
 8007f6a:	e007      	b.n	8007f7c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007f6c:	6839      	ldr	r1, [r7, #0]
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 fa41 	bl	80083f6 <USBD_CtlError>
          err++;
 8007f74:	7afb      	ldrb	r3, [r7, #11]
 8007f76:	3301      	adds	r3, #1
 8007f78:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007f7a:	bf00      	nop
      }
      break;
 8007f7c:	e037      	b.n	8007fee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	7c1b      	ldrb	r3, [r3, #16]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d109      	bne.n	8007f9a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f8e:	f107 0208 	add.w	r2, r7, #8
 8007f92:	4610      	mov	r0, r2
 8007f94:	4798      	blx	r3
 8007f96:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f98:	e029      	b.n	8007fee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f9a:	6839      	ldr	r1, [r7, #0]
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f000 fa2a 	bl	80083f6 <USBD_CtlError>
        err++;
 8007fa2:	7afb      	ldrb	r3, [r7, #11]
 8007fa4:	3301      	adds	r3, #1
 8007fa6:	72fb      	strb	r3, [r7, #11]
      break;
 8007fa8:	e021      	b.n	8007fee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	7c1b      	ldrb	r3, [r3, #16]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d10d      	bne.n	8007fce <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fba:	f107 0208 	add.w	r2, r7, #8
 8007fbe:	4610      	mov	r0, r2
 8007fc0:	4798      	blx	r3
 8007fc2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	3301      	adds	r3, #1
 8007fc8:	2207      	movs	r2, #7
 8007fca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007fcc:	e00f      	b.n	8007fee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007fce:	6839      	ldr	r1, [r7, #0]
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f000 fa10 	bl	80083f6 <USBD_CtlError>
        err++;
 8007fd6:	7afb      	ldrb	r3, [r7, #11]
 8007fd8:	3301      	adds	r3, #1
 8007fda:	72fb      	strb	r3, [r7, #11]
      break;
 8007fdc:	e007      	b.n	8007fee <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007fde:	6839      	ldr	r1, [r7, #0]
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 fa08 	bl	80083f6 <USBD_CtlError>
      err++;
 8007fe6:	7afb      	ldrb	r3, [r7, #11]
 8007fe8:	3301      	adds	r3, #1
 8007fea:	72fb      	strb	r3, [r7, #11]
      break;
 8007fec:	bf00      	nop
  }

  if (err != 0U)
 8007fee:	7afb      	ldrb	r3, [r7, #11]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d11e      	bne.n	8008032 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	88db      	ldrh	r3, [r3, #6]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d016      	beq.n	800802a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007ffc:	893b      	ldrh	r3, [r7, #8]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d00e      	beq.n	8008020 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	88da      	ldrh	r2, [r3, #6]
 8008006:	893b      	ldrh	r3, [r7, #8]
 8008008:	4293      	cmp	r3, r2
 800800a:	bf28      	it	cs
 800800c:	4613      	movcs	r3, r2
 800800e:	b29b      	uxth	r3, r3
 8008010:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008012:	893b      	ldrh	r3, [r7, #8]
 8008014:	461a      	mov	r2, r3
 8008016:	68f9      	ldr	r1, [r7, #12]
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f000 fa5d 	bl	80084d8 <USBD_CtlSendData>
 800801e:	e009      	b.n	8008034 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008020:	6839      	ldr	r1, [r7, #0]
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 f9e7 	bl	80083f6 <USBD_CtlError>
 8008028:	e004      	b.n	8008034 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 faae 	bl	800858c <USBD_CtlSendStatus>
 8008030:	e000      	b.n	8008034 <USBD_GetDescriptor+0x2cc>
    return;
 8008032:	bf00      	nop
  }
}
 8008034:	3710      	adds	r7, #16
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop

0800803c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b084      	sub	sp, #16
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	889b      	ldrh	r3, [r3, #4]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d131      	bne.n	80080b2 <USBD_SetAddress+0x76>
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	88db      	ldrh	r3, [r3, #6]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d12d      	bne.n	80080b2 <USBD_SetAddress+0x76>
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	885b      	ldrh	r3, [r3, #2]
 800805a:	2b7f      	cmp	r3, #127	@ 0x7f
 800805c:	d829      	bhi.n	80080b2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	885b      	ldrh	r3, [r3, #2]
 8008062:	b2db      	uxtb	r3, r3
 8008064:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008068:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008070:	b2db      	uxtb	r3, r3
 8008072:	2b03      	cmp	r3, #3
 8008074:	d104      	bne.n	8008080 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008076:	6839      	ldr	r1, [r7, #0]
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 f9bc 	bl	80083f6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800807e:	e01d      	b.n	80080bc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	7bfa      	ldrb	r2, [r7, #15]
 8008084:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008088:	7bfb      	ldrb	r3, [r7, #15]
 800808a:	4619      	mov	r1, r3
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 ff13 	bl	8008eb8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 fa7a 	bl	800858c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008098:	7bfb      	ldrb	r3, [r7, #15]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d004      	beq.n	80080a8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2202      	movs	r2, #2
 80080a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080a6:	e009      	b.n	80080bc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2201      	movs	r2, #1
 80080ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080b0:	e004      	b.n	80080bc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80080b2:	6839      	ldr	r1, [r7, #0]
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 f99e 	bl	80083f6 <USBD_CtlError>
  }
}
 80080ba:	bf00      	nop
 80080bc:	bf00      	nop
 80080be:	3710      	adds	r7, #16
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080ce:	2300      	movs	r3, #0
 80080d0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	885b      	ldrh	r3, [r3, #2]
 80080d6:	b2da      	uxtb	r2, r3
 80080d8:	4b4e      	ldr	r3, [pc, #312]	@ (8008214 <USBD_SetConfig+0x150>)
 80080da:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80080dc:	4b4d      	ldr	r3, [pc, #308]	@ (8008214 <USBD_SetConfig+0x150>)
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d905      	bls.n	80080f0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80080e4:	6839      	ldr	r1, [r7, #0]
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 f985 	bl	80083f6 <USBD_CtlError>
    return USBD_FAIL;
 80080ec:	2303      	movs	r3, #3
 80080ee:	e08c      	b.n	800820a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080f6:	b2db      	uxtb	r3, r3
 80080f8:	2b02      	cmp	r3, #2
 80080fa:	d002      	beq.n	8008102 <USBD_SetConfig+0x3e>
 80080fc:	2b03      	cmp	r3, #3
 80080fe:	d029      	beq.n	8008154 <USBD_SetConfig+0x90>
 8008100:	e075      	b.n	80081ee <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008102:	4b44      	ldr	r3, [pc, #272]	@ (8008214 <USBD_SetConfig+0x150>)
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d020      	beq.n	800814c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800810a:	4b42      	ldr	r3, [pc, #264]	@ (8008214 <USBD_SetConfig+0x150>)
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	461a      	mov	r2, r3
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008114:	4b3f      	ldr	r3, [pc, #252]	@ (8008214 <USBD_SetConfig+0x150>)
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	4619      	mov	r1, r3
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f7fe ffe9 	bl	80070f2 <USBD_SetClassConfig>
 8008120:	4603      	mov	r3, r0
 8008122:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008124:	7bfb      	ldrb	r3, [r7, #15]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d008      	beq.n	800813c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800812a:	6839      	ldr	r1, [r7, #0]
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 f962 	bl	80083f6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2202      	movs	r2, #2
 8008136:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800813a:	e065      	b.n	8008208 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 fa25 	bl	800858c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2203      	movs	r2, #3
 8008146:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800814a:	e05d      	b.n	8008208 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 fa1d 	bl	800858c <USBD_CtlSendStatus>
      break;
 8008152:	e059      	b.n	8008208 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008154:	4b2f      	ldr	r3, [pc, #188]	@ (8008214 <USBD_SetConfig+0x150>)
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d112      	bne.n	8008182 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2202      	movs	r2, #2
 8008160:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008164:	4b2b      	ldr	r3, [pc, #172]	@ (8008214 <USBD_SetConfig+0x150>)
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	461a      	mov	r2, r3
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800816e:	4b29      	ldr	r3, [pc, #164]	@ (8008214 <USBD_SetConfig+0x150>)
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	4619      	mov	r1, r3
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f7fe ffd8 	bl	800712a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 fa06 	bl	800858c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008180:	e042      	b.n	8008208 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008182:	4b24      	ldr	r3, [pc, #144]	@ (8008214 <USBD_SetConfig+0x150>)
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	461a      	mov	r2, r3
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	429a      	cmp	r2, r3
 800818e:	d02a      	beq.n	80081e6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	b2db      	uxtb	r3, r3
 8008196:	4619      	mov	r1, r3
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f7fe ffc6 	bl	800712a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800819e:	4b1d      	ldr	r3, [pc, #116]	@ (8008214 <USBD_SetConfig+0x150>)
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	461a      	mov	r2, r3
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80081a8:	4b1a      	ldr	r3, [pc, #104]	@ (8008214 <USBD_SetConfig+0x150>)
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	4619      	mov	r1, r3
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f7fe ff9f 	bl	80070f2 <USBD_SetClassConfig>
 80081b4:	4603      	mov	r3, r0
 80081b6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80081b8:	7bfb      	ldrb	r3, [r7, #15]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d00f      	beq.n	80081de <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80081be:	6839      	ldr	r1, [r7, #0]
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 f918 	bl	80083f6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	4619      	mov	r1, r3
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f7fe ffab 	bl	800712a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2202      	movs	r2, #2
 80081d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80081dc:	e014      	b.n	8008208 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 f9d4 	bl	800858c <USBD_CtlSendStatus>
      break;
 80081e4:	e010      	b.n	8008208 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 f9d0 	bl	800858c <USBD_CtlSendStatus>
      break;
 80081ec:	e00c      	b.n	8008208 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80081ee:	6839      	ldr	r1, [r7, #0]
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 f900 	bl	80083f6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80081f6:	4b07      	ldr	r3, [pc, #28]	@ (8008214 <USBD_SetConfig+0x150>)
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	4619      	mov	r1, r3
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f7fe ff94 	bl	800712a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008202:	2303      	movs	r3, #3
 8008204:	73fb      	strb	r3, [r7, #15]
      break;
 8008206:	bf00      	nop
  }

  return ret;
 8008208:	7bfb      	ldrb	r3, [r7, #15]
}
 800820a:	4618      	mov	r0, r3
 800820c:	3710      	adds	r7, #16
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	200002ec 	.word	0x200002ec

08008218 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	88db      	ldrh	r3, [r3, #6]
 8008226:	2b01      	cmp	r3, #1
 8008228:	d004      	beq.n	8008234 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800822a:	6839      	ldr	r1, [r7, #0]
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f000 f8e2 	bl	80083f6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008232:	e023      	b.n	800827c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800823a:	b2db      	uxtb	r3, r3
 800823c:	2b02      	cmp	r3, #2
 800823e:	dc02      	bgt.n	8008246 <USBD_GetConfig+0x2e>
 8008240:	2b00      	cmp	r3, #0
 8008242:	dc03      	bgt.n	800824c <USBD_GetConfig+0x34>
 8008244:	e015      	b.n	8008272 <USBD_GetConfig+0x5a>
 8008246:	2b03      	cmp	r3, #3
 8008248:	d00b      	beq.n	8008262 <USBD_GetConfig+0x4a>
 800824a:	e012      	b.n	8008272 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	3308      	adds	r3, #8
 8008256:	2201      	movs	r2, #1
 8008258:	4619      	mov	r1, r3
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 f93c 	bl	80084d8 <USBD_CtlSendData>
        break;
 8008260:	e00c      	b.n	800827c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	3304      	adds	r3, #4
 8008266:	2201      	movs	r2, #1
 8008268:	4619      	mov	r1, r3
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 f934 	bl	80084d8 <USBD_CtlSendData>
        break;
 8008270:	e004      	b.n	800827c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008272:	6839      	ldr	r1, [r7, #0]
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f000 f8be 	bl	80083f6 <USBD_CtlError>
        break;
 800827a:	bf00      	nop
}
 800827c:	bf00      	nop
 800827e:	3708      	adds	r7, #8
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008294:	b2db      	uxtb	r3, r3
 8008296:	3b01      	subs	r3, #1
 8008298:	2b02      	cmp	r3, #2
 800829a:	d81e      	bhi.n	80082da <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	88db      	ldrh	r3, [r3, #6]
 80082a0:	2b02      	cmp	r3, #2
 80082a2:	d004      	beq.n	80082ae <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80082a4:	6839      	ldr	r1, [r7, #0]
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 f8a5 	bl	80083f6 <USBD_CtlError>
        break;
 80082ac:	e01a      	b.n	80082e4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2201      	movs	r2, #1
 80082b2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d005      	beq.n	80082ca <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	f043 0202 	orr.w	r2, r3, #2
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	330c      	adds	r3, #12
 80082ce:	2202      	movs	r2, #2
 80082d0:	4619      	mov	r1, r3
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 f900 	bl	80084d8 <USBD_CtlSendData>
      break;
 80082d8:	e004      	b.n	80082e4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80082da:	6839      	ldr	r1, [r7, #0]
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f000 f88a 	bl	80083f6 <USBD_CtlError>
      break;
 80082e2:	bf00      	nop
  }
}
 80082e4:	bf00      	nop
 80082e6:	3708      	adds	r7, #8
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b082      	sub	sp, #8
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	885b      	ldrh	r3, [r3, #2]
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d107      	bne.n	800830e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2201      	movs	r2, #1
 8008302:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 f940 	bl	800858c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800830c:	e013      	b.n	8008336 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	885b      	ldrh	r3, [r3, #2]
 8008312:	2b02      	cmp	r3, #2
 8008314:	d10b      	bne.n	800832e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	889b      	ldrh	r3, [r3, #4]
 800831a:	0a1b      	lsrs	r3, r3, #8
 800831c:	b29b      	uxth	r3, r3
 800831e:	b2da      	uxtb	r2, r3
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 f930 	bl	800858c <USBD_CtlSendStatus>
}
 800832c:	e003      	b.n	8008336 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800832e:	6839      	ldr	r1, [r7, #0]
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f000 f860 	bl	80083f6 <USBD_CtlError>
}
 8008336:	bf00      	nop
 8008338:	3708      	adds	r7, #8
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}

0800833e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800833e:	b580      	push	{r7, lr}
 8008340:	b082      	sub	sp, #8
 8008342:	af00      	add	r7, sp, #0
 8008344:	6078      	str	r0, [r7, #4]
 8008346:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800834e:	b2db      	uxtb	r3, r3
 8008350:	3b01      	subs	r3, #1
 8008352:	2b02      	cmp	r3, #2
 8008354:	d80b      	bhi.n	800836e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	885b      	ldrh	r3, [r3, #2]
 800835a:	2b01      	cmp	r3, #1
 800835c:	d10c      	bne.n	8008378 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2200      	movs	r2, #0
 8008362:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 f910 	bl	800858c <USBD_CtlSendStatus>
      }
      break;
 800836c:	e004      	b.n	8008378 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800836e:	6839      	ldr	r1, [r7, #0]
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f000 f840 	bl	80083f6 <USBD_CtlError>
      break;
 8008376:	e000      	b.n	800837a <USBD_ClrFeature+0x3c>
      break;
 8008378:	bf00      	nop
  }
}
 800837a:	bf00      	nop
 800837c:	3708      	adds	r7, #8
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}

08008382 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008382:	b580      	push	{r7, lr}
 8008384:	b084      	sub	sp, #16
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]
 800838a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	781a      	ldrb	r2, [r3, #0]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	3301      	adds	r3, #1
 800839c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	781a      	ldrb	r2, [r3, #0]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	3301      	adds	r3, #1
 80083aa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80083ac:	68f8      	ldr	r0, [r7, #12]
 80083ae:	f7ff fa40 	bl	8007832 <SWAPBYTE>
 80083b2:	4603      	mov	r3, r0
 80083b4:	461a      	mov	r2, r3
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	3301      	adds	r3, #1
 80083be:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	3301      	adds	r3, #1
 80083c4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80083c6:	68f8      	ldr	r0, [r7, #12]
 80083c8:	f7ff fa33 	bl	8007832 <SWAPBYTE>
 80083cc:	4603      	mov	r3, r0
 80083ce:	461a      	mov	r2, r3
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	3301      	adds	r3, #1
 80083d8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	3301      	adds	r3, #1
 80083de:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80083e0:	68f8      	ldr	r0, [r7, #12]
 80083e2:	f7ff fa26 	bl	8007832 <SWAPBYTE>
 80083e6:	4603      	mov	r3, r0
 80083e8:	461a      	mov	r2, r3
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	80da      	strh	r2, [r3, #6]
}
 80083ee:	bf00      	nop
 80083f0:	3710      	adds	r7, #16
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}

080083f6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083f6:	b580      	push	{r7, lr}
 80083f8:	b082      	sub	sp, #8
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
 80083fe:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008400:	2180      	movs	r1, #128	@ 0x80
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 fcee 	bl	8008de4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008408:	2100      	movs	r1, #0
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 fcea 	bl	8008de4 <USBD_LL_StallEP>
}
 8008410:	bf00      	nop
 8008412:	3708      	adds	r7, #8
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b086      	sub	sp, #24
 800841c:	af00      	add	r7, sp, #0
 800841e:	60f8      	str	r0, [r7, #12]
 8008420:	60b9      	str	r1, [r7, #8]
 8008422:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008424:	2300      	movs	r3, #0
 8008426:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d036      	beq.n	800849c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008432:	6938      	ldr	r0, [r7, #16]
 8008434:	f000 f836 	bl	80084a4 <USBD_GetLen>
 8008438:	4603      	mov	r3, r0
 800843a:	3301      	adds	r3, #1
 800843c:	b29b      	uxth	r3, r3
 800843e:	005b      	lsls	r3, r3, #1
 8008440:	b29a      	uxth	r2, r3
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008446:	7dfb      	ldrb	r3, [r7, #23]
 8008448:	68ba      	ldr	r2, [r7, #8]
 800844a:	4413      	add	r3, r2
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	7812      	ldrb	r2, [r2, #0]
 8008450:	701a      	strb	r2, [r3, #0]
  idx++;
 8008452:	7dfb      	ldrb	r3, [r7, #23]
 8008454:	3301      	adds	r3, #1
 8008456:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008458:	7dfb      	ldrb	r3, [r7, #23]
 800845a:	68ba      	ldr	r2, [r7, #8]
 800845c:	4413      	add	r3, r2
 800845e:	2203      	movs	r2, #3
 8008460:	701a      	strb	r2, [r3, #0]
  idx++;
 8008462:	7dfb      	ldrb	r3, [r7, #23]
 8008464:	3301      	adds	r3, #1
 8008466:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008468:	e013      	b.n	8008492 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800846a:	7dfb      	ldrb	r3, [r7, #23]
 800846c:	68ba      	ldr	r2, [r7, #8]
 800846e:	4413      	add	r3, r2
 8008470:	693a      	ldr	r2, [r7, #16]
 8008472:	7812      	ldrb	r2, [r2, #0]
 8008474:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	3301      	adds	r3, #1
 800847a:	613b      	str	r3, [r7, #16]
    idx++;
 800847c:	7dfb      	ldrb	r3, [r7, #23]
 800847e:	3301      	adds	r3, #1
 8008480:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008482:	7dfb      	ldrb	r3, [r7, #23]
 8008484:	68ba      	ldr	r2, [r7, #8]
 8008486:	4413      	add	r3, r2
 8008488:	2200      	movs	r2, #0
 800848a:	701a      	strb	r2, [r3, #0]
    idx++;
 800848c:	7dfb      	ldrb	r3, [r7, #23]
 800848e:	3301      	adds	r3, #1
 8008490:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	781b      	ldrb	r3, [r3, #0]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d1e7      	bne.n	800846a <USBD_GetString+0x52>
 800849a:	e000      	b.n	800849e <USBD_GetString+0x86>
    return;
 800849c:	bf00      	nop
  }
}
 800849e:	3718      	adds	r7, #24
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b085      	sub	sp, #20
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80084ac:	2300      	movs	r3, #0
 80084ae:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80084b4:	e005      	b.n	80084c2 <USBD_GetLen+0x1e>
  {
    len++;
 80084b6:	7bfb      	ldrb	r3, [r7, #15]
 80084b8:	3301      	adds	r3, #1
 80084ba:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	3301      	adds	r3, #1
 80084c0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	781b      	ldrb	r3, [r3, #0]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d1f5      	bne.n	80084b6 <USBD_GetLen+0x12>
  }

  return len;
 80084ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3714      	adds	r7, #20
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr

080084d8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	60f8      	str	r0, [r7, #12]
 80084e0:	60b9      	str	r1, [r7, #8]
 80084e2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2202      	movs	r2, #2
 80084e8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	687a      	ldr	r2, [r7, #4]
 80084f0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	68ba      	ldr	r2, [r7, #8]
 80084fc:	2100      	movs	r1, #0
 80084fe:	68f8      	ldr	r0, [r7, #12]
 8008500:	f000 fcf9 	bl	8008ef6 <USBD_LL_Transmit>

  return USBD_OK;
 8008504:	2300      	movs	r3, #0
}
 8008506:	4618      	mov	r0, r3
 8008508:	3710      	adds	r7, #16
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}

0800850e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800850e:	b580      	push	{r7, lr}
 8008510:	b084      	sub	sp, #16
 8008512:	af00      	add	r7, sp, #0
 8008514:	60f8      	str	r0, [r7, #12]
 8008516:	60b9      	str	r1, [r7, #8]
 8008518:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	68ba      	ldr	r2, [r7, #8]
 800851e:	2100      	movs	r1, #0
 8008520:	68f8      	ldr	r0, [r7, #12]
 8008522:	f000 fce8 	bl	8008ef6 <USBD_LL_Transmit>

  return USBD_OK;
 8008526:	2300      	movs	r3, #0
}
 8008528:	4618      	mov	r0, r3
 800852a:	3710      	adds	r7, #16
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b084      	sub	sp, #16
 8008534:	af00      	add	r7, sp, #0
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	60b9      	str	r1, [r7, #8]
 800853a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2203      	movs	r2, #3
 8008540:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	687a      	ldr	r2, [r7, #4]
 8008548:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	68ba      	ldr	r2, [r7, #8]
 8008558:	2100      	movs	r1, #0
 800855a:	68f8      	ldr	r0, [r7, #12]
 800855c:	f000 fcec 	bl	8008f38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	3710      	adds	r7, #16
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}

0800856a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800856a:	b580      	push	{r7, lr}
 800856c:	b084      	sub	sp, #16
 800856e:	af00      	add	r7, sp, #0
 8008570:	60f8      	str	r0, [r7, #12]
 8008572:	60b9      	str	r1, [r7, #8]
 8008574:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	68ba      	ldr	r2, [r7, #8]
 800857a:	2100      	movs	r1, #0
 800857c:	68f8      	ldr	r0, [r7, #12]
 800857e:	f000 fcdb 	bl	8008f38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008582:	2300      	movs	r3, #0
}
 8008584:	4618      	mov	r0, r3
 8008586:	3710      	adds	r7, #16
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b082      	sub	sp, #8
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2204      	movs	r2, #4
 8008598:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800859c:	2300      	movs	r3, #0
 800859e:	2200      	movs	r2, #0
 80085a0:	2100      	movs	r1, #0
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 fca7 	bl	8008ef6 <USBD_LL_Transmit>

  return USBD_OK;
 80085a8:	2300      	movs	r3, #0
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3708      	adds	r7, #8
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}

080085b2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80085b2:	b580      	push	{r7, lr}
 80085b4:	b082      	sub	sp, #8
 80085b6:	af00      	add	r7, sp, #0
 80085b8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2205      	movs	r2, #5
 80085be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80085c2:	2300      	movs	r3, #0
 80085c4:	2200      	movs	r2, #0
 80085c6:	2100      	movs	r1, #0
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 fcb5 	bl	8008f38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80085ce:	2300      	movs	r3, #0
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3708      	adds	r7, #8
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80085dc:	2200      	movs	r2, #0
 80085de:	4912      	ldr	r1, [pc, #72]	@ (8008628 <MX_USB_DEVICE_Init+0x50>)
 80085e0:	4812      	ldr	r0, [pc, #72]	@ (800862c <MX_USB_DEVICE_Init+0x54>)
 80085e2:	f7fe fd09 	bl	8006ff8 <USBD_Init>
 80085e6:	4603      	mov	r3, r0
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d001      	beq.n	80085f0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80085ec:	f7f9 f928 	bl	8001840 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80085f0:	490f      	ldr	r1, [pc, #60]	@ (8008630 <MX_USB_DEVICE_Init+0x58>)
 80085f2:	480e      	ldr	r0, [pc, #56]	@ (800862c <MX_USB_DEVICE_Init+0x54>)
 80085f4:	f7fe fd30 	bl	8007058 <USBD_RegisterClass>
 80085f8:	4603      	mov	r3, r0
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d001      	beq.n	8008602 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80085fe:	f7f9 f91f 	bl	8001840 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008602:	490c      	ldr	r1, [pc, #48]	@ (8008634 <MX_USB_DEVICE_Init+0x5c>)
 8008604:	4809      	ldr	r0, [pc, #36]	@ (800862c <MX_USB_DEVICE_Init+0x54>)
 8008606:	f7fe fc21 	bl	8006e4c <USBD_CDC_RegisterInterface>
 800860a:	4603      	mov	r3, r0
 800860c:	2b00      	cmp	r3, #0
 800860e:	d001      	beq.n	8008614 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008610:	f7f9 f916 	bl	8001840 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008614:	4805      	ldr	r0, [pc, #20]	@ (800862c <MX_USB_DEVICE_Init+0x54>)
 8008616:	f7fe fd55 	bl	80070c4 <USBD_Start>
 800861a:	4603      	mov	r3, r0
 800861c:	2b00      	cmp	r3, #0
 800861e:	d001      	beq.n	8008624 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008620:	f7f9 f90e 	bl	8001840 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008624:	bf00      	nop
 8008626:	bd80      	pop	{r7, pc}
 8008628:	200000ac 	.word	0x200000ac
 800862c:	200002f0 	.word	0x200002f0
 8008630:	20000018 	.word	0x20000018
 8008634:	20000098 	.word	0x20000098

08008638 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800863c:	2200      	movs	r2, #0
 800863e:	4905      	ldr	r1, [pc, #20]	@ (8008654 <CDC_Init_FS+0x1c>)
 8008640:	4805      	ldr	r0, [pc, #20]	@ (8008658 <CDC_Init_FS+0x20>)
 8008642:	f7fe fc1d 	bl	8006e80 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008646:	4905      	ldr	r1, [pc, #20]	@ (800865c <CDC_Init_FS+0x24>)
 8008648:	4803      	ldr	r0, [pc, #12]	@ (8008658 <CDC_Init_FS+0x20>)
 800864a:	f7fe fc3b 	bl	8006ec4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800864e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008650:	4618      	mov	r0, r3
 8008652:	bd80      	pop	{r7, pc}
 8008654:	20000dcc 	.word	0x20000dcc
 8008658:	200002f0 	.word	0x200002f0
 800865c:	200005cc 	.word	0x200005cc

08008660 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008660:	b480      	push	{r7}
 8008662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008664:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008666:	4618      	mov	r0, r3
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr

08008670 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008670:	b480      	push	{r7}
 8008672:	b083      	sub	sp, #12
 8008674:	af00      	add	r7, sp, #0
 8008676:	4603      	mov	r3, r0
 8008678:	6039      	str	r1, [r7, #0]
 800867a:	71fb      	strb	r3, [r7, #7]
 800867c:	4613      	mov	r3, r2
 800867e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008680:	79fb      	ldrb	r3, [r7, #7]
 8008682:	2b23      	cmp	r3, #35	@ 0x23
 8008684:	d84a      	bhi.n	800871c <CDC_Control_FS+0xac>
 8008686:	a201      	add	r2, pc, #4	@ (adr r2, 800868c <CDC_Control_FS+0x1c>)
 8008688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800868c:	0800871d 	.word	0x0800871d
 8008690:	0800871d 	.word	0x0800871d
 8008694:	0800871d 	.word	0x0800871d
 8008698:	0800871d 	.word	0x0800871d
 800869c:	0800871d 	.word	0x0800871d
 80086a0:	0800871d 	.word	0x0800871d
 80086a4:	0800871d 	.word	0x0800871d
 80086a8:	0800871d 	.word	0x0800871d
 80086ac:	0800871d 	.word	0x0800871d
 80086b0:	0800871d 	.word	0x0800871d
 80086b4:	0800871d 	.word	0x0800871d
 80086b8:	0800871d 	.word	0x0800871d
 80086bc:	0800871d 	.word	0x0800871d
 80086c0:	0800871d 	.word	0x0800871d
 80086c4:	0800871d 	.word	0x0800871d
 80086c8:	0800871d 	.word	0x0800871d
 80086cc:	0800871d 	.word	0x0800871d
 80086d0:	0800871d 	.word	0x0800871d
 80086d4:	0800871d 	.word	0x0800871d
 80086d8:	0800871d 	.word	0x0800871d
 80086dc:	0800871d 	.word	0x0800871d
 80086e0:	0800871d 	.word	0x0800871d
 80086e4:	0800871d 	.word	0x0800871d
 80086e8:	0800871d 	.word	0x0800871d
 80086ec:	0800871d 	.word	0x0800871d
 80086f0:	0800871d 	.word	0x0800871d
 80086f4:	0800871d 	.word	0x0800871d
 80086f8:	0800871d 	.word	0x0800871d
 80086fc:	0800871d 	.word	0x0800871d
 8008700:	0800871d 	.word	0x0800871d
 8008704:	0800871d 	.word	0x0800871d
 8008708:	0800871d 	.word	0x0800871d
 800870c:	0800871d 	.word	0x0800871d
 8008710:	0800871d 	.word	0x0800871d
 8008714:	0800871d 	.word	0x0800871d
 8008718:	0800871d 	.word	0x0800871d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800871c:	bf00      	nop
  }

  return (USBD_OK);
 800871e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008720:	4618      	mov	r0, r3
 8008722:	370c      	adds	r7, #12
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr

0800872c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b082      	sub	sp, #8
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008736:	6879      	ldr	r1, [r7, #4]
 8008738:	4805      	ldr	r0, [pc, #20]	@ (8008750 <CDC_Receive_FS+0x24>)
 800873a:	f7fe fbc3 	bl	8006ec4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800873e:	4804      	ldr	r0, [pc, #16]	@ (8008750 <CDC_Receive_FS+0x24>)
 8008740:	f7fe fc24 	bl	8006f8c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008744:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008746:	4618      	mov	r0, r3
 8008748:	3708      	adds	r7, #8
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
 800874e:	bf00      	nop
 8008750:	200002f0 	.word	0x200002f0

08008754 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b084      	sub	sp, #16
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	460b      	mov	r3, r1
 800875e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008760:	2300      	movs	r3, #0
 8008762:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008764:	4b0d      	ldr	r3, [pc, #52]	@ (800879c <CDC_Transmit_FS+0x48>)
 8008766:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800876a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008772:	2b00      	cmp	r3, #0
 8008774:	d001      	beq.n	800877a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008776:	2301      	movs	r3, #1
 8008778:	e00b      	b.n	8008792 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800877a:	887b      	ldrh	r3, [r7, #2]
 800877c:	461a      	mov	r2, r3
 800877e:	6879      	ldr	r1, [r7, #4]
 8008780:	4806      	ldr	r0, [pc, #24]	@ (800879c <CDC_Transmit_FS+0x48>)
 8008782:	f7fe fb7d 	bl	8006e80 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008786:	4805      	ldr	r0, [pc, #20]	@ (800879c <CDC_Transmit_FS+0x48>)
 8008788:	f7fe fbba 	bl	8006f00 <USBD_CDC_TransmitPacket>
 800878c:	4603      	mov	r3, r0
 800878e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008790:	7bfb      	ldrb	r3, [r7, #15]
}
 8008792:	4618      	mov	r0, r3
 8008794:	3710      	adds	r7, #16
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
 800879a:	bf00      	nop
 800879c:	200002f0 	.word	0x200002f0

080087a0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b087      	sub	sp, #28
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	60f8      	str	r0, [r7, #12]
 80087a8:	60b9      	str	r1, [r7, #8]
 80087aa:	4613      	mov	r3, r2
 80087ac:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80087ae:	2300      	movs	r3, #0
 80087b0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80087b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	371c      	adds	r7, #28
 80087ba:	46bd      	mov	sp, r7
 80087bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c0:	4770      	bx	lr
	...

080087c4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b083      	sub	sp, #12
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	4603      	mov	r3, r0
 80087cc:	6039      	str	r1, [r7, #0]
 80087ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	2212      	movs	r2, #18
 80087d4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80087d6:	4b03      	ldr	r3, [pc, #12]	@ (80087e4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80087d8:	4618      	mov	r0, r3
 80087da:	370c      	adds	r7, #12
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr
 80087e4:	200000c8 	.word	0x200000c8

080087e8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b083      	sub	sp, #12
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	4603      	mov	r3, r0
 80087f0:	6039      	str	r1, [r7, #0]
 80087f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	2204      	movs	r2, #4
 80087f8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80087fa:	4b03      	ldr	r3, [pc, #12]	@ (8008808 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	370c      	adds	r7, #12
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr
 8008808:	200000dc 	.word	0x200000dc

0800880c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b082      	sub	sp, #8
 8008810:	af00      	add	r7, sp, #0
 8008812:	4603      	mov	r3, r0
 8008814:	6039      	str	r1, [r7, #0]
 8008816:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008818:	79fb      	ldrb	r3, [r7, #7]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d105      	bne.n	800882a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800881e:	683a      	ldr	r2, [r7, #0]
 8008820:	4907      	ldr	r1, [pc, #28]	@ (8008840 <USBD_FS_ProductStrDescriptor+0x34>)
 8008822:	4808      	ldr	r0, [pc, #32]	@ (8008844 <USBD_FS_ProductStrDescriptor+0x38>)
 8008824:	f7ff fdf8 	bl	8008418 <USBD_GetString>
 8008828:	e004      	b.n	8008834 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800882a:	683a      	ldr	r2, [r7, #0]
 800882c:	4904      	ldr	r1, [pc, #16]	@ (8008840 <USBD_FS_ProductStrDescriptor+0x34>)
 800882e:	4805      	ldr	r0, [pc, #20]	@ (8008844 <USBD_FS_ProductStrDescriptor+0x38>)
 8008830:	f7ff fdf2 	bl	8008418 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008834:	4b02      	ldr	r3, [pc, #8]	@ (8008840 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008836:	4618      	mov	r0, r3
 8008838:	3708      	adds	r7, #8
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
 800883e:	bf00      	nop
 8008840:	200015cc 	.word	0x200015cc
 8008844:	08009a44 	.word	0x08009a44

08008848 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0
 800884e:	4603      	mov	r3, r0
 8008850:	6039      	str	r1, [r7, #0]
 8008852:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008854:	683a      	ldr	r2, [r7, #0]
 8008856:	4904      	ldr	r1, [pc, #16]	@ (8008868 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008858:	4804      	ldr	r0, [pc, #16]	@ (800886c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800885a:	f7ff fddd 	bl	8008418 <USBD_GetString>
  return USBD_StrDesc;
 800885e:	4b02      	ldr	r3, [pc, #8]	@ (8008868 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008860:	4618      	mov	r0, r3
 8008862:	3708      	adds	r7, #8
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}
 8008868:	200015cc 	.word	0x200015cc
 800886c:	08009a5c 	.word	0x08009a5c

08008870 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b082      	sub	sp, #8
 8008874:	af00      	add	r7, sp, #0
 8008876:	4603      	mov	r3, r0
 8008878:	6039      	str	r1, [r7, #0]
 800887a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	221a      	movs	r2, #26
 8008880:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008882:	f000 f843 	bl	800890c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008886:	4b02      	ldr	r3, [pc, #8]	@ (8008890 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008888:	4618      	mov	r0, r3
 800888a:	3708      	adds	r7, #8
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}
 8008890:	200000e0 	.word	0x200000e0

08008894 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b082      	sub	sp, #8
 8008898:	af00      	add	r7, sp, #0
 800889a:	4603      	mov	r3, r0
 800889c:	6039      	str	r1, [r7, #0]
 800889e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80088a0:	79fb      	ldrb	r3, [r7, #7]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d105      	bne.n	80088b2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80088a6:	683a      	ldr	r2, [r7, #0]
 80088a8:	4907      	ldr	r1, [pc, #28]	@ (80088c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80088aa:	4808      	ldr	r0, [pc, #32]	@ (80088cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80088ac:	f7ff fdb4 	bl	8008418 <USBD_GetString>
 80088b0:	e004      	b.n	80088bc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80088b2:	683a      	ldr	r2, [r7, #0]
 80088b4:	4904      	ldr	r1, [pc, #16]	@ (80088c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80088b6:	4805      	ldr	r0, [pc, #20]	@ (80088cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80088b8:	f7ff fdae 	bl	8008418 <USBD_GetString>
  }
  return USBD_StrDesc;
 80088bc:	4b02      	ldr	r3, [pc, #8]	@ (80088c8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3708      	adds	r7, #8
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}
 80088c6:	bf00      	nop
 80088c8:	200015cc 	.word	0x200015cc
 80088cc:	08009a70 	.word	0x08009a70

080088d0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b082      	sub	sp, #8
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	4603      	mov	r3, r0
 80088d8:	6039      	str	r1, [r7, #0]
 80088da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80088dc:	79fb      	ldrb	r3, [r7, #7]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d105      	bne.n	80088ee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80088e2:	683a      	ldr	r2, [r7, #0]
 80088e4:	4907      	ldr	r1, [pc, #28]	@ (8008904 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80088e6:	4808      	ldr	r0, [pc, #32]	@ (8008908 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80088e8:	f7ff fd96 	bl	8008418 <USBD_GetString>
 80088ec:	e004      	b.n	80088f8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80088ee:	683a      	ldr	r2, [r7, #0]
 80088f0:	4904      	ldr	r1, [pc, #16]	@ (8008904 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80088f2:	4805      	ldr	r0, [pc, #20]	@ (8008908 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80088f4:	f7ff fd90 	bl	8008418 <USBD_GetString>
  }
  return USBD_StrDesc;
 80088f8:	4b02      	ldr	r3, [pc, #8]	@ (8008904 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3708      	adds	r7, #8
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}
 8008902:	bf00      	nop
 8008904:	200015cc 	.word	0x200015cc
 8008908:	08009a7c 	.word	0x08009a7c

0800890c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b084      	sub	sp, #16
 8008910:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008912:	4b0f      	ldr	r3, [pc, #60]	@ (8008950 <Get_SerialNum+0x44>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008918:	4b0e      	ldr	r3, [pc, #56]	@ (8008954 <Get_SerialNum+0x48>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800891e:	4b0e      	ldr	r3, [pc, #56]	@ (8008958 <Get_SerialNum+0x4c>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008924:	68fa      	ldr	r2, [r7, #12]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	4413      	add	r3, r2
 800892a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d009      	beq.n	8008946 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008932:	2208      	movs	r2, #8
 8008934:	4909      	ldr	r1, [pc, #36]	@ (800895c <Get_SerialNum+0x50>)
 8008936:	68f8      	ldr	r0, [r7, #12]
 8008938:	f000 f814 	bl	8008964 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800893c:	2204      	movs	r2, #4
 800893e:	4908      	ldr	r1, [pc, #32]	@ (8008960 <Get_SerialNum+0x54>)
 8008940:	68b8      	ldr	r0, [r7, #8]
 8008942:	f000 f80f 	bl	8008964 <IntToUnicode>
  }
}
 8008946:	bf00      	nop
 8008948:	3710      	adds	r7, #16
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop
 8008950:	1fff7a10 	.word	0x1fff7a10
 8008954:	1fff7a14 	.word	0x1fff7a14
 8008958:	1fff7a18 	.word	0x1fff7a18
 800895c:	200000e2 	.word	0x200000e2
 8008960:	200000f2 	.word	0x200000f2

08008964 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008964:	b480      	push	{r7}
 8008966:	b087      	sub	sp, #28
 8008968:	af00      	add	r7, sp, #0
 800896a:	60f8      	str	r0, [r7, #12]
 800896c:	60b9      	str	r1, [r7, #8]
 800896e:	4613      	mov	r3, r2
 8008970:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008972:	2300      	movs	r3, #0
 8008974:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008976:	2300      	movs	r3, #0
 8008978:	75fb      	strb	r3, [r7, #23]
 800897a:	e027      	b.n	80089cc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	0f1b      	lsrs	r3, r3, #28
 8008980:	2b09      	cmp	r3, #9
 8008982:	d80b      	bhi.n	800899c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	0f1b      	lsrs	r3, r3, #28
 8008988:	b2da      	uxtb	r2, r3
 800898a:	7dfb      	ldrb	r3, [r7, #23]
 800898c:	005b      	lsls	r3, r3, #1
 800898e:	4619      	mov	r1, r3
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	440b      	add	r3, r1
 8008994:	3230      	adds	r2, #48	@ 0x30
 8008996:	b2d2      	uxtb	r2, r2
 8008998:	701a      	strb	r2, [r3, #0]
 800899a:	e00a      	b.n	80089b2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	0f1b      	lsrs	r3, r3, #28
 80089a0:	b2da      	uxtb	r2, r3
 80089a2:	7dfb      	ldrb	r3, [r7, #23]
 80089a4:	005b      	lsls	r3, r3, #1
 80089a6:	4619      	mov	r1, r3
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	440b      	add	r3, r1
 80089ac:	3237      	adds	r2, #55	@ 0x37
 80089ae:	b2d2      	uxtb	r2, r2
 80089b0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	011b      	lsls	r3, r3, #4
 80089b6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80089b8:	7dfb      	ldrb	r3, [r7, #23]
 80089ba:	005b      	lsls	r3, r3, #1
 80089bc:	3301      	adds	r3, #1
 80089be:	68ba      	ldr	r2, [r7, #8]
 80089c0:	4413      	add	r3, r2
 80089c2:	2200      	movs	r2, #0
 80089c4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80089c6:	7dfb      	ldrb	r3, [r7, #23]
 80089c8:	3301      	adds	r3, #1
 80089ca:	75fb      	strb	r3, [r7, #23]
 80089cc:	7dfa      	ldrb	r2, [r7, #23]
 80089ce:	79fb      	ldrb	r3, [r7, #7]
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d3d3      	bcc.n	800897c <IntToUnicode+0x18>
  }
}
 80089d4:	bf00      	nop
 80089d6:	bf00      	nop
 80089d8:	371c      	adds	r7, #28
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr
	...

080089e4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b08a      	sub	sp, #40	@ 0x28
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089ec:	f107 0314 	add.w	r3, r7, #20
 80089f0:	2200      	movs	r2, #0
 80089f2:	601a      	str	r2, [r3, #0]
 80089f4:	605a      	str	r2, [r3, #4]
 80089f6:	609a      	str	r2, [r3, #8]
 80089f8:	60da      	str	r2, [r3, #12]
 80089fa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008a04:	d147      	bne.n	8008a96 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a06:	2300      	movs	r3, #0
 8008a08:	613b      	str	r3, [r7, #16]
 8008a0a:	4b25      	ldr	r3, [pc, #148]	@ (8008aa0 <HAL_PCD_MspInit+0xbc>)
 8008a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a0e:	4a24      	ldr	r2, [pc, #144]	@ (8008aa0 <HAL_PCD_MspInit+0xbc>)
 8008a10:	f043 0301 	orr.w	r3, r3, #1
 8008a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8008a16:	4b22      	ldr	r3, [pc, #136]	@ (8008aa0 <HAL_PCD_MspInit+0xbc>)
 8008a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a1a:	f003 0301 	and.w	r3, r3, #1
 8008a1e:	613b      	str	r3, [r7, #16]
 8008a20:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008a22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008a26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008a30:	f107 0314 	add.w	r3, r7, #20
 8008a34:	4619      	mov	r1, r3
 8008a36:	481b      	ldr	r0, [pc, #108]	@ (8008aa4 <HAL_PCD_MspInit+0xc0>)
 8008a38:	f7fa f900 	bl	8002c3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008a3c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8008a40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a42:	2302      	movs	r3, #2
 8008a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a46:	2300      	movs	r3, #0
 8008a48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008a4e:	230a      	movs	r3, #10
 8008a50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a52:	f107 0314 	add.w	r3, r7, #20
 8008a56:	4619      	mov	r1, r3
 8008a58:	4812      	ldr	r0, [pc, #72]	@ (8008aa4 <HAL_PCD_MspInit+0xc0>)
 8008a5a:	f7fa f8ef 	bl	8002c3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008a5e:	4b10      	ldr	r3, [pc, #64]	@ (8008aa0 <HAL_PCD_MspInit+0xbc>)
 8008a60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a62:	4a0f      	ldr	r2, [pc, #60]	@ (8008aa0 <HAL_PCD_MspInit+0xbc>)
 8008a64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a68:	6353      	str	r3, [r2, #52]	@ 0x34
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	60fb      	str	r3, [r7, #12]
 8008a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8008aa0 <HAL_PCD_MspInit+0xbc>)
 8008a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a72:	4a0b      	ldr	r2, [pc, #44]	@ (8008aa0 <HAL_PCD_MspInit+0xbc>)
 8008a74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008a78:	6453      	str	r3, [r2, #68]	@ 0x44
 8008a7a:	4b09      	ldr	r3, [pc, #36]	@ (8008aa0 <HAL_PCD_MspInit+0xbc>)
 8008a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008a82:	60fb      	str	r3, [r7, #12]
 8008a84:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008a86:	2200      	movs	r2, #0
 8008a88:	2100      	movs	r1, #0
 8008a8a:	2043      	movs	r0, #67	@ 0x43
 8008a8c:	f7f9 ffb7 	bl	80029fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008a90:	2043      	movs	r0, #67	@ 0x43
 8008a92:	f7f9 ffd0 	bl	8002a36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008a96:	bf00      	nop
 8008a98:	3728      	adds	r7, #40	@ 0x28
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
 8008a9e:	bf00      	nop
 8008aa0:	40023800 	.word	0x40023800
 8008aa4:	40020000 	.word	0x40020000

08008aa8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8008abc:	4619      	mov	r1, r3
 8008abe:	4610      	mov	r0, r2
 8008ac0:	f7fe fb4d 	bl	800715e <USBD_LL_SetupStage>
}
 8008ac4:	bf00      	nop
 8008ac6:	3708      	adds	r7, #8
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b082      	sub	sp, #8
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 8008ade:	78fa      	ldrb	r2, [r7, #3]
 8008ae0:	6879      	ldr	r1, [r7, #4]
 8008ae2:	4613      	mov	r3, r2
 8008ae4:	00db      	lsls	r3, r3, #3
 8008ae6:	4413      	add	r3, r2
 8008ae8:	009b      	lsls	r3, r3, #2
 8008aea:	440b      	add	r3, r1
 8008aec:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8008af0:	681a      	ldr	r2, [r3, #0]
 8008af2:	78fb      	ldrb	r3, [r7, #3]
 8008af4:	4619      	mov	r1, r3
 8008af6:	f7fe fb87 	bl	8007208 <USBD_LL_DataOutStage>
}
 8008afa:	bf00      	nop
 8008afc:	3708      	adds	r7, #8
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}

08008b02 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b02:	b580      	push	{r7, lr}
 8008b04:	b082      	sub	sp, #8
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	6078      	str	r0, [r7, #4]
 8008b0a:	460b      	mov	r3, r1
 8008b0c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 8008b14:	78fa      	ldrb	r2, [r7, #3]
 8008b16:	6879      	ldr	r1, [r7, #4]
 8008b18:	4613      	mov	r3, r2
 8008b1a:	00db      	lsls	r3, r3, #3
 8008b1c:	4413      	add	r3, r2
 8008b1e:	009b      	lsls	r3, r3, #2
 8008b20:	440b      	add	r3, r1
 8008b22:	334c      	adds	r3, #76	@ 0x4c
 8008b24:	681a      	ldr	r2, [r3, #0]
 8008b26:	78fb      	ldrb	r3, [r7, #3]
 8008b28:	4619      	mov	r1, r3
 8008b2a:	f7fe fc20 	bl	800736e <USBD_LL_DataInStage>
}
 8008b2e:	bf00      	nop
 8008b30:	3708      	adds	r7, #8
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}

08008b36 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b36:	b580      	push	{r7, lr}
 8008b38:	b082      	sub	sp, #8
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008b44:	4618      	mov	r0, r3
 8008b46:	f7fe fd54 	bl	80075f2 <USBD_LL_SOF>
}
 8008b4a:	bf00      	nop
 8008b4c:	3708      	adds	r7, #8
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}

08008b52 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b52:	b580      	push	{r7, lr}
 8008b54:	b084      	sub	sp, #16
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	68db      	ldr	r3, [r3, #12]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d102      	bne.n	8008b6c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008b66:	2300      	movs	r3, #0
 8008b68:	73fb      	strb	r3, [r7, #15]
 8008b6a:	e008      	b.n	8008b7e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	68db      	ldr	r3, [r3, #12]
 8008b70:	2b02      	cmp	r3, #2
 8008b72:	d102      	bne.n	8008b7a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008b74:	2301      	movs	r3, #1
 8008b76:	73fb      	strb	r3, [r7, #15]
 8008b78:	e001      	b.n	8008b7e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008b7a:	f7f8 fe61 	bl	8001840 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008b84:	7bfa      	ldrb	r2, [r7, #15]
 8008b86:	4611      	mov	r1, r2
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f7fe fcf4 	bl	8007576 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008b94:	4618      	mov	r0, r3
 8008b96:	f7fe fc9c 	bl	80074d2 <USBD_LL_Reset>
}
 8008b9a:	bf00      	nop
 8008b9c:	3710      	adds	r7, #16
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}
	...

08008ba4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b082      	sub	sp, #8
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f7fe fcef 	bl	8007596 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	6812      	ldr	r2, [r2, #0]
 8008bc6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008bca:	f043 0301 	orr.w	r3, r3, #1
 8008bce:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6a1b      	ldr	r3, [r3, #32]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d005      	beq.n	8008be4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008bd8:	4b04      	ldr	r3, [pc, #16]	@ (8008bec <HAL_PCD_SuspendCallback+0x48>)
 8008bda:	691b      	ldr	r3, [r3, #16]
 8008bdc:	4a03      	ldr	r2, [pc, #12]	@ (8008bec <HAL_PCD_SuspendCallback+0x48>)
 8008bde:	f043 0306 	orr.w	r3, r3, #6
 8008be2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008be4:	bf00      	nop
 8008be6:	3708      	adds	r7, #8
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}
 8008bec:	e000ed00 	.word	0xe000ed00

08008bf0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b082      	sub	sp, #8
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7fe fcdf 	bl	80075c2 <USBD_LL_Resume>
}
 8008c04:	bf00      	nop
 8008c06:	3708      	adds	r7, #8
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b082      	sub	sp, #8
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	460b      	mov	r3, r1
 8008c16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008c1e:	78fa      	ldrb	r2, [r7, #3]
 8008c20:	4611      	mov	r1, r2
 8008c22:	4618      	mov	r0, r3
 8008c24:	f7fe fd37 	bl	8007696 <USBD_LL_IsoOUTIncomplete>
}
 8008c28:	bf00      	nop
 8008c2a:	3708      	adds	r7, #8
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b082      	sub	sp, #8
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	460b      	mov	r3, r1
 8008c3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008c42:	78fa      	ldrb	r2, [r7, #3]
 8008c44:	4611      	mov	r1, r2
 8008c46:	4618      	mov	r0, r3
 8008c48:	f7fe fcf3 	bl	8007632 <USBD_LL_IsoINIncomplete>
}
 8008c4c:	bf00      	nop
 8008c4e:	3708      	adds	r7, #8
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b082      	sub	sp, #8
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008c62:	4618      	mov	r0, r3
 8008c64:	f7fe fd49 	bl	80076fa <USBD_LL_DevConnected>
}
 8008c68:	bf00      	nop
 8008c6a:	3708      	adds	r7, #8
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}

08008c70 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b082      	sub	sp, #8
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f7fe fd46 	bl	8007710 <USBD_LL_DevDisconnected>
}
 8008c84:	bf00      	nop
 8008c86:	3708      	adds	r7, #8
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b082      	sub	sp, #8
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	781b      	ldrb	r3, [r3, #0]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d13c      	bne.n	8008d16 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008c9c:	4a20      	ldr	r2, [pc, #128]	@ (8008d20 <USBD_LL_Init+0x94>)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	4a1e      	ldr	r2, [pc, #120]	@ (8008d20 <USBD_LL_Init+0x94>)
 8008ca8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008cac:	4b1c      	ldr	r3, [pc, #112]	@ (8008d20 <USBD_LL_Init+0x94>)
 8008cae:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008cb2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008cb4:	4b1a      	ldr	r3, [pc, #104]	@ (8008d20 <USBD_LL_Init+0x94>)
 8008cb6:	2204      	movs	r2, #4
 8008cb8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008cba:	4b19      	ldr	r3, [pc, #100]	@ (8008d20 <USBD_LL_Init+0x94>)
 8008cbc:	2202      	movs	r2, #2
 8008cbe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008cc0:	4b17      	ldr	r3, [pc, #92]	@ (8008d20 <USBD_LL_Init+0x94>)
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008cc6:	4b16      	ldr	r3, [pc, #88]	@ (8008d20 <USBD_LL_Init+0x94>)
 8008cc8:	2202      	movs	r2, #2
 8008cca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008ccc:	4b14      	ldr	r3, [pc, #80]	@ (8008d20 <USBD_LL_Init+0x94>)
 8008cce:	2200      	movs	r2, #0
 8008cd0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008cd2:	4b13      	ldr	r3, [pc, #76]	@ (8008d20 <USBD_LL_Init+0x94>)
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008cd8:	4b11      	ldr	r3, [pc, #68]	@ (8008d20 <USBD_LL_Init+0x94>)
 8008cda:	2200      	movs	r2, #0
 8008cdc:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8008cde:	4b10      	ldr	r3, [pc, #64]	@ (8008d20 <USBD_LL_Init+0x94>)
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008ce4:	4b0e      	ldr	r3, [pc, #56]	@ (8008d20 <USBD_LL_Init+0x94>)
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008cea:	480d      	ldr	r0, [pc, #52]	@ (8008d20 <USBD_LL_Init+0x94>)
 8008cec:	f7fa f973 	bl	8002fd6 <HAL_PCD_Init>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d001      	beq.n	8008cfa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008cf6:	f7f8 fda3 	bl	8001840 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008cfa:	2180      	movs	r1, #128	@ 0x80
 8008cfc:	4808      	ldr	r0, [pc, #32]	@ (8008d20 <USBD_LL_Init+0x94>)
 8008cfe:	f7fb fbca 	bl	8004496 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008d02:	2240      	movs	r2, #64	@ 0x40
 8008d04:	2100      	movs	r1, #0
 8008d06:	4806      	ldr	r0, [pc, #24]	@ (8008d20 <USBD_LL_Init+0x94>)
 8008d08:	f7fb fb7e 	bl	8004408 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008d0c:	2280      	movs	r2, #128	@ 0x80
 8008d0e:	2101      	movs	r1, #1
 8008d10:	4803      	ldr	r0, [pc, #12]	@ (8008d20 <USBD_LL_Init+0x94>)
 8008d12:	f7fb fb79 	bl	8004408 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008d16:	2300      	movs	r3, #0
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3708      	adds	r7, #8
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}
 8008d20:	200017cc 	.word	0x200017cc

08008d24 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b084      	sub	sp, #16
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d30:	2300      	movs	r3, #0
 8008d32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f7fa fa68 	bl	8003210 <HAL_PCD_Start>
 8008d40:	4603      	mov	r3, r0
 8008d42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d44:	7bfb      	ldrb	r3, [r7, #15]
 8008d46:	4618      	mov	r0, r3
 8008d48:	f000 f942 	bl	8008fd0 <USBD_Get_USB_Status>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d50:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3710      	adds	r7, #16
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}

08008d5a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008d5a:	b580      	push	{r7, lr}
 8008d5c:	b084      	sub	sp, #16
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
 8008d62:	4608      	mov	r0, r1
 8008d64:	4611      	mov	r1, r2
 8008d66:	461a      	mov	r2, r3
 8008d68:	4603      	mov	r3, r0
 8008d6a:	70fb      	strb	r3, [r7, #3]
 8008d6c:	460b      	mov	r3, r1
 8008d6e:	70bb      	strb	r3, [r7, #2]
 8008d70:	4613      	mov	r3, r2
 8008d72:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d74:	2300      	movs	r3, #0
 8008d76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008d82:	78bb      	ldrb	r3, [r7, #2]
 8008d84:	883a      	ldrh	r2, [r7, #0]
 8008d86:	78f9      	ldrb	r1, [r7, #3]
 8008d88:	f7fa ff39 	bl	8003bfe <HAL_PCD_EP_Open>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d90:	7bfb      	ldrb	r3, [r7, #15]
 8008d92:	4618      	mov	r0, r3
 8008d94:	f000 f91c 	bl	8008fd0 <USBD_Get_USB_Status>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3710      	adds	r7, #16
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}

08008da6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008da6:	b580      	push	{r7, lr}
 8008da8:	b084      	sub	sp, #16
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	6078      	str	r0, [r7, #4]
 8008dae:	460b      	mov	r3, r1
 8008db0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008db2:	2300      	movs	r3, #0
 8008db4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008db6:	2300      	movs	r3, #0
 8008db8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008dc0:	78fa      	ldrb	r2, [r7, #3]
 8008dc2:	4611      	mov	r1, r2
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f7fa ff82 	bl	8003cce <HAL_PCD_EP_Close>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dce:	7bfb      	ldrb	r3, [r7, #15]
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f000 f8fd 	bl	8008fd0 <USBD_Get_USB_Status>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dda:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3710      	adds	r7, #16
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b084      	sub	sp, #16
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	460b      	mov	r3, r1
 8008dee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008df0:	2300      	movs	r3, #0
 8008df2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008df4:	2300      	movs	r3, #0
 8008df6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008dfe:	78fa      	ldrb	r2, [r7, #3]
 8008e00:	4611      	mov	r1, r2
 8008e02:	4618      	mov	r0, r3
 8008e04:	f7fb f85a 	bl	8003ebc <HAL_PCD_EP_SetStall>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e0c:	7bfb      	ldrb	r3, [r7, #15]
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f000 f8de 	bl	8008fd0 <USBD_Get_USB_Status>
 8008e14:	4603      	mov	r3, r0
 8008e16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e18:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3710      	adds	r7, #16
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}

08008e22 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e22:	b580      	push	{r7, lr}
 8008e24:	b084      	sub	sp, #16
 8008e26:	af00      	add	r7, sp, #0
 8008e28:	6078      	str	r0, [r7, #4]
 8008e2a:	460b      	mov	r3, r1
 8008e2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e32:	2300      	movs	r3, #0
 8008e34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008e3c:	78fa      	ldrb	r2, [r7, #3]
 8008e3e:	4611      	mov	r1, r2
 8008e40:	4618      	mov	r0, r3
 8008e42:	f7fb f89f 	bl	8003f84 <HAL_PCD_EP_ClrStall>
 8008e46:	4603      	mov	r3, r0
 8008e48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e4a:	7bfb      	ldrb	r3, [r7, #15]
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f000 f8bf 	bl	8008fd0 <USBD_Get_USB_Status>
 8008e52:	4603      	mov	r3, r0
 8008e54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e56:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3710      	adds	r7, #16
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}

08008e60 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b085      	sub	sp, #20
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	460b      	mov	r3, r1
 8008e6a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008e72:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008e74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	da0b      	bge.n	8008e94 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008e7c:	78fb      	ldrb	r3, [r7, #3]
 8008e7e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008e82:	68f9      	ldr	r1, [r7, #12]
 8008e84:	4613      	mov	r3, r2
 8008e86:	00db      	lsls	r3, r3, #3
 8008e88:	4413      	add	r3, r2
 8008e8a:	009b      	lsls	r3, r3, #2
 8008e8c:	440b      	add	r3, r1
 8008e8e:	333e      	adds	r3, #62	@ 0x3e
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	e00b      	b.n	8008eac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008e94:	78fb      	ldrb	r3, [r7, #3]
 8008e96:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008e9a:	68f9      	ldr	r1, [r7, #12]
 8008e9c:	4613      	mov	r3, r2
 8008e9e:	00db      	lsls	r3, r3, #3
 8008ea0:	4413      	add	r3, r2
 8008ea2:	009b      	lsls	r3, r3, #2
 8008ea4:	440b      	add	r3, r1
 8008ea6:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 8008eaa:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3714      	adds	r7, #20
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr

08008eb8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b084      	sub	sp, #16
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008ed2:	78fa      	ldrb	r2, [r7, #3]
 8008ed4:	4611      	mov	r1, r2
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f7fa fe6c 	bl	8003bb4 <HAL_PCD_SetAddress>
 8008edc:	4603      	mov	r3, r0
 8008ede:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ee0:	7bfb      	ldrb	r3, [r7, #15]
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f000 f874 	bl	8008fd0 <USBD_Get_USB_Status>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008eec:	7bbb      	ldrb	r3, [r7, #14]
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3710      	adds	r7, #16
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}

08008ef6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008ef6:	b580      	push	{r7, lr}
 8008ef8:	b086      	sub	sp, #24
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	60f8      	str	r0, [r7, #12]
 8008efe:	607a      	str	r2, [r7, #4]
 8008f00:	603b      	str	r3, [r7, #0]
 8008f02:	460b      	mov	r3, r1
 8008f04:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f06:	2300      	movs	r3, #0
 8008f08:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008f14:	7af9      	ldrb	r1, [r7, #11]
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	687a      	ldr	r2, [r7, #4]
 8008f1a:	f7fa ff85 	bl	8003e28 <HAL_PCD_EP_Transmit>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f22:	7dfb      	ldrb	r3, [r7, #23]
 8008f24:	4618      	mov	r0, r3
 8008f26:	f000 f853 	bl	8008fd0 <USBD_Get_USB_Status>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008f2e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3718      	adds	r7, #24
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}

08008f38 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b086      	sub	sp, #24
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	60f8      	str	r0, [r7, #12]
 8008f40:	607a      	str	r2, [r7, #4]
 8008f42:	603b      	str	r3, [r7, #0]
 8008f44:	460b      	mov	r3, r1
 8008f46:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008f56:	7af9      	ldrb	r1, [r7, #11]
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	687a      	ldr	r2, [r7, #4]
 8008f5c:	f7fa ff01 	bl	8003d62 <HAL_PCD_EP_Receive>
 8008f60:	4603      	mov	r3, r0
 8008f62:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f64:	7dfb      	ldrb	r3, [r7, #23]
 8008f66:	4618      	mov	r0, r3
 8008f68:	f000 f832 	bl	8008fd0 <USBD_Get_USB_Status>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008f70:	7dbb      	ldrb	r3, [r7, #22]
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3718      	adds	r7, #24
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}

08008f7a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f7a:	b580      	push	{r7, lr}
 8008f7c:	b082      	sub	sp, #8
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	6078      	str	r0, [r7, #4]
 8008f82:	460b      	mov	r3, r1
 8008f84:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008f8c:	78fa      	ldrb	r2, [r7, #3]
 8008f8e:	4611      	mov	r1, r2
 8008f90:	4618      	mov	r0, r3
 8008f92:	f7fa ff31 	bl	8003df8 <HAL_PCD_EP_GetRxCount>
 8008f96:	4603      	mov	r3, r0
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3708      	adds	r7, #8
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}

08008fa0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b083      	sub	sp, #12
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008fa8:	4b03      	ldr	r3, [pc, #12]	@ (8008fb8 <USBD_static_malloc+0x18>)
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	370c      	adds	r7, #12
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb4:	4770      	bx	lr
 8008fb6:	bf00      	nop
 8008fb8:	20001cd8 	.word	0x20001cd8

08008fbc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b083      	sub	sp, #12
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]

}
 8008fc4:	bf00      	nop
 8008fc6:	370c      	adds	r7, #12
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fce:	4770      	bx	lr

08008fd0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b085      	sub	sp, #20
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008fde:	79fb      	ldrb	r3, [r7, #7]
 8008fe0:	2b03      	cmp	r3, #3
 8008fe2:	d817      	bhi.n	8009014 <USBD_Get_USB_Status+0x44>
 8008fe4:	a201      	add	r2, pc, #4	@ (adr r2, 8008fec <USBD_Get_USB_Status+0x1c>)
 8008fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fea:	bf00      	nop
 8008fec:	08008ffd 	.word	0x08008ffd
 8008ff0:	08009003 	.word	0x08009003
 8008ff4:	08009009 	.word	0x08009009
 8008ff8:	0800900f 	.word	0x0800900f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	73fb      	strb	r3, [r7, #15]
    break;
 8009000:	e00b      	b.n	800901a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009002:	2303      	movs	r3, #3
 8009004:	73fb      	strb	r3, [r7, #15]
    break;
 8009006:	e008      	b.n	800901a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009008:	2301      	movs	r3, #1
 800900a:	73fb      	strb	r3, [r7, #15]
    break;
 800900c:	e005      	b.n	800901a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800900e:	2303      	movs	r3, #3
 8009010:	73fb      	strb	r3, [r7, #15]
    break;
 8009012:	e002      	b.n	800901a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009014:	2303      	movs	r3, #3
 8009016:	73fb      	strb	r3, [r7, #15]
    break;
 8009018:	bf00      	nop
  }
  return usb_status;
 800901a:	7bfb      	ldrb	r3, [r7, #15]
}
 800901c:	4618      	mov	r0, r3
 800901e:	3714      	adds	r7, #20
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr

08009028 <siprintf>:
 8009028:	b40e      	push	{r1, r2, r3}
 800902a:	b500      	push	{lr}
 800902c:	b09c      	sub	sp, #112	@ 0x70
 800902e:	ab1d      	add	r3, sp, #116	@ 0x74
 8009030:	9002      	str	r0, [sp, #8]
 8009032:	9006      	str	r0, [sp, #24]
 8009034:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009038:	4809      	ldr	r0, [pc, #36]	@ (8009060 <siprintf+0x38>)
 800903a:	9107      	str	r1, [sp, #28]
 800903c:	9104      	str	r1, [sp, #16]
 800903e:	4909      	ldr	r1, [pc, #36]	@ (8009064 <siprintf+0x3c>)
 8009040:	f853 2b04 	ldr.w	r2, [r3], #4
 8009044:	9105      	str	r1, [sp, #20]
 8009046:	6800      	ldr	r0, [r0, #0]
 8009048:	9301      	str	r3, [sp, #4]
 800904a:	a902      	add	r1, sp, #8
 800904c:	f000 f994 	bl	8009378 <_svfiprintf_r>
 8009050:	9b02      	ldr	r3, [sp, #8]
 8009052:	2200      	movs	r2, #0
 8009054:	701a      	strb	r2, [r3, #0]
 8009056:	b01c      	add	sp, #112	@ 0x70
 8009058:	f85d eb04 	ldr.w	lr, [sp], #4
 800905c:	b003      	add	sp, #12
 800905e:	4770      	bx	lr
 8009060:	200000fc 	.word	0x200000fc
 8009064:	ffff0208 	.word	0xffff0208

08009068 <memset>:
 8009068:	4402      	add	r2, r0
 800906a:	4603      	mov	r3, r0
 800906c:	4293      	cmp	r3, r2
 800906e:	d100      	bne.n	8009072 <memset+0xa>
 8009070:	4770      	bx	lr
 8009072:	f803 1b01 	strb.w	r1, [r3], #1
 8009076:	e7f9      	b.n	800906c <memset+0x4>

08009078 <__errno>:
 8009078:	4b01      	ldr	r3, [pc, #4]	@ (8009080 <__errno+0x8>)
 800907a:	6818      	ldr	r0, [r3, #0]
 800907c:	4770      	bx	lr
 800907e:	bf00      	nop
 8009080:	200000fc 	.word	0x200000fc

08009084 <__libc_init_array>:
 8009084:	b570      	push	{r4, r5, r6, lr}
 8009086:	4d0d      	ldr	r5, [pc, #52]	@ (80090bc <__libc_init_array+0x38>)
 8009088:	4c0d      	ldr	r4, [pc, #52]	@ (80090c0 <__libc_init_array+0x3c>)
 800908a:	1b64      	subs	r4, r4, r5
 800908c:	10a4      	asrs	r4, r4, #2
 800908e:	2600      	movs	r6, #0
 8009090:	42a6      	cmp	r6, r4
 8009092:	d109      	bne.n	80090a8 <__libc_init_array+0x24>
 8009094:	4d0b      	ldr	r5, [pc, #44]	@ (80090c4 <__libc_init_array+0x40>)
 8009096:	4c0c      	ldr	r4, [pc, #48]	@ (80090c8 <__libc_init_array+0x44>)
 8009098:	f000 fc66 	bl	8009968 <_init>
 800909c:	1b64      	subs	r4, r4, r5
 800909e:	10a4      	asrs	r4, r4, #2
 80090a0:	2600      	movs	r6, #0
 80090a2:	42a6      	cmp	r6, r4
 80090a4:	d105      	bne.n	80090b2 <__libc_init_array+0x2e>
 80090a6:	bd70      	pop	{r4, r5, r6, pc}
 80090a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80090ac:	4798      	blx	r3
 80090ae:	3601      	adds	r6, #1
 80090b0:	e7ee      	b.n	8009090 <__libc_init_array+0xc>
 80090b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80090b6:	4798      	blx	r3
 80090b8:	3601      	adds	r6, #1
 80090ba:	e7f2      	b.n	80090a2 <__libc_init_array+0x1e>
 80090bc:	08009ad8 	.word	0x08009ad8
 80090c0:	08009ad8 	.word	0x08009ad8
 80090c4:	08009ad8 	.word	0x08009ad8
 80090c8:	08009adc 	.word	0x08009adc

080090cc <__retarget_lock_acquire_recursive>:
 80090cc:	4770      	bx	lr

080090ce <__retarget_lock_release_recursive>:
 80090ce:	4770      	bx	lr

080090d0 <_free_r>:
 80090d0:	b538      	push	{r3, r4, r5, lr}
 80090d2:	4605      	mov	r5, r0
 80090d4:	2900      	cmp	r1, #0
 80090d6:	d041      	beq.n	800915c <_free_r+0x8c>
 80090d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090dc:	1f0c      	subs	r4, r1, #4
 80090de:	2b00      	cmp	r3, #0
 80090e0:	bfb8      	it	lt
 80090e2:	18e4      	addlt	r4, r4, r3
 80090e4:	f000 f8e0 	bl	80092a8 <__malloc_lock>
 80090e8:	4a1d      	ldr	r2, [pc, #116]	@ (8009160 <_free_r+0x90>)
 80090ea:	6813      	ldr	r3, [r2, #0]
 80090ec:	b933      	cbnz	r3, 80090fc <_free_r+0x2c>
 80090ee:	6063      	str	r3, [r4, #4]
 80090f0:	6014      	str	r4, [r2, #0]
 80090f2:	4628      	mov	r0, r5
 80090f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090f8:	f000 b8dc 	b.w	80092b4 <__malloc_unlock>
 80090fc:	42a3      	cmp	r3, r4
 80090fe:	d908      	bls.n	8009112 <_free_r+0x42>
 8009100:	6820      	ldr	r0, [r4, #0]
 8009102:	1821      	adds	r1, r4, r0
 8009104:	428b      	cmp	r3, r1
 8009106:	bf01      	itttt	eq
 8009108:	6819      	ldreq	r1, [r3, #0]
 800910a:	685b      	ldreq	r3, [r3, #4]
 800910c:	1809      	addeq	r1, r1, r0
 800910e:	6021      	streq	r1, [r4, #0]
 8009110:	e7ed      	b.n	80090ee <_free_r+0x1e>
 8009112:	461a      	mov	r2, r3
 8009114:	685b      	ldr	r3, [r3, #4]
 8009116:	b10b      	cbz	r3, 800911c <_free_r+0x4c>
 8009118:	42a3      	cmp	r3, r4
 800911a:	d9fa      	bls.n	8009112 <_free_r+0x42>
 800911c:	6811      	ldr	r1, [r2, #0]
 800911e:	1850      	adds	r0, r2, r1
 8009120:	42a0      	cmp	r0, r4
 8009122:	d10b      	bne.n	800913c <_free_r+0x6c>
 8009124:	6820      	ldr	r0, [r4, #0]
 8009126:	4401      	add	r1, r0
 8009128:	1850      	adds	r0, r2, r1
 800912a:	4283      	cmp	r3, r0
 800912c:	6011      	str	r1, [r2, #0]
 800912e:	d1e0      	bne.n	80090f2 <_free_r+0x22>
 8009130:	6818      	ldr	r0, [r3, #0]
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	6053      	str	r3, [r2, #4]
 8009136:	4408      	add	r0, r1
 8009138:	6010      	str	r0, [r2, #0]
 800913a:	e7da      	b.n	80090f2 <_free_r+0x22>
 800913c:	d902      	bls.n	8009144 <_free_r+0x74>
 800913e:	230c      	movs	r3, #12
 8009140:	602b      	str	r3, [r5, #0]
 8009142:	e7d6      	b.n	80090f2 <_free_r+0x22>
 8009144:	6820      	ldr	r0, [r4, #0]
 8009146:	1821      	adds	r1, r4, r0
 8009148:	428b      	cmp	r3, r1
 800914a:	bf04      	itt	eq
 800914c:	6819      	ldreq	r1, [r3, #0]
 800914e:	685b      	ldreq	r3, [r3, #4]
 8009150:	6063      	str	r3, [r4, #4]
 8009152:	bf04      	itt	eq
 8009154:	1809      	addeq	r1, r1, r0
 8009156:	6021      	streq	r1, [r4, #0]
 8009158:	6054      	str	r4, [r2, #4]
 800915a:	e7ca      	b.n	80090f2 <_free_r+0x22>
 800915c:	bd38      	pop	{r3, r4, r5, pc}
 800915e:	bf00      	nop
 8009160:	2000203c 	.word	0x2000203c

08009164 <sbrk_aligned>:
 8009164:	b570      	push	{r4, r5, r6, lr}
 8009166:	4e0f      	ldr	r6, [pc, #60]	@ (80091a4 <sbrk_aligned+0x40>)
 8009168:	460c      	mov	r4, r1
 800916a:	6831      	ldr	r1, [r6, #0]
 800916c:	4605      	mov	r5, r0
 800916e:	b911      	cbnz	r1, 8009176 <sbrk_aligned+0x12>
 8009170:	f000 fba6 	bl	80098c0 <_sbrk_r>
 8009174:	6030      	str	r0, [r6, #0]
 8009176:	4621      	mov	r1, r4
 8009178:	4628      	mov	r0, r5
 800917a:	f000 fba1 	bl	80098c0 <_sbrk_r>
 800917e:	1c43      	adds	r3, r0, #1
 8009180:	d103      	bne.n	800918a <sbrk_aligned+0x26>
 8009182:	f04f 34ff 	mov.w	r4, #4294967295
 8009186:	4620      	mov	r0, r4
 8009188:	bd70      	pop	{r4, r5, r6, pc}
 800918a:	1cc4      	adds	r4, r0, #3
 800918c:	f024 0403 	bic.w	r4, r4, #3
 8009190:	42a0      	cmp	r0, r4
 8009192:	d0f8      	beq.n	8009186 <sbrk_aligned+0x22>
 8009194:	1a21      	subs	r1, r4, r0
 8009196:	4628      	mov	r0, r5
 8009198:	f000 fb92 	bl	80098c0 <_sbrk_r>
 800919c:	3001      	adds	r0, #1
 800919e:	d1f2      	bne.n	8009186 <sbrk_aligned+0x22>
 80091a0:	e7ef      	b.n	8009182 <sbrk_aligned+0x1e>
 80091a2:	bf00      	nop
 80091a4:	20002038 	.word	0x20002038

080091a8 <_malloc_r>:
 80091a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091ac:	1ccd      	adds	r5, r1, #3
 80091ae:	f025 0503 	bic.w	r5, r5, #3
 80091b2:	3508      	adds	r5, #8
 80091b4:	2d0c      	cmp	r5, #12
 80091b6:	bf38      	it	cc
 80091b8:	250c      	movcc	r5, #12
 80091ba:	2d00      	cmp	r5, #0
 80091bc:	4606      	mov	r6, r0
 80091be:	db01      	blt.n	80091c4 <_malloc_r+0x1c>
 80091c0:	42a9      	cmp	r1, r5
 80091c2:	d904      	bls.n	80091ce <_malloc_r+0x26>
 80091c4:	230c      	movs	r3, #12
 80091c6:	6033      	str	r3, [r6, #0]
 80091c8:	2000      	movs	r0, #0
 80091ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80092a4 <_malloc_r+0xfc>
 80091d2:	f000 f869 	bl	80092a8 <__malloc_lock>
 80091d6:	f8d8 3000 	ldr.w	r3, [r8]
 80091da:	461c      	mov	r4, r3
 80091dc:	bb44      	cbnz	r4, 8009230 <_malloc_r+0x88>
 80091de:	4629      	mov	r1, r5
 80091e0:	4630      	mov	r0, r6
 80091e2:	f7ff ffbf 	bl	8009164 <sbrk_aligned>
 80091e6:	1c43      	adds	r3, r0, #1
 80091e8:	4604      	mov	r4, r0
 80091ea:	d158      	bne.n	800929e <_malloc_r+0xf6>
 80091ec:	f8d8 4000 	ldr.w	r4, [r8]
 80091f0:	4627      	mov	r7, r4
 80091f2:	2f00      	cmp	r7, #0
 80091f4:	d143      	bne.n	800927e <_malloc_r+0xd6>
 80091f6:	2c00      	cmp	r4, #0
 80091f8:	d04b      	beq.n	8009292 <_malloc_r+0xea>
 80091fa:	6823      	ldr	r3, [r4, #0]
 80091fc:	4639      	mov	r1, r7
 80091fe:	4630      	mov	r0, r6
 8009200:	eb04 0903 	add.w	r9, r4, r3
 8009204:	f000 fb5c 	bl	80098c0 <_sbrk_r>
 8009208:	4581      	cmp	r9, r0
 800920a:	d142      	bne.n	8009292 <_malloc_r+0xea>
 800920c:	6821      	ldr	r1, [r4, #0]
 800920e:	1a6d      	subs	r5, r5, r1
 8009210:	4629      	mov	r1, r5
 8009212:	4630      	mov	r0, r6
 8009214:	f7ff ffa6 	bl	8009164 <sbrk_aligned>
 8009218:	3001      	adds	r0, #1
 800921a:	d03a      	beq.n	8009292 <_malloc_r+0xea>
 800921c:	6823      	ldr	r3, [r4, #0]
 800921e:	442b      	add	r3, r5
 8009220:	6023      	str	r3, [r4, #0]
 8009222:	f8d8 3000 	ldr.w	r3, [r8]
 8009226:	685a      	ldr	r2, [r3, #4]
 8009228:	bb62      	cbnz	r2, 8009284 <_malloc_r+0xdc>
 800922a:	f8c8 7000 	str.w	r7, [r8]
 800922e:	e00f      	b.n	8009250 <_malloc_r+0xa8>
 8009230:	6822      	ldr	r2, [r4, #0]
 8009232:	1b52      	subs	r2, r2, r5
 8009234:	d420      	bmi.n	8009278 <_malloc_r+0xd0>
 8009236:	2a0b      	cmp	r2, #11
 8009238:	d917      	bls.n	800926a <_malloc_r+0xc2>
 800923a:	1961      	adds	r1, r4, r5
 800923c:	42a3      	cmp	r3, r4
 800923e:	6025      	str	r5, [r4, #0]
 8009240:	bf18      	it	ne
 8009242:	6059      	strne	r1, [r3, #4]
 8009244:	6863      	ldr	r3, [r4, #4]
 8009246:	bf08      	it	eq
 8009248:	f8c8 1000 	streq.w	r1, [r8]
 800924c:	5162      	str	r2, [r4, r5]
 800924e:	604b      	str	r3, [r1, #4]
 8009250:	4630      	mov	r0, r6
 8009252:	f000 f82f 	bl	80092b4 <__malloc_unlock>
 8009256:	f104 000b 	add.w	r0, r4, #11
 800925a:	1d23      	adds	r3, r4, #4
 800925c:	f020 0007 	bic.w	r0, r0, #7
 8009260:	1ac2      	subs	r2, r0, r3
 8009262:	bf1c      	itt	ne
 8009264:	1a1b      	subne	r3, r3, r0
 8009266:	50a3      	strne	r3, [r4, r2]
 8009268:	e7af      	b.n	80091ca <_malloc_r+0x22>
 800926a:	6862      	ldr	r2, [r4, #4]
 800926c:	42a3      	cmp	r3, r4
 800926e:	bf0c      	ite	eq
 8009270:	f8c8 2000 	streq.w	r2, [r8]
 8009274:	605a      	strne	r2, [r3, #4]
 8009276:	e7eb      	b.n	8009250 <_malloc_r+0xa8>
 8009278:	4623      	mov	r3, r4
 800927a:	6864      	ldr	r4, [r4, #4]
 800927c:	e7ae      	b.n	80091dc <_malloc_r+0x34>
 800927e:	463c      	mov	r4, r7
 8009280:	687f      	ldr	r7, [r7, #4]
 8009282:	e7b6      	b.n	80091f2 <_malloc_r+0x4a>
 8009284:	461a      	mov	r2, r3
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	42a3      	cmp	r3, r4
 800928a:	d1fb      	bne.n	8009284 <_malloc_r+0xdc>
 800928c:	2300      	movs	r3, #0
 800928e:	6053      	str	r3, [r2, #4]
 8009290:	e7de      	b.n	8009250 <_malloc_r+0xa8>
 8009292:	230c      	movs	r3, #12
 8009294:	6033      	str	r3, [r6, #0]
 8009296:	4630      	mov	r0, r6
 8009298:	f000 f80c 	bl	80092b4 <__malloc_unlock>
 800929c:	e794      	b.n	80091c8 <_malloc_r+0x20>
 800929e:	6005      	str	r5, [r0, #0]
 80092a0:	e7d6      	b.n	8009250 <_malloc_r+0xa8>
 80092a2:	bf00      	nop
 80092a4:	2000203c 	.word	0x2000203c

080092a8 <__malloc_lock>:
 80092a8:	4801      	ldr	r0, [pc, #4]	@ (80092b0 <__malloc_lock+0x8>)
 80092aa:	f7ff bf0f 	b.w	80090cc <__retarget_lock_acquire_recursive>
 80092ae:	bf00      	nop
 80092b0:	20002034 	.word	0x20002034

080092b4 <__malloc_unlock>:
 80092b4:	4801      	ldr	r0, [pc, #4]	@ (80092bc <__malloc_unlock+0x8>)
 80092b6:	f7ff bf0a 	b.w	80090ce <__retarget_lock_release_recursive>
 80092ba:	bf00      	nop
 80092bc:	20002034 	.word	0x20002034

080092c0 <__ssputs_r>:
 80092c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092c4:	688e      	ldr	r6, [r1, #8]
 80092c6:	461f      	mov	r7, r3
 80092c8:	42be      	cmp	r6, r7
 80092ca:	680b      	ldr	r3, [r1, #0]
 80092cc:	4682      	mov	sl, r0
 80092ce:	460c      	mov	r4, r1
 80092d0:	4690      	mov	r8, r2
 80092d2:	d82d      	bhi.n	8009330 <__ssputs_r+0x70>
 80092d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80092d8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80092dc:	d026      	beq.n	800932c <__ssputs_r+0x6c>
 80092de:	6965      	ldr	r5, [r4, #20]
 80092e0:	6909      	ldr	r1, [r1, #16]
 80092e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80092e6:	eba3 0901 	sub.w	r9, r3, r1
 80092ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80092ee:	1c7b      	adds	r3, r7, #1
 80092f0:	444b      	add	r3, r9
 80092f2:	106d      	asrs	r5, r5, #1
 80092f4:	429d      	cmp	r5, r3
 80092f6:	bf38      	it	cc
 80092f8:	461d      	movcc	r5, r3
 80092fa:	0553      	lsls	r3, r2, #21
 80092fc:	d527      	bpl.n	800934e <__ssputs_r+0x8e>
 80092fe:	4629      	mov	r1, r5
 8009300:	f7ff ff52 	bl	80091a8 <_malloc_r>
 8009304:	4606      	mov	r6, r0
 8009306:	b360      	cbz	r0, 8009362 <__ssputs_r+0xa2>
 8009308:	6921      	ldr	r1, [r4, #16]
 800930a:	464a      	mov	r2, r9
 800930c:	f000 fae8 	bl	80098e0 <memcpy>
 8009310:	89a3      	ldrh	r3, [r4, #12]
 8009312:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009316:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800931a:	81a3      	strh	r3, [r4, #12]
 800931c:	6126      	str	r6, [r4, #16]
 800931e:	6165      	str	r5, [r4, #20]
 8009320:	444e      	add	r6, r9
 8009322:	eba5 0509 	sub.w	r5, r5, r9
 8009326:	6026      	str	r6, [r4, #0]
 8009328:	60a5      	str	r5, [r4, #8]
 800932a:	463e      	mov	r6, r7
 800932c:	42be      	cmp	r6, r7
 800932e:	d900      	bls.n	8009332 <__ssputs_r+0x72>
 8009330:	463e      	mov	r6, r7
 8009332:	6820      	ldr	r0, [r4, #0]
 8009334:	4632      	mov	r2, r6
 8009336:	4641      	mov	r1, r8
 8009338:	f000 faa8 	bl	800988c <memmove>
 800933c:	68a3      	ldr	r3, [r4, #8]
 800933e:	1b9b      	subs	r3, r3, r6
 8009340:	60a3      	str	r3, [r4, #8]
 8009342:	6823      	ldr	r3, [r4, #0]
 8009344:	4433      	add	r3, r6
 8009346:	6023      	str	r3, [r4, #0]
 8009348:	2000      	movs	r0, #0
 800934a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800934e:	462a      	mov	r2, r5
 8009350:	f000 fad4 	bl	80098fc <_realloc_r>
 8009354:	4606      	mov	r6, r0
 8009356:	2800      	cmp	r0, #0
 8009358:	d1e0      	bne.n	800931c <__ssputs_r+0x5c>
 800935a:	6921      	ldr	r1, [r4, #16]
 800935c:	4650      	mov	r0, sl
 800935e:	f7ff feb7 	bl	80090d0 <_free_r>
 8009362:	230c      	movs	r3, #12
 8009364:	f8ca 3000 	str.w	r3, [sl]
 8009368:	89a3      	ldrh	r3, [r4, #12]
 800936a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800936e:	81a3      	strh	r3, [r4, #12]
 8009370:	f04f 30ff 	mov.w	r0, #4294967295
 8009374:	e7e9      	b.n	800934a <__ssputs_r+0x8a>
	...

08009378 <_svfiprintf_r>:
 8009378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800937c:	4698      	mov	r8, r3
 800937e:	898b      	ldrh	r3, [r1, #12]
 8009380:	061b      	lsls	r3, r3, #24
 8009382:	b09d      	sub	sp, #116	@ 0x74
 8009384:	4607      	mov	r7, r0
 8009386:	460d      	mov	r5, r1
 8009388:	4614      	mov	r4, r2
 800938a:	d510      	bpl.n	80093ae <_svfiprintf_r+0x36>
 800938c:	690b      	ldr	r3, [r1, #16]
 800938e:	b973      	cbnz	r3, 80093ae <_svfiprintf_r+0x36>
 8009390:	2140      	movs	r1, #64	@ 0x40
 8009392:	f7ff ff09 	bl	80091a8 <_malloc_r>
 8009396:	6028      	str	r0, [r5, #0]
 8009398:	6128      	str	r0, [r5, #16]
 800939a:	b930      	cbnz	r0, 80093aa <_svfiprintf_r+0x32>
 800939c:	230c      	movs	r3, #12
 800939e:	603b      	str	r3, [r7, #0]
 80093a0:	f04f 30ff 	mov.w	r0, #4294967295
 80093a4:	b01d      	add	sp, #116	@ 0x74
 80093a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093aa:	2340      	movs	r3, #64	@ 0x40
 80093ac:	616b      	str	r3, [r5, #20]
 80093ae:	2300      	movs	r3, #0
 80093b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80093b2:	2320      	movs	r3, #32
 80093b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80093b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80093bc:	2330      	movs	r3, #48	@ 0x30
 80093be:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800955c <_svfiprintf_r+0x1e4>
 80093c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80093c6:	f04f 0901 	mov.w	r9, #1
 80093ca:	4623      	mov	r3, r4
 80093cc:	469a      	mov	sl, r3
 80093ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093d2:	b10a      	cbz	r2, 80093d8 <_svfiprintf_r+0x60>
 80093d4:	2a25      	cmp	r2, #37	@ 0x25
 80093d6:	d1f9      	bne.n	80093cc <_svfiprintf_r+0x54>
 80093d8:	ebba 0b04 	subs.w	fp, sl, r4
 80093dc:	d00b      	beq.n	80093f6 <_svfiprintf_r+0x7e>
 80093de:	465b      	mov	r3, fp
 80093e0:	4622      	mov	r2, r4
 80093e2:	4629      	mov	r1, r5
 80093e4:	4638      	mov	r0, r7
 80093e6:	f7ff ff6b 	bl	80092c0 <__ssputs_r>
 80093ea:	3001      	adds	r0, #1
 80093ec:	f000 80a7 	beq.w	800953e <_svfiprintf_r+0x1c6>
 80093f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80093f2:	445a      	add	r2, fp
 80093f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80093f6:	f89a 3000 	ldrb.w	r3, [sl]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	f000 809f 	beq.w	800953e <_svfiprintf_r+0x1c6>
 8009400:	2300      	movs	r3, #0
 8009402:	f04f 32ff 	mov.w	r2, #4294967295
 8009406:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800940a:	f10a 0a01 	add.w	sl, sl, #1
 800940e:	9304      	str	r3, [sp, #16]
 8009410:	9307      	str	r3, [sp, #28]
 8009412:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009416:	931a      	str	r3, [sp, #104]	@ 0x68
 8009418:	4654      	mov	r4, sl
 800941a:	2205      	movs	r2, #5
 800941c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009420:	484e      	ldr	r0, [pc, #312]	@ (800955c <_svfiprintf_r+0x1e4>)
 8009422:	f7f6 fedd 	bl	80001e0 <memchr>
 8009426:	9a04      	ldr	r2, [sp, #16]
 8009428:	b9d8      	cbnz	r0, 8009462 <_svfiprintf_r+0xea>
 800942a:	06d0      	lsls	r0, r2, #27
 800942c:	bf44      	itt	mi
 800942e:	2320      	movmi	r3, #32
 8009430:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009434:	0711      	lsls	r1, r2, #28
 8009436:	bf44      	itt	mi
 8009438:	232b      	movmi	r3, #43	@ 0x2b
 800943a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800943e:	f89a 3000 	ldrb.w	r3, [sl]
 8009442:	2b2a      	cmp	r3, #42	@ 0x2a
 8009444:	d015      	beq.n	8009472 <_svfiprintf_r+0xfa>
 8009446:	9a07      	ldr	r2, [sp, #28]
 8009448:	4654      	mov	r4, sl
 800944a:	2000      	movs	r0, #0
 800944c:	f04f 0c0a 	mov.w	ip, #10
 8009450:	4621      	mov	r1, r4
 8009452:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009456:	3b30      	subs	r3, #48	@ 0x30
 8009458:	2b09      	cmp	r3, #9
 800945a:	d94b      	bls.n	80094f4 <_svfiprintf_r+0x17c>
 800945c:	b1b0      	cbz	r0, 800948c <_svfiprintf_r+0x114>
 800945e:	9207      	str	r2, [sp, #28]
 8009460:	e014      	b.n	800948c <_svfiprintf_r+0x114>
 8009462:	eba0 0308 	sub.w	r3, r0, r8
 8009466:	fa09 f303 	lsl.w	r3, r9, r3
 800946a:	4313      	orrs	r3, r2
 800946c:	9304      	str	r3, [sp, #16]
 800946e:	46a2      	mov	sl, r4
 8009470:	e7d2      	b.n	8009418 <_svfiprintf_r+0xa0>
 8009472:	9b03      	ldr	r3, [sp, #12]
 8009474:	1d19      	adds	r1, r3, #4
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	9103      	str	r1, [sp, #12]
 800947a:	2b00      	cmp	r3, #0
 800947c:	bfbb      	ittet	lt
 800947e:	425b      	neglt	r3, r3
 8009480:	f042 0202 	orrlt.w	r2, r2, #2
 8009484:	9307      	strge	r3, [sp, #28]
 8009486:	9307      	strlt	r3, [sp, #28]
 8009488:	bfb8      	it	lt
 800948a:	9204      	strlt	r2, [sp, #16]
 800948c:	7823      	ldrb	r3, [r4, #0]
 800948e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009490:	d10a      	bne.n	80094a8 <_svfiprintf_r+0x130>
 8009492:	7863      	ldrb	r3, [r4, #1]
 8009494:	2b2a      	cmp	r3, #42	@ 0x2a
 8009496:	d132      	bne.n	80094fe <_svfiprintf_r+0x186>
 8009498:	9b03      	ldr	r3, [sp, #12]
 800949a:	1d1a      	adds	r2, r3, #4
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	9203      	str	r2, [sp, #12]
 80094a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80094a4:	3402      	adds	r4, #2
 80094a6:	9305      	str	r3, [sp, #20]
 80094a8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800956c <_svfiprintf_r+0x1f4>
 80094ac:	7821      	ldrb	r1, [r4, #0]
 80094ae:	2203      	movs	r2, #3
 80094b0:	4650      	mov	r0, sl
 80094b2:	f7f6 fe95 	bl	80001e0 <memchr>
 80094b6:	b138      	cbz	r0, 80094c8 <_svfiprintf_r+0x150>
 80094b8:	9b04      	ldr	r3, [sp, #16]
 80094ba:	eba0 000a 	sub.w	r0, r0, sl
 80094be:	2240      	movs	r2, #64	@ 0x40
 80094c0:	4082      	lsls	r2, r0
 80094c2:	4313      	orrs	r3, r2
 80094c4:	3401      	adds	r4, #1
 80094c6:	9304      	str	r3, [sp, #16]
 80094c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094cc:	4824      	ldr	r0, [pc, #144]	@ (8009560 <_svfiprintf_r+0x1e8>)
 80094ce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80094d2:	2206      	movs	r2, #6
 80094d4:	f7f6 fe84 	bl	80001e0 <memchr>
 80094d8:	2800      	cmp	r0, #0
 80094da:	d036      	beq.n	800954a <_svfiprintf_r+0x1d2>
 80094dc:	4b21      	ldr	r3, [pc, #132]	@ (8009564 <_svfiprintf_r+0x1ec>)
 80094de:	bb1b      	cbnz	r3, 8009528 <_svfiprintf_r+0x1b0>
 80094e0:	9b03      	ldr	r3, [sp, #12]
 80094e2:	3307      	adds	r3, #7
 80094e4:	f023 0307 	bic.w	r3, r3, #7
 80094e8:	3308      	adds	r3, #8
 80094ea:	9303      	str	r3, [sp, #12]
 80094ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094ee:	4433      	add	r3, r6
 80094f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80094f2:	e76a      	b.n	80093ca <_svfiprintf_r+0x52>
 80094f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80094f8:	460c      	mov	r4, r1
 80094fa:	2001      	movs	r0, #1
 80094fc:	e7a8      	b.n	8009450 <_svfiprintf_r+0xd8>
 80094fe:	2300      	movs	r3, #0
 8009500:	3401      	adds	r4, #1
 8009502:	9305      	str	r3, [sp, #20]
 8009504:	4619      	mov	r1, r3
 8009506:	f04f 0c0a 	mov.w	ip, #10
 800950a:	4620      	mov	r0, r4
 800950c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009510:	3a30      	subs	r2, #48	@ 0x30
 8009512:	2a09      	cmp	r2, #9
 8009514:	d903      	bls.n	800951e <_svfiprintf_r+0x1a6>
 8009516:	2b00      	cmp	r3, #0
 8009518:	d0c6      	beq.n	80094a8 <_svfiprintf_r+0x130>
 800951a:	9105      	str	r1, [sp, #20]
 800951c:	e7c4      	b.n	80094a8 <_svfiprintf_r+0x130>
 800951e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009522:	4604      	mov	r4, r0
 8009524:	2301      	movs	r3, #1
 8009526:	e7f0      	b.n	800950a <_svfiprintf_r+0x192>
 8009528:	ab03      	add	r3, sp, #12
 800952a:	9300      	str	r3, [sp, #0]
 800952c:	462a      	mov	r2, r5
 800952e:	4b0e      	ldr	r3, [pc, #56]	@ (8009568 <_svfiprintf_r+0x1f0>)
 8009530:	a904      	add	r1, sp, #16
 8009532:	4638      	mov	r0, r7
 8009534:	f3af 8000 	nop.w
 8009538:	1c42      	adds	r2, r0, #1
 800953a:	4606      	mov	r6, r0
 800953c:	d1d6      	bne.n	80094ec <_svfiprintf_r+0x174>
 800953e:	89ab      	ldrh	r3, [r5, #12]
 8009540:	065b      	lsls	r3, r3, #25
 8009542:	f53f af2d 	bmi.w	80093a0 <_svfiprintf_r+0x28>
 8009546:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009548:	e72c      	b.n	80093a4 <_svfiprintf_r+0x2c>
 800954a:	ab03      	add	r3, sp, #12
 800954c:	9300      	str	r3, [sp, #0]
 800954e:	462a      	mov	r2, r5
 8009550:	4b05      	ldr	r3, [pc, #20]	@ (8009568 <_svfiprintf_r+0x1f0>)
 8009552:	a904      	add	r1, sp, #16
 8009554:	4638      	mov	r0, r7
 8009556:	f000 f879 	bl	800964c <_printf_i>
 800955a:	e7ed      	b.n	8009538 <_svfiprintf_r+0x1c0>
 800955c:	08009a9c 	.word	0x08009a9c
 8009560:	08009aa6 	.word	0x08009aa6
 8009564:	00000000 	.word	0x00000000
 8009568:	080092c1 	.word	0x080092c1
 800956c:	08009aa2 	.word	0x08009aa2

08009570 <_printf_common>:
 8009570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009574:	4616      	mov	r6, r2
 8009576:	4698      	mov	r8, r3
 8009578:	688a      	ldr	r2, [r1, #8]
 800957a:	690b      	ldr	r3, [r1, #16]
 800957c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009580:	4293      	cmp	r3, r2
 8009582:	bfb8      	it	lt
 8009584:	4613      	movlt	r3, r2
 8009586:	6033      	str	r3, [r6, #0]
 8009588:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800958c:	4607      	mov	r7, r0
 800958e:	460c      	mov	r4, r1
 8009590:	b10a      	cbz	r2, 8009596 <_printf_common+0x26>
 8009592:	3301      	adds	r3, #1
 8009594:	6033      	str	r3, [r6, #0]
 8009596:	6823      	ldr	r3, [r4, #0]
 8009598:	0699      	lsls	r1, r3, #26
 800959a:	bf42      	ittt	mi
 800959c:	6833      	ldrmi	r3, [r6, #0]
 800959e:	3302      	addmi	r3, #2
 80095a0:	6033      	strmi	r3, [r6, #0]
 80095a2:	6825      	ldr	r5, [r4, #0]
 80095a4:	f015 0506 	ands.w	r5, r5, #6
 80095a8:	d106      	bne.n	80095b8 <_printf_common+0x48>
 80095aa:	f104 0a19 	add.w	sl, r4, #25
 80095ae:	68e3      	ldr	r3, [r4, #12]
 80095b0:	6832      	ldr	r2, [r6, #0]
 80095b2:	1a9b      	subs	r3, r3, r2
 80095b4:	42ab      	cmp	r3, r5
 80095b6:	dc26      	bgt.n	8009606 <_printf_common+0x96>
 80095b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80095bc:	6822      	ldr	r2, [r4, #0]
 80095be:	3b00      	subs	r3, #0
 80095c0:	bf18      	it	ne
 80095c2:	2301      	movne	r3, #1
 80095c4:	0692      	lsls	r2, r2, #26
 80095c6:	d42b      	bmi.n	8009620 <_printf_common+0xb0>
 80095c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80095cc:	4641      	mov	r1, r8
 80095ce:	4638      	mov	r0, r7
 80095d0:	47c8      	blx	r9
 80095d2:	3001      	adds	r0, #1
 80095d4:	d01e      	beq.n	8009614 <_printf_common+0xa4>
 80095d6:	6823      	ldr	r3, [r4, #0]
 80095d8:	6922      	ldr	r2, [r4, #16]
 80095da:	f003 0306 	and.w	r3, r3, #6
 80095de:	2b04      	cmp	r3, #4
 80095e0:	bf02      	ittt	eq
 80095e2:	68e5      	ldreq	r5, [r4, #12]
 80095e4:	6833      	ldreq	r3, [r6, #0]
 80095e6:	1aed      	subeq	r5, r5, r3
 80095e8:	68a3      	ldr	r3, [r4, #8]
 80095ea:	bf0c      	ite	eq
 80095ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80095f0:	2500      	movne	r5, #0
 80095f2:	4293      	cmp	r3, r2
 80095f4:	bfc4      	itt	gt
 80095f6:	1a9b      	subgt	r3, r3, r2
 80095f8:	18ed      	addgt	r5, r5, r3
 80095fa:	2600      	movs	r6, #0
 80095fc:	341a      	adds	r4, #26
 80095fe:	42b5      	cmp	r5, r6
 8009600:	d11a      	bne.n	8009638 <_printf_common+0xc8>
 8009602:	2000      	movs	r0, #0
 8009604:	e008      	b.n	8009618 <_printf_common+0xa8>
 8009606:	2301      	movs	r3, #1
 8009608:	4652      	mov	r2, sl
 800960a:	4641      	mov	r1, r8
 800960c:	4638      	mov	r0, r7
 800960e:	47c8      	blx	r9
 8009610:	3001      	adds	r0, #1
 8009612:	d103      	bne.n	800961c <_printf_common+0xac>
 8009614:	f04f 30ff 	mov.w	r0, #4294967295
 8009618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800961c:	3501      	adds	r5, #1
 800961e:	e7c6      	b.n	80095ae <_printf_common+0x3e>
 8009620:	18e1      	adds	r1, r4, r3
 8009622:	1c5a      	adds	r2, r3, #1
 8009624:	2030      	movs	r0, #48	@ 0x30
 8009626:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800962a:	4422      	add	r2, r4
 800962c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009630:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009634:	3302      	adds	r3, #2
 8009636:	e7c7      	b.n	80095c8 <_printf_common+0x58>
 8009638:	2301      	movs	r3, #1
 800963a:	4622      	mov	r2, r4
 800963c:	4641      	mov	r1, r8
 800963e:	4638      	mov	r0, r7
 8009640:	47c8      	blx	r9
 8009642:	3001      	adds	r0, #1
 8009644:	d0e6      	beq.n	8009614 <_printf_common+0xa4>
 8009646:	3601      	adds	r6, #1
 8009648:	e7d9      	b.n	80095fe <_printf_common+0x8e>
	...

0800964c <_printf_i>:
 800964c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009650:	7e0f      	ldrb	r7, [r1, #24]
 8009652:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009654:	2f78      	cmp	r7, #120	@ 0x78
 8009656:	4691      	mov	r9, r2
 8009658:	4680      	mov	r8, r0
 800965a:	460c      	mov	r4, r1
 800965c:	469a      	mov	sl, r3
 800965e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009662:	d807      	bhi.n	8009674 <_printf_i+0x28>
 8009664:	2f62      	cmp	r7, #98	@ 0x62
 8009666:	d80a      	bhi.n	800967e <_printf_i+0x32>
 8009668:	2f00      	cmp	r7, #0
 800966a:	f000 80d2 	beq.w	8009812 <_printf_i+0x1c6>
 800966e:	2f58      	cmp	r7, #88	@ 0x58
 8009670:	f000 80b9 	beq.w	80097e6 <_printf_i+0x19a>
 8009674:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009678:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800967c:	e03a      	b.n	80096f4 <_printf_i+0xa8>
 800967e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009682:	2b15      	cmp	r3, #21
 8009684:	d8f6      	bhi.n	8009674 <_printf_i+0x28>
 8009686:	a101      	add	r1, pc, #4	@ (adr r1, 800968c <_printf_i+0x40>)
 8009688:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800968c:	080096e5 	.word	0x080096e5
 8009690:	080096f9 	.word	0x080096f9
 8009694:	08009675 	.word	0x08009675
 8009698:	08009675 	.word	0x08009675
 800969c:	08009675 	.word	0x08009675
 80096a0:	08009675 	.word	0x08009675
 80096a4:	080096f9 	.word	0x080096f9
 80096a8:	08009675 	.word	0x08009675
 80096ac:	08009675 	.word	0x08009675
 80096b0:	08009675 	.word	0x08009675
 80096b4:	08009675 	.word	0x08009675
 80096b8:	080097f9 	.word	0x080097f9
 80096bc:	08009723 	.word	0x08009723
 80096c0:	080097b3 	.word	0x080097b3
 80096c4:	08009675 	.word	0x08009675
 80096c8:	08009675 	.word	0x08009675
 80096cc:	0800981b 	.word	0x0800981b
 80096d0:	08009675 	.word	0x08009675
 80096d4:	08009723 	.word	0x08009723
 80096d8:	08009675 	.word	0x08009675
 80096dc:	08009675 	.word	0x08009675
 80096e0:	080097bb 	.word	0x080097bb
 80096e4:	6833      	ldr	r3, [r6, #0]
 80096e6:	1d1a      	adds	r2, r3, #4
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	6032      	str	r2, [r6, #0]
 80096ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80096f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80096f4:	2301      	movs	r3, #1
 80096f6:	e09d      	b.n	8009834 <_printf_i+0x1e8>
 80096f8:	6833      	ldr	r3, [r6, #0]
 80096fa:	6820      	ldr	r0, [r4, #0]
 80096fc:	1d19      	adds	r1, r3, #4
 80096fe:	6031      	str	r1, [r6, #0]
 8009700:	0606      	lsls	r6, r0, #24
 8009702:	d501      	bpl.n	8009708 <_printf_i+0xbc>
 8009704:	681d      	ldr	r5, [r3, #0]
 8009706:	e003      	b.n	8009710 <_printf_i+0xc4>
 8009708:	0645      	lsls	r5, r0, #25
 800970a:	d5fb      	bpl.n	8009704 <_printf_i+0xb8>
 800970c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009710:	2d00      	cmp	r5, #0
 8009712:	da03      	bge.n	800971c <_printf_i+0xd0>
 8009714:	232d      	movs	r3, #45	@ 0x2d
 8009716:	426d      	negs	r5, r5
 8009718:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800971c:	4859      	ldr	r0, [pc, #356]	@ (8009884 <_printf_i+0x238>)
 800971e:	230a      	movs	r3, #10
 8009720:	e011      	b.n	8009746 <_printf_i+0xfa>
 8009722:	6821      	ldr	r1, [r4, #0]
 8009724:	6833      	ldr	r3, [r6, #0]
 8009726:	0608      	lsls	r0, r1, #24
 8009728:	f853 5b04 	ldr.w	r5, [r3], #4
 800972c:	d402      	bmi.n	8009734 <_printf_i+0xe8>
 800972e:	0649      	lsls	r1, r1, #25
 8009730:	bf48      	it	mi
 8009732:	b2ad      	uxthmi	r5, r5
 8009734:	2f6f      	cmp	r7, #111	@ 0x6f
 8009736:	4853      	ldr	r0, [pc, #332]	@ (8009884 <_printf_i+0x238>)
 8009738:	6033      	str	r3, [r6, #0]
 800973a:	bf14      	ite	ne
 800973c:	230a      	movne	r3, #10
 800973e:	2308      	moveq	r3, #8
 8009740:	2100      	movs	r1, #0
 8009742:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009746:	6866      	ldr	r6, [r4, #4]
 8009748:	60a6      	str	r6, [r4, #8]
 800974a:	2e00      	cmp	r6, #0
 800974c:	bfa2      	ittt	ge
 800974e:	6821      	ldrge	r1, [r4, #0]
 8009750:	f021 0104 	bicge.w	r1, r1, #4
 8009754:	6021      	strge	r1, [r4, #0]
 8009756:	b90d      	cbnz	r5, 800975c <_printf_i+0x110>
 8009758:	2e00      	cmp	r6, #0
 800975a:	d04b      	beq.n	80097f4 <_printf_i+0x1a8>
 800975c:	4616      	mov	r6, r2
 800975e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009762:	fb03 5711 	mls	r7, r3, r1, r5
 8009766:	5dc7      	ldrb	r7, [r0, r7]
 8009768:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800976c:	462f      	mov	r7, r5
 800976e:	42bb      	cmp	r3, r7
 8009770:	460d      	mov	r5, r1
 8009772:	d9f4      	bls.n	800975e <_printf_i+0x112>
 8009774:	2b08      	cmp	r3, #8
 8009776:	d10b      	bne.n	8009790 <_printf_i+0x144>
 8009778:	6823      	ldr	r3, [r4, #0]
 800977a:	07df      	lsls	r7, r3, #31
 800977c:	d508      	bpl.n	8009790 <_printf_i+0x144>
 800977e:	6923      	ldr	r3, [r4, #16]
 8009780:	6861      	ldr	r1, [r4, #4]
 8009782:	4299      	cmp	r1, r3
 8009784:	bfde      	ittt	le
 8009786:	2330      	movle	r3, #48	@ 0x30
 8009788:	f806 3c01 	strble.w	r3, [r6, #-1]
 800978c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009790:	1b92      	subs	r2, r2, r6
 8009792:	6122      	str	r2, [r4, #16]
 8009794:	f8cd a000 	str.w	sl, [sp]
 8009798:	464b      	mov	r3, r9
 800979a:	aa03      	add	r2, sp, #12
 800979c:	4621      	mov	r1, r4
 800979e:	4640      	mov	r0, r8
 80097a0:	f7ff fee6 	bl	8009570 <_printf_common>
 80097a4:	3001      	adds	r0, #1
 80097a6:	d14a      	bne.n	800983e <_printf_i+0x1f2>
 80097a8:	f04f 30ff 	mov.w	r0, #4294967295
 80097ac:	b004      	add	sp, #16
 80097ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097b2:	6823      	ldr	r3, [r4, #0]
 80097b4:	f043 0320 	orr.w	r3, r3, #32
 80097b8:	6023      	str	r3, [r4, #0]
 80097ba:	4833      	ldr	r0, [pc, #204]	@ (8009888 <_printf_i+0x23c>)
 80097bc:	2778      	movs	r7, #120	@ 0x78
 80097be:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80097c2:	6823      	ldr	r3, [r4, #0]
 80097c4:	6831      	ldr	r1, [r6, #0]
 80097c6:	061f      	lsls	r7, r3, #24
 80097c8:	f851 5b04 	ldr.w	r5, [r1], #4
 80097cc:	d402      	bmi.n	80097d4 <_printf_i+0x188>
 80097ce:	065f      	lsls	r7, r3, #25
 80097d0:	bf48      	it	mi
 80097d2:	b2ad      	uxthmi	r5, r5
 80097d4:	6031      	str	r1, [r6, #0]
 80097d6:	07d9      	lsls	r1, r3, #31
 80097d8:	bf44      	itt	mi
 80097da:	f043 0320 	orrmi.w	r3, r3, #32
 80097de:	6023      	strmi	r3, [r4, #0]
 80097e0:	b11d      	cbz	r5, 80097ea <_printf_i+0x19e>
 80097e2:	2310      	movs	r3, #16
 80097e4:	e7ac      	b.n	8009740 <_printf_i+0xf4>
 80097e6:	4827      	ldr	r0, [pc, #156]	@ (8009884 <_printf_i+0x238>)
 80097e8:	e7e9      	b.n	80097be <_printf_i+0x172>
 80097ea:	6823      	ldr	r3, [r4, #0]
 80097ec:	f023 0320 	bic.w	r3, r3, #32
 80097f0:	6023      	str	r3, [r4, #0]
 80097f2:	e7f6      	b.n	80097e2 <_printf_i+0x196>
 80097f4:	4616      	mov	r6, r2
 80097f6:	e7bd      	b.n	8009774 <_printf_i+0x128>
 80097f8:	6833      	ldr	r3, [r6, #0]
 80097fa:	6825      	ldr	r5, [r4, #0]
 80097fc:	6961      	ldr	r1, [r4, #20]
 80097fe:	1d18      	adds	r0, r3, #4
 8009800:	6030      	str	r0, [r6, #0]
 8009802:	062e      	lsls	r6, r5, #24
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	d501      	bpl.n	800980c <_printf_i+0x1c0>
 8009808:	6019      	str	r1, [r3, #0]
 800980a:	e002      	b.n	8009812 <_printf_i+0x1c6>
 800980c:	0668      	lsls	r0, r5, #25
 800980e:	d5fb      	bpl.n	8009808 <_printf_i+0x1bc>
 8009810:	8019      	strh	r1, [r3, #0]
 8009812:	2300      	movs	r3, #0
 8009814:	6123      	str	r3, [r4, #16]
 8009816:	4616      	mov	r6, r2
 8009818:	e7bc      	b.n	8009794 <_printf_i+0x148>
 800981a:	6833      	ldr	r3, [r6, #0]
 800981c:	1d1a      	adds	r2, r3, #4
 800981e:	6032      	str	r2, [r6, #0]
 8009820:	681e      	ldr	r6, [r3, #0]
 8009822:	6862      	ldr	r2, [r4, #4]
 8009824:	2100      	movs	r1, #0
 8009826:	4630      	mov	r0, r6
 8009828:	f7f6 fcda 	bl	80001e0 <memchr>
 800982c:	b108      	cbz	r0, 8009832 <_printf_i+0x1e6>
 800982e:	1b80      	subs	r0, r0, r6
 8009830:	6060      	str	r0, [r4, #4]
 8009832:	6863      	ldr	r3, [r4, #4]
 8009834:	6123      	str	r3, [r4, #16]
 8009836:	2300      	movs	r3, #0
 8009838:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800983c:	e7aa      	b.n	8009794 <_printf_i+0x148>
 800983e:	6923      	ldr	r3, [r4, #16]
 8009840:	4632      	mov	r2, r6
 8009842:	4649      	mov	r1, r9
 8009844:	4640      	mov	r0, r8
 8009846:	47d0      	blx	sl
 8009848:	3001      	adds	r0, #1
 800984a:	d0ad      	beq.n	80097a8 <_printf_i+0x15c>
 800984c:	6823      	ldr	r3, [r4, #0]
 800984e:	079b      	lsls	r3, r3, #30
 8009850:	d413      	bmi.n	800987a <_printf_i+0x22e>
 8009852:	68e0      	ldr	r0, [r4, #12]
 8009854:	9b03      	ldr	r3, [sp, #12]
 8009856:	4298      	cmp	r0, r3
 8009858:	bfb8      	it	lt
 800985a:	4618      	movlt	r0, r3
 800985c:	e7a6      	b.n	80097ac <_printf_i+0x160>
 800985e:	2301      	movs	r3, #1
 8009860:	4632      	mov	r2, r6
 8009862:	4649      	mov	r1, r9
 8009864:	4640      	mov	r0, r8
 8009866:	47d0      	blx	sl
 8009868:	3001      	adds	r0, #1
 800986a:	d09d      	beq.n	80097a8 <_printf_i+0x15c>
 800986c:	3501      	adds	r5, #1
 800986e:	68e3      	ldr	r3, [r4, #12]
 8009870:	9903      	ldr	r1, [sp, #12]
 8009872:	1a5b      	subs	r3, r3, r1
 8009874:	42ab      	cmp	r3, r5
 8009876:	dcf2      	bgt.n	800985e <_printf_i+0x212>
 8009878:	e7eb      	b.n	8009852 <_printf_i+0x206>
 800987a:	2500      	movs	r5, #0
 800987c:	f104 0619 	add.w	r6, r4, #25
 8009880:	e7f5      	b.n	800986e <_printf_i+0x222>
 8009882:	bf00      	nop
 8009884:	08009aad 	.word	0x08009aad
 8009888:	08009abe 	.word	0x08009abe

0800988c <memmove>:
 800988c:	4288      	cmp	r0, r1
 800988e:	b510      	push	{r4, lr}
 8009890:	eb01 0402 	add.w	r4, r1, r2
 8009894:	d902      	bls.n	800989c <memmove+0x10>
 8009896:	4284      	cmp	r4, r0
 8009898:	4623      	mov	r3, r4
 800989a:	d807      	bhi.n	80098ac <memmove+0x20>
 800989c:	1e43      	subs	r3, r0, #1
 800989e:	42a1      	cmp	r1, r4
 80098a0:	d008      	beq.n	80098b4 <memmove+0x28>
 80098a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80098a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80098aa:	e7f8      	b.n	800989e <memmove+0x12>
 80098ac:	4402      	add	r2, r0
 80098ae:	4601      	mov	r1, r0
 80098b0:	428a      	cmp	r2, r1
 80098b2:	d100      	bne.n	80098b6 <memmove+0x2a>
 80098b4:	bd10      	pop	{r4, pc}
 80098b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80098ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80098be:	e7f7      	b.n	80098b0 <memmove+0x24>

080098c0 <_sbrk_r>:
 80098c0:	b538      	push	{r3, r4, r5, lr}
 80098c2:	4d06      	ldr	r5, [pc, #24]	@ (80098dc <_sbrk_r+0x1c>)
 80098c4:	2300      	movs	r3, #0
 80098c6:	4604      	mov	r4, r0
 80098c8:	4608      	mov	r0, r1
 80098ca:	602b      	str	r3, [r5, #0]
 80098cc:	f7f8 f952 	bl	8001b74 <_sbrk>
 80098d0:	1c43      	adds	r3, r0, #1
 80098d2:	d102      	bne.n	80098da <_sbrk_r+0x1a>
 80098d4:	682b      	ldr	r3, [r5, #0]
 80098d6:	b103      	cbz	r3, 80098da <_sbrk_r+0x1a>
 80098d8:	6023      	str	r3, [r4, #0]
 80098da:	bd38      	pop	{r3, r4, r5, pc}
 80098dc:	20002030 	.word	0x20002030

080098e0 <memcpy>:
 80098e0:	440a      	add	r2, r1
 80098e2:	4291      	cmp	r1, r2
 80098e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80098e8:	d100      	bne.n	80098ec <memcpy+0xc>
 80098ea:	4770      	bx	lr
 80098ec:	b510      	push	{r4, lr}
 80098ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098f6:	4291      	cmp	r1, r2
 80098f8:	d1f9      	bne.n	80098ee <memcpy+0xe>
 80098fa:	bd10      	pop	{r4, pc}

080098fc <_realloc_r>:
 80098fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009900:	4680      	mov	r8, r0
 8009902:	4615      	mov	r5, r2
 8009904:	460c      	mov	r4, r1
 8009906:	b921      	cbnz	r1, 8009912 <_realloc_r+0x16>
 8009908:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800990c:	4611      	mov	r1, r2
 800990e:	f7ff bc4b 	b.w	80091a8 <_malloc_r>
 8009912:	b92a      	cbnz	r2, 8009920 <_realloc_r+0x24>
 8009914:	f7ff fbdc 	bl	80090d0 <_free_r>
 8009918:	2400      	movs	r4, #0
 800991a:	4620      	mov	r0, r4
 800991c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009920:	f000 f81a 	bl	8009958 <_malloc_usable_size_r>
 8009924:	4285      	cmp	r5, r0
 8009926:	4606      	mov	r6, r0
 8009928:	d802      	bhi.n	8009930 <_realloc_r+0x34>
 800992a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800992e:	d8f4      	bhi.n	800991a <_realloc_r+0x1e>
 8009930:	4629      	mov	r1, r5
 8009932:	4640      	mov	r0, r8
 8009934:	f7ff fc38 	bl	80091a8 <_malloc_r>
 8009938:	4607      	mov	r7, r0
 800993a:	2800      	cmp	r0, #0
 800993c:	d0ec      	beq.n	8009918 <_realloc_r+0x1c>
 800993e:	42b5      	cmp	r5, r6
 8009940:	462a      	mov	r2, r5
 8009942:	4621      	mov	r1, r4
 8009944:	bf28      	it	cs
 8009946:	4632      	movcs	r2, r6
 8009948:	f7ff ffca 	bl	80098e0 <memcpy>
 800994c:	4621      	mov	r1, r4
 800994e:	4640      	mov	r0, r8
 8009950:	f7ff fbbe 	bl	80090d0 <_free_r>
 8009954:	463c      	mov	r4, r7
 8009956:	e7e0      	b.n	800991a <_realloc_r+0x1e>

08009958 <_malloc_usable_size_r>:
 8009958:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800995c:	1f18      	subs	r0, r3, #4
 800995e:	2b00      	cmp	r3, #0
 8009960:	bfbc      	itt	lt
 8009962:	580b      	ldrlt	r3, [r1, r0]
 8009964:	18c0      	addlt	r0, r0, r3
 8009966:	4770      	bx	lr

08009968 <_init>:
 8009968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800996a:	bf00      	nop
 800996c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800996e:	bc08      	pop	{r3}
 8009970:	469e      	mov	lr, r3
 8009972:	4770      	bx	lr

08009974 <_fini>:
 8009974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009976:	bf00      	nop
 8009978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800997a:	bc08      	pop	{r3}
 800997c:	469e      	mov	lr, r3
 800997e:	4770      	bx	lr
