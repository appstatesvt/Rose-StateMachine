
StateMachine2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095a8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08009738  08009738  0000a738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098ac  080098ac  0000b14c  2**0
                  CONTENTS
  4 .ARM          00000008  080098ac  080098ac  0000a8ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080098b4  080098b4  0000b14c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098b4  080098b4  0000a8b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080098b8  080098b8  0000a8b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  080098bc  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b14c  2**0
                  CONTENTS
 10 .bss          00001eac  2000014c  2000014c  0000b14c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001ff8  20001ff8  0000b14c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b14c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000119f4  00000000  00000000  0000b17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003322  00000000  00000000  0001cb70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ee8  00000000  00000000  0001fe98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b1f  00000000  00000000  00020d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025b9e  00000000  00000000  0002189f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013f74  00000000  00000000  0004743d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d74d2  00000000  00000000  0005b3b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00132883  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000416c  00000000  00000000  001328c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000083  00000000  00000000  00136a34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000014c 	.word	0x2000014c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009720 	.word	0x08009720

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000150 	.word	0x20000150
 80001cc:	08009720 	.word	0x08009720

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f001 fa4c 	bl	8001a10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 fd50 	bl	800101c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f000 ff04 	bl	8001388 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000580:	f000 fdb6 	bl	80010f0 <MX_ADC1_Init>
  MX_DAC_Init();
 8000584:	f000 fecc 	bl	8001320 <MX_DAC_Init>
  MX_USB_DEVICE_Init();
 8000588:	f007 ff02 	bl	8008390 <MX_USB_DEVICE_Init>
  MX_ADC2_Init();
 800058c:	f000 fe02 	bl	8001194 <MX_ADC2_Init>
  MX_CAN1_Init();
 8000590:	f000 fe52 	bl	8001238 <MX_CAN1_Init>


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  i_keyIGN 				= HAL_GPIO_ReadPin(keyIGNPort, keyIGN);
 8000594:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000598:	483d      	ldr	r0, [pc, #244]	@ (8000690 <main+0x120>)
 800059a:	f002 fbc7 	bl	8002d2c <HAL_GPIO_ReadPin>
 800059e:	4603      	mov	r3, r0
 80005a0:	461a      	mov	r2, r3
 80005a2:	4b3c      	ldr	r3, [pc, #240]	@ (8000694 <main+0x124>)
 80005a4:	701a      	strb	r2, [r3, #0]
	  i_keyACC 				= HAL_GPIO_ReadPin(keyACCPort, keyACC);
 80005a6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005aa:	4839      	ldr	r0, [pc, #228]	@ (8000690 <main+0x120>)
 80005ac:	f002 fbbe 	bl	8002d2c <HAL_GPIO_ReadPin>
 80005b0:	4603      	mov	r3, r0
 80005b2:	461a      	mov	r2, r3
 80005b4:	4b38      	ldr	r3, [pc, #224]	@ (8000698 <main+0x128>)
 80005b6:	701a      	strb	r2, [r3, #0]
	  i_killSwitch 			= !HAL_GPIO_ReadPin(killSwitchPort, killSwitch);
 80005b8:	2102      	movs	r1, #2
 80005ba:	4838      	ldr	r0, [pc, #224]	@ (800069c <main+0x12c>)
 80005bc:	f002 fbb6 	bl	8002d2c <HAL_GPIO_ReadPin>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	bf0c      	ite	eq
 80005c6:	2301      	moveq	r3, #1
 80005c8:	2300      	movne	r3, #0
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	461a      	mov	r2, r3
 80005ce:	4b34      	ldr	r3, [pc, #208]	@ (80006a0 <main+0x130>)
 80005d0:	701a      	strb	r2, [r3, #0]
	  i_chargeContactor 	= !HAL_GPIO_ReadPin(chargeContactorPort, chargeContactor);
 80005d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005d6:	482e      	ldr	r0, [pc, #184]	@ (8000690 <main+0x120>)
 80005d8:	f002 fba8 	bl	8002d2c <HAL_GPIO_ReadPin>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	bf0c      	ite	eq
 80005e2:	2301      	moveq	r3, #1
 80005e4:	2300      	movne	r3, #0
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	461a      	mov	r2, r3
 80005ea:	4b2e      	ldr	r3, [pc, #184]	@ (80006a4 <main+0x134>)
 80005ec:	701a      	strb	r2, [r3, #0]
	  i_chargeEnable 		= !HAL_GPIO_ReadPin(chargeEnablePort, chargeEnable);
 80005ee:	2108      	movs	r1, #8
 80005f0:	4827      	ldr	r0, [pc, #156]	@ (8000690 <main+0x120>)
 80005f2:	f002 fb9b 	bl	8002d2c <HAL_GPIO_ReadPin>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	bf0c      	ite	eq
 80005fc:	2301      	moveq	r3, #1
 80005fe:	2300      	movne	r3, #0
 8000600:	b2db      	uxtb	r3, r3
 8000602:	461a      	mov	r2, r3
 8000604:	4b28      	ldr	r3, [pc, #160]	@ (80006a8 <main+0x138>)
 8000606:	701a      	strb	r2, [r3, #0]
	  i_disChargeEnable 	= !HAL_GPIO_ReadPin(disChargeEnablePort, disChargeEnable);
 8000608:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800060c:	4820      	ldr	r0, [pc, #128]	@ (8000690 <main+0x120>)
 800060e:	f002 fb8d 	bl	8002d2c <HAL_GPIO_ReadPin>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	bf0c      	ite	eq
 8000618:	2301      	moveq	r3, #1
 800061a:	2300      	movne	r3, #0
 800061c:	b2db      	uxtb	r3, r3
 800061e:	461a      	mov	r2, r3
 8000620:	4b22      	ldr	r3, [pc, #136]	@ (80006ac <main+0x13c>)
 8000622:	701a      	strb	r2, [r3, #0]
	  i_brakeSwitchInput 	= HAL_GPIO_ReadPin(brakeSwitchInputPort, brakeSwitchInput);
 8000624:	2104      	movs	r1, #4
 8000626:	481d      	ldr	r0, [pc, #116]	@ (800069c <main+0x12c>)
 8000628:	f002 fb80 	bl	8002d2c <HAL_GPIO_ReadPin>
 800062c:	4603      	mov	r3, r0
 800062e:	461a      	mov	r2, r3
 8000630:	4b1f      	ldr	r3, [pc, #124]	@ (80006b0 <main+0x140>)
 8000632:	701a      	strb	r2, [r3, #0]


	switch(currentState) {
 8000634:	4b1f      	ldr	r3, [pc, #124]	@ (80006b4 <main+0x144>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	2b06      	cmp	r3, #6
 800063a:	d826      	bhi.n	800068a <main+0x11a>
 800063c:	a201      	add	r2, pc, #4	@ (adr r2, 8000644 <main+0xd4>)
 800063e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000642:	bf00      	nop
 8000644:	08000661 	.word	0x08000661
 8000648:	08000667 	.word	0x08000667
 800064c:	0800066d 	.word	0x0800066d
 8000650:	08000673 	.word	0x08000673
 8000654:	08000679 	.word	0x08000679
 8000658:	0800067f 	.word	0x0800067f
 800065c:	08000685 	.word	0x08000685
			case OFF:
				off_state();
 8000660:	f000 f82a 	bl	80006b8 <off_state>
				break;
 8000664:	e011      	b.n	800068a <main+0x11a>
			case ACC:
				acc_state();
 8000666:	f000 f89b 	bl	80007a0 <acc_state>
				break;
 800066a:	e00e      	b.n	800068a <main+0x11a>
			case IGN:
				ign_state();
 800066c:	f000 f912 	bl	8000894 <ign_state>
				break;
 8000670:	e00b      	b.n	800068a <main+0x11a>
			case DCDC:
				dcdc_state();
 8000672:	f000 f9a3 	bl	80009bc <dcdc_state>
				break;
 8000676:	e008      	b.n	800068a <main+0x11a>
			case ON:
				on_state();
 8000678:	f000 fa2c 	bl	8000ad4 <on_state>
				break;
 800067c:	e005      	b.n	800068a <main+0x11a>
			case CHARGE:
				charge_state();
 800067e:	f000 fa9d 	bl	8000bbc <charge_state>
				break;
 8000682:	e002      	b.n	800068a <main+0x11a>
			case FAULT:
				fault_state();
 8000684:	f000 fb2e 	bl	8000ce4 <fault_state>
				break;
 8000688:	bf00      	nop
		}

	if (1)
	{
		debugMonitor();
 800068a:	f000 fb97 	bl	8000dbc <debugMonitor>
	  i_keyIGN 				= HAL_GPIO_ReadPin(keyIGNPort, keyIGN);
 800068e:	e781      	b.n	8000594 <main+0x24>
 8000690:	40021000 	.word	0x40021000
 8000694:	20000245 	.word	0x20000245
 8000698:	20000246 	.word	0x20000246
 800069c:	40020c00 	.word	0x40020c00
 80006a0:	20000247 	.word	0x20000247
 80006a4:	20000248 	.word	0x20000248
 80006a8:	20000249 	.word	0x20000249
 80006ac:	2000024a 	.word	0x2000024a
 80006b0:	2000024b 	.word	0x2000024b
 80006b4:	20000234 	.word	0x20000234

080006b8 <off_state>:
}

//add brake lights

//Initial setting of bits
void off_state(void){		// State 0
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
	currentTime = HAL_GetTick();
 80006bc:	f001 fa0e 	bl	8001adc <HAL_GetTick>
 80006c0:	4603      	mov	r3, r0
 80006c2:	4a27      	ldr	r2, [pc, #156]	@ (8000760 <off_state+0xa8>)
 80006c4:	6013      	str	r3, [r2, #0]
	lastState = ON;
 80006c6:	4b27      	ldr	r3, [pc, #156]	@ (8000764 <off_state+0xac>)
 80006c8:	2204      	movs	r2, #4
 80006ca:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(preChargeRelayPort,preChargeRelay,GPIO_PIN_RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006d2:	4825      	ldr	r0, [pc, #148]	@ (8000768 <off_state+0xb0>)
 80006d4:	f002 fb42 	bl	8002d5c <HAL_GPIO_WritePin>
	o_preChargeRelay = GPIO_PIN_RESET;
 80006d8:	4b24      	ldr	r3, [pc, #144]	@ (800076c <off_state+0xb4>)
 80006da:	2200      	movs	r2, #0
 80006dc:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(hvContactorPort,hvContactor,GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006e4:	4820      	ldr	r0, [pc, #128]	@ (8000768 <off_state+0xb0>)
 80006e6:	f002 fb39 	bl	8002d5c <HAL_GPIO_WritePin>
	o_hvContactor = GPIO_PIN_RESET;
 80006ea:	4b21      	ldr	r3, [pc, #132]	@ (8000770 <off_state+0xb8>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(auxDCDCDisablePort,auxDCDCDisable,GPIO_PIN_RESET);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2180      	movs	r1, #128	@ 0x80
 80006f4:	481c      	ldr	r0, [pc, #112]	@ (8000768 <off_state+0xb0>)
 80006f6:	f002 fb31 	bl	8002d5c <HAL_GPIO_WritePin>
	o_auxDCDCDisable = GPIO_PIN_RESET;
 80006fa:	4b1e      	ldr	r3, [pc, #120]	@ (8000774 <off_state+0xbc>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(hvDCDCEnablePort,hvDCDCEnable,GPIO_PIN_RESET);
 8000700:	2200      	movs	r2, #0
 8000702:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000706:	4818      	ldr	r0, [pc, #96]	@ (8000768 <off_state+0xb0>)
 8000708:	f002 fb28 	bl	8002d5c <HAL_GPIO_WritePin>
	o_hvDCDCEnable = GPIO_PIN_RESET;
 800070c:	4b1a      	ldr	r3, [pc, #104]	@ (8000778 <off_state+0xc0>)
 800070e:	2200      	movs	r2, #0
 8000710:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(chargeIndicatorPort,chargeIndicator,RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	2110      	movs	r1, #16
 8000716:	4819      	ldr	r0, [pc, #100]	@ (800077c <off_state+0xc4>)
 8000718:	f002 fb20 	bl	8002d5c <HAL_GPIO_WritePin>
	o_chargeIndicator = GPIO_PIN_RESET;
 800071c:	4b18      	ldr	r3, [pc, #96]	@ (8000780 <off_state+0xc8>)
 800071e:	2200      	movs	r2, #0
 8000720:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(faultIndicatorPort,faultIndicator,RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000728:	4816      	ldr	r0, [pc, #88]	@ (8000784 <off_state+0xcc>)
 800072a:	f002 fb17 	bl	8002d5c <HAL_GPIO_WritePin>
	o_faultIndicator = GPIO_PIN_RESET;
 800072e:	4b16      	ldr	r3, [pc, #88]	@ (8000788 <off_state+0xd0>)
 8000730:	2200      	movs	r2, #0
 8000732:	701a      	strb	r2, [r3, #0]
	//Changes States
	if ((i_keyACC != 0 ) && (i_chargeEnable != 0) && (i_disChargeEnable != 0) && (i_killSwitch != 1)){
 8000734:	4b15      	ldr	r3, [pc, #84]	@ (800078c <off_state+0xd4>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d00e      	beq.n	800075a <off_state+0xa2>
 800073c:	4b14      	ldr	r3, [pc, #80]	@ (8000790 <off_state+0xd8>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d00a      	beq.n	800075a <off_state+0xa2>
 8000744:	4b13      	ldr	r3, [pc, #76]	@ (8000794 <off_state+0xdc>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d006      	beq.n	800075a <off_state+0xa2>
 800074c:	4b12      	ldr	r3, [pc, #72]	@ (8000798 <off_state+0xe0>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	2b01      	cmp	r3, #1
 8000752:	d002      	beq.n	800075a <off_state+0xa2>
		currentState = ACC;
 8000754:	4b11      	ldr	r3, [pc, #68]	@ (800079c <off_state+0xe4>)
 8000756:	2201      	movs	r2, #1
 8000758:	701a      	strb	r2, [r3, #0]
	}
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	2000023c 	.word	0x2000023c
 8000764:	20000235 	.word	0x20000235
 8000768:	40021000 	.word	0x40021000
 800076c:	20000251 	.word	0x20000251
 8000770:	20000250 	.word	0x20000250
 8000774:	2000024d 	.word	0x2000024d
 8000778:	2000024c 	.word	0x2000024c
 800077c:	40020c00 	.word	0x40020c00
 8000780:	2000024e 	.word	0x2000024e
 8000784:	40020800 	.word	0x40020800
 8000788:	2000024f 	.word	0x2000024f
 800078c:	20000246 	.word	0x20000246
 8000790:	20000249 	.word	0x20000249
 8000794:	2000024a 	.word	0x2000024a
 8000798:	20000247 	.word	0x20000247
 800079c:	20000234 	.word	0x20000234

080007a0 <acc_state>:


void acc_state(void){		// State 1
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
	if( lastState != ACC)
 80007a4:	4b2d      	ldr	r3, [pc, #180]	@ (800085c <acc_state+0xbc>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d027      	beq.n	80007fc <acc_state+0x5c>
	{
		enterStateTime = HAL_GetTick();
 80007ac:	f001 f996 	bl	8001adc <HAL_GetTick>
 80007b0:	4603      	mov	r3, r0
 80007b2:	4a2b      	ldr	r2, [pc, #172]	@ (8000860 <acc_state+0xc0>)
 80007b4:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(preChargeRelayPort,preChargeRelay,GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007bc:	4829      	ldr	r0, [pc, #164]	@ (8000864 <acc_state+0xc4>)
 80007be:	f002 facd 	bl	8002d5c <HAL_GPIO_WritePin>
		o_preChargeRelay = GPIO_PIN_RESET;
 80007c2:	4b29      	ldr	r3, [pc, #164]	@ (8000868 <acc_state+0xc8>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(hvContactorPort,hvContactor,GPIO_PIN_RESET);
 80007c8:	2200      	movs	r2, #0
 80007ca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007ce:	4825      	ldr	r0, [pc, #148]	@ (8000864 <acc_state+0xc4>)
 80007d0:	f002 fac4 	bl	8002d5c <HAL_GPIO_WritePin>
		o_hvContactor = GPIO_PIN_RESET;
 80007d4:	4b25      	ldr	r3, [pc, #148]	@ (800086c <acc_state+0xcc>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(auxDCDCDisablePort,auxDCDCDisable,GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	2180      	movs	r1, #128	@ 0x80
 80007de:	4821      	ldr	r0, [pc, #132]	@ (8000864 <acc_state+0xc4>)
 80007e0:	f002 fabc 	bl	8002d5c <HAL_GPIO_WritePin>
		o_auxDCDCDisable = GPIO_PIN_RESET;
 80007e4:	4b22      	ldr	r3, [pc, #136]	@ (8000870 <acc_state+0xd0>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(hvDCDCEnablePort,hvDCDCEnable,GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007f0:	481c      	ldr	r0, [pc, #112]	@ (8000864 <acc_state+0xc4>)
 80007f2:	f002 fab3 	bl	8002d5c <HAL_GPIO_WritePin>
		o_hvDCDCEnable = GPIO_PIN_RESET;
 80007f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000874 <acc_state+0xd4>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	701a      	strb	r2, [r3, #0]
	}
	lastState = ACC;
 80007fc:	4b17      	ldr	r3, [pc, #92]	@ (800085c <acc_state+0xbc>)
 80007fe:	2201      	movs	r2, #1
 8000800:	701a      	strb	r2, [r3, #0]

	currentTime = HAL_GetTick();
 8000802:	f001 f96b 	bl	8001adc <HAL_GetTick>
 8000806:	4603      	mov	r3, r0
 8000808:	4a1b      	ldr	r2, [pc, #108]	@ (8000878 <acc_state+0xd8>)
 800080a:	6013      	str	r3, [r2, #0]
	// goes back to off if any one bit is wrong
	if((i_keyACC != 1) || (i_chargeEnable != 1) || (i_disChargeEnable != 1) || (i_killSwitch != 0))
 800080c:	4b1b      	ldr	r3, [pc, #108]	@ (800087c <acc_state+0xdc>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	2b01      	cmp	r3, #1
 8000812:	d10b      	bne.n	800082c <acc_state+0x8c>
 8000814:	4b1a      	ldr	r3, [pc, #104]	@ (8000880 <acc_state+0xe0>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b01      	cmp	r3, #1
 800081a:	d107      	bne.n	800082c <acc_state+0x8c>
 800081c:	4b19      	ldr	r3, [pc, #100]	@ (8000884 <acc_state+0xe4>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d103      	bne.n	800082c <acc_state+0x8c>
 8000824:	4b18      	ldr	r3, [pc, #96]	@ (8000888 <acc_state+0xe8>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d002      	beq.n	8000832 <acc_state+0x92>
		currentState = OFF; 			// No fault occurs
 800082c:	4b17      	ldr	r3, [pc, #92]	@ (800088c <acc_state+0xec>)
 800082e:	2200      	movs	r2, #0
 8000830:	701a      	strb	r2, [r3, #0]

	//Changes States
	if ((i_keyIGN != 0) && (i_disChargeEnable != 0) && (i_keyACC != 0) && (i_chargeEnable != 0))
 8000832:	4b17      	ldr	r3, [pc, #92]	@ (8000890 <acc_state+0xf0>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d00e      	beq.n	8000858 <acc_state+0xb8>
 800083a:	4b12      	ldr	r3, [pc, #72]	@ (8000884 <acc_state+0xe4>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d00a      	beq.n	8000858 <acc_state+0xb8>
 8000842:	4b0e      	ldr	r3, [pc, #56]	@ (800087c <acc_state+0xdc>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d006      	beq.n	8000858 <acc_state+0xb8>
 800084a:	4b0d      	ldr	r3, [pc, #52]	@ (8000880 <acc_state+0xe0>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d002      	beq.n	8000858 <acc_state+0xb8>
	{
		currentState = IGN;
 8000852:	4b0e      	ldr	r3, [pc, #56]	@ (800088c <acc_state+0xec>)
 8000854:	2202      	movs	r2, #2
 8000856:	701a      	strb	r2, [r3, #0]
	}


}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20000235 	.word	0x20000235
 8000860:	20000238 	.word	0x20000238
 8000864:	40021000 	.word	0x40021000
 8000868:	20000251 	.word	0x20000251
 800086c:	20000250 	.word	0x20000250
 8000870:	2000024d 	.word	0x2000024d
 8000874:	2000024c 	.word	0x2000024c
 8000878:	2000023c 	.word	0x2000023c
 800087c:	20000246 	.word	0x20000246
 8000880:	20000249 	.word	0x20000249
 8000884:	2000024a 	.word	0x2000024a
 8000888:	20000247 	.word	0x20000247
 800088c:	20000234 	.word	0x20000234
 8000890:	20000245 	.word	0x20000245

08000894 <ign_state>:


void ign_state(void){		// State 2
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0

	if( lastState == ACC )
 8000898:	4b3a      	ldr	r3, [pc, #232]	@ (8000984 <ign_state+0xf0>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	2b01      	cmp	r3, #1
 800089e:	d112      	bne.n	80008c6 <ign_state+0x32>
	{
		enterStateTime = HAL_GetTick();
 80008a0:	f001 f91c 	bl	8001adc <HAL_GetTick>
 80008a4:	4603      	mov	r3, r0
 80008a6:	4a38      	ldr	r2, [pc, #224]	@ (8000988 <ign_state+0xf4>)
 80008a8:	6013      	str	r3, [r2, #0]

		HAL_GPIO_WritePin(preChargeRelayPort, preChargeRelay, GPIO_PIN_SET);
 80008aa:	2201      	movs	r2, #1
 80008ac:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80008b0:	4836      	ldr	r0, [pc, #216]	@ (800098c <ign_state+0xf8>)
 80008b2:	f002 fa53 	bl	8002d5c <HAL_GPIO_WritePin>
		o_preChargeRelay = GPIO_PIN_SET;
 80008b6:	4b36      	ldr	r3, [pc, #216]	@ (8000990 <ign_state+0xfc>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(spareOutput3Port, spareOutput3, GPIO_PIN_SET); //why does this exist? test point?
 80008bc:	2201      	movs	r2, #1
 80008be:	2140      	movs	r1, #64	@ 0x40
 80008c0:	4834      	ldr	r0, [pc, #208]	@ (8000994 <ign_state+0x100>)
 80008c2:	f002 fa4b 	bl	8002d5c <HAL_GPIO_WritePin>


	}
	lastState = IGN;
 80008c6:	4b2f      	ldr	r3, [pc, #188]	@ (8000984 <ign_state+0xf0>)
 80008c8:	2202      	movs	r2, #2
 80008ca:	701a      	strb	r2, [r3, #0]
	currentTime = HAL_GetTick();
 80008cc:	f001 f906 	bl	8001adc <HAL_GetTick>
 80008d0:	4603      	mov	r3, r0
 80008d2:	4a31      	ldr	r2, [pc, #196]	@ (8000998 <ign_state+0x104>)
 80008d4:	6013      	str	r3, [r2, #0]

	// Key was not held long enough
	if (i_keyIGN != 1)
 80008d6:	4b31      	ldr	r3, [pc, #196]	@ (800099c <ign_state+0x108>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d003      	beq.n	80008e6 <ign_state+0x52>
	{
		currentState = ACC;
 80008de:	4b30      	ldr	r3, [pc, #192]	@ (80009a0 <ign_state+0x10c>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(hvContactorPort, hvContactor, GPIO_PIN_SET);
		o_hvContactor = GPIO_PIN_SET;

		currentState = DCDC;
	}
}
 80008e4:	e04b      	b.n	800097e <ign_state+0xea>
	else if ((i_keyACC != 1) || (i_disChargeEnable != 1) || (i_chargeEnable != 1) || (i_killSwitch != 0))
 80008e6:	4b2f      	ldr	r3, [pc, #188]	@ (80009a4 <ign_state+0x110>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d10b      	bne.n	8000906 <ign_state+0x72>
 80008ee:	4b2e      	ldr	r3, [pc, #184]	@ (80009a8 <ign_state+0x114>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d107      	bne.n	8000906 <ign_state+0x72>
 80008f6:	4b2d      	ldr	r3, [pc, #180]	@ (80009ac <ign_state+0x118>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d103      	bne.n	8000906 <ign_state+0x72>
 80008fe:	4b2c      	ldr	r3, [pc, #176]	@ (80009b0 <ign_state+0x11c>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d026      	beq.n	8000954 <ign_state+0xc0>
		currentState = FAULT;
 8000906:	4b26      	ldr	r3, [pc, #152]	@ (80009a0 <ign_state+0x10c>)
 8000908:	2206      	movs	r2, #6
 800090a:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 800090c:	4b25      	ldr	r3, [pc, #148]	@ (80009a4 <ign_state+0x110>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	2b01      	cmp	r3, #1
 8000912:	d003      	beq.n	800091c <ign_state+0x88>
			faultCode = 21;
 8000914:	4b27      	ldr	r3, [pc, #156]	@ (80009b4 <ign_state+0x120>)
 8000916:	2215      	movs	r2, #21
 8000918:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 800091a:	e030      	b.n	800097e <ign_state+0xea>
		else if (i_disChargeEnable != 1)
 800091c:	4b22      	ldr	r3, [pc, #136]	@ (80009a8 <ign_state+0x114>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	2b01      	cmp	r3, #1
 8000922:	d003      	beq.n	800092c <ign_state+0x98>
			faultCode = 22;
 8000924:	4b23      	ldr	r3, [pc, #140]	@ (80009b4 <ign_state+0x120>)
 8000926:	2216      	movs	r2, #22
 8000928:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 800092a:	e028      	b.n	800097e <ign_state+0xea>
		else if (i_chargeEnable != 1)
 800092c:	4b1f      	ldr	r3, [pc, #124]	@ (80009ac <ign_state+0x118>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2b01      	cmp	r3, #1
 8000932:	d003      	beq.n	800093c <ign_state+0xa8>
			faultCode = 23;
 8000934:	4b1f      	ldr	r3, [pc, #124]	@ (80009b4 <ign_state+0x120>)
 8000936:	2217      	movs	r2, #23
 8000938:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 800093a:	e020      	b.n	800097e <ign_state+0xea>
		else if (i_killSwitch != 0)
 800093c:	4b1c      	ldr	r3, [pc, #112]	@ (80009b0 <ign_state+0x11c>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d003      	beq.n	800094c <ign_state+0xb8>
			faultCode = 24;
 8000944:	4b1b      	ldr	r3, [pc, #108]	@ (80009b4 <ign_state+0x120>)
 8000946:	2218      	movs	r2, #24
 8000948:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 800094a:	e018      	b.n	800097e <ign_state+0xea>
			faultCode = 29;
 800094c:	4b19      	ldr	r3, [pc, #100]	@ (80009b4 <ign_state+0x120>)
 800094e:	221d      	movs	r2, #29
 8000950:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000952:	e014      	b.n	800097e <ign_state+0xea>
	else if(currentTime - enterStateTime >= 4000)
 8000954:	4b10      	ldr	r3, [pc, #64]	@ (8000998 <ign_state+0x104>)
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	4b0b      	ldr	r3, [pc, #44]	@ (8000988 <ign_state+0xf4>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8000962:	d30c      	bcc.n	800097e <ign_state+0xea>
		HAL_GPIO_WritePin(hvContactorPort, hvContactor, GPIO_PIN_SET);
 8000964:	2201      	movs	r2, #1
 8000966:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800096a:	4808      	ldr	r0, [pc, #32]	@ (800098c <ign_state+0xf8>)
 800096c:	f002 f9f6 	bl	8002d5c <HAL_GPIO_WritePin>
		o_hvContactor = GPIO_PIN_SET;
 8000970:	4b11      	ldr	r3, [pc, #68]	@ (80009b8 <ign_state+0x124>)
 8000972:	2201      	movs	r2, #1
 8000974:	701a      	strb	r2, [r3, #0]
		currentState = DCDC;
 8000976:	4b0a      	ldr	r3, [pc, #40]	@ (80009a0 <ign_state+0x10c>)
 8000978:	2203      	movs	r2, #3
 800097a:	701a      	strb	r2, [r3, #0]
}
 800097c:	e7ff      	b.n	800097e <ign_state+0xea>
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000235 	.word	0x20000235
 8000988:	20000238 	.word	0x20000238
 800098c:	40021000 	.word	0x40021000
 8000990:	20000251 	.word	0x20000251
 8000994:	40020c00 	.word	0x40020c00
 8000998:	2000023c 	.word	0x2000023c
 800099c:	20000245 	.word	0x20000245
 80009a0:	20000234 	.word	0x20000234
 80009a4:	20000246 	.word	0x20000246
 80009a8:	2000024a 	.word	0x2000024a
 80009ac:	20000249 	.word	0x20000249
 80009b0:	20000247 	.word	0x20000247
 80009b4:	20000244 	.word	0x20000244
 80009b8:	20000250 	.word	0x20000250

080009bc <dcdc_state>:


//Short state for the transition between the two DCDC's
void dcdc_state(void){		// State 3
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0


	if ( lastState == IGN )
 80009c0:	4b37      	ldr	r3, [pc, #220]	@ (8000aa0 <dcdc_state+0xe4>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b02      	cmp	r3, #2
 80009c6:	d116      	bne.n	80009f6 <dcdc_state+0x3a>
	{
		enterStateTime = HAL_GetTick();
 80009c8:	f001 f888 	bl	8001adc <HAL_GetTick>
 80009cc:	4603      	mov	r3, r0
 80009ce:	4a35      	ldr	r2, [pc, #212]	@ (8000aa4 <dcdc_state+0xe8>)
 80009d0:	6013      	str	r3, [r2, #0]

		HAL_GPIO_WritePin(hvDCDCEnablePort,hvDCDCEnable, GPIO_PIN_SET);
 80009d2:	2201      	movs	r2, #1
 80009d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009d8:	4833      	ldr	r0, [pc, #204]	@ (8000aa8 <dcdc_state+0xec>)
 80009da:	f002 f9bf 	bl	8002d5c <HAL_GPIO_WritePin>
		o_hvDCDCEnable = GPIO_PIN_SET;
 80009de:	4b33      	ldr	r3, [pc, #204]	@ (8000aac <dcdc_state+0xf0>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(preChargeRelayPort,preChargeRelay, GPIO_PIN_RESET);
 80009e4:	2200      	movs	r2, #0
 80009e6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009ea:	482f      	ldr	r0, [pc, #188]	@ (8000aa8 <dcdc_state+0xec>)
 80009ec:	f002 f9b6 	bl	8002d5c <HAL_GPIO_WritePin>
		o_preChargeRelay = GPIO_PIN_RESET;
 80009f0:	4b2f      	ldr	r3, [pc, #188]	@ (8000ab0 <dcdc_state+0xf4>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	701a      	strb	r2, [r3, #0]
	}

	lastState = DCDC;
 80009f6:	4b2a      	ldr	r3, [pc, #168]	@ (8000aa0 <dcdc_state+0xe4>)
 80009f8:	2203      	movs	r2, #3
 80009fa:	701a      	strb	r2, [r3, #0]

	currentTime = HAL_GetTick();
 80009fc:	f001 f86e 	bl	8001adc <HAL_GetTick>
 8000a00:	4603      	mov	r3, r0
 8000a02:	4a2c      	ldr	r2, [pc, #176]	@ (8000ab4 <dcdc_state+0xf8>)
 8000a04:	6013      	str	r3, [r2, #0]
	// Check if any signal is missing --> FAULT State
	if ((i_keyACC != 1) || (i_disChargeEnable != 1) || (i_chargeEnable != 1) || (i_killSwitch != 0))
 8000a06:	4b2c      	ldr	r3, [pc, #176]	@ (8000ab8 <dcdc_state+0xfc>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d10b      	bne.n	8000a26 <dcdc_state+0x6a>
 8000a0e:	4b2b      	ldr	r3, [pc, #172]	@ (8000abc <dcdc_state+0x100>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d107      	bne.n	8000a26 <dcdc_state+0x6a>
 8000a16:	4b2a      	ldr	r3, [pc, #168]	@ (8000ac0 <dcdc_state+0x104>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d103      	bne.n	8000a26 <dcdc_state+0x6a>
 8000a1e:	4b29      	ldr	r3, [pc, #164]	@ (8000ac4 <dcdc_state+0x108>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d026      	beq.n	8000a74 <dcdc_state+0xb8>
	{
		currentState = FAULT;
 8000a26:	4b28      	ldr	r3, [pc, #160]	@ (8000ac8 <dcdc_state+0x10c>)
 8000a28:	2206      	movs	r2, #6
 8000a2a:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000a2c:	4b22      	ldr	r3, [pc, #136]	@ (8000ab8 <dcdc_state+0xfc>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d003      	beq.n	8000a3c <dcdc_state+0x80>
		{
			faultCode = 31;
 8000a34:	4b25      	ldr	r3, [pc, #148]	@ (8000acc <dcdc_state+0x110>)
 8000a36:	221f      	movs	r2, #31
 8000a38:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000a3a:	e02f      	b.n	8000a9c <dcdc_state+0xe0>
		}
		else if (i_disChargeEnable != 1)
 8000a3c:	4b1f      	ldr	r3, [pc, #124]	@ (8000abc <dcdc_state+0x100>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d003      	beq.n	8000a4c <dcdc_state+0x90>
		{
			faultCode = 32;
 8000a44:	4b21      	ldr	r3, [pc, #132]	@ (8000acc <dcdc_state+0x110>)
 8000a46:	2220      	movs	r2, #32
 8000a48:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000a4a:	e027      	b.n	8000a9c <dcdc_state+0xe0>
		}
		else if (i_chargeEnable != 1)
 8000a4c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac0 <dcdc_state+0x104>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d003      	beq.n	8000a5c <dcdc_state+0xa0>
		{
			faultCode = 33;
 8000a54:	4b1d      	ldr	r3, [pc, #116]	@ (8000acc <dcdc_state+0x110>)
 8000a56:	2221      	movs	r2, #33	@ 0x21
 8000a58:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000a5a:	e01f      	b.n	8000a9c <dcdc_state+0xe0>
		}
		else if (i_killSwitch != 0)
 8000a5c:	4b19      	ldr	r3, [pc, #100]	@ (8000ac4 <dcdc_state+0x108>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d003      	beq.n	8000a6c <dcdc_state+0xb0>
		{
			faultCode = 34;
 8000a64:	4b19      	ldr	r3, [pc, #100]	@ (8000acc <dcdc_state+0x110>)
 8000a66:	2222      	movs	r2, #34	@ 0x22
 8000a68:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000a6a:	e017      	b.n	8000a9c <dcdc_state+0xe0>
		}
		else
		{
			faultCode = 39;
 8000a6c:	4b17      	ldr	r3, [pc, #92]	@ (8000acc <dcdc_state+0x110>)
 8000a6e:	2227      	movs	r2, #39	@ 0x27
 8000a70:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000a72:	e013      	b.n	8000a9c <dcdc_state+0xe0>
		}
	}
	// Switch off the AUX-DCDC after 1000 ms(1sec)
	else if (currentTime - enterStateTime >= 1000)
 8000a74:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab4 <dcdc_state+0xf8>)
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa4 <dcdc_state+0xe8>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000a82:	d30b      	bcc.n	8000a9c <dcdc_state+0xe0>
	{
		HAL_GPIO_WritePin(auxDCDCDisablePort,auxDCDCDisable, GPIO_PIN_SET);
 8000a84:	2201      	movs	r2, #1
 8000a86:	2180      	movs	r1, #128	@ 0x80
 8000a88:	4807      	ldr	r0, [pc, #28]	@ (8000aa8 <dcdc_state+0xec>)
 8000a8a:	f002 f967 	bl	8002d5c <HAL_GPIO_WritePin>
		o_auxDCDCDisable = GPIO_PIN_SET;
 8000a8e:	4b10      	ldr	r3, [pc, #64]	@ (8000ad0 <dcdc_state+0x114>)
 8000a90:	2201      	movs	r2, #1
 8000a92:	701a      	strb	r2, [r3, #0]
		currentState = ON;
 8000a94:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac8 <dcdc_state+0x10c>)
 8000a96:	2204      	movs	r2, #4
 8000a98:	701a      	strb	r2, [r3, #0]
	}
}
 8000a9a:	e7ff      	b.n	8000a9c <dcdc_state+0xe0>
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20000235 	.word	0x20000235
 8000aa4:	20000238 	.word	0x20000238
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	2000024c 	.word	0x2000024c
 8000ab0:	20000251 	.word	0x20000251
 8000ab4:	2000023c 	.word	0x2000023c
 8000ab8:	20000246 	.word	0x20000246
 8000abc:	2000024a 	.word	0x2000024a
 8000ac0:	20000249 	.word	0x20000249
 8000ac4:	20000247 	.word	0x20000247
 8000ac8:	20000234 	.word	0x20000234
 8000acc:	20000244 	.word	0x20000244
 8000ad0:	2000024d 	.word	0x2000024d

08000ad4 <on_state>:


void on_state(void){		// State 4 = DRIVING
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0


	if ( lastState == DCDC )
 8000ad8:	4b2e      	ldr	r3, [pc, #184]	@ (8000b94 <on_state+0xc0>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b03      	cmp	r3, #3
 8000ade:	d104      	bne.n	8000aea <on_state+0x16>
	{
		enterStateTime = HAL_GetTick();
 8000ae0:	f000 fffc 	bl	8001adc <HAL_GetTick>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	4a2c      	ldr	r2, [pc, #176]	@ (8000b98 <on_state+0xc4>)
 8000ae8:	6013      	str	r3, [r2, #0]
	}
	lastState = ON;
 8000aea:	4b2a      	ldr	r3, [pc, #168]	@ (8000b94 <on_state+0xc0>)
 8000aec:	2204      	movs	r2, #4
 8000aee:	701a      	strb	r2, [r3, #0]

	currentTime = HAL_GetTick();
 8000af0:	f000 fff4 	bl	8001adc <HAL_GetTick>
 8000af4:	4603      	mov	r3, r0
 8000af6:	4a29      	ldr	r2, [pc, #164]	@ (8000b9c <on_state+0xc8>)
 8000af8:	6013      	str	r3, [r2, #0]


	// SETS THE OUTPUTS!!!
	// Throttle pedal output function

	updatePedal();
 8000afa:	f000 f9ef 	bl	8000edc <updatePedal>

	updateRegen();
 8000afe:	f000 fa35 	bl	8000f6c <updateRegen>



	// Check if any signal is missing --> FAULT State
	if ((i_keyACC != 1) || (i_chargeEnable != 1) || (i_disChargeEnable != 1 && i_chargeContactor != 1) || (i_killSwitch != 0))
 8000b02:	4b27      	ldr	r3, [pc, #156]	@ (8000ba0 <on_state+0xcc>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d10f      	bne.n	8000b2a <on_state+0x56>
 8000b0a:	4b26      	ldr	r3, [pc, #152]	@ (8000ba4 <on_state+0xd0>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d10b      	bne.n	8000b2a <on_state+0x56>
 8000b12:	4b25      	ldr	r3, [pc, #148]	@ (8000ba8 <on_state+0xd4>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d003      	beq.n	8000b22 <on_state+0x4e>
 8000b1a:	4b24      	ldr	r3, [pc, #144]	@ (8000bac <on_state+0xd8>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d103      	bne.n	8000b2a <on_state+0x56>
 8000b22:	4b23      	ldr	r3, [pc, #140]	@ (8000bb0 <on_state+0xdc>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d026      	beq.n	8000b78 <on_state+0xa4>
	{
		currentState = FAULT;
 8000b2a:	4b22      	ldr	r3, [pc, #136]	@ (8000bb4 <on_state+0xe0>)
 8000b2c:	2206      	movs	r2, #6
 8000b2e:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000b30:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba0 <on_state+0xcc>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d003      	beq.n	8000b40 <on_state+0x6c>
		{
			faultCode = 41;
 8000b38:	4b1f      	ldr	r3, [pc, #124]	@ (8000bb8 <on_state+0xe4>)
 8000b3a:	2229      	movs	r2, #41	@ 0x29
 8000b3c:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000b3e:	e027      	b.n	8000b90 <on_state+0xbc>
		}
		else if (i_disChargeEnable != 1)
 8000b40:	4b19      	ldr	r3, [pc, #100]	@ (8000ba8 <on_state+0xd4>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d003      	beq.n	8000b50 <on_state+0x7c>
		{
			faultCode = 42;
 8000b48:	4b1b      	ldr	r3, [pc, #108]	@ (8000bb8 <on_state+0xe4>)
 8000b4a:	222a      	movs	r2, #42	@ 0x2a
 8000b4c:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000b4e:	e01f      	b.n	8000b90 <on_state+0xbc>
		}
		else if (i_chargeEnable != 1)
 8000b50:	4b14      	ldr	r3, [pc, #80]	@ (8000ba4 <on_state+0xd0>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d003      	beq.n	8000b60 <on_state+0x8c>
		{
			faultCode = 43;
 8000b58:	4b17      	ldr	r3, [pc, #92]	@ (8000bb8 <on_state+0xe4>)
 8000b5a:	222b      	movs	r2, #43	@ 0x2b
 8000b5c:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000b5e:	e017      	b.n	8000b90 <on_state+0xbc>
		}
		else if (i_killSwitch != 0)
 8000b60:	4b13      	ldr	r3, [pc, #76]	@ (8000bb0 <on_state+0xdc>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d003      	beq.n	8000b70 <on_state+0x9c>
		{
			faultCode = 44;
 8000b68:	4b13      	ldr	r3, [pc, #76]	@ (8000bb8 <on_state+0xe4>)
 8000b6a:	222c      	movs	r2, #44	@ 0x2c
 8000b6c:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000b6e:	e00f      	b.n	8000b90 <on_state+0xbc>
		}
		else
		{
			faultCode = 49;
 8000b70:	4b11      	ldr	r3, [pc, #68]	@ (8000bb8 <on_state+0xe4>)
 8000b72:	2231      	movs	r2, #49	@ 0x31
 8000b74:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000b76:	e00b      	b.n	8000b90 <on_state+0xbc>
		}
	}
	//Changes States
	else if ((i_disChargeEnable != 1) && (i_chargeContactor != 0))
 8000b78:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba8 <on_state+0xd4>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d007      	beq.n	8000b90 <on_state+0xbc>
 8000b80:	4b0a      	ldr	r3, [pc, #40]	@ (8000bac <on_state+0xd8>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d003      	beq.n	8000b90 <on_state+0xbc>
	{
		currentState = CHARGE;
 8000b88:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb4 <on_state+0xe0>)
 8000b8a:	2205      	movs	r2, #5
 8000b8c:	701a      	strb	r2, [r3, #0]
	}
}
 8000b8e:	e7ff      	b.n	8000b90 <on_state+0xbc>
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000235 	.word	0x20000235
 8000b98:	20000238 	.word	0x20000238
 8000b9c:	2000023c 	.word	0x2000023c
 8000ba0:	20000246 	.word	0x20000246
 8000ba4:	20000249 	.word	0x20000249
 8000ba8:	2000024a 	.word	0x2000024a
 8000bac:	20000248 	.word	0x20000248
 8000bb0:	20000247 	.word	0x20000247
 8000bb4:	20000234 	.word	0x20000234
 8000bb8:	20000244 	.word	0x20000244

08000bbc <charge_state>:

void charge_state(void){	// State 5
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0


	// Start charging routine by enabling AUX DCDC
	if (lastState == ON)
 8000bc0:	4b39      	ldr	r3, [pc, #228]	@ (8000ca8 <charge_state+0xec>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	2b04      	cmp	r3, #4
 8000bc6:	d10c      	bne.n	8000be2 <charge_state+0x26>
	{

		HAL_GPIO_WritePin(chargeIndicatorPort, chargeIndicator, GPIO_PIN_SET);			// Charge indicator light
 8000bc8:	2201      	movs	r2, #1
 8000bca:	2110      	movs	r1, #16
 8000bcc:	4837      	ldr	r0, [pc, #220]	@ (8000cac <charge_state+0xf0>)
 8000bce:	f002 f8c5 	bl	8002d5c <HAL_GPIO_WritePin>
		o_chargeIndicator = GPIO_PIN_SET;
 8000bd2:	4b37      	ldr	r3, [pc, #220]	@ (8000cb0 <charge_state+0xf4>)
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	701a      	strb	r2, [r3, #0]

		enterStateTime = HAL_GetTick();
 8000bd8:	f000 ff80 	bl	8001adc <HAL_GetTick>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	4a35      	ldr	r2, [pc, #212]	@ (8000cb4 <charge_state+0xf8>)
 8000be0:	6013      	str	r3, [r2, #0]
	}
	lastState = CHARGE;
 8000be2:	4b31      	ldr	r3, [pc, #196]	@ (8000ca8 <charge_state+0xec>)
 8000be4:	2205      	movs	r2, #5
 8000be6:	701a      	strb	r2, [r3, #0]

	currentTime = HAL_GetTick();
 8000be8:	f000 ff78 	bl	8001adc <HAL_GetTick>
 8000bec:	4603      	mov	r3, r0
 8000bee:	4a32      	ldr	r2, [pc, #200]	@ (8000cb8 <charge_state+0xfc>)
 8000bf0:	6013      	str	r3, [r2, #0]


	// After 0.5 sec, disconnect contactor and switch hvDCDC off
	if (currentTime - enterStateTime >= 10000)
 8000bf2:	4b31      	ldr	r3, [pc, #196]	@ (8000cb8 <charge_state+0xfc>)
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	4b2f      	ldr	r3, [pc, #188]	@ (8000cb4 <charge_state+0xf8>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	1ad3      	subs	r3, r2, r3
 8000bfc:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d911      	bls.n	8000c28 <charge_state+0x6c>
	{
		HAL_GPIO_WritePin(hvContactorPort, hvContactor, GPIO_PIN_RESET);
 8000c04:	2200      	movs	r2, #0
 8000c06:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c0a:	482c      	ldr	r0, [pc, #176]	@ (8000cbc <charge_state+0x100>)
 8000c0c:	f002 f8a6 	bl	8002d5c <HAL_GPIO_WritePin>
		o_hvContactor = GPIO_PIN_RESET;
 8000c10:	4b2b      	ldr	r3, [pc, #172]	@ (8000cc0 <charge_state+0x104>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(hvDCDCEnablePort, hvDCDCEnable, GPIO_PIN_RESET);
 8000c16:	2200      	movs	r2, #0
 8000c18:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c1c:	4827      	ldr	r0, [pc, #156]	@ (8000cbc <charge_state+0x100>)
 8000c1e:	f002 f89d 	bl	8002d5c <HAL_GPIO_WritePin>
		o_hvDCDCEnable = GPIO_PIN_RESET;
 8000c22:	4b28      	ldr	r3, [pc, #160]	@ (8000cc4 <charge_state+0x108>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	701a      	strb	r2, [r3, #0]
	}



	if((i_keyACC != 1) || (i_chargeEnable != 1) || (i_disChargeEnable != 0)  || (i_killSwitch != 0))
 8000c28:	4b27      	ldr	r3, [pc, #156]	@ (8000cc8 <charge_state+0x10c>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d10b      	bne.n	8000c48 <charge_state+0x8c>
 8000c30:	4b26      	ldr	r3, [pc, #152]	@ (8000ccc <charge_state+0x110>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d107      	bne.n	8000c48 <charge_state+0x8c>
 8000c38:	4b25      	ldr	r3, [pc, #148]	@ (8000cd0 <charge_state+0x114>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d103      	bne.n	8000c48 <charge_state+0x8c>
 8000c40:	4b24      	ldr	r3, [pc, #144]	@ (8000cd4 <charge_state+0x118>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d02d      	beq.n	8000ca4 <charge_state+0xe8>
	{
		currentState = FAULT;
 8000c48:	4b23      	ldr	r3, [pc, #140]	@ (8000cd8 <charge_state+0x11c>)
 8000c4a:	2206      	movs	r2, #6
 8000c4c:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000c4e:	4b1e      	ldr	r3, [pc, #120]	@ (8000cc8 <charge_state+0x10c>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d003      	beq.n	8000c5e <charge_state+0xa2>
		{
			faultCode = 51;
 8000c56:	4b21      	ldr	r3, [pc, #132]	@ (8000cdc <charge_state+0x120>)
 8000c58:	2233      	movs	r2, #51	@ 0x33
 8000c5a:	701a      	strb	r2, [r3, #0]
		{
			faultCode = 59;
		}
	}

}
 8000c5c:	e022      	b.n	8000ca4 <charge_state+0xe8>
		else if (i_disChargeEnable != 0)
 8000c5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd0 <charge_state+0x114>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d003      	beq.n	8000c6e <charge_state+0xb2>
			faultCode = 52;
 8000c66:	4b1d      	ldr	r3, [pc, #116]	@ (8000cdc <charge_state+0x120>)
 8000c68:	2234      	movs	r2, #52	@ 0x34
 8000c6a:	701a      	strb	r2, [r3, #0]
}
 8000c6c:	e01a      	b.n	8000ca4 <charge_state+0xe8>
		else if (i_chargeEnable != 1)
 8000c6e:	4b17      	ldr	r3, [pc, #92]	@ (8000ccc <charge_state+0x110>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d003      	beq.n	8000c7e <charge_state+0xc2>
			faultCode = 53;
 8000c76:	4b19      	ldr	r3, [pc, #100]	@ (8000cdc <charge_state+0x120>)
 8000c78:	2235      	movs	r2, #53	@ 0x35
 8000c7a:	701a      	strb	r2, [r3, #0]
}
 8000c7c:	e012      	b.n	8000ca4 <charge_state+0xe8>
		else if (i_chargeContactor != 1)
 8000c7e:	4b18      	ldr	r3, [pc, #96]	@ (8000ce0 <charge_state+0x124>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d003      	beq.n	8000c8e <charge_state+0xd2>
			faultCode = 54;
 8000c86:	4b15      	ldr	r3, [pc, #84]	@ (8000cdc <charge_state+0x120>)
 8000c88:	2236      	movs	r2, #54	@ 0x36
 8000c8a:	701a      	strb	r2, [r3, #0]
}
 8000c8c:	e00a      	b.n	8000ca4 <charge_state+0xe8>
		else if (i_killSwitch != 0)
 8000c8e:	4b11      	ldr	r3, [pc, #68]	@ (8000cd4 <charge_state+0x118>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d003      	beq.n	8000c9e <charge_state+0xe2>
			faultCode = 55;
 8000c96:	4b11      	ldr	r3, [pc, #68]	@ (8000cdc <charge_state+0x120>)
 8000c98:	2237      	movs	r2, #55	@ 0x37
 8000c9a:	701a      	strb	r2, [r3, #0]
}
 8000c9c:	e002      	b.n	8000ca4 <charge_state+0xe8>
			faultCode = 59;
 8000c9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000cdc <charge_state+0x120>)
 8000ca0:	223b      	movs	r2, #59	@ 0x3b
 8000ca2:	701a      	strb	r2, [r3, #0]
}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20000235 	.word	0x20000235
 8000cac:	40020c00 	.word	0x40020c00
 8000cb0:	2000024e 	.word	0x2000024e
 8000cb4:	20000238 	.word	0x20000238
 8000cb8:	2000023c 	.word	0x2000023c
 8000cbc:	40021000 	.word	0x40021000
 8000cc0:	20000250 	.word	0x20000250
 8000cc4:	2000024c 	.word	0x2000024c
 8000cc8:	20000246 	.word	0x20000246
 8000ccc:	20000249 	.word	0x20000249
 8000cd0:	2000024a 	.word	0x2000024a
 8000cd4:	20000247 	.word	0x20000247
 8000cd8:	20000234 	.word	0x20000234
 8000cdc:	20000244 	.word	0x20000244
 8000ce0:	20000248 	.word	0x20000248

08000ce4 <fault_state>:


void fault_state(void) { // State 6
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0

    if (lastState != FAULT) {
 8000ce8:	4b28      	ldr	r3, [pc, #160]	@ (8000d8c <fault_state+0xa8>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b06      	cmp	r3, #6
 8000cee:	d029      	beq.n	8000d44 <fault_state+0x60>
        // Set fault indicator GPIO pin
        HAL_GPIO_WritePin(faultIndicatorPort, faultIndicator, GPIO_PIN_SET);
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cf6:	4826      	ldr	r0, [pc, #152]	@ (8000d90 <fault_state+0xac>)
 8000cf8:	f002 f830 	bl	8002d5c <HAL_GPIO_WritePin>
        o_faultIndicator = GPIO_PIN_SET;
 8000cfc:	4b25      	ldr	r3, [pc, #148]	@ (8000d94 <fault_state+0xb0>)
 8000cfe:	2201      	movs	r2, #1
 8000d00:	701a      	strb	r2, [r3, #0]

        // Reset charge indicator GPIO pin
        HAL_GPIO_WritePin(chargeIndicatorPort, chargeIndicator, GPIO_PIN_RESET);
 8000d02:	2200      	movs	r2, #0
 8000d04:	2110      	movs	r1, #16
 8000d06:	4824      	ldr	r0, [pc, #144]	@ (8000d98 <fault_state+0xb4>)
 8000d08:	f002 f828 	bl	8002d5c <HAL_GPIO_WritePin>
        o_chargeIndicator = GPIO_PIN_RESET;
 8000d0c:	4b23      	ldr	r3, [pc, #140]	@ (8000d9c <fault_state+0xb8>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	701a      	strb	r2, [r3, #0]

        // Reset pre-charge relay GPIO pin
        HAL_GPIO_WritePin(preChargeRelayPort, preChargeRelay, GPIO_PIN_RESET);
 8000d12:	2200      	movs	r2, #0
 8000d14:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d18:	4821      	ldr	r0, [pc, #132]	@ (8000da0 <fault_state+0xbc>)
 8000d1a:	f002 f81f 	bl	8002d5c <HAL_GPIO_WritePin>
        o_preChargeRelay = GPIO_PIN_RESET;
 8000d1e:	4b21      	ldr	r3, [pc, #132]	@ (8000da4 <fault_state+0xc0>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	701a      	strb	r2, [r3, #0]

        //Reset auxDCDCDisable GPIO pin
        HAL_GPIO_WritePin(auxDCDCDisablePort,auxDCDCDisable, GPIO_PIN_RESET);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2180      	movs	r1, #128	@ 0x80
 8000d28:	481d      	ldr	r0, [pc, #116]	@ (8000da0 <fault_state+0xbc>)
 8000d2a:	f002 f817 	bl	8002d5c <HAL_GPIO_WritePin>
        o_auxDCDCDisable = GPIO_PIN_RESET;
 8000d2e:	4b1e      	ldr	r3, [pc, #120]	@ (8000da8 <fault_state+0xc4>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	701a      	strb	r2, [r3, #0]

        // Update last state to FAULT
        lastState = FAULT;
 8000d34:	4b15      	ldr	r3, [pc, #84]	@ (8000d8c <fault_state+0xa8>)
 8000d36:	2206      	movs	r2, #6
 8000d38:	701a      	strb	r2, [r3, #0]

        // Record the time when entering the FAULT state
        enterStateTime = HAL_GetTick();
 8000d3a:	f000 fecf 	bl	8001adc <HAL_GetTick>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	4a1a      	ldr	r2, [pc, #104]	@ (8000dac <fault_state+0xc8>)
 8000d42:	6013      	str	r3, [r2, #0]

    }

    currentTime = HAL_GetTick();
 8000d44:	f000 feca 	bl	8001adc <HAL_GetTick>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	4a19      	ldr	r2, [pc, #100]	@ (8000db0 <fault_state+0xcc>)
 8000d4c:	6013      	str	r3, [r2, #0]

    if (currentTime - enterStateTime >= 500) {
 8000d4e:	4b18      	ldr	r3, [pc, #96]	@ (8000db0 <fault_state+0xcc>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	4b16      	ldr	r3, [pc, #88]	@ (8000dac <fault_state+0xc8>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	1ad3      	subs	r3, r2, r3
 8000d58:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000d5c:	d311      	bcc.n	8000d82 <fault_state+0x9e>
        // Reset hvDCDCEnable GPIO pin after 500ms
        HAL_GPIO_WritePin(hvDCDCEnablePort, hvDCDCEnable, GPIO_PIN_RESET);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d64:	480e      	ldr	r0, [pc, #56]	@ (8000da0 <fault_state+0xbc>)
 8000d66:	f001 fff9 	bl	8002d5c <HAL_GPIO_WritePin>
        o_hvDCDCEnable = GPIO_PIN_RESET;
 8000d6a:	4b12      	ldr	r3, [pc, #72]	@ (8000db4 <fault_state+0xd0>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	701a      	strb	r2, [r3, #0]

        // Open HV Contactor
        HAL_GPIO_WritePin(hvContactorPort, hvContactor, GPIO_PIN_RESET);
 8000d70:	2200      	movs	r2, #0
 8000d72:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d76:	480a      	ldr	r0, [pc, #40]	@ (8000da0 <fault_state+0xbc>)
 8000d78:	f001 fff0 	bl	8002d5c <HAL_GPIO_WritePin>
        o_hvContactor = GPIO_PIN_RESET;
 8000d7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000db8 <fault_state+0xd4>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	701a      	strb	r2, [r3, #0]
    }

    faultBlinker();
 8000d82:	f000 f91b 	bl	8000fbc <faultBlinker>
    // FAULT INDICATOR
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000235 	.word	0x20000235
 8000d90:	40020800 	.word	0x40020800
 8000d94:	2000024f 	.word	0x2000024f
 8000d98:	40020c00 	.word	0x40020c00
 8000d9c:	2000024e 	.word	0x2000024e
 8000da0:	40021000 	.word	0x40021000
 8000da4:	20000251 	.word	0x20000251
 8000da8:	2000024d 	.word	0x2000024d
 8000dac:	20000238 	.word	0x20000238
 8000db0:	2000023c 	.word	0x2000023c
 8000db4:	2000024c 	.word	0x2000024c
 8000db8:	20000250 	.word	0x20000250

08000dbc <debugMonitor>:

void debugMonitor(void)
{
 8000dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dbe:	f5ad 7d01 	sub.w	sp, sp, #516	@ 0x204
 8000dc2:	af0c      	add	r7, sp, #48	@ 0x30
	char  analogBuffer[200], outBuffer[240];
	//stateBuffer[240] inBuffer[300], outBuffer[240], outBufferOld[240,;
	//old unused  String arrays ^^^

	sprintf(analogBuffer, "\rPedalADC : %d PedalDAC: %d RegenADC: %d RegenDAC: %d\n",
 8000dc4:	4b33      	ldr	r3, [pc, #204]	@ (8000e94 <debugMonitor+0xd8>)
 8000dc6:	881b      	ldrh	r3, [r3, #0]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4b33      	ldr	r3, [pc, #204]	@ (8000e98 <debugMonitor+0xdc>)
 8000dcc:	881b      	ldrh	r3, [r3, #0]
 8000dce:	461c      	mov	r4, r3
 8000dd0:	4b32      	ldr	r3, [pc, #200]	@ (8000e9c <debugMonitor+0xe0>)
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	4b32      	ldr	r3, [pc, #200]	@ (8000ea0 <debugMonitor+0xe4>)
 8000dd8:	881b      	ldrh	r3, [r3, #0]
 8000dda:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8000dde:	9301      	str	r3, [sp, #4]
 8000de0:	9200      	str	r2, [sp, #0]
 8000de2:	4623      	mov	r3, r4
 8000de4:	460a      	mov	r2, r1
 8000de6:	492f      	ldr	r1, [pc, #188]	@ (8000ea4 <debugMonitor+0xe8>)
 8000de8:	f007 fffa 	bl	8008de0 <siprintf>
			i_pedalADC, o_pedalDAC, i_regenADC, o_regenDAC);

	sprintf(outBuffer, "\rS: %d E-HV-DCDC-E+=%d D-Aux-DCDC=%d ChargeInd=%d FaultInd=%d HV+_Contactor=%d PreCharge=%d KeyIgn=%d KeyACC=%d PedalADC=%d PedalDAC=%d Discharge=%d KillSwitch= %d Code=%d\n",
 8000dec:	4b2e      	ldr	r3, [pc, #184]	@ (8000ea8 <debugMonitor+0xec>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	469c      	mov	ip, r3
 8000df2:	4b2e      	ldr	r3, [pc, #184]	@ (8000eac <debugMonitor+0xf0>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	469e      	mov	lr, r3
 8000df8:	4b2d      	ldr	r3, [pc, #180]	@ (8000eb0 <debugMonitor+0xf4>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4b2d      	ldr	r3, [pc, #180]	@ (8000eb4 <debugMonitor+0xf8>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	4619      	mov	r1, r3
 8000e04:	4b2c      	ldr	r3, [pc, #176]	@ (8000eb8 <debugMonitor+0xfc>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	461c      	mov	r4, r3
 8000e0a:	4b2c      	ldr	r3, [pc, #176]	@ (8000ebc <debugMonitor+0x100>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	461d      	mov	r5, r3
 8000e10:	4b2b      	ldr	r3, [pc, #172]	@ (8000ec0 <debugMonitor+0x104>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	461e      	mov	r6, r3
 8000e16:	4b2b      	ldr	r3, [pc, #172]	@ (8000ec4 <debugMonitor+0x108>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	617b      	str	r3, [r7, #20]
 8000e1c:	4b2a      	ldr	r3, [pc, #168]	@ (8000ec8 <debugMonitor+0x10c>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	613b      	str	r3, [r7, #16]
 8000e22:	4b1c      	ldr	r3, [pc, #112]	@ (8000e94 <debugMonitor+0xd8>)
 8000e24:	881b      	ldrh	r3, [r3, #0]
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	4b1b      	ldr	r3, [pc, #108]	@ (8000e98 <debugMonitor+0xdc>)
 8000e2a:	881b      	ldrh	r3, [r3, #0]
 8000e2c:	60bb      	str	r3, [r7, #8]
 8000e2e:	4b27      	ldr	r3, [pc, #156]	@ (8000ecc <debugMonitor+0x110>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	607b      	str	r3, [r7, #4]
 8000e34:	4b26      	ldr	r3, [pc, #152]	@ (8000ed0 <debugMonitor+0x114>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	603b      	str	r3, [r7, #0]
 8000e3a:	4b26      	ldr	r3, [pc, #152]	@ (8000ed4 <debugMonitor+0x118>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	f107 0018 	add.w	r0, r7, #24
 8000e42:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	930a      	str	r3, [sp, #40]	@ 0x28
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	9308      	str	r3, [sp, #32]
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	9307      	str	r3, [sp, #28]
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	9306      	str	r3, [sp, #24]
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	9305      	str	r3, [sp, #20]
 8000e5c:	9604      	str	r6, [sp, #16]
 8000e5e:	9503      	str	r5, [sp, #12]
 8000e60:	9402      	str	r4, [sp, #8]
 8000e62:	9101      	str	r1, [sp, #4]
 8000e64:	9200      	str	r2, [sp, #0]
 8000e66:	4673      	mov	r3, lr
 8000e68:	4662      	mov	r2, ip
 8000e6a:	491b      	ldr	r1, [pc, #108]	@ (8000ed8 <debugMonitor+0x11c>)
 8000e6c:	f007 ffb8 	bl	8008de0 <siprintf>
//						currentState, i_chargeContactor,i_chargeEnable, o_hvDCDCEnable, o_auxDCDCDisable,o_chargeIndicator, o_faultIndicator, o_hvContactor, faultCode);

//	sprintf(outBuffer,"\rS: %d Discharge=%d KillSwitch= %d\n",
//			currentState, i_disChargeEnable, i_killSwitch);

	CDC_Transmit_FS((uint8_t*)outBuffer, strlen((char*)outBuffer));
 8000e70:	f107 0318 	add.w	r3, r7, #24
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff f9ab 	bl	80001d0 <strlen>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	f107 0318 	add.w	r3, r7, #24
 8000e80:	4611      	mov	r1, r2
 8000e82:	4618      	mov	r0, r3
 8000e84:	f007 fb42 	bl	800850c <CDC_Transmit_FS>


}
 8000e88:	bf00      	nop
 8000e8a:	f507 77ea 	add.w	r7, r7, #468	@ 0x1d4
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000254 	.word	0x20000254
 8000e98:	20000252 	.word	0x20000252
 8000e9c:	20000258 	.word	0x20000258
 8000ea0:	20000256 	.word	0x20000256
 8000ea4:	08009738 	.word	0x08009738
 8000ea8:	20000234 	.word	0x20000234
 8000eac:	2000024c 	.word	0x2000024c
 8000eb0:	2000024d 	.word	0x2000024d
 8000eb4:	2000024e 	.word	0x2000024e
 8000eb8:	2000024f 	.word	0x2000024f
 8000ebc:	20000250 	.word	0x20000250
 8000ec0:	20000251 	.word	0x20000251
 8000ec4:	20000245 	.word	0x20000245
 8000ec8:	20000246 	.word	0x20000246
 8000ecc:	2000024a 	.word	0x2000024a
 8000ed0:	20000247 	.word	0x20000247
 8000ed4:	20000244 	.word	0x20000244
 8000ed8:	08009770 	.word	0x08009770

08000edc <updatePedal>:

void updatePedal(void){
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0

    HAL_ADC_Start(&hadc1);
 8000ee0:	481e      	ldr	r0, [pc, #120]	@ (8000f5c <updatePedal+0x80>)
 8000ee2:	f000 fe6f 	bl	8001bc4 <HAL_ADC_Start>
    HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	481d      	ldr	r0, [pc, #116]	@ (8000f60 <updatePedal+0x84>)
 8000eea:	f001 fcbc 	bl	8002866 <HAL_DAC_Start>

    // Get input from PA0
    	i_pedalADC = HAL_ADC_GetValue(&hadc1);
 8000eee:	481b      	ldr	r0, [pc, #108]	@ (8000f5c <updatePedal+0x80>)
 8000ef0:	f000 ff3a 	bl	8001d68 <HAL_ADC_GetValue>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	b29a      	uxth	r2, r3
 8000ef8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f64 <updatePedal+0x88>)
 8000efa:	801a      	strh	r2, [r3, #0]
    	//o_DAC = ( (i_ADC - min_ADC) * (max_DAC - min_DAC) )/(max_ADC - min_ADC)+ min_DAC
    	//o_DAC = max_DAC - o_DAC;

    	// map value_adc to the range 740-4095 to value dac range to 4095
    	// vaule_dac starts high then goes low(4095-->0)
        o_pedalDAC = ((i_pedalADC - MIN_ADC) * (MAX_DAC- MIN_DAC)) / (MAX_ADC - MIN_ADC) + MIN_DAC;
 8000efc:	4b19      	ldr	r3, [pc, #100]	@ (8000f64 <updatePedal+0x88>)
 8000efe:	881b      	ldrh	r3, [r3, #0]
 8000f00:	461a      	mov	r2, r3
 8000f02:	f240 2376 	movw	r3, #630	@ 0x276
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	f640 71ff 	movw	r1, #4095	@ 0xfff
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	1a8a      	subs	r2, r1, r2
 8000f10:	fb03 f202 	mul.w	r2, r3, r2
 8000f14:	f640 713c 	movw	r1, #3900	@ 0xf3c
 8000f18:	f240 2376 	movw	r3, #630	@ 0x276
 8000f1c:	1acb      	subs	r3, r1, r3
 8000f1e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f22:	b29a      	uxth	r2, r3
 8000f24:	2300      	movs	r3, #0
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	4413      	add	r3, r2
 8000f2a:	b29a      	uxth	r2, r3
 8000f2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f68 <updatePedal+0x8c>)
 8000f2e:	801a      	strh	r2, [r3, #0]
        //invert value
        o_pedalDAC = MAX_DAC - o_pedalDAC;
 8000f30:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000f34:	b29a      	uxth	r2, r3
 8000f36:	4b0c      	ldr	r3, [pc, #48]	@ (8000f68 <updatePedal+0x8c>)
 8000f38:	881b      	ldrh	r3, [r3, #0]
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	b29a      	uxth	r2, r3
 8000f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f68 <updatePedal+0x8c>)
 8000f40:	801a      	strh	r2, [r3, #0]

        // Outputting DAC value to PA4
        HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, o_pedalDAC);
 8000f42:	4b09      	ldr	r3, [pc, #36]	@ (8000f68 <updatePedal+0x8c>)
 8000f44:	881b      	ldrh	r3, [r3, #0]
 8000f46:	2200      	movs	r2, #0
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4805      	ldr	r0, [pc, #20]	@ (8000f60 <updatePedal+0x84>)
 8000f4c:	f001 fcdd 	bl	800290a <HAL_DAC_SetValue>
        HAL_Delay(1);
 8000f50:	2001      	movs	r0, #1
 8000f52:	f000 fdcf 	bl	8001af4 <HAL_Delay>
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000168 	.word	0x20000168
 8000f60:	20000220 	.word	0x20000220
 8000f64:	20000254 	.word	0x20000254
 8000f68:	20000252 	.word	0x20000252

08000f6c <updateRegen>:

void updateRegen(void) {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0

            HAL_ADC_Start(&hadc2);
 8000f70:	480e      	ldr	r0, [pc, #56]	@ (8000fac <updateRegen+0x40>)
 8000f72:	f000 fe27 	bl	8001bc4 <HAL_ADC_Start>
            HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8000f76:	2110      	movs	r1, #16
 8000f78:	480d      	ldr	r0, [pc, #52]	@ (8000fb0 <updateRegen+0x44>)
 8000f7a:	f001 fc74 	bl	8002866 <HAL_DAC_Start>

            	i_regenADC = HAL_ADC_GetValue(&hadc2);
 8000f7e:	480b      	ldr	r0, [pc, #44]	@ (8000fac <updateRegen+0x40>)
 8000f80:	f000 fef2 	bl	8001d68 <HAL_ADC_GetValue>
 8000f84:	4603      	mov	r3, r0
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb4 <updateRegen+0x48>)
 8000f8a:	801a      	strh	r2, [r3, #0]

                // Map value_adc to the range 740-4095 to value_dac range 0-4095
                o_regenDAC = i_regenADC;
 8000f8c:	4b09      	ldr	r3, [pc, #36]	@ (8000fb4 <updateRegen+0x48>)
 8000f8e:	881a      	ldrh	r2, [r3, #0]
 8000f90:	4b09      	ldr	r3, [pc, #36]	@ (8000fb8 <updateRegen+0x4c>)
 8000f92:	801a      	strh	r2, [r3, #0]
                //throttle_pos = (uint32_t)((value_dac / 4096) * 100); // Truncate to integer
                // Output DAC value to PA
                HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, o_regenDAC);
 8000f94:	4b08      	ldr	r3, [pc, #32]	@ (8000fb8 <updateRegen+0x4c>)
 8000f96:	881b      	ldrh	r3, [r3, #0]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2110      	movs	r1, #16
 8000f9c:	4804      	ldr	r0, [pc, #16]	@ (8000fb0 <updateRegen+0x44>)
 8000f9e:	f001 fcb4 	bl	800290a <HAL_DAC_SetValue>
                HAL_Delay(1);
 8000fa2:	2001      	movs	r0, #1
 8000fa4:	f000 fda6 	bl	8001af4 <HAL_Delay>
}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	200001b0 	.word	0x200001b0
 8000fb0:	20000220 	.word	0x20000220
 8000fb4:	20000258 	.word	0x20000258
 8000fb8:	20000256 	.word	0x20000256

08000fbc <faultBlinker>:


void faultBlinker(void) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
    // Blinks the Fault Indicator at 1.5 Hz (1.5p second on/off)
    if (currentTime - extraTime >= 750) {
 8000fc0:	4b12      	ldr	r3, [pc, #72]	@ (800100c <faultBlinker+0x50>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	4b12      	ldr	r3, [pc, #72]	@ (8001010 <faultBlinker+0x54>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	f240 22ed 	movw	r2, #749	@ 0x2ed
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d91a      	bls.n	8001008 <faultBlinker+0x4c>

        // Toggle fault indicator GPIO pin
        if (o_faultIndicator == GPIO_PIN_RESET) { // Checks to see if Fault Light is OFF
 8000fd2:	4b10      	ldr	r3, [pc, #64]	@ (8001014 <faultBlinker+0x58>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d109      	bne.n	8000fee <faultBlinker+0x32>

            // Turns on the Fault Light
            HAL_GPIO_WritePin(faultIndicatorPort, faultIndicator, GPIO_PIN_SET);
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fe0:	480d      	ldr	r0, [pc, #52]	@ (8001018 <faultBlinker+0x5c>)
 8000fe2:	f001 febb 	bl	8002d5c <HAL_GPIO_WritePin>
            o_faultIndicator = GPIO_PIN_SET;
 8000fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8001014 <faultBlinker+0x58>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	701a      	strb	r2, [r3, #0]
 8000fec:	e008      	b.n	8001000 <faultBlinker+0x44>
        } else {
            // Turns off the Fault Light
            HAL_GPIO_WritePin(faultIndicatorPort, faultIndicator, GPIO_PIN_RESET);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ff4:	4808      	ldr	r0, [pc, #32]	@ (8001018 <faultBlinker+0x5c>)
 8000ff6:	f001 feb1 	bl	8002d5c <HAL_GPIO_WritePin>
            o_faultIndicator = GPIO_PIN_RESET;
 8000ffa:	4b06      	ldr	r3, [pc, #24]	@ (8001014 <faultBlinker+0x58>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	701a      	strb	r2, [r3, #0]
        }

        extraTime = currentTime;
 8001000:	4b02      	ldr	r3, [pc, #8]	@ (800100c <faultBlinker+0x50>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a02      	ldr	r2, [pc, #8]	@ (8001010 <faultBlinker+0x54>)
 8001006:	6013      	str	r3, [r2, #0]
    }
}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}
 800100c:	2000023c 	.word	0x2000023c
 8001010:	20000240 	.word	0x20000240
 8001014:	2000024f 	.word	0x2000024f
 8001018:	40020800 	.word	0x40020800

0800101c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b094      	sub	sp, #80	@ 0x50
 8001020:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001022:	f107 0320 	add.w	r3, r7, #32
 8001026:	2230      	movs	r2, #48	@ 0x30
 8001028:	2100      	movs	r1, #0
 800102a:	4618      	mov	r0, r3
 800102c:	f007 fef8 	bl	8008e20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001030:	f107 030c 	add.w	r3, r7, #12
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001040:	2300      	movs	r3, #0
 8001042:	60bb      	str	r3, [r7, #8]
 8001044:	4b28      	ldr	r3, [pc, #160]	@ (80010e8 <SystemClock_Config+0xcc>)
 8001046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001048:	4a27      	ldr	r2, [pc, #156]	@ (80010e8 <SystemClock_Config+0xcc>)
 800104a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800104e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001050:	4b25      	ldr	r3, [pc, #148]	@ (80010e8 <SystemClock_Config+0xcc>)
 8001052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001054:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800105c:	2300      	movs	r3, #0
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	4b22      	ldr	r3, [pc, #136]	@ (80010ec <SystemClock_Config+0xd0>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a21      	ldr	r2, [pc, #132]	@ (80010ec <SystemClock_Config+0xd0>)
 8001066:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800106a:	6013      	str	r3, [r2, #0]
 800106c:	4b1f      	ldr	r3, [pc, #124]	@ (80010ec <SystemClock_Config+0xd0>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001078:	2301      	movs	r3, #1
 800107a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800107c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001080:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001082:	2302      	movs	r3, #2
 8001084:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001086:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800108a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800108c:	2308      	movs	r3, #8
 800108e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001090:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001094:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001096:	2302      	movs	r3, #2
 8001098:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800109a:	2307      	movs	r3, #7
 800109c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800109e:	f107 0320 	add.w	r3, r7, #32
 80010a2:	4618      	mov	r0, r3
 80010a4:	f003 f8f0 	bl	8004288 <HAL_RCC_OscConfig>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80010ae:	f000 fad5 	bl	800165c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010b2:	230f      	movs	r3, #15
 80010b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010b6:	2302      	movs	r3, #2
 80010b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010be:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80010c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010ca:	f107 030c 	add.w	r3, r7, #12
 80010ce:	2105      	movs	r1, #5
 80010d0:	4618      	mov	r0, r3
 80010d2:	f003 fb51 	bl	8004778 <HAL_RCC_ClockConfig>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80010dc:	f000 fabe 	bl	800165c <Error_Handler>
  }
}
 80010e0:	bf00      	nop
 80010e2:	3750      	adds	r7, #80	@ 0x50
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40007000 	.word	0x40007000

080010f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010f6:	463b      	mov	r3, r7
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001102:	4b21      	ldr	r3, [pc, #132]	@ (8001188 <MX_ADC1_Init+0x98>)
 8001104:	4a21      	ldr	r2, [pc, #132]	@ (800118c <MX_ADC1_Init+0x9c>)
 8001106:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001108:	4b1f      	ldr	r3, [pc, #124]	@ (8001188 <MX_ADC1_Init+0x98>)
 800110a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800110e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001110:	4b1d      	ldr	r3, [pc, #116]	@ (8001188 <MX_ADC1_Init+0x98>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001116:	4b1c      	ldr	r3, [pc, #112]	@ (8001188 <MX_ADC1_Init+0x98>)
 8001118:	2200      	movs	r2, #0
 800111a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800111c:	4b1a      	ldr	r3, [pc, #104]	@ (8001188 <MX_ADC1_Init+0x98>)
 800111e:	2201      	movs	r2, #1
 8001120:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001122:	4b19      	ldr	r3, [pc, #100]	@ (8001188 <MX_ADC1_Init+0x98>)
 8001124:	2200      	movs	r2, #0
 8001126:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800112a:	4b17      	ldr	r3, [pc, #92]	@ (8001188 <MX_ADC1_Init+0x98>)
 800112c:	2200      	movs	r2, #0
 800112e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001130:	4b15      	ldr	r3, [pc, #84]	@ (8001188 <MX_ADC1_Init+0x98>)
 8001132:	4a17      	ldr	r2, [pc, #92]	@ (8001190 <MX_ADC1_Init+0xa0>)
 8001134:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001136:	4b14      	ldr	r3, [pc, #80]	@ (8001188 <MX_ADC1_Init+0x98>)
 8001138:	2200      	movs	r2, #0
 800113a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800113c:	4b12      	ldr	r3, [pc, #72]	@ (8001188 <MX_ADC1_Init+0x98>)
 800113e:	2201      	movs	r2, #1
 8001140:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001142:	4b11      	ldr	r3, [pc, #68]	@ (8001188 <MX_ADC1_Init+0x98>)
 8001144:	2200      	movs	r2, #0
 8001146:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800114a:	4b0f      	ldr	r3, [pc, #60]	@ (8001188 <MX_ADC1_Init+0x98>)
 800114c:	2201      	movs	r2, #1
 800114e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001150:	480d      	ldr	r0, [pc, #52]	@ (8001188 <MX_ADC1_Init+0x98>)
 8001152:	f000 fcf3 	bl	8001b3c <HAL_ADC_Init>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800115c:	f000 fa7e 	bl	800165c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001160:	2301      	movs	r3, #1
 8001162:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001164:	2301      	movs	r3, #1
 8001166:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001168:	2301      	movs	r3, #1
 800116a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800116c:	463b      	mov	r3, r7
 800116e:	4619      	mov	r1, r3
 8001170:	4805      	ldr	r0, [pc, #20]	@ (8001188 <MX_ADC1_Init+0x98>)
 8001172:	f000 fe07 	bl	8001d84 <HAL_ADC_ConfigChannel>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800117c:	f000 fa6e 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001180:	bf00      	nop
 8001182:	3710      	adds	r7, #16
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20000168 	.word	0x20000168
 800118c:	40012000 	.word	0x40012000
 8001190:	0f000001 	.word	0x0f000001

08001194 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800119a:	463b      	mov	r3, r7
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80011a6:	4b21      	ldr	r3, [pc, #132]	@ (800122c <MX_ADC2_Init+0x98>)
 80011a8:	4a21      	ldr	r2, [pc, #132]	@ (8001230 <MX_ADC2_Init+0x9c>)
 80011aa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011ac:	4b1f      	ldr	r3, [pc, #124]	@ (800122c <MX_ADC2_Init+0x98>)
 80011ae:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80011b2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80011b4:	4b1d      	ldr	r3, [pc, #116]	@ (800122c <MX_ADC2_Init+0x98>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80011ba:	4b1c      	ldr	r3, [pc, #112]	@ (800122c <MX_ADC2_Init+0x98>)
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80011c0:	4b1a      	ldr	r3, [pc, #104]	@ (800122c <MX_ADC2_Init+0x98>)
 80011c2:	2201      	movs	r2, #1
 80011c4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80011c6:	4b19      	ldr	r3, [pc, #100]	@ (800122c <MX_ADC2_Init+0x98>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011ce:	4b17      	ldr	r3, [pc, #92]	@ (800122c <MX_ADC2_Init+0x98>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011d4:	4b15      	ldr	r3, [pc, #84]	@ (800122c <MX_ADC2_Init+0x98>)
 80011d6:	4a17      	ldr	r2, [pc, #92]	@ (8001234 <MX_ADC2_Init+0xa0>)
 80011d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011da:	4b14      	ldr	r3, [pc, #80]	@ (800122c <MX_ADC2_Init+0x98>)
 80011dc:	2200      	movs	r2, #0
 80011de:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80011e0:	4b12      	ldr	r3, [pc, #72]	@ (800122c <MX_ADC2_Init+0x98>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80011e6:	4b11      	ldr	r3, [pc, #68]	@ (800122c <MX_ADC2_Init+0x98>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011ee:	4b0f      	ldr	r3, [pc, #60]	@ (800122c <MX_ADC2_Init+0x98>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80011f4:	480d      	ldr	r0, [pc, #52]	@ (800122c <MX_ADC2_Init+0x98>)
 80011f6:	f000 fca1 	bl	8001b3c <HAL_ADC_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001200:	f000 fa2c 	bl	800165c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001204:	2302      	movs	r3, #2
 8001206:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001208:	2301      	movs	r3, #1
 800120a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800120c:	2300      	movs	r3, #0
 800120e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001210:	463b      	mov	r3, r7
 8001212:	4619      	mov	r1, r3
 8001214:	4805      	ldr	r0, [pc, #20]	@ (800122c <MX_ADC2_Init+0x98>)
 8001216:	f000 fdb5 	bl	8001d84 <HAL_ADC_ConfigChannel>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001220:	f000 fa1c 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001224:	bf00      	nop
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	200001b0 	.word	0x200001b0
 8001230:	40012100 	.word	0x40012100
 8001234:	0f000001 	.word	0x0f000001

08001238 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800123c:	4b34      	ldr	r3, [pc, #208]	@ (8001310 <MX_CAN1_Init+0xd8>)
 800123e:	4a35      	ldr	r2, [pc, #212]	@ (8001314 <MX_CAN1_Init+0xdc>)
 8001240:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001242:	4b33      	ldr	r3, [pc, #204]	@ (8001310 <MX_CAN1_Init+0xd8>)
 8001244:	2210      	movs	r2, #16
 8001246:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001248:	4b31      	ldr	r3, [pc, #196]	@ (8001310 <MX_CAN1_Init+0xd8>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800124e:	4b30      	ldr	r3, [pc, #192]	@ (8001310 <MX_CAN1_Init+0xd8>)
 8001250:	2200      	movs	r2, #0
 8001252:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001254:	4b2e      	ldr	r3, [pc, #184]	@ (8001310 <MX_CAN1_Init+0xd8>)
 8001256:	2200      	movs	r2, #0
 8001258:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800125a:	4b2d      	ldr	r3, [pc, #180]	@ (8001310 <MX_CAN1_Init+0xd8>)
 800125c:	2200      	movs	r2, #0
 800125e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001260:	4b2b      	ldr	r3, [pc, #172]	@ (8001310 <MX_CAN1_Init+0xd8>)
 8001262:	2200      	movs	r2, #0
 8001264:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001266:	4b2a      	ldr	r3, [pc, #168]	@ (8001310 <MX_CAN1_Init+0xd8>)
 8001268:	2200      	movs	r2, #0
 800126a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800126c:	4b28      	ldr	r3, [pc, #160]	@ (8001310 <MX_CAN1_Init+0xd8>)
 800126e:	2200      	movs	r2, #0
 8001270:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001272:	4b27      	ldr	r3, [pc, #156]	@ (8001310 <MX_CAN1_Init+0xd8>)
 8001274:	2200      	movs	r2, #0
 8001276:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001278:	4b25      	ldr	r3, [pc, #148]	@ (8001310 <MX_CAN1_Init+0xd8>)
 800127a:	2200      	movs	r2, #0
 800127c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800127e:	4b24      	ldr	r3, [pc, #144]	@ (8001310 <MX_CAN1_Init+0xd8>)
 8001280:	2200      	movs	r2, #0
 8001282:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001284:	4822      	ldr	r0, [pc, #136]	@ (8001310 <MX_CAN1_Init+0xd8>)
 8001286:	f000 ff9b 	bl	80021c0 <HAL_CAN_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8001290:	f000 f9e4 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  //Sets Up the First part of the CAN FRAME
  TxHeader.IDE = CAN_ID_STD;
 8001294:	4b20      	ldr	r3, [pc, #128]	@ (8001318 <MX_CAN1_Init+0xe0>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
  TxHeader.StdId = 0x420;
 800129a:	4b1f      	ldr	r3, [pc, #124]	@ (8001318 <MX_CAN1_Init+0xe0>)
 800129c:	f44f 6284 	mov.w	r2, #1056	@ 0x420
 80012a0:	601a      	str	r2, [r3, #0]
  TxHeader.RTR = CAN_RTR_DATA;
 80012a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001318 <MX_CAN1_Init+0xe0>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	60da      	str	r2, [r3, #12]
  TxHeader.DLC = 8;
 80012a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001318 <MX_CAN1_Init+0xe0>)
 80012aa:	2208      	movs	r2, #8
 80012ac:	611a      	str	r2, [r3, #16]

  Filter.FilterActivation = CAN_FILTER_ENABLE;
 80012ae:	4b1b      	ldr	r3, [pc, #108]	@ (800131c <MX_CAN1_Init+0xe4>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	621a      	str	r2, [r3, #32]
  Filter.FilterBank = 0;
 80012b4:	4b19      	ldr	r3, [pc, #100]	@ (800131c <MX_CAN1_Init+0xe4>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	615a      	str	r2, [r3, #20]
  Filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80012ba:	4b18      	ldr	r3, [pc, #96]	@ (800131c <MX_CAN1_Init+0xe4>)
 80012bc:	2200      	movs	r2, #0
 80012be:	611a      	str	r2, [r3, #16]
  Filter.FilterIdHigh = 0x0000;
 80012c0:	4b16      	ldr	r3, [pc, #88]	@ (800131c <MX_CAN1_Init+0xe4>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
  Filter.FilterIdLow = 0x0000;
 80012c6:	4b15      	ldr	r3, [pc, #84]	@ (800131c <MX_CAN1_Init+0xe4>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	605a      	str	r2, [r3, #4]
  Filter.FilterMaskIdHigh = 0x0000;
 80012cc:	4b13      	ldr	r3, [pc, #76]	@ (800131c <MX_CAN1_Init+0xe4>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
  Filter.FilterMaskIdLow = 0x0000;
 80012d2:	4b12      	ldr	r3, [pc, #72]	@ (800131c <MX_CAN1_Init+0xe4>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	60da      	str	r2, [r3, #12]
  Filter.FilterMode = CAN_FILTERMODE_IDMASK;
 80012d8:	4b10      	ldr	r3, [pc, #64]	@ (800131c <MX_CAN1_Init+0xe4>)
 80012da:	2200      	movs	r2, #0
 80012dc:	619a      	str	r2, [r3, #24]
  Filter.FilterScale = CAN_FILTERSCALE_32BIT;
 80012de:	4b0f      	ldr	r3, [pc, #60]	@ (800131c <MX_CAN1_Init+0xe4>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	61da      	str	r2, [r3, #28]
  Filter.SlaveStartFilterBank = 14;
 80012e4:	4b0d      	ldr	r3, [pc, #52]	@ (800131c <MX_CAN1_Init+0xe4>)
 80012e6:	220e      	movs	r2, #14
 80012e8:	625a      	str	r2, [r3, #36]	@ 0x24

  if (HAL_CAN_ConfigFilter(&hcan1, &Filter) != HAL_OK){
 80012ea:	490c      	ldr	r1, [pc, #48]	@ (800131c <MX_CAN1_Init+0xe4>)
 80012ec:	4808      	ldr	r0, [pc, #32]	@ (8001310 <MX_CAN1_Init+0xd8>)
 80012ee:	f001 f863 	bl	80023b8 <HAL_CAN_ConfigFilter>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_CAN1_Init+0xc4>
	  Error_Handler();
 80012f8:	f000 f9b0 	bl	800165c <Error_Handler>
  }
  if(HAL_CAN_Start(&hcan1)!= HAL_OK){
 80012fc:	4804      	ldr	r0, [pc, #16]	@ (8001310 <MX_CAN1_Init+0xd8>)
 80012fe:	f001 f93b 	bl	8002578 <HAL_CAN_Start>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_CAN1_Init+0xd4>
	  Error_Handler();
 8001308:	f000 f9a8 	bl	800165c <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}
 8001310:	200001f8 	.word	0x200001f8
 8001314:	40006400 	.word	0x40006400
 8001318:	20000284 	.word	0x20000284
 800131c:	2000025c 	.word	0x2000025c

08001320 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001326:	463b      	mov	r3, r7
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800132e:	4b14      	ldr	r3, [pc, #80]	@ (8001380 <MX_DAC_Init+0x60>)
 8001330:	4a14      	ldr	r2, [pc, #80]	@ (8001384 <MX_DAC_Init+0x64>)
 8001332:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001334:	4812      	ldr	r0, [pc, #72]	@ (8001380 <MX_DAC_Init+0x60>)
 8001336:	f001 fa74 	bl	8002822 <HAL_DAC_Init>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001340:	f000 f98c 	bl	800165c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001344:	2300      	movs	r3, #0
 8001346:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001348:	2300      	movs	r3, #0
 800134a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800134c:	463b      	mov	r3, r7
 800134e:	2200      	movs	r2, #0
 8001350:	4619      	mov	r1, r3
 8001352:	480b      	ldr	r0, [pc, #44]	@ (8001380 <MX_DAC_Init+0x60>)
 8001354:	f001 fafe 	bl	8002954 <HAL_DAC_ConfigChannel>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800135e:	f000 f97d 	bl	800165c <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001362:	463b      	mov	r3, r7
 8001364:	2210      	movs	r2, #16
 8001366:	4619      	mov	r1, r3
 8001368:	4805      	ldr	r0, [pc, #20]	@ (8001380 <MX_DAC_Init+0x60>)
 800136a:	f001 faf3 	bl	8002954 <HAL_DAC_ConfigChannel>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8001374:	f000 f972 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20000220 	.word	0x20000220
 8001384:	40007400 	.word	0x40007400

08001388 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08c      	sub	sp, #48	@ 0x30
 800138c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138e:	f107 031c 	add.w	r3, r7, #28
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]
 800139c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	61bb      	str	r3, [r7, #24]
 80013a2:	4ba8      	ldr	r3, [pc, #672]	@ (8001644 <MX_GPIO_Init+0x2bc>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a6:	4aa7      	ldr	r2, [pc, #668]	@ (8001644 <MX_GPIO_Init+0x2bc>)
 80013a8:	f043 0310 	orr.w	r3, r3, #16
 80013ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ae:	4ba5      	ldr	r3, [pc, #660]	@ (8001644 <MX_GPIO_Init+0x2bc>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b2:	f003 0310 	and.w	r3, r3, #16
 80013b6:	61bb      	str	r3, [r7, #24]
 80013b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]
 80013be:	4ba1      	ldr	r3, [pc, #644]	@ (8001644 <MX_GPIO_Init+0x2bc>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c2:	4aa0      	ldr	r2, [pc, #640]	@ (8001644 <MX_GPIO_Init+0x2bc>)
 80013c4:	f043 0304 	orr.w	r3, r3, #4
 80013c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ca:	4b9e      	ldr	r3, [pc, #632]	@ (8001644 <MX_GPIO_Init+0x2bc>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	f003 0304 	and.w	r3, r3, #4
 80013d2:	617b      	str	r3, [r7, #20]
 80013d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
 80013da:	4b9a      	ldr	r3, [pc, #616]	@ (8001644 <MX_GPIO_Init+0x2bc>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013de:	4a99      	ldr	r2, [pc, #612]	@ (8001644 <MX_GPIO_Init+0x2bc>)
 80013e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e6:	4b97      	ldr	r3, [pc, #604]	@ (8001644 <MX_GPIO_Init+0x2bc>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013ee:	613b      	str	r3, [r7, #16]
 80013f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	4b93      	ldr	r3, [pc, #588]	@ (8001644 <MX_GPIO_Init+0x2bc>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fa:	4a92      	ldr	r2, [pc, #584]	@ (8001644 <MX_GPIO_Init+0x2bc>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	6313      	str	r3, [r2, #48]	@ 0x30
 8001402:	4b90      	ldr	r3, [pc, #576]	@ (8001644 <MX_GPIO_Init+0x2bc>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	4b8c      	ldr	r3, [pc, #560]	@ (8001644 <MX_GPIO_Init+0x2bc>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001416:	4a8b      	ldr	r2, [pc, #556]	@ (8001644 <MX_GPIO_Init+0x2bc>)
 8001418:	f043 0302 	orr.w	r3, r3, #2
 800141c:	6313      	str	r3, [r2, #48]	@ 0x30
 800141e:	4b89      	ldr	r3, [pc, #548]	@ (8001644 <MX_GPIO_Init+0x2bc>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	4b85      	ldr	r3, [pc, #532]	@ (8001644 <MX_GPIO_Init+0x2bc>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001432:	4a84      	ldr	r2, [pc, #528]	@ (8001644 <MX_GPIO_Init+0x2bc>)
 8001434:	f043 0308 	orr.w	r3, r3, #8
 8001438:	6313      	str	r3, [r2, #48]	@ 0x30
 800143a:	4b82      	ldr	r3, [pc, #520]	@ (8001644 <MX_GPIO_Init+0x2bc>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	f003 0308 	and.w	r3, r3, #8
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|auxDCDCDisable_Pin|hvDCDCEnable_Pin|preChargeRelay_Pin
 8001446:	2200      	movs	r2, #0
 8001448:	f641 1188 	movw	r1, #6536	@ 0x1988
 800144c:	487e      	ldr	r0, [pc, #504]	@ (8001648 <MX_GPIO_Init+0x2c0>)
 800144e:	f001 fc85 	bl	8002d5c <HAL_GPIO_WritePin>
                          |hvContactor_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001452:	2201      	movs	r2, #1
 8001454:	2101      	movs	r1, #1
 8001456:	487d      	ldr	r0, [pc, #500]	@ (800164c <MX_GPIO_Init+0x2c4>)
 8001458:	f001 fc80 	bl	8002d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(hvContactorB15_GPIO_Port, hvContactorB15_Pin, GPIO_PIN_RESET);
 800145c:	2200      	movs	r2, #0
 800145e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001462:	487b      	ldr	r0, [pc, #492]	@ (8001650 <MX_GPIO_Init+0x2c8>)
 8001464:	f001 fc7a 	bl	8002d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD6_Pin|spareOutput2_Pin
 8001468:	2200      	movs	r2, #0
 800146a:	f24b 0199 	movw	r1, #45209	@ 0xb099
 800146e:	4879      	ldr	r0, [pc, #484]	@ (8001654 <MX_GPIO_Init+0x2cc>)
 8001470:	f001 fc74 	bl	8002d5c <HAL_GPIO_WritePin>
                          |faultIndicatorD3_Pin|chargeIndicator_Pin|NA2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(faultIndicator_GPIO_Port, faultIndicator_Pin, GPIO_PIN_RESET);
 8001474:	2200      	movs	r2, #0
 8001476:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800147a:	4874      	ldr	r0, [pc, #464]	@ (800164c <MX_GPIO_Init+0x2c4>)
 800147c:	f001 fc6e 	bl	8002d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(spareOutput3_GPIO_Port, spareOutput3_Pin, GPIO_PIN_SET);
 8001480:	2201      	movs	r2, #1
 8001482:	2140      	movs	r1, #64	@ 0x40
 8001484:	4873      	ldr	r0, [pc, #460]	@ (8001654 <MX_GPIO_Init+0x2cc>)
 8001486:	f001 fc69 	bl	8002d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_I2C_SPI_Pin auxDCDCDisable_Pin hvDCDCEnable_Pin preChargeRelay_Pin
                           hvContactor_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|auxDCDCDisable_Pin|hvDCDCEnable_Pin|preChargeRelay_Pin
 800148a:	f641 1388 	movw	r3, #6536	@ 0x1988
 800148e:	61fb      	str	r3, [r7, #28]
                          |hvContactor_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001490:	2301      	movs	r3, #1
 8001492:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001498:	2300      	movs	r3, #0
 800149a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800149c:	f107 031c 	add.w	r3, r7, #28
 80014a0:	4619      	mov	r1, r3
 80014a2:	4869      	ldr	r0, [pc, #420]	@ (8001648 <MX_GPIO_Init+0x2c0>)
 80014a4:	f001 faa6 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin faultIndicator_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|faultIndicator_Pin;
 80014a8:	f241 0301 	movw	r3, #4097	@ 0x1001
 80014ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ae:	2301      	movs	r3, #1
 80014b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b6:	2300      	movs	r3, #0
 80014b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ba:	f107 031c 	add.w	r3, r7, #28
 80014be:	4619      	mov	r1, r3
 80014c0:	4862      	ldr	r0, [pc, #392]	@ (800164c <MX_GPIO_Init+0x2c4>)
 80014c2:	f001 fa97 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80014c6:	2308      	movs	r3, #8
 80014c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ca:	2302      	movs	r3, #2
 80014cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d2:	2300      	movs	r3, #0
 80014d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014d6:	2305      	movs	r3, #5
 80014d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80014da:	f107 031c 	add.w	r3, r7, #28
 80014de:	4619      	mov	r1, r3
 80014e0:	485a      	ldr	r0, [pc, #360]	@ (800164c <MX_GPIO_Init+0x2c4>)
 80014e2:	f001 fa87 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014e6:	2301      	movs	r3, #1
 80014e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80014ea:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80014ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014f4:	f107 031c 	add.w	r3, r7, #28
 80014f8:	4619      	mov	r1, r3
 80014fa:	4857      	ldr	r0, [pc, #348]	@ (8001658 <MX_GPIO_Init+0x2d0>)
 80014fc:	f001 fa7a 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : chargeEnable_Pin */
  GPIO_InitStruct.Pin = chargeEnable_Pin;
 8001500:	2308      	movs	r3, #8
 8001502:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001504:	2300      	movs	r3, #0
 8001506:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(chargeEnable_GPIO_Port, &GPIO_InitStruct);
 800150c:	f107 031c 	add.w	r3, r7, #28
 8001510:	4619      	mov	r1, r3
 8001512:	4851      	ldr	r0, [pc, #324]	@ (8001658 <MX_GPIO_Init+0x2d0>)
 8001514:	f001 fa6e 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_MISO_Pin */
  GPIO_InitStruct.Pin = SPI1_MISO_Pin;
 8001518:	2340      	movs	r3, #64	@ 0x40
 800151a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151c:	2302      	movs	r3, #2
 800151e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001524:	2300      	movs	r3, #0
 8001526:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001528:	2305      	movs	r3, #5
 800152a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(SPI1_MISO_GPIO_Port, &GPIO_InitStruct);
 800152c:	f107 031c 	add.w	r3, r7, #28
 8001530:	4619      	mov	r1, r3
 8001532:	4849      	ldr	r0, [pc, #292]	@ (8001658 <MX_GPIO_Init+0x2d0>)
 8001534:	f001 fa5e 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001538:	2304      	movs	r3, #4
 800153a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800153c:	2300      	movs	r3, #0
 800153e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001544:	f107 031c 	add.w	r3, r7, #28
 8001548:	4619      	mov	r1, r3
 800154a:	4841      	ldr	r0, [pc, #260]	@ (8001650 <MX_GPIO_Init+0x2c8>)
 800154c:	f001 fa52 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : keyIGN_Pin keyACC_Pin chargeContactor_Pin disChargeEnable_Pin
                           chargeEnableE15_Pin */
  GPIO_InitStruct.Pin = keyIGN_Pin|keyACC_Pin|chargeContactor_Pin|disChargeEnable_Pin
 8001550:	f44f 4366 	mov.w	r3, #58880	@ 0xe600
 8001554:	61fb      	str	r3, [r7, #28]
                          |chargeEnableE15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001556:	2300      	movs	r3, #0
 8001558:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800155e:	f107 031c 	add.w	r3, r7, #28
 8001562:	4619      	mov	r1, r3
 8001564:	4838      	ldr	r0, [pc, #224]	@ (8001648 <MX_GPIO_Init+0x2c0>)
 8001566:	f001 fa45 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800156a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800156e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001570:	2302      	movs	r3, #2
 8001572:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001578:	2300      	movs	r3, #0
 800157a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800157c:	2305      	movs	r3, #5
 800157e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001580:	f107 031c 	add.w	r3, r7, #28
 8001584:	4619      	mov	r1, r3
 8001586:	4832      	ldr	r0, [pc, #200]	@ (8001650 <MX_GPIO_Init+0x2c8>)
 8001588:	f001 fa34 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : hvContactorB15_Pin */
  GPIO_InitStruct.Pin = hvContactorB15_Pin;
 800158c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001590:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001592:	2301      	movs	r3, #1
 8001594:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159a:	2300      	movs	r3, #0
 800159c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(hvContactorB15_GPIO_Port, &GPIO_InitStruct);
 800159e:	f107 031c 	add.w	r3, r7, #28
 80015a2:	4619      	mov	r1, r3
 80015a4:	482a      	ldr	r0, [pc, #168]	@ (8001650 <MX_GPIO_Init+0x2c8>)
 80015a6:	f001 fa25 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : spareInput2_Pin spareInput1_Pin spareInput3_Pin killSwitch_Pin
                           brakeSwitchInput_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = spareInput2_Pin|spareInput1_Pin|spareInput3_Pin|killSwitch_Pin
 80015aa:	f240 7326 	movw	r3, #1830	@ 0x726
 80015ae:	61fb      	str	r3, [r7, #28]
                          |brakeSwitchInput_Pin|OTG_FS_OverCurrent_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b0:	2300      	movs	r3, #0
 80015b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015b8:	f107 031c 	add.w	r3, r7, #28
 80015bc:	4619      	mov	r1, r3
 80015be:	4825      	ldr	r0, [pc, #148]	@ (8001654 <MX_GPIO_Init+0x2cc>)
 80015c0:	f001 fa18 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD6_Pin spareOutput2_Pin
                           faultIndicatorD3_Pin chargeIndicator_Pin NA2_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD6_Pin|spareOutput2_Pin
 80015c4:	f24b 0399 	movw	r3, #45209	@ 0xb099
 80015c8:	61fb      	str	r3, [r7, #28]
                          |faultIndicatorD3_Pin|chargeIndicator_Pin|NA2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ca:	2301      	movs	r3, #1
 80015cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	2300      	movs	r3, #0
 80015d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015d6:	f107 031c 	add.w	r3, r7, #28
 80015da:	4619      	mov	r1, r3
 80015dc:	481d      	ldr	r0, [pc, #116]	@ (8001654 <MX_GPIO_Init+0x2cc>)
 80015de:	f001 fa09 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_SCK_Pin */
  GPIO_InitStruct.Pin = I2S3_SCK_Pin;
 80015e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e8:	2302      	movs	r3, #2
 80015ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f0:	2300      	movs	r3, #0
 80015f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015f4:	2306      	movs	r3, #6
 80015f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_SCK_GPIO_Port, &GPIO_InitStruct);
 80015f8:	f107 031c 	add.w	r3, r7, #28
 80015fc:	4619      	mov	r1, r3
 80015fe:	4813      	ldr	r0, [pc, #76]	@ (800164c <MX_GPIO_Init+0x2c4>)
 8001600:	f001 f9f8 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : spareOutput3_Pin */
  GPIO_InitStruct.Pin = spareOutput3_Pin;
 8001604:	2340      	movs	r3, #64	@ 0x40
 8001606:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001608:	2301      	movs	r3, #1
 800160a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800160c:	2302      	movs	r3, #2
 800160e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001610:	2302      	movs	r3, #2
 8001612:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(spareOutput3_GPIO_Port, &GPIO_InitStruct);
 8001614:	f107 031c 	add.w	r3, r7, #28
 8001618:	4619      	mov	r1, r3
 800161a:	480e      	ldr	r0, [pc, #56]	@ (8001654 <MX_GPIO_Init+0x2cc>)
 800161c:	f001 f9ea 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001620:	2302      	movs	r3, #2
 8001622:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001624:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001628:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800162e:	f107 031c 	add.w	r3, r7, #28
 8001632:	4619      	mov	r1, r3
 8001634:	4804      	ldr	r0, [pc, #16]	@ (8001648 <MX_GPIO_Init+0x2c0>)
 8001636:	f001 f9dd 	bl	80029f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800163a:	bf00      	nop
 800163c:	3730      	adds	r7, #48	@ 0x30
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40023800 	.word	0x40023800
 8001648:	40021000 	.word	0x40021000
 800164c:	40020800 	.word	0x40020800
 8001650:	40020400 	.word	0x40020400
 8001654:	40020c00 	.word	0x40020c00
 8001658:	40020000 	.word	0x40020000

0800165c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001660:	b672      	cpsid	i
}
 8001662:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001664:	bf00      	nop
 8001666:	e7fd      	b.n	8001664 <Error_Handler+0x8>

08001668 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	607b      	str	r3, [r7, #4]
 8001672:	4b10      	ldr	r3, [pc, #64]	@ (80016b4 <HAL_MspInit+0x4c>)
 8001674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001676:	4a0f      	ldr	r2, [pc, #60]	@ (80016b4 <HAL_MspInit+0x4c>)
 8001678:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800167c:	6453      	str	r3, [r2, #68]	@ 0x44
 800167e:	4b0d      	ldr	r3, [pc, #52]	@ (80016b4 <HAL_MspInit+0x4c>)
 8001680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001682:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001686:	607b      	str	r3, [r7, #4]
 8001688:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	603b      	str	r3, [r7, #0]
 800168e:	4b09      	ldr	r3, [pc, #36]	@ (80016b4 <HAL_MspInit+0x4c>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001692:	4a08      	ldr	r2, [pc, #32]	@ (80016b4 <HAL_MspInit+0x4c>)
 8001694:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001698:	6413      	str	r3, [r2, #64]	@ 0x40
 800169a:	4b06      	ldr	r3, [pc, #24]	@ (80016b4 <HAL_MspInit+0x4c>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016a2:	603b      	str	r3, [r7, #0]
 80016a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016a6:	2007      	movs	r0, #7
 80016a8:	f001 f87a 	bl	80027a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ac:	bf00      	nop
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40023800 	.word	0x40023800

080016b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b08c      	sub	sp, #48	@ 0x30
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c0:	f107 031c 	add.w	r3, r7, #28
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
 80016ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a2e      	ldr	r2, [pc, #184]	@ (8001790 <HAL_ADC_MspInit+0xd8>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d128      	bne.n	800172c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	61bb      	str	r3, [r7, #24]
 80016de:	4b2d      	ldr	r3, [pc, #180]	@ (8001794 <HAL_ADC_MspInit+0xdc>)
 80016e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016e2:	4a2c      	ldr	r2, [pc, #176]	@ (8001794 <HAL_ADC_MspInit+0xdc>)
 80016e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80016ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001794 <HAL_ADC_MspInit+0xdc>)
 80016ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016f2:	61bb      	str	r3, [r7, #24]
 80016f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	617b      	str	r3, [r7, #20]
 80016fa:	4b26      	ldr	r3, [pc, #152]	@ (8001794 <HAL_ADC_MspInit+0xdc>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fe:	4a25      	ldr	r2, [pc, #148]	@ (8001794 <HAL_ADC_MspInit+0xdc>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	6313      	str	r3, [r2, #48]	@ 0x30
 8001706:	4b23      	ldr	r3, [pc, #140]	@ (8001794 <HAL_ADC_MspInit+0xdc>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	617b      	str	r3, [r7, #20]
 8001710:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = pedalADC_Pin;
 8001712:	2302      	movs	r3, #2
 8001714:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001716:	2303      	movs	r3, #3
 8001718:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(pedalADC_GPIO_Port, &GPIO_InitStruct);
 800171e:	f107 031c 	add.w	r3, r7, #28
 8001722:	4619      	mov	r1, r3
 8001724:	481c      	ldr	r0, [pc, #112]	@ (8001798 <HAL_ADC_MspInit+0xe0>)
 8001726:	f001 f965 	bl	80029f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800172a:	e02c      	b.n	8001786 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a1a      	ldr	r2, [pc, #104]	@ (800179c <HAL_ADC_MspInit+0xe4>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d127      	bne.n	8001786 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	613b      	str	r3, [r7, #16]
 800173a:	4b16      	ldr	r3, [pc, #88]	@ (8001794 <HAL_ADC_MspInit+0xdc>)
 800173c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800173e:	4a15      	ldr	r2, [pc, #84]	@ (8001794 <HAL_ADC_MspInit+0xdc>)
 8001740:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001744:	6453      	str	r3, [r2, #68]	@ 0x44
 8001746:	4b13      	ldr	r3, [pc, #76]	@ (8001794 <HAL_ADC_MspInit+0xdc>)
 8001748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800174a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800174e:	613b      	str	r3, [r7, #16]
 8001750:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	4b0f      	ldr	r3, [pc, #60]	@ (8001794 <HAL_ADC_MspInit+0xdc>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175a:	4a0e      	ldr	r2, [pc, #56]	@ (8001794 <HAL_ADC_MspInit+0xdc>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6313      	str	r3, [r2, #48]	@ 0x30
 8001762:	4b0c      	ldr	r3, [pc, #48]	@ (8001794 <HAL_ADC_MspInit+0xdc>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = regenADC_Pin;
 800176e:	2304      	movs	r3, #4
 8001770:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001772:	2303      	movs	r3, #3
 8001774:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(regenADC_GPIO_Port, &GPIO_InitStruct);
 800177a:	f107 031c 	add.w	r3, r7, #28
 800177e:	4619      	mov	r1, r3
 8001780:	4805      	ldr	r0, [pc, #20]	@ (8001798 <HAL_ADC_MspInit+0xe0>)
 8001782:	f001 f937 	bl	80029f4 <HAL_GPIO_Init>
}
 8001786:	bf00      	nop
 8001788:	3730      	adds	r7, #48	@ 0x30
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40012000 	.word	0x40012000
 8001794:	40023800 	.word	0x40023800
 8001798:	40020000 	.word	0x40020000
 800179c:	40012100 	.word	0x40012100

080017a0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b08a      	sub	sp, #40	@ 0x28
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a8:	f107 0314 	add.w	r3, r7, #20
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]
 80017b6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a19      	ldr	r2, [pc, #100]	@ (8001824 <HAL_CAN_MspInit+0x84>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d12c      	bne.n	800181c <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	613b      	str	r3, [r7, #16]
 80017c6:	4b18      	ldr	r3, [pc, #96]	@ (8001828 <HAL_CAN_MspInit+0x88>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ca:	4a17      	ldr	r2, [pc, #92]	@ (8001828 <HAL_CAN_MspInit+0x88>)
 80017cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80017d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80017d2:	4b15      	ldr	r3, [pc, #84]	@ (8001828 <HAL_CAN_MspInit+0x88>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017da:	613b      	str	r3, [r7, #16]
 80017dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	4b11      	ldr	r3, [pc, #68]	@ (8001828 <HAL_CAN_MspInit+0x88>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e6:	4a10      	ldr	r2, [pc, #64]	@ (8001828 <HAL_CAN_MspInit+0x88>)
 80017e8:	f043 0302 	orr.w	r3, r3, #2
 80017ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001828 <HAL_CAN_MspInit+0x88>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = canRX_Pin|canTX_Pin;
 80017fa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80017fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001800:	2302      	movs	r3, #2
 8001802:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001808:	2303      	movs	r3, #3
 800180a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800180c:	2309      	movs	r3, #9
 800180e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001810:	f107 0314 	add.w	r3, r7, #20
 8001814:	4619      	mov	r1, r3
 8001816:	4805      	ldr	r0, [pc, #20]	@ (800182c <HAL_CAN_MspInit+0x8c>)
 8001818:	f001 f8ec 	bl	80029f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800181c:	bf00      	nop
 800181e:	3728      	adds	r7, #40	@ 0x28
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40006400 	.word	0x40006400
 8001828:	40023800 	.word	0x40023800
 800182c:	40020400 	.word	0x40020400

08001830 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08a      	sub	sp, #40	@ 0x28
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	f107 0314 	add.w	r3, r7, #20
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a17      	ldr	r2, [pc, #92]	@ (80018ac <HAL_DAC_MspInit+0x7c>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d127      	bne.n	80018a2 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	613b      	str	r3, [r7, #16]
 8001856:	4b16      	ldr	r3, [pc, #88]	@ (80018b0 <HAL_DAC_MspInit+0x80>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185a:	4a15      	ldr	r2, [pc, #84]	@ (80018b0 <HAL_DAC_MspInit+0x80>)
 800185c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001860:	6413      	str	r3, [r2, #64]	@ 0x40
 8001862:	4b13      	ldr	r3, [pc, #76]	@ (80018b0 <HAL_DAC_MspInit+0x80>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001866:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800186a:	613b      	str	r3, [r7, #16]
 800186c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	4b0f      	ldr	r3, [pc, #60]	@ (80018b0 <HAL_DAC_MspInit+0x80>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001876:	4a0e      	ldr	r2, [pc, #56]	@ (80018b0 <HAL_DAC_MspInit+0x80>)
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	6313      	str	r3, [r2, #48]	@ 0x30
 800187e:	4b0c      	ldr	r3, [pc, #48]	@ (80018b0 <HAL_DAC_MspInit+0x80>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = pedalDAC_Pin|regenDAC_Pin;
 800188a:	2330      	movs	r3, #48	@ 0x30
 800188c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800188e:	2303      	movs	r3, #3
 8001890:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001896:	f107 0314 	add.w	r3, r7, #20
 800189a:	4619      	mov	r1, r3
 800189c:	4805      	ldr	r0, [pc, #20]	@ (80018b4 <HAL_DAC_MspInit+0x84>)
 800189e:	f001 f8a9 	bl	80029f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80018a2:	bf00      	nop
 80018a4:	3728      	adds	r7, #40	@ 0x28
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40007400 	.word	0x40007400
 80018b0:	40023800 	.word	0x40023800
 80018b4:	40020000 	.word	0x40020000

080018b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018bc:	bf00      	nop
 80018be:	e7fd      	b.n	80018bc <NMI_Handler+0x4>

080018c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018c4:	bf00      	nop
 80018c6:	e7fd      	b.n	80018c4 <HardFault_Handler+0x4>

080018c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018cc:	bf00      	nop
 80018ce:	e7fd      	b.n	80018cc <MemManage_Handler+0x4>

080018d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018d4:	bf00      	nop
 80018d6:	e7fd      	b.n	80018d4 <BusFault_Handler+0x4>

080018d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018dc:	bf00      	nop
 80018de:	e7fd      	b.n	80018dc <UsageFault_Handler+0x4>

080018e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001900:	bf00      	nop
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr

0800190a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800190e:	f000 f8d1 	bl	8001ab4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
	...

08001918 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800191c:	4802      	ldr	r0, [pc, #8]	@ (8001928 <OTG_FS_IRQHandler+0x10>)
 800191e:	f001 fb86 	bl	800302e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20001784 	.word	0x20001784

0800192c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001934:	4a14      	ldr	r2, [pc, #80]	@ (8001988 <_sbrk+0x5c>)
 8001936:	4b15      	ldr	r3, [pc, #84]	@ (800198c <_sbrk+0x60>)
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001940:	4b13      	ldr	r3, [pc, #76]	@ (8001990 <_sbrk+0x64>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d102      	bne.n	800194e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001948:	4b11      	ldr	r3, [pc, #68]	@ (8001990 <_sbrk+0x64>)
 800194a:	4a12      	ldr	r2, [pc, #72]	@ (8001994 <_sbrk+0x68>)
 800194c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800194e:	4b10      	ldr	r3, [pc, #64]	@ (8001990 <_sbrk+0x64>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4413      	add	r3, r2
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	429a      	cmp	r2, r3
 800195a:	d207      	bcs.n	800196c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800195c:	f007 fa68 	bl	8008e30 <__errno>
 8001960:	4603      	mov	r3, r0
 8001962:	220c      	movs	r2, #12
 8001964:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001966:	f04f 33ff 	mov.w	r3, #4294967295
 800196a:	e009      	b.n	8001980 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800196c:	4b08      	ldr	r3, [pc, #32]	@ (8001990 <_sbrk+0x64>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001972:	4b07      	ldr	r3, [pc, #28]	@ (8001990 <_sbrk+0x64>)
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4413      	add	r3, r2
 800197a:	4a05      	ldr	r2, [pc, #20]	@ (8001990 <_sbrk+0x64>)
 800197c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800197e:	68fb      	ldr	r3, [r7, #12]
}
 8001980:	4618      	mov	r0, r3
 8001982:	3718      	adds	r7, #24
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	20020000 	.word	0x20020000
 800198c:	00000400 	.word	0x00000400
 8001990:	2000029c 	.word	0x2000029c
 8001994:	20001ff8 	.word	0x20001ff8

08001998 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800199c:	4b06      	ldr	r3, [pc, #24]	@ (80019b8 <SystemInit+0x20>)
 800199e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019a2:	4a05      	ldr	r2, [pc, #20]	@ (80019b8 <SystemInit+0x20>)
 80019a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80019bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019c0:	480d      	ldr	r0, [pc, #52]	@ (80019f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019c2:	490e      	ldr	r1, [pc, #56]	@ (80019fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019c4:	4a0e      	ldr	r2, [pc, #56]	@ (8001a00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019c8:	e002      	b.n	80019d0 <LoopCopyDataInit>

080019ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ce:	3304      	adds	r3, #4

080019d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019d4:	d3f9      	bcc.n	80019ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019d6:	4a0b      	ldr	r2, [pc, #44]	@ (8001a04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019d8:	4c0b      	ldr	r4, [pc, #44]	@ (8001a08 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019dc:	e001      	b.n	80019e2 <LoopFillZerobss>

080019de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019e0:	3204      	adds	r2, #4

080019e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019e4:	d3fb      	bcc.n	80019de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019e6:	f7ff ffd7 	bl	8001998 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ea:	f007 fa27 	bl	8008e3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ee:	f7fe fdbf 	bl	8000570 <main>
  bx  lr    
 80019f2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80019f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019fc:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8001a00:	080098bc 	.word	0x080098bc
  ldr r2, =_sbss
 8001a04:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8001a08:	20001ff8 	.word	0x20001ff8

08001a0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a0c:	e7fe      	b.n	8001a0c <ADC_IRQHandler>
	...

08001a10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a14:	4b0e      	ldr	r3, [pc, #56]	@ (8001a50 <HAL_Init+0x40>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a0d      	ldr	r2, [pc, #52]	@ (8001a50 <HAL_Init+0x40>)
 8001a1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a20:	4b0b      	ldr	r3, [pc, #44]	@ (8001a50 <HAL_Init+0x40>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a0a      	ldr	r2, [pc, #40]	@ (8001a50 <HAL_Init+0x40>)
 8001a26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a2c:	4b08      	ldr	r3, [pc, #32]	@ (8001a50 <HAL_Init+0x40>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a07      	ldr	r2, [pc, #28]	@ (8001a50 <HAL_Init+0x40>)
 8001a32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a38:	2003      	movs	r0, #3
 8001a3a:	f000 feb1 	bl	80027a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a3e:	2000      	movs	r0, #0
 8001a40:	f000 f808 	bl	8001a54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a44:	f7ff fe10 	bl	8001668 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40023c00 	.word	0x40023c00

08001a54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a5c:	4b12      	ldr	r3, [pc, #72]	@ (8001aa8 <HAL_InitTick+0x54>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	4b12      	ldr	r3, [pc, #72]	@ (8001aac <HAL_InitTick+0x58>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	4619      	mov	r1, r3
 8001a66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a72:	4618      	mov	r0, r3
 8001a74:	f000 fec9 	bl	800280a <HAL_SYSTICK_Config>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e00e      	b.n	8001aa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2b0f      	cmp	r3, #15
 8001a86:	d80a      	bhi.n	8001a9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	6879      	ldr	r1, [r7, #4]
 8001a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a90:	f000 fe91 	bl	80027b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a94:	4a06      	ldr	r2, [pc, #24]	@ (8001ab0 <HAL_InitTick+0x5c>)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	e000      	b.n	8001aa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	20000000 	.word	0x20000000
 8001aac:	20000008 	.word	0x20000008
 8001ab0:	20000004 	.word	0x20000004

08001ab4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ab8:	4b06      	ldr	r3, [pc, #24]	@ (8001ad4 <HAL_IncTick+0x20>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	461a      	mov	r2, r3
 8001abe:	4b06      	ldr	r3, [pc, #24]	@ (8001ad8 <HAL_IncTick+0x24>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	4a04      	ldr	r2, [pc, #16]	@ (8001ad8 <HAL_IncTick+0x24>)
 8001ac6:	6013      	str	r3, [r2, #0]
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	20000008 	.word	0x20000008
 8001ad8:	200002a0 	.word	0x200002a0

08001adc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  return uwTick;
 8001ae0:	4b03      	ldr	r3, [pc, #12]	@ (8001af0 <HAL_GetTick+0x14>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	200002a0 	.word	0x200002a0

08001af4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001afc:	f7ff ffee 	bl	8001adc <HAL_GetTick>
 8001b00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b0c:	d005      	beq.n	8001b1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b38 <HAL_Delay+0x44>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	461a      	mov	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	4413      	add	r3, r2
 8001b18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b1a:	bf00      	nop
 8001b1c:	f7ff ffde 	bl	8001adc <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d8f7      	bhi.n	8001b1c <HAL_Delay+0x28>
  {
  }
}
 8001b2c:	bf00      	nop
 8001b2e:	bf00      	nop
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	20000008 	.word	0x20000008

08001b3c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b44:	2300      	movs	r3, #0
 8001b46:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e033      	b.n	8001bba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d109      	bne.n	8001b6e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7ff fdac 	bl	80016b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b72:	f003 0310 	and.w	r3, r3, #16
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d118      	bne.n	8001bac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001b82:	f023 0302 	bic.w	r3, r3, #2
 8001b86:	f043 0202 	orr.w	r2, r3, #2
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f000 fa1a 	bl	8001fc8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9e:	f023 0303 	bic.w	r3, r3, #3
 8001ba2:	f043 0201 	orr.w	r2, r3, #1
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	641a      	str	r2, [r3, #64]	@ 0x40
 8001baa:	e001      	b.n	8001bb0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
	...

08001bc4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d101      	bne.n	8001bde <HAL_ADC_Start+0x1a>
 8001bda:	2302      	movs	r3, #2
 8001bdc:	e0b2      	b.n	8001d44 <HAL_ADC_Start+0x180>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2201      	movs	r2, #1
 8001be2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f003 0301 	and.w	r3, r3, #1
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d018      	beq.n	8001c26 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	689a      	ldr	r2, [r3, #8]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f042 0201 	orr.w	r2, r2, #1
 8001c02:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c04:	4b52      	ldr	r3, [pc, #328]	@ (8001d50 <HAL_ADC_Start+0x18c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a52      	ldr	r2, [pc, #328]	@ (8001d54 <HAL_ADC_Start+0x190>)
 8001c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c0e:	0c9a      	lsrs	r2, r3, #18
 8001c10:	4613      	mov	r3, r2
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	4413      	add	r3, r2
 8001c16:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001c18:	e002      	b.n	8001c20 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1f9      	bne.n	8001c1a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d17a      	bne.n	8001d2a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c38:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001c3c:	f023 0301 	bic.w	r3, r3, #1
 8001c40:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d007      	beq.n	8001c66 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001c5e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c72:	d106      	bne.n	8001c82 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c78:	f023 0206 	bic.w	r2, r3, #6
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	645a      	str	r2, [r3, #68]	@ 0x44
 8001c80:	e002      	b.n	8001c88 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	645a      	str	r2, [r3, #68]	@ 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c90:	4b31      	ldr	r3, [pc, #196]	@ (8001d58 <HAL_ADC_Start+0x194>)
 8001c92:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001c9c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f003 031f 	and.w	r3, r3, #31
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d12a      	bne.n	8001d00 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a2b      	ldr	r2, [pc, #172]	@ (8001d5c <HAL_ADC_Start+0x198>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d015      	beq.n	8001ce0 <HAL_ADC_Start+0x11c>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a29      	ldr	r2, [pc, #164]	@ (8001d60 <HAL_ADC_Start+0x19c>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d105      	bne.n	8001cca <HAL_ADC_Start+0x106>
 8001cbe:	4b26      	ldr	r3, [pc, #152]	@ (8001d58 <HAL_ADC_Start+0x194>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f003 031f 	and.w	r3, r3, #31
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d00a      	beq.n	8001ce0 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a25      	ldr	r2, [pc, #148]	@ (8001d64 <HAL_ADC_Start+0x1a0>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d136      	bne.n	8001d42 <HAL_ADC_Start+0x17e>
 8001cd4:	4b20      	ldr	r3, [pc, #128]	@ (8001d58 <HAL_ADC_Start+0x194>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f003 0310 	and.w	r3, r3, #16
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d130      	bne.n	8001d42 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d129      	bne.n	8001d42 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001cfc:	609a      	str	r2, [r3, #8]
 8001cfe:	e020      	b.n	8001d42 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a15      	ldr	r2, [pc, #84]	@ (8001d5c <HAL_ADC_Start+0x198>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d11b      	bne.n	8001d42 <HAL_ADC_Start+0x17e>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d114      	bne.n	8001d42 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	689a      	ldr	r2, [r3, #8]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001d26:	609a      	str	r2, [r3, #8]
 8001d28:	e00b      	b.n	8001d42 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2e:	f043 0210 	orr.w	r2, r3, #16
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d3a:	f043 0201 	orr.w	r2, r3, #1
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	20000000 	.word	0x20000000
 8001d54:	431bde83 	.word	0x431bde83
 8001d58:	40012300 	.word	0x40012300
 8001d5c:	40012000 	.word	0x40012000
 8001d60:	40012100 	.word	0x40012100
 8001d64:	40012200 	.word	0x40012200

08001d68 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
	...

08001d84 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d101      	bne.n	8001da0 <HAL_ADC_ConfigChannel+0x1c>
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	e105      	b.n	8001fac <HAL_ADC_ConfigChannel+0x228>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2b09      	cmp	r3, #9
 8001dae:	d925      	bls.n	8001dfc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68d9      	ldr	r1, [r3, #12]
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	4413      	add	r3, r2
 8001dc4:	3b1e      	subs	r3, #30
 8001dc6:	2207      	movs	r2, #7
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	43da      	mvns	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	400a      	ands	r2, r1
 8001dd4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68d9      	ldr	r1, [r3, #12]
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	689a      	ldr	r2, [r3, #8]
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	4618      	mov	r0, r3
 8001de8:	4603      	mov	r3, r0
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	4403      	add	r3, r0
 8001dee:	3b1e      	subs	r3, #30
 8001df0:	409a      	lsls	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	430a      	orrs	r2, r1
 8001df8:	60da      	str	r2, [r3, #12]
 8001dfa:	e022      	b.n	8001e42 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6919      	ldr	r1, [r3, #16]
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	461a      	mov	r2, r3
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	4413      	add	r3, r2
 8001e10:	2207      	movs	r2, #7
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43da      	mvns	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	400a      	ands	r2, r1
 8001e1e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6919      	ldr	r1, [r3, #16]
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	689a      	ldr	r2, [r3, #8]
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	4618      	mov	r0, r3
 8001e32:	4603      	mov	r3, r0
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	4403      	add	r3, r0
 8001e38:	409a      	lsls	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	2b06      	cmp	r3, #6
 8001e48:	d824      	bhi.n	8001e94 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	4613      	mov	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4413      	add	r3, r2
 8001e5a:	3b05      	subs	r3, #5
 8001e5c:	221f      	movs	r2, #31
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43da      	mvns	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	400a      	ands	r2, r1
 8001e6a:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	4618      	mov	r0, r3
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685a      	ldr	r2, [r3, #4]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4413      	add	r3, r2
 8001e84:	3b05      	subs	r3, #5
 8001e86:	fa00 f203 	lsl.w	r2, r0, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e92:	e04c      	b.n	8001f2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	2b0c      	cmp	r3, #12
 8001e9a:	d824      	bhi.n	8001ee6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685a      	ldr	r2, [r3, #4]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4413      	add	r3, r2
 8001eac:	3b23      	subs	r3, #35	@ 0x23
 8001eae:	221f      	movs	r2, #31
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	43da      	mvns	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	400a      	ands	r2, r1
 8001ebc:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	4618      	mov	r0, r3
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	4413      	add	r3, r2
 8001ed6:	3b23      	subs	r3, #35	@ 0x23
 8001ed8:	fa00 f203 	lsl.w	r2, r0, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ee4:	e023      	b.n	8001f2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685a      	ldr	r2, [r3, #4]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4413      	add	r3, r2
 8001ef6:	3b41      	subs	r3, #65	@ 0x41
 8001ef8:	221f      	movs	r2, #31
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43da      	mvns	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	400a      	ands	r2, r1
 8001f06:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	4618      	mov	r0, r3
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685a      	ldr	r2, [r3, #4]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4413      	add	r3, r2
 8001f20:	3b41      	subs	r3, #65	@ 0x41
 8001f22:	fa00 f203 	lsl.w	r2, r0, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f2e:	4b22      	ldr	r3, [pc, #136]	@ (8001fb8 <HAL_ADC_ConfigChannel+0x234>)
 8001f30:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a21      	ldr	r2, [pc, #132]	@ (8001fbc <HAL_ADC_ConfigChannel+0x238>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d109      	bne.n	8001f50 <HAL_ADC_ConfigChannel+0x1cc>
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2b12      	cmp	r3, #18
 8001f42:	d105      	bne.n	8001f50 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a19      	ldr	r2, [pc, #100]	@ (8001fbc <HAL_ADC_ConfigChannel+0x238>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d123      	bne.n	8001fa2 <HAL_ADC_ConfigChannel+0x21e>
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2b10      	cmp	r3, #16
 8001f60:	d003      	beq.n	8001f6a <HAL_ADC_ConfigChannel+0x1e6>
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2b11      	cmp	r3, #17
 8001f68:	d11b      	bne.n	8001fa2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2b10      	cmp	r3, #16
 8001f7c:	d111      	bne.n	8001fa2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f7e:	4b10      	ldr	r3, [pc, #64]	@ (8001fc0 <HAL_ADC_ConfigChannel+0x23c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a10      	ldr	r2, [pc, #64]	@ (8001fc4 <HAL_ADC_ConfigChannel+0x240>)
 8001f84:	fba2 2303 	umull	r2, r3, r2, r3
 8001f88:	0c9a      	lsrs	r2, r3, #18
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f94:	e002      	b.n	8001f9c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f9      	bne.n	8001f96 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3714      	adds	r7, #20
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	40012300 	.word	0x40012300
 8001fbc:	40012000 	.word	0x40012000
 8001fc0:	20000000 	.word	0x20000000
 8001fc4:	431bde83 	.word	0x431bde83

08001fc8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fd0:	4b79      	ldr	r3, [pc, #484]	@ (80021b8 <ADC_Init+0x1f0>)
 8001fd2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ffc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	6859      	ldr	r1, [r3, #4]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	021a      	lsls	r2, r3, #8
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	430a      	orrs	r2, r1
 8002010:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002020:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6859      	ldr	r1, [r3, #4]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689a      	ldr	r2, [r3, #8]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	430a      	orrs	r2, r1
 8002032:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	689a      	ldr	r2, [r3, #8]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002042:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6899      	ldr	r1, [r3, #8]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	68da      	ldr	r2, [r3, #12]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	430a      	orrs	r2, r1
 8002054:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800205a:	4a58      	ldr	r2, [pc, #352]	@ (80021bc <ADC_Init+0x1f4>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d022      	beq.n	80020a6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	689a      	ldr	r2, [r3, #8]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800206e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6899      	ldr	r1, [r3, #8]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	430a      	orrs	r2, r1
 8002080:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002090:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6899      	ldr	r1, [r3, #8]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	430a      	orrs	r2, r1
 80020a2:	609a      	str	r2, [r3, #8]
 80020a4:	e00f      	b.n	80020c6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	689a      	ldr	r2, [r3, #8]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80020b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80020c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 0202 	bic.w	r2, r2, #2
 80020d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	6899      	ldr	r1, [r3, #8]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	7e1b      	ldrb	r3, [r3, #24]
 80020e0:	005a      	lsls	r2, r3, #1
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	430a      	orrs	r2, r1
 80020e8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d01b      	beq.n	800212c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	685a      	ldr	r2, [r3, #4]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002102:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	685a      	ldr	r2, [r3, #4]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002112:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6859      	ldr	r1, [r3, #4]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800211e:	3b01      	subs	r3, #1
 8002120:	035a      	lsls	r2, r3, #13
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	430a      	orrs	r2, r1
 8002128:	605a      	str	r2, [r3, #4]
 800212a:	e007      	b.n	800213c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	685a      	ldr	r2, [r3, #4]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800213a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800214a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	3b01      	subs	r3, #1
 8002158:	051a      	lsls	r2, r3, #20
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	430a      	orrs	r2, r1
 8002160:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002170:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6899      	ldr	r1, [r3, #8]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800217e:	025a      	lsls	r2, r3, #9
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	430a      	orrs	r2, r1
 8002186:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	689a      	ldr	r2, [r3, #8]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002196:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6899      	ldr	r1, [r3, #8]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	029a      	lsls	r2, r3, #10
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	430a      	orrs	r2, r1
 80021aa:	609a      	str	r2, [r3, #8]
}
 80021ac:	bf00      	nop
 80021ae:	3714      	adds	r7, #20
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr
 80021b8:	40012300 	.word	0x40012300
 80021bc:	0f000001 	.word	0x0f000001

080021c0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e0ed      	b.n	80023ae <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d102      	bne.n	80021e4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7ff fade 	bl	80017a0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f042 0201 	orr.w	r2, r2, #1
 80021f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021f4:	f7ff fc72 	bl	8001adc <HAL_GetTick>
 80021f8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80021fa:	e012      	b.n	8002222 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021fc:	f7ff fc6e 	bl	8001adc <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b0a      	cmp	r3, #10
 8002208:	d90b      	bls.n	8002222 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800220e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2205      	movs	r2, #5
 800221a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e0c5      	b.n	80023ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	2b00      	cmp	r3, #0
 800222e:	d0e5      	beq.n	80021fc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 0202 	bic.w	r2, r2, #2
 800223e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002240:	f7ff fc4c 	bl	8001adc <HAL_GetTick>
 8002244:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002246:	e012      	b.n	800226e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002248:	f7ff fc48 	bl	8001adc <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b0a      	cmp	r3, #10
 8002254:	d90b      	bls.n	800226e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800225a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2205      	movs	r2, #5
 8002266:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e09f      	b.n	80023ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d1e5      	bne.n	8002248 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	7e1b      	ldrb	r3, [r3, #24]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d108      	bne.n	8002296 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	e007      	b.n	80022a6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	7e5b      	ldrb	r3, [r3, #25]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d108      	bne.n	80022c0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	e007      	b.n	80022d0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80022ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	7e9b      	ldrb	r3, [r3, #26]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d108      	bne.n	80022ea <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f042 0220 	orr.w	r2, r2, #32
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	e007      	b.n	80022fa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 0220 	bic.w	r2, r2, #32
 80022f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	7edb      	ldrb	r3, [r3, #27]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d108      	bne.n	8002314 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f022 0210 	bic.w	r2, r2, #16
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	e007      	b.n	8002324 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f042 0210 	orr.w	r2, r2, #16
 8002322:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	7f1b      	ldrb	r3, [r3, #28]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d108      	bne.n	800233e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f042 0208 	orr.w	r2, r2, #8
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	e007      	b.n	800234e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f022 0208 	bic.w	r2, r2, #8
 800234c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	7f5b      	ldrb	r3, [r3, #29]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d108      	bne.n	8002368 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f042 0204 	orr.w	r2, r2, #4
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	e007      	b.n	8002378 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 0204 	bic.w	r2, r2, #4
 8002376:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	431a      	orrs	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	431a      	orrs	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	695b      	ldr	r3, [r3, #20]
 800238c:	ea42 0103 	orr.w	r1, r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	1e5a      	subs	r2, r3, #1
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	430a      	orrs	r2, r1
 800239c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
	...

080023b8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b087      	sub	sp, #28
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023ce:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80023d0:	7cfb      	ldrb	r3, [r7, #19]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d003      	beq.n	80023de <HAL_CAN_ConfigFilter+0x26>
 80023d6:	7cfb      	ldrb	r3, [r7, #19]
 80023d8:	2b02      	cmp	r3, #2
 80023da:	f040 80be 	bne.w	800255a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80023de:	4b65      	ldr	r3, [pc, #404]	@ (8002574 <HAL_CAN_ConfigFilter+0x1bc>)
 80023e0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80023e8:	f043 0201 	orr.w	r2, r3, #1
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80023f8:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800240c:	021b      	lsls	r3, r3, #8
 800240e:	431a      	orrs	r2, r3
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	f003 031f 	and.w	r3, r3, #31
 800241e:	2201      	movs	r2, #1
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	43db      	mvns	r3, r3
 8002430:	401a      	ands	r2, r3
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	69db      	ldr	r3, [r3, #28]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d123      	bne.n	8002488 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	43db      	mvns	r3, r3
 800244a:	401a      	ands	r2, r3
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002462:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	3248      	adds	r2, #72	@ 0x48
 8002468:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800247c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800247e:	6979      	ldr	r1, [r7, #20]
 8002480:	3348      	adds	r3, #72	@ 0x48
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	440b      	add	r3, r1
 8002486:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	69db      	ldr	r3, [r3, #28]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d122      	bne.n	80024d6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	431a      	orrs	r2, r3
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80024b0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	3248      	adds	r2, #72	@ 0x48
 80024b6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80024ca:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80024cc:	6979      	ldr	r1, [r7, #20]
 80024ce:	3348      	adds	r3, #72	@ 0x48
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	440b      	add	r3, r1
 80024d4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d109      	bne.n	80024f2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	43db      	mvns	r3, r3
 80024e8:	401a      	ands	r2, r3
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80024f0:	e007      	b.n	8002502 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	431a      	orrs	r2, r3
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d109      	bne.n	800251e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	43db      	mvns	r3, r3
 8002514:	401a      	ands	r2, r3
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800251c:	e007      	b.n	800252e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	431a      	orrs	r2, r3
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	6a1b      	ldr	r3, [r3, #32]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d107      	bne.n	8002546 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	431a      	orrs	r2, r3
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800254c:	f023 0201 	bic.w	r2, r3, #1
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002556:	2300      	movs	r3, #0
 8002558:	e006      	b.n	8002568 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800255e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
  }
}
 8002568:	4618      	mov	r0, r3
 800256a:	371c      	adds	r7, #28
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	40006400 	.word	0x40006400

08002578 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b01      	cmp	r3, #1
 800258a:	d12e      	bne.n	80025ea <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2202      	movs	r2, #2
 8002590:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f022 0201 	bic.w	r2, r2, #1
 80025a2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80025a4:	f7ff fa9a 	bl	8001adc <HAL_GetTick>
 80025a8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80025aa:	e012      	b.n	80025d2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80025ac:	f7ff fa96 	bl	8001adc <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b0a      	cmp	r3, #10
 80025b8:	d90b      	bls.n	80025d2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025be:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2205      	movs	r2, #5
 80025ca:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e012      	b.n	80025f8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1e5      	bne.n	80025ac <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80025e6:	2300      	movs	r3, #0
 80025e8:	e006      	b.n	80025f8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ee:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
  }
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002610:	4b0c      	ldr	r3, [pc, #48]	@ (8002644 <__NVIC_SetPriorityGrouping+0x44>)
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002616:	68ba      	ldr	r2, [r7, #8]
 8002618:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800261c:	4013      	ands	r3, r2
 800261e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002628:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800262c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002632:	4a04      	ldr	r2, [pc, #16]	@ (8002644 <__NVIC_SetPriorityGrouping+0x44>)
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	60d3      	str	r3, [r2, #12]
}
 8002638:	bf00      	nop
 800263a:	3714      	adds	r7, #20
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	e000ed00 	.word	0xe000ed00

08002648 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800264c:	4b04      	ldr	r3, [pc, #16]	@ (8002660 <__NVIC_GetPriorityGrouping+0x18>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	0a1b      	lsrs	r3, r3, #8
 8002652:	f003 0307 	and.w	r3, r3, #7
}
 8002656:	4618      	mov	r0, r3
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	e000ed00 	.word	0xe000ed00

08002664 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	4603      	mov	r3, r0
 800266c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800266e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002672:	2b00      	cmp	r3, #0
 8002674:	db0b      	blt.n	800268e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002676:	79fb      	ldrb	r3, [r7, #7]
 8002678:	f003 021f 	and.w	r2, r3, #31
 800267c:	4907      	ldr	r1, [pc, #28]	@ (800269c <__NVIC_EnableIRQ+0x38>)
 800267e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002682:	095b      	lsrs	r3, r3, #5
 8002684:	2001      	movs	r0, #1
 8002686:	fa00 f202 	lsl.w	r2, r0, r2
 800268a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800268e:	bf00      	nop
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	e000e100 	.word	0xe000e100

080026a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	4603      	mov	r3, r0
 80026a8:	6039      	str	r1, [r7, #0]
 80026aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	db0a      	blt.n	80026ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	b2da      	uxtb	r2, r3
 80026b8:	490c      	ldr	r1, [pc, #48]	@ (80026ec <__NVIC_SetPriority+0x4c>)
 80026ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026be:	0112      	lsls	r2, r2, #4
 80026c0:	b2d2      	uxtb	r2, r2
 80026c2:	440b      	add	r3, r1
 80026c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026c8:	e00a      	b.n	80026e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	b2da      	uxtb	r2, r3
 80026ce:	4908      	ldr	r1, [pc, #32]	@ (80026f0 <__NVIC_SetPriority+0x50>)
 80026d0:	79fb      	ldrb	r3, [r7, #7]
 80026d2:	f003 030f 	and.w	r3, r3, #15
 80026d6:	3b04      	subs	r3, #4
 80026d8:	0112      	lsls	r2, r2, #4
 80026da:	b2d2      	uxtb	r2, r2
 80026dc:	440b      	add	r3, r1
 80026de:	761a      	strb	r2, [r3, #24]
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr
 80026ec:	e000e100 	.word	0xe000e100
 80026f0:	e000ed00 	.word	0xe000ed00

080026f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b089      	sub	sp, #36	@ 0x24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f1c3 0307 	rsb	r3, r3, #7
 800270e:	2b04      	cmp	r3, #4
 8002710:	bf28      	it	cs
 8002712:	2304      	movcs	r3, #4
 8002714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	3304      	adds	r3, #4
 800271a:	2b06      	cmp	r3, #6
 800271c:	d902      	bls.n	8002724 <NVIC_EncodePriority+0x30>
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	3b03      	subs	r3, #3
 8002722:	e000      	b.n	8002726 <NVIC_EncodePriority+0x32>
 8002724:	2300      	movs	r3, #0
 8002726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002728:	f04f 32ff 	mov.w	r2, #4294967295
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	43da      	mvns	r2, r3
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	401a      	ands	r2, r3
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800273c:	f04f 31ff 	mov.w	r1, #4294967295
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	fa01 f303 	lsl.w	r3, r1, r3
 8002746:	43d9      	mvns	r1, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800274c:	4313      	orrs	r3, r2
         );
}
 800274e:	4618      	mov	r0, r3
 8002750:	3724      	adds	r7, #36	@ 0x24
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
	...

0800275c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3b01      	subs	r3, #1
 8002768:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800276c:	d301      	bcc.n	8002772 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800276e:	2301      	movs	r3, #1
 8002770:	e00f      	b.n	8002792 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002772:	4a0a      	ldr	r2, [pc, #40]	@ (800279c <SysTick_Config+0x40>)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3b01      	subs	r3, #1
 8002778:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800277a:	210f      	movs	r1, #15
 800277c:	f04f 30ff 	mov.w	r0, #4294967295
 8002780:	f7ff ff8e 	bl	80026a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002784:	4b05      	ldr	r3, [pc, #20]	@ (800279c <SysTick_Config+0x40>)
 8002786:	2200      	movs	r2, #0
 8002788:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800278a:	4b04      	ldr	r3, [pc, #16]	@ (800279c <SysTick_Config+0x40>)
 800278c:	2207      	movs	r2, #7
 800278e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	e000e010 	.word	0xe000e010

080027a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f7ff ff29 	bl	8002600 <__NVIC_SetPriorityGrouping>
}
 80027ae:	bf00      	nop
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b086      	sub	sp, #24
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	4603      	mov	r3, r0
 80027be:	60b9      	str	r1, [r7, #8]
 80027c0:	607a      	str	r2, [r7, #4]
 80027c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027c4:	2300      	movs	r3, #0
 80027c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027c8:	f7ff ff3e 	bl	8002648 <__NVIC_GetPriorityGrouping>
 80027cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	68b9      	ldr	r1, [r7, #8]
 80027d2:	6978      	ldr	r0, [r7, #20]
 80027d4:	f7ff ff8e 	bl	80026f4 <NVIC_EncodePriority>
 80027d8:	4602      	mov	r2, r0
 80027da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027de:	4611      	mov	r1, r2
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff ff5d 	bl	80026a0 <__NVIC_SetPriority>
}
 80027e6:	bf00      	nop
 80027e8:	3718      	adds	r7, #24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b082      	sub	sp, #8
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	4603      	mov	r3, r0
 80027f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff ff31 	bl	8002664 <__NVIC_EnableIRQ>
}
 8002802:	bf00      	nop
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b082      	sub	sp, #8
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f7ff ffa2 	bl	800275c <SysTick_Config>
 8002818:	4603      	mov	r3, r0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b082      	sub	sp, #8
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d101      	bne.n	8002834 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e014      	b.n	800285e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	791b      	ldrb	r3, [r3, #4]
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d105      	bne.n	800284a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f7fe fff3 	bl	8001830 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2202      	movs	r2, #2
 800284e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2201      	movs	r2, #1
 800285a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
 800286e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	795b      	ldrb	r3, [r3, #5]
 8002874:	2b01      	cmp	r3, #1
 8002876:	d101      	bne.n	800287c <HAL_DAC_Start+0x16>
 8002878:	2302      	movs	r3, #2
 800287a:	e040      	b.n	80028fe <HAL_DAC_Start+0x98>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2202      	movs	r2, #2
 8002886:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6819      	ldr	r1, [r3, #0]
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	f003 0310 	and.w	r3, r3, #16
 8002894:	2201      	movs	r2, #1
 8002896:	409a      	lsls	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	430a      	orrs	r2, r1
 800289e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10f      	bne.n	80028c6 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 80028b0:	2b3c      	cmp	r3, #60	@ 0x3c
 80028b2:	d11d      	bne.n	80028f0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f042 0201 	orr.w	r2, r2, #1
 80028c2:	605a      	str	r2, [r3, #4]
 80028c4:	e014      	b.n	80028f0 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	f003 0310 	and.w	r3, r3, #16
 80028d6:	213c      	movs	r1, #60	@ 0x3c
 80028d8:	fa01 f303 	lsl.w	r3, r1, r3
 80028dc:	429a      	cmp	r2, r3
 80028de:	d107      	bne.n	80028f0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	685a      	ldr	r2, [r3, #4]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f042 0202 	orr.w	r2, r2, #2
 80028ee:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800290a:	b480      	push	{r7}
 800290c:	b087      	sub	sp, #28
 800290e:	af00      	add	r7, sp, #0
 8002910:	60f8      	str	r0, [r7, #12]
 8002912:	60b9      	str	r1, [r7, #8]
 8002914:	607a      	str	r2, [r7, #4]
 8002916:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002918:	2300      	movs	r3, #0
 800291a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d105      	bne.n	8002934 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4413      	add	r3, r2
 800292e:	3308      	adds	r3, #8
 8002930:	617b      	str	r3, [r7, #20]
 8002932:	e004      	b.n	800293e <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4413      	add	r3, r2
 800293a:	3314      	adds	r3, #20
 800293c:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	461a      	mov	r2, r3
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	371c      	adds	r7, #28
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002954:	b480      	push	{r7}
 8002956:	b087      	sub	sp, #28
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	795b      	ldrb	r3, [r3, #5]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d101      	bne.n	800296c <HAL_DAC_ConfigChannel+0x18>
 8002968:	2302      	movs	r3, #2
 800296a:	e03c      	b.n	80029e6 <HAL_DAC_ConfigChannel+0x92>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2201      	movs	r2, #1
 8002970:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2202      	movs	r2, #2
 8002976:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f003 0310 	and.w	r3, r3, #16
 8002986:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	43db      	mvns	r3, r3
 8002990:	697a      	ldr	r2, [r7, #20]
 8002992:	4013      	ands	r3, r2
 8002994:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	4313      	orrs	r3, r2
 80029a0:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f003 0310 	and.w	r3, r3, #16
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	697a      	ldr	r2, [r7, #20]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	697a      	ldr	r2, [r7, #20]
 80029ba:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6819      	ldr	r1, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f003 0310 	and.w	r3, r3, #16
 80029c8:	22c0      	movs	r2, #192	@ 0xc0
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	43da      	mvns	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	400a      	ands	r2, r1
 80029d6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2201      	movs	r2, #1
 80029dc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	371c      	adds	r7, #28
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
	...

080029f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b089      	sub	sp, #36	@ 0x24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029fe:	2300      	movs	r3, #0
 8002a00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a06:	2300      	movs	r3, #0
 8002a08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	61fb      	str	r3, [r7, #28]
 8002a0e:	e16b      	b.n	8002ce8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a10:	2201      	movs	r2, #1
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	4013      	ands	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	f040 815a 	bne.w	8002ce2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f003 0303 	and.w	r3, r3, #3
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d005      	beq.n	8002a46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d130      	bne.n	8002aa8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	2203      	movs	r2, #3
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	43db      	mvns	r3, r3
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	68da      	ldr	r2, [r3, #12]
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	43db      	mvns	r3, r3
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	091b      	lsrs	r3, r3, #4
 8002a92:	f003 0201 	and.w	r2, r3, #1
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f003 0303 	and.w	r3, r3, #3
 8002ab0:	2b03      	cmp	r3, #3
 8002ab2:	d017      	beq.n	8002ae4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	2203      	movs	r2, #3
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f003 0303 	and.w	r3, r3, #3
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d123      	bne.n	8002b38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	08da      	lsrs	r2, r3, #3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3208      	adds	r2, #8
 8002af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002afc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	220f      	movs	r2, #15
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	4013      	ands	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	691a      	ldr	r2, [r3, #16]
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	08da      	lsrs	r2, r3, #3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	3208      	adds	r2, #8
 8002b32:	69b9      	ldr	r1, [r7, #24]
 8002b34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	2203      	movs	r2, #3
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f003 0203 	and.w	r2, r3, #3
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 80b4 	beq.w	8002ce2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	60fb      	str	r3, [r7, #12]
 8002b7e:	4b60      	ldr	r3, [pc, #384]	@ (8002d00 <HAL_GPIO_Init+0x30c>)
 8002b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b82:	4a5f      	ldr	r2, [pc, #380]	@ (8002d00 <HAL_GPIO_Init+0x30c>)
 8002b84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b88:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b8a:	4b5d      	ldr	r3, [pc, #372]	@ (8002d00 <HAL_GPIO_Init+0x30c>)
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b92:	60fb      	str	r3, [r7, #12]
 8002b94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b96:	4a5b      	ldr	r2, [pc, #364]	@ (8002d04 <HAL_GPIO_Init+0x310>)
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	089b      	lsrs	r3, r3, #2
 8002b9c:	3302      	adds	r3, #2
 8002b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	f003 0303 	and.w	r3, r3, #3
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	220f      	movs	r2, #15
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a52      	ldr	r2, [pc, #328]	@ (8002d08 <HAL_GPIO_Init+0x314>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d02b      	beq.n	8002c1a <HAL_GPIO_Init+0x226>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a51      	ldr	r2, [pc, #324]	@ (8002d0c <HAL_GPIO_Init+0x318>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d025      	beq.n	8002c16 <HAL_GPIO_Init+0x222>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a50      	ldr	r2, [pc, #320]	@ (8002d10 <HAL_GPIO_Init+0x31c>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d01f      	beq.n	8002c12 <HAL_GPIO_Init+0x21e>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a4f      	ldr	r2, [pc, #316]	@ (8002d14 <HAL_GPIO_Init+0x320>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d019      	beq.n	8002c0e <HAL_GPIO_Init+0x21a>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a4e      	ldr	r2, [pc, #312]	@ (8002d18 <HAL_GPIO_Init+0x324>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d013      	beq.n	8002c0a <HAL_GPIO_Init+0x216>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a4d      	ldr	r2, [pc, #308]	@ (8002d1c <HAL_GPIO_Init+0x328>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d00d      	beq.n	8002c06 <HAL_GPIO_Init+0x212>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a4c      	ldr	r2, [pc, #304]	@ (8002d20 <HAL_GPIO_Init+0x32c>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d007      	beq.n	8002c02 <HAL_GPIO_Init+0x20e>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a4b      	ldr	r2, [pc, #300]	@ (8002d24 <HAL_GPIO_Init+0x330>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d101      	bne.n	8002bfe <HAL_GPIO_Init+0x20a>
 8002bfa:	2307      	movs	r3, #7
 8002bfc:	e00e      	b.n	8002c1c <HAL_GPIO_Init+0x228>
 8002bfe:	2308      	movs	r3, #8
 8002c00:	e00c      	b.n	8002c1c <HAL_GPIO_Init+0x228>
 8002c02:	2306      	movs	r3, #6
 8002c04:	e00a      	b.n	8002c1c <HAL_GPIO_Init+0x228>
 8002c06:	2305      	movs	r3, #5
 8002c08:	e008      	b.n	8002c1c <HAL_GPIO_Init+0x228>
 8002c0a:	2304      	movs	r3, #4
 8002c0c:	e006      	b.n	8002c1c <HAL_GPIO_Init+0x228>
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e004      	b.n	8002c1c <HAL_GPIO_Init+0x228>
 8002c12:	2302      	movs	r3, #2
 8002c14:	e002      	b.n	8002c1c <HAL_GPIO_Init+0x228>
 8002c16:	2301      	movs	r3, #1
 8002c18:	e000      	b.n	8002c1c <HAL_GPIO_Init+0x228>
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	69fa      	ldr	r2, [r7, #28]
 8002c1e:	f002 0203 	and.w	r2, r2, #3
 8002c22:	0092      	lsls	r2, r2, #2
 8002c24:	4093      	lsls	r3, r2
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c2c:	4935      	ldr	r1, [pc, #212]	@ (8002d04 <HAL_GPIO_Init+0x310>)
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	089b      	lsrs	r3, r3, #2
 8002c32:	3302      	adds	r3, #2
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c3a:	4b3b      	ldr	r3, [pc, #236]	@ (8002d28 <HAL_GPIO_Init+0x334>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	43db      	mvns	r3, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4013      	ands	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d003      	beq.n	8002c5e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c5e:	4a32      	ldr	r2, [pc, #200]	@ (8002d28 <HAL_GPIO_Init+0x334>)
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c64:	4b30      	ldr	r3, [pc, #192]	@ (8002d28 <HAL_GPIO_Init+0x334>)
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	4013      	ands	r3, r2
 8002c72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d003      	beq.n	8002c88 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c88:	4a27      	ldr	r2, [pc, #156]	@ (8002d28 <HAL_GPIO_Init+0x334>)
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c8e:	4b26      	ldr	r3, [pc, #152]	@ (8002d28 <HAL_GPIO_Init+0x334>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	43db      	mvns	r3, r3
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d003      	beq.n	8002cb2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cb2:	4a1d      	ldr	r2, [pc, #116]	@ (8002d28 <HAL_GPIO_Init+0x334>)
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cb8:	4b1b      	ldr	r3, [pc, #108]	@ (8002d28 <HAL_GPIO_Init+0x334>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d003      	beq.n	8002cdc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cdc:	4a12      	ldr	r2, [pc, #72]	@ (8002d28 <HAL_GPIO_Init+0x334>)
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	61fb      	str	r3, [r7, #28]
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	2b0f      	cmp	r3, #15
 8002cec:	f67f ae90 	bls.w	8002a10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cf0:	bf00      	nop
 8002cf2:	bf00      	nop
 8002cf4:	3724      	adds	r7, #36	@ 0x24
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	40023800 	.word	0x40023800
 8002d04:	40013800 	.word	0x40013800
 8002d08:	40020000 	.word	0x40020000
 8002d0c:	40020400 	.word	0x40020400
 8002d10:	40020800 	.word	0x40020800
 8002d14:	40020c00 	.word	0x40020c00
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	40021400 	.word	0x40021400
 8002d20:	40021800 	.word	0x40021800
 8002d24:	40021c00 	.word	0x40021c00
 8002d28:	40013c00 	.word	0x40013c00

08002d2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	460b      	mov	r3, r1
 8002d36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	691a      	ldr	r2, [r3, #16]
 8002d3c:	887b      	ldrh	r3, [r7, #2]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d002      	beq.n	8002d4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d44:	2301      	movs	r3, #1
 8002d46:	73fb      	strb	r3, [r7, #15]
 8002d48:	e001      	b.n	8002d4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3714      	adds	r7, #20
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	460b      	mov	r3, r1
 8002d66:	807b      	strh	r3, [r7, #2]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d6c:	787b      	ldrb	r3, [r7, #1]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d003      	beq.n	8002d7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d72:	887a      	ldrh	r2, [r7, #2]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d78:	e003      	b.n	8002d82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d7a:	887b      	ldrh	r3, [r7, #2]
 8002d7c:	041a      	lsls	r2, r3, #16
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	619a      	str	r2, [r3, #24]
}
 8002d82:	bf00      	nop
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr

08002d8e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d90:	b08f      	sub	sp, #60	@ 0x3c
 8002d92:	af0a      	add	r7, sp, #40	@ 0x28
 8002d94:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d101      	bne.n	8002da0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e10f      	b.n	8002fc0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d106      	bne.n	8002dc0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f005 fcee 	bl	800879c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2203      	movs	r2, #3
 8002dc4:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d102      	bne.n	8002dda <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f001 ffd7 	bl	8004d92 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	603b      	str	r3, [r7, #0]
 8002dea:	687e      	ldr	r6, [r7, #4]
 8002dec:	466d      	mov	r5, sp
 8002dee:	f106 0410 	add.w	r4, r6, #16
 8002df2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002df4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002df6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002df8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dfa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002dfe:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e02:	1d33      	adds	r3, r6, #4
 8002e04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e06:	6838      	ldr	r0, [r7, #0]
 8002e08:	f001 feae 	bl	8004b68 <USB_CoreInit>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d005      	beq.n	8002e1e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2202      	movs	r2, #2
 8002e16:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e0d0      	b.n	8002fc0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2100      	movs	r1, #0
 8002e24:	4618      	mov	r0, r3
 8002e26:	f001 ffc5 	bl	8004db4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	73fb      	strb	r3, [r7, #15]
 8002e2e:	e04a      	b.n	8002ec6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e30:	7bfa      	ldrb	r2, [r7, #15]
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	4613      	mov	r3, r2
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	4413      	add	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	333d      	adds	r3, #61	@ 0x3d
 8002e40:	2201      	movs	r2, #1
 8002e42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e44:	7bfa      	ldrb	r2, [r7, #15]
 8002e46:	6879      	ldr	r1, [r7, #4]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	4413      	add	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	440b      	add	r3, r1
 8002e52:	333c      	adds	r3, #60	@ 0x3c
 8002e54:	7bfa      	ldrb	r2, [r7, #15]
 8002e56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e58:	7bfa      	ldrb	r2, [r7, #15]
 8002e5a:	7bfb      	ldrb	r3, [r7, #15]
 8002e5c:	b298      	uxth	r0, r3
 8002e5e:	6879      	ldr	r1, [r7, #4]
 8002e60:	4613      	mov	r3, r2
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	4413      	add	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	440b      	add	r3, r1
 8002e6a:	3344      	adds	r3, #68	@ 0x44
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e70:	7bfa      	ldrb	r2, [r7, #15]
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	4613      	mov	r3, r2
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	4413      	add	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	440b      	add	r3, r1
 8002e7e:	3340      	adds	r3, #64	@ 0x40
 8002e80:	2200      	movs	r2, #0
 8002e82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e84:	7bfa      	ldrb	r2, [r7, #15]
 8002e86:	6879      	ldr	r1, [r7, #4]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	4413      	add	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	440b      	add	r3, r1
 8002e92:	3348      	adds	r3, #72	@ 0x48
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e98:	7bfa      	ldrb	r2, [r7, #15]
 8002e9a:	6879      	ldr	r1, [r7, #4]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	4413      	add	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	334c      	adds	r3, #76	@ 0x4c
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002eac:	7bfa      	ldrb	r2, [r7, #15]
 8002eae:	6879      	ldr	r1, [r7, #4]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	4413      	add	r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	440b      	add	r3, r1
 8002eba:	3354      	adds	r3, #84	@ 0x54
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ec0:	7bfb      	ldrb	r3, [r7, #15]
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	73fb      	strb	r3, [r7, #15]
 8002ec6:	7bfa      	ldrb	r2, [r7, #15]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d3af      	bcc.n	8002e30 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	73fb      	strb	r3, [r7, #15]
 8002ed4:	e044      	b.n	8002f60 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ed6:	7bfa      	ldrb	r2, [r7, #15]
 8002ed8:	6879      	ldr	r1, [r7, #4]
 8002eda:	4613      	mov	r3, r2
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	4413      	add	r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	440b      	add	r3, r1
 8002ee4:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8002ee8:	2200      	movs	r2, #0
 8002eea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002eec:	7bfa      	ldrb	r2, [r7, #15]
 8002eee:	6879      	ldr	r1, [r7, #4]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	4413      	add	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	440b      	add	r3, r1
 8002efa:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8002efe:	7bfa      	ldrb	r2, [r7, #15]
 8002f00:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f02:	7bfa      	ldrb	r2, [r7, #15]
 8002f04:	6879      	ldr	r1, [r7, #4]
 8002f06:	4613      	mov	r3, r2
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	4413      	add	r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	440b      	add	r3, r1
 8002f10:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8002f14:	2200      	movs	r2, #0
 8002f16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f18:	7bfa      	ldrb	r2, [r7, #15]
 8002f1a:	6879      	ldr	r1, [r7, #4]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	4413      	add	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	440b      	add	r3, r1
 8002f26:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f2e:	7bfa      	ldrb	r2, [r7, #15]
 8002f30:	6879      	ldr	r1, [r7, #4]
 8002f32:	4613      	mov	r3, r2
 8002f34:	00db      	lsls	r3, r3, #3
 8002f36:	4413      	add	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	440b      	add	r3, r1
 8002f3c:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8002f40:	2200      	movs	r2, #0
 8002f42:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f44:	7bfa      	ldrb	r2, [r7, #15]
 8002f46:	6879      	ldr	r1, [r7, #4]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	4413      	add	r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	440b      	add	r3, r1
 8002f52:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8002f56:	2200      	movs	r2, #0
 8002f58:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f5a:	7bfb      	ldrb	r3, [r7, #15]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	73fb      	strb	r3, [r7, #15]
 8002f60:	7bfa      	ldrb	r2, [r7, #15]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d3b5      	bcc.n	8002ed6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	603b      	str	r3, [r7, #0]
 8002f70:	687e      	ldr	r6, [r7, #4]
 8002f72:	466d      	mov	r5, sp
 8002f74:	f106 0410 	add.w	r4, r6, #16
 8002f78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f80:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f84:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f88:	1d33      	adds	r3, r6, #4
 8002f8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f8c:	6838      	ldr	r0, [r7, #0]
 8002f8e:	f001 ff5d 	bl	8004e4c <USB_DevInit>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d005      	beq.n	8002fa4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2202      	movs	r2, #2
 8002f9c:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e00d      	b.n	8002fc0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f003 f8ac 	bl	8006116 <USB_DevDisconnect>

  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3714      	adds	r7, #20
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002fc8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d101      	bne.n	8002fe4 <HAL_PCD_Start+0x1c>
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	e020      	b.n	8003026 <HAL_PCD_Start+0x5e>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d109      	bne.n	8003008 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d005      	beq.n	8003008 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003000:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4618      	mov	r0, r3
 800300e:	f001 feaf 	bl	8004d70 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4618      	mov	r0, r3
 8003018:	f003 f85c 	bl	80060d4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800302e:	b590      	push	{r4, r7, lr}
 8003030:	b08d      	sub	sp, #52	@ 0x34
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800303c:	6a3b      	ldr	r3, [r7, #32]
 800303e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4618      	mov	r0, r3
 8003046:	f003 f91a 	bl	800627e <USB_GetMode>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	f040 848a 	bne.w	8003966 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4618      	mov	r0, r3
 8003058:	f003 f87e 	bl	8006158 <USB_ReadInterrupts>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	f000 8480 	beq.w	8003964 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	0a1b      	lsrs	r3, r3, #8
 800306e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4618      	mov	r0, r3
 800307e:	f003 f86b 	bl	8006158 <USB_ReadInterrupts>
 8003082:	4603      	mov	r3, r0
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b02      	cmp	r3, #2
 800308a:	d107      	bne.n	800309c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	695a      	ldr	r2, [r3, #20]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f002 0202 	and.w	r2, r2, #2
 800309a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f003 f859 	bl	8006158 <USB_ReadInterrupts>
 80030a6:	4603      	mov	r3, r0
 80030a8:	f003 0310 	and.w	r3, r3, #16
 80030ac:	2b10      	cmp	r3, #16
 80030ae:	d161      	bne.n	8003174 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	699a      	ldr	r2, [r3, #24]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f022 0210 	bic.w	r2, r2, #16
 80030be:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80030c0:	6a3b      	ldr	r3, [r7, #32]
 80030c2:	6a1b      	ldr	r3, [r3, #32]
 80030c4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	f003 020f 	and.w	r2, r3, #15
 80030cc:	4613      	mov	r3, r2
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	4413      	add	r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	4413      	add	r3, r2
 80030dc:	3304      	adds	r3, #4
 80030de:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	0c5b      	lsrs	r3, r3, #17
 80030e4:	f003 030f 	and.w	r3, r3, #15
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d124      	bne.n	8003136 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80030f2:	4013      	ands	r3, r2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d035      	beq.n	8003164 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	091b      	lsrs	r3, r3, #4
 8003100:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003102:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003106:	b29b      	uxth	r3, r3
 8003108:	461a      	mov	r2, r3
 800310a:	6a38      	ldr	r0, [r7, #32]
 800310c:	f002 fe90 	bl	8005e30 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	691a      	ldr	r2, [r3, #16]
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	091b      	lsrs	r3, r3, #4
 8003118:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800311c:	441a      	add	r2, r3
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	6a1a      	ldr	r2, [r3, #32]
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	091b      	lsrs	r3, r3, #4
 800312a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800312e:	441a      	add	r2, r3
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	621a      	str	r2, [r3, #32]
 8003134:	e016      	b.n	8003164 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	0c5b      	lsrs	r3, r3, #17
 800313a:	f003 030f 	and.w	r3, r3, #15
 800313e:	2b06      	cmp	r3, #6
 8003140:	d110      	bne.n	8003164 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003148:	2208      	movs	r2, #8
 800314a:	4619      	mov	r1, r3
 800314c:	6a38      	ldr	r0, [r7, #32]
 800314e:	f002 fe6f 	bl	8005e30 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	6a1a      	ldr	r2, [r3, #32]
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	091b      	lsrs	r3, r3, #4
 800315a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800315e:	441a      	add	r2, r3
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	699a      	ldr	r2, [r3, #24]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f042 0210 	orr.w	r2, r2, #16
 8003172:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4618      	mov	r0, r3
 800317a:	f002 ffed 	bl	8006158 <USB_ReadInterrupts>
 800317e:	4603      	mov	r3, r0
 8003180:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003184:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003188:	f040 80a7 	bne.w	80032da <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800318c:	2300      	movs	r3, #0
 800318e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4618      	mov	r0, r3
 8003196:	f002 fff2 	bl	800617e <USB_ReadDevAllOutEpInterrupt>
 800319a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800319c:	e099      	b.n	80032d2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800319e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031a0:	f003 0301 	and.w	r3, r3, #1
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 808e 	beq.w	80032c6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031b0:	b2d2      	uxtb	r2, r2
 80031b2:	4611      	mov	r1, r2
 80031b4:	4618      	mov	r0, r3
 80031b6:	f003 f816 	bl	80061e6 <USB_ReadDevOutEPInterrupt>
 80031ba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00c      	beq.n	80031e0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80031c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c8:	015a      	lsls	r2, r3, #5
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	4413      	add	r3, r2
 80031ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031d2:	461a      	mov	r2, r3
 80031d4:	2301      	movs	r3, #1
 80031d6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80031d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 fec2 	bl	8003f64 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	f003 0308 	and.w	r3, r3, #8
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00c      	beq.n	8003204 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80031ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ec:	015a      	lsls	r2, r3, #5
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	4413      	add	r3, r2
 80031f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031f6:	461a      	mov	r2, r3
 80031f8:	2308      	movs	r3, #8
 80031fa:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80031fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 ff98 	bl	8004134 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	f003 0310 	and.w	r3, r3, #16
 800320a:	2b00      	cmp	r3, #0
 800320c:	d008      	beq.n	8003220 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800320e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003210:	015a      	lsls	r2, r3, #5
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	4413      	add	r3, r2
 8003216:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800321a:	461a      	mov	r2, r3
 800321c:	2310      	movs	r3, #16
 800321e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d030      	beq.n	800328c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800322a:	6a3b      	ldr	r3, [r7, #32]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003232:	2b80      	cmp	r3, #128	@ 0x80
 8003234:	d109      	bne.n	800324a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	69fa      	ldr	r2, [r7, #28]
 8003240:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003244:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003248:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800324a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800324c:	4613      	mov	r3, r2
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	4413      	add	r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	4413      	add	r3, r2
 800325c:	3304      	adds	r3, #4
 800325e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	78db      	ldrb	r3, [r3, #3]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d108      	bne.n	800327a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	2200      	movs	r2, #0
 800326c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800326e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003270:	b2db      	uxtb	r3, r3
 8003272:	4619      	mov	r1, r3
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f005 fba5 	bl	80089c4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800327a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327c:	015a      	lsls	r2, r3, #5
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	4413      	add	r3, r2
 8003282:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003286:	461a      	mov	r2, r3
 8003288:	2302      	movs	r3, #2
 800328a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	f003 0320 	and.w	r3, r3, #32
 8003292:	2b00      	cmp	r3, #0
 8003294:	d008      	beq.n	80032a8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003298:	015a      	lsls	r2, r3, #5
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	4413      	add	r3, r2
 800329e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032a2:	461a      	mov	r2, r3
 80032a4:	2320      	movs	r3, #32
 80032a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d009      	beq.n	80032c6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80032b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b4:	015a      	lsls	r2, r3, #5
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	4413      	add	r3, r2
 80032ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032be:	461a      	mov	r2, r3
 80032c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80032c4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80032c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c8:	3301      	adds	r3, #1
 80032ca:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80032cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ce:	085b      	lsrs	r3, r3, #1
 80032d0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80032d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f47f af62 	bne.w	800319e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	f002 ff3a 	bl	8006158 <USB_ReadInterrupts>
 80032e4:	4603      	mov	r3, r0
 80032e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80032ee:	f040 80db 	bne.w	80034a8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f002 ff5b 	bl	80061b2 <USB_ReadDevAllInEpInterrupt>
 80032fc:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80032fe:	2300      	movs	r3, #0
 8003300:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003302:	e0cd      	b.n	80034a0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b00      	cmp	r3, #0
 800330c:	f000 80c2 	beq.w	8003494 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003316:	b2d2      	uxtb	r2, r2
 8003318:	4611      	mov	r1, r2
 800331a:	4618      	mov	r0, r3
 800331c:	f002 ff81 	bl	8006222 <USB_ReadDevInEPInterrupt>
 8003320:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	2b00      	cmp	r3, #0
 800332a:	d057      	beq.n	80033dc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800332c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800332e:	f003 030f 	and.w	r3, r3, #15
 8003332:	2201      	movs	r2, #1
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003340:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	43db      	mvns	r3, r3
 8003346:	69f9      	ldr	r1, [r7, #28]
 8003348:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800334c:	4013      	ands	r3, r2
 800334e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003352:	015a      	lsls	r2, r3, #5
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	4413      	add	r3, r2
 8003358:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800335c:	461a      	mov	r2, r3
 800335e:	2301      	movs	r3, #1
 8003360:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d132      	bne.n	80033d0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800336a:	6879      	ldr	r1, [r7, #4]
 800336c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800336e:	4613      	mov	r3, r2
 8003370:	00db      	lsls	r3, r3, #3
 8003372:	4413      	add	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	440b      	add	r3, r1
 8003378:	334c      	adds	r3, #76	@ 0x4c
 800337a:	6819      	ldr	r1, [r3, #0]
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003380:	4613      	mov	r3, r2
 8003382:	00db      	lsls	r3, r3, #3
 8003384:	4413      	add	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4403      	add	r3, r0
 800338a:	3348      	adds	r3, #72	@ 0x48
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4419      	add	r1, r3
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003394:	4613      	mov	r3, r2
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	4413      	add	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4403      	add	r3, r0
 800339e:	334c      	adds	r3, #76	@ 0x4c
 80033a0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80033a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d113      	bne.n	80033d0 <HAL_PCD_IRQHandler+0x3a2>
 80033a8:	6879      	ldr	r1, [r7, #4]
 80033aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033ac:	4613      	mov	r3, r2
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	4413      	add	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	440b      	add	r3, r1
 80033b6:	3354      	adds	r3, #84	@ 0x54
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d108      	bne.n	80033d0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6818      	ldr	r0, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80033c8:	461a      	mov	r2, r3
 80033ca:	2101      	movs	r1, #1
 80033cc:	f002 ff88 	bl	80062e0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80033d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	4619      	mov	r1, r3
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f005 fa6f 	bl	80088ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	f003 0308 	and.w	r3, r3, #8
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d008      	beq.n	80033f8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80033e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e8:	015a      	lsls	r2, r3, #5
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	4413      	add	r3, r2
 80033ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033f2:	461a      	mov	r2, r3
 80033f4:	2308      	movs	r3, #8
 80033f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	f003 0310 	and.w	r3, r3, #16
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d008      	beq.n	8003414 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003404:	015a      	lsls	r2, r3, #5
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	4413      	add	r3, r2
 800340a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800340e:	461a      	mov	r2, r3
 8003410:	2310      	movs	r3, #16
 8003412:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800341a:	2b00      	cmp	r3, #0
 800341c:	d008      	beq.n	8003430 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800341e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003420:	015a      	lsls	r2, r3, #5
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	4413      	add	r3, r2
 8003426:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800342a:	461a      	mov	r2, r3
 800342c:	2340      	movs	r3, #64	@ 0x40
 800342e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d023      	beq.n	8003482 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800343a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800343c:	6a38      	ldr	r0, [r7, #32]
 800343e:	f001 fe69 	bl	8005114 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003442:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003444:	4613      	mov	r3, r2
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	4413      	add	r3, r2
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	3338      	adds	r3, #56	@ 0x38
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	4413      	add	r3, r2
 8003452:	3304      	adds	r3, #4
 8003454:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	78db      	ldrb	r3, [r3, #3]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d108      	bne.n	8003470 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	2200      	movs	r2, #0
 8003462:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003466:	b2db      	uxtb	r3, r3
 8003468:	4619      	mov	r1, r3
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f005 fabc 	bl	80089e8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003472:	015a      	lsls	r2, r3, #5
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	4413      	add	r3, r2
 8003478:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800347c:	461a      	mov	r2, r3
 800347e:	2302      	movs	r3, #2
 8003480:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003488:	2b00      	cmp	r3, #0
 800348a:	d003      	beq.n	8003494 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800348c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 fcdb 	bl	8003e4a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003496:	3301      	adds	r3, #1
 8003498:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800349a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800349c:	085b      	lsrs	r3, r3, #1
 800349e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80034a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f47f af2e 	bne.w	8003304 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f002 fe53 	bl	8006158 <USB_ReadInterrupts>
 80034b2:	4603      	mov	r3, r0
 80034b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80034b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80034bc:	d122      	bne.n	8003504 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	69fa      	ldr	r2, [r7, #28]
 80034c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80034cc:	f023 0301 	bic.w	r3, r3, #1
 80034d0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d108      	bne.n	80034ee <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80034e4:	2100      	movs	r1, #0
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 fec2 	bl	8004270 <HAL_PCDEx_LPM_Callback>
 80034ec:	e002      	b.n	80034f4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f005 fa5a 	bl	80089a8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	695a      	ldr	r2, [r3, #20]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003502:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4618      	mov	r0, r3
 800350a:	f002 fe25 	bl	8006158 <USB_ReadInterrupts>
 800350e:	4603      	mov	r3, r0
 8003510:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003514:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003518:	d112      	bne.n	8003540 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b01      	cmp	r3, #1
 8003528:	d102      	bne.n	8003530 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f005 fa16 	bl	800895c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	695a      	ldr	r2, [r3, #20]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800353e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4618      	mov	r0, r3
 8003546:	f002 fe07 	bl	8006158 <USB_ReadInterrupts>
 800354a:	4603      	mov	r3, r0
 800354c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003550:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003554:	f040 80b7 	bne.w	80036c6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	69fa      	ldr	r2, [r7, #28]
 8003562:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003566:	f023 0301 	bic.w	r3, r3, #1
 800356a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2110      	movs	r1, #16
 8003572:	4618      	mov	r0, r3
 8003574:	f001 fdce 	bl	8005114 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003578:	2300      	movs	r3, #0
 800357a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800357c:	e046      	b.n	800360c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800357e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003580:	015a      	lsls	r2, r3, #5
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	4413      	add	r3, r2
 8003586:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800358a:	461a      	mov	r2, r3
 800358c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003590:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003594:	015a      	lsls	r2, r3, #5
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	4413      	add	r3, r2
 800359a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035a2:	0151      	lsls	r1, r2, #5
 80035a4:	69fa      	ldr	r2, [r7, #28]
 80035a6:	440a      	add	r2, r1
 80035a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80035ac:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80035b0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80035b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035b4:	015a      	lsls	r2, r3, #5
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	4413      	add	r3, r2
 80035ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035be:	461a      	mov	r2, r3
 80035c0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80035c4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80035c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035c8:	015a      	lsls	r2, r3, #5
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	4413      	add	r3, r2
 80035ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035d6:	0151      	lsls	r1, r2, #5
 80035d8:	69fa      	ldr	r2, [r7, #28]
 80035da:	440a      	add	r2, r1
 80035dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80035e0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80035e4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80035e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035e8:	015a      	lsls	r2, r3, #5
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	4413      	add	r3, r2
 80035ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035f6:	0151      	lsls	r1, r2, #5
 80035f8:	69fa      	ldr	r2, [r7, #28]
 80035fa:	440a      	add	r2, r1
 80035fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003600:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003604:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003608:	3301      	adds	r3, #1
 800360a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003612:	429a      	cmp	r2, r3
 8003614:	d3b3      	bcc.n	800357e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800361c:	69db      	ldr	r3, [r3, #28]
 800361e:	69fa      	ldr	r2, [r7, #28]
 8003620:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003624:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003628:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800362e:	2b00      	cmp	r3, #0
 8003630:	d016      	beq.n	8003660 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003638:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800363c:	69fa      	ldr	r2, [r7, #28]
 800363e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003642:	f043 030b 	orr.w	r3, r3, #11
 8003646:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003652:	69fa      	ldr	r2, [r7, #28]
 8003654:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003658:	f043 030b 	orr.w	r3, r3, #11
 800365c:	6453      	str	r3, [r2, #68]	@ 0x44
 800365e:	e015      	b.n	800368c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003666:	695b      	ldr	r3, [r3, #20]
 8003668:	69fa      	ldr	r2, [r7, #28]
 800366a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800366e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003672:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003676:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	69fa      	ldr	r2, [r7, #28]
 8003682:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003686:	f043 030b 	orr.w	r3, r3, #11
 800368a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	69fa      	ldr	r2, [r7, #28]
 8003696:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800369a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800369e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6818      	ldr	r0, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80036b0:	461a      	mov	r2, r3
 80036b2:	f002 fe15 	bl	80062e0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	695a      	ldr	r2, [r3, #20]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80036c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4618      	mov	r0, r3
 80036cc:	f002 fd44 	bl	8006158 <USB_ReadInterrupts>
 80036d0:	4603      	mov	r3, r0
 80036d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036da:	d124      	bne.n	8003726 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f002 fdda 	bl	800629a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4618      	mov	r0, r3
 80036ec:	f001 fd8f 	bl	800520e <USB_GetDevSpeed>
 80036f0:	4603      	mov	r3, r0
 80036f2:	461a      	mov	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681c      	ldr	r4, [r3, #0]
 80036fc:	f001 fa28 	bl	8004b50 <HAL_RCC_GetHCLKFreq>
 8003700:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003706:	b2db      	uxtb	r3, r3
 8003708:	461a      	mov	r2, r3
 800370a:	4620      	mov	r0, r4
 800370c:	f001 fa8e 	bl	8004c2c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f005 f8fa 	bl	800890a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	695a      	ldr	r2, [r3, #20]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003724:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4618      	mov	r0, r3
 800372c:	f002 fd14 	bl	8006158 <USB_ReadInterrupts>
 8003730:	4603      	mov	r3, r0
 8003732:	f003 0308 	and.w	r3, r3, #8
 8003736:	2b08      	cmp	r3, #8
 8003738:	d10a      	bne.n	8003750 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f005 f8d7 	bl	80088ee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	695a      	ldr	r2, [r3, #20]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f002 0208 	and.w	r2, r2, #8
 800374e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4618      	mov	r0, r3
 8003756:	f002 fcff 	bl	8006158 <USB_ReadInterrupts>
 800375a:	4603      	mov	r3, r0
 800375c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003760:	2b80      	cmp	r3, #128	@ 0x80
 8003762:	d122      	bne.n	80037aa <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003764:	6a3b      	ldr	r3, [r7, #32]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800376c:	6a3b      	ldr	r3, [r7, #32]
 800376e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003770:	2301      	movs	r3, #1
 8003772:	627b      	str	r3, [r7, #36]	@ 0x24
 8003774:	e014      	b.n	80037a0 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003776:	6879      	ldr	r1, [r7, #4]
 8003778:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800377a:	4613      	mov	r3, r2
 800377c:	00db      	lsls	r3, r3, #3
 800377e:	4413      	add	r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	440b      	add	r3, r1
 8003784:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d105      	bne.n	800379a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800378e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003790:	b2db      	uxtb	r3, r3
 8003792:	4619      	mov	r1, r3
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 fb27 	bl	8003de8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800379a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800379c:	3301      	adds	r3, #1
 800379e:	627b      	str	r3, [r7, #36]	@ 0x24
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d3e5      	bcc.n	8003776 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f002 fcd2 	bl	8006158 <USB_ReadInterrupts>
 80037b4:	4603      	mov	r3, r0
 80037b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037be:	d13b      	bne.n	8003838 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037c0:	2301      	movs	r3, #1
 80037c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80037c4:	e02b      	b.n	800381e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80037c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c8:	015a      	lsls	r2, r3, #5
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	4413      	add	r3, r2
 80037ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80037d6:	6879      	ldr	r1, [r7, #4]
 80037d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037da:	4613      	mov	r3, r2
 80037dc:	00db      	lsls	r3, r3, #3
 80037de:	4413      	add	r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	440b      	add	r3, r1
 80037e4:	3340      	adds	r3, #64	@ 0x40
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d115      	bne.n	8003818 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80037ec:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	da12      	bge.n	8003818 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80037f2:	6879      	ldr	r1, [r7, #4]
 80037f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037f6:	4613      	mov	r3, r2
 80037f8:	00db      	lsls	r3, r3, #3
 80037fa:	4413      	add	r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	440b      	add	r3, r1
 8003800:	333f      	adds	r3, #63	@ 0x3f
 8003802:	2201      	movs	r2, #1
 8003804:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003808:	b2db      	uxtb	r3, r3
 800380a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800380e:	b2db      	uxtb	r3, r3
 8003810:	4619      	mov	r1, r3
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 fae8 	bl	8003de8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800381a:	3301      	adds	r3, #1
 800381c:	627b      	str	r3, [r7, #36]	@ 0x24
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003824:	429a      	cmp	r2, r3
 8003826:	d3ce      	bcc.n	80037c6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	695a      	ldr	r2, [r3, #20]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003836:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4618      	mov	r0, r3
 800383e:	f002 fc8b 	bl	8006158 <USB_ReadInterrupts>
 8003842:	4603      	mov	r3, r0
 8003844:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003848:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800384c:	d155      	bne.n	80038fa <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800384e:	2301      	movs	r3, #1
 8003850:	627b      	str	r3, [r7, #36]	@ 0x24
 8003852:	e045      	b.n	80038e0 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003856:	015a      	lsls	r2, r3, #5
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	4413      	add	r3, r2
 800385c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003864:	6879      	ldr	r1, [r7, #4]
 8003866:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003868:	4613      	mov	r3, r2
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	4413      	add	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	440b      	add	r3, r1
 8003872:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d12e      	bne.n	80038da <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800387c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800387e:	2b00      	cmp	r3, #0
 8003880:	da2b      	bge.n	80038da <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 800388e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003892:	429a      	cmp	r2, r3
 8003894:	d121      	bne.n	80038da <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003896:	6879      	ldr	r1, [r7, #4]
 8003898:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800389a:	4613      	mov	r3, r2
 800389c:	00db      	lsls	r3, r3, #3
 800389e:	4413      	add	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	440b      	add	r3, r1
 80038a4:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 80038a8:	2201      	movs	r2, #1
 80038aa:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80038ac:	6a3b      	ldr	r3, [r7, #32]
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80038b4:	6a3b      	ldr	r3, [r7, #32]
 80038b6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80038b8:	6a3b      	ldr	r3, [r7, #32]
 80038ba:	695b      	ldr	r3, [r3, #20]
 80038bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d10a      	bne.n	80038da <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	69fa      	ldr	r2, [r7, #28]
 80038ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80038d6:	6053      	str	r3, [r2, #4]
            break;
 80038d8:	e007      	b.n	80038ea <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038dc:	3301      	adds	r3, #1
 80038de:	627b      	str	r3, [r7, #36]	@ 0x24
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d3b4      	bcc.n	8003854 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	695a      	ldr	r2, [r3, #20]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80038f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4618      	mov	r0, r3
 8003900:	f002 fc2a 	bl	8006158 <USB_ReadInterrupts>
 8003904:	4603      	mov	r3, r0
 8003906:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800390a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800390e:	d10a      	bne.n	8003926 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f005 f87b 	bl	8008a0c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	695a      	ldr	r2, [r3, #20]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003924:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4618      	mov	r0, r3
 800392c:	f002 fc14 	bl	8006158 <USB_ReadInterrupts>
 8003930:	4603      	mov	r3, r0
 8003932:	f003 0304 	and.w	r3, r3, #4
 8003936:	2b04      	cmp	r3, #4
 8003938:	d115      	bne.n	8003966 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	f003 0304 	and.w	r3, r3, #4
 8003948:	2b00      	cmp	r3, #0
 800394a:	d002      	beq.n	8003952 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f005 f86b 	bl	8008a28 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	6859      	ldr	r1, [r3, #4]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	430a      	orrs	r2, r1
 8003960:	605a      	str	r2, [r3, #4]
 8003962:	e000      	b.n	8003966 <HAL_PCD_IRQHandler+0x938>
      return;
 8003964:	bf00      	nop
    }
  }
}
 8003966:	3734      	adds	r7, #52	@ 0x34
 8003968:	46bd      	mov	sp, r7
 800396a:	bd90      	pop	{r4, r7, pc}

0800396c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	460b      	mov	r3, r1
 8003976:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800397e:	2b01      	cmp	r3, #1
 8003980:	d101      	bne.n	8003986 <HAL_PCD_SetAddress+0x1a>
 8003982:	2302      	movs	r3, #2
 8003984:	e013      	b.n	80039ae <HAL_PCD_SetAddress+0x42>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	78fa      	ldrb	r2, [r7, #3]
 8003992:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	78fa      	ldrb	r2, [r7, #3]
 800399c:	4611      	mov	r1, r2
 800399e:	4618      	mov	r0, r3
 80039a0:	f002 fb72 	bl	8006088 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b084      	sub	sp, #16
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
 80039be:	4608      	mov	r0, r1
 80039c0:	4611      	mov	r1, r2
 80039c2:	461a      	mov	r2, r3
 80039c4:	4603      	mov	r3, r0
 80039c6:	70fb      	strb	r3, [r7, #3]
 80039c8:	460b      	mov	r3, r1
 80039ca:	803b      	strh	r3, [r7, #0]
 80039cc:	4613      	mov	r3, r2
 80039ce:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80039d0:	2300      	movs	r3, #0
 80039d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80039d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	da0f      	bge.n	80039fc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039dc:	78fb      	ldrb	r3, [r7, #3]
 80039de:	f003 020f 	and.w	r2, r3, #15
 80039e2:	4613      	mov	r3, r2
 80039e4:	00db      	lsls	r3, r3, #3
 80039e6:	4413      	add	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	3338      	adds	r3, #56	@ 0x38
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	4413      	add	r3, r2
 80039f0:	3304      	adds	r3, #4
 80039f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2201      	movs	r2, #1
 80039f8:	705a      	strb	r2, [r3, #1]
 80039fa:	e00f      	b.n	8003a1c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039fc:	78fb      	ldrb	r3, [r7, #3]
 80039fe:	f003 020f 	and.w	r2, r3, #15
 8003a02:	4613      	mov	r3, r2
 8003a04:	00db      	lsls	r3, r3, #3
 8003a06:	4413      	add	r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	4413      	add	r3, r2
 8003a12:	3304      	adds	r3, #4
 8003a14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003a1c:	78fb      	ldrb	r3, [r7, #3]
 8003a1e:	f003 030f 	and.w	r3, r3, #15
 8003a22:	b2da      	uxtb	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003a28:	883a      	ldrh	r2, [r7, #0]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	78ba      	ldrb	r2, [r7, #2]
 8003a32:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	785b      	ldrb	r3, [r3, #1]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d004      	beq.n	8003a46 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	461a      	mov	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003a46:	78bb      	ldrb	r3, [r7, #2]
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d102      	bne.n	8003a52 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d101      	bne.n	8003a60 <HAL_PCD_EP_Open+0xaa>
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	e00e      	b.n	8003a7e <HAL_PCD_EP_Open+0xc8>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68f9      	ldr	r1, [r7, #12]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f001 fbf2 	bl	8005258 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 8003a7c:	7afb      	ldrb	r3, [r7, #11]
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b084      	sub	sp, #16
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
 8003a8e:	460b      	mov	r3, r1
 8003a90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	da0f      	bge.n	8003aba <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a9a:	78fb      	ldrb	r3, [r7, #3]
 8003a9c:	f003 020f 	and.w	r2, r3, #15
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	4413      	add	r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	3338      	adds	r3, #56	@ 0x38
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	4413      	add	r3, r2
 8003aae:	3304      	adds	r3, #4
 8003ab0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	705a      	strb	r2, [r3, #1]
 8003ab8:	e00f      	b.n	8003ada <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003aba:	78fb      	ldrb	r3, [r7, #3]
 8003abc:	f003 020f 	and.w	r2, r3, #15
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	4413      	add	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	4413      	add	r3, r2
 8003ad0:	3304      	adds	r3, #4
 8003ad2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003ada:	78fb      	ldrb	r3, [r7, #3]
 8003adc:	f003 030f 	and.w	r3, r3, #15
 8003ae0:	b2da      	uxtb	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d101      	bne.n	8003af4 <HAL_PCD_EP_Close+0x6e>
 8003af0:	2302      	movs	r3, #2
 8003af2:	e00e      	b.n	8003b12 <HAL_PCD_EP_Close+0x8c>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68f9      	ldr	r1, [r7, #12]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f001 fc30 	bl	8005368 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3710      	adds	r7, #16
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b086      	sub	sp, #24
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	60f8      	str	r0, [r7, #12]
 8003b22:	607a      	str	r2, [r7, #4]
 8003b24:	603b      	str	r3, [r7, #0]
 8003b26:	460b      	mov	r3, r1
 8003b28:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b2a:	7afb      	ldrb	r3, [r7, #11]
 8003b2c:	f003 020f 	and.w	r2, r3, #15
 8003b30:	4613      	mov	r3, r2
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	4413      	add	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	4413      	add	r3, r2
 8003b40:	3304      	adds	r3, #4
 8003b42:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	683a      	ldr	r2, [r7, #0]
 8003b4e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	2200      	movs	r2, #0
 8003b54:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b5c:	7afb      	ldrb	r3, [r7, #11]
 8003b5e:	f003 030f 	and.w	r3, r3, #15
 8003b62:	b2da      	uxtb	r2, r3
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d102      	bne.n	8003b76 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b76:	7afb      	ldrb	r3, [r7, #11]
 8003b78:	f003 030f 	and.w	r3, r3, #15
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d109      	bne.n	8003b94 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6818      	ldr	r0, [r3, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	6979      	ldr	r1, [r7, #20]
 8003b8e:	f001 ff0f 	bl	80059b0 <USB_EP0StartXfer>
 8003b92:	e008      	b.n	8003ba6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6818      	ldr	r0, [r3, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	6979      	ldr	r1, [r7, #20]
 8003ba2:	f001 fcbd 	bl	8005520 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3718      	adds	r7, #24
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	460b      	mov	r3, r1
 8003bba:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003bbc:	78fb      	ldrb	r3, [r7, #3]
 8003bbe:	f003 020f 	and.w	r2, r3, #15
 8003bc2:	6879      	ldr	r1, [r7, #4]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	4413      	add	r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	440b      	add	r3, r1
 8003bce:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8003bd2:	681b      	ldr	r3, [r3, #0]
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	607a      	str	r2, [r7, #4]
 8003bea:	603b      	str	r3, [r7, #0]
 8003bec:	460b      	mov	r3, r1
 8003bee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bf0:	7afb      	ldrb	r3, [r7, #11]
 8003bf2:	f003 020f 	and.w	r2, r3, #15
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	00db      	lsls	r3, r3, #3
 8003bfa:	4413      	add	r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	3338      	adds	r3, #56	@ 0x38
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	4413      	add	r3, r2
 8003c04:	3304      	adds	r3, #4
 8003c06:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	2200      	movs	r2, #0
 8003c18:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c20:	7afb      	ldrb	r3, [r7, #11]
 8003c22:	f003 030f 	and.w	r3, r3, #15
 8003c26:	b2da      	uxtb	r2, r3
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d102      	bne.n	8003c3a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c3a:	7afb      	ldrb	r3, [r7, #11]
 8003c3c:	f003 030f 	and.w	r3, r3, #15
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d109      	bne.n	8003c58 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6818      	ldr	r0, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	461a      	mov	r2, r3
 8003c50:	6979      	ldr	r1, [r7, #20]
 8003c52:	f001 fead 	bl	80059b0 <USB_EP0StartXfer>
 8003c56:	e008      	b.n	8003c6a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6818      	ldr	r0, [r3, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	461a      	mov	r2, r3
 8003c64:	6979      	ldr	r1, [r7, #20]
 8003c66:	f001 fc5b 	bl	8005520 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3718      	adds	r7, #24
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003c80:	78fb      	ldrb	r3, [r7, #3]
 8003c82:	f003 020f 	and.w	r2, r3, #15
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d901      	bls.n	8003c92 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e050      	b.n	8003d34 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	da0f      	bge.n	8003cba <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c9a:	78fb      	ldrb	r3, [r7, #3]
 8003c9c:	f003 020f 	and.w	r2, r3, #15
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	00db      	lsls	r3, r3, #3
 8003ca4:	4413      	add	r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	3338      	adds	r3, #56	@ 0x38
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	4413      	add	r3, r2
 8003cae:	3304      	adds	r3, #4
 8003cb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	705a      	strb	r2, [r3, #1]
 8003cb8:	e00d      	b.n	8003cd6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003cba:	78fa      	ldrb	r2, [r7, #3]
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	00db      	lsls	r3, r3, #3
 8003cc0:	4413      	add	r3, r2
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	4413      	add	r3, r2
 8003ccc:	3304      	adds	r3, #4
 8003cce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cdc:	78fb      	ldrb	r3, [r7, #3]
 8003cde:	f003 030f 	and.w	r3, r3, #15
 8003ce2:	b2da      	uxtb	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d101      	bne.n	8003cf6 <HAL_PCD_EP_SetStall+0x82>
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	e01e      	b.n	8003d34 <HAL_PCD_EP_SetStall+0xc0>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68f9      	ldr	r1, [r7, #12]
 8003d04:	4618      	mov	r0, r3
 8003d06:	f002 f8eb 	bl	8005ee0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d0a:	78fb      	ldrb	r3, [r7, #3]
 8003d0c:	f003 030f 	and.w	r3, r3, #15
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d10a      	bne.n	8003d2a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6818      	ldr	r0, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	b2d9      	uxtb	r1, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003d24:	461a      	mov	r2, r3
 8003d26:	f002 fadb 	bl	80062e0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3710      	adds	r7, #16
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	460b      	mov	r3, r1
 8003d46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003d48:	78fb      	ldrb	r3, [r7, #3]
 8003d4a:	f003 020f 	and.w	r2, r3, #15
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d901      	bls.n	8003d5a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e042      	b.n	8003de0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	da0f      	bge.n	8003d82 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d62:	78fb      	ldrb	r3, [r7, #3]
 8003d64:	f003 020f 	and.w	r2, r3, #15
 8003d68:	4613      	mov	r3, r2
 8003d6a:	00db      	lsls	r3, r3, #3
 8003d6c:	4413      	add	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	3338      	adds	r3, #56	@ 0x38
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	4413      	add	r3, r2
 8003d76:	3304      	adds	r3, #4
 8003d78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	705a      	strb	r2, [r3, #1]
 8003d80:	e00f      	b.n	8003da2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d82:	78fb      	ldrb	r3, [r7, #3]
 8003d84:	f003 020f 	and.w	r2, r3, #15
 8003d88:	4613      	mov	r3, r2
 8003d8a:	00db      	lsls	r3, r3, #3
 8003d8c:	4413      	add	r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	4413      	add	r3, r2
 8003d98:	3304      	adds	r3, #4
 8003d9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2200      	movs	r2, #0
 8003da6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003da8:	78fb      	ldrb	r3, [r7, #3]
 8003daa:	f003 030f 	and.w	r3, r3, #15
 8003dae:	b2da      	uxtb	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d101      	bne.n	8003dc2 <HAL_PCD_EP_ClrStall+0x86>
 8003dbe:	2302      	movs	r3, #2
 8003dc0:	e00e      	b.n	8003de0 <HAL_PCD_EP_ClrStall+0xa4>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68f9      	ldr	r1, [r7, #12]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f002 f8f3 	bl	8005fbc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3710      	adds	r7, #16
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	460b      	mov	r3, r1
 8003df2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003df4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	da0c      	bge.n	8003e16 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dfc:	78fb      	ldrb	r3, [r7, #3]
 8003dfe:	f003 020f 	and.w	r2, r3, #15
 8003e02:	4613      	mov	r3, r2
 8003e04:	00db      	lsls	r3, r3, #3
 8003e06:	4413      	add	r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	3338      	adds	r3, #56	@ 0x38
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	4413      	add	r3, r2
 8003e10:	3304      	adds	r3, #4
 8003e12:	60fb      	str	r3, [r7, #12]
 8003e14:	e00c      	b.n	8003e30 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e16:	78fb      	ldrb	r3, [r7, #3]
 8003e18:	f003 020f 	and.w	r2, r3, #15
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	4413      	add	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	3304      	adds	r3, #4
 8003e2e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68f9      	ldr	r1, [r7, #12]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f001 ff12 	bl	8005c60 <USB_EPStopXfer>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003e40:	7afb      	ldrb	r3, [r7, #11]
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3710      	adds	r7, #16
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b08a      	sub	sp, #40	@ 0x28
 8003e4e:	af02      	add	r7, sp, #8
 8003e50:	6078      	str	r0, [r7, #4]
 8003e52:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003e5e:	683a      	ldr	r2, [r7, #0]
 8003e60:	4613      	mov	r3, r2
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	4413      	add	r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	3338      	adds	r3, #56	@ 0x38
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	3304      	adds	r3, #4
 8003e70:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6a1a      	ldr	r2, [r3, #32]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d901      	bls.n	8003e82 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e06c      	b.n	8003f5c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	699a      	ldr	r2, [r3, #24]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	69fa      	ldr	r2, [r7, #28]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d902      	bls.n	8003e9e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	3303      	adds	r3, #3
 8003ea2:	089b      	lsrs	r3, r3, #2
 8003ea4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ea6:	e02b      	b.n	8003f00 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	699a      	ldr	r2, [r3, #24]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6a1b      	ldr	r3, [r3, #32]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	69fa      	ldr	r2, [r7, #28]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d902      	bls.n	8003ec4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	3303      	adds	r3, #3
 8003ec8:	089b      	lsrs	r3, r3, #2
 8003eca:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6919      	ldr	r1, [r3, #16]
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	b2da      	uxtb	r2, r3
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	6978      	ldr	r0, [r7, #20]
 8003ee4:	f001 ff66 	bl	8005db4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	691a      	ldr	r2, [r3, #16]
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	441a      	add	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6a1a      	ldr	r2, [r3, #32]
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	441a      	add	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	015a      	lsls	r2, r3, #5
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	4413      	add	r3, r2
 8003f08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d809      	bhi.n	8003f2a <PCD_WriteEmptyTxFifo+0xe0>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6a1a      	ldr	r2, [r3, #32]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d203      	bcs.n	8003f2a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1be      	bne.n	8003ea8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	699a      	ldr	r2, [r3, #24]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6a1b      	ldr	r3, [r3, #32]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d811      	bhi.n	8003f5a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	f003 030f 	and.w	r3, r3, #15
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f42:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	43db      	mvns	r3, r3
 8003f50:	6939      	ldr	r1, [r7, #16]
 8003f52:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f56:	4013      	ands	r3, r2
 8003f58:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3720      	adds	r7, #32
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b088      	sub	sp, #32
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	333c      	adds	r3, #60	@ 0x3c
 8003f7c:	3304      	adds	r3, #4
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	015a      	lsls	r2, r3, #5
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	4413      	add	r3, r2
 8003f8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d17b      	bne.n	8004092 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	f003 0308 	and.w	r3, r3, #8
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d015      	beq.n	8003fd0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	4a61      	ldr	r2, [pc, #388]	@ (800412c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	f240 80b9 	bls.w	8004120 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f000 80b3 	beq.w	8004120 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	015a      	lsls	r2, r3, #5
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fcc:	6093      	str	r3, [r2, #8]
 8003fce:	e0a7      	b.n	8004120 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	f003 0320 	and.w	r3, r3, #32
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d009      	beq.n	8003fee <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	015a      	lsls	r2, r3, #5
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	2320      	movs	r3, #32
 8003fea:	6093      	str	r3, [r2, #8]
 8003fec:	e098      	b.n	8004120 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f040 8093 	bne.w	8004120 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	4a4b      	ldr	r2, [pc, #300]	@ (800412c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d90f      	bls.n	8004022 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00a      	beq.n	8004022 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	015a      	lsls	r2, r3, #5
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	4413      	add	r3, r2
 8004014:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004018:	461a      	mov	r2, r3
 800401a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800401e:	6093      	str	r3, [r2, #8]
 8004020:	e07e      	b.n	8004120 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004022:	683a      	ldr	r2, [r7, #0]
 8004024:	4613      	mov	r3, r2
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	4413      	add	r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	4413      	add	r3, r2
 8004034:	3304      	adds	r3, #4
 8004036:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	69da      	ldr	r2, [r3, #28]
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	0159      	lsls	r1, r3, #5
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	440b      	add	r3, r1
 8004044:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800404e:	1ad2      	subs	r2, r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d114      	bne.n	8004084 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d109      	bne.n	8004076 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6818      	ldr	r0, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800406c:	461a      	mov	r2, r3
 800406e:	2101      	movs	r1, #1
 8004070:	f002 f936 	bl	80062e0 <USB_EP0_OutStart>
 8004074:	e006      	b.n	8004084 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	691a      	ldr	r2, [r3, #16]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	441a      	add	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	b2db      	uxtb	r3, r3
 8004088:	4619      	mov	r1, r3
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f004 fbfa 	bl	8008884 <HAL_PCD_DataOutStageCallback>
 8004090:	e046      	b.n	8004120 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	4a26      	ldr	r2, [pc, #152]	@ (8004130 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d124      	bne.n	80040e4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00a      	beq.n	80040ba <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	015a      	lsls	r2, r3, #5
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	4413      	add	r3, r2
 80040ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040b0:	461a      	mov	r2, r3
 80040b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040b6:	6093      	str	r3, [r2, #8]
 80040b8:	e032      	b.n	8004120 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	f003 0320 	and.w	r3, r3, #32
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d008      	beq.n	80040d6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	015a      	lsls	r2, r3, #5
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	4413      	add	r3, r2
 80040cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040d0:	461a      	mov	r2, r3
 80040d2:	2320      	movs	r3, #32
 80040d4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	4619      	mov	r1, r3
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f004 fbd1 	bl	8008884 <HAL_PCD_DataOutStageCallback>
 80040e2:	e01d      	b.n	8004120 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d114      	bne.n	8004114 <PCD_EP_OutXfrComplete_int+0x1b0>
 80040ea:	6879      	ldr	r1, [r7, #4]
 80040ec:	683a      	ldr	r2, [r7, #0]
 80040ee:	4613      	mov	r3, r2
 80040f0:	00db      	lsls	r3, r3, #3
 80040f2:	4413      	add	r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	440b      	add	r3, r1
 80040f8:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d108      	bne.n	8004114 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6818      	ldr	r0, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800410c:	461a      	mov	r2, r3
 800410e:	2100      	movs	r1, #0
 8004110:	f002 f8e6 	bl	80062e0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	b2db      	uxtb	r3, r3
 8004118:	4619      	mov	r1, r3
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f004 fbb2 	bl	8008884 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3720      	adds	r7, #32
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	4f54300a 	.word	0x4f54300a
 8004130:	4f54310a 	.word	0x4f54310a

08004134 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b086      	sub	sp, #24
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	333c      	adds	r3, #60	@ 0x3c
 800414c:	3304      	adds	r3, #4
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	015a      	lsls	r2, r3, #5
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	4413      	add	r3, r2
 800415a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	4a15      	ldr	r2, [pc, #84]	@ (80041bc <PCD_EP_OutSetupPacket_int+0x88>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d90e      	bls.n	8004188 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004170:	2b00      	cmp	r3, #0
 8004172:	d009      	beq.n	8004188 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	015a      	lsls	r2, r3, #5
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	4413      	add	r3, r2
 800417c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004180:	461a      	mov	r2, r3
 8004182:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004186:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f004 fb69 	bl	8008860 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	4a0a      	ldr	r2, [pc, #40]	@ (80041bc <PCD_EP_OutSetupPacket_int+0x88>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d90c      	bls.n	80041b0 <PCD_EP_OutSetupPacket_int+0x7c>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d108      	bne.n	80041b0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6818      	ldr	r0, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80041a8:	461a      	mov	r2, r3
 80041aa:	2101      	movs	r1, #1
 80041ac:	f002 f898 	bl	80062e0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3718      	adds	r7, #24
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	4f54300a 	.word	0x4f54300a

080041c0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	460b      	mov	r3, r1
 80041ca:	70fb      	strb	r3, [r7, #3]
 80041cc:	4613      	mov	r3, r2
 80041ce:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80041d8:	78fb      	ldrb	r3, [r7, #3]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d107      	bne.n	80041ee <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80041de:	883b      	ldrh	r3, [r7, #0]
 80041e0:	0419      	lsls	r1, r3, #16
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68ba      	ldr	r2, [r7, #8]
 80041e8:	430a      	orrs	r2, r1
 80041ea:	629a      	str	r2, [r3, #40]	@ 0x28
 80041ec:	e028      	b.n	8004240 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041f4:	0c1b      	lsrs	r3, r3, #16
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	4413      	add	r3, r2
 80041fa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80041fc:	2300      	movs	r3, #0
 80041fe:	73fb      	strb	r3, [r7, #15]
 8004200:	e00d      	b.n	800421e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	7bfb      	ldrb	r3, [r7, #15]
 8004208:	3340      	adds	r3, #64	@ 0x40
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	4413      	add	r3, r2
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	0c1b      	lsrs	r3, r3, #16
 8004212:	68ba      	ldr	r2, [r7, #8]
 8004214:	4413      	add	r3, r2
 8004216:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004218:	7bfb      	ldrb	r3, [r7, #15]
 800421a:	3301      	adds	r3, #1
 800421c:	73fb      	strb	r3, [r7, #15]
 800421e:	7bfa      	ldrb	r2, [r7, #15]
 8004220:	78fb      	ldrb	r3, [r7, #3]
 8004222:	3b01      	subs	r3, #1
 8004224:	429a      	cmp	r2, r3
 8004226:	d3ec      	bcc.n	8004202 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004228:	883b      	ldrh	r3, [r7, #0]
 800422a:	0418      	lsls	r0, r3, #16
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6819      	ldr	r1, [r3, #0]
 8004230:	78fb      	ldrb	r3, [r7, #3]
 8004232:	3b01      	subs	r3, #1
 8004234:	68ba      	ldr	r2, [r7, #8]
 8004236:	4302      	orrs	r2, r0
 8004238:	3340      	adds	r3, #64	@ 0x40
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	440b      	add	r3, r1
 800423e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3714      	adds	r7, #20
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr

0800424e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800424e:	b480      	push	{r7}
 8004250:	b083      	sub	sp, #12
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
 8004256:	460b      	mov	r3, r1
 8004258:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	887a      	ldrh	r2, [r7, #2]
 8004260:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	460b      	mov	r3, r1
 800427a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800427c:	bf00      	nop
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e267      	b.n	800476a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d075      	beq.n	8004392 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042a6:	4b88      	ldr	r3, [pc, #544]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f003 030c 	and.w	r3, r3, #12
 80042ae:	2b04      	cmp	r3, #4
 80042b0:	d00c      	beq.n	80042cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042b2:	4b85      	ldr	r3, [pc, #532]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042ba:	2b08      	cmp	r3, #8
 80042bc:	d112      	bne.n	80042e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042be:	4b82      	ldr	r3, [pc, #520]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042ca:	d10b      	bne.n	80042e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042cc:	4b7e      	ldr	r3, [pc, #504]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d05b      	beq.n	8004390 <HAL_RCC_OscConfig+0x108>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d157      	bne.n	8004390 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e242      	b.n	800476a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042ec:	d106      	bne.n	80042fc <HAL_RCC_OscConfig+0x74>
 80042ee:	4b76      	ldr	r3, [pc, #472]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a75      	ldr	r2, [pc, #468]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 80042f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042f8:	6013      	str	r3, [r2, #0]
 80042fa:	e01d      	b.n	8004338 <HAL_RCC_OscConfig+0xb0>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004304:	d10c      	bne.n	8004320 <HAL_RCC_OscConfig+0x98>
 8004306:	4b70      	ldr	r3, [pc, #448]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a6f      	ldr	r2, [pc, #444]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 800430c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004310:	6013      	str	r3, [r2, #0]
 8004312:	4b6d      	ldr	r3, [pc, #436]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a6c      	ldr	r2, [pc, #432]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 8004318:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800431c:	6013      	str	r3, [r2, #0]
 800431e:	e00b      	b.n	8004338 <HAL_RCC_OscConfig+0xb0>
 8004320:	4b69      	ldr	r3, [pc, #420]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a68      	ldr	r2, [pc, #416]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 8004326:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800432a:	6013      	str	r3, [r2, #0]
 800432c:	4b66      	ldr	r3, [pc, #408]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a65      	ldr	r2, [pc, #404]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 8004332:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004336:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d013      	beq.n	8004368 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004340:	f7fd fbcc 	bl	8001adc <HAL_GetTick>
 8004344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004346:	e008      	b.n	800435a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004348:	f7fd fbc8 	bl	8001adc <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	2b64      	cmp	r3, #100	@ 0x64
 8004354:	d901      	bls.n	800435a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e207      	b.n	800476a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800435a:	4b5b      	ldr	r3, [pc, #364]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d0f0      	beq.n	8004348 <HAL_RCC_OscConfig+0xc0>
 8004366:	e014      	b.n	8004392 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004368:	f7fd fbb8 	bl	8001adc <HAL_GetTick>
 800436c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800436e:	e008      	b.n	8004382 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004370:	f7fd fbb4 	bl	8001adc <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b64      	cmp	r3, #100	@ 0x64
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e1f3      	b.n	800476a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004382:	4b51      	ldr	r3, [pc, #324]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1f0      	bne.n	8004370 <HAL_RCC_OscConfig+0xe8>
 800438e:	e000      	b.n	8004392 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004390:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d063      	beq.n	8004466 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800439e:	4b4a      	ldr	r3, [pc, #296]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f003 030c 	and.w	r3, r3, #12
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00b      	beq.n	80043c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043aa:	4b47      	ldr	r3, [pc, #284]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043b2:	2b08      	cmp	r3, #8
 80043b4:	d11c      	bne.n	80043f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043b6:	4b44      	ldr	r3, [pc, #272]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d116      	bne.n	80043f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043c2:	4b41      	ldr	r3, [pc, #260]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d005      	beq.n	80043da <HAL_RCC_OscConfig+0x152>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d001      	beq.n	80043da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e1c7      	b.n	800476a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043da:	4b3b      	ldr	r3, [pc, #236]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	00db      	lsls	r3, r3, #3
 80043e8:	4937      	ldr	r1, [pc, #220]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ee:	e03a      	b.n	8004466 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d020      	beq.n	800443a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043f8:	4b34      	ldr	r3, [pc, #208]	@ (80044cc <HAL_RCC_OscConfig+0x244>)
 80043fa:	2201      	movs	r2, #1
 80043fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043fe:	f7fd fb6d 	bl	8001adc <HAL_GetTick>
 8004402:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004404:	e008      	b.n	8004418 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004406:	f7fd fb69 	bl	8001adc <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	2b02      	cmp	r3, #2
 8004412:	d901      	bls.n	8004418 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e1a8      	b.n	800476a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004418:	4b2b      	ldr	r3, [pc, #172]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d0f0      	beq.n	8004406 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004424:	4b28      	ldr	r3, [pc, #160]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	00db      	lsls	r3, r3, #3
 8004432:	4925      	ldr	r1, [pc, #148]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 8004434:	4313      	orrs	r3, r2
 8004436:	600b      	str	r3, [r1, #0]
 8004438:	e015      	b.n	8004466 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800443a:	4b24      	ldr	r3, [pc, #144]	@ (80044cc <HAL_RCC_OscConfig+0x244>)
 800443c:	2200      	movs	r2, #0
 800443e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004440:	f7fd fb4c 	bl	8001adc <HAL_GetTick>
 8004444:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004446:	e008      	b.n	800445a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004448:	f7fd fb48 	bl	8001adc <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b02      	cmp	r3, #2
 8004454:	d901      	bls.n	800445a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e187      	b.n	800476a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800445a:	4b1b      	ldr	r3, [pc, #108]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1f0      	bne.n	8004448 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0308 	and.w	r3, r3, #8
 800446e:	2b00      	cmp	r3, #0
 8004470:	d036      	beq.n	80044e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d016      	beq.n	80044a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800447a:	4b15      	ldr	r3, [pc, #84]	@ (80044d0 <HAL_RCC_OscConfig+0x248>)
 800447c:	2201      	movs	r2, #1
 800447e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004480:	f7fd fb2c 	bl	8001adc <HAL_GetTick>
 8004484:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004488:	f7fd fb28 	bl	8001adc <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b02      	cmp	r3, #2
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e167      	b.n	800476a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800449a:	4b0b      	ldr	r3, [pc, #44]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 800449c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d0f0      	beq.n	8004488 <HAL_RCC_OscConfig+0x200>
 80044a6:	e01b      	b.n	80044e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044a8:	4b09      	ldr	r3, [pc, #36]	@ (80044d0 <HAL_RCC_OscConfig+0x248>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044ae:	f7fd fb15 	bl	8001adc <HAL_GetTick>
 80044b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044b4:	e00e      	b.n	80044d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044b6:	f7fd fb11 	bl	8001adc <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d907      	bls.n	80044d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e150      	b.n	800476a <HAL_RCC_OscConfig+0x4e2>
 80044c8:	40023800 	.word	0x40023800
 80044cc:	42470000 	.word	0x42470000
 80044d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044d4:	4b88      	ldr	r3, [pc, #544]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 80044d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044d8:	f003 0302 	and.w	r3, r3, #2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1ea      	bne.n	80044b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0304 	and.w	r3, r3, #4
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	f000 8097 	beq.w	800461c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044ee:	2300      	movs	r3, #0
 80044f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044f2:	4b81      	ldr	r3, [pc, #516]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 80044f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10f      	bne.n	800451e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044fe:	2300      	movs	r3, #0
 8004500:	60bb      	str	r3, [r7, #8]
 8004502:	4b7d      	ldr	r3, [pc, #500]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 8004504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004506:	4a7c      	ldr	r2, [pc, #496]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 8004508:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800450c:	6413      	str	r3, [r2, #64]	@ 0x40
 800450e:	4b7a      	ldr	r3, [pc, #488]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 8004510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004512:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004516:	60bb      	str	r3, [r7, #8]
 8004518:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800451a:	2301      	movs	r3, #1
 800451c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800451e:	4b77      	ldr	r3, [pc, #476]	@ (80046fc <HAL_RCC_OscConfig+0x474>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004526:	2b00      	cmp	r3, #0
 8004528:	d118      	bne.n	800455c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800452a:	4b74      	ldr	r3, [pc, #464]	@ (80046fc <HAL_RCC_OscConfig+0x474>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a73      	ldr	r2, [pc, #460]	@ (80046fc <HAL_RCC_OscConfig+0x474>)
 8004530:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004534:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004536:	f7fd fad1 	bl	8001adc <HAL_GetTick>
 800453a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800453c:	e008      	b.n	8004550 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800453e:	f7fd facd 	bl	8001adc <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	2b02      	cmp	r3, #2
 800454a:	d901      	bls.n	8004550 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e10c      	b.n	800476a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004550:	4b6a      	ldr	r3, [pc, #424]	@ (80046fc <HAL_RCC_OscConfig+0x474>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004558:	2b00      	cmp	r3, #0
 800455a:	d0f0      	beq.n	800453e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	2b01      	cmp	r3, #1
 8004562:	d106      	bne.n	8004572 <HAL_RCC_OscConfig+0x2ea>
 8004564:	4b64      	ldr	r3, [pc, #400]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 8004566:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004568:	4a63      	ldr	r2, [pc, #396]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 800456a:	f043 0301 	orr.w	r3, r3, #1
 800456e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004570:	e01c      	b.n	80045ac <HAL_RCC_OscConfig+0x324>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	2b05      	cmp	r3, #5
 8004578:	d10c      	bne.n	8004594 <HAL_RCC_OscConfig+0x30c>
 800457a:	4b5f      	ldr	r3, [pc, #380]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 800457c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800457e:	4a5e      	ldr	r2, [pc, #376]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 8004580:	f043 0304 	orr.w	r3, r3, #4
 8004584:	6713      	str	r3, [r2, #112]	@ 0x70
 8004586:	4b5c      	ldr	r3, [pc, #368]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 8004588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800458a:	4a5b      	ldr	r2, [pc, #364]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 800458c:	f043 0301 	orr.w	r3, r3, #1
 8004590:	6713      	str	r3, [r2, #112]	@ 0x70
 8004592:	e00b      	b.n	80045ac <HAL_RCC_OscConfig+0x324>
 8004594:	4b58      	ldr	r3, [pc, #352]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 8004596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004598:	4a57      	ldr	r2, [pc, #348]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 800459a:	f023 0301 	bic.w	r3, r3, #1
 800459e:	6713      	str	r3, [r2, #112]	@ 0x70
 80045a0:	4b55      	ldr	r3, [pc, #340]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 80045a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045a4:	4a54      	ldr	r2, [pc, #336]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 80045a6:	f023 0304 	bic.w	r3, r3, #4
 80045aa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d015      	beq.n	80045e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b4:	f7fd fa92 	bl	8001adc <HAL_GetTick>
 80045b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ba:	e00a      	b.n	80045d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045bc:	f7fd fa8e 	bl	8001adc <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e0cb      	b.n	800476a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d2:	4b49      	ldr	r3, [pc, #292]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 80045d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d0ee      	beq.n	80045bc <HAL_RCC_OscConfig+0x334>
 80045de:	e014      	b.n	800460a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045e0:	f7fd fa7c 	bl	8001adc <HAL_GetTick>
 80045e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045e6:	e00a      	b.n	80045fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045e8:	f7fd fa78 	bl	8001adc <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e0b5      	b.n	800476a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045fe:	4b3e      	ldr	r3, [pc, #248]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 8004600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1ee      	bne.n	80045e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800460a:	7dfb      	ldrb	r3, [r7, #23]
 800460c:	2b01      	cmp	r3, #1
 800460e:	d105      	bne.n	800461c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004610:	4b39      	ldr	r3, [pc, #228]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 8004612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004614:	4a38      	ldr	r2, [pc, #224]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 8004616:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800461a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	2b00      	cmp	r3, #0
 8004622:	f000 80a1 	beq.w	8004768 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004626:	4b34      	ldr	r3, [pc, #208]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f003 030c 	and.w	r3, r3, #12
 800462e:	2b08      	cmp	r3, #8
 8004630:	d05c      	beq.n	80046ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	2b02      	cmp	r3, #2
 8004638:	d141      	bne.n	80046be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800463a:	4b31      	ldr	r3, [pc, #196]	@ (8004700 <HAL_RCC_OscConfig+0x478>)
 800463c:	2200      	movs	r2, #0
 800463e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004640:	f7fd fa4c 	bl	8001adc <HAL_GetTick>
 8004644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004646:	e008      	b.n	800465a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004648:	f7fd fa48 	bl	8001adc <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b02      	cmp	r3, #2
 8004654:	d901      	bls.n	800465a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e087      	b.n	800476a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800465a:	4b27      	ldr	r3, [pc, #156]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1f0      	bne.n	8004648 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	69da      	ldr	r2, [r3, #28]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a1b      	ldr	r3, [r3, #32]
 800466e:	431a      	orrs	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004674:	019b      	lsls	r3, r3, #6
 8004676:	431a      	orrs	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800467c:	085b      	lsrs	r3, r3, #1
 800467e:	3b01      	subs	r3, #1
 8004680:	041b      	lsls	r3, r3, #16
 8004682:	431a      	orrs	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004688:	061b      	lsls	r3, r3, #24
 800468a:	491b      	ldr	r1, [pc, #108]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 800468c:	4313      	orrs	r3, r2
 800468e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004690:	4b1b      	ldr	r3, [pc, #108]	@ (8004700 <HAL_RCC_OscConfig+0x478>)
 8004692:	2201      	movs	r2, #1
 8004694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004696:	f7fd fa21 	bl	8001adc <HAL_GetTick>
 800469a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800469c:	e008      	b.n	80046b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800469e:	f7fd fa1d 	bl	8001adc <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d901      	bls.n	80046b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e05c      	b.n	800476a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046b0:	4b11      	ldr	r3, [pc, #68]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d0f0      	beq.n	800469e <HAL_RCC_OscConfig+0x416>
 80046bc:	e054      	b.n	8004768 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046be:	4b10      	ldr	r3, [pc, #64]	@ (8004700 <HAL_RCC_OscConfig+0x478>)
 80046c0:	2200      	movs	r2, #0
 80046c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c4:	f7fd fa0a 	bl	8001adc <HAL_GetTick>
 80046c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046ca:	e008      	b.n	80046de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046cc:	f7fd fa06 	bl	8001adc <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d901      	bls.n	80046de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e045      	b.n	800476a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046de:	4b06      	ldr	r3, [pc, #24]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1f0      	bne.n	80046cc <HAL_RCC_OscConfig+0x444>
 80046ea:	e03d      	b.n	8004768 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d107      	bne.n	8004704 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e038      	b.n	800476a <HAL_RCC_OscConfig+0x4e2>
 80046f8:	40023800 	.word	0x40023800
 80046fc:	40007000 	.word	0x40007000
 8004700:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004704:	4b1b      	ldr	r3, [pc, #108]	@ (8004774 <HAL_RCC_OscConfig+0x4ec>)
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	699b      	ldr	r3, [r3, #24]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d028      	beq.n	8004764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800471c:	429a      	cmp	r2, r3
 800471e:	d121      	bne.n	8004764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800472a:	429a      	cmp	r2, r3
 800472c:	d11a      	bne.n	8004764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004734:	4013      	ands	r3, r2
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800473a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800473c:	4293      	cmp	r3, r2
 800473e:	d111      	bne.n	8004764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800474a:	085b      	lsrs	r3, r3, #1
 800474c:	3b01      	subs	r3, #1
 800474e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004750:	429a      	cmp	r2, r3
 8004752:	d107      	bne.n	8004764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800475e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004760:	429a      	cmp	r2, r3
 8004762:	d001      	beq.n	8004768 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e000      	b.n	800476a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3718      	adds	r7, #24
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	40023800 	.word	0x40023800

08004778 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d101      	bne.n	800478c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e0cc      	b.n	8004926 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800478c:	4b68      	ldr	r3, [pc, #416]	@ (8004930 <HAL_RCC_ClockConfig+0x1b8>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0307 	and.w	r3, r3, #7
 8004794:	683a      	ldr	r2, [r7, #0]
 8004796:	429a      	cmp	r2, r3
 8004798:	d90c      	bls.n	80047b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800479a:	4b65      	ldr	r3, [pc, #404]	@ (8004930 <HAL_RCC_ClockConfig+0x1b8>)
 800479c:	683a      	ldr	r2, [r7, #0]
 800479e:	b2d2      	uxtb	r2, r2
 80047a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047a2:	4b63      	ldr	r3, [pc, #396]	@ (8004930 <HAL_RCC_ClockConfig+0x1b8>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0307 	and.w	r3, r3, #7
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d001      	beq.n	80047b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e0b8      	b.n	8004926 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0302 	and.w	r3, r3, #2
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d020      	beq.n	8004802 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0304 	and.w	r3, r3, #4
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d005      	beq.n	80047d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047cc:	4b59      	ldr	r3, [pc, #356]	@ (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	4a58      	ldr	r2, [pc, #352]	@ (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80047d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80047d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0308 	and.w	r3, r3, #8
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d005      	beq.n	80047f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047e4:	4b53      	ldr	r3, [pc, #332]	@ (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	4a52      	ldr	r2, [pc, #328]	@ (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80047ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80047ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047f0:	4b50      	ldr	r3, [pc, #320]	@ (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	494d      	ldr	r1, [pc, #308]	@ (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	d044      	beq.n	8004898 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d107      	bne.n	8004826 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004816:	4b47      	ldr	r3, [pc, #284]	@ (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d119      	bne.n	8004856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e07f      	b.n	8004926 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	2b02      	cmp	r3, #2
 800482c:	d003      	beq.n	8004836 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004832:	2b03      	cmp	r3, #3
 8004834:	d107      	bne.n	8004846 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004836:	4b3f      	ldr	r3, [pc, #252]	@ (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d109      	bne.n	8004856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e06f      	b.n	8004926 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004846:	4b3b      	ldr	r3, [pc, #236]	@ (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0302 	and.w	r3, r3, #2
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e067      	b.n	8004926 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004856:	4b37      	ldr	r3, [pc, #220]	@ (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f023 0203 	bic.w	r2, r3, #3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	4934      	ldr	r1, [pc, #208]	@ (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 8004864:	4313      	orrs	r3, r2
 8004866:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004868:	f7fd f938 	bl	8001adc <HAL_GetTick>
 800486c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800486e:	e00a      	b.n	8004886 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004870:	f7fd f934 	bl	8001adc <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800487e:	4293      	cmp	r3, r2
 8004880:	d901      	bls.n	8004886 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e04f      	b.n	8004926 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004886:	4b2b      	ldr	r3, [pc, #172]	@ (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f003 020c 	and.w	r2, r3, #12
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	429a      	cmp	r2, r3
 8004896:	d1eb      	bne.n	8004870 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004898:	4b25      	ldr	r3, [pc, #148]	@ (8004930 <HAL_RCC_ClockConfig+0x1b8>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0307 	and.w	r3, r3, #7
 80048a0:	683a      	ldr	r2, [r7, #0]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d20c      	bcs.n	80048c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048a6:	4b22      	ldr	r3, [pc, #136]	@ (8004930 <HAL_RCC_ClockConfig+0x1b8>)
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	b2d2      	uxtb	r2, r2
 80048ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ae:	4b20      	ldr	r3, [pc, #128]	@ (8004930 <HAL_RCC_ClockConfig+0x1b8>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0307 	and.w	r3, r3, #7
 80048b6:	683a      	ldr	r2, [r7, #0]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d001      	beq.n	80048c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e032      	b.n	8004926 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0304 	and.w	r3, r3, #4
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d008      	beq.n	80048de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048cc:	4b19      	ldr	r3, [pc, #100]	@ (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	4916      	ldr	r1, [pc, #88]	@ (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0308 	and.w	r3, r3, #8
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d009      	beq.n	80048fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048ea:	4b12      	ldr	r3, [pc, #72]	@ (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	00db      	lsls	r3, r3, #3
 80048f8:	490e      	ldr	r1, [pc, #56]	@ (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048fe:	f000 f821 	bl	8004944 <HAL_RCC_GetSysClockFreq>
 8004902:	4602      	mov	r2, r0
 8004904:	4b0b      	ldr	r3, [pc, #44]	@ (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	091b      	lsrs	r3, r3, #4
 800490a:	f003 030f 	and.w	r3, r3, #15
 800490e:	490a      	ldr	r1, [pc, #40]	@ (8004938 <HAL_RCC_ClockConfig+0x1c0>)
 8004910:	5ccb      	ldrb	r3, [r1, r3]
 8004912:	fa22 f303 	lsr.w	r3, r2, r3
 8004916:	4a09      	ldr	r2, [pc, #36]	@ (800493c <HAL_RCC_ClockConfig+0x1c4>)
 8004918:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800491a:	4b09      	ldr	r3, [pc, #36]	@ (8004940 <HAL_RCC_ClockConfig+0x1c8>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4618      	mov	r0, r3
 8004920:	f7fd f898 	bl	8001a54 <HAL_InitTick>

  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3710      	adds	r7, #16
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	40023c00 	.word	0x40023c00
 8004934:	40023800 	.word	0x40023800
 8004938:	08009868 	.word	0x08009868
 800493c:	20000000 	.word	0x20000000
 8004940:	20000004 	.word	0x20000004

08004944 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004944:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004948:	b094      	sub	sp, #80	@ 0x50
 800494a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800494c:	2300      	movs	r3, #0
 800494e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004950:	2300      	movs	r3, #0
 8004952:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004954:	2300      	movs	r3, #0
 8004956:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004958:	2300      	movs	r3, #0
 800495a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800495c:	4b79      	ldr	r3, [pc, #484]	@ (8004b44 <HAL_RCC_GetSysClockFreq+0x200>)
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f003 030c 	and.w	r3, r3, #12
 8004964:	2b08      	cmp	r3, #8
 8004966:	d00d      	beq.n	8004984 <HAL_RCC_GetSysClockFreq+0x40>
 8004968:	2b08      	cmp	r3, #8
 800496a:	f200 80e1 	bhi.w	8004b30 <HAL_RCC_GetSysClockFreq+0x1ec>
 800496e:	2b00      	cmp	r3, #0
 8004970:	d002      	beq.n	8004978 <HAL_RCC_GetSysClockFreq+0x34>
 8004972:	2b04      	cmp	r3, #4
 8004974:	d003      	beq.n	800497e <HAL_RCC_GetSysClockFreq+0x3a>
 8004976:	e0db      	b.n	8004b30 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004978:	4b73      	ldr	r3, [pc, #460]	@ (8004b48 <HAL_RCC_GetSysClockFreq+0x204>)
 800497a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800497c:	e0db      	b.n	8004b36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800497e:	4b73      	ldr	r3, [pc, #460]	@ (8004b4c <HAL_RCC_GetSysClockFreq+0x208>)
 8004980:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004982:	e0d8      	b.n	8004b36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004984:	4b6f      	ldr	r3, [pc, #444]	@ (8004b44 <HAL_RCC_GetSysClockFreq+0x200>)
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800498c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800498e:	4b6d      	ldr	r3, [pc, #436]	@ (8004b44 <HAL_RCC_GetSysClockFreq+0x200>)
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d063      	beq.n	8004a62 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800499a:	4b6a      	ldr	r3, [pc, #424]	@ (8004b44 <HAL_RCC_GetSysClockFreq+0x200>)
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	099b      	lsrs	r3, r3, #6
 80049a0:	2200      	movs	r2, #0
 80049a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80049a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80049a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80049ae:	2300      	movs	r3, #0
 80049b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80049b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80049b6:	4622      	mov	r2, r4
 80049b8:	462b      	mov	r3, r5
 80049ba:	f04f 0000 	mov.w	r0, #0
 80049be:	f04f 0100 	mov.w	r1, #0
 80049c2:	0159      	lsls	r1, r3, #5
 80049c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049c8:	0150      	lsls	r0, r2, #5
 80049ca:	4602      	mov	r2, r0
 80049cc:	460b      	mov	r3, r1
 80049ce:	4621      	mov	r1, r4
 80049d0:	1a51      	subs	r1, r2, r1
 80049d2:	6139      	str	r1, [r7, #16]
 80049d4:	4629      	mov	r1, r5
 80049d6:	eb63 0301 	sbc.w	r3, r3, r1
 80049da:	617b      	str	r3, [r7, #20]
 80049dc:	f04f 0200 	mov.w	r2, #0
 80049e0:	f04f 0300 	mov.w	r3, #0
 80049e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049e8:	4659      	mov	r1, fp
 80049ea:	018b      	lsls	r3, r1, #6
 80049ec:	4651      	mov	r1, sl
 80049ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049f2:	4651      	mov	r1, sl
 80049f4:	018a      	lsls	r2, r1, #6
 80049f6:	4651      	mov	r1, sl
 80049f8:	ebb2 0801 	subs.w	r8, r2, r1
 80049fc:	4659      	mov	r1, fp
 80049fe:	eb63 0901 	sbc.w	r9, r3, r1
 8004a02:	f04f 0200 	mov.w	r2, #0
 8004a06:	f04f 0300 	mov.w	r3, #0
 8004a0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a16:	4690      	mov	r8, r2
 8004a18:	4699      	mov	r9, r3
 8004a1a:	4623      	mov	r3, r4
 8004a1c:	eb18 0303 	adds.w	r3, r8, r3
 8004a20:	60bb      	str	r3, [r7, #8]
 8004a22:	462b      	mov	r3, r5
 8004a24:	eb49 0303 	adc.w	r3, r9, r3
 8004a28:	60fb      	str	r3, [r7, #12]
 8004a2a:	f04f 0200 	mov.w	r2, #0
 8004a2e:	f04f 0300 	mov.w	r3, #0
 8004a32:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a36:	4629      	mov	r1, r5
 8004a38:	024b      	lsls	r3, r1, #9
 8004a3a:	4621      	mov	r1, r4
 8004a3c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a40:	4621      	mov	r1, r4
 8004a42:	024a      	lsls	r2, r1, #9
 8004a44:	4610      	mov	r0, r2
 8004a46:	4619      	mov	r1, r3
 8004a48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a54:	f7fb fc14 	bl	8000280 <__aeabi_uldivmod>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a60:	e058      	b.n	8004b14 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a62:	4b38      	ldr	r3, [pc, #224]	@ (8004b44 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	099b      	lsrs	r3, r3, #6
 8004a68:	2200      	movs	r2, #0
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	4611      	mov	r1, r2
 8004a6e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a72:	623b      	str	r3, [r7, #32]
 8004a74:	2300      	movs	r3, #0
 8004a76:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a78:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a7c:	4642      	mov	r2, r8
 8004a7e:	464b      	mov	r3, r9
 8004a80:	f04f 0000 	mov.w	r0, #0
 8004a84:	f04f 0100 	mov.w	r1, #0
 8004a88:	0159      	lsls	r1, r3, #5
 8004a8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a8e:	0150      	lsls	r0, r2, #5
 8004a90:	4602      	mov	r2, r0
 8004a92:	460b      	mov	r3, r1
 8004a94:	4641      	mov	r1, r8
 8004a96:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a9a:	4649      	mov	r1, r9
 8004a9c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004aa0:	f04f 0200 	mov.w	r2, #0
 8004aa4:	f04f 0300 	mov.w	r3, #0
 8004aa8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004aac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ab0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ab4:	ebb2 040a 	subs.w	r4, r2, sl
 8004ab8:	eb63 050b 	sbc.w	r5, r3, fp
 8004abc:	f04f 0200 	mov.w	r2, #0
 8004ac0:	f04f 0300 	mov.w	r3, #0
 8004ac4:	00eb      	lsls	r3, r5, #3
 8004ac6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004aca:	00e2      	lsls	r2, r4, #3
 8004acc:	4614      	mov	r4, r2
 8004ace:	461d      	mov	r5, r3
 8004ad0:	4643      	mov	r3, r8
 8004ad2:	18e3      	adds	r3, r4, r3
 8004ad4:	603b      	str	r3, [r7, #0]
 8004ad6:	464b      	mov	r3, r9
 8004ad8:	eb45 0303 	adc.w	r3, r5, r3
 8004adc:	607b      	str	r3, [r7, #4]
 8004ade:	f04f 0200 	mov.w	r2, #0
 8004ae2:	f04f 0300 	mov.w	r3, #0
 8004ae6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004aea:	4629      	mov	r1, r5
 8004aec:	028b      	lsls	r3, r1, #10
 8004aee:	4621      	mov	r1, r4
 8004af0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004af4:	4621      	mov	r1, r4
 8004af6:	028a      	lsls	r2, r1, #10
 8004af8:	4610      	mov	r0, r2
 8004afa:	4619      	mov	r1, r3
 8004afc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004afe:	2200      	movs	r2, #0
 8004b00:	61bb      	str	r3, [r7, #24]
 8004b02:	61fa      	str	r2, [r7, #28]
 8004b04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b08:	f7fb fbba 	bl	8000280 <__aeabi_uldivmod>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	460b      	mov	r3, r1
 8004b10:	4613      	mov	r3, r2
 8004b12:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b14:	4b0b      	ldr	r3, [pc, #44]	@ (8004b44 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	0c1b      	lsrs	r3, r3, #16
 8004b1a:	f003 0303 	and.w	r3, r3, #3
 8004b1e:	3301      	adds	r3, #1
 8004b20:	005b      	lsls	r3, r3, #1
 8004b22:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004b24:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b2c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b2e:	e002      	b.n	8004b36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b30:	4b05      	ldr	r3, [pc, #20]	@ (8004b48 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b32:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3750      	adds	r7, #80	@ 0x50
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b42:	bf00      	nop
 8004b44:	40023800 	.word	0x40023800
 8004b48:	00f42400 	.word	0x00f42400
 8004b4c:	007a1200 	.word	0x007a1200

08004b50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b50:	b480      	push	{r7}
 8004b52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b54:	4b03      	ldr	r3, [pc, #12]	@ (8004b64 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b56:	681b      	ldr	r3, [r3, #0]
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	20000000 	.word	0x20000000

08004b68 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b68:	b084      	sub	sp, #16
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b084      	sub	sp, #16
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
 8004b72:	f107 001c 	add.w	r0, r7, #28
 8004b76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d122      	bne.n	8004bc6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b84:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004b94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004ba8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d105      	bne.n	8004bba <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f001 fbee 	bl	800639c <USB_CoreReset>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	73fb      	strb	r3, [r7, #15]
 8004bc4:	e01a      	b.n	8004bfc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f001 fbe2 	bl	800639c <USB_CoreReset>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004bdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d106      	bne.n	8004bf0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004be6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	639a      	str	r2, [r3, #56]	@ 0x38
 8004bee:	e005      	b.n	8004bfc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bf4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d10b      	bne.n	8004c1a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f043 0206 	orr.w	r2, r3, #6
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f043 0220 	orr.w	r2, r3, #32
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3710      	adds	r7, #16
 8004c20:	46bd      	mov	sp, r7
 8004c22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c26:	b004      	add	sp, #16
 8004c28:	4770      	bx	lr
	...

08004c2c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b087      	sub	sp, #28
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	4613      	mov	r3, r2
 8004c38:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004c3a:	79fb      	ldrb	r3, [r7, #7]
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d165      	bne.n	8004d0c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	4a41      	ldr	r2, [pc, #260]	@ (8004d48 <USB_SetTurnaroundTime+0x11c>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d906      	bls.n	8004c56 <USB_SetTurnaroundTime+0x2a>
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	4a40      	ldr	r2, [pc, #256]	@ (8004d4c <USB_SetTurnaroundTime+0x120>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d202      	bcs.n	8004c56 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004c50:	230f      	movs	r3, #15
 8004c52:	617b      	str	r3, [r7, #20]
 8004c54:	e062      	b.n	8004d1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	4a3c      	ldr	r2, [pc, #240]	@ (8004d4c <USB_SetTurnaroundTime+0x120>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d306      	bcc.n	8004c6c <USB_SetTurnaroundTime+0x40>
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	4a3b      	ldr	r2, [pc, #236]	@ (8004d50 <USB_SetTurnaroundTime+0x124>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d202      	bcs.n	8004c6c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004c66:	230e      	movs	r3, #14
 8004c68:	617b      	str	r3, [r7, #20]
 8004c6a:	e057      	b.n	8004d1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	4a38      	ldr	r2, [pc, #224]	@ (8004d50 <USB_SetTurnaroundTime+0x124>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d306      	bcc.n	8004c82 <USB_SetTurnaroundTime+0x56>
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	4a37      	ldr	r2, [pc, #220]	@ (8004d54 <USB_SetTurnaroundTime+0x128>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d202      	bcs.n	8004c82 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004c7c:	230d      	movs	r3, #13
 8004c7e:	617b      	str	r3, [r7, #20]
 8004c80:	e04c      	b.n	8004d1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	4a33      	ldr	r2, [pc, #204]	@ (8004d54 <USB_SetTurnaroundTime+0x128>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d306      	bcc.n	8004c98 <USB_SetTurnaroundTime+0x6c>
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	4a32      	ldr	r2, [pc, #200]	@ (8004d58 <USB_SetTurnaroundTime+0x12c>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d802      	bhi.n	8004c98 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004c92:	230c      	movs	r3, #12
 8004c94:	617b      	str	r3, [r7, #20]
 8004c96:	e041      	b.n	8004d1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	4a2f      	ldr	r2, [pc, #188]	@ (8004d58 <USB_SetTurnaroundTime+0x12c>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d906      	bls.n	8004cae <USB_SetTurnaroundTime+0x82>
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	4a2e      	ldr	r2, [pc, #184]	@ (8004d5c <USB_SetTurnaroundTime+0x130>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d802      	bhi.n	8004cae <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004ca8:	230b      	movs	r3, #11
 8004caa:	617b      	str	r3, [r7, #20]
 8004cac:	e036      	b.n	8004d1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	4a2a      	ldr	r2, [pc, #168]	@ (8004d5c <USB_SetTurnaroundTime+0x130>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d906      	bls.n	8004cc4 <USB_SetTurnaroundTime+0x98>
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	4a29      	ldr	r2, [pc, #164]	@ (8004d60 <USB_SetTurnaroundTime+0x134>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d802      	bhi.n	8004cc4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004cbe:	230a      	movs	r3, #10
 8004cc0:	617b      	str	r3, [r7, #20]
 8004cc2:	e02b      	b.n	8004d1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	4a26      	ldr	r2, [pc, #152]	@ (8004d60 <USB_SetTurnaroundTime+0x134>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d906      	bls.n	8004cda <USB_SetTurnaroundTime+0xae>
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	4a25      	ldr	r2, [pc, #148]	@ (8004d64 <USB_SetTurnaroundTime+0x138>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d202      	bcs.n	8004cda <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004cd4:	2309      	movs	r3, #9
 8004cd6:	617b      	str	r3, [r7, #20]
 8004cd8:	e020      	b.n	8004d1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	4a21      	ldr	r2, [pc, #132]	@ (8004d64 <USB_SetTurnaroundTime+0x138>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d306      	bcc.n	8004cf0 <USB_SetTurnaroundTime+0xc4>
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	4a20      	ldr	r2, [pc, #128]	@ (8004d68 <USB_SetTurnaroundTime+0x13c>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d802      	bhi.n	8004cf0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004cea:	2308      	movs	r3, #8
 8004cec:	617b      	str	r3, [r7, #20]
 8004cee:	e015      	b.n	8004d1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	4a1d      	ldr	r2, [pc, #116]	@ (8004d68 <USB_SetTurnaroundTime+0x13c>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d906      	bls.n	8004d06 <USB_SetTurnaroundTime+0xda>
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	4a1c      	ldr	r2, [pc, #112]	@ (8004d6c <USB_SetTurnaroundTime+0x140>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d202      	bcs.n	8004d06 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004d00:	2307      	movs	r3, #7
 8004d02:	617b      	str	r3, [r7, #20]
 8004d04:	e00a      	b.n	8004d1c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004d06:	2306      	movs	r3, #6
 8004d08:	617b      	str	r3, [r7, #20]
 8004d0a:	e007      	b.n	8004d1c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004d0c:	79fb      	ldrb	r3, [r7, #7]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d102      	bne.n	8004d18 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004d12:	2309      	movs	r3, #9
 8004d14:	617b      	str	r3, [r7, #20]
 8004d16:	e001      	b.n	8004d1c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004d18:	2309      	movs	r3, #9
 8004d1a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	68da      	ldr	r2, [r3, #12]
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	029b      	lsls	r3, r3, #10
 8004d30:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004d34:	431a      	orrs	r2, r3
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	371c      	adds	r7, #28
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr
 8004d48:	00d8acbf 	.word	0x00d8acbf
 8004d4c:	00e4e1c0 	.word	0x00e4e1c0
 8004d50:	00f42400 	.word	0x00f42400
 8004d54:	01067380 	.word	0x01067380
 8004d58:	011a499f 	.word	0x011a499f
 8004d5c:	01312cff 	.word	0x01312cff
 8004d60:	014ca43f 	.word	0x014ca43f
 8004d64:	016e3600 	.word	0x016e3600
 8004d68:	01a6ab1f 	.word	0x01a6ab1f
 8004d6c:	01e84800 	.word	0x01e84800

08004d70 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f043 0201 	orr.w	r2, r3, #1
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	370c      	adds	r7, #12
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr

08004d92 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d92:	b480      	push	{r7}
 8004d94:	b083      	sub	sp, #12
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f023 0201 	bic.w	r2, r3, #1
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004dd0:	78fb      	ldrb	r3, [r7, #3]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d115      	bne.n	8004e02 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004de2:	2001      	movs	r0, #1
 8004de4:	f7fc fe86 	bl	8001af4 <HAL_Delay>
      ms++;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	3301      	adds	r3, #1
 8004dec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f001 fa45 	bl	800627e <USB_GetMode>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d01e      	beq.n	8004e38 <USB_SetCurrentMode+0x84>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2b31      	cmp	r3, #49	@ 0x31
 8004dfe:	d9f0      	bls.n	8004de2 <USB_SetCurrentMode+0x2e>
 8004e00:	e01a      	b.n	8004e38 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004e02:	78fb      	ldrb	r3, [r7, #3]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d115      	bne.n	8004e34 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e14:	2001      	movs	r0, #1
 8004e16:	f7fc fe6d 	bl	8001af4 <HAL_Delay>
      ms++;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f001 fa2c 	bl	800627e <USB_GetMode>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d005      	beq.n	8004e38 <USB_SetCurrentMode+0x84>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2b31      	cmp	r3, #49	@ 0x31
 8004e30:	d9f0      	bls.n	8004e14 <USB_SetCurrentMode+0x60>
 8004e32:	e001      	b.n	8004e38 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e005      	b.n	8004e44 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2b32      	cmp	r3, #50	@ 0x32
 8004e3c:	d101      	bne.n	8004e42 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e000      	b.n	8004e44 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3710      	adds	r7, #16
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e4c:	b084      	sub	sp, #16
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b086      	sub	sp, #24
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
 8004e56:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004e5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004e66:	2300      	movs	r3, #0
 8004e68:	613b      	str	r3, [r7, #16]
 8004e6a:	e009      	b.n	8004e80 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	3340      	adds	r3, #64	@ 0x40
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	4413      	add	r3, r2
 8004e76:	2200      	movs	r2, #0
 8004e78:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	613b      	str	r3, [r7, #16]
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	2b0e      	cmp	r3, #14
 8004e84:	d9f2      	bls.n	8004e6c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004e86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d11c      	bne.n	8004ec6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e9a:	f043 0302 	orr.w	r3, r3, #2
 8004e9e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ea4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eb0:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ebc:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	639a      	str	r2, [r3, #56]	@ 0x38
 8004ec4:	e00b      	b.n	8004ede <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eca:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ed6:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ef8:	461a      	mov	r2, r3
 8004efa:	680b      	ldr	r3, [r1, #0]
 8004efc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d10c      	bne.n	8004f1e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d104      	bne.n	8004f14 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f000 f965 	bl	80051dc <USB_SetDevSpeed>
 8004f12:	e008      	b.n	8004f26 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004f14:	2101      	movs	r1, #1
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f960 	bl	80051dc <USB_SetDevSpeed>
 8004f1c:	e003      	b.n	8004f26 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004f1e:	2103      	movs	r1, #3
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 f95b 	bl	80051dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004f26:	2110      	movs	r1, #16
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 f8f3 	bl	8005114 <USB_FlushTxFifo>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d001      	beq.n	8004f38 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 f91f 	bl	800517c <USB_FlushRxFifo>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d001      	beq.n	8004f48 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f4e:	461a      	mov	r2, r3
 8004f50:	2300      	movs	r3, #0
 8004f52:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f66:	461a      	mov	r2, r3
 8004f68:	2300      	movs	r3, #0
 8004f6a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	613b      	str	r3, [r7, #16]
 8004f70:	e043      	b.n	8004ffa <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	015a      	lsls	r2, r3, #5
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	4413      	add	r3, r2
 8004f7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f88:	d118      	bne.n	8004fbc <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d10a      	bne.n	8004fa6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	015a      	lsls	r2, r3, #5
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	4413      	add	r3, r2
 8004f98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004fa2:	6013      	str	r3, [r2, #0]
 8004fa4:	e013      	b.n	8004fce <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	015a      	lsls	r2, r3, #5
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	4413      	add	r3, r2
 8004fae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004fb8:	6013      	str	r3, [r2, #0]
 8004fba:	e008      	b.n	8004fce <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	015a      	lsls	r2, r3, #5
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fc8:	461a      	mov	r2, r3
 8004fca:	2300      	movs	r3, #0
 8004fcc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	015a      	lsls	r2, r3, #5
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	4413      	add	r3, r2
 8004fd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fda:	461a      	mov	r2, r3
 8004fdc:	2300      	movs	r3, #0
 8004fde:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	015a      	lsls	r2, r3, #5
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fec:	461a      	mov	r2, r3
 8004fee:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004ff2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	613b      	str	r3, [r7, #16]
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffc:	693a      	ldr	r2, [r7, #16]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d3b7      	bcc.n	8004f72 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005002:	2300      	movs	r3, #0
 8005004:	613b      	str	r3, [r7, #16]
 8005006:	e043      	b.n	8005090 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	015a      	lsls	r2, r3, #5
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	4413      	add	r3, r2
 8005010:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800501a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800501e:	d118      	bne.n	8005052 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d10a      	bne.n	800503c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	015a      	lsls	r2, r3, #5
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	4413      	add	r3, r2
 800502e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005032:	461a      	mov	r2, r3
 8005034:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005038:	6013      	str	r3, [r2, #0]
 800503a:	e013      	b.n	8005064 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	015a      	lsls	r2, r3, #5
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	4413      	add	r3, r2
 8005044:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005048:	461a      	mov	r2, r3
 800504a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800504e:	6013      	str	r3, [r2, #0]
 8005050:	e008      	b.n	8005064 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	015a      	lsls	r2, r3, #5
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	4413      	add	r3, r2
 800505a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800505e:	461a      	mov	r2, r3
 8005060:	2300      	movs	r3, #0
 8005062:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	015a      	lsls	r2, r3, #5
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	4413      	add	r3, r2
 800506c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005070:	461a      	mov	r2, r3
 8005072:	2300      	movs	r3, #0
 8005074:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	015a      	lsls	r2, r3, #5
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	4413      	add	r3, r2
 800507e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005082:	461a      	mov	r2, r3
 8005084:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005088:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	3301      	adds	r3, #1
 800508e:	613b      	str	r3, [r7, #16]
 8005090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	429a      	cmp	r2, r3
 8005096:	d3b7      	bcc.n	8005008 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80050a6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050aa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80050b8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80050ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d105      	bne.n	80050cc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	f043 0210 	orr.w	r2, r3, #16
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	699a      	ldr	r2, [r3, #24]
 80050d0:	4b0f      	ldr	r3, [pc, #60]	@ (8005110 <USB_DevInit+0x2c4>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80050d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d005      	beq.n	80050ea <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	f043 0208 	orr.w	r2, r3, #8
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80050ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d107      	bne.n	8005100 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80050f8:	f043 0304 	orr.w	r3, r3, #4
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005100:	7dfb      	ldrb	r3, [r7, #23]
}
 8005102:	4618      	mov	r0, r3
 8005104:	3718      	adds	r7, #24
 8005106:	46bd      	mov	sp, r7
 8005108:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800510c:	b004      	add	sp, #16
 800510e:	4770      	bx	lr
 8005110:	803c3800 	.word	0x803c3800

08005114 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800511e:	2300      	movs	r3, #0
 8005120:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	3301      	adds	r3, #1
 8005126:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	4a13      	ldr	r2, [pc, #76]	@ (8005178 <USB_FlushTxFifo+0x64>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d901      	bls.n	8005134 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e01b      	b.n	800516c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	2b00      	cmp	r3, #0
 800513a:	daf2      	bge.n	8005122 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800513c:	2300      	movs	r3, #0
 800513e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	019b      	lsls	r3, r3, #6
 8005144:	f043 0220 	orr.w	r2, r3, #32
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	3301      	adds	r3, #1
 8005150:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	4a08      	ldr	r2, [pc, #32]	@ (8005178 <USB_FlushTxFifo+0x64>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d901      	bls.n	800515e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e006      	b.n	800516c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	f003 0320 	and.w	r3, r3, #32
 8005166:	2b20      	cmp	r3, #32
 8005168:	d0f0      	beq.n	800514c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800516a:	2300      	movs	r3, #0
}
 800516c:	4618      	mov	r0, r3
 800516e:	3714      	adds	r7, #20
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr
 8005178:	00030d40 	.word	0x00030d40

0800517c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800517c:	b480      	push	{r7}
 800517e:	b085      	sub	sp, #20
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005184:	2300      	movs	r3, #0
 8005186:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	3301      	adds	r3, #1
 800518c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	4a11      	ldr	r2, [pc, #68]	@ (80051d8 <USB_FlushRxFifo+0x5c>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d901      	bls.n	800519a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e018      	b.n	80051cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	daf2      	bge.n	8005188 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80051a2:	2300      	movs	r3, #0
 80051a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2210      	movs	r2, #16
 80051aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	3301      	adds	r3, #1
 80051b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	4a08      	ldr	r2, [pc, #32]	@ (80051d8 <USB_FlushRxFifo+0x5c>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d901      	bls.n	80051be <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e006      	b.n	80051cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	f003 0310 	and.w	r3, r3, #16
 80051c6:	2b10      	cmp	r3, #16
 80051c8:	d0f0      	beq.n	80051ac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3714      	adds	r7, #20
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr
 80051d8:	00030d40 	.word	0x00030d40

080051dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80051dc:	b480      	push	{r7}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	460b      	mov	r3, r1
 80051e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	78fb      	ldrb	r3, [r7, #3]
 80051f6:	68f9      	ldr	r1, [r7, #12]
 80051f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80051fc:	4313      	orrs	r3, r2
 80051fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3714      	adds	r7, #20
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr

0800520e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800520e:	b480      	push	{r7}
 8005210:	b087      	sub	sp, #28
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	f003 0306 	and.w	r3, r3, #6
 8005226:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d102      	bne.n	8005234 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800522e:	2300      	movs	r3, #0
 8005230:	75fb      	strb	r3, [r7, #23]
 8005232:	e00a      	b.n	800524a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2b02      	cmp	r3, #2
 8005238:	d002      	beq.n	8005240 <USB_GetDevSpeed+0x32>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2b06      	cmp	r3, #6
 800523e:	d102      	bne.n	8005246 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005240:	2302      	movs	r3, #2
 8005242:	75fb      	strb	r3, [r7, #23]
 8005244:	e001      	b.n	800524a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005246:	230f      	movs	r3, #15
 8005248:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800524a:	7dfb      	ldrb	r3, [r7, #23]
}
 800524c:	4618      	mov	r0, r3
 800524e:	371c      	adds	r7, #28
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	785b      	ldrb	r3, [r3, #1]
 8005270:	2b01      	cmp	r3, #1
 8005272:	d13a      	bne.n	80052ea <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800527a:	69da      	ldr	r2, [r3, #28]
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	f003 030f 	and.w	r3, r3, #15
 8005284:	2101      	movs	r1, #1
 8005286:	fa01 f303 	lsl.w	r3, r1, r3
 800528a:	b29b      	uxth	r3, r3
 800528c:	68f9      	ldr	r1, [r7, #12]
 800528e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005292:	4313      	orrs	r3, r2
 8005294:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	015a      	lsls	r2, r3, #5
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	4413      	add	r3, r2
 800529e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d155      	bne.n	8005358 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	015a      	lsls	r2, r3, #5
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	4413      	add	r3, r2
 80052b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	791b      	ldrb	r3, [r3, #4]
 80052c6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80052c8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	059b      	lsls	r3, r3, #22
 80052ce:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80052d0:	4313      	orrs	r3, r2
 80052d2:	68ba      	ldr	r2, [r7, #8]
 80052d4:	0151      	lsls	r1, r2, #5
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	440a      	add	r2, r1
 80052da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052e6:	6013      	str	r3, [r2, #0]
 80052e8:	e036      	b.n	8005358 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052f0:	69da      	ldr	r2, [r3, #28]
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	f003 030f 	and.w	r3, r3, #15
 80052fa:	2101      	movs	r1, #1
 80052fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005300:	041b      	lsls	r3, r3, #16
 8005302:	68f9      	ldr	r1, [r7, #12]
 8005304:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005308:	4313      	orrs	r3, r2
 800530a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	015a      	lsls	r2, r3, #5
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	4413      	add	r3, r2
 8005314:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d11a      	bne.n	8005358 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	015a      	lsls	r2, r3, #5
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	4413      	add	r3, r2
 800532a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	791b      	ldrb	r3, [r3, #4]
 800533c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800533e:	430b      	orrs	r3, r1
 8005340:	4313      	orrs	r3, r2
 8005342:	68ba      	ldr	r2, [r7, #8]
 8005344:	0151      	lsls	r1, r2, #5
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	440a      	add	r2, r1
 800534a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800534e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005352:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005356:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3714      	adds	r7, #20
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
	...

08005368 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	785b      	ldrb	r3, [r3, #1]
 8005380:	2b01      	cmp	r3, #1
 8005382:	d161      	bne.n	8005448 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	015a      	lsls	r2, r3, #5
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4413      	add	r3, r2
 800538c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005396:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800539a:	d11f      	bne.n	80053dc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	015a      	lsls	r2, r3, #5
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	4413      	add	r3, r2
 80053a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68ba      	ldr	r2, [r7, #8]
 80053ac:	0151      	lsls	r1, r2, #5
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	440a      	add	r2, r1
 80053b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053b6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80053ba:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	015a      	lsls	r2, r3, #5
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	4413      	add	r3, r2
 80053c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68ba      	ldr	r2, [r7, #8]
 80053cc:	0151      	lsls	r1, r2, #5
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	440a      	add	r2, r1
 80053d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053d6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80053da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	f003 030f 	and.w	r3, r3, #15
 80053ec:	2101      	movs	r1, #1
 80053ee:	fa01 f303 	lsl.w	r3, r1, r3
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	43db      	mvns	r3, r3
 80053f6:	68f9      	ldr	r1, [r7, #12]
 80053f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80053fc:	4013      	ands	r3, r2
 80053fe:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005406:	69da      	ldr	r2, [r3, #28]
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	f003 030f 	and.w	r3, r3, #15
 8005410:	2101      	movs	r1, #1
 8005412:	fa01 f303 	lsl.w	r3, r1, r3
 8005416:	b29b      	uxth	r3, r3
 8005418:	43db      	mvns	r3, r3
 800541a:	68f9      	ldr	r1, [r7, #12]
 800541c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005420:	4013      	ands	r3, r2
 8005422:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	015a      	lsls	r2, r3, #5
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	4413      	add	r3, r2
 800542c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	0159      	lsls	r1, r3, #5
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	440b      	add	r3, r1
 800543a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800543e:	4619      	mov	r1, r3
 8005440:	4b35      	ldr	r3, [pc, #212]	@ (8005518 <USB_DeactivateEndpoint+0x1b0>)
 8005442:	4013      	ands	r3, r2
 8005444:	600b      	str	r3, [r1, #0]
 8005446:	e060      	b.n	800550a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	015a      	lsls	r2, r3, #5
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	4413      	add	r3, r2
 8005450:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800545a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800545e:	d11f      	bne.n	80054a0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	015a      	lsls	r2, r3, #5
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	4413      	add	r3, r2
 8005468:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68ba      	ldr	r2, [r7, #8]
 8005470:	0151      	lsls	r1, r2, #5
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	440a      	add	r2, r1
 8005476:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800547a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800547e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	015a      	lsls	r2, r3, #5
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	4413      	add	r3, r2
 8005488:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68ba      	ldr	r2, [r7, #8]
 8005490:	0151      	lsls	r1, r2, #5
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	440a      	add	r2, r1
 8005496:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800549a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800549e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	f003 030f 	and.w	r3, r3, #15
 80054b0:	2101      	movs	r1, #1
 80054b2:	fa01 f303 	lsl.w	r3, r1, r3
 80054b6:	041b      	lsls	r3, r3, #16
 80054b8:	43db      	mvns	r3, r3
 80054ba:	68f9      	ldr	r1, [r7, #12]
 80054bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80054c0:	4013      	ands	r3, r2
 80054c2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054ca:	69da      	ldr	r2, [r3, #28]
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	f003 030f 	and.w	r3, r3, #15
 80054d4:	2101      	movs	r1, #1
 80054d6:	fa01 f303 	lsl.w	r3, r1, r3
 80054da:	041b      	lsls	r3, r3, #16
 80054dc:	43db      	mvns	r3, r3
 80054de:	68f9      	ldr	r1, [r7, #12]
 80054e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80054e4:	4013      	ands	r3, r2
 80054e6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	015a      	lsls	r2, r3, #5
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	4413      	add	r3, r2
 80054f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	0159      	lsls	r1, r3, #5
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	440b      	add	r3, r1
 80054fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005502:	4619      	mov	r1, r3
 8005504:	4b05      	ldr	r3, [pc, #20]	@ (800551c <USB_DeactivateEndpoint+0x1b4>)
 8005506:	4013      	ands	r3, r2
 8005508:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3714      	adds	r7, #20
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr
 8005518:	ec337800 	.word	0xec337800
 800551c:	eff37800 	.word	0xeff37800

08005520 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b08a      	sub	sp, #40	@ 0x28
 8005524:	af02      	add	r7, sp, #8
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	4613      	mov	r3, r2
 800552c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	785b      	ldrb	r3, [r3, #1]
 800553c:	2b01      	cmp	r3, #1
 800553e:	f040 815c 	bne.w	80057fa <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d132      	bne.n	80055b0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	015a      	lsls	r2, r3, #5
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	4413      	add	r3, r2
 8005552:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	69ba      	ldr	r2, [r7, #24]
 800555a:	0151      	lsls	r1, r2, #5
 800555c:	69fa      	ldr	r2, [r7, #28]
 800555e:	440a      	add	r2, r1
 8005560:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005564:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005568:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800556c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	015a      	lsls	r2, r3, #5
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	4413      	add	r3, r2
 8005576:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	69ba      	ldr	r2, [r7, #24]
 800557e:	0151      	lsls	r1, r2, #5
 8005580:	69fa      	ldr	r2, [r7, #28]
 8005582:	440a      	add	r2, r1
 8005584:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005588:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800558c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	015a      	lsls	r2, r3, #5
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	4413      	add	r3, r2
 8005596:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	69ba      	ldr	r2, [r7, #24]
 800559e:	0151      	lsls	r1, r2, #5
 80055a0:	69fa      	ldr	r2, [r7, #28]
 80055a2:	440a      	add	r2, r1
 80055a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055a8:	0cdb      	lsrs	r3, r3, #19
 80055aa:	04db      	lsls	r3, r3, #19
 80055ac:	6113      	str	r3, [r2, #16]
 80055ae:	e074      	b.n	800569a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	015a      	lsls	r2, r3, #5
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	4413      	add	r3, r2
 80055b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	69ba      	ldr	r2, [r7, #24]
 80055c0:	0151      	lsls	r1, r2, #5
 80055c2:	69fa      	ldr	r2, [r7, #28]
 80055c4:	440a      	add	r2, r1
 80055c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055ca:	0cdb      	lsrs	r3, r3, #19
 80055cc:	04db      	lsls	r3, r3, #19
 80055ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	015a      	lsls	r2, r3, #5
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	4413      	add	r3, r2
 80055d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	69ba      	ldr	r2, [r7, #24]
 80055e0:	0151      	lsls	r1, r2, #5
 80055e2:	69fa      	ldr	r2, [r7, #28]
 80055e4:	440a      	add	r2, r1
 80055e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055ea:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80055ee:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80055f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	015a      	lsls	r2, r3, #5
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	4413      	add	r3, r2
 80055fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005600:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	6999      	ldr	r1, [r3, #24]
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	440b      	add	r3, r1
 800560c:	1e59      	subs	r1, r3, #1
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	fbb1 f3f3 	udiv	r3, r1, r3
 8005616:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005618:	4b9d      	ldr	r3, [pc, #628]	@ (8005890 <USB_EPStartXfer+0x370>)
 800561a:	400b      	ands	r3, r1
 800561c:	69b9      	ldr	r1, [r7, #24]
 800561e:	0148      	lsls	r0, r1, #5
 8005620:	69f9      	ldr	r1, [r7, #28]
 8005622:	4401      	add	r1, r0
 8005624:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005628:	4313      	orrs	r3, r2
 800562a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	015a      	lsls	r2, r3, #5
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	4413      	add	r3, r2
 8005634:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005638:	691a      	ldr	r2, [r3, #16]
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005642:	69b9      	ldr	r1, [r7, #24]
 8005644:	0148      	lsls	r0, r1, #5
 8005646:	69f9      	ldr	r1, [r7, #28]
 8005648:	4401      	add	r1, r0
 800564a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800564e:	4313      	orrs	r3, r2
 8005650:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	791b      	ldrb	r3, [r3, #4]
 8005656:	2b01      	cmp	r3, #1
 8005658:	d11f      	bne.n	800569a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	015a      	lsls	r2, r3, #5
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	4413      	add	r3, r2
 8005662:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	69ba      	ldr	r2, [r7, #24]
 800566a:	0151      	lsls	r1, r2, #5
 800566c:	69fa      	ldr	r2, [r7, #28]
 800566e:	440a      	add	r2, r1
 8005670:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005674:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005678:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	015a      	lsls	r2, r3, #5
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	4413      	add	r3, r2
 8005682:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	69ba      	ldr	r2, [r7, #24]
 800568a:	0151      	lsls	r1, r2, #5
 800568c:	69fa      	ldr	r2, [r7, #28]
 800568e:	440a      	add	r2, r1
 8005690:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005694:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005698:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800569a:	79fb      	ldrb	r3, [r7, #7]
 800569c:	2b01      	cmp	r3, #1
 800569e:	d14b      	bne.n	8005738 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	695b      	ldr	r3, [r3, #20]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d009      	beq.n	80056bc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	015a      	lsls	r2, r3, #5
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	4413      	add	r3, r2
 80056b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056b4:	461a      	mov	r2, r3
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	695b      	ldr	r3, [r3, #20]
 80056ba:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	791b      	ldrb	r3, [r3, #4]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d128      	bne.n	8005716 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d110      	bne.n	80056f6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	015a      	lsls	r2, r3, #5
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	4413      	add	r3, r2
 80056dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	69ba      	ldr	r2, [r7, #24]
 80056e4:	0151      	lsls	r1, r2, #5
 80056e6:	69fa      	ldr	r2, [r7, #28]
 80056e8:	440a      	add	r2, r1
 80056ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056ee:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80056f2:	6013      	str	r3, [r2, #0]
 80056f4:	e00f      	b.n	8005716 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	015a      	lsls	r2, r3, #5
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	4413      	add	r3, r2
 80056fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	69ba      	ldr	r2, [r7, #24]
 8005706:	0151      	lsls	r1, r2, #5
 8005708:	69fa      	ldr	r2, [r7, #28]
 800570a:	440a      	add	r2, r1
 800570c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005710:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005714:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	015a      	lsls	r2, r3, #5
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	4413      	add	r3, r2
 800571e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	69ba      	ldr	r2, [r7, #24]
 8005726:	0151      	lsls	r1, r2, #5
 8005728:	69fa      	ldr	r2, [r7, #28]
 800572a:	440a      	add	r2, r1
 800572c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005730:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005734:	6013      	str	r3, [r2, #0]
 8005736:	e133      	b.n	80059a0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	015a      	lsls	r2, r3, #5
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	4413      	add	r3, r2
 8005740:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	69ba      	ldr	r2, [r7, #24]
 8005748:	0151      	lsls	r1, r2, #5
 800574a:	69fa      	ldr	r2, [r7, #28]
 800574c:	440a      	add	r2, r1
 800574e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005752:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005756:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	791b      	ldrb	r3, [r3, #4]
 800575c:	2b01      	cmp	r3, #1
 800575e:	d015      	beq.n	800578c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	2b00      	cmp	r3, #0
 8005766:	f000 811b 	beq.w	80059a0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005770:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	f003 030f 	and.w	r3, r3, #15
 800577a:	2101      	movs	r1, #1
 800577c:	fa01 f303 	lsl.w	r3, r1, r3
 8005780:	69f9      	ldr	r1, [r7, #28]
 8005782:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005786:	4313      	orrs	r3, r2
 8005788:	634b      	str	r3, [r1, #52]	@ 0x34
 800578a:	e109      	b.n	80059a0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005798:	2b00      	cmp	r3, #0
 800579a:	d110      	bne.n	80057be <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	015a      	lsls	r2, r3, #5
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	4413      	add	r3, r2
 80057a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	69ba      	ldr	r2, [r7, #24]
 80057ac:	0151      	lsls	r1, r2, #5
 80057ae:	69fa      	ldr	r2, [r7, #28]
 80057b0:	440a      	add	r2, r1
 80057b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057b6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80057ba:	6013      	str	r3, [r2, #0]
 80057bc:	e00f      	b.n	80057de <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	015a      	lsls	r2, r3, #5
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	4413      	add	r3, r2
 80057c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	69ba      	ldr	r2, [r7, #24]
 80057ce:	0151      	lsls	r1, r2, #5
 80057d0:	69fa      	ldr	r2, [r7, #28]
 80057d2:	440a      	add	r2, r1
 80057d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057dc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	6919      	ldr	r1, [r3, #16]
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	781a      	ldrb	r2, [r3, #0]
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	b298      	uxth	r0, r3
 80057ec:	79fb      	ldrb	r3, [r7, #7]
 80057ee:	9300      	str	r3, [sp, #0]
 80057f0:	4603      	mov	r3, r0
 80057f2:	68f8      	ldr	r0, [r7, #12]
 80057f4:	f000 fade 	bl	8005db4 <USB_WritePacket>
 80057f8:	e0d2      	b.n	80059a0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	015a      	lsls	r2, r3, #5
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	4413      	add	r3, r2
 8005802:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	69ba      	ldr	r2, [r7, #24]
 800580a:	0151      	lsls	r1, r2, #5
 800580c:	69fa      	ldr	r2, [r7, #28]
 800580e:	440a      	add	r2, r1
 8005810:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005814:	0cdb      	lsrs	r3, r3, #19
 8005816:	04db      	lsls	r3, r3, #19
 8005818:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	015a      	lsls	r2, r3, #5
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	4413      	add	r3, r2
 8005822:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	69ba      	ldr	r2, [r7, #24]
 800582a:	0151      	lsls	r1, r2, #5
 800582c:	69fa      	ldr	r2, [r7, #28]
 800582e:	440a      	add	r2, r1
 8005830:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005834:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005838:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800583c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d126      	bne.n	8005894 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	015a      	lsls	r2, r3, #5
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	4413      	add	r3, r2
 800584e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005852:	691a      	ldr	r2, [r3, #16]
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800585c:	69b9      	ldr	r1, [r7, #24]
 800585e:	0148      	lsls	r0, r1, #5
 8005860:	69f9      	ldr	r1, [r7, #28]
 8005862:	4401      	add	r1, r0
 8005864:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005868:	4313      	orrs	r3, r2
 800586a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	015a      	lsls	r2, r3, #5
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	4413      	add	r3, r2
 8005874:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	69ba      	ldr	r2, [r7, #24]
 800587c:	0151      	lsls	r1, r2, #5
 800587e:	69fa      	ldr	r2, [r7, #28]
 8005880:	440a      	add	r2, r1
 8005882:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005886:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800588a:	6113      	str	r3, [r2, #16]
 800588c:	e03a      	b.n	8005904 <USB_EPStartXfer+0x3e4>
 800588e:	bf00      	nop
 8005890:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	699a      	ldr	r2, [r3, #24]
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	4413      	add	r3, r2
 800589e:	1e5a      	subs	r2, r3, #1
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	8afa      	ldrh	r2, [r7, #22]
 80058b0:	fb03 f202 	mul.w	r2, r3, r2
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	015a      	lsls	r2, r3, #5
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	4413      	add	r3, r2
 80058c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058c4:	691a      	ldr	r2, [r3, #16]
 80058c6:	8afb      	ldrh	r3, [r7, #22]
 80058c8:	04d9      	lsls	r1, r3, #19
 80058ca:	4b38      	ldr	r3, [pc, #224]	@ (80059ac <USB_EPStartXfer+0x48c>)
 80058cc:	400b      	ands	r3, r1
 80058ce:	69b9      	ldr	r1, [r7, #24]
 80058d0:	0148      	lsls	r0, r1, #5
 80058d2:	69f9      	ldr	r1, [r7, #28]
 80058d4:	4401      	add	r1, r0
 80058d6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80058da:	4313      	orrs	r3, r2
 80058dc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	015a      	lsls	r2, r3, #5
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	4413      	add	r3, r2
 80058e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058ea:	691a      	ldr	r2, [r3, #16]
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	69db      	ldr	r3, [r3, #28]
 80058f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058f4:	69b9      	ldr	r1, [r7, #24]
 80058f6:	0148      	lsls	r0, r1, #5
 80058f8:	69f9      	ldr	r1, [r7, #28]
 80058fa:	4401      	add	r1, r0
 80058fc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005900:	4313      	orrs	r3, r2
 8005902:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005904:	79fb      	ldrb	r3, [r7, #7]
 8005906:	2b01      	cmp	r3, #1
 8005908:	d10d      	bne.n	8005926 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d009      	beq.n	8005926 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	6919      	ldr	r1, [r3, #16]
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	015a      	lsls	r2, r3, #5
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	4413      	add	r3, r2
 800591e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005922:	460a      	mov	r2, r1
 8005924:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	791b      	ldrb	r3, [r3, #4]
 800592a:	2b01      	cmp	r3, #1
 800592c:	d128      	bne.n	8005980 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800593a:	2b00      	cmp	r3, #0
 800593c:	d110      	bne.n	8005960 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	015a      	lsls	r2, r3, #5
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	4413      	add	r3, r2
 8005946:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	69ba      	ldr	r2, [r7, #24]
 800594e:	0151      	lsls	r1, r2, #5
 8005950:	69fa      	ldr	r2, [r7, #28]
 8005952:	440a      	add	r2, r1
 8005954:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005958:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800595c:	6013      	str	r3, [r2, #0]
 800595e:	e00f      	b.n	8005980 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	015a      	lsls	r2, r3, #5
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	4413      	add	r3, r2
 8005968:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	69ba      	ldr	r2, [r7, #24]
 8005970:	0151      	lsls	r1, r2, #5
 8005972:	69fa      	ldr	r2, [r7, #28]
 8005974:	440a      	add	r2, r1
 8005976:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800597a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800597e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	015a      	lsls	r2, r3, #5
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	4413      	add	r3, r2
 8005988:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	69ba      	ldr	r2, [r7, #24]
 8005990:	0151      	lsls	r1, r2, #5
 8005992:	69fa      	ldr	r2, [r7, #28]
 8005994:	440a      	add	r2, r1
 8005996:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800599a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800599e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3720      	adds	r7, #32
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	1ff80000 	.word	0x1ff80000

080059b0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b087      	sub	sp, #28
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	4613      	mov	r3, r2
 80059bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	785b      	ldrb	r3, [r3, #1]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	f040 80ce 	bne.w	8005b6e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	699b      	ldr	r3, [r3, #24]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d132      	bne.n	8005a40 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	015a      	lsls	r2, r3, #5
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	4413      	add	r3, r2
 80059e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	693a      	ldr	r2, [r7, #16]
 80059ea:	0151      	lsls	r1, r2, #5
 80059ec:	697a      	ldr	r2, [r7, #20]
 80059ee:	440a      	add	r2, r1
 80059f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059f4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80059f8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80059fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	015a      	lsls	r2, r3, #5
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	4413      	add	r3, r2
 8005a06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	0151      	lsls	r1, r2, #5
 8005a10:	697a      	ldr	r2, [r7, #20]
 8005a12:	440a      	add	r2, r1
 8005a14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a18:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005a1c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	015a      	lsls	r2, r3, #5
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	4413      	add	r3, r2
 8005a26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	693a      	ldr	r2, [r7, #16]
 8005a2e:	0151      	lsls	r1, r2, #5
 8005a30:	697a      	ldr	r2, [r7, #20]
 8005a32:	440a      	add	r2, r1
 8005a34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a38:	0cdb      	lsrs	r3, r3, #19
 8005a3a:	04db      	lsls	r3, r3, #19
 8005a3c:	6113      	str	r3, [r2, #16]
 8005a3e:	e04e      	b.n	8005ade <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	015a      	lsls	r2, r3, #5
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	4413      	add	r3, r2
 8005a48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	693a      	ldr	r2, [r7, #16]
 8005a50:	0151      	lsls	r1, r2, #5
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	440a      	add	r2, r1
 8005a56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a5a:	0cdb      	lsrs	r3, r3, #19
 8005a5c:	04db      	lsls	r3, r3, #19
 8005a5e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	015a      	lsls	r2, r3, #5
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	4413      	add	r3, r2
 8005a68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	0151      	lsls	r1, r2, #5
 8005a72:	697a      	ldr	r2, [r7, #20]
 8005a74:	440a      	add	r2, r1
 8005a76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a7a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005a7e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005a82:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	699a      	ldr	r2, [r3, #24]
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d903      	bls.n	8005a98 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	68da      	ldr	r2, [r3, #12]
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	015a      	lsls	r2, r3, #5
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	693a      	ldr	r2, [r7, #16]
 8005aa8:	0151      	lsls	r1, r2, #5
 8005aaa:	697a      	ldr	r2, [r7, #20]
 8005aac:	440a      	add	r2, r1
 8005aae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ab2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005ab6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	015a      	lsls	r2, r3, #5
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	4413      	add	r3, r2
 8005ac0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ac4:	691a      	ldr	r2, [r3, #16]
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	699b      	ldr	r3, [r3, #24]
 8005aca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ace:	6939      	ldr	r1, [r7, #16]
 8005ad0:	0148      	lsls	r0, r1, #5
 8005ad2:	6979      	ldr	r1, [r7, #20]
 8005ad4:	4401      	add	r1, r0
 8005ad6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005ada:	4313      	orrs	r3, r2
 8005adc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005ade:	79fb      	ldrb	r3, [r7, #7]
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d11e      	bne.n	8005b22 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	695b      	ldr	r3, [r3, #20]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d009      	beq.n	8005b00 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	015a      	lsls	r2, r3, #5
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	4413      	add	r3, r2
 8005af4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005af8:	461a      	mov	r2, r3
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	695b      	ldr	r3, [r3, #20]
 8005afe:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	015a      	lsls	r2, r3, #5
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	4413      	add	r3, r2
 8005b08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	693a      	ldr	r2, [r7, #16]
 8005b10:	0151      	lsls	r1, r2, #5
 8005b12:	697a      	ldr	r2, [r7, #20]
 8005b14:	440a      	add	r2, r1
 8005b16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b1a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005b1e:	6013      	str	r3, [r2, #0]
 8005b20:	e097      	b.n	8005c52 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	015a      	lsls	r2, r3, #5
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	4413      	add	r3, r2
 8005b2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	693a      	ldr	r2, [r7, #16]
 8005b32:	0151      	lsls	r1, r2, #5
 8005b34:	697a      	ldr	r2, [r7, #20]
 8005b36:	440a      	add	r2, r1
 8005b38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b3c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005b40:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	699b      	ldr	r3, [r3, #24]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f000 8083 	beq.w	8005c52 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	f003 030f 	and.w	r3, r3, #15
 8005b5c:	2101      	movs	r1, #1
 8005b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b62:	6979      	ldr	r1, [r7, #20]
 8005b64:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	634b      	str	r3, [r1, #52]	@ 0x34
 8005b6c:	e071      	b.n	8005c52 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	015a      	lsls	r2, r3, #5
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	4413      	add	r3, r2
 8005b76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	693a      	ldr	r2, [r7, #16]
 8005b7e:	0151      	lsls	r1, r2, #5
 8005b80:	697a      	ldr	r2, [r7, #20]
 8005b82:	440a      	add	r2, r1
 8005b84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b88:	0cdb      	lsrs	r3, r3, #19
 8005b8a:	04db      	lsls	r3, r3, #19
 8005b8c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	015a      	lsls	r2, r3, #5
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	4413      	add	r3, r2
 8005b96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	693a      	ldr	r2, [r7, #16]
 8005b9e:	0151      	lsls	r1, r2, #5
 8005ba0:	697a      	ldr	r2, [r7, #20]
 8005ba2:	440a      	add	r2, r1
 8005ba4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ba8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005bac:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005bb0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d003      	beq.n	8005bc2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	68da      	ldr	r2, [r3, #12]
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	68da      	ldr	r2, [r3, #12]
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	015a      	lsls	r2, r3, #5
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	0151      	lsls	r1, r2, #5
 8005bdc:	697a      	ldr	r2, [r7, #20]
 8005bde:	440a      	add	r2, r1
 8005be0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005be4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005be8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	015a      	lsls	r2, r3, #5
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bf6:	691a      	ldr	r2, [r3, #16]
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	69db      	ldr	r3, [r3, #28]
 8005bfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c00:	6939      	ldr	r1, [r7, #16]
 8005c02:	0148      	lsls	r0, r1, #5
 8005c04:	6979      	ldr	r1, [r7, #20]
 8005c06:	4401      	add	r1, r0
 8005c08:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005c10:	79fb      	ldrb	r3, [r7, #7]
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d10d      	bne.n	8005c32 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	691b      	ldr	r3, [r3, #16]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d009      	beq.n	8005c32 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	6919      	ldr	r1, [r3, #16]
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	015a      	lsls	r2, r3, #5
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	4413      	add	r3, r2
 8005c2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c2e:	460a      	mov	r2, r1
 8005c30:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	015a      	lsls	r2, r3, #5
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	4413      	add	r3, r2
 8005c3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	0151      	lsls	r1, r2, #5
 8005c44:	697a      	ldr	r2, [r7, #20]
 8005c46:	440a      	add	r2, r1
 8005c48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c4c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005c50:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c52:	2300      	movs	r3, #0
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	371c      	adds	r7, #28
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b087      	sub	sp, #28
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	785b      	ldrb	r3, [r3, #1]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d14a      	bne.n	8005d14 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	015a      	lsls	r2, r3, #5
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	4413      	add	r3, r2
 8005c88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c92:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c96:	f040 8086 	bne.w	8005da6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	015a      	lsls	r2, r3, #5
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	683a      	ldr	r2, [r7, #0]
 8005cac:	7812      	ldrb	r2, [r2, #0]
 8005cae:	0151      	lsls	r1, r2, #5
 8005cb0:	693a      	ldr	r2, [r7, #16]
 8005cb2:	440a      	add	r2, r1
 8005cb4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cb8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005cbc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	015a      	lsls	r2, r3, #5
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	683a      	ldr	r2, [r7, #0]
 8005cd0:	7812      	ldrb	r2, [r2, #0]
 8005cd2:	0151      	lsls	r1, r2, #5
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	440a      	add	r2, r1
 8005cd8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cdc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005ce0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d902      	bls.n	8005cf8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	75fb      	strb	r3, [r7, #23]
          break;
 8005cf6:	e056      	b.n	8005da6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	015a      	lsls	r2, r3, #5
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	4413      	add	r3, r2
 8005d02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d0c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d10:	d0e7      	beq.n	8005ce2 <USB_EPStopXfer+0x82>
 8005d12:	e048      	b.n	8005da6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	015a      	lsls	r2, r3, #5
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d2c:	d13b      	bne.n	8005da6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	015a      	lsls	r2, r3, #5
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	4413      	add	r3, r2
 8005d38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	683a      	ldr	r2, [r7, #0]
 8005d40:	7812      	ldrb	r2, [r2, #0]
 8005d42:	0151      	lsls	r1, r2, #5
 8005d44:	693a      	ldr	r2, [r7, #16]
 8005d46:	440a      	add	r2, r1
 8005d48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d4c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005d50:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	015a      	lsls	r2, r3, #5
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	683a      	ldr	r2, [r7, #0]
 8005d64:	7812      	ldrb	r2, [r2, #0]
 8005d66:	0151      	lsls	r1, r2, #5
 8005d68:	693a      	ldr	r2, [r7, #16]
 8005d6a:	440a      	add	r2, r1
 8005d6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d70:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005d74:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	3301      	adds	r3, #1
 8005d7a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d902      	bls.n	8005d8c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	75fb      	strb	r3, [r7, #23]
          break;
 8005d8a:	e00c      	b.n	8005da6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	015a      	lsls	r2, r3, #5
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	4413      	add	r3, r2
 8005d96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005da0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005da4:	d0e7      	beq.n	8005d76 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005da6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	371c      	adds	r7, #28
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b089      	sub	sp, #36	@ 0x24
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	4611      	mov	r1, r2
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	71fb      	strb	r3, [r7, #7]
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005dd2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d123      	bne.n	8005e22 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005dda:	88bb      	ldrh	r3, [r7, #4]
 8005ddc:	3303      	adds	r3, #3
 8005dde:	089b      	lsrs	r3, r3, #2
 8005de0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005de2:	2300      	movs	r3, #0
 8005de4:	61bb      	str	r3, [r7, #24]
 8005de6:	e018      	b.n	8005e1a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005de8:	79fb      	ldrb	r3, [r7, #7]
 8005dea:	031a      	lsls	r2, r3, #12
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	4413      	add	r3, r2
 8005df0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005df4:	461a      	mov	r2, r3
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	3301      	adds	r3, #1
 8005e00:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	3301      	adds	r3, #1
 8005e06:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	3301      	adds	r3, #1
 8005e12:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	3301      	adds	r3, #1
 8005e18:	61bb      	str	r3, [r7, #24]
 8005e1a:	69ba      	ldr	r2, [r7, #24]
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d3e2      	bcc.n	8005de8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3724      	adds	r7, #36	@ 0x24
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b08b      	sub	sp, #44	@ 0x2c
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005e46:	88fb      	ldrh	r3, [r7, #6]
 8005e48:	089b      	lsrs	r3, r3, #2
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005e4e:	88fb      	ldrh	r3, [r7, #6]
 8005e50:	f003 0303 	and.w	r3, r3, #3
 8005e54:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005e56:	2300      	movs	r3, #0
 8005e58:	623b      	str	r3, [r7, #32]
 8005e5a:	e014      	b.n	8005e86 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e66:	601a      	str	r2, [r3, #0]
    pDest++;
 8005e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e70:	3301      	adds	r3, #1
 8005e72:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e76:	3301      	adds	r3, #1
 8005e78:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005e80:	6a3b      	ldr	r3, [r7, #32]
 8005e82:	3301      	adds	r3, #1
 8005e84:	623b      	str	r3, [r7, #32]
 8005e86:	6a3a      	ldr	r2, [r7, #32]
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d3e6      	bcc.n	8005e5c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005e8e:	8bfb      	ldrh	r3, [r7, #30]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d01e      	beq.n	8005ed2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005e94:	2300      	movs	r3, #0
 8005e96:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	f107 0310 	add.w	r3, r7, #16
 8005ea4:	6812      	ldr	r2, [r2, #0]
 8005ea6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005ea8:	693a      	ldr	r2, [r7, #16]
 8005eaa:	6a3b      	ldr	r3, [r7, #32]
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	00db      	lsls	r3, r3, #3
 8005eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8005eb4:	b2da      	uxtb	r2, r3
 8005eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb8:	701a      	strb	r2, [r3, #0]
      i++;
 8005eba:	6a3b      	ldr	r3, [r7, #32]
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	623b      	str	r3, [r7, #32]
      pDest++;
 8005ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005ec6:	8bfb      	ldrh	r3, [r7, #30]
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005ecc:	8bfb      	ldrh	r3, [r7, #30]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d1ea      	bne.n	8005ea8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	372c      	adds	r7, #44	@ 0x2c
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b085      	sub	sp, #20
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	785b      	ldrb	r3, [r3, #1]
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d12c      	bne.n	8005f56 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	015a      	lsls	r2, r3, #5
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	4413      	add	r3, r2
 8005f04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	db12      	blt.n	8005f34 <USB_EPSetStall+0x54>
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d00f      	beq.n	8005f34 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	015a      	lsls	r2, r3, #5
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68ba      	ldr	r2, [r7, #8]
 8005f24:	0151      	lsls	r1, r2, #5
 8005f26:	68fa      	ldr	r2, [r7, #12]
 8005f28:	440a      	add	r2, r1
 8005f2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f2e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005f32:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	015a      	lsls	r2, r3, #5
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	4413      	add	r3, r2
 8005f3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	68ba      	ldr	r2, [r7, #8]
 8005f44:	0151      	lsls	r1, r2, #5
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	440a      	add	r2, r1
 8005f4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f4e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005f52:	6013      	str	r3, [r2, #0]
 8005f54:	e02b      	b.n	8005fae <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	015a      	lsls	r2, r3, #5
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	db12      	blt.n	8005f8e <USB_EPSetStall+0xae>
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d00f      	beq.n	8005f8e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	015a      	lsls	r2, r3, #5
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	4413      	add	r3, r2
 8005f76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	68ba      	ldr	r2, [r7, #8]
 8005f7e:	0151      	lsls	r1, r2, #5
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	440a      	add	r2, r1
 8005f84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f88:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005f8c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	015a      	lsls	r2, r3, #5
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	4413      	add	r3, r2
 8005f96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68ba      	ldr	r2, [r7, #8]
 8005f9e:	0151      	lsls	r1, r2, #5
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	440a      	add	r2, r1
 8005fa4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005fa8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005fac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005fae:	2300      	movs	r3, #0
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3714      	adds	r7, #20
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b085      	sub	sp, #20
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	785b      	ldrb	r3, [r3, #1]
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d128      	bne.n	800602a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	015a      	lsls	r2, r3, #5
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	4413      	add	r3, r2
 8005fe0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68ba      	ldr	r2, [r7, #8]
 8005fe8:	0151      	lsls	r1, r2, #5
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	440a      	add	r2, r1
 8005fee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ff2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005ff6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	791b      	ldrb	r3, [r3, #4]
 8005ffc:	2b03      	cmp	r3, #3
 8005ffe:	d003      	beq.n	8006008 <USB_EPClearStall+0x4c>
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	791b      	ldrb	r3, [r3, #4]
 8006004:	2b02      	cmp	r3, #2
 8006006:	d138      	bne.n	800607a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	015a      	lsls	r2, r3, #5
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	4413      	add	r3, r2
 8006010:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68ba      	ldr	r2, [r7, #8]
 8006018:	0151      	lsls	r1, r2, #5
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	440a      	add	r2, r1
 800601e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006022:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006026:	6013      	str	r3, [r2, #0]
 8006028:	e027      	b.n	800607a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	015a      	lsls	r2, r3, #5
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	4413      	add	r3, r2
 8006032:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68ba      	ldr	r2, [r7, #8]
 800603a:	0151      	lsls	r1, r2, #5
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	440a      	add	r2, r1
 8006040:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006044:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006048:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	791b      	ldrb	r3, [r3, #4]
 800604e:	2b03      	cmp	r3, #3
 8006050:	d003      	beq.n	800605a <USB_EPClearStall+0x9e>
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	791b      	ldrb	r3, [r3, #4]
 8006056:	2b02      	cmp	r3, #2
 8006058:	d10f      	bne.n	800607a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	015a      	lsls	r2, r3, #5
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	4413      	add	r3, r2
 8006062:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68ba      	ldr	r2, [r7, #8]
 800606a:	0151      	lsls	r1, r2, #5
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	440a      	add	r2, r1
 8006070:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006074:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006078:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3714      	adds	r7, #20
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr

08006088 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006088:	b480      	push	{r7}
 800608a:	b085      	sub	sp, #20
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	460b      	mov	r3, r1
 8006092:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80060a6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80060aa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	78fb      	ldrb	r3, [r7, #3]
 80060b6:	011b      	lsls	r3, r3, #4
 80060b8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80060bc:	68f9      	ldr	r1, [r7, #12]
 80060be:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80060c2:	4313      	orrs	r3, r2
 80060c4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80060c6:	2300      	movs	r3, #0
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3714      	adds	r7, #20
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80060ee:	f023 0303 	bic.w	r3, r3, #3
 80060f2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006102:	f023 0302 	bic.w	r3, r3, #2
 8006106:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3714      	adds	r7, #20
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr

08006116 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006116:	b480      	push	{r7}
 8006118:	b085      	sub	sp, #20
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006130:	f023 0303 	bic.w	r3, r3, #3
 8006134:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006144:	f043 0302 	orr.w	r3, r3, #2
 8006148:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3714      	adds	r7, #20
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006158:	b480      	push	{r7}
 800615a:	b085      	sub	sp, #20
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	695b      	ldr	r3, [r3, #20]
 8006164:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	699b      	ldr	r3, [r3, #24]
 800616a:	68fa      	ldr	r2, [r7, #12]
 800616c:	4013      	ands	r3, r2
 800616e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006170:	68fb      	ldr	r3, [r7, #12]
}
 8006172:	4618      	mov	r0, r3
 8006174:	3714      	adds	r7, #20
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr

0800617e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800617e:	b480      	push	{r7}
 8006180:	b085      	sub	sp, #20
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006190:	699b      	ldr	r3, [r3, #24]
 8006192:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800619a:	69db      	ldr	r3, [r3, #28]
 800619c:	68ba      	ldr	r2, [r7, #8]
 800619e:	4013      	ands	r3, r2
 80061a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	0c1b      	lsrs	r3, r3, #16
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3714      	adds	r7, #20
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr

080061b2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80061b2:	b480      	push	{r7}
 80061b4:	b085      	sub	sp, #20
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061c4:	699b      	ldr	r3, [r3, #24]
 80061c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061ce:	69db      	ldr	r3, [r3, #28]
 80061d0:	68ba      	ldr	r2, [r7, #8]
 80061d2:	4013      	ands	r3, r2
 80061d4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	b29b      	uxth	r3, r3
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3714      	adds	r7, #20
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr

080061e6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80061e6:	b480      	push	{r7}
 80061e8:	b085      	sub	sp, #20
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
 80061ee:	460b      	mov	r3, r1
 80061f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80061f6:	78fb      	ldrb	r3, [r7, #3]
 80061f8:	015a      	lsls	r2, r3, #5
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	4413      	add	r3, r2
 80061fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800620c:	695b      	ldr	r3, [r3, #20]
 800620e:	68ba      	ldr	r2, [r7, #8]
 8006210:	4013      	ands	r3, r2
 8006212:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006214:	68bb      	ldr	r3, [r7, #8]
}
 8006216:	4618      	mov	r0, r3
 8006218:	3714      	adds	r7, #20
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr

08006222 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006222:	b480      	push	{r7}
 8006224:	b087      	sub	sp, #28
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
 800622a:	460b      	mov	r3, r1
 800622c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006242:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006244:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006246:	78fb      	ldrb	r3, [r7, #3]
 8006248:	f003 030f 	and.w	r3, r3, #15
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	fa22 f303 	lsr.w	r3, r2, r3
 8006252:	01db      	lsls	r3, r3, #7
 8006254:	b2db      	uxtb	r3, r3
 8006256:	693a      	ldr	r2, [r7, #16]
 8006258:	4313      	orrs	r3, r2
 800625a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800625c:	78fb      	ldrb	r3, [r7, #3]
 800625e:	015a      	lsls	r2, r3, #5
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	4413      	add	r3, r2
 8006264:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	693a      	ldr	r2, [r7, #16]
 800626c:	4013      	ands	r3, r2
 800626e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006270:	68bb      	ldr	r3, [r7, #8]
}
 8006272:	4618      	mov	r0, r3
 8006274:	371c      	adds	r7, #28
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr

0800627e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800627e:	b480      	push	{r7}
 8006280:	b083      	sub	sp, #12
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	695b      	ldr	r3, [r3, #20]
 800628a:	f003 0301 	and.w	r3, r3, #1
}
 800628e:	4618      	mov	r0, r3
 8006290:	370c      	adds	r7, #12
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr

0800629a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800629a:	b480      	push	{r7}
 800629c:	b085      	sub	sp, #20
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062b4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80062b8:	f023 0307 	bic.w	r3, r3, #7
 80062bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80062cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3714      	adds	r7, #20
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b087      	sub	sp, #28
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	460b      	mov	r3, r1
 80062ea:	607a      	str	r2, [r7, #4]
 80062ec:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	333c      	adds	r3, #60	@ 0x3c
 80062f6:	3304      	adds	r3, #4
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	4a26      	ldr	r2, [pc, #152]	@ (8006398 <USB_EP0_OutStart+0xb8>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d90a      	bls.n	800631a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006310:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006314:	d101      	bne.n	800631a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006316:	2300      	movs	r3, #0
 8006318:	e037      	b.n	800638a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006320:	461a      	mov	r2, r3
 8006322:	2300      	movs	r3, #0
 8006324:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	697a      	ldr	r2, [r7, #20]
 8006330:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006334:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006338:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	697a      	ldr	r2, [r7, #20]
 8006344:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006348:	f043 0318 	orr.w	r3, r3, #24
 800634c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	697a      	ldr	r2, [r7, #20]
 8006358:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800635c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006360:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006362:	7afb      	ldrb	r3, [r7, #11]
 8006364:	2b01      	cmp	r3, #1
 8006366:	d10f      	bne.n	8006388 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800636e:	461a      	mov	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	697a      	ldr	r2, [r7, #20]
 800637e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006382:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006386:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	371c      	adds	r7, #28
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr
 8006396:	bf00      	nop
 8006398:	4f54300a 	.word	0x4f54300a

0800639c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800639c:	b480      	push	{r7}
 800639e:	b085      	sub	sp, #20
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80063a4:	2300      	movs	r3, #0
 80063a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	3301      	adds	r3, #1
 80063ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	4a13      	ldr	r2, [pc, #76]	@ (8006400 <USB_CoreReset+0x64>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d901      	bls.n	80063ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80063b6:	2303      	movs	r3, #3
 80063b8:	e01b      	b.n	80063f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	daf2      	bge.n	80063a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80063c2:	2300      	movs	r3, #0
 80063c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	691b      	ldr	r3, [r3, #16]
 80063ca:	f043 0201 	orr.w	r2, r3, #1
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	3301      	adds	r3, #1
 80063d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	4a09      	ldr	r2, [pc, #36]	@ (8006400 <USB_CoreReset+0x64>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d901      	bls.n	80063e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80063e0:	2303      	movs	r3, #3
 80063e2:	e006      	b.n	80063f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	691b      	ldr	r3, [r3, #16]
 80063e8:	f003 0301 	and.w	r3, r3, #1
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d0f0      	beq.n	80063d2 <USB_CoreReset+0x36>

  return HAL_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3714      	adds	r7, #20
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr
 80063fe:	bf00      	nop
 8006400:	00030d40 	.word	0x00030d40

08006404 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	460b      	mov	r3, r1
 800640e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006410:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006414:	f002 fca0 	bl	8008d58 <USBD_static_malloc>
 8006418:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d109      	bne.n	8006434 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	32b0      	adds	r2, #176	@ 0xb0
 800642a:	2100      	movs	r1, #0
 800642c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006430:	2302      	movs	r3, #2
 8006432:	e0d4      	b.n	80065de <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006434:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006438:	2100      	movs	r1, #0
 800643a:	68f8      	ldr	r0, [r7, #12]
 800643c:	f002 fcf0 	bl	8008e20 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	32b0      	adds	r2, #176	@ 0xb0
 800644a:	68f9      	ldr	r1, [r7, #12]
 800644c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	32b0      	adds	r2, #176	@ 0xb0
 800645a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	7c1b      	ldrb	r3, [r3, #16]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d138      	bne.n	80064de <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800646c:	4b5e      	ldr	r3, [pc, #376]	@ (80065e8 <USBD_CDC_Init+0x1e4>)
 800646e:	7819      	ldrb	r1, [r3, #0]
 8006470:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006474:	2202      	movs	r2, #2
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f002 fb4b 	bl	8008b12 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800647c:	4b5a      	ldr	r3, [pc, #360]	@ (80065e8 <USBD_CDC_Init+0x1e4>)
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	f003 020f 	and.w	r2, r3, #15
 8006484:	6879      	ldr	r1, [r7, #4]
 8006486:	4613      	mov	r3, r2
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	4413      	add	r3, r2
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	440b      	add	r3, r1
 8006490:	3324      	adds	r3, #36	@ 0x24
 8006492:	2201      	movs	r2, #1
 8006494:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006496:	4b55      	ldr	r3, [pc, #340]	@ (80065ec <USBD_CDC_Init+0x1e8>)
 8006498:	7819      	ldrb	r1, [r3, #0]
 800649a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800649e:	2202      	movs	r2, #2
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f002 fb36 	bl	8008b12 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80064a6:	4b51      	ldr	r3, [pc, #324]	@ (80065ec <USBD_CDC_Init+0x1e8>)
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	f003 020f 	and.w	r2, r3, #15
 80064ae:	6879      	ldr	r1, [r7, #4]
 80064b0:	4613      	mov	r3, r2
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	4413      	add	r3, r2
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	440b      	add	r3, r1
 80064ba:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80064be:	2201      	movs	r2, #1
 80064c0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80064c2:	4b4b      	ldr	r3, [pc, #300]	@ (80065f0 <USBD_CDC_Init+0x1ec>)
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	f003 020f 	and.w	r2, r3, #15
 80064ca:	6879      	ldr	r1, [r7, #4]
 80064cc:	4613      	mov	r3, r2
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	4413      	add	r3, r2
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	440b      	add	r3, r1
 80064d6:	3326      	adds	r3, #38	@ 0x26
 80064d8:	2210      	movs	r2, #16
 80064da:	801a      	strh	r2, [r3, #0]
 80064dc:	e035      	b.n	800654a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80064de:	4b42      	ldr	r3, [pc, #264]	@ (80065e8 <USBD_CDC_Init+0x1e4>)
 80064e0:	7819      	ldrb	r1, [r3, #0]
 80064e2:	2340      	movs	r3, #64	@ 0x40
 80064e4:	2202      	movs	r2, #2
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f002 fb13 	bl	8008b12 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80064ec:	4b3e      	ldr	r3, [pc, #248]	@ (80065e8 <USBD_CDC_Init+0x1e4>)
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	f003 020f 	and.w	r2, r3, #15
 80064f4:	6879      	ldr	r1, [r7, #4]
 80064f6:	4613      	mov	r3, r2
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	4413      	add	r3, r2
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	440b      	add	r3, r1
 8006500:	3324      	adds	r3, #36	@ 0x24
 8006502:	2201      	movs	r2, #1
 8006504:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006506:	4b39      	ldr	r3, [pc, #228]	@ (80065ec <USBD_CDC_Init+0x1e8>)
 8006508:	7819      	ldrb	r1, [r3, #0]
 800650a:	2340      	movs	r3, #64	@ 0x40
 800650c:	2202      	movs	r2, #2
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f002 faff 	bl	8008b12 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006514:	4b35      	ldr	r3, [pc, #212]	@ (80065ec <USBD_CDC_Init+0x1e8>)
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	f003 020f 	and.w	r2, r3, #15
 800651c:	6879      	ldr	r1, [r7, #4]
 800651e:	4613      	mov	r3, r2
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	4413      	add	r3, r2
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	440b      	add	r3, r1
 8006528:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800652c:	2201      	movs	r2, #1
 800652e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006530:	4b2f      	ldr	r3, [pc, #188]	@ (80065f0 <USBD_CDC_Init+0x1ec>)
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	f003 020f 	and.w	r2, r3, #15
 8006538:	6879      	ldr	r1, [r7, #4]
 800653a:	4613      	mov	r3, r2
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	4413      	add	r3, r2
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	440b      	add	r3, r1
 8006544:	3326      	adds	r3, #38	@ 0x26
 8006546:	2210      	movs	r2, #16
 8006548:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800654a:	4b29      	ldr	r3, [pc, #164]	@ (80065f0 <USBD_CDC_Init+0x1ec>)
 800654c:	7819      	ldrb	r1, [r3, #0]
 800654e:	2308      	movs	r3, #8
 8006550:	2203      	movs	r2, #3
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f002 fadd 	bl	8008b12 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006558:	4b25      	ldr	r3, [pc, #148]	@ (80065f0 <USBD_CDC_Init+0x1ec>)
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	f003 020f 	and.w	r2, r3, #15
 8006560:	6879      	ldr	r1, [r7, #4]
 8006562:	4613      	mov	r3, r2
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	4413      	add	r3, r2
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	440b      	add	r3, r1
 800656c:	3324      	adds	r3, #36	@ 0x24
 800656e:	2201      	movs	r2, #1
 8006570:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	33b0      	adds	r3, #176	@ 0xb0
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	4413      	add	r3, r2
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2200      	movs	r2, #0
 8006592:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2200      	movs	r2, #0
 800659a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d101      	bne.n	80065ac <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80065a8:	2302      	movs	r3, #2
 80065aa:	e018      	b.n	80065de <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	7c1b      	ldrb	r3, [r3, #16]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d10a      	bne.n	80065ca <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80065b4:	4b0d      	ldr	r3, [pc, #52]	@ (80065ec <USBD_CDC_Init+0x1e8>)
 80065b6:	7819      	ldrb	r1, [r3, #0]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80065be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f002 fb94 	bl	8008cf0 <USBD_LL_PrepareReceive>
 80065c8:	e008      	b.n	80065dc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80065ca:	4b08      	ldr	r3, [pc, #32]	@ (80065ec <USBD_CDC_Init+0x1e8>)
 80065cc:	7819      	ldrb	r1, [r3, #0]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80065d4:	2340      	movs	r3, #64	@ 0x40
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f002 fb8a 	bl	8008cf0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3710      	adds	r7, #16
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	20000093 	.word	0x20000093
 80065ec:	20000094 	.word	0x20000094
 80065f0:	20000095 	.word	0x20000095

080065f4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	460b      	mov	r3, r1
 80065fe:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006600:	4b3a      	ldr	r3, [pc, #232]	@ (80066ec <USBD_CDC_DeInit+0xf8>)
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	4619      	mov	r1, r3
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f002 faa9 	bl	8008b5e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800660c:	4b37      	ldr	r3, [pc, #220]	@ (80066ec <USBD_CDC_DeInit+0xf8>)
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	f003 020f 	and.w	r2, r3, #15
 8006614:	6879      	ldr	r1, [r7, #4]
 8006616:	4613      	mov	r3, r2
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	4413      	add	r3, r2
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	440b      	add	r3, r1
 8006620:	3324      	adds	r3, #36	@ 0x24
 8006622:	2200      	movs	r2, #0
 8006624:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006626:	4b32      	ldr	r3, [pc, #200]	@ (80066f0 <USBD_CDC_DeInit+0xfc>)
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	4619      	mov	r1, r3
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f002 fa96 	bl	8008b5e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006632:	4b2f      	ldr	r3, [pc, #188]	@ (80066f0 <USBD_CDC_DeInit+0xfc>)
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	f003 020f 	and.w	r2, r3, #15
 800663a:	6879      	ldr	r1, [r7, #4]
 800663c:	4613      	mov	r3, r2
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	4413      	add	r3, r2
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	440b      	add	r3, r1
 8006646:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800664a:	2200      	movs	r2, #0
 800664c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800664e:	4b29      	ldr	r3, [pc, #164]	@ (80066f4 <USBD_CDC_DeInit+0x100>)
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	4619      	mov	r1, r3
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f002 fa82 	bl	8008b5e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800665a:	4b26      	ldr	r3, [pc, #152]	@ (80066f4 <USBD_CDC_DeInit+0x100>)
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	f003 020f 	and.w	r2, r3, #15
 8006662:	6879      	ldr	r1, [r7, #4]
 8006664:	4613      	mov	r3, r2
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	4413      	add	r3, r2
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	440b      	add	r3, r1
 800666e:	3324      	adds	r3, #36	@ 0x24
 8006670:	2200      	movs	r2, #0
 8006672:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006674:	4b1f      	ldr	r3, [pc, #124]	@ (80066f4 <USBD_CDC_DeInit+0x100>)
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	f003 020f 	and.w	r2, r3, #15
 800667c:	6879      	ldr	r1, [r7, #4]
 800667e:	4613      	mov	r3, r2
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	4413      	add	r3, r2
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	440b      	add	r3, r1
 8006688:	3326      	adds	r3, #38	@ 0x26
 800668a:	2200      	movs	r2, #0
 800668c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	32b0      	adds	r2, #176	@ 0xb0
 8006698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d01f      	beq.n	80066e0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	33b0      	adds	r3, #176	@ 0xb0
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	4413      	add	r3, r2
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	32b0      	adds	r2, #176	@ 0xb0
 80066be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066c2:	4618      	mov	r0, r3
 80066c4:	f002 fb56 	bl	8008d74 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	32b0      	adds	r2, #176	@ 0xb0
 80066d2:	2100      	movs	r1, #0
 80066d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3708      	adds	r7, #8
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	20000093 	.word	0x20000093
 80066f0:	20000094 	.word	0x20000094
 80066f4:	20000095 	.word	0x20000095

080066f8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b086      	sub	sp, #24
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	32b0      	adds	r2, #176	@ 0xb0
 800670c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006710:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006712:	2300      	movs	r3, #0
 8006714:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006716:	2300      	movs	r3, #0
 8006718:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800671a:	2300      	movs	r3, #0
 800671c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d101      	bne.n	8006728 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006724:	2303      	movs	r3, #3
 8006726:	e0bf      	b.n	80068a8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006730:	2b00      	cmp	r3, #0
 8006732:	d050      	beq.n	80067d6 <USBD_CDC_Setup+0xde>
 8006734:	2b20      	cmp	r3, #32
 8006736:	f040 80af 	bne.w	8006898 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	88db      	ldrh	r3, [r3, #6]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d03a      	beq.n	80067b8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	b25b      	sxtb	r3, r3
 8006748:	2b00      	cmp	r3, #0
 800674a:	da1b      	bge.n	8006784 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	33b0      	adds	r3, #176	@ 0xb0
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	4413      	add	r3, r2
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	683a      	ldr	r2, [r7, #0]
 8006760:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006762:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006764:	683a      	ldr	r2, [r7, #0]
 8006766:	88d2      	ldrh	r2, [r2, #6]
 8006768:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	88db      	ldrh	r3, [r3, #6]
 800676e:	2b07      	cmp	r3, #7
 8006770:	bf28      	it	cs
 8006772:	2307      	movcs	r3, #7
 8006774:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	89fa      	ldrh	r2, [r7, #14]
 800677a:	4619      	mov	r1, r3
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f001 fd87 	bl	8008290 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006782:	e090      	b.n	80068a6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	785a      	ldrb	r2, [r3, #1]
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	88db      	ldrh	r3, [r3, #6]
 8006792:	2b3f      	cmp	r3, #63	@ 0x3f
 8006794:	d803      	bhi.n	800679e <USBD_CDC_Setup+0xa6>
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	88db      	ldrh	r3, [r3, #6]
 800679a:	b2da      	uxtb	r2, r3
 800679c:	e000      	b.n	80067a0 <USBD_CDC_Setup+0xa8>
 800679e:	2240      	movs	r2, #64	@ 0x40
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80067a6:	6939      	ldr	r1, [r7, #16]
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80067ae:	461a      	mov	r2, r3
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f001 fd99 	bl	80082e8 <USBD_CtlPrepareRx>
      break;
 80067b6:	e076      	b.n	80068a6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	33b0      	adds	r3, #176	@ 0xb0
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	4413      	add	r3, r2
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	683a      	ldr	r2, [r7, #0]
 80067cc:	7850      	ldrb	r0, [r2, #1]
 80067ce:	2200      	movs	r2, #0
 80067d0:	6839      	ldr	r1, [r7, #0]
 80067d2:	4798      	blx	r3
      break;
 80067d4:	e067      	b.n	80068a6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	785b      	ldrb	r3, [r3, #1]
 80067da:	2b0b      	cmp	r3, #11
 80067dc:	d851      	bhi.n	8006882 <USBD_CDC_Setup+0x18a>
 80067de:	a201      	add	r2, pc, #4	@ (adr r2, 80067e4 <USBD_CDC_Setup+0xec>)
 80067e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e4:	08006815 	.word	0x08006815
 80067e8:	08006891 	.word	0x08006891
 80067ec:	08006883 	.word	0x08006883
 80067f0:	08006883 	.word	0x08006883
 80067f4:	08006883 	.word	0x08006883
 80067f8:	08006883 	.word	0x08006883
 80067fc:	08006883 	.word	0x08006883
 8006800:	08006883 	.word	0x08006883
 8006804:	08006883 	.word	0x08006883
 8006808:	08006883 	.word	0x08006883
 800680c:	0800683f 	.word	0x0800683f
 8006810:	08006869 	.word	0x08006869
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800681a:	b2db      	uxtb	r3, r3
 800681c:	2b03      	cmp	r3, #3
 800681e:	d107      	bne.n	8006830 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006820:	f107 030a 	add.w	r3, r7, #10
 8006824:	2202      	movs	r2, #2
 8006826:	4619      	mov	r1, r3
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f001 fd31 	bl	8008290 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800682e:	e032      	b.n	8006896 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006830:	6839      	ldr	r1, [r7, #0]
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f001 fcbb 	bl	80081ae <USBD_CtlError>
            ret = USBD_FAIL;
 8006838:	2303      	movs	r3, #3
 800683a:	75fb      	strb	r3, [r7, #23]
          break;
 800683c:	e02b      	b.n	8006896 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006844:	b2db      	uxtb	r3, r3
 8006846:	2b03      	cmp	r3, #3
 8006848:	d107      	bne.n	800685a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800684a:	f107 030d 	add.w	r3, r7, #13
 800684e:	2201      	movs	r2, #1
 8006850:	4619      	mov	r1, r3
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f001 fd1c 	bl	8008290 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006858:	e01d      	b.n	8006896 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800685a:	6839      	ldr	r1, [r7, #0]
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f001 fca6 	bl	80081ae <USBD_CtlError>
            ret = USBD_FAIL;
 8006862:	2303      	movs	r3, #3
 8006864:	75fb      	strb	r3, [r7, #23]
          break;
 8006866:	e016      	b.n	8006896 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800686e:	b2db      	uxtb	r3, r3
 8006870:	2b03      	cmp	r3, #3
 8006872:	d00f      	beq.n	8006894 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006874:	6839      	ldr	r1, [r7, #0]
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f001 fc99 	bl	80081ae <USBD_CtlError>
            ret = USBD_FAIL;
 800687c:	2303      	movs	r3, #3
 800687e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006880:	e008      	b.n	8006894 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006882:	6839      	ldr	r1, [r7, #0]
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f001 fc92 	bl	80081ae <USBD_CtlError>
          ret = USBD_FAIL;
 800688a:	2303      	movs	r3, #3
 800688c:	75fb      	strb	r3, [r7, #23]
          break;
 800688e:	e002      	b.n	8006896 <USBD_CDC_Setup+0x19e>
          break;
 8006890:	bf00      	nop
 8006892:	e008      	b.n	80068a6 <USBD_CDC_Setup+0x1ae>
          break;
 8006894:	bf00      	nop
      }
      break;
 8006896:	e006      	b.n	80068a6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006898:	6839      	ldr	r1, [r7, #0]
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f001 fc87 	bl	80081ae <USBD_CtlError>
      ret = USBD_FAIL;
 80068a0:	2303      	movs	r3, #3
 80068a2:	75fb      	strb	r3, [r7, #23]
      break;
 80068a4:	bf00      	nop
  }

  return (uint8_t)ret;
 80068a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3718      	adds	r7, #24
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	460b      	mov	r3, r1
 80068ba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80068c2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	32b0      	adds	r2, #176	@ 0xb0
 80068ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d101      	bne.n	80068da <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e065      	b.n	80069a6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	32b0      	adds	r2, #176	@ 0xb0
 80068e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068e8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80068ea:	78fb      	ldrb	r3, [r7, #3]
 80068ec:	f003 020f 	and.w	r2, r3, #15
 80068f0:	6879      	ldr	r1, [r7, #4]
 80068f2:	4613      	mov	r3, r2
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	4413      	add	r3, r2
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	440b      	add	r3, r1
 80068fc:	3318      	adds	r3, #24
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d02f      	beq.n	8006964 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006904:	78fb      	ldrb	r3, [r7, #3]
 8006906:	f003 020f 	and.w	r2, r3, #15
 800690a:	6879      	ldr	r1, [r7, #4]
 800690c:	4613      	mov	r3, r2
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	4413      	add	r3, r2
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	440b      	add	r3, r1
 8006916:	3318      	adds	r3, #24
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	78fb      	ldrb	r3, [r7, #3]
 800691c:	f003 010f 	and.w	r1, r3, #15
 8006920:	68f8      	ldr	r0, [r7, #12]
 8006922:	460b      	mov	r3, r1
 8006924:	00db      	lsls	r3, r3, #3
 8006926:	440b      	add	r3, r1
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	4403      	add	r3, r0
 800692c:	3348      	adds	r3, #72	@ 0x48
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	fbb2 f1f3 	udiv	r1, r2, r3
 8006934:	fb01 f303 	mul.w	r3, r1, r3
 8006938:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800693a:	2b00      	cmp	r3, #0
 800693c:	d112      	bne.n	8006964 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800693e:	78fb      	ldrb	r3, [r7, #3]
 8006940:	f003 020f 	and.w	r2, r3, #15
 8006944:	6879      	ldr	r1, [r7, #4]
 8006946:	4613      	mov	r3, r2
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	4413      	add	r3, r2
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	440b      	add	r3, r1
 8006950:	3318      	adds	r3, #24
 8006952:	2200      	movs	r2, #0
 8006954:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006956:	78f9      	ldrb	r1, [r7, #3]
 8006958:	2300      	movs	r3, #0
 800695a:	2200      	movs	r2, #0
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f002 f9a6 	bl	8008cae <USBD_LL_Transmit>
 8006962:	e01f      	b.n	80069a4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	2200      	movs	r2, #0
 8006968:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	33b0      	adds	r3, #176	@ 0xb0
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	4413      	add	r3, r2
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d010      	beq.n	80069a4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	33b0      	adds	r3, #176	@ 0xb0
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	4413      	add	r3, r2
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	691b      	ldr	r3, [r3, #16]
 8006994:	68ba      	ldr	r2, [r7, #8]
 8006996:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800699a:	68ba      	ldr	r2, [r7, #8]
 800699c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80069a0:	78fa      	ldrb	r2, [r7, #3]
 80069a2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3710      	adds	r7, #16
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}

080069ae <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80069ae:	b580      	push	{r7, lr}
 80069b0:	b084      	sub	sp, #16
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
 80069b6:	460b      	mov	r3, r1
 80069b8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	32b0      	adds	r2, #176	@ 0xb0
 80069c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069c8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	32b0      	adds	r2, #176	@ 0xb0
 80069d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d101      	bne.n	80069e0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80069dc:	2303      	movs	r3, #3
 80069de:	e01a      	b.n	8006a16 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80069e0:	78fb      	ldrb	r3, [r7, #3]
 80069e2:	4619      	mov	r1, r3
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f002 f9a4 	bl	8008d32 <USBD_LL_GetRxDataSize>
 80069ea:	4602      	mov	r2, r0
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	33b0      	adds	r3, #176	@ 0xb0
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	4413      	add	r3, r2
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006a0a:	68fa      	ldr	r2, [r7, #12]
 8006a0c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006a10:	4611      	mov	r1, r2
 8006a12:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3710      	adds	r7, #16
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}

08006a1e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006a1e:	b580      	push	{r7, lr}
 8006a20:	b084      	sub	sp, #16
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	32b0      	adds	r2, #176	@ 0xb0
 8006a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a34:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d101      	bne.n	8006a40 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006a3c:	2303      	movs	r3, #3
 8006a3e:	e024      	b.n	8006a8a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	33b0      	adds	r3, #176	@ 0xb0
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	4413      	add	r3, r2
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d019      	beq.n	8006a88 <USBD_CDC_EP0_RxReady+0x6a>
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006a5a:	2bff      	cmp	r3, #255	@ 0xff
 8006a5c:	d014      	beq.n	8006a88 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	33b0      	adds	r3, #176	@ 0xb0
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	4413      	add	r3, r2
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	68fa      	ldr	r2, [r7, #12]
 8006a72:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8006a76:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006a78:	68fa      	ldr	r2, [r7, #12]
 8006a7a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006a7e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	22ff      	movs	r2, #255	@ 0xff
 8006a84:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006a88:	2300      	movs	r3, #0
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3710      	adds	r7, #16
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
	...

08006a94 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b086      	sub	sp, #24
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006a9c:	2182      	movs	r1, #130	@ 0x82
 8006a9e:	4818      	ldr	r0, [pc, #96]	@ (8006b00 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006aa0:	f000 fd4f 	bl	8007542 <USBD_GetEpDesc>
 8006aa4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006aa6:	2101      	movs	r1, #1
 8006aa8:	4815      	ldr	r0, [pc, #84]	@ (8006b00 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006aaa:	f000 fd4a 	bl	8007542 <USBD_GetEpDesc>
 8006aae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006ab0:	2181      	movs	r1, #129	@ 0x81
 8006ab2:	4813      	ldr	r0, [pc, #76]	@ (8006b00 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006ab4:	f000 fd45 	bl	8007542 <USBD_GetEpDesc>
 8006ab8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d002      	beq.n	8006ac6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	2210      	movs	r2, #16
 8006ac4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d006      	beq.n	8006ada <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ad4:	711a      	strb	r2, [r3, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d006      	beq.n	8006aee <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ae8:	711a      	strb	r2, [r3, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2243      	movs	r2, #67	@ 0x43
 8006af2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006af4:	4b02      	ldr	r3, [pc, #8]	@ (8006b00 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3718      	adds	r7, #24
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	20000050 	.word	0x20000050

08006b04 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b086      	sub	sp, #24
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006b0c:	2182      	movs	r1, #130	@ 0x82
 8006b0e:	4818      	ldr	r0, [pc, #96]	@ (8006b70 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006b10:	f000 fd17 	bl	8007542 <USBD_GetEpDesc>
 8006b14:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006b16:	2101      	movs	r1, #1
 8006b18:	4815      	ldr	r0, [pc, #84]	@ (8006b70 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006b1a:	f000 fd12 	bl	8007542 <USBD_GetEpDesc>
 8006b1e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006b20:	2181      	movs	r1, #129	@ 0x81
 8006b22:	4813      	ldr	r0, [pc, #76]	@ (8006b70 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006b24:	f000 fd0d 	bl	8007542 <USBD_GetEpDesc>
 8006b28:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d002      	beq.n	8006b36 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	2210      	movs	r2, #16
 8006b34:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d006      	beq.n	8006b4a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	711a      	strb	r2, [r3, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f042 0202 	orr.w	r2, r2, #2
 8006b48:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d006      	beq.n	8006b5e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2200      	movs	r2, #0
 8006b54:	711a      	strb	r2, [r3, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f042 0202 	orr.w	r2, r2, #2
 8006b5c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2243      	movs	r2, #67	@ 0x43
 8006b62:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006b64:	4b02      	ldr	r3, [pc, #8]	@ (8006b70 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3718      	adds	r7, #24
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	20000050 	.word	0x20000050

08006b74 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b086      	sub	sp, #24
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006b7c:	2182      	movs	r1, #130	@ 0x82
 8006b7e:	4818      	ldr	r0, [pc, #96]	@ (8006be0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006b80:	f000 fcdf 	bl	8007542 <USBD_GetEpDesc>
 8006b84:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006b86:	2101      	movs	r1, #1
 8006b88:	4815      	ldr	r0, [pc, #84]	@ (8006be0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006b8a:	f000 fcda 	bl	8007542 <USBD_GetEpDesc>
 8006b8e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006b90:	2181      	movs	r1, #129	@ 0x81
 8006b92:	4813      	ldr	r0, [pc, #76]	@ (8006be0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006b94:	f000 fcd5 	bl	8007542 <USBD_GetEpDesc>
 8006b98:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d002      	beq.n	8006ba6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	2210      	movs	r2, #16
 8006ba4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d006      	beq.n	8006bba <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006bb4:	711a      	strb	r2, [r3, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d006      	beq.n	8006bce <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006bc8:	711a      	strb	r2, [r3, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2243      	movs	r2, #67	@ 0x43
 8006bd2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006bd4:	4b02      	ldr	r3, [pc, #8]	@ (8006be0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3718      	adds	r7, #24
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop
 8006be0:	20000050 	.word	0x20000050

08006be4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	220a      	movs	r2, #10
 8006bf0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006bf2:	4b03      	ldr	r3, [pc, #12]	@ (8006c00 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	370c      	adds	r7, #12
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr
 8006c00:	2000000c 	.word	0x2000000c

08006c04 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d101      	bne.n	8006c18 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006c14:	2303      	movs	r3, #3
 8006c16:	e009      	b.n	8006c2c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	33b0      	adds	r3, #176	@ 0xb0
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	4413      	add	r3, r2
 8006c26:	683a      	ldr	r2, [r7, #0]
 8006c28:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006c2a:	2300      	movs	r3, #0
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b087      	sub	sp, #28
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	32b0      	adds	r2, #176	@ 0xb0
 8006c4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c52:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d101      	bne.n	8006c5e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006c5a:	2303      	movs	r3, #3
 8006c5c:	e008      	b.n	8006c70 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	68ba      	ldr	r2, [r7, #8]
 8006c62:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006c6e:	2300      	movs	r3, #0
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	371c      	adds	r7, #28
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b085      	sub	sp, #20
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	32b0      	adds	r2, #176	@ 0xb0
 8006c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c94:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d101      	bne.n	8006ca0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006c9c:	2303      	movs	r3, #3
 8006c9e:	e004      	b.n	8006caa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	683a      	ldr	r2, [r7, #0]
 8006ca4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3714      	adds	r7, #20
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr
	...

08006cb8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	32b0      	adds	r2, #176	@ 0xb0
 8006cca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cce:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	32b0      	adds	r2, #176	@ 0xb0
 8006cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d101      	bne.n	8006cea <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	e025      	b.n	8006d36 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d11f      	bne.n	8006d34 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006cfc:	4b10      	ldr	r3, [pc, #64]	@ (8006d40 <USBD_CDC_TransmitPacket+0x88>)
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	f003 020f 	and.w	r2, r3, #15
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	4613      	mov	r3, r2
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	4413      	add	r3, r2
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	4403      	add	r3, r0
 8006d16:	3318      	adds	r3, #24
 8006d18:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006d1a:	4b09      	ldr	r3, [pc, #36]	@ (8006d40 <USBD_CDC_TransmitPacket+0x88>)
 8006d1c:	7819      	ldrb	r1, [r3, #0]
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f001 ffbf 	bl	8008cae <USBD_LL_Transmit>

    ret = USBD_OK;
 8006d30:	2300      	movs	r3, #0
 8006d32:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3710      	adds	r7, #16
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	20000093 	.word	0x20000093

08006d44 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	32b0      	adds	r2, #176	@ 0xb0
 8006d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d5a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	32b0      	adds	r2, #176	@ 0xb0
 8006d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d101      	bne.n	8006d72 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	e018      	b.n	8006da4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	7c1b      	ldrb	r3, [r3, #16]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d10a      	bne.n	8006d90 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006d7a:	4b0c      	ldr	r3, [pc, #48]	@ (8006dac <USBD_CDC_ReceivePacket+0x68>)
 8006d7c:	7819      	ldrb	r1, [r3, #0]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006d84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f001 ffb1 	bl	8008cf0 <USBD_LL_PrepareReceive>
 8006d8e:	e008      	b.n	8006da2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006d90:	4b06      	ldr	r3, [pc, #24]	@ (8006dac <USBD_CDC_ReceivePacket+0x68>)
 8006d92:	7819      	ldrb	r1, [r3, #0]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006d9a:	2340      	movs	r3, #64	@ 0x40
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f001 ffa7 	bl	8008cf0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006da2:	2300      	movs	r3, #0
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3710      	adds	r7, #16
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}
 8006dac:	20000094 	.word	0x20000094

08006db0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b086      	sub	sp, #24
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	4613      	mov	r3, r2
 8006dbc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d101      	bne.n	8006dc8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006dc4:	2303      	movs	r3, #3
 8006dc6:	e01f      	b.n	8006e08 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d003      	beq.n	8006dee <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	68ba      	ldr	r2, [r7, #8]
 8006dea:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2201      	movs	r2, #1
 8006df2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	79fa      	ldrb	r2, [r7, #7]
 8006dfa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006dfc:	68f8      	ldr	r0, [r7, #12]
 8006dfe:	f001 fe21 	bl	8008a44 <USBD_LL_Init>
 8006e02:	4603      	mov	r3, r0
 8006e04:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006e06:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3718      	adds	r7, #24
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d101      	bne.n	8006e28 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006e24:	2303      	movs	r3, #3
 8006e26:	e025      	b.n	8006e74 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	683a      	ldr	r2, [r7, #0]
 8006e2c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	32ae      	adds	r2, #174	@ 0xae
 8006e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d00f      	beq.n	8006e64 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	32ae      	adds	r2, #174	@ 0xae
 8006e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e54:	f107 020e 	add.w	r2, r7, #14
 8006e58:	4610      	mov	r0, r2
 8006e5a:	4798      	blx	r3
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006e6a:	1c5a      	adds	r2, r3, #1
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006e72:	2300      	movs	r3, #0
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3710      	adds	r7, #16
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f001 fe29 	bl	8008adc <USBD_LL_Start>
 8006e8a:	4603      	mov	r3, r0
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3708      	adds	r7, #8
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e9c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	370c      	adds	r7, #12
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr

08006eaa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	b084      	sub	sp, #16
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d009      	beq.n	8006ed8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	78fa      	ldrb	r2, [r7, #3]
 8006ece:	4611      	mov	r1, r2
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	4798      	blx	r3
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3710      	adds	r7, #16
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}

08006ee2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ee2:	b580      	push	{r7, lr}
 8006ee4:	b084      	sub	sp, #16
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
 8006eea:	460b      	mov	r3, r1
 8006eec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	78fa      	ldrb	r2, [r7, #3]
 8006efc:	4611      	mov	r1, r2
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	4798      	blx	r3
 8006f02:	4603      	mov	r3, r0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d001      	beq.n	8006f0c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006f08:	2303      	movs	r3, #3
 8006f0a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3710      	adds	r7, #16
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}

08006f16 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006f16:	b580      	push	{r7, lr}
 8006f18:	b084      	sub	sp, #16
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
 8006f1e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006f26:	6839      	ldr	r1, [r7, #0]
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f001 f906 	bl	800813a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2201      	movs	r2, #1
 8006f32:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006f4a:	f003 031f 	and.w	r3, r3, #31
 8006f4e:	2b02      	cmp	r3, #2
 8006f50:	d01a      	beq.n	8006f88 <USBD_LL_SetupStage+0x72>
 8006f52:	2b02      	cmp	r3, #2
 8006f54:	d822      	bhi.n	8006f9c <USBD_LL_SetupStage+0x86>
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d002      	beq.n	8006f60 <USBD_LL_SetupStage+0x4a>
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d00a      	beq.n	8006f74 <USBD_LL_SetupStage+0x5e>
 8006f5e:	e01d      	b.n	8006f9c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006f66:	4619      	mov	r1, r3
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 fb5d 	bl	8007628 <USBD_StdDevReq>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	73fb      	strb	r3, [r7, #15]
      break;
 8006f72:	e020      	b.n	8006fb6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 fbc5 	bl	800770c <USBD_StdItfReq>
 8006f82:	4603      	mov	r3, r0
 8006f84:	73fb      	strb	r3, [r7, #15]
      break;
 8006f86:	e016      	b.n	8006fb6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006f8e:	4619      	mov	r1, r3
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 fc27 	bl	80077e4 <USBD_StdEPReq>
 8006f96:	4603      	mov	r3, r0
 8006f98:	73fb      	strb	r3, [r7, #15]
      break;
 8006f9a:	e00c      	b.n	8006fb6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006fa2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	4619      	mov	r1, r3
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f001 fdf6 	bl	8008b9c <USBD_LL_StallEP>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	73fb      	strb	r3, [r7, #15]
      break;
 8006fb4:	bf00      	nop
  }

  return ret;
 8006fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3710      	adds	r7, #16
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b086      	sub	sp, #24
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	460b      	mov	r3, r1
 8006fca:	607a      	str	r2, [r7, #4]
 8006fcc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006fd2:	7afb      	ldrb	r3, [r7, #11]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d16e      	bne.n	80070b6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006fde:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006fe6:	2b03      	cmp	r3, #3
 8006fe8:	f040 8098 	bne.w	800711c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	689a      	ldr	r2, [r3, #8]
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d913      	bls.n	8007020 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	689a      	ldr	r2, [r3, #8]
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	1ad2      	subs	r2, r2, r3
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	68da      	ldr	r2, [r3, #12]
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	4293      	cmp	r3, r2
 8007010:	bf28      	it	cs
 8007012:	4613      	movcs	r3, r2
 8007014:	461a      	mov	r2, r3
 8007016:	6879      	ldr	r1, [r7, #4]
 8007018:	68f8      	ldr	r0, [r7, #12]
 800701a:	f001 f982 	bl	8008322 <USBD_CtlContinueRx>
 800701e:	e07d      	b.n	800711c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007026:	f003 031f 	and.w	r3, r3, #31
 800702a:	2b02      	cmp	r3, #2
 800702c:	d014      	beq.n	8007058 <USBD_LL_DataOutStage+0x98>
 800702e:	2b02      	cmp	r3, #2
 8007030:	d81d      	bhi.n	800706e <USBD_LL_DataOutStage+0xae>
 8007032:	2b00      	cmp	r3, #0
 8007034:	d002      	beq.n	800703c <USBD_LL_DataOutStage+0x7c>
 8007036:	2b01      	cmp	r3, #1
 8007038:	d003      	beq.n	8007042 <USBD_LL_DataOutStage+0x82>
 800703a:	e018      	b.n	800706e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800703c:	2300      	movs	r3, #0
 800703e:	75bb      	strb	r3, [r7, #22]
            break;
 8007040:	e018      	b.n	8007074 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007048:	b2db      	uxtb	r3, r3
 800704a:	4619      	mov	r1, r3
 800704c:	68f8      	ldr	r0, [r7, #12]
 800704e:	f000 fa5e 	bl	800750e <USBD_CoreFindIF>
 8007052:	4603      	mov	r3, r0
 8007054:	75bb      	strb	r3, [r7, #22]
            break;
 8007056:	e00d      	b.n	8007074 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800705e:	b2db      	uxtb	r3, r3
 8007060:	4619      	mov	r1, r3
 8007062:	68f8      	ldr	r0, [r7, #12]
 8007064:	f000 fa60 	bl	8007528 <USBD_CoreFindEP>
 8007068:	4603      	mov	r3, r0
 800706a:	75bb      	strb	r3, [r7, #22]
            break;
 800706c:	e002      	b.n	8007074 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800706e:	2300      	movs	r3, #0
 8007070:	75bb      	strb	r3, [r7, #22]
            break;
 8007072:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007074:	7dbb      	ldrb	r3, [r7, #22]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d119      	bne.n	80070ae <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007080:	b2db      	uxtb	r3, r3
 8007082:	2b03      	cmp	r3, #3
 8007084:	d113      	bne.n	80070ae <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007086:	7dba      	ldrb	r2, [r7, #22]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	32ae      	adds	r2, #174	@ 0xae
 800708c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007090:	691b      	ldr	r3, [r3, #16]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d00b      	beq.n	80070ae <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007096:	7dba      	ldrb	r2, [r7, #22]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800709e:	7dba      	ldrb	r2, [r7, #22]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	32ae      	adds	r2, #174	@ 0xae
 80070a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070a8:	691b      	ldr	r3, [r3, #16]
 80070aa:	68f8      	ldr	r0, [r7, #12]
 80070ac:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80070ae:	68f8      	ldr	r0, [r7, #12]
 80070b0:	f001 f948 	bl	8008344 <USBD_CtlSendStatus>
 80070b4:	e032      	b.n	800711c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80070b6:	7afb      	ldrb	r3, [r7, #11]
 80070b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	4619      	mov	r1, r3
 80070c0:	68f8      	ldr	r0, [r7, #12]
 80070c2:	f000 fa31 	bl	8007528 <USBD_CoreFindEP>
 80070c6:	4603      	mov	r3, r0
 80070c8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80070ca:	7dbb      	ldrb	r3, [r7, #22]
 80070cc:	2bff      	cmp	r3, #255	@ 0xff
 80070ce:	d025      	beq.n	800711c <USBD_LL_DataOutStage+0x15c>
 80070d0:	7dbb      	ldrb	r3, [r7, #22]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d122      	bne.n	800711c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	2b03      	cmp	r3, #3
 80070e0:	d117      	bne.n	8007112 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80070e2:	7dba      	ldrb	r2, [r7, #22]
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	32ae      	adds	r2, #174	@ 0xae
 80070e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070ec:	699b      	ldr	r3, [r3, #24]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d00f      	beq.n	8007112 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80070f2:	7dba      	ldrb	r2, [r7, #22]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80070fa:	7dba      	ldrb	r2, [r7, #22]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	32ae      	adds	r2, #174	@ 0xae
 8007100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007104:	699b      	ldr	r3, [r3, #24]
 8007106:	7afa      	ldrb	r2, [r7, #11]
 8007108:	4611      	mov	r1, r2
 800710a:	68f8      	ldr	r0, [r7, #12]
 800710c:	4798      	blx	r3
 800710e:	4603      	mov	r3, r0
 8007110:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007112:	7dfb      	ldrb	r3, [r7, #23]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d001      	beq.n	800711c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007118:	7dfb      	ldrb	r3, [r7, #23]
 800711a:	e000      	b.n	800711e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	3718      	adds	r7, #24
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007126:	b580      	push	{r7, lr}
 8007128:	b086      	sub	sp, #24
 800712a:	af00      	add	r7, sp, #0
 800712c:	60f8      	str	r0, [r7, #12]
 800712e:	460b      	mov	r3, r1
 8007130:	607a      	str	r2, [r7, #4]
 8007132:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007134:	7afb      	ldrb	r3, [r7, #11]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d16f      	bne.n	800721a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	3314      	adds	r3, #20
 800713e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007146:	2b02      	cmp	r3, #2
 8007148:	d15a      	bne.n	8007200 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	689a      	ldr	r2, [r3, #8]
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	429a      	cmp	r2, r3
 8007154:	d914      	bls.n	8007180 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	689a      	ldr	r2, [r3, #8]
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	1ad2      	subs	r2, r2, r3
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	461a      	mov	r2, r3
 800716a:	6879      	ldr	r1, [r7, #4]
 800716c:	68f8      	ldr	r0, [r7, #12]
 800716e:	f001 f8aa 	bl	80082c6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007172:	2300      	movs	r3, #0
 8007174:	2200      	movs	r2, #0
 8007176:	2100      	movs	r1, #0
 8007178:	68f8      	ldr	r0, [r7, #12]
 800717a:	f001 fdb9 	bl	8008cf0 <USBD_LL_PrepareReceive>
 800717e:	e03f      	b.n	8007200 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	68da      	ldr	r2, [r3, #12]
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	429a      	cmp	r2, r3
 800718a:	d11c      	bne.n	80071c6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	685a      	ldr	r2, [r3, #4]
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007194:	429a      	cmp	r2, r3
 8007196:	d316      	bcc.n	80071c6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	685a      	ldr	r2, [r3, #4]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d20f      	bcs.n	80071c6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80071a6:	2200      	movs	r2, #0
 80071a8:	2100      	movs	r1, #0
 80071aa:	68f8      	ldr	r0, [r7, #12]
 80071ac:	f001 f88b 	bl	80082c6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80071b8:	2300      	movs	r3, #0
 80071ba:	2200      	movs	r2, #0
 80071bc:	2100      	movs	r1, #0
 80071be:	68f8      	ldr	r0, [r7, #12]
 80071c0:	f001 fd96 	bl	8008cf0 <USBD_LL_PrepareReceive>
 80071c4:	e01c      	b.n	8007200 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	2b03      	cmp	r3, #3
 80071d0:	d10f      	bne.n	80071f2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80071d8:	68db      	ldr	r3, [r3, #12]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d009      	beq.n	80071f2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2200      	movs	r2, #0
 80071e2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	68f8      	ldr	r0, [r7, #12]
 80071f0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80071f2:	2180      	movs	r1, #128	@ 0x80
 80071f4:	68f8      	ldr	r0, [r7, #12]
 80071f6:	f001 fcd1 	bl	8008b9c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80071fa:	68f8      	ldr	r0, [r7, #12]
 80071fc:	f001 f8b5 	bl	800836a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007206:	2b00      	cmp	r3, #0
 8007208:	d03a      	beq.n	8007280 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800720a:	68f8      	ldr	r0, [r7, #12]
 800720c:	f7ff fe42 	bl	8006e94 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2200      	movs	r2, #0
 8007214:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007218:	e032      	b.n	8007280 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800721a:	7afb      	ldrb	r3, [r7, #11]
 800721c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007220:	b2db      	uxtb	r3, r3
 8007222:	4619      	mov	r1, r3
 8007224:	68f8      	ldr	r0, [r7, #12]
 8007226:	f000 f97f 	bl	8007528 <USBD_CoreFindEP>
 800722a:	4603      	mov	r3, r0
 800722c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800722e:	7dfb      	ldrb	r3, [r7, #23]
 8007230:	2bff      	cmp	r3, #255	@ 0xff
 8007232:	d025      	beq.n	8007280 <USBD_LL_DataInStage+0x15a>
 8007234:	7dfb      	ldrb	r3, [r7, #23]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d122      	bne.n	8007280 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007240:	b2db      	uxtb	r3, r3
 8007242:	2b03      	cmp	r3, #3
 8007244:	d11c      	bne.n	8007280 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007246:	7dfa      	ldrb	r2, [r7, #23]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	32ae      	adds	r2, #174	@ 0xae
 800724c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007250:	695b      	ldr	r3, [r3, #20]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d014      	beq.n	8007280 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007256:	7dfa      	ldrb	r2, [r7, #23]
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800725e:	7dfa      	ldrb	r2, [r7, #23]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	32ae      	adds	r2, #174	@ 0xae
 8007264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007268:	695b      	ldr	r3, [r3, #20]
 800726a:	7afa      	ldrb	r2, [r7, #11]
 800726c:	4611      	mov	r1, r2
 800726e:	68f8      	ldr	r0, [r7, #12]
 8007270:	4798      	blx	r3
 8007272:	4603      	mov	r3, r0
 8007274:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007276:	7dbb      	ldrb	r3, [r7, #22]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d001      	beq.n	8007280 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800727c:	7dbb      	ldrb	r3, [r7, #22]
 800727e:	e000      	b.n	8007282 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007280:	2300      	movs	r3, #0
}
 8007282:	4618      	mov	r0, r3
 8007284:	3718      	adds	r7, #24
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}

0800728a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800728a:	b580      	push	{r7, lr}
 800728c:	b084      	sub	sp, #16
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007292:	2300      	movs	r3, #0
 8007294:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2201      	movs	r2, #1
 800729a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2200      	movs	r2, #0
 80072aa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d014      	beq.n	80072f0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d00e      	beq.n	80072f0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	6852      	ldr	r2, [r2, #4]
 80072de:	b2d2      	uxtb	r2, r2
 80072e0:	4611      	mov	r1, r2
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	4798      	blx	r3
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d001      	beq.n	80072f0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80072ec:	2303      	movs	r3, #3
 80072ee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80072f0:	2340      	movs	r3, #64	@ 0x40
 80072f2:	2200      	movs	r2, #0
 80072f4:	2100      	movs	r1, #0
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f001 fc0b 	bl	8008b12 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2201      	movs	r2, #1
 8007300:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2240      	movs	r2, #64	@ 0x40
 8007308:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800730c:	2340      	movs	r3, #64	@ 0x40
 800730e:	2200      	movs	r2, #0
 8007310:	2180      	movs	r1, #128	@ 0x80
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f001 fbfd 	bl	8008b12 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2201      	movs	r2, #1
 800731c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2240      	movs	r2, #64	@ 0x40
 8007322:	621a      	str	r2, [r3, #32]

  return ret;
 8007324:	7bfb      	ldrb	r3, [r7, #15]
}
 8007326:	4618      	mov	r0, r3
 8007328:	3710      	adds	r7, #16
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}

0800732e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800732e:	b480      	push	{r7}
 8007330:	b083      	sub	sp, #12
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
 8007336:	460b      	mov	r3, r1
 8007338:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	78fa      	ldrb	r2, [r7, #3]
 800733e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007340:	2300      	movs	r3, #0
}
 8007342:	4618      	mov	r0, r3
 8007344:	370c      	adds	r7, #12
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr

0800734e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800734e:	b480      	push	{r7}
 8007350:	b083      	sub	sp, #12
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800735c:	b2da      	uxtb	r2, r3
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2204      	movs	r2, #4
 8007368:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800736c:	2300      	movs	r3, #0
}
 800736e:	4618      	mov	r0, r3
 8007370:	370c      	adds	r7, #12
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr

0800737a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800737a:	b480      	push	{r7}
 800737c:	b083      	sub	sp, #12
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007388:	b2db      	uxtb	r3, r3
 800738a:	2b04      	cmp	r3, #4
 800738c:	d106      	bne.n	800739c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007394:	b2da      	uxtb	r2, r3
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800739c:	2300      	movs	r3, #0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	370c      	adds	r7, #12
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr

080073aa <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80073aa:	b580      	push	{r7, lr}
 80073ac:	b082      	sub	sp, #8
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	2b03      	cmp	r3, #3
 80073bc:	d110      	bne.n	80073e0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d00b      	beq.n	80073e0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073ce:	69db      	ldr	r3, [r3, #28]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d005      	beq.n	80073e0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073da:	69db      	ldr	r3, [r3, #28]
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3708      	adds	r7, #8
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}

080073ea <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80073ea:	b580      	push	{r7, lr}
 80073ec:	b082      	sub	sp, #8
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
 80073f2:	460b      	mov	r3, r1
 80073f4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	32ae      	adds	r2, #174	@ 0xae
 8007400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d101      	bne.n	800740c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007408:	2303      	movs	r3, #3
 800740a:	e01c      	b.n	8007446 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007412:	b2db      	uxtb	r3, r3
 8007414:	2b03      	cmp	r3, #3
 8007416:	d115      	bne.n	8007444 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	32ae      	adds	r2, #174	@ 0xae
 8007422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007426:	6a1b      	ldr	r3, [r3, #32]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d00b      	beq.n	8007444 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	32ae      	adds	r2, #174	@ 0xae
 8007436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800743a:	6a1b      	ldr	r3, [r3, #32]
 800743c:	78fa      	ldrb	r2, [r7, #3]
 800743e:	4611      	mov	r1, r2
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007444:	2300      	movs	r3, #0
}
 8007446:	4618      	mov	r0, r3
 8007448:	3708      	adds	r7, #8
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}

0800744e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800744e:	b580      	push	{r7, lr}
 8007450:	b082      	sub	sp, #8
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
 8007456:	460b      	mov	r3, r1
 8007458:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	32ae      	adds	r2, #174	@ 0xae
 8007464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d101      	bne.n	8007470 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800746c:	2303      	movs	r3, #3
 800746e:	e01c      	b.n	80074aa <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007476:	b2db      	uxtb	r3, r3
 8007478:	2b03      	cmp	r3, #3
 800747a:	d115      	bne.n	80074a8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	32ae      	adds	r2, #174	@ 0xae
 8007486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800748a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800748c:	2b00      	cmp	r3, #0
 800748e:	d00b      	beq.n	80074a8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	32ae      	adds	r2, #174	@ 0xae
 800749a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800749e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074a0:	78fa      	ldrb	r2, [r7, #3]
 80074a2:	4611      	mov	r1, r2
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80074a8:	2300      	movs	r3, #0
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3708      	adds	r7, #8
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}

080074b2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80074b2:	b480      	push	{r7}
 80074b4:	b083      	sub	sp, #12
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80074ba:	2300      	movs	r3, #0
}
 80074bc:	4618      	mov	r0, r3
 80074be:	370c      	adds	r7, #12
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr

080074c8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80074d0:	2300      	movs	r3, #0
 80074d2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d00e      	beq.n	8007504 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	6852      	ldr	r2, [r2, #4]
 80074f2:	b2d2      	uxtb	r2, r2
 80074f4:	4611      	mov	r1, r2
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	4798      	blx	r3
 80074fa:	4603      	mov	r3, r0
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d001      	beq.n	8007504 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007500:	2303      	movs	r3, #3
 8007502:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007504:	7bfb      	ldrb	r3, [r7, #15]
}
 8007506:	4618      	mov	r0, r3
 8007508:	3710      	adds	r7, #16
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}

0800750e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800750e:	b480      	push	{r7}
 8007510:	b083      	sub	sp, #12
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
 8007516:	460b      	mov	r3, r1
 8007518:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800751a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800751c:	4618      	mov	r0, r3
 800751e:	370c      	adds	r7, #12
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	460b      	mov	r3, r1
 8007532:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007534:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007536:	4618      	mov	r0, r3
 8007538:	370c      	adds	r7, #12
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr

08007542 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007542:	b580      	push	{r7, lr}
 8007544:	b086      	sub	sp, #24
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
 800754a:	460b      	mov	r3, r1
 800754c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007556:	2300      	movs	r3, #0
 8007558:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	885b      	ldrh	r3, [r3, #2]
 800755e:	b29b      	uxth	r3, r3
 8007560:	68fa      	ldr	r2, [r7, #12]
 8007562:	7812      	ldrb	r2, [r2, #0]
 8007564:	4293      	cmp	r3, r2
 8007566:	d91f      	bls.n	80075a8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800756e:	e013      	b.n	8007598 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007570:	f107 030a 	add.w	r3, r7, #10
 8007574:	4619      	mov	r1, r3
 8007576:	6978      	ldr	r0, [r7, #20]
 8007578:	f000 f81b 	bl	80075b2 <USBD_GetNextDesc>
 800757c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	785b      	ldrb	r3, [r3, #1]
 8007582:	2b05      	cmp	r3, #5
 8007584:	d108      	bne.n	8007598 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	789b      	ldrb	r3, [r3, #2]
 800758e:	78fa      	ldrb	r2, [r7, #3]
 8007590:	429a      	cmp	r2, r3
 8007592:	d008      	beq.n	80075a6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007594:	2300      	movs	r3, #0
 8007596:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	885b      	ldrh	r3, [r3, #2]
 800759c:	b29a      	uxth	r2, r3
 800759e:	897b      	ldrh	r3, [r7, #10]
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d8e5      	bhi.n	8007570 <USBD_GetEpDesc+0x2e>
 80075a4:	e000      	b.n	80075a8 <USBD_GetEpDesc+0x66>
          break;
 80075a6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80075a8:	693b      	ldr	r3, [r7, #16]
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3718      	adds	r7, #24
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80075b2:	b480      	push	{r7}
 80075b4:	b085      	sub	sp, #20
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
 80075ba:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	881b      	ldrh	r3, [r3, #0]
 80075c4:	68fa      	ldr	r2, [r7, #12]
 80075c6:	7812      	ldrb	r2, [r2, #0]
 80075c8:	4413      	add	r3, r2
 80075ca:	b29a      	uxth	r2, r3
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	461a      	mov	r2, r3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4413      	add	r3, r2
 80075da:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80075dc:	68fb      	ldr	r3, [r7, #12]
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3714      	adds	r7, #20
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr

080075ea <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80075ea:	b480      	push	{r7}
 80075ec:	b087      	sub	sp, #28
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	3301      	adds	r3, #1
 8007600:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007608:	8a3b      	ldrh	r3, [r7, #16]
 800760a:	021b      	lsls	r3, r3, #8
 800760c:	b21a      	sxth	r2, r3
 800760e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007612:	4313      	orrs	r3, r2
 8007614:	b21b      	sxth	r3, r3
 8007616:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007618:	89fb      	ldrh	r3, [r7, #14]
}
 800761a:	4618      	mov	r0, r3
 800761c:	371c      	adds	r7, #28
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr
	...

08007628 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007632:	2300      	movs	r3, #0
 8007634:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800763e:	2b40      	cmp	r3, #64	@ 0x40
 8007640:	d005      	beq.n	800764e <USBD_StdDevReq+0x26>
 8007642:	2b40      	cmp	r3, #64	@ 0x40
 8007644:	d857      	bhi.n	80076f6 <USBD_StdDevReq+0xce>
 8007646:	2b00      	cmp	r3, #0
 8007648:	d00f      	beq.n	800766a <USBD_StdDevReq+0x42>
 800764a:	2b20      	cmp	r3, #32
 800764c:	d153      	bne.n	80076f6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	32ae      	adds	r2, #174	@ 0xae
 8007658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	6839      	ldr	r1, [r7, #0]
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	4798      	blx	r3
 8007664:	4603      	mov	r3, r0
 8007666:	73fb      	strb	r3, [r7, #15]
      break;
 8007668:	e04a      	b.n	8007700 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	785b      	ldrb	r3, [r3, #1]
 800766e:	2b09      	cmp	r3, #9
 8007670:	d83b      	bhi.n	80076ea <USBD_StdDevReq+0xc2>
 8007672:	a201      	add	r2, pc, #4	@ (adr r2, 8007678 <USBD_StdDevReq+0x50>)
 8007674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007678:	080076cd 	.word	0x080076cd
 800767c:	080076e1 	.word	0x080076e1
 8007680:	080076eb 	.word	0x080076eb
 8007684:	080076d7 	.word	0x080076d7
 8007688:	080076eb 	.word	0x080076eb
 800768c:	080076ab 	.word	0x080076ab
 8007690:	080076a1 	.word	0x080076a1
 8007694:	080076eb 	.word	0x080076eb
 8007698:	080076c3 	.word	0x080076c3
 800769c:	080076b5 	.word	0x080076b5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80076a0:	6839      	ldr	r1, [r7, #0]
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 fa3c 	bl	8007b20 <USBD_GetDescriptor>
          break;
 80076a8:	e024      	b.n	80076f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80076aa:	6839      	ldr	r1, [r7, #0]
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f000 fba1 	bl	8007df4 <USBD_SetAddress>
          break;
 80076b2:	e01f      	b.n	80076f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80076b4:	6839      	ldr	r1, [r7, #0]
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 fbe0 	bl	8007e7c <USBD_SetConfig>
 80076bc:	4603      	mov	r3, r0
 80076be:	73fb      	strb	r3, [r7, #15]
          break;
 80076c0:	e018      	b.n	80076f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80076c2:	6839      	ldr	r1, [r7, #0]
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 fc83 	bl	8007fd0 <USBD_GetConfig>
          break;
 80076ca:	e013      	b.n	80076f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80076cc:	6839      	ldr	r1, [r7, #0]
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 fcb4 	bl	800803c <USBD_GetStatus>
          break;
 80076d4:	e00e      	b.n	80076f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80076d6:	6839      	ldr	r1, [r7, #0]
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 fce3 	bl	80080a4 <USBD_SetFeature>
          break;
 80076de:	e009      	b.n	80076f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80076e0:	6839      	ldr	r1, [r7, #0]
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 fd07 	bl	80080f6 <USBD_ClrFeature>
          break;
 80076e8:	e004      	b.n	80076f4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80076ea:	6839      	ldr	r1, [r7, #0]
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 fd5e 	bl	80081ae <USBD_CtlError>
          break;
 80076f2:	bf00      	nop
      }
      break;
 80076f4:	e004      	b.n	8007700 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80076f6:	6839      	ldr	r1, [r7, #0]
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 fd58 	bl	80081ae <USBD_CtlError>
      break;
 80076fe:	bf00      	nop
  }

  return ret;
 8007700:	7bfb      	ldrb	r3, [r7, #15]
}
 8007702:	4618      	mov	r0, r3
 8007704:	3710      	adds	r7, #16
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
 800770a:	bf00      	nop

0800770c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b084      	sub	sp, #16
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007716:	2300      	movs	r3, #0
 8007718:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007722:	2b40      	cmp	r3, #64	@ 0x40
 8007724:	d005      	beq.n	8007732 <USBD_StdItfReq+0x26>
 8007726:	2b40      	cmp	r3, #64	@ 0x40
 8007728:	d852      	bhi.n	80077d0 <USBD_StdItfReq+0xc4>
 800772a:	2b00      	cmp	r3, #0
 800772c:	d001      	beq.n	8007732 <USBD_StdItfReq+0x26>
 800772e:	2b20      	cmp	r3, #32
 8007730:	d14e      	bne.n	80077d0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007738:	b2db      	uxtb	r3, r3
 800773a:	3b01      	subs	r3, #1
 800773c:	2b02      	cmp	r3, #2
 800773e:	d840      	bhi.n	80077c2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	889b      	ldrh	r3, [r3, #4]
 8007744:	b2db      	uxtb	r3, r3
 8007746:	2b01      	cmp	r3, #1
 8007748:	d836      	bhi.n	80077b8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	889b      	ldrh	r3, [r3, #4]
 800774e:	b2db      	uxtb	r3, r3
 8007750:	4619      	mov	r1, r3
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f7ff fedb 	bl	800750e <USBD_CoreFindIF>
 8007758:	4603      	mov	r3, r0
 800775a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800775c:	7bbb      	ldrb	r3, [r7, #14]
 800775e:	2bff      	cmp	r3, #255	@ 0xff
 8007760:	d01d      	beq.n	800779e <USBD_StdItfReq+0x92>
 8007762:	7bbb      	ldrb	r3, [r7, #14]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d11a      	bne.n	800779e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007768:	7bba      	ldrb	r2, [r7, #14]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	32ae      	adds	r2, #174	@ 0xae
 800776e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007772:	689b      	ldr	r3, [r3, #8]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d00f      	beq.n	8007798 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007778:	7bba      	ldrb	r2, [r7, #14]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007780:	7bba      	ldrb	r2, [r7, #14]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	32ae      	adds	r2, #174	@ 0xae
 8007786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	6839      	ldr	r1, [r7, #0]
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	4798      	blx	r3
 8007792:	4603      	mov	r3, r0
 8007794:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007796:	e004      	b.n	80077a2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007798:	2303      	movs	r3, #3
 800779a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800779c:	e001      	b.n	80077a2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800779e:	2303      	movs	r3, #3
 80077a0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	88db      	ldrh	r3, [r3, #6]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d110      	bne.n	80077cc <USBD_StdItfReq+0xc0>
 80077aa:	7bfb      	ldrb	r3, [r7, #15]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d10d      	bne.n	80077cc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 fdc7 	bl	8008344 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80077b6:	e009      	b.n	80077cc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80077b8:	6839      	ldr	r1, [r7, #0]
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 fcf7 	bl	80081ae <USBD_CtlError>
          break;
 80077c0:	e004      	b.n	80077cc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80077c2:	6839      	ldr	r1, [r7, #0]
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 fcf2 	bl	80081ae <USBD_CtlError>
          break;
 80077ca:	e000      	b.n	80077ce <USBD_StdItfReq+0xc2>
          break;
 80077cc:	bf00      	nop
      }
      break;
 80077ce:	e004      	b.n	80077da <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80077d0:	6839      	ldr	r1, [r7, #0]
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 fceb 	bl	80081ae <USBD_CtlError>
      break;
 80077d8:	bf00      	nop
  }

  return ret;
 80077da:	7bfb      	ldrb	r3, [r7, #15]
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3710      	adds	r7, #16
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80077ee:	2300      	movs	r3, #0
 80077f0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	889b      	ldrh	r3, [r3, #4]
 80077f6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007800:	2b40      	cmp	r3, #64	@ 0x40
 8007802:	d007      	beq.n	8007814 <USBD_StdEPReq+0x30>
 8007804:	2b40      	cmp	r3, #64	@ 0x40
 8007806:	f200 817f 	bhi.w	8007b08 <USBD_StdEPReq+0x324>
 800780a:	2b00      	cmp	r3, #0
 800780c:	d02a      	beq.n	8007864 <USBD_StdEPReq+0x80>
 800780e:	2b20      	cmp	r3, #32
 8007810:	f040 817a 	bne.w	8007b08 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007814:	7bbb      	ldrb	r3, [r7, #14]
 8007816:	4619      	mov	r1, r3
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f7ff fe85 	bl	8007528 <USBD_CoreFindEP>
 800781e:	4603      	mov	r3, r0
 8007820:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007822:	7b7b      	ldrb	r3, [r7, #13]
 8007824:	2bff      	cmp	r3, #255	@ 0xff
 8007826:	f000 8174 	beq.w	8007b12 <USBD_StdEPReq+0x32e>
 800782a:	7b7b      	ldrb	r3, [r7, #13]
 800782c:	2b00      	cmp	r3, #0
 800782e:	f040 8170 	bne.w	8007b12 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007832:	7b7a      	ldrb	r2, [r7, #13]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800783a:	7b7a      	ldrb	r2, [r7, #13]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	32ae      	adds	r2, #174	@ 0xae
 8007840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	2b00      	cmp	r3, #0
 8007848:	f000 8163 	beq.w	8007b12 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800784c:	7b7a      	ldrb	r2, [r7, #13]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	32ae      	adds	r2, #174	@ 0xae
 8007852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	6839      	ldr	r1, [r7, #0]
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	4798      	blx	r3
 800785e:	4603      	mov	r3, r0
 8007860:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007862:	e156      	b.n	8007b12 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	785b      	ldrb	r3, [r3, #1]
 8007868:	2b03      	cmp	r3, #3
 800786a:	d008      	beq.n	800787e <USBD_StdEPReq+0x9a>
 800786c:	2b03      	cmp	r3, #3
 800786e:	f300 8145 	bgt.w	8007afc <USBD_StdEPReq+0x318>
 8007872:	2b00      	cmp	r3, #0
 8007874:	f000 809b 	beq.w	80079ae <USBD_StdEPReq+0x1ca>
 8007878:	2b01      	cmp	r3, #1
 800787a:	d03c      	beq.n	80078f6 <USBD_StdEPReq+0x112>
 800787c:	e13e      	b.n	8007afc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007884:	b2db      	uxtb	r3, r3
 8007886:	2b02      	cmp	r3, #2
 8007888:	d002      	beq.n	8007890 <USBD_StdEPReq+0xac>
 800788a:	2b03      	cmp	r3, #3
 800788c:	d016      	beq.n	80078bc <USBD_StdEPReq+0xd8>
 800788e:	e02c      	b.n	80078ea <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007890:	7bbb      	ldrb	r3, [r7, #14]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d00d      	beq.n	80078b2 <USBD_StdEPReq+0xce>
 8007896:	7bbb      	ldrb	r3, [r7, #14]
 8007898:	2b80      	cmp	r3, #128	@ 0x80
 800789a:	d00a      	beq.n	80078b2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800789c:	7bbb      	ldrb	r3, [r7, #14]
 800789e:	4619      	mov	r1, r3
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f001 f97b 	bl	8008b9c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80078a6:	2180      	movs	r1, #128	@ 0x80
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f001 f977 	bl	8008b9c <USBD_LL_StallEP>
 80078ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80078b0:	e020      	b.n	80078f4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80078b2:	6839      	ldr	r1, [r7, #0]
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 fc7a 	bl	80081ae <USBD_CtlError>
              break;
 80078ba:	e01b      	b.n	80078f4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	885b      	ldrh	r3, [r3, #2]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d10e      	bne.n	80078e2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80078c4:	7bbb      	ldrb	r3, [r7, #14]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d00b      	beq.n	80078e2 <USBD_StdEPReq+0xfe>
 80078ca:	7bbb      	ldrb	r3, [r7, #14]
 80078cc:	2b80      	cmp	r3, #128	@ 0x80
 80078ce:	d008      	beq.n	80078e2 <USBD_StdEPReq+0xfe>
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	88db      	ldrh	r3, [r3, #6]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d104      	bne.n	80078e2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80078d8:	7bbb      	ldrb	r3, [r7, #14]
 80078da:	4619      	mov	r1, r3
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f001 f95d 	bl	8008b9c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 fd2e 	bl	8008344 <USBD_CtlSendStatus>

              break;
 80078e8:	e004      	b.n	80078f4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80078ea:	6839      	ldr	r1, [r7, #0]
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 fc5e 	bl	80081ae <USBD_CtlError>
              break;
 80078f2:	bf00      	nop
          }
          break;
 80078f4:	e107      	b.n	8007b06 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	2b02      	cmp	r3, #2
 8007900:	d002      	beq.n	8007908 <USBD_StdEPReq+0x124>
 8007902:	2b03      	cmp	r3, #3
 8007904:	d016      	beq.n	8007934 <USBD_StdEPReq+0x150>
 8007906:	e04b      	b.n	80079a0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007908:	7bbb      	ldrb	r3, [r7, #14]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d00d      	beq.n	800792a <USBD_StdEPReq+0x146>
 800790e:	7bbb      	ldrb	r3, [r7, #14]
 8007910:	2b80      	cmp	r3, #128	@ 0x80
 8007912:	d00a      	beq.n	800792a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007914:	7bbb      	ldrb	r3, [r7, #14]
 8007916:	4619      	mov	r1, r3
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f001 f93f 	bl	8008b9c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800791e:	2180      	movs	r1, #128	@ 0x80
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f001 f93b 	bl	8008b9c <USBD_LL_StallEP>
 8007926:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007928:	e040      	b.n	80079ac <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800792a:	6839      	ldr	r1, [r7, #0]
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 fc3e 	bl	80081ae <USBD_CtlError>
              break;
 8007932:	e03b      	b.n	80079ac <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	885b      	ldrh	r3, [r3, #2]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d136      	bne.n	80079aa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800793c:	7bbb      	ldrb	r3, [r7, #14]
 800793e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007942:	2b00      	cmp	r3, #0
 8007944:	d004      	beq.n	8007950 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007946:	7bbb      	ldrb	r3, [r7, #14]
 8007948:	4619      	mov	r1, r3
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f001 f945 	bl	8008bda <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 fcf7 	bl	8008344 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007956:	7bbb      	ldrb	r3, [r7, #14]
 8007958:	4619      	mov	r1, r3
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f7ff fde4 	bl	8007528 <USBD_CoreFindEP>
 8007960:	4603      	mov	r3, r0
 8007962:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007964:	7b7b      	ldrb	r3, [r7, #13]
 8007966:	2bff      	cmp	r3, #255	@ 0xff
 8007968:	d01f      	beq.n	80079aa <USBD_StdEPReq+0x1c6>
 800796a:	7b7b      	ldrb	r3, [r7, #13]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d11c      	bne.n	80079aa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007970:	7b7a      	ldrb	r2, [r7, #13]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007978:	7b7a      	ldrb	r2, [r7, #13]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	32ae      	adds	r2, #174	@ 0xae
 800797e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d010      	beq.n	80079aa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007988:	7b7a      	ldrb	r2, [r7, #13]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	32ae      	adds	r2, #174	@ 0xae
 800798e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	6839      	ldr	r1, [r7, #0]
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	4798      	blx	r3
 800799a:	4603      	mov	r3, r0
 800799c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800799e:	e004      	b.n	80079aa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80079a0:	6839      	ldr	r1, [r7, #0]
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 fc03 	bl	80081ae <USBD_CtlError>
              break;
 80079a8:	e000      	b.n	80079ac <USBD_StdEPReq+0x1c8>
              break;
 80079aa:	bf00      	nop
          }
          break;
 80079ac:	e0ab      	b.n	8007b06 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	2b02      	cmp	r3, #2
 80079b8:	d002      	beq.n	80079c0 <USBD_StdEPReq+0x1dc>
 80079ba:	2b03      	cmp	r3, #3
 80079bc:	d032      	beq.n	8007a24 <USBD_StdEPReq+0x240>
 80079be:	e097      	b.n	8007af0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079c0:	7bbb      	ldrb	r3, [r7, #14]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d007      	beq.n	80079d6 <USBD_StdEPReq+0x1f2>
 80079c6:	7bbb      	ldrb	r3, [r7, #14]
 80079c8:	2b80      	cmp	r3, #128	@ 0x80
 80079ca:	d004      	beq.n	80079d6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80079cc:	6839      	ldr	r1, [r7, #0]
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 fbed 	bl	80081ae <USBD_CtlError>
                break;
 80079d4:	e091      	b.n	8007afa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	da0b      	bge.n	80079f6 <USBD_StdEPReq+0x212>
 80079de:	7bbb      	ldrb	r3, [r7, #14]
 80079e0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80079e4:	4613      	mov	r3, r2
 80079e6:	009b      	lsls	r3, r3, #2
 80079e8:	4413      	add	r3, r2
 80079ea:	009b      	lsls	r3, r3, #2
 80079ec:	3310      	adds	r3, #16
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	4413      	add	r3, r2
 80079f2:	3304      	adds	r3, #4
 80079f4:	e00b      	b.n	8007a0e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80079f6:	7bbb      	ldrb	r3, [r7, #14]
 80079f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079fc:	4613      	mov	r3, r2
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	4413      	add	r3, r2
 8007a02:	009b      	lsls	r3, r3, #2
 8007a04:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	4413      	add	r3, r2
 8007a0c:	3304      	adds	r3, #4
 8007a0e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	2200      	movs	r2, #0
 8007a14:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	2202      	movs	r2, #2
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 fc37 	bl	8008290 <USBD_CtlSendData>
              break;
 8007a22:	e06a      	b.n	8007afa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007a24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	da11      	bge.n	8007a50 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007a2c:	7bbb      	ldrb	r3, [r7, #14]
 8007a2e:	f003 020f 	and.w	r2, r3, #15
 8007a32:	6879      	ldr	r1, [r7, #4]
 8007a34:	4613      	mov	r3, r2
 8007a36:	009b      	lsls	r3, r3, #2
 8007a38:	4413      	add	r3, r2
 8007a3a:	009b      	lsls	r3, r3, #2
 8007a3c:	440b      	add	r3, r1
 8007a3e:	3324      	adds	r3, #36	@ 0x24
 8007a40:	881b      	ldrh	r3, [r3, #0]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d117      	bne.n	8007a76 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007a46:	6839      	ldr	r1, [r7, #0]
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 fbb0 	bl	80081ae <USBD_CtlError>
                  break;
 8007a4e:	e054      	b.n	8007afa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007a50:	7bbb      	ldrb	r3, [r7, #14]
 8007a52:	f003 020f 	and.w	r2, r3, #15
 8007a56:	6879      	ldr	r1, [r7, #4]
 8007a58:	4613      	mov	r3, r2
 8007a5a:	009b      	lsls	r3, r3, #2
 8007a5c:	4413      	add	r3, r2
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	440b      	add	r3, r1
 8007a62:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007a66:	881b      	ldrh	r3, [r3, #0]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d104      	bne.n	8007a76 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007a6c:	6839      	ldr	r1, [r7, #0]
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 fb9d 	bl	80081ae <USBD_CtlError>
                  break;
 8007a74:	e041      	b.n	8007afa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	da0b      	bge.n	8007a96 <USBD_StdEPReq+0x2b2>
 8007a7e:	7bbb      	ldrb	r3, [r7, #14]
 8007a80:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007a84:	4613      	mov	r3, r2
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	4413      	add	r3, r2
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	3310      	adds	r3, #16
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	4413      	add	r3, r2
 8007a92:	3304      	adds	r3, #4
 8007a94:	e00b      	b.n	8007aae <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a96:	7bbb      	ldrb	r3, [r7, #14]
 8007a98:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a9c:	4613      	mov	r3, r2
 8007a9e:	009b      	lsls	r3, r3, #2
 8007aa0:	4413      	add	r3, r2
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	4413      	add	r3, r2
 8007aac:	3304      	adds	r3, #4
 8007aae:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007ab0:	7bbb      	ldrb	r3, [r7, #14]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d002      	beq.n	8007abc <USBD_StdEPReq+0x2d8>
 8007ab6:	7bbb      	ldrb	r3, [r7, #14]
 8007ab8:	2b80      	cmp	r3, #128	@ 0x80
 8007aba:	d103      	bne.n	8007ac4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	601a      	str	r2, [r3, #0]
 8007ac2:	e00e      	b.n	8007ae2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007ac4:	7bbb      	ldrb	r3, [r7, #14]
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f001 f8a5 	bl	8008c18 <USBD_LL_IsStallEP>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d003      	beq.n	8007adc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	601a      	str	r2, [r3, #0]
 8007ada:	e002      	b.n	8007ae2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	2202      	movs	r2, #2
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 fbd1 	bl	8008290 <USBD_CtlSendData>
              break;
 8007aee:	e004      	b.n	8007afa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007af0:	6839      	ldr	r1, [r7, #0]
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 fb5b 	bl	80081ae <USBD_CtlError>
              break;
 8007af8:	bf00      	nop
          }
          break;
 8007afa:	e004      	b.n	8007b06 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007afc:	6839      	ldr	r1, [r7, #0]
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 fb55 	bl	80081ae <USBD_CtlError>
          break;
 8007b04:	bf00      	nop
      }
      break;
 8007b06:	e005      	b.n	8007b14 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007b08:	6839      	ldr	r1, [r7, #0]
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 fb4f 	bl	80081ae <USBD_CtlError>
      break;
 8007b10:	e000      	b.n	8007b14 <USBD_StdEPReq+0x330>
      break;
 8007b12:	bf00      	nop
  }

  return ret;
 8007b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3710      	adds	r7, #16
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
	...

08007b20 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007b32:	2300      	movs	r3, #0
 8007b34:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	885b      	ldrh	r3, [r3, #2]
 8007b3a:	0a1b      	lsrs	r3, r3, #8
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	3b01      	subs	r3, #1
 8007b40:	2b06      	cmp	r3, #6
 8007b42:	f200 8128 	bhi.w	8007d96 <USBD_GetDescriptor+0x276>
 8007b46:	a201      	add	r2, pc, #4	@ (adr r2, 8007b4c <USBD_GetDescriptor+0x2c>)
 8007b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b4c:	08007b69 	.word	0x08007b69
 8007b50:	08007b81 	.word	0x08007b81
 8007b54:	08007bc1 	.word	0x08007bc1
 8007b58:	08007d97 	.word	0x08007d97
 8007b5c:	08007d97 	.word	0x08007d97
 8007b60:	08007d37 	.word	0x08007d37
 8007b64:	08007d63 	.word	0x08007d63
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	7c12      	ldrb	r2, [r2, #16]
 8007b74:	f107 0108 	add.w	r1, r7, #8
 8007b78:	4610      	mov	r0, r2
 8007b7a:	4798      	blx	r3
 8007b7c:	60f8      	str	r0, [r7, #12]
      break;
 8007b7e:	e112      	b.n	8007da6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	7c1b      	ldrb	r3, [r3, #16]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d10d      	bne.n	8007ba4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b90:	f107 0208 	add.w	r2, r7, #8
 8007b94:	4610      	mov	r0, r2
 8007b96:	4798      	blx	r3
 8007b98:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	2202      	movs	r2, #2
 8007ba0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007ba2:	e100      	b.n	8007da6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bac:	f107 0208 	add.w	r2, r7, #8
 8007bb0:	4610      	mov	r0, r2
 8007bb2:	4798      	blx	r3
 8007bb4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	3301      	adds	r3, #1
 8007bba:	2202      	movs	r2, #2
 8007bbc:	701a      	strb	r2, [r3, #0]
      break;
 8007bbe:	e0f2      	b.n	8007da6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	885b      	ldrh	r3, [r3, #2]
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	2b05      	cmp	r3, #5
 8007bc8:	f200 80ac 	bhi.w	8007d24 <USBD_GetDescriptor+0x204>
 8007bcc:	a201      	add	r2, pc, #4	@ (adr r2, 8007bd4 <USBD_GetDescriptor+0xb4>)
 8007bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd2:	bf00      	nop
 8007bd4:	08007bed 	.word	0x08007bed
 8007bd8:	08007c21 	.word	0x08007c21
 8007bdc:	08007c55 	.word	0x08007c55
 8007be0:	08007c89 	.word	0x08007c89
 8007be4:	08007cbd 	.word	0x08007cbd
 8007be8:	08007cf1 	.word	0x08007cf1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d00b      	beq.n	8007c10 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	7c12      	ldrb	r2, [r2, #16]
 8007c04:	f107 0108 	add.w	r1, r7, #8
 8007c08:	4610      	mov	r0, r2
 8007c0a:	4798      	blx	r3
 8007c0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c0e:	e091      	b.n	8007d34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c10:	6839      	ldr	r1, [r7, #0]
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 facb 	bl	80081ae <USBD_CtlError>
            err++;
 8007c18:	7afb      	ldrb	r3, [r7, #11]
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	72fb      	strb	r3, [r7, #11]
          break;
 8007c1e:	e089      	b.n	8007d34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d00b      	beq.n	8007c44 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	7c12      	ldrb	r2, [r2, #16]
 8007c38:	f107 0108 	add.w	r1, r7, #8
 8007c3c:	4610      	mov	r0, r2
 8007c3e:	4798      	blx	r3
 8007c40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c42:	e077      	b.n	8007d34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c44:	6839      	ldr	r1, [r7, #0]
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 fab1 	bl	80081ae <USBD_CtlError>
            err++;
 8007c4c:	7afb      	ldrb	r3, [r7, #11]
 8007c4e:	3301      	adds	r3, #1
 8007c50:	72fb      	strb	r3, [r7, #11]
          break;
 8007c52:	e06f      	b.n	8007d34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d00b      	beq.n	8007c78 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c66:	68db      	ldr	r3, [r3, #12]
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	7c12      	ldrb	r2, [r2, #16]
 8007c6c:	f107 0108 	add.w	r1, r7, #8
 8007c70:	4610      	mov	r0, r2
 8007c72:	4798      	blx	r3
 8007c74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c76:	e05d      	b.n	8007d34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c78:	6839      	ldr	r1, [r7, #0]
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 fa97 	bl	80081ae <USBD_CtlError>
            err++;
 8007c80:	7afb      	ldrb	r3, [r7, #11]
 8007c82:	3301      	adds	r3, #1
 8007c84:	72fb      	strb	r3, [r7, #11]
          break;
 8007c86:	e055      	b.n	8007d34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c8e:	691b      	ldr	r3, [r3, #16]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d00b      	beq.n	8007cac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c9a:	691b      	ldr	r3, [r3, #16]
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	7c12      	ldrb	r2, [r2, #16]
 8007ca0:	f107 0108 	add.w	r1, r7, #8
 8007ca4:	4610      	mov	r0, r2
 8007ca6:	4798      	blx	r3
 8007ca8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007caa:	e043      	b.n	8007d34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007cac:	6839      	ldr	r1, [r7, #0]
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 fa7d 	bl	80081ae <USBD_CtlError>
            err++;
 8007cb4:	7afb      	ldrb	r3, [r7, #11]
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	72fb      	strb	r3, [r7, #11]
          break;
 8007cba:	e03b      	b.n	8007d34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cc2:	695b      	ldr	r3, [r3, #20]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d00b      	beq.n	8007ce0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cce:	695b      	ldr	r3, [r3, #20]
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	7c12      	ldrb	r2, [r2, #16]
 8007cd4:	f107 0108 	add.w	r1, r7, #8
 8007cd8:	4610      	mov	r0, r2
 8007cda:	4798      	blx	r3
 8007cdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cde:	e029      	b.n	8007d34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ce0:	6839      	ldr	r1, [r7, #0]
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 fa63 	bl	80081ae <USBD_CtlError>
            err++;
 8007ce8:	7afb      	ldrb	r3, [r7, #11]
 8007cea:	3301      	adds	r3, #1
 8007cec:	72fb      	strb	r3, [r7, #11]
          break;
 8007cee:	e021      	b.n	8007d34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cf6:	699b      	ldr	r3, [r3, #24]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d00b      	beq.n	8007d14 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d02:	699b      	ldr	r3, [r3, #24]
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	7c12      	ldrb	r2, [r2, #16]
 8007d08:	f107 0108 	add.w	r1, r7, #8
 8007d0c:	4610      	mov	r0, r2
 8007d0e:	4798      	blx	r3
 8007d10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d12:	e00f      	b.n	8007d34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d14:	6839      	ldr	r1, [r7, #0]
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 fa49 	bl	80081ae <USBD_CtlError>
            err++;
 8007d1c:	7afb      	ldrb	r3, [r7, #11]
 8007d1e:	3301      	adds	r3, #1
 8007d20:	72fb      	strb	r3, [r7, #11]
          break;
 8007d22:	e007      	b.n	8007d34 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007d24:	6839      	ldr	r1, [r7, #0]
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 fa41 	bl	80081ae <USBD_CtlError>
          err++;
 8007d2c:	7afb      	ldrb	r3, [r7, #11]
 8007d2e:	3301      	adds	r3, #1
 8007d30:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007d32:	bf00      	nop
      }
      break;
 8007d34:	e037      	b.n	8007da6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	7c1b      	ldrb	r3, [r3, #16]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d109      	bne.n	8007d52 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d46:	f107 0208 	add.w	r2, r7, #8
 8007d4a:	4610      	mov	r0, r2
 8007d4c:	4798      	blx	r3
 8007d4e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d50:	e029      	b.n	8007da6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d52:	6839      	ldr	r1, [r7, #0]
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 fa2a 	bl	80081ae <USBD_CtlError>
        err++;
 8007d5a:	7afb      	ldrb	r3, [r7, #11]
 8007d5c:	3301      	adds	r3, #1
 8007d5e:	72fb      	strb	r3, [r7, #11]
      break;
 8007d60:	e021      	b.n	8007da6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	7c1b      	ldrb	r3, [r3, #16]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d10d      	bne.n	8007d86 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d72:	f107 0208 	add.w	r2, r7, #8
 8007d76:	4610      	mov	r0, r2
 8007d78:	4798      	blx	r3
 8007d7a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	3301      	adds	r3, #1
 8007d80:	2207      	movs	r2, #7
 8007d82:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d84:	e00f      	b.n	8007da6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d86:	6839      	ldr	r1, [r7, #0]
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 fa10 	bl	80081ae <USBD_CtlError>
        err++;
 8007d8e:	7afb      	ldrb	r3, [r7, #11]
 8007d90:	3301      	adds	r3, #1
 8007d92:	72fb      	strb	r3, [r7, #11]
      break;
 8007d94:	e007      	b.n	8007da6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007d96:	6839      	ldr	r1, [r7, #0]
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 fa08 	bl	80081ae <USBD_CtlError>
      err++;
 8007d9e:	7afb      	ldrb	r3, [r7, #11]
 8007da0:	3301      	adds	r3, #1
 8007da2:	72fb      	strb	r3, [r7, #11]
      break;
 8007da4:	bf00      	nop
  }

  if (err != 0U)
 8007da6:	7afb      	ldrb	r3, [r7, #11]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d11e      	bne.n	8007dea <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	88db      	ldrh	r3, [r3, #6]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d016      	beq.n	8007de2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007db4:	893b      	ldrh	r3, [r7, #8]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d00e      	beq.n	8007dd8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	88da      	ldrh	r2, [r3, #6]
 8007dbe:	893b      	ldrh	r3, [r7, #8]
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	bf28      	it	cs
 8007dc4:	4613      	movcs	r3, r2
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007dca:	893b      	ldrh	r3, [r7, #8]
 8007dcc:	461a      	mov	r2, r3
 8007dce:	68f9      	ldr	r1, [r7, #12]
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 fa5d 	bl	8008290 <USBD_CtlSendData>
 8007dd6:	e009      	b.n	8007dec <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007dd8:	6839      	ldr	r1, [r7, #0]
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 f9e7 	bl	80081ae <USBD_CtlError>
 8007de0:	e004      	b.n	8007dec <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 faae 	bl	8008344 <USBD_CtlSendStatus>
 8007de8:	e000      	b.n	8007dec <USBD_GetDescriptor+0x2cc>
    return;
 8007dea:	bf00      	nop
  }
}
 8007dec:	3710      	adds	r7, #16
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop

08007df4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	889b      	ldrh	r3, [r3, #4]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d131      	bne.n	8007e6a <USBD_SetAddress+0x76>
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	88db      	ldrh	r3, [r3, #6]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d12d      	bne.n	8007e6a <USBD_SetAddress+0x76>
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	885b      	ldrh	r3, [r3, #2]
 8007e12:	2b7f      	cmp	r3, #127	@ 0x7f
 8007e14:	d829      	bhi.n	8007e6a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	885b      	ldrh	r3, [r3, #2]
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e20:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	2b03      	cmp	r3, #3
 8007e2c:	d104      	bne.n	8007e38 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007e2e:	6839      	ldr	r1, [r7, #0]
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 f9bc 	bl	80081ae <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e36:	e01d      	b.n	8007e74 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	7bfa      	ldrb	r2, [r7, #15]
 8007e3c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007e40:	7bfb      	ldrb	r3, [r7, #15]
 8007e42:	4619      	mov	r1, r3
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 ff13 	bl	8008c70 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 fa7a 	bl	8008344 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007e50:	7bfb      	ldrb	r3, [r7, #15]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d004      	beq.n	8007e60 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2202      	movs	r2, #2
 8007e5a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e5e:	e009      	b.n	8007e74 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2201      	movs	r2, #1
 8007e64:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e68:	e004      	b.n	8007e74 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007e6a:	6839      	ldr	r1, [r7, #0]
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 f99e 	bl	80081ae <USBD_CtlError>
  }
}
 8007e72:	bf00      	nop
 8007e74:	bf00      	nop
 8007e76:	3710      	adds	r7, #16
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b084      	sub	sp, #16
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e86:	2300      	movs	r3, #0
 8007e88:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	885b      	ldrh	r3, [r3, #2]
 8007e8e:	b2da      	uxtb	r2, r3
 8007e90:	4b4e      	ldr	r3, [pc, #312]	@ (8007fcc <USBD_SetConfig+0x150>)
 8007e92:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007e94:	4b4d      	ldr	r3, [pc, #308]	@ (8007fcc <USBD_SetConfig+0x150>)
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d905      	bls.n	8007ea8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007e9c:	6839      	ldr	r1, [r7, #0]
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 f985 	bl	80081ae <USBD_CtlError>
    return USBD_FAIL;
 8007ea4:	2303      	movs	r3, #3
 8007ea6:	e08c      	b.n	8007fc2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	2b02      	cmp	r3, #2
 8007eb2:	d002      	beq.n	8007eba <USBD_SetConfig+0x3e>
 8007eb4:	2b03      	cmp	r3, #3
 8007eb6:	d029      	beq.n	8007f0c <USBD_SetConfig+0x90>
 8007eb8:	e075      	b.n	8007fa6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007eba:	4b44      	ldr	r3, [pc, #272]	@ (8007fcc <USBD_SetConfig+0x150>)
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d020      	beq.n	8007f04 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007ec2:	4b42      	ldr	r3, [pc, #264]	@ (8007fcc <USBD_SetConfig+0x150>)
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007ecc:	4b3f      	ldr	r3, [pc, #252]	@ (8007fcc <USBD_SetConfig+0x150>)
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f7fe ffe9 	bl	8006eaa <USBD_SetClassConfig>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007edc:	7bfb      	ldrb	r3, [r7, #15]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d008      	beq.n	8007ef4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007ee2:	6839      	ldr	r1, [r7, #0]
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 f962 	bl	80081ae <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2202      	movs	r2, #2
 8007eee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007ef2:	e065      	b.n	8007fc0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f000 fa25 	bl	8008344 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2203      	movs	r2, #3
 8007efe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007f02:	e05d      	b.n	8007fc0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 fa1d 	bl	8008344 <USBD_CtlSendStatus>
      break;
 8007f0a:	e059      	b.n	8007fc0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007f0c:	4b2f      	ldr	r3, [pc, #188]	@ (8007fcc <USBD_SetConfig+0x150>)
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d112      	bne.n	8007f3a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2202      	movs	r2, #2
 8007f18:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007f1c:	4b2b      	ldr	r3, [pc, #172]	@ (8007fcc <USBD_SetConfig+0x150>)
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	461a      	mov	r2, r3
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007f26:	4b29      	ldr	r3, [pc, #164]	@ (8007fcc <USBD_SetConfig+0x150>)
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f7fe ffd8 	bl	8006ee2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 fa06 	bl	8008344 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007f38:	e042      	b.n	8007fc0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007f3a:	4b24      	ldr	r3, [pc, #144]	@ (8007fcc <USBD_SetConfig+0x150>)
 8007f3c:	781b      	ldrb	r3, [r3, #0]
 8007f3e:	461a      	mov	r2, r3
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d02a      	beq.n	8007f9e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	b2db      	uxtb	r3, r3
 8007f4e:	4619      	mov	r1, r3
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f7fe ffc6 	bl	8006ee2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007f56:	4b1d      	ldr	r3, [pc, #116]	@ (8007fcc <USBD_SetConfig+0x150>)
 8007f58:	781b      	ldrb	r3, [r3, #0]
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f60:	4b1a      	ldr	r3, [pc, #104]	@ (8007fcc <USBD_SetConfig+0x150>)
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	4619      	mov	r1, r3
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f7fe ff9f 	bl	8006eaa <USBD_SetClassConfig>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007f70:	7bfb      	ldrb	r3, [r7, #15]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d00f      	beq.n	8007f96 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007f76:	6839      	ldr	r1, [r7, #0]
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 f918 	bl	80081ae <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	4619      	mov	r1, r3
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f7fe ffab 	bl	8006ee2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2202      	movs	r2, #2
 8007f90:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007f94:	e014      	b.n	8007fc0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 f9d4 	bl	8008344 <USBD_CtlSendStatus>
      break;
 8007f9c:	e010      	b.n	8007fc0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 f9d0 	bl	8008344 <USBD_CtlSendStatus>
      break;
 8007fa4:	e00c      	b.n	8007fc0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007fa6:	6839      	ldr	r1, [r7, #0]
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f000 f900 	bl	80081ae <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007fae:	4b07      	ldr	r3, [pc, #28]	@ (8007fcc <USBD_SetConfig+0x150>)
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f7fe ff94 	bl	8006ee2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007fba:	2303      	movs	r3, #3
 8007fbc:	73fb      	strb	r3, [r7, #15]
      break;
 8007fbe:	bf00      	nop
  }

  return ret;
 8007fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3710      	adds	r7, #16
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	200002a4 	.word	0x200002a4

08007fd0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	88db      	ldrh	r3, [r3, #6]
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d004      	beq.n	8007fec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007fe2:	6839      	ldr	r1, [r7, #0]
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f000 f8e2 	bl	80081ae <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007fea:	e023      	b.n	8008034 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	2b02      	cmp	r3, #2
 8007ff6:	dc02      	bgt.n	8007ffe <USBD_GetConfig+0x2e>
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	dc03      	bgt.n	8008004 <USBD_GetConfig+0x34>
 8007ffc:	e015      	b.n	800802a <USBD_GetConfig+0x5a>
 8007ffe:	2b03      	cmp	r3, #3
 8008000:	d00b      	beq.n	800801a <USBD_GetConfig+0x4a>
 8008002:	e012      	b.n	800802a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	3308      	adds	r3, #8
 800800e:	2201      	movs	r2, #1
 8008010:	4619      	mov	r1, r3
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 f93c 	bl	8008290 <USBD_CtlSendData>
        break;
 8008018:	e00c      	b.n	8008034 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	3304      	adds	r3, #4
 800801e:	2201      	movs	r2, #1
 8008020:	4619      	mov	r1, r3
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 f934 	bl	8008290 <USBD_CtlSendData>
        break;
 8008028:	e004      	b.n	8008034 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800802a:	6839      	ldr	r1, [r7, #0]
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 f8be 	bl	80081ae <USBD_CtlError>
        break;
 8008032:	bf00      	nop
}
 8008034:	bf00      	nop
 8008036:	3708      	adds	r7, #8
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800804c:	b2db      	uxtb	r3, r3
 800804e:	3b01      	subs	r3, #1
 8008050:	2b02      	cmp	r3, #2
 8008052:	d81e      	bhi.n	8008092 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	88db      	ldrh	r3, [r3, #6]
 8008058:	2b02      	cmp	r3, #2
 800805a:	d004      	beq.n	8008066 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800805c:	6839      	ldr	r1, [r7, #0]
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 f8a5 	bl	80081ae <USBD_CtlError>
        break;
 8008064:	e01a      	b.n	800809c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2201      	movs	r2, #1
 800806a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008072:	2b00      	cmp	r3, #0
 8008074:	d005      	beq.n	8008082 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	68db      	ldr	r3, [r3, #12]
 800807a:	f043 0202 	orr.w	r2, r3, #2
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	330c      	adds	r3, #12
 8008086:	2202      	movs	r2, #2
 8008088:	4619      	mov	r1, r3
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 f900 	bl	8008290 <USBD_CtlSendData>
      break;
 8008090:	e004      	b.n	800809c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008092:	6839      	ldr	r1, [r7, #0]
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f000 f88a 	bl	80081ae <USBD_CtlError>
      break;
 800809a:	bf00      	nop
  }
}
 800809c:	bf00      	nop
 800809e:	3708      	adds	r7, #8
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b082      	sub	sp, #8
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	885b      	ldrh	r3, [r3, #2]
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d107      	bne.n	80080c6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2201      	movs	r2, #1
 80080ba:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 f940 	bl	8008344 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80080c4:	e013      	b.n	80080ee <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	885b      	ldrh	r3, [r3, #2]
 80080ca:	2b02      	cmp	r3, #2
 80080cc:	d10b      	bne.n	80080e6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	889b      	ldrh	r3, [r3, #4]
 80080d2:	0a1b      	lsrs	r3, r3, #8
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	b2da      	uxtb	r2, r3
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 f930 	bl	8008344 <USBD_CtlSendStatus>
}
 80080e4:	e003      	b.n	80080ee <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80080e6:	6839      	ldr	r1, [r7, #0]
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 f860 	bl	80081ae <USBD_CtlError>
}
 80080ee:	bf00      	nop
 80080f0:	3708      	adds	r7, #8
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}

080080f6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080f6:	b580      	push	{r7, lr}
 80080f8:	b082      	sub	sp, #8
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	6078      	str	r0, [r7, #4]
 80080fe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008106:	b2db      	uxtb	r3, r3
 8008108:	3b01      	subs	r3, #1
 800810a:	2b02      	cmp	r3, #2
 800810c:	d80b      	bhi.n	8008126 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	885b      	ldrh	r3, [r3, #2]
 8008112:	2b01      	cmp	r3, #1
 8008114:	d10c      	bne.n	8008130 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2200      	movs	r2, #0
 800811a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 f910 	bl	8008344 <USBD_CtlSendStatus>
      }
      break;
 8008124:	e004      	b.n	8008130 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008126:	6839      	ldr	r1, [r7, #0]
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 f840 	bl	80081ae <USBD_CtlError>
      break;
 800812e:	e000      	b.n	8008132 <USBD_ClrFeature+0x3c>
      break;
 8008130:	bf00      	nop
  }
}
 8008132:	bf00      	nop
 8008134:	3708      	adds	r7, #8
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}

0800813a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800813a:	b580      	push	{r7, lr}
 800813c:	b084      	sub	sp, #16
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]
 8008142:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	781a      	ldrb	r2, [r3, #0]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	3301      	adds	r3, #1
 8008154:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	781a      	ldrb	r2, [r3, #0]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	3301      	adds	r3, #1
 8008162:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008164:	68f8      	ldr	r0, [r7, #12]
 8008166:	f7ff fa40 	bl	80075ea <SWAPBYTE>
 800816a:	4603      	mov	r3, r0
 800816c:	461a      	mov	r2, r3
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	3301      	adds	r3, #1
 8008176:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	3301      	adds	r3, #1
 800817c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800817e:	68f8      	ldr	r0, [r7, #12]
 8008180:	f7ff fa33 	bl	80075ea <SWAPBYTE>
 8008184:	4603      	mov	r3, r0
 8008186:	461a      	mov	r2, r3
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	3301      	adds	r3, #1
 8008190:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	3301      	adds	r3, #1
 8008196:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008198:	68f8      	ldr	r0, [r7, #12]
 800819a:	f7ff fa26 	bl	80075ea <SWAPBYTE>
 800819e:	4603      	mov	r3, r0
 80081a0:	461a      	mov	r2, r3
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	80da      	strh	r2, [r3, #6]
}
 80081a6:	bf00      	nop
 80081a8:	3710      	adds	r7, #16
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}

080081ae <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b082      	sub	sp, #8
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
 80081b6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80081b8:	2180      	movs	r1, #128	@ 0x80
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 fcee 	bl	8008b9c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80081c0:	2100      	movs	r1, #0
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 fcea 	bl	8008b9c <USBD_LL_StallEP>
}
 80081c8:	bf00      	nop
 80081ca:	3708      	adds	r7, #8
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b086      	sub	sp, #24
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	60f8      	str	r0, [r7, #12]
 80081d8:	60b9      	str	r1, [r7, #8]
 80081da:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80081dc:	2300      	movs	r3, #0
 80081de:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d036      	beq.n	8008254 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80081ea:	6938      	ldr	r0, [r7, #16]
 80081ec:	f000 f836 	bl	800825c <USBD_GetLen>
 80081f0:	4603      	mov	r3, r0
 80081f2:	3301      	adds	r3, #1
 80081f4:	b29b      	uxth	r3, r3
 80081f6:	005b      	lsls	r3, r3, #1
 80081f8:	b29a      	uxth	r2, r3
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80081fe:	7dfb      	ldrb	r3, [r7, #23]
 8008200:	68ba      	ldr	r2, [r7, #8]
 8008202:	4413      	add	r3, r2
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	7812      	ldrb	r2, [r2, #0]
 8008208:	701a      	strb	r2, [r3, #0]
  idx++;
 800820a:	7dfb      	ldrb	r3, [r7, #23]
 800820c:	3301      	adds	r3, #1
 800820e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008210:	7dfb      	ldrb	r3, [r7, #23]
 8008212:	68ba      	ldr	r2, [r7, #8]
 8008214:	4413      	add	r3, r2
 8008216:	2203      	movs	r2, #3
 8008218:	701a      	strb	r2, [r3, #0]
  idx++;
 800821a:	7dfb      	ldrb	r3, [r7, #23]
 800821c:	3301      	adds	r3, #1
 800821e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008220:	e013      	b.n	800824a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008222:	7dfb      	ldrb	r3, [r7, #23]
 8008224:	68ba      	ldr	r2, [r7, #8]
 8008226:	4413      	add	r3, r2
 8008228:	693a      	ldr	r2, [r7, #16]
 800822a:	7812      	ldrb	r2, [r2, #0]
 800822c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	3301      	adds	r3, #1
 8008232:	613b      	str	r3, [r7, #16]
    idx++;
 8008234:	7dfb      	ldrb	r3, [r7, #23]
 8008236:	3301      	adds	r3, #1
 8008238:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800823a:	7dfb      	ldrb	r3, [r7, #23]
 800823c:	68ba      	ldr	r2, [r7, #8]
 800823e:	4413      	add	r3, r2
 8008240:	2200      	movs	r2, #0
 8008242:	701a      	strb	r2, [r3, #0]
    idx++;
 8008244:	7dfb      	ldrb	r3, [r7, #23]
 8008246:	3301      	adds	r3, #1
 8008248:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d1e7      	bne.n	8008222 <USBD_GetString+0x52>
 8008252:	e000      	b.n	8008256 <USBD_GetString+0x86>
    return;
 8008254:	bf00      	nop
  }
}
 8008256:	3718      	adds	r7, #24
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800825c:	b480      	push	{r7}
 800825e:	b085      	sub	sp, #20
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008264:	2300      	movs	r3, #0
 8008266:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800826c:	e005      	b.n	800827a <USBD_GetLen+0x1e>
  {
    len++;
 800826e:	7bfb      	ldrb	r3, [r7, #15]
 8008270:	3301      	adds	r3, #1
 8008272:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	3301      	adds	r3, #1
 8008278:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	781b      	ldrb	r3, [r3, #0]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d1f5      	bne.n	800826e <USBD_GetLen+0x12>
  }

  return len;
 8008282:	7bfb      	ldrb	r3, [r7, #15]
}
 8008284:	4618      	mov	r0, r3
 8008286:	3714      	adds	r7, #20
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr

08008290 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b084      	sub	sp, #16
 8008294:	af00      	add	r7, sp, #0
 8008296:	60f8      	str	r0, [r7, #12]
 8008298:	60b9      	str	r1, [r7, #8]
 800829a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2202      	movs	r2, #2
 80082a0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	68ba      	ldr	r2, [r7, #8]
 80082b4:	2100      	movs	r1, #0
 80082b6:	68f8      	ldr	r0, [r7, #12]
 80082b8:	f000 fcf9 	bl	8008cae <USBD_LL_Transmit>

  return USBD_OK;
 80082bc:	2300      	movs	r3, #0
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3710      	adds	r7, #16
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}

080082c6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80082c6:	b580      	push	{r7, lr}
 80082c8:	b084      	sub	sp, #16
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	60f8      	str	r0, [r7, #12]
 80082ce:	60b9      	str	r1, [r7, #8]
 80082d0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	68ba      	ldr	r2, [r7, #8]
 80082d6:	2100      	movs	r1, #0
 80082d8:	68f8      	ldr	r0, [r7, #12]
 80082da:	f000 fce8 	bl	8008cae <USBD_LL_Transmit>

  return USBD_OK;
 80082de:	2300      	movs	r3, #0
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3710      	adds	r7, #16
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	60b9      	str	r1, [r7, #8]
 80082f2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2203      	movs	r2, #3
 80082f8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	687a      	ldr	r2, [r7, #4]
 8008300:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	687a      	ldr	r2, [r7, #4]
 8008308:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	68ba      	ldr	r2, [r7, #8]
 8008310:	2100      	movs	r1, #0
 8008312:	68f8      	ldr	r0, [r7, #12]
 8008314:	f000 fcec 	bl	8008cf0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008318:	2300      	movs	r3, #0
}
 800831a:	4618      	mov	r0, r3
 800831c:	3710      	adds	r7, #16
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}

08008322 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008322:	b580      	push	{r7, lr}
 8008324:	b084      	sub	sp, #16
 8008326:	af00      	add	r7, sp, #0
 8008328:	60f8      	str	r0, [r7, #12]
 800832a:	60b9      	str	r1, [r7, #8]
 800832c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	68ba      	ldr	r2, [r7, #8]
 8008332:	2100      	movs	r1, #0
 8008334:	68f8      	ldr	r0, [r7, #12]
 8008336:	f000 fcdb 	bl	8008cf0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800833a:	2300      	movs	r3, #0
}
 800833c:	4618      	mov	r0, r3
 800833e:	3710      	adds	r7, #16
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b082      	sub	sp, #8
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2204      	movs	r2, #4
 8008350:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008354:	2300      	movs	r3, #0
 8008356:	2200      	movs	r2, #0
 8008358:	2100      	movs	r1, #0
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 fca7 	bl	8008cae <USBD_LL_Transmit>

  return USBD_OK;
 8008360:	2300      	movs	r3, #0
}
 8008362:	4618      	mov	r0, r3
 8008364:	3708      	adds	r7, #8
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}

0800836a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800836a:	b580      	push	{r7, lr}
 800836c:	b082      	sub	sp, #8
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2205      	movs	r2, #5
 8008376:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800837a:	2300      	movs	r3, #0
 800837c:	2200      	movs	r2, #0
 800837e:	2100      	movs	r1, #0
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f000 fcb5 	bl	8008cf0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008386:	2300      	movs	r3, #0
}
 8008388:	4618      	mov	r0, r3
 800838a:	3708      	adds	r7, #8
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008394:	2200      	movs	r2, #0
 8008396:	4912      	ldr	r1, [pc, #72]	@ (80083e0 <MX_USB_DEVICE_Init+0x50>)
 8008398:	4812      	ldr	r0, [pc, #72]	@ (80083e4 <MX_USB_DEVICE_Init+0x54>)
 800839a:	f7fe fd09 	bl	8006db0 <USBD_Init>
 800839e:	4603      	mov	r3, r0
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d001      	beq.n	80083a8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80083a4:	f7f9 f95a 	bl	800165c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80083a8:	490f      	ldr	r1, [pc, #60]	@ (80083e8 <MX_USB_DEVICE_Init+0x58>)
 80083aa:	480e      	ldr	r0, [pc, #56]	@ (80083e4 <MX_USB_DEVICE_Init+0x54>)
 80083ac:	f7fe fd30 	bl	8006e10 <USBD_RegisterClass>
 80083b0:	4603      	mov	r3, r0
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d001      	beq.n	80083ba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80083b6:	f7f9 f951 	bl	800165c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80083ba:	490c      	ldr	r1, [pc, #48]	@ (80083ec <MX_USB_DEVICE_Init+0x5c>)
 80083bc:	4809      	ldr	r0, [pc, #36]	@ (80083e4 <MX_USB_DEVICE_Init+0x54>)
 80083be:	f7fe fc21 	bl	8006c04 <USBD_CDC_RegisterInterface>
 80083c2:	4603      	mov	r3, r0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d001      	beq.n	80083cc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80083c8:	f7f9 f948 	bl	800165c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80083cc:	4805      	ldr	r0, [pc, #20]	@ (80083e4 <MX_USB_DEVICE_Init+0x54>)
 80083ce:	f7fe fd55 	bl	8006e7c <USBD_Start>
 80083d2:	4603      	mov	r3, r0
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d001      	beq.n	80083dc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80083d8:	f7f9 f940 	bl	800165c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80083dc:	bf00      	nop
 80083de:	bd80      	pop	{r7, pc}
 80083e0:	200000ac 	.word	0x200000ac
 80083e4:	200002a8 	.word	0x200002a8
 80083e8:	20000018 	.word	0x20000018
 80083ec:	20000098 	.word	0x20000098

080083f0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80083f4:	2200      	movs	r2, #0
 80083f6:	4905      	ldr	r1, [pc, #20]	@ (800840c <CDC_Init_FS+0x1c>)
 80083f8:	4805      	ldr	r0, [pc, #20]	@ (8008410 <CDC_Init_FS+0x20>)
 80083fa:	f7fe fc1d 	bl	8006c38 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80083fe:	4905      	ldr	r1, [pc, #20]	@ (8008414 <CDC_Init_FS+0x24>)
 8008400:	4803      	ldr	r0, [pc, #12]	@ (8008410 <CDC_Init_FS+0x20>)
 8008402:	f7fe fc3b 	bl	8006c7c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008406:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008408:	4618      	mov	r0, r3
 800840a:	bd80      	pop	{r7, pc}
 800840c:	20000d84 	.word	0x20000d84
 8008410:	200002a8 	.word	0x200002a8
 8008414:	20000584 	.word	0x20000584

08008418 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008418:	b480      	push	{r7}
 800841a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800841c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800841e:	4618      	mov	r0, r3
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr

08008428 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008428:	b480      	push	{r7}
 800842a:	b083      	sub	sp, #12
 800842c:	af00      	add	r7, sp, #0
 800842e:	4603      	mov	r3, r0
 8008430:	6039      	str	r1, [r7, #0]
 8008432:	71fb      	strb	r3, [r7, #7]
 8008434:	4613      	mov	r3, r2
 8008436:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008438:	79fb      	ldrb	r3, [r7, #7]
 800843a:	2b23      	cmp	r3, #35	@ 0x23
 800843c:	d84a      	bhi.n	80084d4 <CDC_Control_FS+0xac>
 800843e:	a201      	add	r2, pc, #4	@ (adr r2, 8008444 <CDC_Control_FS+0x1c>)
 8008440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008444:	080084d5 	.word	0x080084d5
 8008448:	080084d5 	.word	0x080084d5
 800844c:	080084d5 	.word	0x080084d5
 8008450:	080084d5 	.word	0x080084d5
 8008454:	080084d5 	.word	0x080084d5
 8008458:	080084d5 	.word	0x080084d5
 800845c:	080084d5 	.word	0x080084d5
 8008460:	080084d5 	.word	0x080084d5
 8008464:	080084d5 	.word	0x080084d5
 8008468:	080084d5 	.word	0x080084d5
 800846c:	080084d5 	.word	0x080084d5
 8008470:	080084d5 	.word	0x080084d5
 8008474:	080084d5 	.word	0x080084d5
 8008478:	080084d5 	.word	0x080084d5
 800847c:	080084d5 	.word	0x080084d5
 8008480:	080084d5 	.word	0x080084d5
 8008484:	080084d5 	.word	0x080084d5
 8008488:	080084d5 	.word	0x080084d5
 800848c:	080084d5 	.word	0x080084d5
 8008490:	080084d5 	.word	0x080084d5
 8008494:	080084d5 	.word	0x080084d5
 8008498:	080084d5 	.word	0x080084d5
 800849c:	080084d5 	.word	0x080084d5
 80084a0:	080084d5 	.word	0x080084d5
 80084a4:	080084d5 	.word	0x080084d5
 80084a8:	080084d5 	.word	0x080084d5
 80084ac:	080084d5 	.word	0x080084d5
 80084b0:	080084d5 	.word	0x080084d5
 80084b4:	080084d5 	.word	0x080084d5
 80084b8:	080084d5 	.word	0x080084d5
 80084bc:	080084d5 	.word	0x080084d5
 80084c0:	080084d5 	.word	0x080084d5
 80084c4:	080084d5 	.word	0x080084d5
 80084c8:	080084d5 	.word	0x080084d5
 80084cc:	080084d5 	.word	0x080084d5
 80084d0:	080084d5 	.word	0x080084d5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80084d4:	bf00      	nop
  }

  return (USBD_OK);
 80084d6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80084d8:	4618      	mov	r0, r3
 80084da:	370c      	adds	r7, #12
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr

080084e4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b082      	sub	sp, #8
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80084ee:	6879      	ldr	r1, [r7, #4]
 80084f0:	4805      	ldr	r0, [pc, #20]	@ (8008508 <CDC_Receive_FS+0x24>)
 80084f2:	f7fe fbc3 	bl	8006c7c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80084f6:	4804      	ldr	r0, [pc, #16]	@ (8008508 <CDC_Receive_FS+0x24>)
 80084f8:	f7fe fc24 	bl	8006d44 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80084fc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3708      	adds	r7, #8
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
 8008506:	bf00      	nop
 8008508:	200002a8 	.word	0x200002a8

0800850c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b084      	sub	sp, #16
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	460b      	mov	r3, r1
 8008516:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008518:	2300      	movs	r3, #0
 800851a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800851c:	4b0d      	ldr	r3, [pc, #52]	@ (8008554 <CDC_Transmit_FS+0x48>)
 800851e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008522:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800852a:	2b00      	cmp	r3, #0
 800852c:	d001      	beq.n	8008532 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800852e:	2301      	movs	r3, #1
 8008530:	e00b      	b.n	800854a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008532:	887b      	ldrh	r3, [r7, #2]
 8008534:	461a      	mov	r2, r3
 8008536:	6879      	ldr	r1, [r7, #4]
 8008538:	4806      	ldr	r0, [pc, #24]	@ (8008554 <CDC_Transmit_FS+0x48>)
 800853a:	f7fe fb7d 	bl	8006c38 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800853e:	4805      	ldr	r0, [pc, #20]	@ (8008554 <CDC_Transmit_FS+0x48>)
 8008540:	f7fe fbba 	bl	8006cb8 <USBD_CDC_TransmitPacket>
 8008544:	4603      	mov	r3, r0
 8008546:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008548:	7bfb      	ldrb	r3, [r7, #15]
}
 800854a:	4618      	mov	r0, r3
 800854c:	3710      	adds	r7, #16
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}
 8008552:	bf00      	nop
 8008554:	200002a8 	.word	0x200002a8

08008558 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008558:	b480      	push	{r7}
 800855a:	b087      	sub	sp, #28
 800855c:	af00      	add	r7, sp, #0
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	60b9      	str	r1, [r7, #8]
 8008562:	4613      	mov	r3, r2
 8008564:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008566:	2300      	movs	r3, #0
 8008568:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800856a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800856e:	4618      	mov	r0, r3
 8008570:	371c      	adds	r7, #28
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr
	...

0800857c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800857c:	b480      	push	{r7}
 800857e:	b083      	sub	sp, #12
 8008580:	af00      	add	r7, sp, #0
 8008582:	4603      	mov	r3, r0
 8008584:	6039      	str	r1, [r7, #0]
 8008586:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	2212      	movs	r2, #18
 800858c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800858e:	4b03      	ldr	r3, [pc, #12]	@ (800859c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008590:	4618      	mov	r0, r3
 8008592:	370c      	adds	r7, #12
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr
 800859c:	200000c8 	.word	0x200000c8

080085a0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b083      	sub	sp, #12
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	4603      	mov	r3, r0
 80085a8:	6039      	str	r1, [r7, #0]
 80085aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	2204      	movs	r2, #4
 80085b0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80085b2:	4b03      	ldr	r3, [pc, #12]	@ (80085c0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	370c      	adds	r7, #12
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr
 80085c0:	200000dc 	.word	0x200000dc

080085c4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b082      	sub	sp, #8
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	4603      	mov	r3, r0
 80085cc:	6039      	str	r1, [r7, #0]
 80085ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80085d0:	79fb      	ldrb	r3, [r7, #7]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d105      	bne.n	80085e2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80085d6:	683a      	ldr	r2, [r7, #0]
 80085d8:	4907      	ldr	r1, [pc, #28]	@ (80085f8 <USBD_FS_ProductStrDescriptor+0x34>)
 80085da:	4808      	ldr	r0, [pc, #32]	@ (80085fc <USBD_FS_ProductStrDescriptor+0x38>)
 80085dc:	f7ff fdf8 	bl	80081d0 <USBD_GetString>
 80085e0:	e004      	b.n	80085ec <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80085e2:	683a      	ldr	r2, [r7, #0]
 80085e4:	4904      	ldr	r1, [pc, #16]	@ (80085f8 <USBD_FS_ProductStrDescriptor+0x34>)
 80085e6:	4805      	ldr	r0, [pc, #20]	@ (80085fc <USBD_FS_ProductStrDescriptor+0x38>)
 80085e8:	f7ff fdf2 	bl	80081d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80085ec:	4b02      	ldr	r3, [pc, #8]	@ (80085f8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3708      	adds	r7, #8
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	bf00      	nop
 80085f8:	20001584 	.word	0x20001584
 80085fc:	08009820 	.word	0x08009820

08008600 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
 8008606:	4603      	mov	r3, r0
 8008608:	6039      	str	r1, [r7, #0]
 800860a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800860c:	683a      	ldr	r2, [r7, #0]
 800860e:	4904      	ldr	r1, [pc, #16]	@ (8008620 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008610:	4804      	ldr	r0, [pc, #16]	@ (8008624 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008612:	f7ff fddd 	bl	80081d0 <USBD_GetString>
  return USBD_StrDesc;
 8008616:	4b02      	ldr	r3, [pc, #8]	@ (8008620 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008618:	4618      	mov	r0, r3
 800861a:	3708      	adds	r7, #8
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}
 8008620:	20001584 	.word	0x20001584
 8008624:	08009838 	.word	0x08009838

08008628 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b082      	sub	sp, #8
 800862c:	af00      	add	r7, sp, #0
 800862e:	4603      	mov	r3, r0
 8008630:	6039      	str	r1, [r7, #0]
 8008632:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	221a      	movs	r2, #26
 8008638:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800863a:	f000 f843 	bl	80086c4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800863e:	4b02      	ldr	r3, [pc, #8]	@ (8008648 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008640:	4618      	mov	r0, r3
 8008642:	3708      	adds	r7, #8
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}
 8008648:	200000e0 	.word	0x200000e0

0800864c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b082      	sub	sp, #8
 8008650:	af00      	add	r7, sp, #0
 8008652:	4603      	mov	r3, r0
 8008654:	6039      	str	r1, [r7, #0]
 8008656:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008658:	79fb      	ldrb	r3, [r7, #7]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d105      	bne.n	800866a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800865e:	683a      	ldr	r2, [r7, #0]
 8008660:	4907      	ldr	r1, [pc, #28]	@ (8008680 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008662:	4808      	ldr	r0, [pc, #32]	@ (8008684 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008664:	f7ff fdb4 	bl	80081d0 <USBD_GetString>
 8008668:	e004      	b.n	8008674 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800866a:	683a      	ldr	r2, [r7, #0]
 800866c:	4904      	ldr	r1, [pc, #16]	@ (8008680 <USBD_FS_ConfigStrDescriptor+0x34>)
 800866e:	4805      	ldr	r0, [pc, #20]	@ (8008684 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008670:	f7ff fdae 	bl	80081d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008674:	4b02      	ldr	r3, [pc, #8]	@ (8008680 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008676:	4618      	mov	r0, r3
 8008678:	3708      	adds	r7, #8
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
 800867e:	bf00      	nop
 8008680:	20001584 	.word	0x20001584
 8008684:	0800984c 	.word	0x0800984c

08008688 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
 800868e:	4603      	mov	r3, r0
 8008690:	6039      	str	r1, [r7, #0]
 8008692:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008694:	79fb      	ldrb	r3, [r7, #7]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d105      	bne.n	80086a6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800869a:	683a      	ldr	r2, [r7, #0]
 800869c:	4907      	ldr	r1, [pc, #28]	@ (80086bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800869e:	4808      	ldr	r0, [pc, #32]	@ (80086c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80086a0:	f7ff fd96 	bl	80081d0 <USBD_GetString>
 80086a4:	e004      	b.n	80086b0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80086a6:	683a      	ldr	r2, [r7, #0]
 80086a8:	4904      	ldr	r1, [pc, #16]	@ (80086bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80086aa:	4805      	ldr	r0, [pc, #20]	@ (80086c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80086ac:	f7ff fd90 	bl	80081d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80086b0:	4b02      	ldr	r3, [pc, #8]	@ (80086bc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3708      	adds	r7, #8
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	bf00      	nop
 80086bc:	20001584 	.word	0x20001584
 80086c0:	08009858 	.word	0x08009858

080086c4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b084      	sub	sp, #16
 80086c8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80086ca:	4b0f      	ldr	r3, [pc, #60]	@ (8008708 <Get_SerialNum+0x44>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80086d0:	4b0e      	ldr	r3, [pc, #56]	@ (800870c <Get_SerialNum+0x48>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80086d6:	4b0e      	ldr	r3, [pc, #56]	@ (8008710 <Get_SerialNum+0x4c>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80086dc:	68fa      	ldr	r2, [r7, #12]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	4413      	add	r3, r2
 80086e2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d009      	beq.n	80086fe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80086ea:	2208      	movs	r2, #8
 80086ec:	4909      	ldr	r1, [pc, #36]	@ (8008714 <Get_SerialNum+0x50>)
 80086ee:	68f8      	ldr	r0, [r7, #12]
 80086f0:	f000 f814 	bl	800871c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80086f4:	2204      	movs	r2, #4
 80086f6:	4908      	ldr	r1, [pc, #32]	@ (8008718 <Get_SerialNum+0x54>)
 80086f8:	68b8      	ldr	r0, [r7, #8]
 80086fa:	f000 f80f 	bl	800871c <IntToUnicode>
  }
}
 80086fe:	bf00      	nop
 8008700:	3710      	adds	r7, #16
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop
 8008708:	1fff7a10 	.word	0x1fff7a10
 800870c:	1fff7a14 	.word	0x1fff7a14
 8008710:	1fff7a18 	.word	0x1fff7a18
 8008714:	200000e2 	.word	0x200000e2
 8008718:	200000f2 	.word	0x200000f2

0800871c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800871c:	b480      	push	{r7}
 800871e:	b087      	sub	sp, #28
 8008720:	af00      	add	r7, sp, #0
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	60b9      	str	r1, [r7, #8]
 8008726:	4613      	mov	r3, r2
 8008728:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800872a:	2300      	movs	r3, #0
 800872c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800872e:	2300      	movs	r3, #0
 8008730:	75fb      	strb	r3, [r7, #23]
 8008732:	e027      	b.n	8008784 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	0f1b      	lsrs	r3, r3, #28
 8008738:	2b09      	cmp	r3, #9
 800873a:	d80b      	bhi.n	8008754 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	0f1b      	lsrs	r3, r3, #28
 8008740:	b2da      	uxtb	r2, r3
 8008742:	7dfb      	ldrb	r3, [r7, #23]
 8008744:	005b      	lsls	r3, r3, #1
 8008746:	4619      	mov	r1, r3
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	440b      	add	r3, r1
 800874c:	3230      	adds	r2, #48	@ 0x30
 800874e:	b2d2      	uxtb	r2, r2
 8008750:	701a      	strb	r2, [r3, #0]
 8008752:	e00a      	b.n	800876a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	0f1b      	lsrs	r3, r3, #28
 8008758:	b2da      	uxtb	r2, r3
 800875a:	7dfb      	ldrb	r3, [r7, #23]
 800875c:	005b      	lsls	r3, r3, #1
 800875e:	4619      	mov	r1, r3
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	440b      	add	r3, r1
 8008764:	3237      	adds	r2, #55	@ 0x37
 8008766:	b2d2      	uxtb	r2, r2
 8008768:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	011b      	lsls	r3, r3, #4
 800876e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008770:	7dfb      	ldrb	r3, [r7, #23]
 8008772:	005b      	lsls	r3, r3, #1
 8008774:	3301      	adds	r3, #1
 8008776:	68ba      	ldr	r2, [r7, #8]
 8008778:	4413      	add	r3, r2
 800877a:	2200      	movs	r2, #0
 800877c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800877e:	7dfb      	ldrb	r3, [r7, #23]
 8008780:	3301      	adds	r3, #1
 8008782:	75fb      	strb	r3, [r7, #23]
 8008784:	7dfa      	ldrb	r2, [r7, #23]
 8008786:	79fb      	ldrb	r3, [r7, #7]
 8008788:	429a      	cmp	r2, r3
 800878a:	d3d3      	bcc.n	8008734 <IntToUnicode+0x18>
  }
}
 800878c:	bf00      	nop
 800878e:	bf00      	nop
 8008790:	371c      	adds	r7, #28
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr
	...

0800879c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b08a      	sub	sp, #40	@ 0x28
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087a4:	f107 0314 	add.w	r3, r7, #20
 80087a8:	2200      	movs	r2, #0
 80087aa:	601a      	str	r2, [r3, #0]
 80087ac:	605a      	str	r2, [r3, #4]
 80087ae:	609a      	str	r2, [r3, #8]
 80087b0:	60da      	str	r2, [r3, #12]
 80087b2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80087bc:	d147      	bne.n	800884e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80087be:	2300      	movs	r3, #0
 80087c0:	613b      	str	r3, [r7, #16]
 80087c2:	4b25      	ldr	r3, [pc, #148]	@ (8008858 <HAL_PCD_MspInit+0xbc>)
 80087c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087c6:	4a24      	ldr	r2, [pc, #144]	@ (8008858 <HAL_PCD_MspInit+0xbc>)
 80087c8:	f043 0301 	orr.w	r3, r3, #1
 80087cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80087ce:	4b22      	ldr	r3, [pc, #136]	@ (8008858 <HAL_PCD_MspInit+0xbc>)
 80087d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087d2:	f003 0301 	and.w	r3, r3, #1
 80087d6:	613b      	str	r3, [r7, #16]
 80087d8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80087da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80087de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80087e0:	2300      	movs	r3, #0
 80087e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087e4:	2300      	movs	r3, #0
 80087e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80087e8:	f107 0314 	add.w	r3, r7, #20
 80087ec:	4619      	mov	r1, r3
 80087ee:	481b      	ldr	r0, [pc, #108]	@ (800885c <HAL_PCD_MspInit+0xc0>)
 80087f0:	f7fa f900 	bl	80029f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80087f4:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80087f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087fa:	2302      	movs	r3, #2
 80087fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087fe:	2300      	movs	r3, #0
 8008800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008802:	2300      	movs	r3, #0
 8008804:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008806:	230a      	movs	r3, #10
 8008808:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800880a:	f107 0314 	add.w	r3, r7, #20
 800880e:	4619      	mov	r1, r3
 8008810:	4812      	ldr	r0, [pc, #72]	@ (800885c <HAL_PCD_MspInit+0xc0>)
 8008812:	f7fa f8ef 	bl	80029f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008816:	4b10      	ldr	r3, [pc, #64]	@ (8008858 <HAL_PCD_MspInit+0xbc>)
 8008818:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800881a:	4a0f      	ldr	r2, [pc, #60]	@ (8008858 <HAL_PCD_MspInit+0xbc>)
 800881c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008820:	6353      	str	r3, [r2, #52]	@ 0x34
 8008822:	2300      	movs	r3, #0
 8008824:	60fb      	str	r3, [r7, #12]
 8008826:	4b0c      	ldr	r3, [pc, #48]	@ (8008858 <HAL_PCD_MspInit+0xbc>)
 8008828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800882a:	4a0b      	ldr	r2, [pc, #44]	@ (8008858 <HAL_PCD_MspInit+0xbc>)
 800882c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008830:	6453      	str	r3, [r2, #68]	@ 0x44
 8008832:	4b09      	ldr	r3, [pc, #36]	@ (8008858 <HAL_PCD_MspInit+0xbc>)
 8008834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008836:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800883a:	60fb      	str	r3, [r7, #12]
 800883c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800883e:	2200      	movs	r2, #0
 8008840:	2100      	movs	r1, #0
 8008842:	2043      	movs	r0, #67	@ 0x43
 8008844:	f7f9 ffb7 	bl	80027b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008848:	2043      	movs	r0, #67	@ 0x43
 800884a:	f7f9 ffd0 	bl	80027ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800884e:	bf00      	nop
 8008850:	3728      	adds	r7, #40	@ 0x28
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
 8008856:	bf00      	nop
 8008858:	40023800 	.word	0x40023800
 800885c:	40020000 	.word	0x40020000

08008860 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b082      	sub	sp, #8
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8008874:	4619      	mov	r1, r3
 8008876:	4610      	mov	r0, r2
 8008878:	f7fe fb4d 	bl	8006f16 <USBD_LL_SetupStage>
}
 800887c:	bf00      	nop
 800887e:	3708      	adds	r7, #8
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b082      	sub	sp, #8
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	460b      	mov	r3, r1
 800888e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 8008896:	78fa      	ldrb	r2, [r7, #3]
 8008898:	6879      	ldr	r1, [r7, #4]
 800889a:	4613      	mov	r3, r2
 800889c:	00db      	lsls	r3, r3, #3
 800889e:	4413      	add	r3, r2
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	440b      	add	r3, r1
 80088a4:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	78fb      	ldrb	r3, [r7, #3]
 80088ac:	4619      	mov	r1, r3
 80088ae:	f7fe fb87 	bl	8006fc0 <USBD_LL_DataOutStage>
}
 80088b2:	bf00      	nop
 80088b4:	3708      	adds	r7, #8
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}

080088ba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088ba:	b580      	push	{r7, lr}
 80088bc:	b082      	sub	sp, #8
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
 80088c2:	460b      	mov	r3, r1
 80088c4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 80088cc:	78fa      	ldrb	r2, [r7, #3]
 80088ce:	6879      	ldr	r1, [r7, #4]
 80088d0:	4613      	mov	r3, r2
 80088d2:	00db      	lsls	r3, r3, #3
 80088d4:	4413      	add	r3, r2
 80088d6:	009b      	lsls	r3, r3, #2
 80088d8:	440b      	add	r3, r1
 80088da:	334c      	adds	r3, #76	@ 0x4c
 80088dc:	681a      	ldr	r2, [r3, #0]
 80088de:	78fb      	ldrb	r3, [r7, #3]
 80088e0:	4619      	mov	r1, r3
 80088e2:	f7fe fc20 	bl	8007126 <USBD_LL_DataInStage>
}
 80088e6:	bf00      	nop
 80088e8:	3708      	adds	r7, #8
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}

080088ee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088ee:	b580      	push	{r7, lr}
 80088f0:	b082      	sub	sp, #8
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80088fc:	4618      	mov	r0, r3
 80088fe:	f7fe fd54 	bl	80073aa <USBD_LL_SOF>
}
 8008902:	bf00      	nop
 8008904:	3708      	adds	r7, #8
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}

0800890a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800890a:	b580      	push	{r7, lr}
 800890c:	b084      	sub	sp, #16
 800890e:	af00      	add	r7, sp, #0
 8008910:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008912:	2301      	movs	r3, #1
 8008914:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	68db      	ldr	r3, [r3, #12]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d102      	bne.n	8008924 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800891e:	2300      	movs	r3, #0
 8008920:	73fb      	strb	r3, [r7, #15]
 8008922:	e008      	b.n	8008936 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	68db      	ldr	r3, [r3, #12]
 8008928:	2b02      	cmp	r3, #2
 800892a:	d102      	bne.n	8008932 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800892c:	2301      	movs	r3, #1
 800892e:	73fb      	strb	r3, [r7, #15]
 8008930:	e001      	b.n	8008936 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008932:	f7f8 fe93 	bl	800165c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800893c:	7bfa      	ldrb	r2, [r7, #15]
 800893e:	4611      	mov	r1, r2
 8008940:	4618      	mov	r0, r3
 8008942:	f7fe fcf4 	bl	800732e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800894c:	4618      	mov	r0, r3
 800894e:	f7fe fc9c 	bl	800728a <USBD_LL_Reset>
}
 8008952:	bf00      	nop
 8008954:	3710      	adds	r7, #16
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}
	...

0800895c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b082      	sub	sp, #8
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800896a:	4618      	mov	r0, r3
 800896c:	f7fe fcef 	bl	800734e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	687a      	ldr	r2, [r7, #4]
 800897c:	6812      	ldr	r2, [r2, #0]
 800897e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008982:	f043 0301 	orr.w	r3, r3, #1
 8008986:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6a1b      	ldr	r3, [r3, #32]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d005      	beq.n	800899c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008990:	4b04      	ldr	r3, [pc, #16]	@ (80089a4 <HAL_PCD_SuspendCallback+0x48>)
 8008992:	691b      	ldr	r3, [r3, #16]
 8008994:	4a03      	ldr	r2, [pc, #12]	@ (80089a4 <HAL_PCD_SuspendCallback+0x48>)
 8008996:	f043 0306 	orr.w	r3, r3, #6
 800899a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800899c:	bf00      	nop
 800899e:	3708      	adds	r7, #8
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}
 80089a4:	e000ed00 	.word	0xe000ed00

080089a8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b082      	sub	sp, #8
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80089b6:	4618      	mov	r0, r3
 80089b8:	f7fe fcdf 	bl	800737a <USBD_LL_Resume>
}
 80089bc:	bf00      	nop
 80089be:	3708      	adds	r7, #8
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b082      	sub	sp, #8
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	460b      	mov	r3, r1
 80089ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80089d6:	78fa      	ldrb	r2, [r7, #3]
 80089d8:	4611      	mov	r1, r2
 80089da:	4618      	mov	r0, r3
 80089dc:	f7fe fd37 	bl	800744e <USBD_LL_IsoOUTIncomplete>
}
 80089e0:	bf00      	nop
 80089e2:	3708      	adds	r7, #8
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}

080089e8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b082      	sub	sp, #8
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	460b      	mov	r3, r1
 80089f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80089fa:	78fa      	ldrb	r2, [r7, #3]
 80089fc:	4611      	mov	r1, r2
 80089fe:	4618      	mov	r0, r3
 8008a00:	f7fe fcf3 	bl	80073ea <USBD_LL_IsoINIncomplete>
}
 8008a04:	bf00      	nop
 8008a06:	3708      	adds	r7, #8
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b082      	sub	sp, #8
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f7fe fd49 	bl	80074b2 <USBD_LL_DevConnected>
}
 8008a20:	bf00      	nop
 8008a22:	3708      	adds	r7, #8
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b082      	sub	sp, #8
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008a36:	4618      	mov	r0, r3
 8008a38:	f7fe fd46 	bl	80074c8 <USBD_LL_DevDisconnected>
}
 8008a3c:	bf00      	nop
 8008a3e:	3708      	adds	r7, #8
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b082      	sub	sp, #8
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	781b      	ldrb	r3, [r3, #0]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d13c      	bne.n	8008ace <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008a54:	4a20      	ldr	r2, [pc, #128]	@ (8008ad8 <USBD_LL_Init+0x94>)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	4a1e      	ldr	r2, [pc, #120]	@ (8008ad8 <USBD_LL_Init+0x94>)
 8008a60:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008a64:	4b1c      	ldr	r3, [pc, #112]	@ (8008ad8 <USBD_LL_Init+0x94>)
 8008a66:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008a6a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8008ad8 <USBD_LL_Init+0x94>)
 8008a6e:	2204      	movs	r2, #4
 8008a70:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008a72:	4b19      	ldr	r3, [pc, #100]	@ (8008ad8 <USBD_LL_Init+0x94>)
 8008a74:	2202      	movs	r2, #2
 8008a76:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008a78:	4b17      	ldr	r3, [pc, #92]	@ (8008ad8 <USBD_LL_Init+0x94>)
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008a7e:	4b16      	ldr	r3, [pc, #88]	@ (8008ad8 <USBD_LL_Init+0x94>)
 8008a80:	2202      	movs	r2, #2
 8008a82:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008a84:	4b14      	ldr	r3, [pc, #80]	@ (8008ad8 <USBD_LL_Init+0x94>)
 8008a86:	2200      	movs	r2, #0
 8008a88:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008a8a:	4b13      	ldr	r3, [pc, #76]	@ (8008ad8 <USBD_LL_Init+0x94>)
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008a90:	4b11      	ldr	r3, [pc, #68]	@ (8008ad8 <USBD_LL_Init+0x94>)
 8008a92:	2200      	movs	r2, #0
 8008a94:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8008a96:	4b10      	ldr	r3, [pc, #64]	@ (8008ad8 <USBD_LL_Init+0x94>)
 8008a98:	2201      	movs	r2, #1
 8008a9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008a9c:	4b0e      	ldr	r3, [pc, #56]	@ (8008ad8 <USBD_LL_Init+0x94>)
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008aa2:	480d      	ldr	r0, [pc, #52]	@ (8008ad8 <USBD_LL_Init+0x94>)
 8008aa4:	f7fa f973 	bl	8002d8e <HAL_PCD_Init>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d001      	beq.n	8008ab2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008aae:	f7f8 fdd5 	bl	800165c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008ab2:	2180      	movs	r1, #128	@ 0x80
 8008ab4:	4808      	ldr	r0, [pc, #32]	@ (8008ad8 <USBD_LL_Init+0x94>)
 8008ab6:	f7fb fbca 	bl	800424e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008aba:	2240      	movs	r2, #64	@ 0x40
 8008abc:	2100      	movs	r1, #0
 8008abe:	4806      	ldr	r0, [pc, #24]	@ (8008ad8 <USBD_LL_Init+0x94>)
 8008ac0:	f7fb fb7e 	bl	80041c0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008ac4:	2280      	movs	r2, #128	@ 0x80
 8008ac6:	2101      	movs	r1, #1
 8008ac8:	4803      	ldr	r0, [pc, #12]	@ (8008ad8 <USBD_LL_Init+0x94>)
 8008aca:	f7fb fb79 	bl	80041c0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008ace:	2300      	movs	r3, #0
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3708      	adds	r7, #8
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}
 8008ad8:	20001784 	.word	0x20001784

08008adc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008af2:	4618      	mov	r0, r3
 8008af4:	f7fa fa68 	bl	8002fc8 <HAL_PCD_Start>
 8008af8:	4603      	mov	r3, r0
 8008afa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008afc:	7bfb      	ldrb	r3, [r7, #15]
 8008afe:	4618      	mov	r0, r3
 8008b00:	f000 f942 	bl	8008d88 <USBD_Get_USB_Status>
 8008b04:	4603      	mov	r3, r0
 8008b06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b08:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3710      	adds	r7, #16
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}

08008b12 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008b12:	b580      	push	{r7, lr}
 8008b14:	b084      	sub	sp, #16
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	6078      	str	r0, [r7, #4]
 8008b1a:	4608      	mov	r0, r1
 8008b1c:	4611      	mov	r1, r2
 8008b1e:	461a      	mov	r2, r3
 8008b20:	4603      	mov	r3, r0
 8008b22:	70fb      	strb	r3, [r7, #3]
 8008b24:	460b      	mov	r3, r1
 8008b26:	70bb      	strb	r3, [r7, #2]
 8008b28:	4613      	mov	r3, r2
 8008b2a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b30:	2300      	movs	r3, #0
 8008b32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008b3a:	78bb      	ldrb	r3, [r7, #2]
 8008b3c:	883a      	ldrh	r2, [r7, #0]
 8008b3e:	78f9      	ldrb	r1, [r7, #3]
 8008b40:	f7fa ff39 	bl	80039b6 <HAL_PCD_EP_Open>
 8008b44:	4603      	mov	r3, r0
 8008b46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b48:	7bfb      	ldrb	r3, [r7, #15]
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f000 f91c 	bl	8008d88 <USBD_Get_USB_Status>
 8008b50:	4603      	mov	r3, r0
 8008b52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b54:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3710      	adds	r7, #16
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}

08008b5e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b5e:	b580      	push	{r7, lr}
 8008b60:	b084      	sub	sp, #16
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	6078      	str	r0, [r7, #4]
 8008b66:	460b      	mov	r3, r1
 8008b68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008b78:	78fa      	ldrb	r2, [r7, #3]
 8008b7a:	4611      	mov	r1, r2
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f7fa ff82 	bl	8003a86 <HAL_PCD_EP_Close>
 8008b82:	4603      	mov	r3, r0
 8008b84:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b86:	7bfb      	ldrb	r3, [r7, #15]
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f000 f8fd 	bl	8008d88 <USBD_Get_USB_Status>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b92:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3710      	adds	r7, #16
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b084      	sub	sp, #16
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bac:	2300      	movs	r3, #0
 8008bae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008bb6:	78fa      	ldrb	r2, [r7, #3]
 8008bb8:	4611      	mov	r1, r2
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f7fb f85a 	bl	8003c74 <HAL_PCD_EP_SetStall>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bc4:	7bfb      	ldrb	r3, [r7, #15]
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f000 f8de 	bl	8008d88 <USBD_Get_USB_Status>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3710      	adds	r7, #16
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}

08008bda <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bda:	b580      	push	{r7, lr}
 8008bdc:	b084      	sub	sp, #16
 8008bde:	af00      	add	r7, sp, #0
 8008be0:	6078      	str	r0, [r7, #4]
 8008be2:	460b      	mov	r3, r1
 8008be4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008be6:	2300      	movs	r3, #0
 8008be8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bea:	2300      	movs	r3, #0
 8008bec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008bf4:	78fa      	ldrb	r2, [r7, #3]
 8008bf6:	4611      	mov	r1, r2
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f7fb f89f 	bl	8003d3c <HAL_PCD_EP_ClrStall>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c02:	7bfb      	ldrb	r3, [r7, #15]
 8008c04:	4618      	mov	r0, r3
 8008c06:	f000 f8bf 	bl	8008d88 <USBD_Get_USB_Status>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3710      	adds	r7, #16
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b085      	sub	sp, #20
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	460b      	mov	r3, r1
 8008c22:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008c2a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008c2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	da0b      	bge.n	8008c4c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008c34:	78fb      	ldrb	r3, [r7, #3]
 8008c36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008c3a:	68f9      	ldr	r1, [r7, #12]
 8008c3c:	4613      	mov	r3, r2
 8008c3e:	00db      	lsls	r3, r3, #3
 8008c40:	4413      	add	r3, r2
 8008c42:	009b      	lsls	r3, r3, #2
 8008c44:	440b      	add	r3, r1
 8008c46:	333e      	adds	r3, #62	@ 0x3e
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	e00b      	b.n	8008c64 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008c4c:	78fb      	ldrb	r3, [r7, #3]
 8008c4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008c52:	68f9      	ldr	r1, [r7, #12]
 8008c54:	4613      	mov	r3, r2
 8008c56:	00db      	lsls	r3, r3, #3
 8008c58:	4413      	add	r3, r2
 8008c5a:	009b      	lsls	r3, r3, #2
 8008c5c:	440b      	add	r3, r1
 8008c5e:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 8008c62:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3714      	adds	r7, #20
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr

08008c70 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b084      	sub	sp, #16
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	460b      	mov	r3, r1
 8008c7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c80:	2300      	movs	r3, #0
 8008c82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008c8a:	78fa      	ldrb	r2, [r7, #3]
 8008c8c:	4611      	mov	r1, r2
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f7fa fe6c 	bl	800396c <HAL_PCD_SetAddress>
 8008c94:	4603      	mov	r3, r0
 8008c96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c98:	7bfb      	ldrb	r3, [r7, #15]
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f000 f874 	bl	8008d88 <USBD_Get_USB_Status>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ca4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3710      	adds	r7, #16
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}

08008cae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b086      	sub	sp, #24
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	60f8      	str	r0, [r7, #12]
 8008cb6:	607a      	str	r2, [r7, #4]
 8008cb8:	603b      	str	r3, [r7, #0]
 8008cba:	460b      	mov	r3, r1
 8008cbc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008ccc:	7af9      	ldrb	r1, [r7, #11]
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	f7fa ff85 	bl	8003be0 <HAL_PCD_EP_Transmit>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cda:	7dfb      	ldrb	r3, [r7, #23]
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f000 f853 	bl	8008d88 <USBD_Get_USB_Status>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008ce6:	7dbb      	ldrb	r3, [r7, #22]
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3718      	adds	r7, #24
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}

08008cf0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b086      	sub	sp, #24
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	60f8      	str	r0, [r7, #12]
 8008cf8:	607a      	str	r2, [r7, #4]
 8008cfa:	603b      	str	r3, [r7, #0]
 8008cfc:	460b      	mov	r3, r1
 8008cfe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d00:	2300      	movs	r3, #0
 8008d02:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d04:	2300      	movs	r3, #0
 8008d06:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008d0e:	7af9      	ldrb	r1, [r7, #11]
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	f7fa ff01 	bl	8003b1a <HAL_PCD_EP_Receive>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d1c:	7dfb      	ldrb	r3, [r7, #23]
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f000 f832 	bl	8008d88 <USBD_Get_USB_Status>
 8008d24:	4603      	mov	r3, r0
 8008d26:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d28:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3718      	adds	r7, #24
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}

08008d32 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d32:	b580      	push	{r7, lr}
 8008d34:	b082      	sub	sp, #8
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	6078      	str	r0, [r7, #4]
 8008d3a:	460b      	mov	r3, r1
 8008d3c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008d44:	78fa      	ldrb	r2, [r7, #3]
 8008d46:	4611      	mov	r1, r2
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f7fa ff31 	bl	8003bb0 <HAL_PCD_EP_GetRxCount>
 8008d4e:	4603      	mov	r3, r0
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3708      	adds	r7, #8
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b083      	sub	sp, #12
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008d60:	4b03      	ldr	r3, [pc, #12]	@ (8008d70 <USBD_static_malloc+0x18>)
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	370c      	adds	r7, #12
 8008d66:	46bd      	mov	sp, r7
 8008d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6c:	4770      	bx	lr
 8008d6e:	bf00      	nop
 8008d70:	20001c90 	.word	0x20001c90

08008d74 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b083      	sub	sp, #12
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]

}
 8008d7c:	bf00      	nop
 8008d7e:	370c      	adds	r7, #12
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr

08008d88 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b085      	sub	sp, #20
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	4603      	mov	r3, r0
 8008d90:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d92:	2300      	movs	r3, #0
 8008d94:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008d96:	79fb      	ldrb	r3, [r7, #7]
 8008d98:	2b03      	cmp	r3, #3
 8008d9a:	d817      	bhi.n	8008dcc <USBD_Get_USB_Status+0x44>
 8008d9c:	a201      	add	r2, pc, #4	@ (adr r2, 8008da4 <USBD_Get_USB_Status+0x1c>)
 8008d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008da2:	bf00      	nop
 8008da4:	08008db5 	.word	0x08008db5
 8008da8:	08008dbb 	.word	0x08008dbb
 8008dac:	08008dc1 	.word	0x08008dc1
 8008db0:	08008dc7 	.word	0x08008dc7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008db4:	2300      	movs	r3, #0
 8008db6:	73fb      	strb	r3, [r7, #15]
    break;
 8008db8:	e00b      	b.n	8008dd2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008dba:	2303      	movs	r3, #3
 8008dbc:	73fb      	strb	r3, [r7, #15]
    break;
 8008dbe:	e008      	b.n	8008dd2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	73fb      	strb	r3, [r7, #15]
    break;
 8008dc4:	e005      	b.n	8008dd2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008dc6:	2303      	movs	r3, #3
 8008dc8:	73fb      	strb	r3, [r7, #15]
    break;
 8008dca:	e002      	b.n	8008dd2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008dcc:	2303      	movs	r3, #3
 8008dce:	73fb      	strb	r3, [r7, #15]
    break;
 8008dd0:	bf00      	nop
  }
  return usb_status;
 8008dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3714      	adds	r7, #20
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dde:	4770      	bx	lr

08008de0 <siprintf>:
 8008de0:	b40e      	push	{r1, r2, r3}
 8008de2:	b500      	push	{lr}
 8008de4:	b09c      	sub	sp, #112	@ 0x70
 8008de6:	ab1d      	add	r3, sp, #116	@ 0x74
 8008de8:	9002      	str	r0, [sp, #8]
 8008dea:	9006      	str	r0, [sp, #24]
 8008dec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008df0:	4809      	ldr	r0, [pc, #36]	@ (8008e18 <siprintf+0x38>)
 8008df2:	9107      	str	r1, [sp, #28]
 8008df4:	9104      	str	r1, [sp, #16]
 8008df6:	4909      	ldr	r1, [pc, #36]	@ (8008e1c <siprintf+0x3c>)
 8008df8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dfc:	9105      	str	r1, [sp, #20]
 8008dfe:	6800      	ldr	r0, [r0, #0]
 8008e00:	9301      	str	r3, [sp, #4]
 8008e02:	a902      	add	r1, sp, #8
 8008e04:	f000 f994 	bl	8009130 <_svfiprintf_r>
 8008e08:	9b02      	ldr	r3, [sp, #8]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	701a      	strb	r2, [r3, #0]
 8008e0e:	b01c      	add	sp, #112	@ 0x70
 8008e10:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e14:	b003      	add	sp, #12
 8008e16:	4770      	bx	lr
 8008e18:	200000fc 	.word	0x200000fc
 8008e1c:	ffff0208 	.word	0xffff0208

08008e20 <memset>:
 8008e20:	4402      	add	r2, r0
 8008e22:	4603      	mov	r3, r0
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d100      	bne.n	8008e2a <memset+0xa>
 8008e28:	4770      	bx	lr
 8008e2a:	f803 1b01 	strb.w	r1, [r3], #1
 8008e2e:	e7f9      	b.n	8008e24 <memset+0x4>

08008e30 <__errno>:
 8008e30:	4b01      	ldr	r3, [pc, #4]	@ (8008e38 <__errno+0x8>)
 8008e32:	6818      	ldr	r0, [r3, #0]
 8008e34:	4770      	bx	lr
 8008e36:	bf00      	nop
 8008e38:	200000fc 	.word	0x200000fc

08008e3c <__libc_init_array>:
 8008e3c:	b570      	push	{r4, r5, r6, lr}
 8008e3e:	4d0d      	ldr	r5, [pc, #52]	@ (8008e74 <__libc_init_array+0x38>)
 8008e40:	4c0d      	ldr	r4, [pc, #52]	@ (8008e78 <__libc_init_array+0x3c>)
 8008e42:	1b64      	subs	r4, r4, r5
 8008e44:	10a4      	asrs	r4, r4, #2
 8008e46:	2600      	movs	r6, #0
 8008e48:	42a6      	cmp	r6, r4
 8008e4a:	d109      	bne.n	8008e60 <__libc_init_array+0x24>
 8008e4c:	4d0b      	ldr	r5, [pc, #44]	@ (8008e7c <__libc_init_array+0x40>)
 8008e4e:	4c0c      	ldr	r4, [pc, #48]	@ (8008e80 <__libc_init_array+0x44>)
 8008e50:	f000 fc66 	bl	8009720 <_init>
 8008e54:	1b64      	subs	r4, r4, r5
 8008e56:	10a4      	asrs	r4, r4, #2
 8008e58:	2600      	movs	r6, #0
 8008e5a:	42a6      	cmp	r6, r4
 8008e5c:	d105      	bne.n	8008e6a <__libc_init_array+0x2e>
 8008e5e:	bd70      	pop	{r4, r5, r6, pc}
 8008e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e64:	4798      	blx	r3
 8008e66:	3601      	adds	r6, #1
 8008e68:	e7ee      	b.n	8008e48 <__libc_init_array+0xc>
 8008e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e6e:	4798      	blx	r3
 8008e70:	3601      	adds	r6, #1
 8008e72:	e7f2      	b.n	8008e5a <__libc_init_array+0x1e>
 8008e74:	080098b4 	.word	0x080098b4
 8008e78:	080098b4 	.word	0x080098b4
 8008e7c:	080098b4 	.word	0x080098b4
 8008e80:	080098b8 	.word	0x080098b8

08008e84 <__retarget_lock_acquire_recursive>:
 8008e84:	4770      	bx	lr

08008e86 <__retarget_lock_release_recursive>:
 8008e86:	4770      	bx	lr

08008e88 <_free_r>:
 8008e88:	b538      	push	{r3, r4, r5, lr}
 8008e8a:	4605      	mov	r5, r0
 8008e8c:	2900      	cmp	r1, #0
 8008e8e:	d041      	beq.n	8008f14 <_free_r+0x8c>
 8008e90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e94:	1f0c      	subs	r4, r1, #4
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	bfb8      	it	lt
 8008e9a:	18e4      	addlt	r4, r4, r3
 8008e9c:	f000 f8e0 	bl	8009060 <__malloc_lock>
 8008ea0:	4a1d      	ldr	r2, [pc, #116]	@ (8008f18 <_free_r+0x90>)
 8008ea2:	6813      	ldr	r3, [r2, #0]
 8008ea4:	b933      	cbnz	r3, 8008eb4 <_free_r+0x2c>
 8008ea6:	6063      	str	r3, [r4, #4]
 8008ea8:	6014      	str	r4, [r2, #0]
 8008eaa:	4628      	mov	r0, r5
 8008eac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008eb0:	f000 b8dc 	b.w	800906c <__malloc_unlock>
 8008eb4:	42a3      	cmp	r3, r4
 8008eb6:	d908      	bls.n	8008eca <_free_r+0x42>
 8008eb8:	6820      	ldr	r0, [r4, #0]
 8008eba:	1821      	adds	r1, r4, r0
 8008ebc:	428b      	cmp	r3, r1
 8008ebe:	bf01      	itttt	eq
 8008ec0:	6819      	ldreq	r1, [r3, #0]
 8008ec2:	685b      	ldreq	r3, [r3, #4]
 8008ec4:	1809      	addeq	r1, r1, r0
 8008ec6:	6021      	streq	r1, [r4, #0]
 8008ec8:	e7ed      	b.n	8008ea6 <_free_r+0x1e>
 8008eca:	461a      	mov	r2, r3
 8008ecc:	685b      	ldr	r3, [r3, #4]
 8008ece:	b10b      	cbz	r3, 8008ed4 <_free_r+0x4c>
 8008ed0:	42a3      	cmp	r3, r4
 8008ed2:	d9fa      	bls.n	8008eca <_free_r+0x42>
 8008ed4:	6811      	ldr	r1, [r2, #0]
 8008ed6:	1850      	adds	r0, r2, r1
 8008ed8:	42a0      	cmp	r0, r4
 8008eda:	d10b      	bne.n	8008ef4 <_free_r+0x6c>
 8008edc:	6820      	ldr	r0, [r4, #0]
 8008ede:	4401      	add	r1, r0
 8008ee0:	1850      	adds	r0, r2, r1
 8008ee2:	4283      	cmp	r3, r0
 8008ee4:	6011      	str	r1, [r2, #0]
 8008ee6:	d1e0      	bne.n	8008eaa <_free_r+0x22>
 8008ee8:	6818      	ldr	r0, [r3, #0]
 8008eea:	685b      	ldr	r3, [r3, #4]
 8008eec:	6053      	str	r3, [r2, #4]
 8008eee:	4408      	add	r0, r1
 8008ef0:	6010      	str	r0, [r2, #0]
 8008ef2:	e7da      	b.n	8008eaa <_free_r+0x22>
 8008ef4:	d902      	bls.n	8008efc <_free_r+0x74>
 8008ef6:	230c      	movs	r3, #12
 8008ef8:	602b      	str	r3, [r5, #0]
 8008efa:	e7d6      	b.n	8008eaa <_free_r+0x22>
 8008efc:	6820      	ldr	r0, [r4, #0]
 8008efe:	1821      	adds	r1, r4, r0
 8008f00:	428b      	cmp	r3, r1
 8008f02:	bf04      	itt	eq
 8008f04:	6819      	ldreq	r1, [r3, #0]
 8008f06:	685b      	ldreq	r3, [r3, #4]
 8008f08:	6063      	str	r3, [r4, #4]
 8008f0a:	bf04      	itt	eq
 8008f0c:	1809      	addeq	r1, r1, r0
 8008f0e:	6021      	streq	r1, [r4, #0]
 8008f10:	6054      	str	r4, [r2, #4]
 8008f12:	e7ca      	b.n	8008eaa <_free_r+0x22>
 8008f14:	bd38      	pop	{r3, r4, r5, pc}
 8008f16:	bf00      	nop
 8008f18:	20001ff4 	.word	0x20001ff4

08008f1c <sbrk_aligned>:
 8008f1c:	b570      	push	{r4, r5, r6, lr}
 8008f1e:	4e0f      	ldr	r6, [pc, #60]	@ (8008f5c <sbrk_aligned+0x40>)
 8008f20:	460c      	mov	r4, r1
 8008f22:	6831      	ldr	r1, [r6, #0]
 8008f24:	4605      	mov	r5, r0
 8008f26:	b911      	cbnz	r1, 8008f2e <sbrk_aligned+0x12>
 8008f28:	f000 fba6 	bl	8009678 <_sbrk_r>
 8008f2c:	6030      	str	r0, [r6, #0]
 8008f2e:	4621      	mov	r1, r4
 8008f30:	4628      	mov	r0, r5
 8008f32:	f000 fba1 	bl	8009678 <_sbrk_r>
 8008f36:	1c43      	adds	r3, r0, #1
 8008f38:	d103      	bne.n	8008f42 <sbrk_aligned+0x26>
 8008f3a:	f04f 34ff 	mov.w	r4, #4294967295
 8008f3e:	4620      	mov	r0, r4
 8008f40:	bd70      	pop	{r4, r5, r6, pc}
 8008f42:	1cc4      	adds	r4, r0, #3
 8008f44:	f024 0403 	bic.w	r4, r4, #3
 8008f48:	42a0      	cmp	r0, r4
 8008f4a:	d0f8      	beq.n	8008f3e <sbrk_aligned+0x22>
 8008f4c:	1a21      	subs	r1, r4, r0
 8008f4e:	4628      	mov	r0, r5
 8008f50:	f000 fb92 	bl	8009678 <_sbrk_r>
 8008f54:	3001      	adds	r0, #1
 8008f56:	d1f2      	bne.n	8008f3e <sbrk_aligned+0x22>
 8008f58:	e7ef      	b.n	8008f3a <sbrk_aligned+0x1e>
 8008f5a:	bf00      	nop
 8008f5c:	20001ff0 	.word	0x20001ff0

08008f60 <_malloc_r>:
 8008f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f64:	1ccd      	adds	r5, r1, #3
 8008f66:	f025 0503 	bic.w	r5, r5, #3
 8008f6a:	3508      	adds	r5, #8
 8008f6c:	2d0c      	cmp	r5, #12
 8008f6e:	bf38      	it	cc
 8008f70:	250c      	movcc	r5, #12
 8008f72:	2d00      	cmp	r5, #0
 8008f74:	4606      	mov	r6, r0
 8008f76:	db01      	blt.n	8008f7c <_malloc_r+0x1c>
 8008f78:	42a9      	cmp	r1, r5
 8008f7a:	d904      	bls.n	8008f86 <_malloc_r+0x26>
 8008f7c:	230c      	movs	r3, #12
 8008f7e:	6033      	str	r3, [r6, #0]
 8008f80:	2000      	movs	r0, #0
 8008f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800905c <_malloc_r+0xfc>
 8008f8a:	f000 f869 	bl	8009060 <__malloc_lock>
 8008f8e:	f8d8 3000 	ldr.w	r3, [r8]
 8008f92:	461c      	mov	r4, r3
 8008f94:	bb44      	cbnz	r4, 8008fe8 <_malloc_r+0x88>
 8008f96:	4629      	mov	r1, r5
 8008f98:	4630      	mov	r0, r6
 8008f9a:	f7ff ffbf 	bl	8008f1c <sbrk_aligned>
 8008f9e:	1c43      	adds	r3, r0, #1
 8008fa0:	4604      	mov	r4, r0
 8008fa2:	d158      	bne.n	8009056 <_malloc_r+0xf6>
 8008fa4:	f8d8 4000 	ldr.w	r4, [r8]
 8008fa8:	4627      	mov	r7, r4
 8008faa:	2f00      	cmp	r7, #0
 8008fac:	d143      	bne.n	8009036 <_malloc_r+0xd6>
 8008fae:	2c00      	cmp	r4, #0
 8008fb0:	d04b      	beq.n	800904a <_malloc_r+0xea>
 8008fb2:	6823      	ldr	r3, [r4, #0]
 8008fb4:	4639      	mov	r1, r7
 8008fb6:	4630      	mov	r0, r6
 8008fb8:	eb04 0903 	add.w	r9, r4, r3
 8008fbc:	f000 fb5c 	bl	8009678 <_sbrk_r>
 8008fc0:	4581      	cmp	r9, r0
 8008fc2:	d142      	bne.n	800904a <_malloc_r+0xea>
 8008fc4:	6821      	ldr	r1, [r4, #0]
 8008fc6:	1a6d      	subs	r5, r5, r1
 8008fc8:	4629      	mov	r1, r5
 8008fca:	4630      	mov	r0, r6
 8008fcc:	f7ff ffa6 	bl	8008f1c <sbrk_aligned>
 8008fd0:	3001      	adds	r0, #1
 8008fd2:	d03a      	beq.n	800904a <_malloc_r+0xea>
 8008fd4:	6823      	ldr	r3, [r4, #0]
 8008fd6:	442b      	add	r3, r5
 8008fd8:	6023      	str	r3, [r4, #0]
 8008fda:	f8d8 3000 	ldr.w	r3, [r8]
 8008fde:	685a      	ldr	r2, [r3, #4]
 8008fe0:	bb62      	cbnz	r2, 800903c <_malloc_r+0xdc>
 8008fe2:	f8c8 7000 	str.w	r7, [r8]
 8008fe6:	e00f      	b.n	8009008 <_malloc_r+0xa8>
 8008fe8:	6822      	ldr	r2, [r4, #0]
 8008fea:	1b52      	subs	r2, r2, r5
 8008fec:	d420      	bmi.n	8009030 <_malloc_r+0xd0>
 8008fee:	2a0b      	cmp	r2, #11
 8008ff0:	d917      	bls.n	8009022 <_malloc_r+0xc2>
 8008ff2:	1961      	adds	r1, r4, r5
 8008ff4:	42a3      	cmp	r3, r4
 8008ff6:	6025      	str	r5, [r4, #0]
 8008ff8:	bf18      	it	ne
 8008ffa:	6059      	strne	r1, [r3, #4]
 8008ffc:	6863      	ldr	r3, [r4, #4]
 8008ffe:	bf08      	it	eq
 8009000:	f8c8 1000 	streq.w	r1, [r8]
 8009004:	5162      	str	r2, [r4, r5]
 8009006:	604b      	str	r3, [r1, #4]
 8009008:	4630      	mov	r0, r6
 800900a:	f000 f82f 	bl	800906c <__malloc_unlock>
 800900e:	f104 000b 	add.w	r0, r4, #11
 8009012:	1d23      	adds	r3, r4, #4
 8009014:	f020 0007 	bic.w	r0, r0, #7
 8009018:	1ac2      	subs	r2, r0, r3
 800901a:	bf1c      	itt	ne
 800901c:	1a1b      	subne	r3, r3, r0
 800901e:	50a3      	strne	r3, [r4, r2]
 8009020:	e7af      	b.n	8008f82 <_malloc_r+0x22>
 8009022:	6862      	ldr	r2, [r4, #4]
 8009024:	42a3      	cmp	r3, r4
 8009026:	bf0c      	ite	eq
 8009028:	f8c8 2000 	streq.w	r2, [r8]
 800902c:	605a      	strne	r2, [r3, #4]
 800902e:	e7eb      	b.n	8009008 <_malloc_r+0xa8>
 8009030:	4623      	mov	r3, r4
 8009032:	6864      	ldr	r4, [r4, #4]
 8009034:	e7ae      	b.n	8008f94 <_malloc_r+0x34>
 8009036:	463c      	mov	r4, r7
 8009038:	687f      	ldr	r7, [r7, #4]
 800903a:	e7b6      	b.n	8008faa <_malloc_r+0x4a>
 800903c:	461a      	mov	r2, r3
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	42a3      	cmp	r3, r4
 8009042:	d1fb      	bne.n	800903c <_malloc_r+0xdc>
 8009044:	2300      	movs	r3, #0
 8009046:	6053      	str	r3, [r2, #4]
 8009048:	e7de      	b.n	8009008 <_malloc_r+0xa8>
 800904a:	230c      	movs	r3, #12
 800904c:	6033      	str	r3, [r6, #0]
 800904e:	4630      	mov	r0, r6
 8009050:	f000 f80c 	bl	800906c <__malloc_unlock>
 8009054:	e794      	b.n	8008f80 <_malloc_r+0x20>
 8009056:	6005      	str	r5, [r0, #0]
 8009058:	e7d6      	b.n	8009008 <_malloc_r+0xa8>
 800905a:	bf00      	nop
 800905c:	20001ff4 	.word	0x20001ff4

08009060 <__malloc_lock>:
 8009060:	4801      	ldr	r0, [pc, #4]	@ (8009068 <__malloc_lock+0x8>)
 8009062:	f7ff bf0f 	b.w	8008e84 <__retarget_lock_acquire_recursive>
 8009066:	bf00      	nop
 8009068:	20001fec 	.word	0x20001fec

0800906c <__malloc_unlock>:
 800906c:	4801      	ldr	r0, [pc, #4]	@ (8009074 <__malloc_unlock+0x8>)
 800906e:	f7ff bf0a 	b.w	8008e86 <__retarget_lock_release_recursive>
 8009072:	bf00      	nop
 8009074:	20001fec 	.word	0x20001fec

08009078 <__ssputs_r>:
 8009078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800907c:	688e      	ldr	r6, [r1, #8]
 800907e:	461f      	mov	r7, r3
 8009080:	42be      	cmp	r6, r7
 8009082:	680b      	ldr	r3, [r1, #0]
 8009084:	4682      	mov	sl, r0
 8009086:	460c      	mov	r4, r1
 8009088:	4690      	mov	r8, r2
 800908a:	d82d      	bhi.n	80090e8 <__ssputs_r+0x70>
 800908c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009090:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009094:	d026      	beq.n	80090e4 <__ssputs_r+0x6c>
 8009096:	6965      	ldr	r5, [r4, #20]
 8009098:	6909      	ldr	r1, [r1, #16]
 800909a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800909e:	eba3 0901 	sub.w	r9, r3, r1
 80090a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80090a6:	1c7b      	adds	r3, r7, #1
 80090a8:	444b      	add	r3, r9
 80090aa:	106d      	asrs	r5, r5, #1
 80090ac:	429d      	cmp	r5, r3
 80090ae:	bf38      	it	cc
 80090b0:	461d      	movcc	r5, r3
 80090b2:	0553      	lsls	r3, r2, #21
 80090b4:	d527      	bpl.n	8009106 <__ssputs_r+0x8e>
 80090b6:	4629      	mov	r1, r5
 80090b8:	f7ff ff52 	bl	8008f60 <_malloc_r>
 80090bc:	4606      	mov	r6, r0
 80090be:	b360      	cbz	r0, 800911a <__ssputs_r+0xa2>
 80090c0:	6921      	ldr	r1, [r4, #16]
 80090c2:	464a      	mov	r2, r9
 80090c4:	f000 fae8 	bl	8009698 <memcpy>
 80090c8:	89a3      	ldrh	r3, [r4, #12]
 80090ca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80090ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090d2:	81a3      	strh	r3, [r4, #12]
 80090d4:	6126      	str	r6, [r4, #16]
 80090d6:	6165      	str	r5, [r4, #20]
 80090d8:	444e      	add	r6, r9
 80090da:	eba5 0509 	sub.w	r5, r5, r9
 80090de:	6026      	str	r6, [r4, #0]
 80090e0:	60a5      	str	r5, [r4, #8]
 80090e2:	463e      	mov	r6, r7
 80090e4:	42be      	cmp	r6, r7
 80090e6:	d900      	bls.n	80090ea <__ssputs_r+0x72>
 80090e8:	463e      	mov	r6, r7
 80090ea:	6820      	ldr	r0, [r4, #0]
 80090ec:	4632      	mov	r2, r6
 80090ee:	4641      	mov	r1, r8
 80090f0:	f000 faa8 	bl	8009644 <memmove>
 80090f4:	68a3      	ldr	r3, [r4, #8]
 80090f6:	1b9b      	subs	r3, r3, r6
 80090f8:	60a3      	str	r3, [r4, #8]
 80090fa:	6823      	ldr	r3, [r4, #0]
 80090fc:	4433      	add	r3, r6
 80090fe:	6023      	str	r3, [r4, #0]
 8009100:	2000      	movs	r0, #0
 8009102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009106:	462a      	mov	r2, r5
 8009108:	f000 fad4 	bl	80096b4 <_realloc_r>
 800910c:	4606      	mov	r6, r0
 800910e:	2800      	cmp	r0, #0
 8009110:	d1e0      	bne.n	80090d4 <__ssputs_r+0x5c>
 8009112:	6921      	ldr	r1, [r4, #16]
 8009114:	4650      	mov	r0, sl
 8009116:	f7ff feb7 	bl	8008e88 <_free_r>
 800911a:	230c      	movs	r3, #12
 800911c:	f8ca 3000 	str.w	r3, [sl]
 8009120:	89a3      	ldrh	r3, [r4, #12]
 8009122:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009126:	81a3      	strh	r3, [r4, #12]
 8009128:	f04f 30ff 	mov.w	r0, #4294967295
 800912c:	e7e9      	b.n	8009102 <__ssputs_r+0x8a>
	...

08009130 <_svfiprintf_r>:
 8009130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009134:	4698      	mov	r8, r3
 8009136:	898b      	ldrh	r3, [r1, #12]
 8009138:	061b      	lsls	r3, r3, #24
 800913a:	b09d      	sub	sp, #116	@ 0x74
 800913c:	4607      	mov	r7, r0
 800913e:	460d      	mov	r5, r1
 8009140:	4614      	mov	r4, r2
 8009142:	d510      	bpl.n	8009166 <_svfiprintf_r+0x36>
 8009144:	690b      	ldr	r3, [r1, #16]
 8009146:	b973      	cbnz	r3, 8009166 <_svfiprintf_r+0x36>
 8009148:	2140      	movs	r1, #64	@ 0x40
 800914a:	f7ff ff09 	bl	8008f60 <_malloc_r>
 800914e:	6028      	str	r0, [r5, #0]
 8009150:	6128      	str	r0, [r5, #16]
 8009152:	b930      	cbnz	r0, 8009162 <_svfiprintf_r+0x32>
 8009154:	230c      	movs	r3, #12
 8009156:	603b      	str	r3, [r7, #0]
 8009158:	f04f 30ff 	mov.w	r0, #4294967295
 800915c:	b01d      	add	sp, #116	@ 0x74
 800915e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009162:	2340      	movs	r3, #64	@ 0x40
 8009164:	616b      	str	r3, [r5, #20]
 8009166:	2300      	movs	r3, #0
 8009168:	9309      	str	r3, [sp, #36]	@ 0x24
 800916a:	2320      	movs	r3, #32
 800916c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009170:	f8cd 800c 	str.w	r8, [sp, #12]
 8009174:	2330      	movs	r3, #48	@ 0x30
 8009176:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009314 <_svfiprintf_r+0x1e4>
 800917a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800917e:	f04f 0901 	mov.w	r9, #1
 8009182:	4623      	mov	r3, r4
 8009184:	469a      	mov	sl, r3
 8009186:	f813 2b01 	ldrb.w	r2, [r3], #1
 800918a:	b10a      	cbz	r2, 8009190 <_svfiprintf_r+0x60>
 800918c:	2a25      	cmp	r2, #37	@ 0x25
 800918e:	d1f9      	bne.n	8009184 <_svfiprintf_r+0x54>
 8009190:	ebba 0b04 	subs.w	fp, sl, r4
 8009194:	d00b      	beq.n	80091ae <_svfiprintf_r+0x7e>
 8009196:	465b      	mov	r3, fp
 8009198:	4622      	mov	r2, r4
 800919a:	4629      	mov	r1, r5
 800919c:	4638      	mov	r0, r7
 800919e:	f7ff ff6b 	bl	8009078 <__ssputs_r>
 80091a2:	3001      	adds	r0, #1
 80091a4:	f000 80a7 	beq.w	80092f6 <_svfiprintf_r+0x1c6>
 80091a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80091aa:	445a      	add	r2, fp
 80091ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80091ae:	f89a 3000 	ldrb.w	r3, [sl]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	f000 809f 	beq.w	80092f6 <_svfiprintf_r+0x1c6>
 80091b8:	2300      	movs	r3, #0
 80091ba:	f04f 32ff 	mov.w	r2, #4294967295
 80091be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091c2:	f10a 0a01 	add.w	sl, sl, #1
 80091c6:	9304      	str	r3, [sp, #16]
 80091c8:	9307      	str	r3, [sp, #28]
 80091ca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80091ce:	931a      	str	r3, [sp, #104]	@ 0x68
 80091d0:	4654      	mov	r4, sl
 80091d2:	2205      	movs	r2, #5
 80091d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091d8:	484e      	ldr	r0, [pc, #312]	@ (8009314 <_svfiprintf_r+0x1e4>)
 80091da:	f7f7 f801 	bl	80001e0 <memchr>
 80091de:	9a04      	ldr	r2, [sp, #16]
 80091e0:	b9d8      	cbnz	r0, 800921a <_svfiprintf_r+0xea>
 80091e2:	06d0      	lsls	r0, r2, #27
 80091e4:	bf44      	itt	mi
 80091e6:	2320      	movmi	r3, #32
 80091e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091ec:	0711      	lsls	r1, r2, #28
 80091ee:	bf44      	itt	mi
 80091f0:	232b      	movmi	r3, #43	@ 0x2b
 80091f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091f6:	f89a 3000 	ldrb.w	r3, [sl]
 80091fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80091fc:	d015      	beq.n	800922a <_svfiprintf_r+0xfa>
 80091fe:	9a07      	ldr	r2, [sp, #28]
 8009200:	4654      	mov	r4, sl
 8009202:	2000      	movs	r0, #0
 8009204:	f04f 0c0a 	mov.w	ip, #10
 8009208:	4621      	mov	r1, r4
 800920a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800920e:	3b30      	subs	r3, #48	@ 0x30
 8009210:	2b09      	cmp	r3, #9
 8009212:	d94b      	bls.n	80092ac <_svfiprintf_r+0x17c>
 8009214:	b1b0      	cbz	r0, 8009244 <_svfiprintf_r+0x114>
 8009216:	9207      	str	r2, [sp, #28]
 8009218:	e014      	b.n	8009244 <_svfiprintf_r+0x114>
 800921a:	eba0 0308 	sub.w	r3, r0, r8
 800921e:	fa09 f303 	lsl.w	r3, r9, r3
 8009222:	4313      	orrs	r3, r2
 8009224:	9304      	str	r3, [sp, #16]
 8009226:	46a2      	mov	sl, r4
 8009228:	e7d2      	b.n	80091d0 <_svfiprintf_r+0xa0>
 800922a:	9b03      	ldr	r3, [sp, #12]
 800922c:	1d19      	adds	r1, r3, #4
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	9103      	str	r1, [sp, #12]
 8009232:	2b00      	cmp	r3, #0
 8009234:	bfbb      	ittet	lt
 8009236:	425b      	neglt	r3, r3
 8009238:	f042 0202 	orrlt.w	r2, r2, #2
 800923c:	9307      	strge	r3, [sp, #28]
 800923e:	9307      	strlt	r3, [sp, #28]
 8009240:	bfb8      	it	lt
 8009242:	9204      	strlt	r2, [sp, #16]
 8009244:	7823      	ldrb	r3, [r4, #0]
 8009246:	2b2e      	cmp	r3, #46	@ 0x2e
 8009248:	d10a      	bne.n	8009260 <_svfiprintf_r+0x130>
 800924a:	7863      	ldrb	r3, [r4, #1]
 800924c:	2b2a      	cmp	r3, #42	@ 0x2a
 800924e:	d132      	bne.n	80092b6 <_svfiprintf_r+0x186>
 8009250:	9b03      	ldr	r3, [sp, #12]
 8009252:	1d1a      	adds	r2, r3, #4
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	9203      	str	r2, [sp, #12]
 8009258:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800925c:	3402      	adds	r4, #2
 800925e:	9305      	str	r3, [sp, #20]
 8009260:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009324 <_svfiprintf_r+0x1f4>
 8009264:	7821      	ldrb	r1, [r4, #0]
 8009266:	2203      	movs	r2, #3
 8009268:	4650      	mov	r0, sl
 800926a:	f7f6 ffb9 	bl	80001e0 <memchr>
 800926e:	b138      	cbz	r0, 8009280 <_svfiprintf_r+0x150>
 8009270:	9b04      	ldr	r3, [sp, #16]
 8009272:	eba0 000a 	sub.w	r0, r0, sl
 8009276:	2240      	movs	r2, #64	@ 0x40
 8009278:	4082      	lsls	r2, r0
 800927a:	4313      	orrs	r3, r2
 800927c:	3401      	adds	r4, #1
 800927e:	9304      	str	r3, [sp, #16]
 8009280:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009284:	4824      	ldr	r0, [pc, #144]	@ (8009318 <_svfiprintf_r+0x1e8>)
 8009286:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800928a:	2206      	movs	r2, #6
 800928c:	f7f6 ffa8 	bl	80001e0 <memchr>
 8009290:	2800      	cmp	r0, #0
 8009292:	d036      	beq.n	8009302 <_svfiprintf_r+0x1d2>
 8009294:	4b21      	ldr	r3, [pc, #132]	@ (800931c <_svfiprintf_r+0x1ec>)
 8009296:	bb1b      	cbnz	r3, 80092e0 <_svfiprintf_r+0x1b0>
 8009298:	9b03      	ldr	r3, [sp, #12]
 800929a:	3307      	adds	r3, #7
 800929c:	f023 0307 	bic.w	r3, r3, #7
 80092a0:	3308      	adds	r3, #8
 80092a2:	9303      	str	r3, [sp, #12]
 80092a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092a6:	4433      	add	r3, r6
 80092a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80092aa:	e76a      	b.n	8009182 <_svfiprintf_r+0x52>
 80092ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80092b0:	460c      	mov	r4, r1
 80092b2:	2001      	movs	r0, #1
 80092b4:	e7a8      	b.n	8009208 <_svfiprintf_r+0xd8>
 80092b6:	2300      	movs	r3, #0
 80092b8:	3401      	adds	r4, #1
 80092ba:	9305      	str	r3, [sp, #20]
 80092bc:	4619      	mov	r1, r3
 80092be:	f04f 0c0a 	mov.w	ip, #10
 80092c2:	4620      	mov	r0, r4
 80092c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092c8:	3a30      	subs	r2, #48	@ 0x30
 80092ca:	2a09      	cmp	r2, #9
 80092cc:	d903      	bls.n	80092d6 <_svfiprintf_r+0x1a6>
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d0c6      	beq.n	8009260 <_svfiprintf_r+0x130>
 80092d2:	9105      	str	r1, [sp, #20]
 80092d4:	e7c4      	b.n	8009260 <_svfiprintf_r+0x130>
 80092d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80092da:	4604      	mov	r4, r0
 80092dc:	2301      	movs	r3, #1
 80092de:	e7f0      	b.n	80092c2 <_svfiprintf_r+0x192>
 80092e0:	ab03      	add	r3, sp, #12
 80092e2:	9300      	str	r3, [sp, #0]
 80092e4:	462a      	mov	r2, r5
 80092e6:	4b0e      	ldr	r3, [pc, #56]	@ (8009320 <_svfiprintf_r+0x1f0>)
 80092e8:	a904      	add	r1, sp, #16
 80092ea:	4638      	mov	r0, r7
 80092ec:	f3af 8000 	nop.w
 80092f0:	1c42      	adds	r2, r0, #1
 80092f2:	4606      	mov	r6, r0
 80092f4:	d1d6      	bne.n	80092a4 <_svfiprintf_r+0x174>
 80092f6:	89ab      	ldrh	r3, [r5, #12]
 80092f8:	065b      	lsls	r3, r3, #25
 80092fa:	f53f af2d 	bmi.w	8009158 <_svfiprintf_r+0x28>
 80092fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009300:	e72c      	b.n	800915c <_svfiprintf_r+0x2c>
 8009302:	ab03      	add	r3, sp, #12
 8009304:	9300      	str	r3, [sp, #0]
 8009306:	462a      	mov	r2, r5
 8009308:	4b05      	ldr	r3, [pc, #20]	@ (8009320 <_svfiprintf_r+0x1f0>)
 800930a:	a904      	add	r1, sp, #16
 800930c:	4638      	mov	r0, r7
 800930e:	f000 f879 	bl	8009404 <_printf_i>
 8009312:	e7ed      	b.n	80092f0 <_svfiprintf_r+0x1c0>
 8009314:	08009878 	.word	0x08009878
 8009318:	08009882 	.word	0x08009882
 800931c:	00000000 	.word	0x00000000
 8009320:	08009079 	.word	0x08009079
 8009324:	0800987e 	.word	0x0800987e

08009328 <_printf_common>:
 8009328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800932c:	4616      	mov	r6, r2
 800932e:	4698      	mov	r8, r3
 8009330:	688a      	ldr	r2, [r1, #8]
 8009332:	690b      	ldr	r3, [r1, #16]
 8009334:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009338:	4293      	cmp	r3, r2
 800933a:	bfb8      	it	lt
 800933c:	4613      	movlt	r3, r2
 800933e:	6033      	str	r3, [r6, #0]
 8009340:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009344:	4607      	mov	r7, r0
 8009346:	460c      	mov	r4, r1
 8009348:	b10a      	cbz	r2, 800934e <_printf_common+0x26>
 800934a:	3301      	adds	r3, #1
 800934c:	6033      	str	r3, [r6, #0]
 800934e:	6823      	ldr	r3, [r4, #0]
 8009350:	0699      	lsls	r1, r3, #26
 8009352:	bf42      	ittt	mi
 8009354:	6833      	ldrmi	r3, [r6, #0]
 8009356:	3302      	addmi	r3, #2
 8009358:	6033      	strmi	r3, [r6, #0]
 800935a:	6825      	ldr	r5, [r4, #0]
 800935c:	f015 0506 	ands.w	r5, r5, #6
 8009360:	d106      	bne.n	8009370 <_printf_common+0x48>
 8009362:	f104 0a19 	add.w	sl, r4, #25
 8009366:	68e3      	ldr	r3, [r4, #12]
 8009368:	6832      	ldr	r2, [r6, #0]
 800936a:	1a9b      	subs	r3, r3, r2
 800936c:	42ab      	cmp	r3, r5
 800936e:	dc26      	bgt.n	80093be <_printf_common+0x96>
 8009370:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009374:	6822      	ldr	r2, [r4, #0]
 8009376:	3b00      	subs	r3, #0
 8009378:	bf18      	it	ne
 800937a:	2301      	movne	r3, #1
 800937c:	0692      	lsls	r2, r2, #26
 800937e:	d42b      	bmi.n	80093d8 <_printf_common+0xb0>
 8009380:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009384:	4641      	mov	r1, r8
 8009386:	4638      	mov	r0, r7
 8009388:	47c8      	blx	r9
 800938a:	3001      	adds	r0, #1
 800938c:	d01e      	beq.n	80093cc <_printf_common+0xa4>
 800938e:	6823      	ldr	r3, [r4, #0]
 8009390:	6922      	ldr	r2, [r4, #16]
 8009392:	f003 0306 	and.w	r3, r3, #6
 8009396:	2b04      	cmp	r3, #4
 8009398:	bf02      	ittt	eq
 800939a:	68e5      	ldreq	r5, [r4, #12]
 800939c:	6833      	ldreq	r3, [r6, #0]
 800939e:	1aed      	subeq	r5, r5, r3
 80093a0:	68a3      	ldr	r3, [r4, #8]
 80093a2:	bf0c      	ite	eq
 80093a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80093a8:	2500      	movne	r5, #0
 80093aa:	4293      	cmp	r3, r2
 80093ac:	bfc4      	itt	gt
 80093ae:	1a9b      	subgt	r3, r3, r2
 80093b0:	18ed      	addgt	r5, r5, r3
 80093b2:	2600      	movs	r6, #0
 80093b4:	341a      	adds	r4, #26
 80093b6:	42b5      	cmp	r5, r6
 80093b8:	d11a      	bne.n	80093f0 <_printf_common+0xc8>
 80093ba:	2000      	movs	r0, #0
 80093bc:	e008      	b.n	80093d0 <_printf_common+0xa8>
 80093be:	2301      	movs	r3, #1
 80093c0:	4652      	mov	r2, sl
 80093c2:	4641      	mov	r1, r8
 80093c4:	4638      	mov	r0, r7
 80093c6:	47c8      	blx	r9
 80093c8:	3001      	adds	r0, #1
 80093ca:	d103      	bne.n	80093d4 <_printf_common+0xac>
 80093cc:	f04f 30ff 	mov.w	r0, #4294967295
 80093d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093d4:	3501      	adds	r5, #1
 80093d6:	e7c6      	b.n	8009366 <_printf_common+0x3e>
 80093d8:	18e1      	adds	r1, r4, r3
 80093da:	1c5a      	adds	r2, r3, #1
 80093dc:	2030      	movs	r0, #48	@ 0x30
 80093de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80093e2:	4422      	add	r2, r4
 80093e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80093e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80093ec:	3302      	adds	r3, #2
 80093ee:	e7c7      	b.n	8009380 <_printf_common+0x58>
 80093f0:	2301      	movs	r3, #1
 80093f2:	4622      	mov	r2, r4
 80093f4:	4641      	mov	r1, r8
 80093f6:	4638      	mov	r0, r7
 80093f8:	47c8      	blx	r9
 80093fa:	3001      	adds	r0, #1
 80093fc:	d0e6      	beq.n	80093cc <_printf_common+0xa4>
 80093fe:	3601      	adds	r6, #1
 8009400:	e7d9      	b.n	80093b6 <_printf_common+0x8e>
	...

08009404 <_printf_i>:
 8009404:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009408:	7e0f      	ldrb	r7, [r1, #24]
 800940a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800940c:	2f78      	cmp	r7, #120	@ 0x78
 800940e:	4691      	mov	r9, r2
 8009410:	4680      	mov	r8, r0
 8009412:	460c      	mov	r4, r1
 8009414:	469a      	mov	sl, r3
 8009416:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800941a:	d807      	bhi.n	800942c <_printf_i+0x28>
 800941c:	2f62      	cmp	r7, #98	@ 0x62
 800941e:	d80a      	bhi.n	8009436 <_printf_i+0x32>
 8009420:	2f00      	cmp	r7, #0
 8009422:	f000 80d2 	beq.w	80095ca <_printf_i+0x1c6>
 8009426:	2f58      	cmp	r7, #88	@ 0x58
 8009428:	f000 80b9 	beq.w	800959e <_printf_i+0x19a>
 800942c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009430:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009434:	e03a      	b.n	80094ac <_printf_i+0xa8>
 8009436:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800943a:	2b15      	cmp	r3, #21
 800943c:	d8f6      	bhi.n	800942c <_printf_i+0x28>
 800943e:	a101      	add	r1, pc, #4	@ (adr r1, 8009444 <_printf_i+0x40>)
 8009440:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009444:	0800949d 	.word	0x0800949d
 8009448:	080094b1 	.word	0x080094b1
 800944c:	0800942d 	.word	0x0800942d
 8009450:	0800942d 	.word	0x0800942d
 8009454:	0800942d 	.word	0x0800942d
 8009458:	0800942d 	.word	0x0800942d
 800945c:	080094b1 	.word	0x080094b1
 8009460:	0800942d 	.word	0x0800942d
 8009464:	0800942d 	.word	0x0800942d
 8009468:	0800942d 	.word	0x0800942d
 800946c:	0800942d 	.word	0x0800942d
 8009470:	080095b1 	.word	0x080095b1
 8009474:	080094db 	.word	0x080094db
 8009478:	0800956b 	.word	0x0800956b
 800947c:	0800942d 	.word	0x0800942d
 8009480:	0800942d 	.word	0x0800942d
 8009484:	080095d3 	.word	0x080095d3
 8009488:	0800942d 	.word	0x0800942d
 800948c:	080094db 	.word	0x080094db
 8009490:	0800942d 	.word	0x0800942d
 8009494:	0800942d 	.word	0x0800942d
 8009498:	08009573 	.word	0x08009573
 800949c:	6833      	ldr	r3, [r6, #0]
 800949e:	1d1a      	adds	r2, r3, #4
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	6032      	str	r2, [r6, #0]
 80094a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80094a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80094ac:	2301      	movs	r3, #1
 80094ae:	e09d      	b.n	80095ec <_printf_i+0x1e8>
 80094b0:	6833      	ldr	r3, [r6, #0]
 80094b2:	6820      	ldr	r0, [r4, #0]
 80094b4:	1d19      	adds	r1, r3, #4
 80094b6:	6031      	str	r1, [r6, #0]
 80094b8:	0606      	lsls	r6, r0, #24
 80094ba:	d501      	bpl.n	80094c0 <_printf_i+0xbc>
 80094bc:	681d      	ldr	r5, [r3, #0]
 80094be:	e003      	b.n	80094c8 <_printf_i+0xc4>
 80094c0:	0645      	lsls	r5, r0, #25
 80094c2:	d5fb      	bpl.n	80094bc <_printf_i+0xb8>
 80094c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80094c8:	2d00      	cmp	r5, #0
 80094ca:	da03      	bge.n	80094d4 <_printf_i+0xd0>
 80094cc:	232d      	movs	r3, #45	@ 0x2d
 80094ce:	426d      	negs	r5, r5
 80094d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80094d4:	4859      	ldr	r0, [pc, #356]	@ (800963c <_printf_i+0x238>)
 80094d6:	230a      	movs	r3, #10
 80094d8:	e011      	b.n	80094fe <_printf_i+0xfa>
 80094da:	6821      	ldr	r1, [r4, #0]
 80094dc:	6833      	ldr	r3, [r6, #0]
 80094de:	0608      	lsls	r0, r1, #24
 80094e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80094e4:	d402      	bmi.n	80094ec <_printf_i+0xe8>
 80094e6:	0649      	lsls	r1, r1, #25
 80094e8:	bf48      	it	mi
 80094ea:	b2ad      	uxthmi	r5, r5
 80094ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80094ee:	4853      	ldr	r0, [pc, #332]	@ (800963c <_printf_i+0x238>)
 80094f0:	6033      	str	r3, [r6, #0]
 80094f2:	bf14      	ite	ne
 80094f4:	230a      	movne	r3, #10
 80094f6:	2308      	moveq	r3, #8
 80094f8:	2100      	movs	r1, #0
 80094fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80094fe:	6866      	ldr	r6, [r4, #4]
 8009500:	60a6      	str	r6, [r4, #8]
 8009502:	2e00      	cmp	r6, #0
 8009504:	bfa2      	ittt	ge
 8009506:	6821      	ldrge	r1, [r4, #0]
 8009508:	f021 0104 	bicge.w	r1, r1, #4
 800950c:	6021      	strge	r1, [r4, #0]
 800950e:	b90d      	cbnz	r5, 8009514 <_printf_i+0x110>
 8009510:	2e00      	cmp	r6, #0
 8009512:	d04b      	beq.n	80095ac <_printf_i+0x1a8>
 8009514:	4616      	mov	r6, r2
 8009516:	fbb5 f1f3 	udiv	r1, r5, r3
 800951a:	fb03 5711 	mls	r7, r3, r1, r5
 800951e:	5dc7      	ldrb	r7, [r0, r7]
 8009520:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009524:	462f      	mov	r7, r5
 8009526:	42bb      	cmp	r3, r7
 8009528:	460d      	mov	r5, r1
 800952a:	d9f4      	bls.n	8009516 <_printf_i+0x112>
 800952c:	2b08      	cmp	r3, #8
 800952e:	d10b      	bne.n	8009548 <_printf_i+0x144>
 8009530:	6823      	ldr	r3, [r4, #0]
 8009532:	07df      	lsls	r7, r3, #31
 8009534:	d508      	bpl.n	8009548 <_printf_i+0x144>
 8009536:	6923      	ldr	r3, [r4, #16]
 8009538:	6861      	ldr	r1, [r4, #4]
 800953a:	4299      	cmp	r1, r3
 800953c:	bfde      	ittt	le
 800953e:	2330      	movle	r3, #48	@ 0x30
 8009540:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009544:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009548:	1b92      	subs	r2, r2, r6
 800954a:	6122      	str	r2, [r4, #16]
 800954c:	f8cd a000 	str.w	sl, [sp]
 8009550:	464b      	mov	r3, r9
 8009552:	aa03      	add	r2, sp, #12
 8009554:	4621      	mov	r1, r4
 8009556:	4640      	mov	r0, r8
 8009558:	f7ff fee6 	bl	8009328 <_printf_common>
 800955c:	3001      	adds	r0, #1
 800955e:	d14a      	bne.n	80095f6 <_printf_i+0x1f2>
 8009560:	f04f 30ff 	mov.w	r0, #4294967295
 8009564:	b004      	add	sp, #16
 8009566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800956a:	6823      	ldr	r3, [r4, #0]
 800956c:	f043 0320 	orr.w	r3, r3, #32
 8009570:	6023      	str	r3, [r4, #0]
 8009572:	4833      	ldr	r0, [pc, #204]	@ (8009640 <_printf_i+0x23c>)
 8009574:	2778      	movs	r7, #120	@ 0x78
 8009576:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800957a:	6823      	ldr	r3, [r4, #0]
 800957c:	6831      	ldr	r1, [r6, #0]
 800957e:	061f      	lsls	r7, r3, #24
 8009580:	f851 5b04 	ldr.w	r5, [r1], #4
 8009584:	d402      	bmi.n	800958c <_printf_i+0x188>
 8009586:	065f      	lsls	r7, r3, #25
 8009588:	bf48      	it	mi
 800958a:	b2ad      	uxthmi	r5, r5
 800958c:	6031      	str	r1, [r6, #0]
 800958e:	07d9      	lsls	r1, r3, #31
 8009590:	bf44      	itt	mi
 8009592:	f043 0320 	orrmi.w	r3, r3, #32
 8009596:	6023      	strmi	r3, [r4, #0]
 8009598:	b11d      	cbz	r5, 80095a2 <_printf_i+0x19e>
 800959a:	2310      	movs	r3, #16
 800959c:	e7ac      	b.n	80094f8 <_printf_i+0xf4>
 800959e:	4827      	ldr	r0, [pc, #156]	@ (800963c <_printf_i+0x238>)
 80095a0:	e7e9      	b.n	8009576 <_printf_i+0x172>
 80095a2:	6823      	ldr	r3, [r4, #0]
 80095a4:	f023 0320 	bic.w	r3, r3, #32
 80095a8:	6023      	str	r3, [r4, #0]
 80095aa:	e7f6      	b.n	800959a <_printf_i+0x196>
 80095ac:	4616      	mov	r6, r2
 80095ae:	e7bd      	b.n	800952c <_printf_i+0x128>
 80095b0:	6833      	ldr	r3, [r6, #0]
 80095b2:	6825      	ldr	r5, [r4, #0]
 80095b4:	6961      	ldr	r1, [r4, #20]
 80095b6:	1d18      	adds	r0, r3, #4
 80095b8:	6030      	str	r0, [r6, #0]
 80095ba:	062e      	lsls	r6, r5, #24
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	d501      	bpl.n	80095c4 <_printf_i+0x1c0>
 80095c0:	6019      	str	r1, [r3, #0]
 80095c2:	e002      	b.n	80095ca <_printf_i+0x1c6>
 80095c4:	0668      	lsls	r0, r5, #25
 80095c6:	d5fb      	bpl.n	80095c0 <_printf_i+0x1bc>
 80095c8:	8019      	strh	r1, [r3, #0]
 80095ca:	2300      	movs	r3, #0
 80095cc:	6123      	str	r3, [r4, #16]
 80095ce:	4616      	mov	r6, r2
 80095d0:	e7bc      	b.n	800954c <_printf_i+0x148>
 80095d2:	6833      	ldr	r3, [r6, #0]
 80095d4:	1d1a      	adds	r2, r3, #4
 80095d6:	6032      	str	r2, [r6, #0]
 80095d8:	681e      	ldr	r6, [r3, #0]
 80095da:	6862      	ldr	r2, [r4, #4]
 80095dc:	2100      	movs	r1, #0
 80095de:	4630      	mov	r0, r6
 80095e0:	f7f6 fdfe 	bl	80001e0 <memchr>
 80095e4:	b108      	cbz	r0, 80095ea <_printf_i+0x1e6>
 80095e6:	1b80      	subs	r0, r0, r6
 80095e8:	6060      	str	r0, [r4, #4]
 80095ea:	6863      	ldr	r3, [r4, #4]
 80095ec:	6123      	str	r3, [r4, #16]
 80095ee:	2300      	movs	r3, #0
 80095f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80095f4:	e7aa      	b.n	800954c <_printf_i+0x148>
 80095f6:	6923      	ldr	r3, [r4, #16]
 80095f8:	4632      	mov	r2, r6
 80095fa:	4649      	mov	r1, r9
 80095fc:	4640      	mov	r0, r8
 80095fe:	47d0      	blx	sl
 8009600:	3001      	adds	r0, #1
 8009602:	d0ad      	beq.n	8009560 <_printf_i+0x15c>
 8009604:	6823      	ldr	r3, [r4, #0]
 8009606:	079b      	lsls	r3, r3, #30
 8009608:	d413      	bmi.n	8009632 <_printf_i+0x22e>
 800960a:	68e0      	ldr	r0, [r4, #12]
 800960c:	9b03      	ldr	r3, [sp, #12]
 800960e:	4298      	cmp	r0, r3
 8009610:	bfb8      	it	lt
 8009612:	4618      	movlt	r0, r3
 8009614:	e7a6      	b.n	8009564 <_printf_i+0x160>
 8009616:	2301      	movs	r3, #1
 8009618:	4632      	mov	r2, r6
 800961a:	4649      	mov	r1, r9
 800961c:	4640      	mov	r0, r8
 800961e:	47d0      	blx	sl
 8009620:	3001      	adds	r0, #1
 8009622:	d09d      	beq.n	8009560 <_printf_i+0x15c>
 8009624:	3501      	adds	r5, #1
 8009626:	68e3      	ldr	r3, [r4, #12]
 8009628:	9903      	ldr	r1, [sp, #12]
 800962a:	1a5b      	subs	r3, r3, r1
 800962c:	42ab      	cmp	r3, r5
 800962e:	dcf2      	bgt.n	8009616 <_printf_i+0x212>
 8009630:	e7eb      	b.n	800960a <_printf_i+0x206>
 8009632:	2500      	movs	r5, #0
 8009634:	f104 0619 	add.w	r6, r4, #25
 8009638:	e7f5      	b.n	8009626 <_printf_i+0x222>
 800963a:	bf00      	nop
 800963c:	08009889 	.word	0x08009889
 8009640:	0800989a 	.word	0x0800989a

08009644 <memmove>:
 8009644:	4288      	cmp	r0, r1
 8009646:	b510      	push	{r4, lr}
 8009648:	eb01 0402 	add.w	r4, r1, r2
 800964c:	d902      	bls.n	8009654 <memmove+0x10>
 800964e:	4284      	cmp	r4, r0
 8009650:	4623      	mov	r3, r4
 8009652:	d807      	bhi.n	8009664 <memmove+0x20>
 8009654:	1e43      	subs	r3, r0, #1
 8009656:	42a1      	cmp	r1, r4
 8009658:	d008      	beq.n	800966c <memmove+0x28>
 800965a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800965e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009662:	e7f8      	b.n	8009656 <memmove+0x12>
 8009664:	4402      	add	r2, r0
 8009666:	4601      	mov	r1, r0
 8009668:	428a      	cmp	r2, r1
 800966a:	d100      	bne.n	800966e <memmove+0x2a>
 800966c:	bd10      	pop	{r4, pc}
 800966e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009672:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009676:	e7f7      	b.n	8009668 <memmove+0x24>

08009678 <_sbrk_r>:
 8009678:	b538      	push	{r3, r4, r5, lr}
 800967a:	4d06      	ldr	r5, [pc, #24]	@ (8009694 <_sbrk_r+0x1c>)
 800967c:	2300      	movs	r3, #0
 800967e:	4604      	mov	r4, r0
 8009680:	4608      	mov	r0, r1
 8009682:	602b      	str	r3, [r5, #0]
 8009684:	f7f8 f952 	bl	800192c <_sbrk>
 8009688:	1c43      	adds	r3, r0, #1
 800968a:	d102      	bne.n	8009692 <_sbrk_r+0x1a>
 800968c:	682b      	ldr	r3, [r5, #0]
 800968e:	b103      	cbz	r3, 8009692 <_sbrk_r+0x1a>
 8009690:	6023      	str	r3, [r4, #0]
 8009692:	bd38      	pop	{r3, r4, r5, pc}
 8009694:	20001fe8 	.word	0x20001fe8

08009698 <memcpy>:
 8009698:	440a      	add	r2, r1
 800969a:	4291      	cmp	r1, r2
 800969c:	f100 33ff 	add.w	r3, r0, #4294967295
 80096a0:	d100      	bne.n	80096a4 <memcpy+0xc>
 80096a2:	4770      	bx	lr
 80096a4:	b510      	push	{r4, lr}
 80096a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096ae:	4291      	cmp	r1, r2
 80096b0:	d1f9      	bne.n	80096a6 <memcpy+0xe>
 80096b2:	bd10      	pop	{r4, pc}

080096b4 <_realloc_r>:
 80096b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096b8:	4680      	mov	r8, r0
 80096ba:	4615      	mov	r5, r2
 80096bc:	460c      	mov	r4, r1
 80096be:	b921      	cbnz	r1, 80096ca <_realloc_r+0x16>
 80096c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096c4:	4611      	mov	r1, r2
 80096c6:	f7ff bc4b 	b.w	8008f60 <_malloc_r>
 80096ca:	b92a      	cbnz	r2, 80096d8 <_realloc_r+0x24>
 80096cc:	f7ff fbdc 	bl	8008e88 <_free_r>
 80096d0:	2400      	movs	r4, #0
 80096d2:	4620      	mov	r0, r4
 80096d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096d8:	f000 f81a 	bl	8009710 <_malloc_usable_size_r>
 80096dc:	4285      	cmp	r5, r0
 80096de:	4606      	mov	r6, r0
 80096e0:	d802      	bhi.n	80096e8 <_realloc_r+0x34>
 80096e2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80096e6:	d8f4      	bhi.n	80096d2 <_realloc_r+0x1e>
 80096e8:	4629      	mov	r1, r5
 80096ea:	4640      	mov	r0, r8
 80096ec:	f7ff fc38 	bl	8008f60 <_malloc_r>
 80096f0:	4607      	mov	r7, r0
 80096f2:	2800      	cmp	r0, #0
 80096f4:	d0ec      	beq.n	80096d0 <_realloc_r+0x1c>
 80096f6:	42b5      	cmp	r5, r6
 80096f8:	462a      	mov	r2, r5
 80096fa:	4621      	mov	r1, r4
 80096fc:	bf28      	it	cs
 80096fe:	4632      	movcs	r2, r6
 8009700:	f7ff ffca 	bl	8009698 <memcpy>
 8009704:	4621      	mov	r1, r4
 8009706:	4640      	mov	r0, r8
 8009708:	f7ff fbbe 	bl	8008e88 <_free_r>
 800970c:	463c      	mov	r4, r7
 800970e:	e7e0      	b.n	80096d2 <_realloc_r+0x1e>

08009710 <_malloc_usable_size_r>:
 8009710:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009714:	1f18      	subs	r0, r3, #4
 8009716:	2b00      	cmp	r3, #0
 8009718:	bfbc      	itt	lt
 800971a:	580b      	ldrlt	r3, [r1, r0]
 800971c:	18c0      	addlt	r0, r0, r3
 800971e:	4770      	bx	lr

08009720 <_init>:
 8009720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009722:	bf00      	nop
 8009724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009726:	bc08      	pop	{r3}
 8009728:	469e      	mov	lr, r3
 800972a:	4770      	bx	lr

0800972c <_fini>:
 800972c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800972e:	bf00      	nop
 8009730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009732:	bc08      	pop	{r3}
 8009734:	469e      	mov	lr, r3
 8009736:	4770      	bx	lr
