
StateMachine2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f50  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  080090e0  080090e0  0000a0e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092d4  080092d4  0000b14c  2**0
                  CONTENTS
  4 .ARM          00000008  080092d4  080092d4  0000a2d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092dc  080092dc  0000b14c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092dc  080092dc  0000a2dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092e0  080092e0  0000a2e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  080092e4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b14c  2**0
                  CONTENTS
 10 .bss          00001f64  2000014c  2000014c  0000b14c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200020b0  200020b0  0000b14c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b14c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000116db  00000000  00000000  0000b17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003342  00000000  00000000  0001c857  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ed0  00000000  00000000  0001fba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b0c  00000000  00000000  00020a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025b9e  00000000  00000000  0002157c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013f36  00000000  00000000  0004711a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d74c3  00000000  00000000  0005b050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00132513  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004128  00000000  00000000  00132558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008e  00000000  00000000  00136680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000014c 	.word	0x2000014c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080090c8 	.word	0x080090c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000150 	.word	0x20000150
 80001cc:	080090c8 	.word	0x080090c8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f001 f99c 	bl	80018b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 fcf4 	bl	8000f64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f000 fe68 	bl	8001250 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000580:	f000 fd5a 	bl	8001038 <MX_ADC1_Init>
  MX_DAC_Init();
 8000584:	f000 fe30 	bl	80011e8 <MX_DAC_Init>
  MX_USB_DEVICE_Init();
 8000588:	f007 fbd6 	bl	8007d38 <MX_USB_DEVICE_Init>
  MX_ADC2_Init();
 800058c:	f000 fda6 	bl	80010dc <MX_ADC2_Init>
  MX_CAN1_Init();
 8000590:	f000 fdf6 	bl	8001180 <MX_CAN1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  i_keyIGN 				= HAL_GPIO_ReadPin(keyIGNPort, keyIGN);
 8000594:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000598:	483a      	ldr	r0, [pc, #232]	@ (8000684 <main+0x114>)
 800059a:	f002 f89b 	bl	80026d4 <HAL_GPIO_ReadPin>
 800059e:	4603      	mov	r3, r0
 80005a0:	461a      	mov	r2, r3
 80005a2:	4b39      	ldr	r3, [pc, #228]	@ (8000688 <main+0x118>)
 80005a4:	701a      	strb	r2, [r3, #0]
	  i_keyACC 				= HAL_GPIO_ReadPin(keyACCPort, keyACC);
 80005a6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005aa:	4836      	ldr	r0, [pc, #216]	@ (8000684 <main+0x114>)
 80005ac:	f002 f892 	bl	80026d4 <HAL_GPIO_ReadPin>
 80005b0:	4603      	mov	r3, r0
 80005b2:	461a      	mov	r2, r3
 80005b4:	4b35      	ldr	r3, [pc, #212]	@ (800068c <main+0x11c>)
 80005b6:	701a      	strb	r2, [r3, #0]
	  i_killSwitch 			= HAL_GPIO_ReadPin(killSwitchPort, killSwitch);
 80005b8:	2102      	movs	r1, #2
 80005ba:	4835      	ldr	r0, [pc, #212]	@ (8000690 <main+0x120>)
 80005bc:	f002 f88a 	bl	80026d4 <HAL_GPIO_ReadPin>
 80005c0:	4603      	mov	r3, r0
 80005c2:	461a      	mov	r2, r3
 80005c4:	4b33      	ldr	r3, [pc, #204]	@ (8000694 <main+0x124>)
 80005c6:	701a      	strb	r2, [r3, #0]
	  i_chargeContactor 	= !HAL_GPIO_ReadPin(chargeContactorPort, chargeContactor);
 80005c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005cc:	482d      	ldr	r0, [pc, #180]	@ (8000684 <main+0x114>)
 80005ce:	f002 f881 	bl	80026d4 <HAL_GPIO_ReadPin>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	bf0c      	ite	eq
 80005d8:	2301      	moveq	r3, #1
 80005da:	2300      	movne	r3, #0
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	461a      	mov	r2, r3
 80005e0:	4b2d      	ldr	r3, [pc, #180]	@ (8000698 <main+0x128>)
 80005e2:	701a      	strb	r2, [r3, #0]
	  i_chargeEnable 		= !HAL_GPIO_ReadPin(chargeEnablePort, chargeEnable);
 80005e4:	2108      	movs	r1, #8
 80005e6:	4827      	ldr	r0, [pc, #156]	@ (8000684 <main+0x114>)
 80005e8:	f002 f874 	bl	80026d4 <HAL_GPIO_ReadPin>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	bf0c      	ite	eq
 80005f2:	2301      	moveq	r3, #1
 80005f4:	2300      	movne	r3, #0
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	461a      	mov	r2, r3
 80005fa:	4b28      	ldr	r3, [pc, #160]	@ (800069c <main+0x12c>)
 80005fc:	701a      	strb	r2, [r3, #0]
	  i_disChargeEnable 	= !HAL_GPIO_ReadPin(disChargeEnablePort, disChargeEnable);
 80005fe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000602:	4820      	ldr	r0, [pc, #128]	@ (8000684 <main+0x114>)
 8000604:	f002 f866 	bl	80026d4 <HAL_GPIO_ReadPin>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	bf0c      	ite	eq
 800060e:	2301      	moveq	r3, #1
 8000610:	2300      	movne	r3, #0
 8000612:	b2db      	uxtb	r3, r3
 8000614:	461a      	mov	r2, r3
 8000616:	4b22      	ldr	r3, [pc, #136]	@ (80006a0 <main+0x130>)
 8000618:	701a      	strb	r2, [r3, #0]
	  i_brakeSwitchInput 	= HAL_GPIO_ReadPin(brakeSwitchInputPort, brakeSwitchInput);
 800061a:	2104      	movs	r1, #4
 800061c:	481c      	ldr	r0, [pc, #112]	@ (8000690 <main+0x120>)
 800061e:	f002 f859 	bl	80026d4 <HAL_GPIO_ReadPin>
 8000622:	4603      	mov	r3, r0
 8000624:	461a      	mov	r2, r3
 8000626:	4b1f      	ldr	r3, [pc, #124]	@ (80006a4 <main+0x134>)
 8000628:	701a      	strb	r2, [r3, #0]


	switch(currentState) {
 800062a:	4b1f      	ldr	r3, [pc, #124]	@ (80006a8 <main+0x138>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	2b06      	cmp	r3, #6
 8000630:	d825      	bhi.n	800067e <main+0x10e>
 8000632:	a201      	add	r2, pc, #4	@ (adr r2, 8000638 <main+0xc8>)
 8000634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000638:	08000655 	.word	0x08000655
 800063c:	0800065b 	.word	0x0800065b
 8000640:	08000661 	.word	0x08000661
 8000644:	08000667 	.word	0x08000667
 8000648:	0800066d 	.word	0x0800066d
 800064c:	08000673 	.word	0x08000673
 8000650:	08000679 	.word	0x08000679
			case OFF:
				off_state();
 8000654:	f000 f82a 	bl	80006ac <off_state>
				break;
 8000658:	e011      	b.n	800067e <main+0x10e>
			case ACC:
				acc_state();
 800065a:	f000 f881 	bl	8000760 <acc_state>
				break;
 800065e:	e00e      	b.n	800067e <main+0x10e>
			case IGN:
				ign_state();
 8000660:	f000 f8cc 	bl	80007fc <ign_state>
				break;
 8000664:	e00b      	b.n	800067e <main+0x10e>
			case DCDC:
				dcdc_state();
 8000666:	f000 f957 	bl	8000918 <dcdc_state>
				break;
 800066a:	e008      	b.n	800067e <main+0x10e>
			case ON:
				on_state();
 800066c:	f000 f9e0 	bl	8000a30 <on_state>
				break;
 8000670:	e005      	b.n	800067e <main+0x10e>
			case CHARGE:
				charge_state();
 8000672:	f000 fa4d 	bl	8000b10 <charge_state>
				break;
 8000676:	e002      	b.n	800067e <main+0x10e>
			case FAULT:
				fault_state();
 8000678:	f000 fad6 	bl	8000c28 <fault_state>
				break;
 800067c:	bf00      	nop
		}

	if (1)
	{
		debugMonitor();
 800067e:	f000 fbdb 	bl	8000e38 <debugMonitor>
	  i_keyIGN 				= HAL_GPIO_ReadPin(keyIGNPort, keyIGN);
 8000682:	e787      	b.n	8000594 <main+0x24>
 8000684:	40021000 	.word	0x40021000
 8000688:	20000345 	.word	0x20000345
 800068c:	20000346 	.word	0x20000346
 8000690:	40020c00 	.word	0x40020c00
 8000694:	20000347 	.word	0x20000347
 8000698:	20000348 	.word	0x20000348
 800069c:	20000349 	.word	0x20000349
 80006a0:	2000034a 	.word	0x2000034a
 80006a4:	2000034b 	.word	0x2000034b
 80006a8:	20000234 	.word	0x20000234

080006ac <off_state>:
		HAL_GPIO_WritePin(auxDCDCDisablePort,auxDCDCDisable,RESET);
		HAL_GPIO_WritePin(hvDCDCEnablePort,hvDCDCEnable,RESET);
 * 		HAL_GPIO_WritePin(GPIO(charge indicator
 * 		HAL_GPIO_WritePin(GPIO(Fault INDECATOR
 */
void off_state(void){		// State 0
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
	currentTime = HAL_GetTick();
 80006b0:	f001 f964 	bl	800197c <HAL_GetTick>
 80006b4:	4603      	mov	r3, r0
 80006b6:	4a1e      	ldr	r2, [pc, #120]	@ (8000730 <off_state+0x84>)
 80006b8:	6013      	str	r3, [r2, #0]
	lastState = ON;
 80006ba:	4b1e      	ldr	r3, [pc, #120]	@ (8000734 <off_state+0x88>)
 80006bc:	2204      	movs	r2, #4
 80006be:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(preChargeRelayPort,preChargeRelay,GPIO_PIN_RESET);
 80006c0:	2200      	movs	r2, #0
 80006c2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006c6:	481c      	ldr	r0, [pc, #112]	@ (8000738 <off_state+0x8c>)
 80006c8:	f002 f81c 	bl	8002704 <HAL_GPIO_WritePin>
	o_preChargeRelay = GPIO_PIN_RESET;
 80006cc:	4b1b      	ldr	r3, [pc, #108]	@ (800073c <off_state+0x90>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(hvContactorPort,hvContactor,GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006d8:	4817      	ldr	r0, [pc, #92]	@ (8000738 <off_state+0x8c>)
 80006da:	f002 f813 	bl	8002704 <HAL_GPIO_WritePin>
	o_hvContactor = GPIO_PIN_RESET;
 80006de:	4b18      	ldr	r3, [pc, #96]	@ (8000740 <off_state+0x94>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(auxDCDCDisablePort,auxDCDCDisable,GPIO_PIN_RESET);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2180      	movs	r1, #128	@ 0x80
 80006e8:	4813      	ldr	r0, [pc, #76]	@ (8000738 <off_state+0x8c>)
 80006ea:	f002 f80b 	bl	8002704 <HAL_GPIO_WritePin>
	o_auxDCDCDisable = GPIO_PIN_RESET;
 80006ee:	4b15      	ldr	r3, [pc, #84]	@ (8000744 <off_state+0x98>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(hvDCDCEnablePort,hvDCDCEnable,GPIO_PIN_RESET);
 80006f4:	2200      	movs	r2, #0
 80006f6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006fa:	480f      	ldr	r0, [pc, #60]	@ (8000738 <off_state+0x8c>)
 80006fc:	f002 f802 	bl	8002704 <HAL_GPIO_WritePin>
	o_hvDCDCEnable = GPIO_PIN_RESET;
 8000700:	4b11      	ldr	r3, [pc, #68]	@ (8000748 <off_state+0x9c>)
 8000702:	2200      	movs	r2, #0
 8000704:	701a      	strb	r2, [r3, #0]
	// HAL_GPIO_WritePin(chargeIndicatorPort,chargeIndicator,RESET);
	// HAL_GPIO_WritePin(faultIndicatorPort,faultIndicator,RESET);

	//Changes States
	if ((i_keyACC != 0 ) && (i_chargeEnable != 0) && (i_disChargeEnable != 0) && (i_killSwitch != 1)){
 8000706:	4b11      	ldr	r3, [pc, #68]	@ (800074c <off_state+0xa0>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d00e      	beq.n	800072c <off_state+0x80>
 800070e:	4b10      	ldr	r3, [pc, #64]	@ (8000750 <off_state+0xa4>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d00a      	beq.n	800072c <off_state+0x80>
 8000716:	4b0f      	ldr	r3, [pc, #60]	@ (8000754 <off_state+0xa8>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d006      	beq.n	800072c <off_state+0x80>
 800071e:	4b0e      	ldr	r3, [pc, #56]	@ (8000758 <off_state+0xac>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	2b01      	cmp	r3, #1
 8000724:	d002      	beq.n	800072c <off_state+0x80>
		currentState = ACC;
 8000726:	4b0d      	ldr	r3, [pc, #52]	@ (800075c <off_state+0xb0>)
 8000728:	2201      	movs	r2, #1
 800072a:	701a      	strb	r2, [r3, #0]
	}
}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}
 8000730:	2000023c 	.word	0x2000023c
 8000734:	20000235 	.word	0x20000235
 8000738:	40021000 	.word	0x40021000
 800073c:	20000351 	.word	0x20000351
 8000740:	20000350 	.word	0x20000350
 8000744:	2000034d 	.word	0x2000034d
 8000748:	2000034c 	.word	0x2000034c
 800074c:	20000346 	.word	0x20000346
 8000750:	20000349 	.word	0x20000349
 8000754:	2000034a 	.word	0x2000034a
 8000758:	20000347 	.word	0x20000347
 800075c:	20000234 	.word	0x20000234

08000760 <acc_state>:
void acc_state(void){		// State 1
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
	if( lastState == ON )
 8000764:	4b1c      	ldr	r3, [pc, #112]	@ (80007d8 <acc_state+0x78>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b04      	cmp	r3, #4
 800076a:	d104      	bne.n	8000776 <acc_state+0x16>
	{
		enterStateTime = HAL_GetTick();
 800076c:	f001 f906 	bl	800197c <HAL_GetTick>
 8000770:	4603      	mov	r3, r0
 8000772:	4a1a      	ldr	r2, [pc, #104]	@ (80007dc <acc_state+0x7c>)
 8000774:	6013      	str	r3, [r2, #0]
	}
	lastState = ACC;
 8000776:	4b18      	ldr	r3, [pc, #96]	@ (80007d8 <acc_state+0x78>)
 8000778:	2201      	movs	r2, #1
 800077a:	701a      	strb	r2, [r3, #0]

	currentTime = HAL_GetTick();
 800077c:	f001 f8fe 	bl	800197c <HAL_GetTick>
 8000780:	4603      	mov	r3, r0
 8000782:	4a17      	ldr	r2, [pc, #92]	@ (80007e0 <acc_state+0x80>)
 8000784:	6013      	str	r3, [r2, #0]
	// goes back to off if something one wrong
	if((i_keyACC != 1) || (i_chargeEnable != 1) || (i_disChargeEnable != 1) || (i_killSwitch != 0))
 8000786:	4b17      	ldr	r3, [pc, #92]	@ (80007e4 <acc_state+0x84>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	2b01      	cmp	r3, #1
 800078c:	d10b      	bne.n	80007a6 <acc_state+0x46>
 800078e:	4b16      	ldr	r3, [pc, #88]	@ (80007e8 <acc_state+0x88>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b01      	cmp	r3, #1
 8000794:	d107      	bne.n	80007a6 <acc_state+0x46>
 8000796:	4b15      	ldr	r3, [pc, #84]	@ (80007ec <acc_state+0x8c>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	2b01      	cmp	r3, #1
 800079c:	d103      	bne.n	80007a6 <acc_state+0x46>
 800079e:	4b14      	ldr	r3, [pc, #80]	@ (80007f0 <acc_state+0x90>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d002      	beq.n	80007ac <acc_state+0x4c>
		currentState = OFF; 			// No fault occurs
 80007a6:	4b13      	ldr	r3, [pc, #76]	@ (80007f4 <acc_state+0x94>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	701a      	strb	r2, [r3, #0]

	//Changes States
	if ((i_keyIGN != 0) && (i_disChargeEnable != 0) && (i_keyACC != 0) && (i_chargeEnable != 0))
 80007ac:	4b12      	ldr	r3, [pc, #72]	@ (80007f8 <acc_state+0x98>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d00e      	beq.n	80007d2 <acc_state+0x72>
 80007b4:	4b0d      	ldr	r3, [pc, #52]	@ (80007ec <acc_state+0x8c>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d00a      	beq.n	80007d2 <acc_state+0x72>
 80007bc:	4b09      	ldr	r3, [pc, #36]	@ (80007e4 <acc_state+0x84>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d006      	beq.n	80007d2 <acc_state+0x72>
 80007c4:	4b08      	ldr	r3, [pc, #32]	@ (80007e8 <acc_state+0x88>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d002      	beq.n	80007d2 <acc_state+0x72>
	{
		currentState = IGN;
 80007cc:	4b09      	ldr	r3, [pc, #36]	@ (80007f4 <acc_state+0x94>)
 80007ce:	2202      	movs	r2, #2
 80007d0:	701a      	strb	r2, [r3, #0]
	}
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000235 	.word	0x20000235
 80007dc:	20000238 	.word	0x20000238
 80007e0:	2000023c 	.word	0x2000023c
 80007e4:	20000346 	.word	0x20000346
 80007e8:	20000349 	.word	0x20000349
 80007ec:	2000034a 	.word	0x2000034a
 80007f0:	20000347 	.word	0x20000347
 80007f4:	20000234 	.word	0x20000234
 80007f8:	20000345 	.word	0x20000345

080007fc <ign_state>:
void ign_state(void){		// State 2
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0

	if( lastState == ACC )
 8000800:	4b38      	ldr	r3, [pc, #224]	@ (80008e4 <ign_state+0xe8>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b01      	cmp	r3, #1
 8000806:	d10d      	bne.n	8000824 <ign_state+0x28>
	{
		enterStateTime = HAL_GetTick();
 8000808:	f001 f8b8 	bl	800197c <HAL_GetTick>
 800080c:	4603      	mov	r3, r0
 800080e:	4a36      	ldr	r2, [pc, #216]	@ (80008e8 <ign_state+0xec>)
 8000810:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(preChargeRelayPort, preChargeRelay, GPIO_PIN_SET);
 8000812:	2201      	movs	r2, #1
 8000814:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000818:	4834      	ldr	r0, [pc, #208]	@ (80008ec <ign_state+0xf0>)
 800081a:	f001 ff73 	bl	8002704 <HAL_GPIO_WritePin>
		o_preChargeRelay = GPIO_PIN_SET;
 800081e:	4b34      	ldr	r3, [pc, #208]	@ (80008f0 <ign_state+0xf4>)
 8000820:	2201      	movs	r2, #1
 8000822:	701a      	strb	r2, [r3, #0]
	}
	lastState = IGN;
 8000824:	4b2f      	ldr	r3, [pc, #188]	@ (80008e4 <ign_state+0xe8>)
 8000826:	2202      	movs	r2, #2
 8000828:	701a      	strb	r2, [r3, #0]
	currentTime = HAL_GetTick();
 800082a:	f001 f8a7 	bl	800197c <HAL_GetTick>
 800082e:	4603      	mov	r3, r0
 8000830:	4a30      	ldr	r2, [pc, #192]	@ (80008f4 <ign_state+0xf8>)
 8000832:	6013      	str	r3, [r2, #0]

	// Key was not hold long enough
	if (i_keyIGN != 1)
 8000834:	4b30      	ldr	r3, [pc, #192]	@ (80008f8 <ign_state+0xfc>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	2b01      	cmp	r3, #1
 800083a:	d003      	beq.n	8000844 <ign_state+0x48>
	{
		currentState = ACC;
 800083c:	4b2f      	ldr	r3, [pc, #188]	@ (80008fc <ign_state+0x100>)
 800083e:	2201      	movs	r2, #1
 8000840:	701a      	strb	r2, [r3, #0]
	{
		HAL_GPIO_WritePin(hvContactorPort, hvContactor, GPIO_PIN_SET);
		o_hvContactor = GPIO_PIN_SET;
		currentState = DCDC;
	}
}
 8000842:	e04c      	b.n	80008de <ign_state+0xe2>
	else if ((i_keyACC != 1) || (i_disChargeEnable != 1) || (i_chargeEnable != 1) || (i_killSwitch != 0))
 8000844:	4b2e      	ldr	r3, [pc, #184]	@ (8000900 <ign_state+0x104>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b01      	cmp	r3, #1
 800084a:	d10b      	bne.n	8000864 <ign_state+0x68>
 800084c:	4b2d      	ldr	r3, [pc, #180]	@ (8000904 <ign_state+0x108>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b01      	cmp	r3, #1
 8000852:	d107      	bne.n	8000864 <ign_state+0x68>
 8000854:	4b2c      	ldr	r3, [pc, #176]	@ (8000908 <ign_state+0x10c>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	2b01      	cmp	r3, #1
 800085a:	d103      	bne.n	8000864 <ign_state+0x68>
 800085c:	4b2b      	ldr	r3, [pc, #172]	@ (800090c <ign_state+0x110>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d026      	beq.n	80008b2 <ign_state+0xb6>
		currentState = FAULT;
 8000864:	4b25      	ldr	r3, [pc, #148]	@ (80008fc <ign_state+0x100>)
 8000866:	2206      	movs	r2, #6
 8000868:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 800086a:	4b25      	ldr	r3, [pc, #148]	@ (8000900 <ign_state+0x104>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	2b01      	cmp	r3, #1
 8000870:	d003      	beq.n	800087a <ign_state+0x7e>
			faultCode = 21;
 8000872:	4b27      	ldr	r3, [pc, #156]	@ (8000910 <ign_state+0x114>)
 8000874:	2215      	movs	r2, #21
 8000876:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000878:	e031      	b.n	80008de <ign_state+0xe2>
		else if (i_disChargeEnable != 1)
 800087a:	4b22      	ldr	r3, [pc, #136]	@ (8000904 <ign_state+0x108>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	2b01      	cmp	r3, #1
 8000880:	d003      	beq.n	800088a <ign_state+0x8e>
			faultCode = 22;
 8000882:	4b23      	ldr	r3, [pc, #140]	@ (8000910 <ign_state+0x114>)
 8000884:	2216      	movs	r2, #22
 8000886:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000888:	e029      	b.n	80008de <ign_state+0xe2>
		else if (i_chargeEnable != 1)
 800088a:	4b1f      	ldr	r3, [pc, #124]	@ (8000908 <ign_state+0x10c>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	2b01      	cmp	r3, #1
 8000890:	d003      	beq.n	800089a <ign_state+0x9e>
			faultCode = 23;
 8000892:	4b1f      	ldr	r3, [pc, #124]	@ (8000910 <ign_state+0x114>)
 8000894:	2217      	movs	r2, #23
 8000896:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000898:	e021      	b.n	80008de <ign_state+0xe2>
		else if (i_killSwitch != 0)
 800089a:	4b1c      	ldr	r3, [pc, #112]	@ (800090c <ign_state+0x110>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d003      	beq.n	80008aa <ign_state+0xae>
			faultCode = 24;
 80008a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000910 <ign_state+0x114>)
 80008a4:	2218      	movs	r2, #24
 80008a6:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 80008a8:	e019      	b.n	80008de <ign_state+0xe2>
			faultCode = 29;
 80008aa:	4b19      	ldr	r3, [pc, #100]	@ (8000910 <ign_state+0x114>)
 80008ac:	221d      	movs	r2, #29
 80008ae:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 80008b0:	e015      	b.n	80008de <ign_state+0xe2>
	else if(currentTime - enterStateTime >= 5000)
 80008b2:	4b10      	ldr	r3, [pc, #64]	@ (80008f4 <ign_state+0xf8>)
 80008b4:	681a      	ldr	r2, [r3, #0]
 80008b6:	4b0c      	ldr	r3, [pc, #48]	@ (80008e8 <ign_state+0xec>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	1ad3      	subs	r3, r2, r3
 80008bc:	f241 3287 	movw	r2, #4999	@ 0x1387
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d90c      	bls.n	80008de <ign_state+0xe2>
		HAL_GPIO_WritePin(hvContactorPort, hvContactor, GPIO_PIN_SET);
 80008c4:	2201      	movs	r2, #1
 80008c6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008ca:	4808      	ldr	r0, [pc, #32]	@ (80008ec <ign_state+0xf0>)
 80008cc:	f001 ff1a 	bl	8002704 <HAL_GPIO_WritePin>
		o_hvContactor = GPIO_PIN_SET;
 80008d0:	4b10      	ldr	r3, [pc, #64]	@ (8000914 <ign_state+0x118>)
 80008d2:	2201      	movs	r2, #1
 80008d4:	701a      	strb	r2, [r3, #0]
		currentState = DCDC;
 80008d6:	4b09      	ldr	r3, [pc, #36]	@ (80008fc <ign_state+0x100>)
 80008d8:	2203      	movs	r2, #3
 80008da:	701a      	strb	r2, [r3, #0]
}
 80008dc:	e7ff      	b.n	80008de <ign_state+0xe2>
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000235 	.word	0x20000235
 80008e8:	20000238 	.word	0x20000238
 80008ec:	40021000 	.word	0x40021000
 80008f0:	20000351 	.word	0x20000351
 80008f4:	2000023c 	.word	0x2000023c
 80008f8:	20000345 	.word	0x20000345
 80008fc:	20000234 	.word	0x20000234
 8000900:	20000346 	.word	0x20000346
 8000904:	2000034a 	.word	0x2000034a
 8000908:	20000349 	.word	0x20000349
 800090c:	20000347 	.word	0x20000347
 8000910:	20000343 	.word	0x20000343
 8000914:	20000350 	.word	0x20000350

08000918 <dcdc_state>:

//Short state for the transition between the two DCDC's
void dcdc_state(void){		// State 3
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0

	if ( lastState == IGN )
 800091c:	4b37      	ldr	r3, [pc, #220]	@ (80009fc <dcdc_state+0xe4>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	2b02      	cmp	r3, #2
 8000922:	d116      	bne.n	8000952 <dcdc_state+0x3a>
	{
		enterStateTime = HAL_GetTick();
 8000924:	f001 f82a 	bl	800197c <HAL_GetTick>
 8000928:	4603      	mov	r3, r0
 800092a:	4a35      	ldr	r2, [pc, #212]	@ (8000a00 <dcdc_state+0xe8>)
 800092c:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(hvDCDCEnablePort,hvDCDCEnable, GPIO_PIN_SET);
 800092e:	2201      	movs	r2, #1
 8000930:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000934:	4833      	ldr	r0, [pc, #204]	@ (8000a04 <dcdc_state+0xec>)
 8000936:	f001 fee5 	bl	8002704 <HAL_GPIO_WritePin>
		o_hvDCDCEnable = GPIO_PIN_SET;
 800093a:	4b33      	ldr	r3, [pc, #204]	@ (8000a08 <dcdc_state+0xf0>)
 800093c:	2201      	movs	r2, #1
 800093e:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(preChargeRelayPort,preChargeRelay, GPIO_PIN_RESET);
 8000940:	2200      	movs	r2, #0
 8000942:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000946:	482f      	ldr	r0, [pc, #188]	@ (8000a04 <dcdc_state+0xec>)
 8000948:	f001 fedc 	bl	8002704 <HAL_GPIO_WritePin>
		o_preChargeRelay = GPIO_PIN_RESET;
 800094c:	4b2f      	ldr	r3, [pc, #188]	@ (8000a0c <dcdc_state+0xf4>)
 800094e:	2200      	movs	r2, #0
 8000950:	701a      	strb	r2, [r3, #0]
	}
	lastState = DCDC;
 8000952:	4b2a      	ldr	r3, [pc, #168]	@ (80009fc <dcdc_state+0xe4>)
 8000954:	2203      	movs	r2, #3
 8000956:	701a      	strb	r2, [r3, #0]

	currentTime = HAL_GetTick();
 8000958:	f001 f810 	bl	800197c <HAL_GetTick>
 800095c:	4603      	mov	r3, r0
 800095e:	4a2c      	ldr	r2, [pc, #176]	@ (8000a10 <dcdc_state+0xf8>)
 8000960:	6013      	str	r3, [r2, #0]
	// Check if any signal is missing --> FAULT State
	if ((i_keyACC != 1) || (i_disChargeEnable != 1) || (i_chargeEnable != 1) || (i_killSwitch != 0))
 8000962:	4b2c      	ldr	r3, [pc, #176]	@ (8000a14 <dcdc_state+0xfc>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	2b01      	cmp	r3, #1
 8000968:	d10b      	bne.n	8000982 <dcdc_state+0x6a>
 800096a:	4b2b      	ldr	r3, [pc, #172]	@ (8000a18 <dcdc_state+0x100>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d107      	bne.n	8000982 <dcdc_state+0x6a>
 8000972:	4b2a      	ldr	r3, [pc, #168]	@ (8000a1c <dcdc_state+0x104>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	2b01      	cmp	r3, #1
 8000978:	d103      	bne.n	8000982 <dcdc_state+0x6a>
 800097a:	4b29      	ldr	r3, [pc, #164]	@ (8000a20 <dcdc_state+0x108>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d026      	beq.n	80009d0 <dcdc_state+0xb8>
	{
		currentState = FAULT;
 8000982:	4b28      	ldr	r3, [pc, #160]	@ (8000a24 <dcdc_state+0x10c>)
 8000984:	2206      	movs	r2, #6
 8000986:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000988:	4b22      	ldr	r3, [pc, #136]	@ (8000a14 <dcdc_state+0xfc>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2b01      	cmp	r3, #1
 800098e:	d003      	beq.n	8000998 <dcdc_state+0x80>
		{
			faultCode = 31;
 8000990:	4b25      	ldr	r3, [pc, #148]	@ (8000a28 <dcdc_state+0x110>)
 8000992:	221f      	movs	r2, #31
 8000994:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000996:	e02e      	b.n	80009f6 <dcdc_state+0xde>
		}
		else if (i_disChargeEnable != 1)
 8000998:	4b1f      	ldr	r3, [pc, #124]	@ (8000a18 <dcdc_state+0x100>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b01      	cmp	r3, #1
 800099e:	d003      	beq.n	80009a8 <dcdc_state+0x90>
		{
			faultCode = 32;
 80009a0:	4b21      	ldr	r3, [pc, #132]	@ (8000a28 <dcdc_state+0x110>)
 80009a2:	2220      	movs	r2, #32
 80009a4:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 80009a6:	e026      	b.n	80009f6 <dcdc_state+0xde>
		}
		else if (i_chargeEnable != 1)
 80009a8:	4b1c      	ldr	r3, [pc, #112]	@ (8000a1c <dcdc_state+0x104>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d003      	beq.n	80009b8 <dcdc_state+0xa0>
		{
			faultCode = 33;
 80009b0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a28 <dcdc_state+0x110>)
 80009b2:	2221      	movs	r2, #33	@ 0x21
 80009b4:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 80009b6:	e01e      	b.n	80009f6 <dcdc_state+0xde>
		}
		else if (i_killSwitch != 0)
 80009b8:	4b19      	ldr	r3, [pc, #100]	@ (8000a20 <dcdc_state+0x108>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d003      	beq.n	80009c8 <dcdc_state+0xb0>
		{
			faultCode = 34;
 80009c0:	4b19      	ldr	r3, [pc, #100]	@ (8000a28 <dcdc_state+0x110>)
 80009c2:	2222      	movs	r2, #34	@ 0x22
 80009c4:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 80009c6:	e016      	b.n	80009f6 <dcdc_state+0xde>
		}
		else
		{
			faultCode = 39;
 80009c8:	4b17      	ldr	r3, [pc, #92]	@ (8000a28 <dcdc_state+0x110>)
 80009ca:	2227      	movs	r2, #39	@ 0x27
 80009cc:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 80009ce:	e012      	b.n	80009f6 <dcdc_state+0xde>
		}
	}
	// Switch off the AUX-DCDC after 200 ms
	else if (currentTime - enterStateTime >= 200)
 80009d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a10 <dcdc_state+0xf8>)
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000a00 <dcdc_state+0xe8>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	1ad3      	subs	r3, r2, r3
 80009da:	2bc7      	cmp	r3, #199	@ 0xc7
 80009dc:	d90b      	bls.n	80009f6 <dcdc_state+0xde>
	{
		HAL_GPIO_WritePin(auxDCDCDisablePort,auxDCDCDisable, GPIO_PIN_SET);
 80009de:	2201      	movs	r2, #1
 80009e0:	2180      	movs	r1, #128	@ 0x80
 80009e2:	4808      	ldr	r0, [pc, #32]	@ (8000a04 <dcdc_state+0xec>)
 80009e4:	f001 fe8e 	bl	8002704 <HAL_GPIO_WritePin>
		o_auxDCDCDisable = GPIO_PIN_SET;
 80009e8:	4b10      	ldr	r3, [pc, #64]	@ (8000a2c <dcdc_state+0x114>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	701a      	strb	r2, [r3, #0]
		currentState = ON;
 80009ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000a24 <dcdc_state+0x10c>)
 80009f0:	2204      	movs	r2, #4
 80009f2:	701a      	strb	r2, [r3, #0]
	}
}
 80009f4:	e7ff      	b.n	80009f6 <dcdc_state+0xde>
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000235 	.word	0x20000235
 8000a00:	20000238 	.word	0x20000238
 8000a04:	40021000 	.word	0x40021000
 8000a08:	2000034c 	.word	0x2000034c
 8000a0c:	20000351 	.word	0x20000351
 8000a10:	2000023c 	.word	0x2000023c
 8000a14:	20000346 	.word	0x20000346
 8000a18:	2000034a 	.word	0x2000034a
 8000a1c:	20000349 	.word	0x20000349
 8000a20:	20000347 	.word	0x20000347
 8000a24:	20000234 	.word	0x20000234
 8000a28:	20000343 	.word	0x20000343
 8000a2c:	2000034d 	.word	0x2000034d

08000a30 <on_state>:

void on_state(void){		// State 4
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0


	if ( lastState == DCDC )
 8000a34:	4b2c      	ldr	r3, [pc, #176]	@ (8000ae8 <on_state+0xb8>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b03      	cmp	r3, #3
 8000a3a:	d104      	bne.n	8000a46 <on_state+0x16>
	{
		enterStateTime = HAL_GetTick();
 8000a3c:	f000 ff9e 	bl	800197c <HAL_GetTick>
 8000a40:	4603      	mov	r3, r0
 8000a42:	4a2a      	ldr	r2, [pc, #168]	@ (8000aec <on_state+0xbc>)
 8000a44:	6013      	str	r3, [r2, #0]
	}
	lastState = ON;
 8000a46:	4b28      	ldr	r3, [pc, #160]	@ (8000ae8 <on_state+0xb8>)
 8000a48:	2204      	movs	r2, #4
 8000a4a:	701a      	strb	r2, [r3, #0]

	currentTime = HAL_GetTick();
 8000a4c:	f000 ff96 	bl	800197c <HAL_GetTick>
 8000a50:	4603      	mov	r3, r0
 8000a52:	4a27      	ldr	r2, [pc, #156]	@ (8000af0 <on_state+0xc0>)
 8000a54:	6013      	str	r3, [r2, #0]

	//SETS THE OUTPUTS!!!
	// Throttle pedal output function

	// Check if any signal is missing --> FAULT State
	if ((i_keyACC != 1) || (i_chargeEnable != 1) || (i_disChargeEnable != 1 && i_chargeContactor != 1) || (i_killSwitch != 0))
 8000a56:	4b27      	ldr	r3, [pc, #156]	@ (8000af4 <on_state+0xc4>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d10f      	bne.n	8000a7e <on_state+0x4e>
 8000a5e:	4b26      	ldr	r3, [pc, #152]	@ (8000af8 <on_state+0xc8>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d10b      	bne.n	8000a7e <on_state+0x4e>
 8000a66:	4b25      	ldr	r3, [pc, #148]	@ (8000afc <on_state+0xcc>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d003      	beq.n	8000a76 <on_state+0x46>
 8000a6e:	4b24      	ldr	r3, [pc, #144]	@ (8000b00 <on_state+0xd0>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	d103      	bne.n	8000a7e <on_state+0x4e>
 8000a76:	4b23      	ldr	r3, [pc, #140]	@ (8000b04 <on_state+0xd4>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d026      	beq.n	8000acc <on_state+0x9c>
	{
		currentState = FAULT;
 8000a7e:	4b22      	ldr	r3, [pc, #136]	@ (8000b08 <on_state+0xd8>)
 8000a80:	2206      	movs	r2, #6
 8000a82:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000a84:	4b1b      	ldr	r3, [pc, #108]	@ (8000af4 <on_state+0xc4>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d003      	beq.n	8000a94 <on_state+0x64>
		{
			faultCode = 41;
 8000a8c:	4b1f      	ldr	r3, [pc, #124]	@ (8000b0c <on_state+0xdc>)
 8000a8e:	2229      	movs	r2, #41	@ 0x29
 8000a90:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000a92:	e027      	b.n	8000ae4 <on_state+0xb4>
		}
		else if (i_disChargeEnable != 1)
 8000a94:	4b19      	ldr	r3, [pc, #100]	@ (8000afc <on_state+0xcc>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d003      	beq.n	8000aa4 <on_state+0x74>
		{
			faultCode = 42;
 8000a9c:	4b1b      	ldr	r3, [pc, #108]	@ (8000b0c <on_state+0xdc>)
 8000a9e:	222a      	movs	r2, #42	@ 0x2a
 8000aa0:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000aa2:	e01f      	b.n	8000ae4 <on_state+0xb4>
		}
		else if (i_chargeEnable != 1)
 8000aa4:	4b14      	ldr	r3, [pc, #80]	@ (8000af8 <on_state+0xc8>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d003      	beq.n	8000ab4 <on_state+0x84>
		{
			faultCode = 43;
 8000aac:	4b17      	ldr	r3, [pc, #92]	@ (8000b0c <on_state+0xdc>)
 8000aae:	222b      	movs	r2, #43	@ 0x2b
 8000ab0:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000ab2:	e017      	b.n	8000ae4 <on_state+0xb4>
		}
		else if (i_killSwitch != 0)
 8000ab4:	4b13      	ldr	r3, [pc, #76]	@ (8000b04 <on_state+0xd4>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d003      	beq.n	8000ac4 <on_state+0x94>
		{
			faultCode = 44;
 8000abc:	4b13      	ldr	r3, [pc, #76]	@ (8000b0c <on_state+0xdc>)
 8000abe:	222c      	movs	r2, #44	@ 0x2c
 8000ac0:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000ac2:	e00f      	b.n	8000ae4 <on_state+0xb4>
		}
		else
		{
			faultCode = 49;
 8000ac4:	4b11      	ldr	r3, [pc, #68]	@ (8000b0c <on_state+0xdc>)
 8000ac6:	2231      	movs	r2, #49	@ 0x31
 8000ac8:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000aca:	e00b      	b.n	8000ae4 <on_state+0xb4>
		}
	}
	//Changes States
	else if ((i_disChargeEnable != 1) && (i_chargeContactor != 0))
 8000acc:	4b0b      	ldr	r3, [pc, #44]	@ (8000afc <on_state+0xcc>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d007      	beq.n	8000ae4 <on_state+0xb4>
 8000ad4:	4b0a      	ldr	r3, [pc, #40]	@ (8000b00 <on_state+0xd0>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d003      	beq.n	8000ae4 <on_state+0xb4>
	{
		currentState = CHARGE;
 8000adc:	4b0a      	ldr	r3, [pc, #40]	@ (8000b08 <on_state+0xd8>)
 8000ade:	2205      	movs	r2, #5
 8000ae0:	701a      	strb	r2, [r3, #0]
	}
}
 8000ae2:	e7ff      	b.n	8000ae4 <on_state+0xb4>
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20000235 	.word	0x20000235
 8000aec:	20000238 	.word	0x20000238
 8000af0:	2000023c 	.word	0x2000023c
 8000af4:	20000346 	.word	0x20000346
 8000af8:	20000349 	.word	0x20000349
 8000afc:	2000034a 	.word	0x2000034a
 8000b00:	20000348 	.word	0x20000348
 8000b04:	20000347 	.word	0x20000347
 8000b08:	20000234 	.word	0x20000234
 8000b0c:	20000343 	.word	0x20000343

08000b10 <charge_state>:

void charge_state(void){
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0

	// Start charging routine by enabling AUX DCDC
	if (lastState == ON)
 8000b14:	4b37      	ldr	r3, [pc, #220]	@ (8000bf4 <charge_state+0xe4>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b04      	cmp	r3, #4
 8000b1a:	d104      	bne.n	8000b26 <charge_state+0x16>
	{
		enterStateTime = HAL_GetTick();
 8000b1c:	f000 ff2e 	bl	800197c <HAL_GetTick>
 8000b20:	4603      	mov	r3, r0
 8000b22:	4a35      	ldr	r2, [pc, #212]	@ (8000bf8 <charge_state+0xe8>)
 8000b24:	6013      	str	r3, [r2, #0]
	}
	lastState = CHARGE;
 8000b26:	4b33      	ldr	r3, [pc, #204]	@ (8000bf4 <charge_state+0xe4>)
 8000b28:	2205      	movs	r2, #5
 8000b2a:	701a      	strb	r2, [r3, #0]

	currentTime = HAL_GetTick();
 8000b2c:	f000 ff26 	bl	800197c <HAL_GetTick>
 8000b30:	4603      	mov	r3, r0
 8000b32:	4a32      	ldr	r2, [pc, #200]	@ (8000bfc <charge_state+0xec>)
 8000b34:	6013      	str	r3, [r2, #0]


	// After 0.5 sec, disconnect contactor and switch hvDCDC off
	if (currentTime - enterStateTime >= 500)
 8000b36:	4b31      	ldr	r3, [pc, #196]	@ (8000bfc <charge_state+0xec>)
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	4b2f      	ldr	r3, [pc, #188]	@ (8000bf8 <charge_state+0xe8>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	1ad3      	subs	r3, r2, r3
 8000b40:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000b44:	d311      	bcc.n	8000b6a <charge_state+0x5a>
	{
		HAL_GPIO_WritePin(hvContactorPort, hvContactor, GPIO_PIN_RESET);
 8000b46:	2200      	movs	r2, #0
 8000b48:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b4c:	482c      	ldr	r0, [pc, #176]	@ (8000c00 <charge_state+0xf0>)
 8000b4e:	f001 fdd9 	bl	8002704 <HAL_GPIO_WritePin>
		o_hvContactor = GPIO_PIN_RESET;
 8000b52:	4b2c      	ldr	r3, [pc, #176]	@ (8000c04 <charge_state+0xf4>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(hvDCDCEnablePort, hvDCDCEnable, GPIO_PIN_RESET);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b5e:	4828      	ldr	r0, [pc, #160]	@ (8000c00 <charge_state+0xf0>)
 8000b60:	f001 fdd0 	bl	8002704 <HAL_GPIO_WritePin>
		o_hvDCDCEnable = GPIO_PIN_RESET;
 8000b64:	4b28      	ldr	r3, [pc, #160]	@ (8000c08 <charge_state+0xf8>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	701a      	strb	r2, [r3, #0]
	// we are charging
	//HAL_GPIO_WritePin(chargeIndicatorPort, chargeIndicator, GPIO_PIN_SET);							// Charge indictor light


	//Changes States
	if((i_keyACC != 1) || (i_chargeEnable != 1) || (i_disChargeEnable != 0) || (i_chargeContactor != 1) || (i_killSwitch != 0))
 8000b6a:	4b28      	ldr	r3, [pc, #160]	@ (8000c0c <charge_state+0xfc>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d10f      	bne.n	8000b92 <charge_state+0x82>
 8000b72:	4b27      	ldr	r3, [pc, #156]	@ (8000c10 <charge_state+0x100>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d10b      	bne.n	8000b92 <charge_state+0x82>
 8000b7a:	4b26      	ldr	r3, [pc, #152]	@ (8000c14 <charge_state+0x104>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d107      	bne.n	8000b92 <charge_state+0x82>
 8000b82:	4b25      	ldr	r3, [pc, #148]	@ (8000c18 <charge_state+0x108>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d103      	bne.n	8000b92 <charge_state+0x82>
 8000b8a:	4b24      	ldr	r3, [pc, #144]	@ (8000c1c <charge_state+0x10c>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d02d      	beq.n	8000bee <charge_state+0xde>
	{
		currentState = FAULT;
 8000b92:	4b23      	ldr	r3, [pc, #140]	@ (8000c20 <charge_state+0x110>)
 8000b94:	2206      	movs	r2, #6
 8000b96:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000b98:	4b1c      	ldr	r3, [pc, #112]	@ (8000c0c <charge_state+0xfc>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d003      	beq.n	8000ba8 <charge_state+0x98>
		{
			faultCode = 51;
 8000ba0:	4b20      	ldr	r3, [pc, #128]	@ (8000c24 <charge_state+0x114>)
 8000ba2:	2233      	movs	r2, #51	@ 0x33
 8000ba4:	701a      	strb	r2, [r3, #0]
		{
			faultCode = 59;
		}
	}

}
 8000ba6:	e022      	b.n	8000bee <charge_state+0xde>
		else if (i_disChargeEnable != 0)
 8000ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c14 <charge_state+0x104>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d003      	beq.n	8000bb8 <charge_state+0xa8>
			faultCode = 52;
 8000bb0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c24 <charge_state+0x114>)
 8000bb2:	2234      	movs	r2, #52	@ 0x34
 8000bb4:	701a      	strb	r2, [r3, #0]
}
 8000bb6:	e01a      	b.n	8000bee <charge_state+0xde>
		else if (i_chargeEnable != 1)
 8000bb8:	4b15      	ldr	r3, [pc, #84]	@ (8000c10 <charge_state+0x100>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d003      	beq.n	8000bc8 <charge_state+0xb8>
			faultCode = 53;
 8000bc0:	4b18      	ldr	r3, [pc, #96]	@ (8000c24 <charge_state+0x114>)
 8000bc2:	2235      	movs	r2, #53	@ 0x35
 8000bc4:	701a      	strb	r2, [r3, #0]
}
 8000bc6:	e012      	b.n	8000bee <charge_state+0xde>
		else if (i_chargeContactor != 1)
 8000bc8:	4b13      	ldr	r3, [pc, #76]	@ (8000c18 <charge_state+0x108>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d003      	beq.n	8000bd8 <charge_state+0xc8>
			faultCode = 54;
 8000bd0:	4b14      	ldr	r3, [pc, #80]	@ (8000c24 <charge_state+0x114>)
 8000bd2:	2236      	movs	r2, #54	@ 0x36
 8000bd4:	701a      	strb	r2, [r3, #0]
}
 8000bd6:	e00a      	b.n	8000bee <charge_state+0xde>
		else if (i_killSwitch != 0)
 8000bd8:	4b10      	ldr	r3, [pc, #64]	@ (8000c1c <charge_state+0x10c>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d003      	beq.n	8000be8 <charge_state+0xd8>
			faultCode = 55;
 8000be0:	4b10      	ldr	r3, [pc, #64]	@ (8000c24 <charge_state+0x114>)
 8000be2:	2237      	movs	r2, #55	@ 0x37
 8000be4:	701a      	strb	r2, [r3, #0]
}
 8000be6:	e002      	b.n	8000bee <charge_state+0xde>
			faultCode = 59;
 8000be8:	4b0e      	ldr	r3, [pc, #56]	@ (8000c24 <charge_state+0x114>)
 8000bea:	223b      	movs	r2, #59	@ 0x3b
 8000bec:	701a      	strb	r2, [r3, #0]
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000235 	.word	0x20000235
 8000bf8:	20000238 	.word	0x20000238
 8000bfc:	2000023c 	.word	0x2000023c
 8000c00:	40021000 	.word	0x40021000
 8000c04:	20000350 	.word	0x20000350
 8000c08:	2000034c 	.word	0x2000034c
 8000c0c:	20000346 	.word	0x20000346
 8000c10:	20000349 	.word	0x20000349
 8000c14:	2000034a 	.word	0x2000034a
 8000c18:	20000348 	.word	0x20000348
 8000c1c:	20000347 	.word	0x20000347
 8000c20:	20000234 	.word	0x20000234
 8000c24:	20000343 	.word	0x20000343

08000c28 <fault_state>:



void fault_state(void){
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af02      	add	r7, sp, #8

	// Compare strings for first enter
	if (strcmp(faultString, ""))
 8000c2e:	4b73      	ldr	r3, [pc, #460]	@ (8000dfc <fault_state+0x1d4>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d020      	beq.n	8000c78 <fault_state+0x50>
	{
		// Fault indicator light on
		HAL_GPIO_WritePin(faultIndicatorPort, faultIndicator, GPIO_PIN_RESET);
 8000c36:	2200      	movs	r2, #0
 8000c38:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c3c:	4870      	ldr	r0, [pc, #448]	@ (8000e00 <fault_state+0x1d8>)
 8000c3e:	f001 fd61 	bl	8002704 <HAL_GPIO_WritePin>
		o_faultIndicator = GPIO_PIN_SET;
 8000c42:	4b70      	ldr	r3, [pc, #448]	@ (8000e04 <fault_state+0x1dc>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	701a      	strb	r2, [r3, #0]

		sprintf(faultString, "\n\n\n\rFAULT!!! FaultTime: %lu -"
 8000c48:	4b6f      	ldr	r3, [pc, #444]	@ (8000e08 <fault_state+0x1e0>)
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	4b6f      	ldr	r3, [pc, #444]	@ (8000e0c <fault_state+0x1e4>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	496f      	ldr	r1, [pc, #444]	@ (8000e10 <fault_state+0x1e8>)
 8000c52:	7809      	ldrb	r1, [r1, #0]
 8000c54:	9100      	str	r1, [sp, #0]
 8000c56:	496f      	ldr	r1, [pc, #444]	@ (8000e14 <fault_state+0x1ec>)
 8000c58:	4868      	ldr	r0, [pc, #416]	@ (8000dfc <fault_state+0x1d4>)
 8000c5a:	f007 fd95 	bl	8008788 <siprintf>
				" old enterStateTime: %lu -- lastState = %d \n\n\n",
				currentTime, enterStateTime, lastState);

		CDC_Transmit_FS((uint8_t*)faultString, strlen((char*)faultString));
 8000c5e:	4867      	ldr	r0, [pc, #412]	@ (8000dfc <fault_state+0x1d4>)
 8000c60:	f7ff fab6 	bl	80001d0 <strlen>
 8000c64:	4603      	mov	r3, r0
 8000c66:	4619      	mov	r1, r3
 8000c68:	4864      	ldr	r0, [pc, #400]	@ (8000dfc <fault_state+0x1d4>)
 8000c6a:	f007 f923 	bl	8007eb4 <CDC_Transmit_FS>
		debugMode;
		// Safe enterStateTime for measure 200 ms until HV Contactor will be open
		enterStateTime = HAL_GetTick();
 8000c6e:	f000 fe85 	bl	800197c <HAL_GetTick>
 8000c72:	4603      	mov	r3, r0
 8000c74:	4a65      	ldr	r2, [pc, #404]	@ (8000e0c <fault_state+0x1e4>)
 8000c76:	6013      	str	r3, [r2, #0]
	}

	currentTime = HAL_GetTick();
 8000c78:	f000 fe80 	bl	800197c <HAL_GetTick>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	4a62      	ldr	r2, [pc, #392]	@ (8000e08 <fault_state+0x1e0>)
 8000c80:	6013      	str	r3, [r2, #0]

	// Switch AUX-DCDC on
	HAL_GPIO_WritePin(auxDCDCDisablePort,auxDCDCDisable, GPIO_PIN_RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2180      	movs	r1, #128	@ 0x80
 8000c86:	4864      	ldr	r0, [pc, #400]	@ (8000e18 <fault_state+0x1f0>)
 8000c88:	f001 fd3c 	bl	8002704 <HAL_GPIO_WritePin>
	o_auxDCDCDisable = GPIO_PIN_RESET;
 8000c8c:	4b63      	ldr	r3, [pc, #396]	@ (8000e1c <fault_state+0x1f4>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	701a      	strb	r2, [r3, #0]


	// Switch of HV-Contactor and HV-DCDC off
	uint32_t deltaT = currentTime - enterStateTime;
 8000c92:	4b5d      	ldr	r3, [pc, #372]	@ (8000e08 <fault_state+0x1e0>)
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	4b5d      	ldr	r3, [pc, #372]	@ (8000e0c <fault_state+0x1e4>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	1ad3      	subs	r3, r2, r3
 8000c9c:	607b      	str	r3, [r7, #4]
	if (deltaT >= 500)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000ca4:	d311      	bcc.n	8000cca <fault_state+0xa2>
	{
		// HV-DCDC off
		HAL_GPIO_WritePin(hvDCDCEnablePort,hvDCDCEnable, GPIO_PIN_RESET);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cac:	485a      	ldr	r0, [pc, #360]	@ (8000e18 <fault_state+0x1f0>)
 8000cae:	f001 fd29 	bl	8002704 <HAL_GPIO_WritePin>
		o_hvDCDCEnable = GPIO_PIN_RESET;
 8000cb2:	4b5b      	ldr	r3, [pc, #364]	@ (8000e20 <fault_state+0x1f8>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	701a      	strb	r2, [r3, #0]

		// HV Contactor open
		HAL_GPIO_WritePin(hvContactorPort, hvContactor, GPIO_PIN_RESET);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cbe:	4856      	ldr	r0, [pc, #344]	@ (8000e18 <fault_state+0x1f0>)
 8000cc0:	f001 fd20 	bl	8002704 <HAL_GPIO_WritePin>
		o_hvDCDCEnable = GPIO_PIN_RESET;
 8000cc4:	4b56      	ldr	r3, [pc, #344]	@ (8000e20 <fault_state+0x1f8>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	701a      	strb	r2, [r3, #0]
	}

	// Blinking light math for 2 Hz
	// Calculating whether light is on or not
	if (((deltaT + extraTime) / 250) % 4 == 0)
 8000cca:	4b56      	ldr	r3, [pc, #344]	@ (8000e24 <fault_state+0x1fc>)
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	4a55      	ldr	r2, [pc, #340]	@ (8000e28 <fault_state+0x200>)
 8000cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd8:	091b      	lsrs	r3, r3, #4
 8000cda:	f003 0303 	and.w	r3, r3, #3
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d109      	bne.n	8000cf6 <fault_state+0xce>
	{
		HAL_GPIO_WritePin(faultIndicatorPort, faultIndicator, GPIO_PIN_SET);
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ce8:	4845      	ldr	r0, [pc, #276]	@ (8000e00 <fault_state+0x1d8>)
 8000cea:	f001 fd0b 	bl	8002704 <HAL_GPIO_WritePin>
		o_faultIndicator = 1;
 8000cee:	4b45      	ldr	r3, [pc, #276]	@ (8000e04 <fault_state+0x1dc>)
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	701a      	strb	r2, [r3, #0]
	}


	//FALUT INDICATOR

}
 8000cf4:	e07d      	b.n	8000df2 <fault_state+0x1ca>
	else if (((deltaT + extraTime) / 250) % 4 == 1)
 8000cf6:	4b4b      	ldr	r3, [pc, #300]	@ (8000e24 <fault_state+0x1fc>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	4a4a      	ldr	r2, [pc, #296]	@ (8000e28 <fault_state+0x200>)
 8000d00:	fba2 2303 	umull	r2, r3, r2, r3
 8000d04:	091b      	lsrs	r3, r3, #4
 8000d06:	f003 0303 	and.w	r3, r3, #3
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d15c      	bne.n	8000dc8 <fault_state+0x1a0>
		if (o_faultIndicator == 1)
 8000d0e:	4b3d      	ldr	r3, [pc, #244]	@ (8000e04 <fault_state+0x1dc>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d16d      	bne.n	8000df2 <fault_state+0x1ca>
			o_faultIndicator = 0;					// not as an output used here!
 8000d16:	4b3b      	ldr	r3, [pc, #236]	@ (8000e04 <fault_state+0x1dc>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	701a      	strb	r2, [r3, #0]
			faultBlinkCounter++;
 8000d1c:	4b43      	ldr	r3, [pc, #268]	@ (8000e2c <fault_state+0x204>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	3301      	adds	r3, #1
 8000d22:	b2da      	uxtb	r2, r3
 8000d24:	4b41      	ldr	r3, [pc, #260]	@ (8000e2c <fault_state+0x204>)
 8000d26:	701a      	strb	r2, [r3, #0]
			uint8_t highDigit = faultCode / 10;
 8000d28:	4b41      	ldr	r3, [pc, #260]	@ (8000e30 <fault_state+0x208>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	4a41      	ldr	r2, [pc, #260]	@ (8000e34 <fault_state+0x20c>)
 8000d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d32:	08db      	lsrs	r3, r3, #3
 8000d34:	70fb      	strb	r3, [r7, #3]
			uint8_t lowDigit = faultCode % 10;
 8000d36:	4b3e      	ldr	r3, [pc, #248]	@ (8000e30 <fault_state+0x208>)
 8000d38:	781a      	ldrb	r2, [r3, #0]
 8000d3a:	4b3e      	ldr	r3, [pc, #248]	@ (8000e34 <fault_state+0x20c>)
 8000d3c:	fba3 1302 	umull	r1, r3, r3, r2
 8000d40:	08d9      	lsrs	r1, r3, #3
 8000d42:	460b      	mov	r3, r1
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	440b      	add	r3, r1
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	1ad3      	subs	r3, r2, r3
 8000d4c:	70bb      	strb	r3, [r7, #2]
			uint8_t startBlinks = 8;
 8000d4e:	2308      	movs	r3, #8
 8000d50:	707b      	strb	r3, [r7, #1]
			uint8_t betweenBlinks = 3;
 8000d52:	2303      	movs	r3, #3
 8000d54:	703b      	strb	r3, [r7, #0]
			if (((faultBlinkCounter > startBlinks) &&
 8000d56:	4b35      	ldr	r3, [pc, #212]	@ (8000e2c <fault_state+0x204>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	787a      	ldrb	r2, [r7, #1]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d207      	bcs.n	8000d70 <fault_state+0x148>
					(faultBlinkCounter <= startBlinks + highDigit)) ||
 8000d60:	4b32      	ldr	r3, [pc, #200]	@ (8000e2c <fault_state+0x204>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	4619      	mov	r1, r3
 8000d66:	787a      	ldrb	r2, [r7, #1]
 8000d68:	78fb      	ldrb	r3, [r7, #3]
 8000d6a:	4413      	add	r3, r2
			if (((faultBlinkCounter > startBlinks) &&
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	dd15      	ble.n	8000d9c <fault_state+0x174>
					((faultBlinkCounter > startBlinks + highDigit + betweenBlinks) &&
 8000d70:	4b2e      	ldr	r3, [pc, #184]	@ (8000e2c <fault_state+0x204>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	4619      	mov	r1, r3
 8000d76:	787a      	ldrb	r2, [r7, #1]
 8000d78:	78fb      	ldrb	r3, [r7, #3]
 8000d7a:	441a      	add	r2, r3
 8000d7c:	783b      	ldrb	r3, [r7, #0]
 8000d7e:	4413      	add	r3, r2
					(faultBlinkCounter <= startBlinks + highDigit)) ||
 8000d80:	4299      	cmp	r1, r3
 8000d82:	dd11      	ble.n	8000da8 <fault_state+0x180>
					(faultBlinkCounter <= startBlinks + highDigit + betweenBlinks + lowDigit)))
 8000d84:	4b29      	ldr	r3, [pc, #164]	@ (8000e2c <fault_state+0x204>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	4619      	mov	r1, r3
 8000d8a:	787a      	ldrb	r2, [r7, #1]
 8000d8c:	78fb      	ldrb	r3, [r7, #3]
 8000d8e:	441a      	add	r2, r3
 8000d90:	783b      	ldrb	r3, [r7, #0]
 8000d92:	441a      	add	r2, r3
 8000d94:	78bb      	ldrb	r3, [r7, #2]
 8000d96:	4413      	add	r3, r2
					((faultBlinkCounter > startBlinks + highDigit + betweenBlinks) &&
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	dc05      	bgt.n	8000da8 <fault_state+0x180>
				extraTime += 500;
 8000d9c:	4b21      	ldr	r3, [pc, #132]	@ (8000e24 <fault_state+0x1fc>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8000da4:	4a1f      	ldr	r2, [pc, #124]	@ (8000e24 <fault_state+0x1fc>)
 8000da6:	6013      	str	r3, [r2, #0]
			if (faultBlinkCounter > startBlinks + highDigit + betweenBlinks + lowDigit)
 8000da8:	4b20      	ldr	r3, [pc, #128]	@ (8000e2c <fault_state+0x204>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	4619      	mov	r1, r3
 8000dae:	787a      	ldrb	r2, [r7, #1]
 8000db0:	78fb      	ldrb	r3, [r7, #3]
 8000db2:	441a      	add	r2, r3
 8000db4:	783b      	ldrb	r3, [r7, #0]
 8000db6:	441a      	add	r2, r3
 8000db8:	78bb      	ldrb	r3, [r7, #2]
 8000dba:	4413      	add	r3, r2
 8000dbc:	4299      	cmp	r1, r3
 8000dbe:	dd18      	ble.n	8000df2 <fault_state+0x1ca>
				faultBlinkCounter = 0;
 8000dc0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e2c <fault_state+0x204>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	701a      	strb	r2, [r3, #0]
}
 8000dc6:	e014      	b.n	8000df2 <fault_state+0x1ca>
	else if (((deltaT + extraTime) / 250) % 4 == 3)
 8000dc8:	4b16      	ldr	r3, [pc, #88]	@ (8000e24 <fault_state+0x1fc>)
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	4413      	add	r3, r2
 8000dd0:	4a15      	ldr	r2, [pc, #84]	@ (8000e28 <fault_state+0x200>)
 8000dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8000dd6:	091b      	lsrs	r3, r3, #4
 8000dd8:	f003 0303 	and.w	r3, r3, #3
 8000ddc:	2b03      	cmp	r3, #3
 8000dde:	d108      	bne.n	8000df2 <fault_state+0x1ca>
		HAL_GPIO_WritePin(faultIndicatorPort, faultIndicator, GPIO_PIN_RESET);
 8000de0:	2200      	movs	r2, #0
 8000de2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000de6:	4806      	ldr	r0, [pc, #24]	@ (8000e00 <fault_state+0x1d8>)
 8000de8:	f001 fc8c 	bl	8002704 <HAL_GPIO_WritePin>
		o_faultIndicator = 0;
 8000dec:	4b05      	ldr	r3, [pc, #20]	@ (8000e04 <fault_state+0x1dc>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	701a      	strb	r2, [r3, #0]
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000244 	.word	0x20000244
 8000e00:	40020800 	.word	0x40020800
 8000e04:	2000034f 	.word	0x2000034f
 8000e08:	2000023c 	.word	0x2000023c
 8000e0c:	20000238 	.word	0x20000238
 8000e10:	20000235 	.word	0x20000235
 8000e14:	080090e0 	.word	0x080090e0
 8000e18:	40021000 	.word	0x40021000
 8000e1c:	2000034d 	.word	0x2000034d
 8000e20:	2000034c 	.word	0x2000034c
 8000e24:	20000240 	.word	0x20000240
 8000e28:	10624dd3 	.word	0x10624dd3
 8000e2c:	20000344 	.word	0x20000344
 8000e30:	20000343 	.word	0x20000343
 8000e34:	cccccccd 	.word	0xcccccccd

08000e38 <debugMonitor>:
		}
	}
}

void debugMonitor(void)
{
 8000e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e3a:	f5ad 7d45 	sub.w	sp, sp, #788	@ 0x314
 8000e3e:	af0a      	add	r7, sp, #40	@ 0x28
	char inBuffer[240], outBuffer[240], stateBuffer[240];
	sprintf(inBuffer, "\r%lu --- %lu --- State = %d keyIGN: %d\t keyACC: %d\t killSwitch:"
 8000e40:	4b35      	ldr	r3, [pc, #212]	@ (8000f18 <debugMonitor+0xe0>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4b35      	ldr	r3, [pc, #212]	@ (8000f1c <debugMonitor+0xe4>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4935      	ldr	r1, [pc, #212]	@ (8000f20 <debugMonitor+0xe8>)
 8000e4a:	7809      	ldrb	r1, [r1, #0]
 8000e4c:	460c      	mov	r4, r1
 8000e4e:	4935      	ldr	r1, [pc, #212]	@ (8000f24 <debugMonitor+0xec>)
 8000e50:	7809      	ldrb	r1, [r1, #0]
 8000e52:	460d      	mov	r5, r1
 8000e54:	4934      	ldr	r1, [pc, #208]	@ (8000f28 <debugMonitor+0xf0>)
 8000e56:	7809      	ldrb	r1, [r1, #0]
 8000e58:	460e      	mov	r6, r1
 8000e5a:	4934      	ldr	r1, [pc, #208]	@ (8000f2c <debugMonitor+0xf4>)
 8000e5c:	7809      	ldrb	r1, [r1, #0]
 8000e5e:	6179      	str	r1, [r7, #20]
 8000e60:	4933      	ldr	r1, [pc, #204]	@ (8000f30 <debugMonitor+0xf8>)
 8000e62:	7809      	ldrb	r1, [r1, #0]
 8000e64:	6139      	str	r1, [r7, #16]
 8000e66:	4933      	ldr	r1, [pc, #204]	@ (8000f34 <debugMonitor+0xfc>)
 8000e68:	7809      	ldrb	r1, [r1, #0]
 8000e6a:	60f9      	str	r1, [r7, #12]
 8000e6c:	4932      	ldr	r1, [pc, #200]	@ (8000f38 <debugMonitor+0x100>)
 8000e6e:	7809      	ldrb	r1, [r1, #0]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	4932      	ldr	r1, [pc, #200]	@ (8000f3c <debugMonitor+0x104>)
 8000e74:	7809      	ldrb	r1, [r1, #0]
 8000e76:	6079      	str	r1, [r7, #4]
 8000e78:	4931      	ldr	r1, [pc, #196]	@ (8000f40 <debugMonitor+0x108>)
 8000e7a:	7809      	ldrb	r1, [r1, #0]
 8000e7c:	6039      	str	r1, [r7, #0]
 8000e7e:	4931      	ldr	r1, [pc, #196]	@ (8000f44 <debugMonitor+0x10c>)
 8000e80:	7809      	ldrb	r1, [r1, #0]
 8000e82:	f507 70fc 	add.w	r0, r7, #504	@ 0x1f8
 8000e86:	9109      	str	r1, [sp, #36]	@ 0x24
 8000e88:	6839      	ldr	r1, [r7, #0]
 8000e8a:	9108      	str	r1, [sp, #32]
 8000e8c:	6879      	ldr	r1, [r7, #4]
 8000e8e:	9107      	str	r1, [sp, #28]
 8000e90:	68b9      	ldr	r1, [r7, #8]
 8000e92:	9106      	str	r1, [sp, #24]
 8000e94:	68f9      	ldr	r1, [r7, #12]
 8000e96:	9105      	str	r1, [sp, #20]
 8000e98:	6939      	ldr	r1, [r7, #16]
 8000e9a:	9104      	str	r1, [sp, #16]
 8000e9c:	6979      	ldr	r1, [r7, #20]
 8000e9e:	9103      	str	r1, [sp, #12]
 8000ea0:	9602      	str	r6, [sp, #8]
 8000ea2:	9501      	str	r5, [sp, #4]
 8000ea4:	9400      	str	r4, [sp, #0]
 8000ea6:	4928      	ldr	r1, [pc, #160]	@ (8000f48 <debugMonitor+0x110>)
 8000ea8:	f007 fc6e 	bl	8008788 <siprintf>
			" %d chargeContactor: %d chargeEnable: %d disChargeEnable: %d brakeSwitch: "
			"%d HV-DCDC-En: %d\t Aux-DCDC: %d\t \n", currentTime, enterStateTime, currentState,
			i_keyIGN, i_keyACC, i_killSwitch, i_chargeContactor, i_chargeEnable,
			i_disChargeEnable, i_brakeSwitchInput, o_hvDCDCEnable, o_auxDCDCDisable);
	CDC_Transmit_FS((uint8_t*)inBuffer, strlen((char*)inBuffer));
 8000eac:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff f98d 	bl	80001d0 <strlen>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8000ebc:	4611      	mov	r1, r2
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f006 fff8 	bl	8007eb4 <CDC_Transmit_FS>
	// HAL_Delay(50);
	sprintf(outBuffer, "\rHV-DCDC-En: %d\t Aux-DCDC: %d\t chargeInd: %d\t faultInd: %d\t HV+_Contactor: %d\t preCharge: %d \n", o_hvDCDCEnable, o_auxDCDCDisable, o_chargeIndicator, o_faultIndicator, o_hvContactor, o_preChargeRelay);
 8000ec4:	4b1e      	ldr	r3, [pc, #120]	@ (8000f40 <debugMonitor+0x108>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	461d      	mov	r5, r3
 8000eca:	4b1e      	ldr	r3, [pc, #120]	@ (8000f44 <debugMonitor+0x10c>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	461e      	mov	r6, r3
 8000ed0:	4b1e      	ldr	r3, [pc, #120]	@ (8000f4c <debugMonitor+0x114>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	4b1e      	ldr	r3, [pc, #120]	@ (8000f50 <debugMonitor+0x118>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	4619      	mov	r1, r3
 8000edc:	4b1d      	ldr	r3, [pc, #116]	@ (8000f54 <debugMonitor+0x11c>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	461c      	mov	r4, r3
 8000ee2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f58 <debugMonitor+0x120>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8000eea:	9303      	str	r3, [sp, #12]
 8000eec:	9402      	str	r4, [sp, #8]
 8000eee:	9101      	str	r1, [sp, #4]
 8000ef0:	9200      	str	r2, [sp, #0]
 8000ef2:	4633      	mov	r3, r6
 8000ef4:	462a      	mov	r2, r5
 8000ef6:	4919      	ldr	r1, [pc, #100]	@ (8000f5c <debugMonitor+0x124>)
 8000ef8:	f007 fc46 	bl	8008788 <siprintf>
	sprintf(stateBuffer, "\r%lu State = %d", currentTime, currentState);
 8000efc:	4b06      	ldr	r3, [pc, #24]	@ (8000f18 <debugMonitor+0xe0>)
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	4b07      	ldr	r3, [pc, #28]	@ (8000f20 <debugMonitor+0xe8>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	f107 0018 	add.w	r0, r7, #24
 8000f08:	4915      	ldr	r1, [pc, #84]	@ (8000f60 <debugMonitor+0x128>)
 8000f0a:	f007 fc3d 	bl	8008788 <siprintf>
	  */



  /* USER CODE END 3 */
}
 8000f0e:	bf00      	nop
 8000f10:	f507 773b 	add.w	r7, r7, #748	@ 0x2ec
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f18:	2000023c 	.word	0x2000023c
 8000f1c:	20000238 	.word	0x20000238
 8000f20:	20000234 	.word	0x20000234
 8000f24:	20000345 	.word	0x20000345
 8000f28:	20000346 	.word	0x20000346
 8000f2c:	20000347 	.word	0x20000347
 8000f30:	20000348 	.word	0x20000348
 8000f34:	20000349 	.word	0x20000349
 8000f38:	2000034a 	.word	0x2000034a
 8000f3c:	2000034b 	.word	0x2000034b
 8000f40:	2000034c 	.word	0x2000034c
 8000f44:	2000034d 	.word	0x2000034d
 8000f48:	0800912c 	.word	0x0800912c
 8000f4c:	2000034e 	.word	0x2000034e
 8000f50:	2000034f 	.word	0x2000034f
 8000f54:	20000350 	.word	0x20000350
 8000f58:	20000351 	.word	0x20000351
 8000f5c:	080091d8 	.word	0x080091d8
 8000f60:	08009238 	.word	0x08009238

08000f64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b094      	sub	sp, #80	@ 0x50
 8000f68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f6a:	f107 0320 	add.w	r3, r7, #32
 8000f6e:	2230      	movs	r2, #48	@ 0x30
 8000f70:	2100      	movs	r1, #0
 8000f72:	4618      	mov	r0, r3
 8000f74:	f007 fc28 	bl	80087c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f78:	f107 030c 	add.w	r3, r7, #12
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	4b28      	ldr	r3, [pc, #160]	@ (8001030 <SystemClock_Config+0xcc>)
 8000f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f90:	4a27      	ldr	r2, [pc, #156]	@ (8001030 <SystemClock_Config+0xcc>)
 8000f92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f96:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f98:	4b25      	ldr	r3, [pc, #148]	@ (8001030 <SystemClock_Config+0xcc>)
 8000f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	4b22      	ldr	r3, [pc, #136]	@ (8001034 <SystemClock_Config+0xd0>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a21      	ldr	r2, [pc, #132]	@ (8001034 <SystemClock_Config+0xd0>)
 8000fae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fb2:	6013      	str	r3, [r2, #0]
 8000fb4:	4b1f      	ldr	r3, [pc, #124]	@ (8001034 <SystemClock_Config+0xd0>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fbc:	607b      	str	r3, [r7, #4]
 8000fbe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fc4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fc8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fd4:	2308      	movs	r3, #8
 8000fd6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000fd8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000fdc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fe2:	2307      	movs	r3, #7
 8000fe4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe6:	f107 0320 	add.w	r3, r7, #32
 8000fea:	4618      	mov	r0, r3
 8000fec:	f002 fe20 	bl	8003c30 <HAL_RCC_OscConfig>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000ff6:	f000 fa81 	bl	80014fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ffa:	230f      	movs	r3, #15
 8000ffc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ffe:	2302      	movs	r3, #2
 8001000:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001002:	2300      	movs	r3, #0
 8001004:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001006:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800100a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800100c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001010:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001012:	f107 030c 	add.w	r3, r7, #12
 8001016:	2105      	movs	r1, #5
 8001018:	4618      	mov	r0, r3
 800101a:	f003 f881 	bl	8004120 <HAL_RCC_ClockConfig>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001024:	f000 fa6a 	bl	80014fc <Error_Handler>
  }
}
 8001028:	bf00      	nop
 800102a:	3750      	adds	r7, #80	@ 0x50
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40023800 	.word	0x40023800
 8001034:	40007000 	.word	0x40007000

08001038 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800103e:	463b      	mov	r3, r7
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800104a:	4b21      	ldr	r3, [pc, #132]	@ (80010d0 <MX_ADC1_Init+0x98>)
 800104c:	4a21      	ldr	r2, [pc, #132]	@ (80010d4 <MX_ADC1_Init+0x9c>)
 800104e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001050:	4b1f      	ldr	r3, [pc, #124]	@ (80010d0 <MX_ADC1_Init+0x98>)
 8001052:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001056:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001058:	4b1d      	ldr	r3, [pc, #116]	@ (80010d0 <MX_ADC1_Init+0x98>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800105e:	4b1c      	ldr	r3, [pc, #112]	@ (80010d0 <MX_ADC1_Init+0x98>)
 8001060:	2200      	movs	r2, #0
 8001062:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001064:	4b1a      	ldr	r3, [pc, #104]	@ (80010d0 <MX_ADC1_Init+0x98>)
 8001066:	2200      	movs	r2, #0
 8001068:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800106a:	4b19      	ldr	r3, [pc, #100]	@ (80010d0 <MX_ADC1_Init+0x98>)
 800106c:	2200      	movs	r2, #0
 800106e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001072:	4b17      	ldr	r3, [pc, #92]	@ (80010d0 <MX_ADC1_Init+0x98>)
 8001074:	2200      	movs	r2, #0
 8001076:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001078:	4b15      	ldr	r3, [pc, #84]	@ (80010d0 <MX_ADC1_Init+0x98>)
 800107a:	4a17      	ldr	r2, [pc, #92]	@ (80010d8 <MX_ADC1_Init+0xa0>)
 800107c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800107e:	4b14      	ldr	r3, [pc, #80]	@ (80010d0 <MX_ADC1_Init+0x98>)
 8001080:	2200      	movs	r2, #0
 8001082:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001084:	4b12      	ldr	r3, [pc, #72]	@ (80010d0 <MX_ADC1_Init+0x98>)
 8001086:	2201      	movs	r2, #1
 8001088:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800108a:	4b11      	ldr	r3, [pc, #68]	@ (80010d0 <MX_ADC1_Init+0x98>)
 800108c:	2200      	movs	r2, #0
 800108e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001092:	4b0f      	ldr	r3, [pc, #60]	@ (80010d0 <MX_ADC1_Init+0x98>)
 8001094:	2201      	movs	r2, #1
 8001096:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001098:	480d      	ldr	r0, [pc, #52]	@ (80010d0 <MX_ADC1_Init+0x98>)
 800109a:	f000 fc9f 	bl	80019dc <HAL_ADC_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80010a4:	f000 fa2a 	bl	80014fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010a8:	2301      	movs	r3, #1
 80010aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010ac:	2301      	movs	r3, #1
 80010ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010b0:	2300      	movs	r3, #0
 80010b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010b4:	463b      	mov	r3, r7
 80010b6:	4619      	mov	r1, r3
 80010b8:	4805      	ldr	r0, [pc, #20]	@ (80010d0 <MX_ADC1_Init+0x98>)
 80010ba:	f000 fcd3 	bl	8001a64 <HAL_ADC_ConfigChannel>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010c4:	f000 fa1a 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010c8:	bf00      	nop
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000168 	.word	0x20000168
 80010d4:	40012000 	.word	0x40012000
 80010d8:	0f000001 	.word	0x0f000001

080010dc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010e2:	463b      	mov	r3, r7
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80010ee:	4b21      	ldr	r3, [pc, #132]	@ (8001174 <MX_ADC2_Init+0x98>)
 80010f0:	4a21      	ldr	r2, [pc, #132]	@ (8001178 <MX_ADC2_Init+0x9c>)
 80010f2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001174 <MX_ADC2_Init+0x98>)
 80010f6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80010fa:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80010fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001174 <MX_ADC2_Init+0x98>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001102:	4b1c      	ldr	r3, [pc, #112]	@ (8001174 <MX_ADC2_Init+0x98>)
 8001104:	2200      	movs	r2, #0
 8001106:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001108:	4b1a      	ldr	r3, [pc, #104]	@ (8001174 <MX_ADC2_Init+0x98>)
 800110a:	2200      	movs	r2, #0
 800110c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800110e:	4b19      	ldr	r3, [pc, #100]	@ (8001174 <MX_ADC2_Init+0x98>)
 8001110:	2200      	movs	r2, #0
 8001112:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001116:	4b17      	ldr	r3, [pc, #92]	@ (8001174 <MX_ADC2_Init+0x98>)
 8001118:	2200      	movs	r2, #0
 800111a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800111c:	4b15      	ldr	r3, [pc, #84]	@ (8001174 <MX_ADC2_Init+0x98>)
 800111e:	4a17      	ldr	r2, [pc, #92]	@ (800117c <MX_ADC2_Init+0xa0>)
 8001120:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001122:	4b14      	ldr	r3, [pc, #80]	@ (8001174 <MX_ADC2_Init+0x98>)
 8001124:	2200      	movs	r2, #0
 8001126:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001128:	4b12      	ldr	r3, [pc, #72]	@ (8001174 <MX_ADC2_Init+0x98>)
 800112a:	2201      	movs	r2, #1
 800112c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800112e:	4b11      	ldr	r3, [pc, #68]	@ (8001174 <MX_ADC2_Init+0x98>)
 8001130:	2200      	movs	r2, #0
 8001132:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001136:	4b0f      	ldr	r3, [pc, #60]	@ (8001174 <MX_ADC2_Init+0x98>)
 8001138:	2201      	movs	r2, #1
 800113a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800113c:	480d      	ldr	r0, [pc, #52]	@ (8001174 <MX_ADC2_Init+0x98>)
 800113e:	f000 fc4d 	bl	80019dc <HAL_ADC_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001148:	f000 f9d8 	bl	80014fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800114c:	2302      	movs	r3, #2
 800114e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001150:	2301      	movs	r3, #1
 8001152:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001154:	2300      	movs	r3, #0
 8001156:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001158:	463b      	mov	r3, r7
 800115a:	4619      	mov	r1, r3
 800115c:	4805      	ldr	r0, [pc, #20]	@ (8001174 <MX_ADC2_Init+0x98>)
 800115e:	f000 fc81 	bl	8001a64 <HAL_ADC_ConfigChannel>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001168:	f000 f9c8 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800116c:	bf00      	nop
 800116e:	3710      	adds	r7, #16
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	200001b0 	.word	0x200001b0
 8001178:	40012100 	.word	0x40012100
 800117c:	0f000001 	.word	0x0f000001

08001180 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001184:	4b16      	ldr	r3, [pc, #88]	@ (80011e0 <MX_CAN1_Init+0x60>)
 8001186:	4a17      	ldr	r2, [pc, #92]	@ (80011e4 <MX_CAN1_Init+0x64>)
 8001188:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800118a:	4b15      	ldr	r3, [pc, #84]	@ (80011e0 <MX_CAN1_Init+0x60>)
 800118c:	2210      	movs	r2, #16
 800118e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001190:	4b13      	ldr	r3, [pc, #76]	@ (80011e0 <MX_CAN1_Init+0x60>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001196:	4b12      	ldr	r3, [pc, #72]	@ (80011e0 <MX_CAN1_Init+0x60>)
 8001198:	2200      	movs	r2, #0
 800119a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 800119c:	4b10      	ldr	r3, [pc, #64]	@ (80011e0 <MX_CAN1_Init+0x60>)
 800119e:	2200      	movs	r2, #0
 80011a0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80011a2:	4b0f      	ldr	r3, [pc, #60]	@ (80011e0 <MX_CAN1_Init+0x60>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80011a8:	4b0d      	ldr	r3, [pc, #52]	@ (80011e0 <MX_CAN1_Init+0x60>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80011ae:	4b0c      	ldr	r3, [pc, #48]	@ (80011e0 <MX_CAN1_Init+0x60>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80011b4:	4b0a      	ldr	r3, [pc, #40]	@ (80011e0 <MX_CAN1_Init+0x60>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80011ba:	4b09      	ldr	r3, [pc, #36]	@ (80011e0 <MX_CAN1_Init+0x60>)
 80011bc:	2200      	movs	r2, #0
 80011be:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80011c0:	4b07      	ldr	r3, [pc, #28]	@ (80011e0 <MX_CAN1_Init+0x60>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80011c6:	4b06      	ldr	r3, [pc, #24]	@ (80011e0 <MX_CAN1_Init+0x60>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80011cc:	4804      	ldr	r0, [pc, #16]	@ (80011e0 <MX_CAN1_Init+0x60>)
 80011ce:	f000 fe67 	bl	8001ea0 <HAL_CAN_Init>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80011d8:	f000 f990 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	200001f8 	.word	0x200001f8
 80011e4:	40006400 	.word	0x40006400

080011e8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80011ee:	463b      	mov	r3, r7
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80011f6:	4b14      	ldr	r3, [pc, #80]	@ (8001248 <MX_DAC_Init+0x60>)
 80011f8:	4a14      	ldr	r2, [pc, #80]	@ (800124c <MX_DAC_Init+0x64>)
 80011fa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80011fc:	4812      	ldr	r0, [pc, #72]	@ (8001248 <MX_DAC_Init+0x60>)
 80011fe:	f001 f85c 	bl	80022ba <HAL_DAC_Init>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001208:	f000 f978 	bl	80014fc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800120c:	2300      	movs	r3, #0
 800120e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001210:	2300      	movs	r3, #0
 8001212:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001214:	463b      	mov	r3, r7
 8001216:	2200      	movs	r2, #0
 8001218:	4619      	mov	r1, r3
 800121a:	480b      	ldr	r0, [pc, #44]	@ (8001248 <MX_DAC_Init+0x60>)
 800121c:	f001 f86f 	bl	80022fe <HAL_DAC_ConfigChannel>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001226:	f000 f969 	bl	80014fc <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800122a:	463b      	mov	r3, r7
 800122c:	2210      	movs	r2, #16
 800122e:	4619      	mov	r1, r3
 8001230:	4805      	ldr	r0, [pc, #20]	@ (8001248 <MX_DAC_Init+0x60>)
 8001232:	f001 f864 	bl	80022fe <HAL_DAC_ConfigChannel>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 800123c:	f000 f95e 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001240:	bf00      	nop
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20000220 	.word	0x20000220
 800124c:	40007400 	.word	0x40007400

08001250 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08c      	sub	sp, #48	@ 0x30
 8001254:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001256:	f107 031c 	add.w	r3, r7, #28
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	61bb      	str	r3, [r7, #24]
 800126a:	4b9e      	ldr	r3, [pc, #632]	@ (80014e4 <MX_GPIO_Init+0x294>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126e:	4a9d      	ldr	r2, [pc, #628]	@ (80014e4 <MX_GPIO_Init+0x294>)
 8001270:	f043 0310 	orr.w	r3, r3, #16
 8001274:	6313      	str	r3, [r2, #48]	@ 0x30
 8001276:	4b9b      	ldr	r3, [pc, #620]	@ (80014e4 <MX_GPIO_Init+0x294>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	f003 0310 	and.w	r3, r3, #16
 800127e:	61bb      	str	r3, [r7, #24]
 8001280:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	617b      	str	r3, [r7, #20]
 8001286:	4b97      	ldr	r3, [pc, #604]	@ (80014e4 <MX_GPIO_Init+0x294>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128a:	4a96      	ldr	r2, [pc, #600]	@ (80014e4 <MX_GPIO_Init+0x294>)
 800128c:	f043 0304 	orr.w	r3, r3, #4
 8001290:	6313      	str	r3, [r2, #48]	@ 0x30
 8001292:	4b94      	ldr	r3, [pc, #592]	@ (80014e4 <MX_GPIO_Init+0x294>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	f003 0304 	and.w	r3, r3, #4
 800129a:	617b      	str	r3, [r7, #20]
 800129c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	4b90      	ldr	r3, [pc, #576]	@ (80014e4 <MX_GPIO_Init+0x294>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	4a8f      	ldr	r2, [pc, #572]	@ (80014e4 <MX_GPIO_Init+0x294>)
 80012a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ae:	4b8d      	ldr	r3, [pc, #564]	@ (80014e4 <MX_GPIO_Init+0x294>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012b6:	613b      	str	r3, [r7, #16]
 80012b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	4b89      	ldr	r3, [pc, #548]	@ (80014e4 <MX_GPIO_Init+0x294>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	4a88      	ldr	r2, [pc, #544]	@ (80014e4 <MX_GPIO_Init+0x294>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ca:	4b86      	ldr	r3, [pc, #536]	@ (80014e4 <MX_GPIO_Init+0x294>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	60bb      	str	r3, [r7, #8]
 80012da:	4b82      	ldr	r3, [pc, #520]	@ (80014e4 <MX_GPIO_Init+0x294>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012de:	4a81      	ldr	r2, [pc, #516]	@ (80014e4 <MX_GPIO_Init+0x294>)
 80012e0:	f043 0302 	orr.w	r3, r3, #2
 80012e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012e6:	4b7f      	ldr	r3, [pc, #508]	@ (80014e4 <MX_GPIO_Init+0x294>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	60bb      	str	r3, [r7, #8]
 80012f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	607b      	str	r3, [r7, #4]
 80012f6:	4b7b      	ldr	r3, [pc, #492]	@ (80014e4 <MX_GPIO_Init+0x294>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fa:	4a7a      	ldr	r2, [pc, #488]	@ (80014e4 <MX_GPIO_Init+0x294>)
 80012fc:	f043 0308 	orr.w	r3, r3, #8
 8001300:	6313      	str	r3, [r2, #48]	@ 0x30
 8001302:	4b78      	ldr	r3, [pc, #480]	@ (80014e4 <MX_GPIO_Init+0x294>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001306:	f003 0308 	and.w	r3, r3, #8
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|auxDCDCDisable_Pin|hvDCDCEnable_Pin|preChargeRelay_Pin
 800130e:	2200      	movs	r2, #0
 8001310:	f641 1188 	movw	r1, #6536	@ 0x1988
 8001314:	4874      	ldr	r0, [pc, #464]	@ (80014e8 <MX_GPIO_Init+0x298>)
 8001316:	f001 f9f5 	bl	8002704 <HAL_GPIO_WritePin>
                          |hvContactor_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800131a:	2201      	movs	r2, #1
 800131c:	2101      	movs	r1, #1
 800131e:	4873      	ldr	r0, [pc, #460]	@ (80014ec <MX_GPIO_Init+0x29c>)
 8001320:	f001 f9f0 	bl	8002704 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(hvContactorB15_GPIO_Port, hvContactorB15_Pin, GPIO_PIN_RESET);
 8001324:	2200      	movs	r2, #0
 8001326:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800132a:	4871      	ldr	r0, [pc, #452]	@ (80014f0 <MX_GPIO_Init+0x2a0>)
 800132c:	f001 f9ea 	bl	8002704 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD6_Pin|spareOutput2_Pin
 8001330:	2200      	movs	r2, #0
 8001332:	f24b 01d9 	movw	r1, #45273	@ 0xb0d9
 8001336:	486f      	ldr	r0, [pc, #444]	@ (80014f4 <MX_GPIO_Init+0x2a4>)
 8001338:	f001 f9e4 	bl	8002704 <HAL_GPIO_WritePin>
                          |faultIndicatorD3_Pin|chargeIndicator_Pin|spareOutput3_Pin|spareOutput1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(faultIndicator_GPIO_Port, faultIndicator_Pin, GPIO_PIN_RESET);
 800133c:	2200      	movs	r2, #0
 800133e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001342:	486a      	ldr	r0, [pc, #424]	@ (80014ec <MX_GPIO_Init+0x29c>)
 8001344:	f001 f9de 	bl	8002704 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_I2C_SPI_Pin auxDCDCDisable_Pin hvDCDCEnable_Pin preChargeRelay_Pin
                           hvContactor_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|auxDCDCDisable_Pin|hvDCDCEnable_Pin|preChargeRelay_Pin
 8001348:	f641 1388 	movw	r3, #6536	@ 0x1988
 800134c:	61fb      	str	r3, [r7, #28]
                          |hvContactor_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134e:	2301      	movs	r3, #1
 8001350:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001356:	2300      	movs	r3, #0
 8001358:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800135a:	f107 031c 	add.w	r3, r7, #28
 800135e:	4619      	mov	r1, r3
 8001360:	4861      	ldr	r0, [pc, #388]	@ (80014e8 <MX_GPIO_Init+0x298>)
 8001362:	f001 f81b 	bl	800239c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin faultIndicator_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|faultIndicator_Pin;
 8001366:	f241 0301 	movw	r3, #4097	@ 0x1001
 800136a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136c:	2301      	movs	r3, #1
 800136e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001374:	2300      	movs	r3, #0
 8001376:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001378:	f107 031c 	add.w	r3, r7, #28
 800137c:	4619      	mov	r1, r3
 800137e:	485b      	ldr	r0, [pc, #364]	@ (80014ec <MX_GPIO_Init+0x29c>)
 8001380:	f001 f80c 	bl	800239c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001384:	2308      	movs	r3, #8
 8001386:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001388:	2302      	movs	r3, #2
 800138a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001390:	2300      	movs	r3, #0
 8001392:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001394:	2305      	movs	r3, #5
 8001396:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001398:	f107 031c 	add.w	r3, r7, #28
 800139c:	4619      	mov	r1, r3
 800139e:	4853      	ldr	r0, [pc, #332]	@ (80014ec <MX_GPIO_Init+0x29c>)
 80013a0:	f000 fffc 	bl	800239c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013a4:	2301      	movs	r3, #1
 80013a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80013a8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80013ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013b2:	f107 031c 	add.w	r3, r7, #28
 80013b6:	4619      	mov	r1, r3
 80013b8:	484f      	ldr	r0, [pc, #316]	@ (80014f8 <MX_GPIO_Init+0x2a8>)
 80013ba:	f000 ffef 	bl	800239c <HAL_GPIO_Init>

  /*Configure GPIO pin : chargeEnable_Pin */
  GPIO_InitStruct.Pin = chargeEnable_Pin;
 80013be:	2308      	movs	r3, #8
 80013c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c2:	2300      	movs	r3, #0
 80013c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(chargeEnable_GPIO_Port, &GPIO_InitStruct);
 80013ca:	f107 031c 	add.w	r3, r7, #28
 80013ce:	4619      	mov	r1, r3
 80013d0:	4849      	ldr	r0, [pc, #292]	@ (80014f8 <MX_GPIO_Init+0x2a8>)
 80013d2:	f000 ffe3 	bl	800239c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_MISO_Pin */
  GPIO_InitStruct.Pin = SPI1_MISO_Pin;
 80013d6:	2340      	movs	r3, #64	@ 0x40
 80013d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013da:	2302      	movs	r3, #2
 80013dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e2:	2300      	movs	r3, #0
 80013e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013e6:	2305      	movs	r3, #5
 80013e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(SPI1_MISO_GPIO_Port, &GPIO_InitStruct);
 80013ea:	f107 031c 	add.w	r3, r7, #28
 80013ee:	4619      	mov	r1, r3
 80013f0:	4841      	ldr	r0, [pc, #260]	@ (80014f8 <MX_GPIO_Init+0x2a8>)
 80013f2:	f000 ffd3 	bl	800239c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80013f6:	2304      	movs	r3, #4
 80013f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013fa:	2300      	movs	r3, #0
 80013fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001402:	f107 031c 	add.w	r3, r7, #28
 8001406:	4619      	mov	r1, r3
 8001408:	4839      	ldr	r0, [pc, #228]	@ (80014f0 <MX_GPIO_Init+0x2a0>)
 800140a:	f000 ffc7 	bl	800239c <HAL_GPIO_Init>

  /*Configure GPIO pins : keyIGN_Pin keyACC_Pin chargeContactor_Pin disChargeEnable_Pin
                           chargeEnableE15_Pin */
  GPIO_InitStruct.Pin = keyIGN_Pin|keyACC_Pin|chargeContactor_Pin|disChargeEnable_Pin
 800140e:	f44f 4366 	mov.w	r3, #58880	@ 0xe600
 8001412:	61fb      	str	r3, [r7, #28]
                          |chargeEnableE15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001414:	2300      	movs	r3, #0
 8001416:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800141c:	f107 031c 	add.w	r3, r7, #28
 8001420:	4619      	mov	r1, r3
 8001422:	4831      	ldr	r0, [pc, #196]	@ (80014e8 <MX_GPIO_Init+0x298>)
 8001424:	f000 ffba 	bl	800239c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001428:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800142c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142e:	2302      	movs	r3, #2
 8001430:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001436:	2300      	movs	r3, #0
 8001438:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800143a:	2305      	movs	r3, #5
 800143c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800143e:	f107 031c 	add.w	r3, r7, #28
 8001442:	4619      	mov	r1, r3
 8001444:	482a      	ldr	r0, [pc, #168]	@ (80014f0 <MX_GPIO_Init+0x2a0>)
 8001446:	f000 ffa9 	bl	800239c <HAL_GPIO_Init>

  /*Configure GPIO pin : hvContactorB15_Pin */
  GPIO_InitStruct.Pin = hvContactorB15_Pin;
 800144a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800144e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001450:	2301      	movs	r3, #1
 8001452:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001458:	2300      	movs	r3, #0
 800145a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(hvContactorB15_GPIO_Port, &GPIO_InitStruct);
 800145c:	f107 031c 	add.w	r3, r7, #28
 8001460:	4619      	mov	r1, r3
 8001462:	4823      	ldr	r0, [pc, #140]	@ (80014f0 <MX_GPIO_Init+0x2a0>)
 8001464:	f000 ff9a 	bl	800239c <HAL_GPIO_Init>

  /*Configure GPIO pins : spareInput2_Pin spareInput1_Pin spareInput3_Pin killSwitch_Pin
                           brakeSwitchInput_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = spareInput2_Pin|spareInput1_Pin|spareInput3_Pin|killSwitch_Pin
 8001468:	f240 7326 	movw	r3, #1830	@ 0x726
 800146c:	61fb      	str	r3, [r7, #28]
                          |brakeSwitchInput_Pin|OTG_FS_OverCurrent_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800146e:	2300      	movs	r3, #0
 8001470:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001476:	f107 031c 	add.w	r3, r7, #28
 800147a:	4619      	mov	r1, r3
 800147c:	481d      	ldr	r0, [pc, #116]	@ (80014f4 <MX_GPIO_Init+0x2a4>)
 800147e:	f000 ff8d 	bl	800239c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD6_Pin spareOutput2_Pin
                           faultIndicatorD3_Pin chargeIndicator_Pin spareOutput3_Pin spareOutput1_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD6_Pin|spareOutput2_Pin
 8001482:	f24b 03d9 	movw	r3, #45273	@ 0xb0d9
 8001486:	61fb      	str	r3, [r7, #28]
                          |faultIndicatorD3_Pin|chargeIndicator_Pin|spareOutput3_Pin|spareOutput1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001488:	2301      	movs	r3, #1
 800148a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001490:	2300      	movs	r3, #0
 8001492:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001494:	f107 031c 	add.w	r3, r7, #28
 8001498:	4619      	mov	r1, r3
 800149a:	4816      	ldr	r0, [pc, #88]	@ (80014f4 <MX_GPIO_Init+0x2a4>)
 800149c:	f000 ff7e 	bl	800239c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_SCK_Pin */
  GPIO_InitStruct.Pin = I2S3_SCK_Pin;
 80014a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a6:	2302      	movs	r3, #2
 80014a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ae:	2300      	movs	r3, #0
 80014b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014b2:	2306      	movs	r3, #6
 80014b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_SCK_GPIO_Port, &GPIO_InitStruct);
 80014b6:	f107 031c 	add.w	r3, r7, #28
 80014ba:	4619      	mov	r1, r3
 80014bc:	480b      	ldr	r0, [pc, #44]	@ (80014ec <MX_GPIO_Init+0x29c>)
 80014be:	f000 ff6d 	bl	800239c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80014c2:	2302      	movs	r3, #2
 80014c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80014c6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80014ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80014d0:	f107 031c 	add.w	r3, r7, #28
 80014d4:	4619      	mov	r1, r3
 80014d6:	4804      	ldr	r0, [pc, #16]	@ (80014e8 <MX_GPIO_Init+0x298>)
 80014d8:	f000 ff60 	bl	800239c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014dc:	bf00      	nop
 80014de:	3730      	adds	r7, #48	@ 0x30
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40023800 	.word	0x40023800
 80014e8:	40021000 	.word	0x40021000
 80014ec:	40020800 	.word	0x40020800
 80014f0:	40020400 	.word	0x40020400
 80014f4:	40020c00 	.word	0x40020c00
 80014f8:	40020000 	.word	0x40020000

080014fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001500:	b672      	cpsid	i
}
 8001502:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001504:	bf00      	nop
 8001506:	e7fd      	b.n	8001504 <Error_Handler+0x8>

08001508 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	607b      	str	r3, [r7, #4]
 8001512:	4b10      	ldr	r3, [pc, #64]	@ (8001554 <HAL_MspInit+0x4c>)
 8001514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001516:	4a0f      	ldr	r2, [pc, #60]	@ (8001554 <HAL_MspInit+0x4c>)
 8001518:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800151c:	6453      	str	r3, [r2, #68]	@ 0x44
 800151e:	4b0d      	ldr	r3, [pc, #52]	@ (8001554 <HAL_MspInit+0x4c>)
 8001520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001522:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001526:	607b      	str	r3, [r7, #4]
 8001528:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	603b      	str	r3, [r7, #0]
 800152e:	4b09      	ldr	r3, [pc, #36]	@ (8001554 <HAL_MspInit+0x4c>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001532:	4a08      	ldr	r2, [pc, #32]	@ (8001554 <HAL_MspInit+0x4c>)
 8001534:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001538:	6413      	str	r3, [r2, #64]	@ 0x40
 800153a:	4b06      	ldr	r3, [pc, #24]	@ (8001554 <HAL_MspInit+0x4c>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001542:	603b      	str	r3, [r7, #0]
 8001544:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001546:	2007      	movs	r0, #7
 8001548:	f000 fe76 	bl	8002238 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800154c:	bf00      	nop
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40023800 	.word	0x40023800

08001558 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08c      	sub	sp, #48	@ 0x30
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001560:	f107 031c 	add.w	r3, r7, #28
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a2e      	ldr	r2, [pc, #184]	@ (8001630 <HAL_ADC_MspInit+0xd8>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d128      	bne.n	80015cc <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	61bb      	str	r3, [r7, #24]
 800157e:	4b2d      	ldr	r3, [pc, #180]	@ (8001634 <HAL_ADC_MspInit+0xdc>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001582:	4a2c      	ldr	r2, [pc, #176]	@ (8001634 <HAL_ADC_MspInit+0xdc>)
 8001584:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001588:	6453      	str	r3, [r2, #68]	@ 0x44
 800158a:	4b2a      	ldr	r3, [pc, #168]	@ (8001634 <HAL_ADC_MspInit+0xdc>)
 800158c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800158e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001592:	61bb      	str	r3, [r7, #24]
 8001594:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	617b      	str	r3, [r7, #20]
 800159a:	4b26      	ldr	r3, [pc, #152]	@ (8001634 <HAL_ADC_MspInit+0xdc>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159e:	4a25      	ldr	r2, [pc, #148]	@ (8001634 <HAL_ADC_MspInit+0xdc>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015a6:	4b23      	ldr	r3, [pc, #140]	@ (8001634 <HAL_ADC_MspInit+0xdc>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	617b      	str	r3, [r7, #20]
 80015b0:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = pedalADC_Pin|regenADC_Pin;
 80015b2:	2306      	movs	r3, #6
 80015b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015b6:	2303      	movs	r3, #3
 80015b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015be:	f107 031c 	add.w	r3, r7, #28
 80015c2:	4619      	mov	r1, r3
 80015c4:	481c      	ldr	r0, [pc, #112]	@ (8001638 <HAL_ADC_MspInit+0xe0>)
 80015c6:	f000 fee9 	bl	800239c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80015ca:	e02c      	b.n	8001626 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a1a      	ldr	r2, [pc, #104]	@ (800163c <HAL_ADC_MspInit+0xe4>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d127      	bne.n	8001626 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	613b      	str	r3, [r7, #16]
 80015da:	4b16      	ldr	r3, [pc, #88]	@ (8001634 <HAL_ADC_MspInit+0xdc>)
 80015dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015de:	4a15      	ldr	r2, [pc, #84]	@ (8001634 <HAL_ADC_MspInit+0xdc>)
 80015e0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80015e6:	4b13      	ldr	r3, [pc, #76]	@ (8001634 <HAL_ADC_MspInit+0xdc>)
 80015e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80015ee:	613b      	str	r3, [r7, #16]
 80015f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001634 <HAL_ADC_MspInit+0xdc>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fa:	4a0e      	ldr	r2, [pc, #56]	@ (8001634 <HAL_ADC_MspInit+0xdc>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6313      	str	r3, [r2, #48]	@ 0x30
 8001602:	4b0c      	ldr	r3, [pc, #48]	@ (8001634 <HAL_ADC_MspInit+0xdc>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = regenADC_Pin;
 800160e:	2304      	movs	r3, #4
 8001610:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001612:	2303      	movs	r3, #3
 8001614:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(regenADC_GPIO_Port, &GPIO_InitStruct);
 800161a:	f107 031c 	add.w	r3, r7, #28
 800161e:	4619      	mov	r1, r3
 8001620:	4805      	ldr	r0, [pc, #20]	@ (8001638 <HAL_ADC_MspInit+0xe0>)
 8001622:	f000 febb 	bl	800239c <HAL_GPIO_Init>
}
 8001626:	bf00      	nop
 8001628:	3730      	adds	r7, #48	@ 0x30
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40012000 	.word	0x40012000
 8001634:	40023800 	.word	0x40023800
 8001638:	40020000 	.word	0x40020000
 800163c:	40012100 	.word	0x40012100

08001640 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08a      	sub	sp, #40	@ 0x28
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
 8001656:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a19      	ldr	r2, [pc, #100]	@ (80016c4 <HAL_CAN_MspInit+0x84>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d12c      	bne.n	80016bc <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	613b      	str	r3, [r7, #16]
 8001666:	4b18      	ldr	r3, [pc, #96]	@ (80016c8 <HAL_CAN_MspInit+0x88>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166a:	4a17      	ldr	r2, [pc, #92]	@ (80016c8 <HAL_CAN_MspInit+0x88>)
 800166c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001670:	6413      	str	r3, [r2, #64]	@ 0x40
 8001672:	4b15      	ldr	r3, [pc, #84]	@ (80016c8 <HAL_CAN_MspInit+0x88>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001676:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800167a:	613b      	str	r3, [r7, #16]
 800167c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	4b11      	ldr	r3, [pc, #68]	@ (80016c8 <HAL_CAN_MspInit+0x88>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001686:	4a10      	ldr	r2, [pc, #64]	@ (80016c8 <HAL_CAN_MspInit+0x88>)
 8001688:	f043 0302 	orr.w	r3, r3, #2
 800168c:	6313      	str	r3, [r2, #48]	@ 0x30
 800168e:	4b0e      	ldr	r3, [pc, #56]	@ (80016c8 <HAL_CAN_MspInit+0x88>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = canRX_Pin|canTX_Pin;
 800169a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800169e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a0:	2302      	movs	r3, #2
 80016a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a8:	2303      	movs	r3, #3
 80016aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80016ac:	2309      	movs	r3, #9
 80016ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	4619      	mov	r1, r3
 80016b6:	4805      	ldr	r0, [pc, #20]	@ (80016cc <HAL_CAN_MspInit+0x8c>)
 80016b8:	f000 fe70 	bl	800239c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80016bc:	bf00      	nop
 80016be:	3728      	adds	r7, #40	@ 0x28
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40006400 	.word	0x40006400
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40020400 	.word	0x40020400

080016d0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08a      	sub	sp, #40	@ 0x28
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a17      	ldr	r2, [pc, #92]	@ (800174c <HAL_DAC_MspInit+0x7c>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d127      	bne.n	8001742 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
 80016f6:	4b16      	ldr	r3, [pc, #88]	@ (8001750 <HAL_DAC_MspInit+0x80>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fa:	4a15      	ldr	r2, [pc, #84]	@ (8001750 <HAL_DAC_MspInit+0x80>)
 80016fc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001700:	6413      	str	r3, [r2, #64]	@ 0x40
 8001702:	4b13      	ldr	r3, [pc, #76]	@ (8001750 <HAL_DAC_MspInit+0x80>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001706:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	4b0f      	ldr	r3, [pc, #60]	@ (8001750 <HAL_DAC_MspInit+0x80>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001716:	4a0e      	ldr	r2, [pc, #56]	@ (8001750 <HAL_DAC_MspInit+0x80>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	6313      	str	r3, [r2, #48]	@ 0x30
 800171e:	4b0c      	ldr	r3, [pc, #48]	@ (8001750 <HAL_DAC_MspInit+0x80>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = pedalDAC_Pin|regenDAC_Pin;
 800172a:	2330      	movs	r3, #48	@ 0x30
 800172c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800172e:	2303      	movs	r3, #3
 8001730:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001736:	f107 0314 	add.w	r3, r7, #20
 800173a:	4619      	mov	r1, r3
 800173c:	4805      	ldr	r0, [pc, #20]	@ (8001754 <HAL_DAC_MspInit+0x84>)
 800173e:	f000 fe2d 	bl	800239c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001742:	bf00      	nop
 8001744:	3728      	adds	r7, #40	@ 0x28
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40007400 	.word	0x40007400
 8001750:	40023800 	.word	0x40023800
 8001754:	40020000 	.word	0x40020000

08001758 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800175c:	bf00      	nop
 800175e:	e7fd      	b.n	800175c <NMI_Handler+0x4>

08001760 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001764:	bf00      	nop
 8001766:	e7fd      	b.n	8001764 <HardFault_Handler+0x4>

08001768 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800176c:	bf00      	nop
 800176e:	e7fd      	b.n	800176c <MemManage_Handler+0x4>

08001770 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001774:	bf00      	nop
 8001776:	e7fd      	b.n	8001774 <BusFault_Handler+0x4>

08001778 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800177c:	bf00      	nop
 800177e:	e7fd      	b.n	800177c <UsageFault_Handler+0x4>

08001780 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ae:	f000 f8d1 	bl	8001954 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80017bc:	4802      	ldr	r0, [pc, #8]	@ (80017c8 <OTG_FS_IRQHandler+0x10>)
 80017be:	f001 f90a 	bl	80029d6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	2000183c 	.word	0x2000183c

080017cc <_sbrk>:
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	4a14      	ldr	r2, [pc, #80]	@ (8001828 <_sbrk+0x5c>)
 80017d6:	4b15      	ldr	r3, [pc, #84]	@ (800182c <_sbrk+0x60>)
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	617b      	str	r3, [r7, #20]
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	613b      	str	r3, [r7, #16]
 80017e0:	4b13      	ldr	r3, [pc, #76]	@ (8001830 <_sbrk+0x64>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d102      	bne.n	80017ee <_sbrk+0x22>
 80017e8:	4b11      	ldr	r3, [pc, #68]	@ (8001830 <_sbrk+0x64>)
 80017ea:	4a12      	ldr	r2, [pc, #72]	@ (8001834 <_sbrk+0x68>)
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	4b10      	ldr	r3, [pc, #64]	@ (8001830 <_sbrk+0x64>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4413      	add	r3, r2
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d207      	bcs.n	800180c <_sbrk+0x40>
 80017fc:	f006 ffec 	bl	80087d8 <__errno>
 8001800:	4603      	mov	r3, r0
 8001802:	220c      	movs	r2, #12
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	f04f 33ff 	mov.w	r3, #4294967295
 800180a:	e009      	b.n	8001820 <_sbrk+0x54>
 800180c:	4b08      	ldr	r3, [pc, #32]	@ (8001830 <_sbrk+0x64>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	4b07      	ldr	r3, [pc, #28]	@ (8001830 <_sbrk+0x64>)
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4413      	add	r3, r2
 800181a:	4a05      	ldr	r2, [pc, #20]	@ (8001830 <_sbrk+0x64>)
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	4618      	mov	r0, r3
 8001822:	3718      	adds	r7, #24
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	20020000 	.word	0x20020000
 800182c:	00000400 	.word	0x00000400
 8001830:	20000354 	.word	0x20000354
 8001834:	200020b0 	.word	0x200020b0

08001838 <SystemInit>:
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
 800183c:	4b06      	ldr	r3, [pc, #24]	@ (8001858 <SystemInit+0x20>)
 800183e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001842:	4a05      	ldr	r2, [pc, #20]	@ (8001858 <SystemInit+0x20>)
 8001844:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001848:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <Reset_Handler>:
 800185c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001894 <LoopFillZerobss+0x12>
 8001860:	480d      	ldr	r0, [pc, #52]	@ (8001898 <LoopFillZerobss+0x16>)
 8001862:	490e      	ldr	r1, [pc, #56]	@ (800189c <LoopFillZerobss+0x1a>)
 8001864:	4a0e      	ldr	r2, [pc, #56]	@ (80018a0 <LoopFillZerobss+0x1e>)
 8001866:	2300      	movs	r3, #0
 8001868:	e002      	b.n	8001870 <LoopCopyDataInit>

0800186a <CopyDataInit>:
 800186a:	58d4      	ldr	r4, [r2, r3]
 800186c:	50c4      	str	r4, [r0, r3]
 800186e:	3304      	adds	r3, #4

08001870 <LoopCopyDataInit>:
 8001870:	18c4      	adds	r4, r0, r3
 8001872:	428c      	cmp	r4, r1
 8001874:	d3f9      	bcc.n	800186a <CopyDataInit>
 8001876:	4a0b      	ldr	r2, [pc, #44]	@ (80018a4 <LoopFillZerobss+0x22>)
 8001878:	4c0b      	ldr	r4, [pc, #44]	@ (80018a8 <LoopFillZerobss+0x26>)
 800187a:	2300      	movs	r3, #0
 800187c:	e001      	b.n	8001882 <LoopFillZerobss>

0800187e <FillZerobss>:
 800187e:	6013      	str	r3, [r2, #0]
 8001880:	3204      	adds	r2, #4

08001882 <LoopFillZerobss>:
 8001882:	42a2      	cmp	r2, r4
 8001884:	d3fb      	bcc.n	800187e <FillZerobss>
 8001886:	f7ff ffd7 	bl	8001838 <SystemInit>
 800188a:	f006 ffab 	bl	80087e4 <__libc_init_array>
 800188e:	f7fe fe6f 	bl	8000570 <main>
 8001892:	4770      	bx	lr
 8001894:	20020000 	.word	0x20020000
 8001898:	20000000 	.word	0x20000000
 800189c:	2000014c 	.word	0x2000014c
 80018a0:	080092e4 	.word	0x080092e4
 80018a4:	2000014c 	.word	0x2000014c
 80018a8:	200020b0 	.word	0x200020b0

080018ac <ADC_IRQHandler>:
 80018ac:	e7fe      	b.n	80018ac <ADC_IRQHandler>
	...

080018b0 <HAL_Init>:
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	4b0e      	ldr	r3, [pc, #56]	@ (80018f0 <HAL_Init+0x40>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a0d      	ldr	r2, [pc, #52]	@ (80018f0 <HAL_Init+0x40>)
 80018ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018be:	6013      	str	r3, [r2, #0]
 80018c0:	4b0b      	ldr	r3, [pc, #44]	@ (80018f0 <HAL_Init+0x40>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a0a      	ldr	r2, [pc, #40]	@ (80018f0 <HAL_Init+0x40>)
 80018c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018ca:	6013      	str	r3, [r2, #0]
 80018cc:	4b08      	ldr	r3, [pc, #32]	@ (80018f0 <HAL_Init+0x40>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a07      	ldr	r2, [pc, #28]	@ (80018f0 <HAL_Init+0x40>)
 80018d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018d6:	6013      	str	r3, [r2, #0]
 80018d8:	2003      	movs	r0, #3
 80018da:	f000 fcad 	bl	8002238 <HAL_NVIC_SetPriorityGrouping>
 80018de:	2000      	movs	r0, #0
 80018e0:	f000 f808 	bl	80018f4 <HAL_InitTick>
 80018e4:	f7ff fe10 	bl	8001508 <HAL_MspInit>
 80018e8:	2300      	movs	r3, #0
 80018ea:	4618      	mov	r0, r3
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40023c00 	.word	0x40023c00

080018f4 <HAL_InitTick>:
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	4b12      	ldr	r3, [pc, #72]	@ (8001948 <HAL_InitTick+0x54>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	4b12      	ldr	r3, [pc, #72]	@ (800194c <HAL_InitTick+0x58>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	4619      	mov	r1, r3
 8001906:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800190a:	fbb3 f3f1 	udiv	r3, r3, r1
 800190e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001912:	4618      	mov	r0, r3
 8001914:	f000 fcc5 	bl	80022a2 <HAL_SYSTICK_Config>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <HAL_InitTick+0x2e>
 800191e:	2301      	movs	r3, #1
 8001920:	e00e      	b.n	8001940 <HAL_InitTick+0x4c>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b0f      	cmp	r3, #15
 8001926:	d80a      	bhi.n	800193e <HAL_InitTick+0x4a>
 8001928:	2200      	movs	r2, #0
 800192a:	6879      	ldr	r1, [r7, #4]
 800192c:	f04f 30ff 	mov.w	r0, #4294967295
 8001930:	f000 fc8d 	bl	800224e <HAL_NVIC_SetPriority>
 8001934:	4a06      	ldr	r2, [pc, #24]	@ (8001950 <HAL_InitTick+0x5c>)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6013      	str	r3, [r2, #0]
 800193a:	2300      	movs	r3, #0
 800193c:	e000      	b.n	8001940 <HAL_InitTick+0x4c>
 800193e:	2301      	movs	r3, #1
 8001940:	4618      	mov	r0, r3
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20000000 	.word	0x20000000
 800194c:	20000008 	.word	0x20000008
 8001950:	20000004 	.word	0x20000004

08001954 <HAL_IncTick>:
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
 8001958:	4b06      	ldr	r3, [pc, #24]	@ (8001974 <HAL_IncTick+0x20>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	461a      	mov	r2, r3
 800195e:	4b06      	ldr	r3, [pc, #24]	@ (8001978 <HAL_IncTick+0x24>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4413      	add	r3, r2
 8001964:	4a04      	ldr	r2, [pc, #16]	@ (8001978 <HAL_IncTick+0x24>)
 8001966:	6013      	str	r3, [r2, #0]
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	20000008 	.word	0x20000008
 8001978:	20000358 	.word	0x20000358

0800197c <HAL_GetTick>:
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
 8001980:	4b03      	ldr	r3, [pc, #12]	@ (8001990 <HAL_GetTick+0x14>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	20000358 	.word	0x20000358

08001994 <HAL_Delay>:
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	f7ff ffee 	bl	800197c <HAL_GetTick>
 80019a0:	60b8      	str	r0, [r7, #8]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019ac:	d005      	beq.n	80019ba <HAL_Delay+0x26>
 80019ae:	4b0a      	ldr	r3, [pc, #40]	@ (80019d8 <HAL_Delay+0x44>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	461a      	mov	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	4413      	add	r3, r2
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	bf00      	nop
 80019bc:	f7ff ffde 	bl	800197c <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d8f7      	bhi.n	80019bc <HAL_Delay+0x28>
 80019cc:	bf00      	nop
 80019ce:	bf00      	nop
 80019d0:	3710      	adds	r7, #16
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000008 	.word	0x20000008

080019dc <HAL_ADC_Init>:
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	2300      	movs	r3, #0
 80019e6:	73fb      	strb	r3, [r7, #15]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_ADC_Init+0x16>
 80019ee:	2301      	movs	r3, #1
 80019f0:	e033      	b.n	8001a5a <HAL_ADC_Init+0x7e>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d109      	bne.n	8001a0e <HAL_ADC_Init+0x32>
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7ff fdac 	bl	8001558 <HAL_ADC_MspInit>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	645a      	str	r2, [r3, #68]	@ 0x44
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a12:	f003 0310 	and.w	r3, r3, #16
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d118      	bne.n	8001a4c <HAL_ADC_Init+0x70>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001a22:	f023 0302 	bic.w	r3, r3, #2
 8001a26:	f043 0202 	orr.w	r2, r3, #2
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 f93a 	bl	8001ca8 <ADC_Init>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	645a      	str	r2, [r3, #68]	@ 0x44
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3e:	f023 0303 	bic.w	r3, r3, #3
 8001a42:	f043 0201 	orr.w	r2, r3, #1
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a4a:	e001      	b.n	8001a50 <HAL_ADC_Init+0x74>
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	73fb      	strb	r3, [r7, #15]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001a58:	7bfb      	ldrb	r3, [r7, #15]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
	...

08001a64 <HAL_ADC_ConfigChannel>:
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60bb      	str	r3, [r7, #8]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d101      	bne.n	8001a80 <HAL_ADC_ConfigChannel+0x1c>
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	e105      	b.n	8001c8c <HAL_ADC_ConfigChannel+0x228>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2b09      	cmp	r3, #9
 8001a8e:	d925      	bls.n	8001adc <HAL_ADC_ConfigChannel+0x78>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	68d9      	ldr	r1, [r3, #12]
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	4413      	add	r3, r2
 8001aa4:	3b1e      	subs	r3, #30
 8001aa6:	2207      	movs	r2, #7
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	43da      	mvns	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	400a      	ands	r2, r1
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	68d9      	ldr	r1, [r3, #12]
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	4603      	mov	r3, r0
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	4403      	add	r3, r0
 8001ace:	3b1e      	subs	r3, #30
 8001ad0:	409a      	lsls	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	60da      	str	r2, [r3, #12]
 8001ada:	e022      	b.n	8001b22 <HAL_ADC_ConfigChannel+0xbe>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	6919      	ldr	r1, [r3, #16]
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	461a      	mov	r2, r3
 8001aea:	4613      	mov	r3, r2
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	4413      	add	r3, r2
 8001af0:	2207      	movs	r2, #7
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	43da      	mvns	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	400a      	ands	r2, r1
 8001afe:	611a      	str	r2, [r3, #16]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6919      	ldr	r1, [r3, #16]
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	689a      	ldr	r2, [r3, #8]
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	4618      	mov	r0, r3
 8001b12:	4603      	mov	r3, r0
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	4403      	add	r3, r0
 8001b18:	409a      	lsls	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	611a      	str	r2, [r3, #16]
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b06      	cmp	r3, #6
 8001b28:	d824      	bhi.n	8001b74 <HAL_ADC_ConfigChannel+0x110>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	4613      	mov	r3, r2
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	4413      	add	r3, r2
 8001b3a:	3b05      	subs	r3, #5
 8001b3c:	221f      	movs	r2, #31
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	43da      	mvns	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	400a      	ands	r2, r1
 8001b4a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	4618      	mov	r0, r3
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685a      	ldr	r2, [r3, #4]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	4413      	add	r3, r2
 8001b64:	3b05      	subs	r3, #5
 8001b66:	fa00 f203 	lsl.w	r2, r0, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b72:	e04c      	b.n	8001c0e <HAL_ADC_ConfigChannel+0x1aa>
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	2b0c      	cmp	r3, #12
 8001b7a:	d824      	bhi.n	8001bc6 <HAL_ADC_ConfigChannel+0x162>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685a      	ldr	r2, [r3, #4]
 8001b86:	4613      	mov	r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4413      	add	r3, r2
 8001b8c:	3b23      	subs	r3, #35	@ 0x23
 8001b8e:	221f      	movs	r2, #31
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	43da      	mvns	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	400a      	ands	r2, r1
 8001b9c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	4618      	mov	r0, r3
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685a      	ldr	r2, [r3, #4]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	4413      	add	r3, r2
 8001bb6:	3b23      	subs	r3, #35	@ 0x23
 8001bb8:	fa00 f203 	lsl.w	r2, r0, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	631a      	str	r2, [r3, #48]	@ 0x30
 8001bc4:	e023      	b.n	8001c0e <HAL_ADC_ConfigChannel+0x1aa>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	4413      	add	r3, r2
 8001bd6:	3b41      	subs	r3, #65	@ 0x41
 8001bd8:	221f      	movs	r2, #31
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	43da      	mvns	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	400a      	ands	r2, r1
 8001be6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685a      	ldr	r2, [r3, #4]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	4413      	add	r3, r2
 8001c00:	3b41      	subs	r3, #65	@ 0x41
 8001c02:	fa00 f203 	lsl.w	r2, r0, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001c0e:	4b22      	ldr	r3, [pc, #136]	@ (8001c98 <HAL_ADC_ConfigChannel+0x234>)
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a21      	ldr	r2, [pc, #132]	@ (8001c9c <HAL_ADC_ConfigChannel+0x238>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d109      	bne.n	8001c30 <HAL_ADC_ConfigChannel+0x1cc>
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2b12      	cmp	r3, #18
 8001c22:	d105      	bne.n	8001c30 <HAL_ADC_ConfigChannel+0x1cc>
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	605a      	str	r2, [r3, #4]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a19      	ldr	r2, [pc, #100]	@ (8001c9c <HAL_ADC_ConfigChannel+0x238>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d123      	bne.n	8001c82 <HAL_ADC_ConfigChannel+0x21e>
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2b10      	cmp	r3, #16
 8001c40:	d003      	beq.n	8001c4a <HAL_ADC_ConfigChannel+0x1e6>
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2b11      	cmp	r3, #17
 8001c48:	d11b      	bne.n	8001c82 <HAL_ADC_ConfigChannel+0x21e>
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2b10      	cmp	r3, #16
 8001c5c:	d111      	bne.n	8001c82 <HAL_ADC_ConfigChannel+0x21e>
 8001c5e:	4b10      	ldr	r3, [pc, #64]	@ (8001ca0 <HAL_ADC_ConfigChannel+0x23c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a10      	ldr	r2, [pc, #64]	@ (8001ca4 <HAL_ADC_ConfigChannel+0x240>)
 8001c64:	fba2 2303 	umull	r2, r3, r2, r3
 8001c68:	0c9a      	lsrs	r2, r3, #18
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	60bb      	str	r3, [r7, #8]
 8001c74:	e002      	b.n	8001c7c <HAL_ADC_ConfigChannel+0x218>
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	60bb      	str	r3, [r7, #8]
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1f9      	bne.n	8001c76 <HAL_ADC_ConfigChannel+0x212>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3714      	adds	r7, #20
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	40012300 	.word	0x40012300
 8001c9c:	40012000 	.word	0x40012000
 8001ca0:	20000000 	.word	0x20000000
 8001ca4:	431bde83 	.word	0x431bde83

08001ca8 <ADC_Init>:
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	4b79      	ldr	r3, [pc, #484]	@ (8001e98 <ADC_Init+0x1f0>)
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	605a      	str	r2, [r3, #4]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	431a      	orrs	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	685a      	ldr	r2, [r3, #4]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	6859      	ldr	r1, [r3, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	691b      	ldr	r3, [r3, #16]
 8001ce8:	021a      	lsls	r2, r3, #8
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	685a      	ldr	r2, [r3, #4]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	6859      	ldr	r1, [r3, #4]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689a      	ldr	r2, [r3, #8]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	430a      	orrs	r2, r1
 8001d12:	605a      	str	r2, [r3, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	689a      	ldr	r2, [r3, #8]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d22:	609a      	str	r2, [r3, #8]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	6899      	ldr	r1, [r3, #8]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68da      	ldr	r2, [r3, #12]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	430a      	orrs	r2, r1
 8001d34:	609a      	str	r2, [r3, #8]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d3a:	4a58      	ldr	r2, [pc, #352]	@ (8001e9c <ADC_Init+0x1f4>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d022      	beq.n	8001d86 <ADC_Init+0xde>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	689a      	ldr	r2, [r3, #8]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6899      	ldr	r1, [r3, #8]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	609a      	str	r2, [r3, #8]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001d70:	609a      	str	r2, [r3, #8]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	6899      	ldr	r1, [r3, #8]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	430a      	orrs	r2, r1
 8001d82:	609a      	str	r2, [r3, #8]
 8001d84:	e00f      	b.n	8001da6 <ADC_Init+0xfe>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d94:	609a      	str	r2, [r3, #8]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001da4:	609a      	str	r2, [r3, #8]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f022 0202 	bic.w	r2, r2, #2
 8001db4:	609a      	str	r2, [r3, #8]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	6899      	ldr	r1, [r3, #8]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	7e1b      	ldrb	r3, [r3, #24]
 8001dc0:	005a      	lsls	r2, r3, #1
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	609a      	str	r2, [r3, #8]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d01b      	beq.n	8001e0c <ADC_Init+0x164>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	685a      	ldr	r2, [r3, #4]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001de2:	605a      	str	r2, [r3, #4]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	685a      	ldr	r2, [r3, #4]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001df2:	605a      	str	r2, [r3, #4]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6859      	ldr	r1, [r3, #4]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	035a      	lsls	r2, r3, #13
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	430a      	orrs	r2, r1
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	e007      	b.n	8001e1c <ADC_Init+0x174>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	685a      	ldr	r2, [r3, #4]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e1a:	605a      	str	r2, [r3, #4]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001e2a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	3b01      	subs	r3, #1
 8001e38:	051a      	lsls	r2, r3, #20
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	689a      	ldr	r2, [r3, #8]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001e50:	609a      	str	r2, [r3, #8]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	6899      	ldr	r1, [r3, #8]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001e5e:	025a      	lsls	r2, r3, #9
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	430a      	orrs	r2, r1
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	689a      	ldr	r2, [r3, #8]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6899      	ldr	r1, [r3, #8]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	029a      	lsls	r2, r3, #10
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	bf00      	nop
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	40012300 	.word	0x40012300
 8001e9c:	0f000001 	.word	0x0f000001

08001ea0 <HAL_CAN_Init>:
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_CAN_Init+0x12>
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e0ed      	b.n	800208e <HAL_CAN_Init+0x1ee>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d102      	bne.n	8001ec4 <HAL_CAN_Init+0x24>
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7ff fbbe 	bl	8001640 <HAL_CAN_MspInit>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f042 0201 	orr.w	r2, r2, #1
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	f7ff fd52 	bl	800197c <HAL_GetTick>
 8001ed8:	60f8      	str	r0, [r7, #12]
 8001eda:	e012      	b.n	8001f02 <HAL_CAN_Init+0x62>
 8001edc:	f7ff fd4e 	bl	800197c <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b0a      	cmp	r3, #10
 8001ee8:	d90b      	bls.n	8001f02 <HAL_CAN_Init+0x62>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eee:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	625a      	str	r2, [r3, #36]	@ 0x24
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2205      	movs	r2, #5
 8001efa:	f883 2020 	strb.w	r2, [r3, #32]
 8001efe:	2301      	movs	r3, #1
 8001f00:	e0c5      	b.n	800208e <HAL_CAN_Init+0x1ee>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d0e5      	beq.n	8001edc <HAL_CAN_Init+0x3c>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f022 0202 	bic.w	r2, r2, #2
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	f7ff fd2c 	bl	800197c <HAL_GetTick>
 8001f24:	60f8      	str	r0, [r7, #12]
 8001f26:	e012      	b.n	8001f4e <HAL_CAN_Init+0xae>
 8001f28:	f7ff fd28 	bl	800197c <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b0a      	cmp	r3, #10
 8001f34:	d90b      	bls.n	8001f4e <HAL_CAN_Init+0xae>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f3a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	625a      	str	r2, [r3, #36]	@ 0x24
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2205      	movs	r2, #5
 8001f46:	f883 2020 	strb.w	r2, [r3, #32]
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e09f      	b.n	800208e <HAL_CAN_Init+0x1ee>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1e5      	bne.n	8001f28 <HAL_CAN_Init+0x88>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	7e1b      	ldrb	r3, [r3, #24]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d108      	bne.n	8001f76 <HAL_CAN_Init+0xd6>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	e007      	b.n	8001f86 <HAL_CAN_Init+0xe6>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	7e5b      	ldrb	r3, [r3, #25]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d108      	bne.n	8001fa0 <HAL_CAN_Init+0x100>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	e007      	b.n	8001fb0 <HAL_CAN_Init+0x110>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	7e9b      	ldrb	r3, [r3, #26]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d108      	bne.n	8001fca <HAL_CAN_Init+0x12a>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f042 0220 	orr.w	r2, r2, #32
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	e007      	b.n	8001fda <HAL_CAN_Init+0x13a>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 0220 	bic.w	r2, r2, #32
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	7edb      	ldrb	r3, [r3, #27]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d108      	bne.n	8001ff4 <HAL_CAN_Init+0x154>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 0210 	bic.w	r2, r2, #16
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	e007      	b.n	8002004 <HAL_CAN_Init+0x164>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f042 0210 	orr.w	r2, r2, #16
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	7f1b      	ldrb	r3, [r3, #28]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d108      	bne.n	800201e <HAL_CAN_Init+0x17e>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f042 0208 	orr.w	r2, r2, #8
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	e007      	b.n	800202e <HAL_CAN_Init+0x18e>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f022 0208 	bic.w	r2, r2, #8
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	7f5b      	ldrb	r3, [r3, #29]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d108      	bne.n	8002048 <HAL_CAN_Init+0x1a8>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f042 0204 	orr.w	r2, r2, #4
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	e007      	b.n	8002058 <HAL_CAN_Init+0x1b8>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f022 0204 	bic.w	r2, r2, #4
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	431a      	orrs	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	431a      	orrs	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	ea42 0103 	orr.w	r1, r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	1e5a      	subs	r2, r3, #1
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	430a      	orrs	r2, r1
 800207c:	61da      	str	r2, [r3, #28]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	625a      	str	r2, [r3, #36]	@ 0x24
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 2020 	strb.w	r2, [r3, #32]
 800208c:	2300      	movs	r3, #0
 800208e:	4618      	mov	r0, r3
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
	...

08002098 <__NVIC_SetPriorityGrouping>:
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	4b0c      	ldr	r3, [pc, #48]	@ (80020dc <__NVIC_SetPriorityGrouping+0x44>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	60bb      	str	r3, [r7, #8]
 80020ae:	68ba      	ldr	r2, [r7, #8]
 80020b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020b4:	4013      	ands	r3, r2
 80020b6:	60bb      	str	r3, [r7, #8]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	021a      	lsls	r2, r3, #8
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	4313      	orrs	r3, r2
 80020c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020c8:	60bb      	str	r3, [r7, #8]
 80020ca:	4a04      	ldr	r2, [pc, #16]	@ (80020dc <__NVIC_SetPriorityGrouping+0x44>)
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	60d3      	str	r3, [r2, #12]
 80020d0:	bf00      	nop
 80020d2:	3714      	adds	r7, #20
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	e000ed00 	.word	0xe000ed00

080020e0 <__NVIC_GetPriorityGrouping>:
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	4b04      	ldr	r3, [pc, #16]	@ (80020f8 <__NVIC_GetPriorityGrouping+0x18>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	0a1b      	lsrs	r3, r3, #8
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	4618      	mov	r0, r3
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	e000ed00 	.word	0xe000ed00

080020fc <__NVIC_EnableIRQ>:
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	71fb      	strb	r3, [r7, #7]
 8002106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210a:	2b00      	cmp	r3, #0
 800210c:	db0b      	blt.n	8002126 <__NVIC_EnableIRQ+0x2a>
 800210e:	79fb      	ldrb	r3, [r7, #7]
 8002110:	f003 021f 	and.w	r2, r3, #31
 8002114:	4907      	ldr	r1, [pc, #28]	@ (8002134 <__NVIC_EnableIRQ+0x38>)
 8002116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211a:	095b      	lsrs	r3, r3, #5
 800211c:	2001      	movs	r0, #1
 800211e:	fa00 f202 	lsl.w	r2, r0, r2
 8002122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002126:	bf00      	nop
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	e000e100 	.word	0xe000e100

08002138 <__NVIC_SetPriority>:
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	4603      	mov	r3, r0
 8002140:	6039      	str	r1, [r7, #0]
 8002142:	71fb      	strb	r3, [r7, #7]
 8002144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002148:	2b00      	cmp	r3, #0
 800214a:	db0a      	blt.n	8002162 <__NVIC_SetPriority+0x2a>
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	b2da      	uxtb	r2, r3
 8002150:	490c      	ldr	r1, [pc, #48]	@ (8002184 <__NVIC_SetPriority+0x4c>)
 8002152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002156:	0112      	lsls	r2, r2, #4
 8002158:	b2d2      	uxtb	r2, r2
 800215a:	440b      	add	r3, r1
 800215c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8002160:	e00a      	b.n	8002178 <__NVIC_SetPriority+0x40>
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	b2da      	uxtb	r2, r3
 8002166:	4908      	ldr	r1, [pc, #32]	@ (8002188 <__NVIC_SetPriority+0x50>)
 8002168:	79fb      	ldrb	r3, [r7, #7]
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	3b04      	subs	r3, #4
 8002170:	0112      	lsls	r2, r2, #4
 8002172:	b2d2      	uxtb	r2, r2
 8002174:	440b      	add	r3, r1
 8002176:	761a      	strb	r2, [r3, #24]
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	e000e100 	.word	0xe000e100
 8002188:	e000ed00 	.word	0xe000ed00

0800218c <NVIC_EncodePriority>:
 800218c:	b480      	push	{r7}
 800218e:	b089      	sub	sp, #36	@ 0x24
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	61fb      	str	r3, [r7, #28]
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	f1c3 0307 	rsb	r3, r3, #7
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	bf28      	it	cs
 80021aa:	2304      	movcs	r3, #4
 80021ac:	61bb      	str	r3, [r7, #24]
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	3304      	adds	r3, #4
 80021b2:	2b06      	cmp	r3, #6
 80021b4:	d902      	bls.n	80021bc <NVIC_EncodePriority+0x30>
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	3b03      	subs	r3, #3
 80021ba:	e000      	b.n	80021be <NVIC_EncodePriority+0x32>
 80021bc:	2300      	movs	r3, #0
 80021be:	617b      	str	r3, [r7, #20]
 80021c0:	f04f 32ff 	mov.w	r2, #4294967295
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	43da      	mvns	r2, r3
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	401a      	ands	r2, r3
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	409a      	lsls	r2, r3
 80021d4:	f04f 31ff 	mov.w	r1, #4294967295
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	fa01 f303 	lsl.w	r3, r1, r3
 80021de:	43d9      	mvns	r1, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	400b      	ands	r3, r1
 80021e4:	4313      	orrs	r3, r2
 80021e6:	4618      	mov	r0, r3
 80021e8:	3724      	adds	r7, #36	@ 0x24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
	...

080021f4 <SysTick_Config>:
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3b01      	subs	r3, #1
 8002200:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002204:	d301      	bcc.n	800220a <SysTick_Config+0x16>
 8002206:	2301      	movs	r3, #1
 8002208:	e00f      	b.n	800222a <SysTick_Config+0x36>
 800220a:	4a0a      	ldr	r2, [pc, #40]	@ (8002234 <SysTick_Config+0x40>)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3b01      	subs	r3, #1
 8002210:	6053      	str	r3, [r2, #4]
 8002212:	210f      	movs	r1, #15
 8002214:	f04f 30ff 	mov.w	r0, #4294967295
 8002218:	f7ff ff8e 	bl	8002138 <__NVIC_SetPriority>
 800221c:	4b05      	ldr	r3, [pc, #20]	@ (8002234 <SysTick_Config+0x40>)
 800221e:	2200      	movs	r2, #0
 8002220:	609a      	str	r2, [r3, #8]
 8002222:	4b04      	ldr	r3, [pc, #16]	@ (8002234 <SysTick_Config+0x40>)
 8002224:	2207      	movs	r2, #7
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	2300      	movs	r3, #0
 800222a:	4618      	mov	r0, r3
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	e000e010 	.word	0xe000e010

08002238 <HAL_NVIC_SetPriorityGrouping>:
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f7ff ff29 	bl	8002098 <__NVIC_SetPriorityGrouping>
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <HAL_NVIC_SetPriority>:
 800224e:	b580      	push	{r7, lr}
 8002250:	b086      	sub	sp, #24
 8002252:	af00      	add	r7, sp, #0
 8002254:	4603      	mov	r3, r0
 8002256:	60b9      	str	r1, [r7, #8]
 8002258:	607a      	str	r2, [r7, #4]
 800225a:	73fb      	strb	r3, [r7, #15]
 800225c:	2300      	movs	r3, #0
 800225e:	617b      	str	r3, [r7, #20]
 8002260:	f7ff ff3e 	bl	80020e0 <__NVIC_GetPriorityGrouping>
 8002264:	6178      	str	r0, [r7, #20]
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	68b9      	ldr	r1, [r7, #8]
 800226a:	6978      	ldr	r0, [r7, #20]
 800226c:	f7ff ff8e 	bl	800218c <NVIC_EncodePriority>
 8002270:	4602      	mov	r2, r0
 8002272:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002276:	4611      	mov	r1, r2
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff ff5d 	bl	8002138 <__NVIC_SetPriority>
 800227e:	bf00      	nop
 8002280:	3718      	adds	r7, #24
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_NVIC_EnableIRQ>:
 8002286:	b580      	push	{r7, lr}
 8002288:	b082      	sub	sp, #8
 800228a:	af00      	add	r7, sp, #0
 800228c:	4603      	mov	r3, r0
 800228e:	71fb      	strb	r3, [r7, #7]
 8002290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff ff31 	bl	80020fc <__NVIC_EnableIRQ>
 800229a:	bf00      	nop
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <HAL_SYSTICK_Config>:
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b082      	sub	sp, #8
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f7ff ffa2 	bl	80021f4 <SysTick_Config>
 80022b0:	4603      	mov	r3, r0
 80022b2:	4618      	mov	r0, r3
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <HAL_DAC_Init>:
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b082      	sub	sp, #8
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d101      	bne.n	80022cc <HAL_DAC_Init+0x12>
 80022c8:	2301      	movs	r3, #1
 80022ca:	e014      	b.n	80022f6 <HAL_DAC_Init+0x3c>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	791b      	ldrb	r3, [r3, #4]
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d105      	bne.n	80022e2 <HAL_DAC_Init+0x28>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	715a      	strb	r2, [r3, #5]
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f7ff f9f7 	bl	80016d0 <HAL_DAC_MspInit>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2202      	movs	r2, #2
 80022e6:	711a      	strb	r2, [r3, #4]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	611a      	str	r2, [r3, #16]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2201      	movs	r2, #1
 80022f2:	711a      	strb	r2, [r3, #4]
 80022f4:	2300      	movs	r3, #0
 80022f6:	4618      	mov	r0, r3
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HAL_DAC_ConfigChannel>:
 80022fe:	b480      	push	{r7}
 8002300:	b087      	sub	sp, #28
 8002302:	af00      	add	r7, sp, #0
 8002304:	60f8      	str	r0, [r7, #12]
 8002306:	60b9      	str	r1, [r7, #8]
 8002308:	607a      	str	r2, [r7, #4]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	795b      	ldrb	r3, [r3, #5]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d101      	bne.n	8002316 <HAL_DAC_ConfigChannel+0x18>
 8002312:	2302      	movs	r3, #2
 8002314:	e03c      	b.n	8002390 <HAL_DAC_ConfigChannel+0x92>
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2201      	movs	r2, #1
 800231a:	715a      	strb	r2, [r3, #5]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2202      	movs	r2, #2
 8002320:	711a      	strb	r2, [r3, #4]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	617b      	str	r3, [r7, #20]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f003 0310 	and.w	r3, r3, #16
 8002330:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	43db      	mvns	r3, r3
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	4013      	ands	r3, r2
 800233e:	617b      	str	r3, [r7, #20]
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	4313      	orrs	r3, r2
 800234a:	613b      	str	r3, [r7, #16]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f003 0310 	and.w	r3, r3, #16
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	697a      	ldr	r2, [r7, #20]
 800235a:	4313      	orrs	r3, r2
 800235c:	617b      	str	r3, [r7, #20]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	697a      	ldr	r2, [r7, #20]
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	6819      	ldr	r1, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f003 0310 	and.w	r3, r3, #16
 8002372:	22c0      	movs	r2, #192	@ 0xc0
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	43da      	mvns	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	400a      	ands	r2, r1
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2201      	movs	r2, #1
 8002386:	711a      	strb	r2, [r3, #4]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2200      	movs	r2, #0
 800238c:	715a      	strb	r2, [r3, #5]
 800238e:	2300      	movs	r3, #0
 8002390:	4618      	mov	r0, r3
 8002392:	371c      	adds	r7, #28
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <HAL_GPIO_Init>:
 800239c:	b480      	push	{r7}
 800239e:	b089      	sub	sp, #36	@ 0x24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
 80023a6:	2300      	movs	r3, #0
 80023a8:	617b      	str	r3, [r7, #20]
 80023aa:	2300      	movs	r3, #0
 80023ac:	613b      	str	r3, [r7, #16]
 80023ae:	2300      	movs	r3, #0
 80023b0:	61bb      	str	r3, [r7, #24]
 80023b2:	2300      	movs	r3, #0
 80023b4:	61fb      	str	r3, [r7, #28]
 80023b6:	e16b      	b.n	8002690 <HAL_GPIO_Init+0x2f4>
 80023b8:	2201      	movs	r2, #1
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	617b      	str	r3, [r7, #20]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	697a      	ldr	r2, [r7, #20]
 80023c8:	4013      	ands	r3, r2
 80023ca:	613b      	str	r3, [r7, #16]
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	f040 815a 	bne.w	800268a <HAL_GPIO_Init+0x2ee>
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f003 0303 	and.w	r3, r3, #3
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d005      	beq.n	80023ee <HAL_GPIO_Init+0x52>
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f003 0303 	and.w	r3, r3, #3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d130      	bne.n	8002450 <HAL_GPIO_Init+0xb4>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	61bb      	str	r3, [r7, #24]
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	2203      	movs	r2, #3
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	43db      	mvns	r3, r3
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	4013      	ands	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	68da      	ldr	r2, [r3, #12]
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4313      	orrs	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	609a      	str	r2, [r3, #8]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	61bb      	str	r3, [r7, #24]
 8002424:	2201      	movs	r2, #1
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	43db      	mvns	r3, r3
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	4013      	ands	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	091b      	lsrs	r3, r3, #4
 800243a:	f003 0201 	and.w	r2, r3, #1
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4313      	orrs	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	605a      	str	r2, [r3, #4]
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f003 0303 	and.w	r3, r3, #3
 8002458:	2b03      	cmp	r3, #3
 800245a:	d017      	beq.n	800248c <HAL_GPIO_Init+0xf0>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	61bb      	str	r3, [r7, #24]
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	2203      	movs	r2, #3
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	43db      	mvns	r3, r3
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	4013      	ands	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4313      	orrs	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	60da      	str	r2, [r3, #12]
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f003 0303 	and.w	r3, r3, #3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d123      	bne.n	80024e0 <HAL_GPIO_Init+0x144>
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	08da      	lsrs	r2, r3, #3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	3208      	adds	r2, #8
 80024a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024a4:	61bb      	str	r3, [r7, #24]
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	f003 0307 	and.w	r3, r3, #7
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	220f      	movs	r2, #15
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	43db      	mvns	r3, r3
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4013      	ands	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	691a      	ldr	r2, [r3, #16]
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	f003 0307 	and.w	r3, r3, #7
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	08da      	lsrs	r2, r3, #3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	3208      	adds	r2, #8
 80024da:	69b9      	ldr	r1, [r7, #24]
 80024dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	61bb      	str	r3, [r7, #24]
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	2203      	movs	r2, #3
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	43db      	mvns	r3, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4013      	ands	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f003 0203 	and.w	r2, r3, #3
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4313      	orrs	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800251c:	2b00      	cmp	r3, #0
 800251e:	f000 80b4 	beq.w	800268a <HAL_GPIO_Init+0x2ee>
 8002522:	2300      	movs	r3, #0
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	4b60      	ldr	r3, [pc, #384]	@ (80026a8 <HAL_GPIO_Init+0x30c>)
 8002528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800252a:	4a5f      	ldr	r2, [pc, #380]	@ (80026a8 <HAL_GPIO_Init+0x30c>)
 800252c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002530:	6453      	str	r3, [r2, #68]	@ 0x44
 8002532:	4b5d      	ldr	r3, [pc, #372]	@ (80026a8 <HAL_GPIO_Init+0x30c>)
 8002534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002536:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	4a5b      	ldr	r2, [pc, #364]	@ (80026ac <HAL_GPIO_Init+0x310>)
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	089b      	lsrs	r3, r3, #2
 8002544:	3302      	adds	r3, #2
 8002546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800254a:	61bb      	str	r3, [r7, #24]
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	f003 0303 	and.w	r3, r3, #3
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	220f      	movs	r2, #15
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	43db      	mvns	r3, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4013      	ands	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a52      	ldr	r2, [pc, #328]	@ (80026b0 <HAL_GPIO_Init+0x314>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d02b      	beq.n	80025c2 <HAL_GPIO_Init+0x226>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a51      	ldr	r2, [pc, #324]	@ (80026b4 <HAL_GPIO_Init+0x318>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d025      	beq.n	80025be <HAL_GPIO_Init+0x222>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a50      	ldr	r2, [pc, #320]	@ (80026b8 <HAL_GPIO_Init+0x31c>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d01f      	beq.n	80025ba <HAL_GPIO_Init+0x21e>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a4f      	ldr	r2, [pc, #316]	@ (80026bc <HAL_GPIO_Init+0x320>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d019      	beq.n	80025b6 <HAL_GPIO_Init+0x21a>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a4e      	ldr	r2, [pc, #312]	@ (80026c0 <HAL_GPIO_Init+0x324>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d013      	beq.n	80025b2 <HAL_GPIO_Init+0x216>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a4d      	ldr	r2, [pc, #308]	@ (80026c4 <HAL_GPIO_Init+0x328>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d00d      	beq.n	80025ae <HAL_GPIO_Init+0x212>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a4c      	ldr	r2, [pc, #304]	@ (80026c8 <HAL_GPIO_Init+0x32c>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d007      	beq.n	80025aa <HAL_GPIO_Init+0x20e>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a4b      	ldr	r2, [pc, #300]	@ (80026cc <HAL_GPIO_Init+0x330>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d101      	bne.n	80025a6 <HAL_GPIO_Init+0x20a>
 80025a2:	2307      	movs	r3, #7
 80025a4:	e00e      	b.n	80025c4 <HAL_GPIO_Init+0x228>
 80025a6:	2308      	movs	r3, #8
 80025a8:	e00c      	b.n	80025c4 <HAL_GPIO_Init+0x228>
 80025aa:	2306      	movs	r3, #6
 80025ac:	e00a      	b.n	80025c4 <HAL_GPIO_Init+0x228>
 80025ae:	2305      	movs	r3, #5
 80025b0:	e008      	b.n	80025c4 <HAL_GPIO_Init+0x228>
 80025b2:	2304      	movs	r3, #4
 80025b4:	e006      	b.n	80025c4 <HAL_GPIO_Init+0x228>
 80025b6:	2303      	movs	r3, #3
 80025b8:	e004      	b.n	80025c4 <HAL_GPIO_Init+0x228>
 80025ba:	2302      	movs	r3, #2
 80025bc:	e002      	b.n	80025c4 <HAL_GPIO_Init+0x228>
 80025be:	2301      	movs	r3, #1
 80025c0:	e000      	b.n	80025c4 <HAL_GPIO_Init+0x228>
 80025c2:	2300      	movs	r3, #0
 80025c4:	69fa      	ldr	r2, [r7, #28]
 80025c6:	f002 0203 	and.w	r2, r2, #3
 80025ca:	0092      	lsls	r2, r2, #2
 80025cc:	4093      	lsls	r3, r2
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
 80025d4:	4935      	ldr	r1, [pc, #212]	@ (80026ac <HAL_GPIO_Init+0x310>)
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	089b      	lsrs	r3, r3, #2
 80025da:	3302      	adds	r3, #2
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80025e2:	4b3b      	ldr	r3, [pc, #236]	@ (80026d0 <HAL_GPIO_Init+0x334>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	61bb      	str	r3, [r7, #24]
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	43db      	mvns	r3, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4013      	ands	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d003      	beq.n	8002606 <HAL_GPIO_Init+0x26a>
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	4313      	orrs	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
 8002606:	4a32      	ldr	r2, [pc, #200]	@ (80026d0 <HAL_GPIO_Init+0x334>)
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	6093      	str	r3, [r2, #8]
 800260c:	4b30      	ldr	r3, [pc, #192]	@ (80026d0 <HAL_GPIO_Init+0x334>)
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	61bb      	str	r3, [r7, #24]
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	43db      	mvns	r3, r3
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4013      	ands	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d003      	beq.n	8002630 <HAL_GPIO_Init+0x294>
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	4313      	orrs	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
 8002630:	4a27      	ldr	r2, [pc, #156]	@ (80026d0 <HAL_GPIO_Init+0x334>)
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	60d3      	str	r3, [r2, #12]
 8002636:	4b26      	ldr	r3, [pc, #152]	@ (80026d0 <HAL_GPIO_Init+0x334>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	61bb      	str	r3, [r7, #24]
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	43db      	mvns	r3, r3
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	4013      	ands	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d003      	beq.n	800265a <HAL_GPIO_Init+0x2be>
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	4313      	orrs	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
 800265a:	4a1d      	ldr	r2, [pc, #116]	@ (80026d0 <HAL_GPIO_Init+0x334>)
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	6053      	str	r3, [r2, #4]
 8002660:	4b1b      	ldr	r3, [pc, #108]	@ (80026d0 <HAL_GPIO_Init+0x334>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	61bb      	str	r3, [r7, #24]
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	43db      	mvns	r3, r3
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	4013      	ands	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d003      	beq.n	8002684 <HAL_GPIO_Init+0x2e8>
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	4313      	orrs	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
 8002684:	4a12      	ldr	r2, [pc, #72]	@ (80026d0 <HAL_GPIO_Init+0x334>)
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	6013      	str	r3, [r2, #0]
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	3301      	adds	r3, #1
 800268e:	61fb      	str	r3, [r7, #28]
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	2b0f      	cmp	r3, #15
 8002694:	f67f ae90 	bls.w	80023b8 <HAL_GPIO_Init+0x1c>
 8002698:	bf00      	nop
 800269a:	bf00      	nop
 800269c:	3724      	adds	r7, #36	@ 0x24
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	40023800 	.word	0x40023800
 80026ac:	40013800 	.word	0x40013800
 80026b0:	40020000 	.word	0x40020000
 80026b4:	40020400 	.word	0x40020400
 80026b8:	40020800 	.word	0x40020800
 80026bc:	40020c00 	.word	0x40020c00
 80026c0:	40021000 	.word	0x40021000
 80026c4:	40021400 	.word	0x40021400
 80026c8:	40021800 	.word	0x40021800
 80026cc:	40021c00 	.word	0x40021c00
 80026d0:	40013c00 	.word	0x40013c00

080026d4 <HAL_GPIO_ReadPin>:
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	460b      	mov	r3, r1
 80026de:	807b      	strh	r3, [r7, #2]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	691a      	ldr	r2, [r3, #16]
 80026e4:	887b      	ldrh	r3, [r7, #2]
 80026e6:	4013      	ands	r3, r2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d002      	beq.n	80026f2 <HAL_GPIO_ReadPin+0x1e>
 80026ec:	2301      	movs	r3, #1
 80026ee:	73fb      	strb	r3, [r7, #15]
 80026f0:	e001      	b.n	80026f6 <HAL_GPIO_ReadPin+0x22>
 80026f2:	2300      	movs	r3, #0
 80026f4:	73fb      	strb	r3, [r7, #15]
 80026f6:	7bfb      	ldrb	r3, [r7, #15]
 80026f8:	4618      	mov	r0, r3
 80026fa:	3714      	adds	r7, #20
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <HAL_GPIO_WritePin>:
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	460b      	mov	r3, r1
 800270e:	807b      	strh	r3, [r7, #2]
 8002710:	4613      	mov	r3, r2
 8002712:	707b      	strb	r3, [r7, #1]
 8002714:	787b      	ldrb	r3, [r7, #1]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <HAL_GPIO_WritePin+0x1e>
 800271a:	887a      	ldrh	r2, [r7, #2]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	619a      	str	r2, [r3, #24]
 8002720:	e003      	b.n	800272a <HAL_GPIO_WritePin+0x26>
 8002722:	887b      	ldrh	r3, [r7, #2]
 8002724:	041a      	lsls	r2, r3, #16
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	619a      	str	r2, [r3, #24]
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <HAL_PCD_Init>:
 8002736:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002738:	b08f      	sub	sp, #60	@ 0x3c
 800273a:	af0a      	add	r7, sp, #40	@ 0x28
 800273c:	6078      	str	r0, [r7, #4]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d101      	bne.n	8002748 <HAL_PCD_Init+0x12>
 8002744:	2301      	movs	r3, #1
 8002746:	e10f      	b.n	8002968 <HAL_PCD_Init+0x232>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	60bb      	str	r3, [r7, #8]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d106      	bne.n	8002768 <HAL_PCD_Init+0x32>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f005 fcee 	bl	8008144 <HAL_PCD_MspInit>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2203      	movs	r2, #3
 800276c:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002774:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002778:	2b00      	cmp	r3, #0
 800277a:	d102      	bne.n	8002782 <HAL_PCD_Init+0x4c>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	611a      	str	r2, [r3, #16]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4618      	mov	r0, r3
 8002788:	f001 ffd7 	bl	800473a <USB_DisableGlobalInt>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	603b      	str	r3, [r7, #0]
 8002792:	687e      	ldr	r6, [r7, #4]
 8002794:	466d      	mov	r5, sp
 8002796:	f106 0410 	add.w	r4, r6, #16
 800279a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800279c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800279e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80027a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80027aa:	1d33      	adds	r3, r6, #4
 80027ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027ae:	6838      	ldr	r0, [r7, #0]
 80027b0:	f001 feae 	bl	8004510 <USB_CoreInit>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d005      	beq.n	80027c6 <HAL_PCD_Init+0x90>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2202      	movs	r2, #2
 80027be:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
 80027c2:	2301      	movs	r3, #1
 80027c4:	e0d0      	b.n	8002968 <HAL_PCD_Init+0x232>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2100      	movs	r1, #0
 80027cc:	4618      	mov	r0, r3
 80027ce:	f001 ffc5 	bl	800475c <USB_SetCurrentMode>
 80027d2:	2300      	movs	r3, #0
 80027d4:	73fb      	strb	r3, [r7, #15]
 80027d6:	e04a      	b.n	800286e <HAL_PCD_Init+0x138>
 80027d8:	7bfa      	ldrb	r2, [r7, #15]
 80027da:	6879      	ldr	r1, [r7, #4]
 80027dc:	4613      	mov	r3, r2
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	4413      	add	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	440b      	add	r3, r1
 80027e6:	333d      	adds	r3, #61	@ 0x3d
 80027e8:	2201      	movs	r2, #1
 80027ea:	701a      	strb	r2, [r3, #0]
 80027ec:	7bfa      	ldrb	r2, [r7, #15]
 80027ee:	6879      	ldr	r1, [r7, #4]
 80027f0:	4613      	mov	r3, r2
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	4413      	add	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	440b      	add	r3, r1
 80027fa:	333c      	adds	r3, #60	@ 0x3c
 80027fc:	7bfa      	ldrb	r2, [r7, #15]
 80027fe:	701a      	strb	r2, [r3, #0]
 8002800:	7bfa      	ldrb	r2, [r7, #15]
 8002802:	7bfb      	ldrb	r3, [r7, #15]
 8002804:	b298      	uxth	r0, r3
 8002806:	6879      	ldr	r1, [r7, #4]
 8002808:	4613      	mov	r3, r2
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	4413      	add	r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	440b      	add	r3, r1
 8002812:	3344      	adds	r3, #68	@ 0x44
 8002814:	4602      	mov	r2, r0
 8002816:	801a      	strh	r2, [r3, #0]
 8002818:	7bfa      	ldrb	r2, [r7, #15]
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	4613      	mov	r3, r2
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	4413      	add	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	440b      	add	r3, r1
 8002826:	3340      	adds	r3, #64	@ 0x40
 8002828:	2200      	movs	r2, #0
 800282a:	701a      	strb	r2, [r3, #0]
 800282c:	7bfa      	ldrb	r2, [r7, #15]
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	4613      	mov	r3, r2
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	4413      	add	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	440b      	add	r3, r1
 800283a:	3348      	adds	r3, #72	@ 0x48
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	7bfa      	ldrb	r2, [r7, #15]
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	4613      	mov	r3, r2
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	4413      	add	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	440b      	add	r3, r1
 800284e:	334c      	adds	r3, #76	@ 0x4c
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	7bfa      	ldrb	r2, [r7, #15]
 8002856:	6879      	ldr	r1, [r7, #4]
 8002858:	4613      	mov	r3, r2
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	4413      	add	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	440b      	add	r3, r1
 8002862:	3354      	adds	r3, #84	@ 0x54
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	7bfb      	ldrb	r3, [r7, #15]
 800286a:	3301      	adds	r3, #1
 800286c:	73fb      	strb	r3, [r7, #15]
 800286e:	7bfa      	ldrb	r2, [r7, #15]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	429a      	cmp	r2, r3
 8002876:	d3af      	bcc.n	80027d8 <HAL_PCD_Init+0xa2>
 8002878:	2300      	movs	r3, #0
 800287a:	73fb      	strb	r3, [r7, #15]
 800287c:	e044      	b.n	8002908 <HAL_PCD_Init+0x1d2>
 800287e:	7bfa      	ldrb	r2, [r7, #15]
 8002880:	6879      	ldr	r1, [r7, #4]
 8002882:	4613      	mov	r3, r2
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	4413      	add	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	440b      	add	r3, r1
 800288c:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8002890:	2200      	movs	r2, #0
 8002892:	701a      	strb	r2, [r3, #0]
 8002894:	7bfa      	ldrb	r2, [r7, #15]
 8002896:	6879      	ldr	r1, [r7, #4]
 8002898:	4613      	mov	r3, r2
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	4413      	add	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	440b      	add	r3, r1
 80028a2:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 80028a6:	7bfa      	ldrb	r2, [r7, #15]
 80028a8:	701a      	strb	r2, [r3, #0]
 80028aa:	7bfa      	ldrb	r2, [r7, #15]
 80028ac:	6879      	ldr	r1, [r7, #4]
 80028ae:	4613      	mov	r3, r2
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	4413      	add	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	440b      	add	r3, r1
 80028b8:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80028bc:	2200      	movs	r2, #0
 80028be:	701a      	strb	r2, [r3, #0]
 80028c0:	7bfa      	ldrb	r2, [r7, #15]
 80028c2:	6879      	ldr	r1, [r7, #4]
 80028c4:	4613      	mov	r3, r2
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	4413      	add	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	440b      	add	r3, r1
 80028ce:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 80028d2:	2200      	movs	r2, #0
 80028d4:	601a      	str	r2, [r3, #0]
 80028d6:	7bfa      	ldrb	r2, [r7, #15]
 80028d8:	6879      	ldr	r1, [r7, #4]
 80028da:	4613      	mov	r3, r2
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	4413      	add	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	440b      	add	r3, r1
 80028e4:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	7bfa      	ldrb	r2, [r7, #15]
 80028ee:	6879      	ldr	r1, [r7, #4]
 80028f0:	4613      	mov	r3, r2
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	4413      	add	r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	440b      	add	r3, r1
 80028fa:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80028fe:	2200      	movs	r2, #0
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	7bfb      	ldrb	r3, [r7, #15]
 8002904:	3301      	adds	r3, #1
 8002906:	73fb      	strb	r3, [r7, #15]
 8002908:	7bfa      	ldrb	r2, [r7, #15]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	429a      	cmp	r2, r3
 8002910:	d3b5      	bcc.n	800287e <HAL_PCD_Init+0x148>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	603b      	str	r3, [r7, #0]
 8002918:	687e      	ldr	r6, [r7, #4]
 800291a:	466d      	mov	r5, sp
 800291c:	f106 0410 	add.w	r4, r6, #16
 8002920:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002922:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002924:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002926:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002928:	e894 0003 	ldmia.w	r4, {r0, r1}
 800292c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002930:	1d33      	adds	r3, r6, #4
 8002932:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002934:	6838      	ldr	r0, [r7, #0]
 8002936:	f001 ff5d 	bl	80047f4 <USB_DevInit>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d005      	beq.n	800294c <HAL_PCD_Init+0x216>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2202      	movs	r2, #2
 8002944:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
 8002948:	2301      	movs	r3, #1
 800294a:	e00d      	b.n	8002968 <HAL_PCD_Init+0x232>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4618      	mov	r0, r3
 8002962:	f003 f8ac 	bl	8005abe <USB_DevDisconnect>
 8002966:	2300      	movs	r3, #0
 8002968:	4618      	mov	r0, r3
 800296a:	3714      	adds	r7, #20
 800296c:	46bd      	mov	sp, r7
 800296e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002970 <HAL_PCD_Start>:
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8002984:	2b01      	cmp	r3, #1
 8002986:	d101      	bne.n	800298c <HAL_PCD_Start+0x1c>
 8002988:	2302      	movs	r3, #2
 800298a:	e020      	b.n	80029ce <HAL_PCD_Start+0x5e>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002998:	2b01      	cmp	r3, #1
 800299a:	d109      	bne.n	80029b0 <HAL_PCD_Start+0x40>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d005      	beq.n	80029b0 <HAL_PCD_Start+0x40>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029a8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	639a      	str	r2, [r3, #56]	@ 0x38
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f001 feaf 	bl	8004718 <USB_EnableGlobalInt>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f003 f85c 	bl	8005a7c <USB_DevConnect>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
 80029cc:	2300      	movs	r3, #0
 80029ce:	4618      	mov	r0, r3
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <HAL_PCD_IRQHandler>:
 80029d6:	b590      	push	{r4, r7, lr}
 80029d8:	b08d      	sub	sp, #52	@ 0x34
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	623b      	str	r3, [r7, #32]
 80029e4:	6a3b      	ldr	r3, [r7, #32]
 80029e6:	61fb      	str	r3, [r7, #28]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f003 f91a 	bl	8005c26 <USB_GetMode>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f040 848a 	bne.w	800330e <HAL_PCD_IRQHandler+0x938>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f003 f87e 	bl	8005b00 <USB_ReadInterrupts>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f000 8480 	beq.w	800330c <HAL_PCD_IRQHandler+0x936>
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	0a1b      	lsrs	r3, r3, #8
 8002a16:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f003 f86b 	bl	8005b00 <USB_ReadInterrupts>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d107      	bne.n	8002a44 <HAL_PCD_IRQHandler+0x6e>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	695a      	ldr	r2, [r3, #20]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f002 0202 	and.w	r2, r2, #2
 8002a42:	615a      	str	r2, [r3, #20]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f003 f859 	bl	8005b00 <USB_ReadInterrupts>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	f003 0310 	and.w	r3, r3, #16
 8002a54:	2b10      	cmp	r3, #16
 8002a56:	d161      	bne.n	8002b1c <HAL_PCD_IRQHandler+0x146>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	699a      	ldr	r2, [r3, #24]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 0210 	bic.w	r2, r2, #16
 8002a66:	619a      	str	r2, [r3, #24]
 8002a68:	6a3b      	ldr	r3, [r7, #32]
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	61bb      	str	r3, [r7, #24]
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	f003 020f 	and.w	r2, r3, #15
 8002a74:	4613      	mov	r3, r2
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	4413      	add	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	4413      	add	r3, r2
 8002a84:	3304      	adds	r3, #4
 8002a86:	617b      	str	r3, [r7, #20]
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	0c5b      	lsrs	r3, r3, #17
 8002a8c:	f003 030f 	and.w	r3, r3, #15
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d124      	bne.n	8002ade <HAL_PCD_IRQHandler+0x108>
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d035      	beq.n	8002b0c <HAL_PCD_IRQHandler+0x136>
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	6919      	ldr	r1, [r3, #16]
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	091b      	lsrs	r3, r3, #4
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	6a38      	ldr	r0, [r7, #32]
 8002ab4:	f002 fe90 	bl	80057d8 <USB_ReadPacket>
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	691a      	ldr	r2, [r3, #16]
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	091b      	lsrs	r3, r3, #4
 8002ac0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ac4:	441a      	add	r2, r3
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	611a      	str	r2, [r3, #16]
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	6a1a      	ldr	r2, [r3, #32]
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	091b      	lsrs	r3, r3, #4
 8002ad2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ad6:	441a      	add	r2, r3
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	621a      	str	r2, [r3, #32]
 8002adc:	e016      	b.n	8002b0c <HAL_PCD_IRQHandler+0x136>
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	0c5b      	lsrs	r3, r3, #17
 8002ae2:	f003 030f 	and.w	r3, r3, #15
 8002ae6:	2b06      	cmp	r3, #6
 8002ae8:	d110      	bne.n	8002b0c <HAL_PCD_IRQHandler+0x136>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8002af0:	2208      	movs	r2, #8
 8002af2:	4619      	mov	r1, r3
 8002af4:	6a38      	ldr	r0, [r7, #32]
 8002af6:	f002 fe6f 	bl	80057d8 <USB_ReadPacket>
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	6a1a      	ldr	r2, [r3, #32]
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	091b      	lsrs	r3, r3, #4
 8002b02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b06:	441a      	add	r2, r3
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	621a      	str	r2, [r3, #32]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	699a      	ldr	r2, [r3, #24]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f042 0210 	orr.w	r2, r2, #16
 8002b1a:	619a      	str	r2, [r3, #24]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f002 ffed 	bl	8005b00 <USB_ReadInterrupts>
 8002b26:	4603      	mov	r3, r0
 8002b28:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b2c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002b30:	f040 80a7 	bne.w	8002c82 <HAL_PCD_IRQHandler+0x2ac>
 8002b34:	2300      	movs	r3, #0
 8002b36:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f002 fff2 	bl	8005b26 <USB_ReadDevAllOutEpInterrupt>
 8002b42:	62b8      	str	r0, [r7, #40]	@ 0x28
 8002b44:	e099      	b.n	8002c7a <HAL_PCD_IRQHandler+0x2a4>
 8002b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f000 808e 	beq.w	8002c6e <HAL_PCD_IRQHandler+0x298>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b58:	b2d2      	uxtb	r2, r2
 8002b5a:	4611      	mov	r1, r2
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f003 f816 	bl	8005b8e <USB_ReadDevOutEPInterrupt>
 8002b62:	6138      	str	r0, [r7, #16]
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00c      	beq.n	8002b88 <HAL_PCD_IRQHandler+0x1b2>
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b70:	015a      	lsls	r2, r3, #5
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	4413      	add	r3, r2
 8002b76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	6093      	str	r3, [r2, #8]
 8002b80:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 fec2 	bl	800390c <PCD_EP_OutXfrComplete_int>
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	f003 0308 	and.w	r3, r3, #8
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00c      	beq.n	8002bac <HAL_PCD_IRQHandler+0x1d6>
 8002b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b94:	015a      	lsls	r2, r3, #5
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	4413      	add	r3, r2
 8002b9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	2308      	movs	r3, #8
 8002ba2:	6093      	str	r3, [r2, #8]
 8002ba4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 ff98 	bl	8003adc <PCD_EP_OutSetupPacket_int>
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	f003 0310 	and.w	r3, r3, #16
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d008      	beq.n	8002bc8 <HAL_PCD_IRQHandler+0x1f2>
 8002bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb8:	015a      	lsls	r2, r3, #5
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	2310      	movs	r3, #16
 8002bc6:	6093      	str	r3, [r2, #8]
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d030      	beq.n	8002c34 <HAL_PCD_IRQHandler+0x25e>
 8002bd2:	6a3b      	ldr	r3, [r7, #32]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bda:	2b80      	cmp	r3, #128	@ 0x80
 8002bdc:	d109      	bne.n	8002bf2 <HAL_PCD_IRQHandler+0x21c>
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	69fa      	ldr	r2, [r7, #28]
 8002be8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002bec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002bf0:	6053      	str	r3, [r2, #4]
 8002bf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	4413      	add	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	4413      	add	r3, r2
 8002c04:	3304      	adds	r3, #4
 8002c06:	617b      	str	r3, [r7, #20]
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	78db      	ldrb	r3, [r3, #3]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d108      	bne.n	8002c22 <HAL_PCD_IRQHandler+0x24c>
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	2200      	movs	r2, #0
 8002c14:	70da      	strb	r2, [r3, #3]
 8002c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f005 fba5 	bl	800836c <HAL_PCD_ISOOUTIncompleteCallback>
 8002c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c24:	015a      	lsls	r2, r3, #5
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	4413      	add	r3, r2
 8002c2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c2e:	461a      	mov	r2, r3
 8002c30:	2302      	movs	r3, #2
 8002c32:	6093      	str	r3, [r2, #8]
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	f003 0320 	and.w	r3, r3, #32
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d008      	beq.n	8002c50 <HAL_PCD_IRQHandler+0x27a>
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c40:	015a      	lsls	r2, r3, #5
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	4413      	add	r3, r2
 8002c46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	2320      	movs	r3, #32
 8002c4e:	6093      	str	r3, [r2, #8]
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d009      	beq.n	8002c6e <HAL_PCD_IRQHandler+0x298>
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c5c:	015a      	lsls	r2, r3, #5
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	4413      	add	r3, r2
 8002c62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c66:	461a      	mov	r2, r3
 8002c68:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c6c:	6093      	str	r3, [r2, #8]
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c70:	3301      	adds	r3, #1
 8002c72:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c76:	085b      	lsrs	r3, r3, #1
 8002c78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f47f af62 	bne.w	8002b46 <HAL_PCD_IRQHandler+0x170>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f002 ff3a 	bl	8005b00 <USB_ReadInterrupts>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c92:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002c96:	f040 80db 	bne.w	8002e50 <HAL_PCD_IRQHandler+0x47a>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f002 ff5b 	bl	8005b5a <USB_ReadDevAllInEpInterrupt>
 8002ca4:	62b8      	str	r0, [r7, #40]	@ 0x28
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002caa:	e0cd      	b.n	8002e48 <HAL_PCD_IRQHandler+0x472>
 8002cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f000 80c2 	beq.w	8002e3c <HAL_PCD_IRQHandler+0x466>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cbe:	b2d2      	uxtb	r2, r2
 8002cc0:	4611      	mov	r1, r2
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f002 ff81 	bl	8005bca <USB_ReadDevInEPInterrupt>
 8002cc8:	6138      	str	r0, [r7, #16]
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d057      	beq.n	8002d84 <HAL_PCD_IRQHandler+0x3ae>
 8002cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd6:	f003 030f 	and.w	r3, r3, #15
 8002cda:	2201      	movs	r2, #1
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	60fb      	str	r3, [r7, #12]
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ce8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	43db      	mvns	r3, r3
 8002cee:	69f9      	ldr	r1, [r7, #28]
 8002cf0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	634b      	str	r3, [r1, #52]	@ 0x34
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfa:	015a      	lsls	r2, r3, #5
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	4413      	add	r3, r2
 8002d00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d04:	461a      	mov	r2, r3
 8002d06:	2301      	movs	r3, #1
 8002d08:	6093      	str	r3, [r2, #8]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d132      	bne.n	8002d78 <HAL_PCD_IRQHandler+0x3a2>
 8002d12:	6879      	ldr	r1, [r7, #4]
 8002d14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d16:	4613      	mov	r3, r2
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	4413      	add	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	440b      	add	r3, r1
 8002d20:	334c      	adds	r3, #76	@ 0x4c
 8002d22:	6819      	ldr	r1, [r3, #0]
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d28:	4613      	mov	r3, r2
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	4413      	add	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4403      	add	r3, r0
 8002d32:	3348      	adds	r3, #72	@ 0x48
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4419      	add	r1, r3
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	4413      	add	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	4403      	add	r3, r0
 8002d46:	334c      	adds	r3, #76	@ 0x4c
 8002d48:	6019      	str	r1, [r3, #0]
 8002d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d113      	bne.n	8002d78 <HAL_PCD_IRQHandler+0x3a2>
 8002d50:	6879      	ldr	r1, [r7, #4]
 8002d52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d54:	4613      	mov	r3, r2
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	4413      	add	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	440b      	add	r3, r1
 8002d5e:	3354      	adds	r3, #84	@ 0x54
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d108      	bne.n	8002d78 <HAL_PCD_IRQHandler+0x3a2>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6818      	ldr	r0, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8002d70:	461a      	mov	r2, r3
 8002d72:	2101      	movs	r1, #1
 8002d74:	f002 ff88 	bl	8005c88 <USB_EP0_OutStart>
 8002d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f005 fa6f 	bl	8008262 <HAL_PCD_DataInStageCallback>
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	f003 0308 	and.w	r3, r3, #8
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d008      	beq.n	8002da0 <HAL_PCD_IRQHandler+0x3ca>
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d90:	015a      	lsls	r2, r3, #5
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	4413      	add	r3, r2
 8002d96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	2308      	movs	r3, #8
 8002d9e:	6093      	str	r3, [r2, #8]
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	f003 0310 	and.w	r3, r3, #16
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d008      	beq.n	8002dbc <HAL_PCD_IRQHandler+0x3e6>
 8002daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dac:	015a      	lsls	r2, r3, #5
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	4413      	add	r3, r2
 8002db2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002db6:	461a      	mov	r2, r3
 8002db8:	2310      	movs	r3, #16
 8002dba:	6093      	str	r3, [r2, #8]
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d008      	beq.n	8002dd8 <HAL_PCD_IRQHandler+0x402>
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc8:	015a      	lsls	r2, r3, #5
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	4413      	add	r3, r2
 8002dce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	2340      	movs	r3, #64	@ 0x40
 8002dd6:	6093      	str	r3, [r2, #8]
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d023      	beq.n	8002e2a <HAL_PCD_IRQHandler+0x454>
 8002de2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002de4:	6a38      	ldr	r0, [r7, #32]
 8002de6:	f001 fe69 	bl	8004abc <USB_FlushTxFifo>
 8002dea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dec:	4613      	mov	r3, r2
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	4413      	add	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	3338      	adds	r3, #56	@ 0x38
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	4413      	add	r3, r2
 8002dfa:	3304      	adds	r3, #4
 8002dfc:	617b      	str	r3, [r7, #20]
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	78db      	ldrb	r3, [r3, #3]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d108      	bne.n	8002e18 <HAL_PCD_IRQHandler+0x442>
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	70da      	strb	r2, [r3, #3]
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	4619      	mov	r1, r3
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f005 fabc 	bl	8008390 <HAL_PCD_ISOINIncompleteCallback>
 8002e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1a:	015a      	lsls	r2, r3, #5
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	4413      	add	r3, r2
 8002e20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e24:	461a      	mov	r2, r3
 8002e26:	2302      	movs	r3, #2
 8002e28:	6093      	str	r3, [r2, #8]
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d003      	beq.n	8002e3c <HAL_PCD_IRQHandler+0x466>
 8002e34:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 fcdb 	bl	80037f2 <PCD_WriteEmptyTxFifo>
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3e:	3301      	adds	r3, #1
 8002e40:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e44:	085b      	lsrs	r3, r3, #1
 8002e46:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f47f af2e 	bne.w	8002cac <HAL_PCD_IRQHandler+0x2d6>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f002 fe53 	bl	8005b00 <USB_ReadInterrupts>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002e60:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002e64:	d122      	bne.n	8002eac <HAL_PCD_IRQHandler+0x4d6>
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	69fa      	ldr	r2, [r7, #28]
 8002e70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e74:	f023 0301 	bic.w	r3, r3, #1
 8002e78:	6053      	str	r3, [r2, #4]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d108      	bne.n	8002e96 <HAL_PCD_IRQHandler+0x4c0>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 fec2 	bl	8003c18 <HAL_PCDEx_LPM_Callback>
 8002e94:	e002      	b.n	8002e9c <HAL_PCD_IRQHandler+0x4c6>
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f005 fa5a 	bl	8008350 <HAL_PCD_ResumeCallback>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	695a      	ldr	r2, [r3, #20]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002eaa:	615a      	str	r2, [r3, #20]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f002 fe25 	bl	8005b00 <USB_ReadInterrupts>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ebc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ec0:	d112      	bne.n	8002ee8 <HAL_PCD_IRQHandler+0x512>
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d102      	bne.n	8002ed8 <HAL_PCD_IRQHandler+0x502>
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f005 fa16 	bl	8008304 <HAL_PCD_SuspendCallback>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	695a      	ldr	r2, [r3, #20]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002ee6:	615a      	str	r2, [r3, #20]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f002 fe07 	bl	8005b00 <USB_ReadInterrupts>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ef8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002efc:	f040 80b7 	bne.w	800306e <HAL_PCD_IRQHandler+0x698>
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	69fa      	ldr	r2, [r7, #28]
 8002f0a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f0e:	f023 0301 	bic.w	r3, r3, #1
 8002f12:	6053      	str	r3, [r2, #4]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2110      	movs	r1, #16
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f001 fdce 	bl	8004abc <USB_FlushTxFifo>
 8002f20:	2300      	movs	r3, #0
 8002f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f24:	e046      	b.n	8002fb4 <HAL_PCD_IRQHandler+0x5de>
 8002f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f28:	015a      	lsls	r2, r3, #5
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f32:	461a      	mov	r2, r3
 8002f34:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002f38:	6093      	str	r3, [r2, #8]
 8002f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f3c:	015a      	lsls	r2, r3, #5
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	4413      	add	r3, r2
 8002f42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f4a:	0151      	lsls	r1, r2, #5
 8002f4c:	69fa      	ldr	r2, [r7, #28]
 8002f4e:	440a      	add	r2, r1
 8002f50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002f54:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002f58:	6013      	str	r3, [r2, #0]
 8002f5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f5c:	015a      	lsls	r2, r3, #5
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	4413      	add	r3, r2
 8002f62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f66:	461a      	mov	r2, r3
 8002f68:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002f6c:	6093      	str	r3, [r2, #8]
 8002f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f70:	015a      	lsls	r2, r3, #5
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	4413      	add	r3, r2
 8002f76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f7e:	0151      	lsls	r1, r2, #5
 8002f80:	69fa      	ldr	r2, [r7, #28]
 8002f82:	440a      	add	r2, r1
 8002f84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002f88:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002f8c:	6013      	str	r3, [r2, #0]
 8002f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f90:	015a      	lsls	r2, r3, #5
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	4413      	add	r3, r2
 8002f96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f9e:	0151      	lsls	r1, r2, #5
 8002fa0:	69fa      	ldr	r2, [r7, #28]
 8002fa2:	440a      	add	r2, r1
 8002fa4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002fa8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002fac:	6013      	str	r3, [r2, #0]
 8002fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d3b3      	bcc.n	8002f26 <HAL_PCD_IRQHandler+0x550>
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	69fa      	ldr	r2, [r7, #28]
 8002fc8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002fcc:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002fd0:	61d3      	str	r3, [r2, #28]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d016      	beq.n	8003008 <HAL_PCD_IRQHandler+0x632>
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fe4:	69fa      	ldr	r2, [r7, #28]
 8002fe6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002fea:	f043 030b 	orr.w	r3, r3, #11
 8002fee:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ffa:	69fa      	ldr	r2, [r7, #28]
 8002ffc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003000:	f043 030b 	orr.w	r3, r3, #11
 8003004:	6453      	str	r3, [r2, #68]	@ 0x44
 8003006:	e015      	b.n	8003034 <HAL_PCD_IRQHandler+0x65e>
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	69fa      	ldr	r2, [r7, #28]
 8003012:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003016:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800301a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800301e:	6153      	str	r3, [r2, #20]
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	69fa      	ldr	r2, [r7, #28]
 800302a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800302e:	f043 030b 	orr.w	r3, r3, #11
 8003032:	6113      	str	r3, [r2, #16]
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	69fa      	ldr	r2, [r7, #28]
 800303e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003042:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003046:	6013      	str	r3, [r2, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6818      	ldr	r0, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	b2d9      	uxtb	r1, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003058:	461a      	mov	r2, r3
 800305a:	f002 fe15 	bl	8005c88 <USB_EP0_OutStart>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	695a      	ldr	r2, [r3, #20]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800306c:	615a      	str	r2, [r3, #20]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4618      	mov	r0, r3
 8003074:	f002 fd44 	bl	8005b00 <USB_ReadInterrupts>
 8003078:	4603      	mov	r3, r0
 800307a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800307e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003082:	d124      	bne.n	80030ce <HAL_PCD_IRQHandler+0x6f8>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4618      	mov	r0, r3
 800308a:	f002 fdda 	bl	8005c42 <USB_ActivateSetup>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4618      	mov	r0, r3
 8003094:	f001 fd8f 	bl	8004bb6 <USB_GetDevSpeed>
 8003098:	4603      	mov	r3, r0
 800309a:	461a      	mov	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	60da      	str	r2, [r3, #12]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681c      	ldr	r4, [r3, #0]
 80030a4:	f001 fa28 	bl	80044f8 <HAL_RCC_GetHCLKFreq>
 80030a8:	4601      	mov	r1, r0
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	461a      	mov	r2, r3
 80030b2:	4620      	mov	r0, r4
 80030b4:	f001 fa8e 	bl	80045d4 <USB_SetTurnaroundTime>
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f005 f8fa 	bl	80082b2 <HAL_PCD_ResetCallback>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	695a      	ldr	r2, [r3, #20]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80030cc:	615a      	str	r2, [r3, #20]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f002 fd14 	bl	8005b00 <USB_ReadInterrupts>
 80030d8:	4603      	mov	r3, r0
 80030da:	f003 0308 	and.w	r3, r3, #8
 80030de:	2b08      	cmp	r3, #8
 80030e0:	d10a      	bne.n	80030f8 <HAL_PCD_IRQHandler+0x722>
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f005 f8d7 	bl	8008296 <HAL_PCD_SOFCallback>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	695a      	ldr	r2, [r3, #20]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f002 0208 	and.w	r2, r2, #8
 80030f6:	615a      	str	r2, [r3, #20]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f002 fcff 	bl	8005b00 <USB_ReadInterrupts>
 8003102:	4603      	mov	r3, r0
 8003104:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003108:	2b80      	cmp	r3, #128	@ 0x80
 800310a:	d122      	bne.n	8003152 <HAL_PCD_IRQHandler+0x77c>
 800310c:	6a3b      	ldr	r3, [r7, #32]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003114:	6a3b      	ldr	r3, [r7, #32]
 8003116:	619a      	str	r2, [r3, #24]
 8003118:	2301      	movs	r3, #1
 800311a:	627b      	str	r3, [r7, #36]	@ 0x24
 800311c:	e014      	b.n	8003148 <HAL_PCD_IRQHandler+0x772>
 800311e:	6879      	ldr	r1, [r7, #4]
 8003120:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003122:	4613      	mov	r3, r2
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	4413      	add	r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	440b      	add	r3, r1
 800312c:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d105      	bne.n	8003142 <HAL_PCD_IRQHandler+0x76c>
 8003136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003138:	b2db      	uxtb	r3, r3
 800313a:	4619      	mov	r1, r3
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 fb27 	bl	8003790 <HAL_PCD_EP_Abort>
 8003142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003144:	3301      	adds	r3, #1
 8003146:	627b      	str	r3, [r7, #36]	@ 0x24
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800314e:	429a      	cmp	r2, r3
 8003150:	d3e5      	bcc.n	800311e <HAL_PCD_IRQHandler+0x748>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4618      	mov	r0, r3
 8003158:	f002 fcd2 	bl	8005b00 <USB_ReadInterrupts>
 800315c:	4603      	mov	r3, r0
 800315e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003162:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003166:	d13b      	bne.n	80031e0 <HAL_PCD_IRQHandler+0x80a>
 8003168:	2301      	movs	r3, #1
 800316a:	627b      	str	r3, [r7, #36]	@ 0x24
 800316c:	e02b      	b.n	80031c6 <HAL_PCD_IRQHandler+0x7f0>
 800316e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003170:	015a      	lsls	r2, r3, #5
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	4413      	add	r3, r2
 8003176:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	61bb      	str	r3, [r7, #24]
 800317e:	6879      	ldr	r1, [r7, #4]
 8003180:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003182:	4613      	mov	r3, r2
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	4413      	add	r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	440b      	add	r3, r1
 800318c:	3340      	adds	r3, #64	@ 0x40
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d115      	bne.n	80031c0 <HAL_PCD_IRQHandler+0x7ea>
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	2b00      	cmp	r3, #0
 8003198:	da12      	bge.n	80031c0 <HAL_PCD_IRQHandler+0x7ea>
 800319a:	6879      	ldr	r1, [r7, #4]
 800319c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800319e:	4613      	mov	r3, r2
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	4413      	add	r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	440b      	add	r3, r1
 80031a8:	333f      	adds	r3, #63	@ 0x3f
 80031aa:	2201      	movs	r2, #1
 80031ac:	701a      	strb	r2, [r3, #0]
 80031ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	4619      	mov	r1, r3
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 fae8 	bl	8003790 <HAL_PCD_EP_Abort>
 80031c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c2:	3301      	adds	r3, #1
 80031c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d3ce      	bcc.n	800316e <HAL_PCD_IRQHandler+0x798>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	695a      	ldr	r2, [r3, #20]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80031de:	615a      	str	r2, [r3, #20]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f002 fc8b 	bl	8005b00 <USB_ReadInterrupts>
 80031ea:	4603      	mov	r3, r0
 80031ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80031f4:	d155      	bne.n	80032a2 <HAL_PCD_IRQHandler+0x8cc>
 80031f6:	2301      	movs	r3, #1
 80031f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80031fa:	e045      	b.n	8003288 <HAL_PCD_IRQHandler+0x8b2>
 80031fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031fe:	015a      	lsls	r2, r3, #5
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	4413      	add	r3, r2
 8003204:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	61bb      	str	r3, [r7, #24]
 800320c:	6879      	ldr	r1, [r7, #4]
 800320e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003210:	4613      	mov	r3, r2
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	4413      	add	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	440b      	add	r3, r1
 800321a:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d12e      	bne.n	8003282 <HAL_PCD_IRQHandler+0x8ac>
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	2b00      	cmp	r3, #0
 8003228:	da2b      	bge.n	8003282 <HAL_PCD_IRQHandler+0x8ac>
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	429a      	cmp	r2, r3
 800323c:	d121      	bne.n	8003282 <HAL_PCD_IRQHandler+0x8ac>
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003242:	4613      	mov	r3, r2
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	4413      	add	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	440b      	add	r3, r1
 800324c:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8003250:	2201      	movs	r2, #1
 8003252:	701a      	strb	r2, [r3, #0]
 8003254:	6a3b      	ldr	r3, [r7, #32]
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800325c:	6a3b      	ldr	r3, [r7, #32]
 800325e:	619a      	str	r2, [r3, #24]
 8003260:	6a3b      	ldr	r3, [r7, #32]
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10a      	bne.n	8003282 <HAL_PCD_IRQHandler+0x8ac>
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	69fa      	ldr	r2, [r7, #28]
 8003276:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800327a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800327e:	6053      	str	r3, [r2, #4]
 8003280:	e007      	b.n	8003292 <HAL_PCD_IRQHandler+0x8bc>
 8003282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003284:	3301      	adds	r3, #1
 8003286:	627b      	str	r3, [r7, #36]	@ 0x24
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800328e:	429a      	cmp	r2, r3
 8003290:	d3b4      	bcc.n	80031fc <HAL_PCD_IRQHandler+0x826>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	695a      	ldr	r2, [r3, #20]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80032a0:	615a      	str	r2, [r3, #20]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f002 fc2a 	bl	8005b00 <USB_ReadInterrupts>
 80032ac:	4603      	mov	r3, r0
 80032ae:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80032b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032b6:	d10a      	bne.n	80032ce <HAL_PCD_IRQHandler+0x8f8>
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f005 f87b 	bl	80083b4 <HAL_PCD_ConnectCallback>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	695a      	ldr	r2, [r3, #20]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80032cc:	615a      	str	r2, [r3, #20]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f002 fc14 	bl	8005b00 <USB_ReadInterrupts>
 80032d8:	4603      	mov	r3, r0
 80032da:	f003 0304 	and.w	r3, r3, #4
 80032de:	2b04      	cmp	r3, #4
 80032e0:	d115      	bne.n	800330e <HAL_PCD_IRQHandler+0x938>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	61bb      	str	r3, [r7, #24]
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	f003 0304 	and.w	r3, r3, #4
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d002      	beq.n	80032fa <HAL_PCD_IRQHandler+0x924>
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f005 f86b 	bl	80083d0 <HAL_PCD_DisconnectCallback>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	6859      	ldr	r1, [r3, #4]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	430a      	orrs	r2, r1
 8003308:	605a      	str	r2, [r3, #4]
 800330a:	e000      	b.n	800330e <HAL_PCD_IRQHandler+0x938>
 800330c:	bf00      	nop
 800330e:	3734      	adds	r7, #52	@ 0x34
 8003310:	46bd      	mov	sp, r7
 8003312:	bd90      	pop	{r4, r7, pc}

08003314 <HAL_PCD_SetAddress>:
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	460b      	mov	r3, r1
 800331e:	70fb      	strb	r3, [r7, #3]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003326:	2b01      	cmp	r3, #1
 8003328:	d101      	bne.n	800332e <HAL_PCD_SetAddress+0x1a>
 800332a:	2302      	movs	r3, #2
 800332c:	e013      	b.n	8003356 <HAL_PCD_SetAddress+0x42>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2201      	movs	r2, #1
 8003332:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	78fa      	ldrb	r2, [r7, #3]
 800333a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	78fa      	ldrb	r2, [r7, #3]
 8003344:	4611      	mov	r1, r2
 8003346:	4618      	mov	r0, r3
 8003348:	f002 fb72 	bl	8005a30 <USB_SetDevAddress>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
 8003354:	2300      	movs	r3, #0
 8003356:	4618      	mov	r0, r3
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <HAL_PCD_EP_Open>:
 800335e:	b580      	push	{r7, lr}
 8003360:	b084      	sub	sp, #16
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
 8003366:	4608      	mov	r0, r1
 8003368:	4611      	mov	r1, r2
 800336a:	461a      	mov	r2, r3
 800336c:	4603      	mov	r3, r0
 800336e:	70fb      	strb	r3, [r7, #3]
 8003370:	460b      	mov	r3, r1
 8003372:	803b      	strh	r3, [r7, #0]
 8003374:	4613      	mov	r3, r2
 8003376:	70bb      	strb	r3, [r7, #2]
 8003378:	2300      	movs	r3, #0
 800337a:	72fb      	strb	r3, [r7, #11]
 800337c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003380:	2b00      	cmp	r3, #0
 8003382:	da0f      	bge.n	80033a4 <HAL_PCD_EP_Open+0x46>
 8003384:	78fb      	ldrb	r3, [r7, #3]
 8003386:	f003 020f 	and.w	r2, r3, #15
 800338a:	4613      	mov	r3, r2
 800338c:	00db      	lsls	r3, r3, #3
 800338e:	4413      	add	r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	3338      	adds	r3, #56	@ 0x38
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	4413      	add	r3, r2
 8003398:	3304      	adds	r3, #4
 800339a:	60fb      	str	r3, [r7, #12]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2201      	movs	r2, #1
 80033a0:	705a      	strb	r2, [r3, #1]
 80033a2:	e00f      	b.n	80033c4 <HAL_PCD_EP_Open+0x66>
 80033a4:	78fb      	ldrb	r3, [r7, #3]
 80033a6:	f003 020f 	and.w	r2, r3, #15
 80033aa:	4613      	mov	r3, r2
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	4413      	add	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	4413      	add	r3, r2
 80033ba:	3304      	adds	r3, #4
 80033bc:	60fb      	str	r3, [r7, #12]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	705a      	strb	r2, [r3, #1]
 80033c4:	78fb      	ldrb	r3, [r7, #3]
 80033c6:	f003 030f 	and.w	r3, r3, #15
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	701a      	strb	r2, [r3, #0]
 80033d0:	883a      	ldrh	r2, [r7, #0]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	60da      	str	r2, [r3, #12]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	78ba      	ldrb	r2, [r7, #2]
 80033da:	711a      	strb	r2, [r3, #4]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	785b      	ldrb	r3, [r3, #1]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d004      	beq.n	80033ee <HAL_PCD_EP_Open+0x90>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	461a      	mov	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	811a      	strh	r2, [r3, #8]
 80033ee:	78bb      	ldrb	r3, [r7, #2]
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d102      	bne.n	80033fa <HAL_PCD_EP_Open+0x9c>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	715a      	strb	r2, [r3, #5]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003400:	2b01      	cmp	r3, #1
 8003402:	d101      	bne.n	8003408 <HAL_PCD_EP_Open+0xaa>
 8003404:	2302      	movs	r3, #2
 8003406:	e00e      	b.n	8003426 <HAL_PCD_EP_Open+0xc8>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68f9      	ldr	r1, [r7, #12]
 8003416:	4618      	mov	r0, r3
 8003418:	f001 fbf2 	bl	8004c00 <USB_ActivateEndpoint>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
 8003424:	7afb      	ldrb	r3, [r7, #11]
 8003426:	4618      	mov	r0, r3
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <HAL_PCD_EP_Close>:
 800342e:	b580      	push	{r7, lr}
 8003430:	b084      	sub	sp, #16
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
 8003436:	460b      	mov	r3, r1
 8003438:	70fb      	strb	r3, [r7, #3]
 800343a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800343e:	2b00      	cmp	r3, #0
 8003440:	da0f      	bge.n	8003462 <HAL_PCD_EP_Close+0x34>
 8003442:	78fb      	ldrb	r3, [r7, #3]
 8003444:	f003 020f 	and.w	r2, r3, #15
 8003448:	4613      	mov	r3, r2
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	4413      	add	r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	3338      	adds	r3, #56	@ 0x38
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	4413      	add	r3, r2
 8003456:	3304      	adds	r3, #4
 8003458:	60fb      	str	r3, [r7, #12]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2201      	movs	r2, #1
 800345e:	705a      	strb	r2, [r3, #1]
 8003460:	e00f      	b.n	8003482 <HAL_PCD_EP_Close+0x54>
 8003462:	78fb      	ldrb	r3, [r7, #3]
 8003464:	f003 020f 	and.w	r2, r3, #15
 8003468:	4613      	mov	r3, r2
 800346a:	00db      	lsls	r3, r3, #3
 800346c:	4413      	add	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	4413      	add	r3, r2
 8003478:	3304      	adds	r3, #4
 800347a:	60fb      	str	r3, [r7, #12]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	705a      	strb	r2, [r3, #1]
 8003482:	78fb      	ldrb	r3, [r7, #3]
 8003484:	f003 030f 	and.w	r3, r3, #15
 8003488:	b2da      	uxtb	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	701a      	strb	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003494:	2b01      	cmp	r3, #1
 8003496:	d101      	bne.n	800349c <HAL_PCD_EP_Close+0x6e>
 8003498:	2302      	movs	r3, #2
 800349a:	e00e      	b.n	80034ba <HAL_PCD_EP_Close+0x8c>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68f9      	ldr	r1, [r7, #12]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f001 fc30 	bl	8004d10 <USB_DeactivateEndpoint>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
 80034b8:	2300      	movs	r3, #0
 80034ba:	4618      	mov	r0, r3
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <HAL_PCD_EP_Receive>:
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b086      	sub	sp, #24
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	60f8      	str	r0, [r7, #12]
 80034ca:	607a      	str	r2, [r7, #4]
 80034cc:	603b      	str	r3, [r7, #0]
 80034ce:	460b      	mov	r3, r1
 80034d0:	72fb      	strb	r3, [r7, #11]
 80034d2:	7afb      	ldrb	r3, [r7, #11]
 80034d4:	f003 020f 	and.w	r2, r3, #15
 80034d8:	4613      	mov	r3, r2
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	4413      	add	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	4413      	add	r3, r2
 80034e8:	3304      	adds	r3, #4
 80034ea:	617b      	str	r3, [r7, #20]
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	611a      	str	r2, [r3, #16]
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	683a      	ldr	r2, [r7, #0]
 80034f6:	619a      	str	r2, [r3, #24]
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	2200      	movs	r2, #0
 80034fc:	621a      	str	r2, [r3, #32]
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	2200      	movs	r2, #0
 8003502:	705a      	strb	r2, [r3, #1]
 8003504:	7afb      	ldrb	r3, [r7, #11]
 8003506:	f003 030f 	and.w	r3, r3, #15
 800350a:	b2da      	uxtb	r2, r3
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	701a      	strb	r2, [r3, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	2b01      	cmp	r3, #1
 8003516:	d102      	bne.n	800351e <HAL_PCD_EP_Receive+0x5c>
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	615a      	str	r2, [r3, #20]
 800351e:	7afb      	ldrb	r3, [r7, #11]
 8003520:	f003 030f 	and.w	r3, r3, #15
 8003524:	2b00      	cmp	r3, #0
 8003526:	d109      	bne.n	800353c <HAL_PCD_EP_Receive+0x7a>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6818      	ldr	r0, [r3, #0]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	b2db      	uxtb	r3, r3
 8003532:	461a      	mov	r2, r3
 8003534:	6979      	ldr	r1, [r7, #20]
 8003536:	f001 ff0f 	bl	8005358 <USB_EP0StartXfer>
 800353a:	e008      	b.n	800354e <HAL_PCD_EP_Receive+0x8c>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6818      	ldr	r0, [r3, #0]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	b2db      	uxtb	r3, r3
 8003546:	461a      	mov	r2, r3
 8003548:	6979      	ldr	r1, [r7, #20]
 800354a:	f001 fcbd 	bl	8004ec8 <USB_EPStartXfer>
 800354e:	2300      	movs	r3, #0
 8003550:	4618      	mov	r0, r3
 8003552:	3718      	adds	r7, #24
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <HAL_PCD_EP_GetRxCount>:
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	460b      	mov	r3, r1
 8003562:	70fb      	strb	r3, [r7, #3]
 8003564:	78fb      	ldrb	r3, [r7, #3]
 8003566:	f003 020f 	and.w	r2, r3, #15
 800356a:	6879      	ldr	r1, [r7, #4]
 800356c:	4613      	mov	r3, r2
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	4413      	add	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	440b      	add	r3, r1
 8003576:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4618      	mov	r0, r3
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <HAL_PCD_EP_Transmit>:
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	607a      	str	r2, [r7, #4]
 8003592:	603b      	str	r3, [r7, #0]
 8003594:	460b      	mov	r3, r1
 8003596:	72fb      	strb	r3, [r7, #11]
 8003598:	7afb      	ldrb	r3, [r7, #11]
 800359a:	f003 020f 	and.w	r2, r3, #15
 800359e:	4613      	mov	r3, r2
 80035a0:	00db      	lsls	r3, r3, #3
 80035a2:	4413      	add	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	3338      	adds	r3, #56	@ 0x38
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	4413      	add	r3, r2
 80035ac:	3304      	adds	r3, #4
 80035ae:	617b      	str	r3, [r7, #20]
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	611a      	str	r2, [r3, #16]
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	619a      	str	r2, [r3, #24]
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	2200      	movs	r2, #0
 80035c0:	621a      	str	r2, [r3, #32]
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	2201      	movs	r2, #1
 80035c6:	705a      	strb	r2, [r3, #1]
 80035c8:	7afb      	ldrb	r3, [r7, #11]
 80035ca:	f003 030f 	and.w	r3, r3, #15
 80035ce:	b2da      	uxtb	r2, r3
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	701a      	strb	r2, [r3, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d102      	bne.n	80035e2 <HAL_PCD_EP_Transmit+0x5a>
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	615a      	str	r2, [r3, #20]
 80035e2:	7afb      	ldrb	r3, [r7, #11]
 80035e4:	f003 030f 	and.w	r3, r3, #15
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d109      	bne.n	8003600 <HAL_PCD_EP_Transmit+0x78>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6818      	ldr	r0, [r3, #0]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	461a      	mov	r2, r3
 80035f8:	6979      	ldr	r1, [r7, #20]
 80035fa:	f001 fead 	bl	8005358 <USB_EP0StartXfer>
 80035fe:	e008      	b.n	8003612 <HAL_PCD_EP_Transmit+0x8a>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6818      	ldr	r0, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	691b      	ldr	r3, [r3, #16]
 8003608:	b2db      	uxtb	r3, r3
 800360a:	461a      	mov	r2, r3
 800360c:	6979      	ldr	r1, [r7, #20]
 800360e:	f001 fc5b 	bl	8004ec8 <USB_EPStartXfer>
 8003612:	2300      	movs	r3, #0
 8003614:	4618      	mov	r0, r3
 8003616:	3718      	adds	r7, #24
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <HAL_PCD_EP_SetStall>:
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	460b      	mov	r3, r1
 8003626:	70fb      	strb	r3, [r7, #3]
 8003628:	78fb      	ldrb	r3, [r7, #3]
 800362a:	f003 020f 	and.w	r2, r3, #15
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	429a      	cmp	r2, r3
 8003634:	d901      	bls.n	800363a <HAL_PCD_EP_SetStall+0x1e>
 8003636:	2301      	movs	r3, #1
 8003638:	e050      	b.n	80036dc <HAL_PCD_EP_SetStall+0xc0>
 800363a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800363e:	2b00      	cmp	r3, #0
 8003640:	da0f      	bge.n	8003662 <HAL_PCD_EP_SetStall+0x46>
 8003642:	78fb      	ldrb	r3, [r7, #3]
 8003644:	f003 020f 	and.w	r2, r3, #15
 8003648:	4613      	mov	r3, r2
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	4413      	add	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	3338      	adds	r3, #56	@ 0x38
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	4413      	add	r3, r2
 8003656:	3304      	adds	r3, #4
 8003658:	60fb      	str	r3, [r7, #12]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2201      	movs	r2, #1
 800365e:	705a      	strb	r2, [r3, #1]
 8003660:	e00d      	b.n	800367e <HAL_PCD_EP_SetStall+0x62>
 8003662:	78fa      	ldrb	r2, [r7, #3]
 8003664:	4613      	mov	r3, r2
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	4413      	add	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	4413      	add	r3, r2
 8003674:	3304      	adds	r3, #4
 8003676:	60fb      	str	r3, [r7, #12]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	705a      	strb	r2, [r3, #1]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2201      	movs	r2, #1
 8003682:	709a      	strb	r2, [r3, #2]
 8003684:	78fb      	ldrb	r3, [r7, #3]
 8003686:	f003 030f 	and.w	r3, r3, #15
 800368a:	b2da      	uxtb	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	701a      	strb	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003696:	2b01      	cmp	r3, #1
 8003698:	d101      	bne.n	800369e <HAL_PCD_EP_SetStall+0x82>
 800369a:	2302      	movs	r3, #2
 800369c:	e01e      	b.n	80036dc <HAL_PCD_EP_SetStall+0xc0>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68f9      	ldr	r1, [r7, #12]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f002 f8eb 	bl	8005888 <USB_EPSetStall>
 80036b2:	78fb      	ldrb	r3, [r7, #3]
 80036b4:	f003 030f 	and.w	r3, r3, #15
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d10a      	bne.n	80036d2 <HAL_PCD_EP_SetStall+0xb6>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6818      	ldr	r0, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	b2d9      	uxtb	r1, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80036cc:	461a      	mov	r2, r3
 80036ce:	f002 fadb 	bl	8005c88 <USB_EP0_OutStart>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
 80036da:	2300      	movs	r3, #0
 80036dc:	4618      	mov	r0, r3
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <HAL_PCD_EP_ClrStall>:
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	460b      	mov	r3, r1
 80036ee:	70fb      	strb	r3, [r7, #3]
 80036f0:	78fb      	ldrb	r3, [r7, #3]
 80036f2:	f003 020f 	and.w	r2, r3, #15
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d901      	bls.n	8003702 <HAL_PCD_EP_ClrStall+0x1e>
 80036fe:	2301      	movs	r3, #1
 8003700:	e042      	b.n	8003788 <HAL_PCD_EP_ClrStall+0xa4>
 8003702:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003706:	2b00      	cmp	r3, #0
 8003708:	da0f      	bge.n	800372a <HAL_PCD_EP_ClrStall+0x46>
 800370a:	78fb      	ldrb	r3, [r7, #3]
 800370c:	f003 020f 	and.w	r2, r3, #15
 8003710:	4613      	mov	r3, r2
 8003712:	00db      	lsls	r3, r3, #3
 8003714:	4413      	add	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	3338      	adds	r3, #56	@ 0x38
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	4413      	add	r3, r2
 800371e:	3304      	adds	r3, #4
 8003720:	60fb      	str	r3, [r7, #12]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2201      	movs	r2, #1
 8003726:	705a      	strb	r2, [r3, #1]
 8003728:	e00f      	b.n	800374a <HAL_PCD_EP_ClrStall+0x66>
 800372a:	78fb      	ldrb	r3, [r7, #3]
 800372c:	f003 020f 	and.w	r2, r3, #15
 8003730:	4613      	mov	r3, r2
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	4413      	add	r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	4413      	add	r3, r2
 8003740:	3304      	adds	r3, #4
 8003742:	60fb      	str	r3, [r7, #12]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	705a      	strb	r2, [r3, #1]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	709a      	strb	r2, [r3, #2]
 8003750:	78fb      	ldrb	r3, [r7, #3]
 8003752:	f003 030f 	and.w	r3, r3, #15
 8003756:	b2da      	uxtb	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	701a      	strb	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003762:	2b01      	cmp	r3, #1
 8003764:	d101      	bne.n	800376a <HAL_PCD_EP_ClrStall+0x86>
 8003766:	2302      	movs	r3, #2
 8003768:	e00e      	b.n	8003788 <HAL_PCD_EP_ClrStall+0xa4>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68f9      	ldr	r1, [r7, #12]
 8003778:	4618      	mov	r0, r3
 800377a:	f002 f8f3 	bl	8005964 <USB_EPClearStall>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
 8003786:	2300      	movs	r3, #0
 8003788:	4618      	mov	r0, r3
 800378a:	3710      	adds	r7, #16
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <HAL_PCD_EP_Abort>:
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	460b      	mov	r3, r1
 800379a:	70fb      	strb	r3, [r7, #3]
 800379c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	da0c      	bge.n	80037be <HAL_PCD_EP_Abort+0x2e>
 80037a4:	78fb      	ldrb	r3, [r7, #3]
 80037a6:	f003 020f 	and.w	r2, r3, #15
 80037aa:	4613      	mov	r3, r2
 80037ac:	00db      	lsls	r3, r3, #3
 80037ae:	4413      	add	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	3338      	adds	r3, #56	@ 0x38
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	4413      	add	r3, r2
 80037b8:	3304      	adds	r3, #4
 80037ba:	60fb      	str	r3, [r7, #12]
 80037bc:	e00c      	b.n	80037d8 <HAL_PCD_EP_Abort+0x48>
 80037be:	78fb      	ldrb	r3, [r7, #3]
 80037c0:	f003 020f 	and.w	r2, r3, #15
 80037c4:	4613      	mov	r3, r2
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	4413      	add	r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	4413      	add	r3, r2
 80037d4:	3304      	adds	r3, #4
 80037d6:	60fb      	str	r3, [r7, #12]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68f9      	ldr	r1, [r7, #12]
 80037de:	4618      	mov	r0, r3
 80037e0:	f001 ff12 	bl	8005608 <USB_EPStopXfer>
 80037e4:	4603      	mov	r3, r0
 80037e6:	72fb      	strb	r3, [r7, #11]
 80037e8:	7afb      	ldrb	r3, [r7, #11]
 80037ea:	4618      	mov	r0, r3
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <PCD_WriteEmptyTxFifo>:
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b08a      	sub	sp, #40	@ 0x28
 80037f6:	af02      	add	r7, sp, #8
 80037f8:	6078      	str	r0, [r7, #4]
 80037fa:	6039      	str	r1, [r7, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	617b      	str	r3, [r7, #20]
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	613b      	str	r3, [r7, #16]
 8003806:	683a      	ldr	r2, [r7, #0]
 8003808:	4613      	mov	r3, r2
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	4413      	add	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	3338      	adds	r3, #56	@ 0x38
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	4413      	add	r3, r2
 8003816:	3304      	adds	r3, #4
 8003818:	60fb      	str	r3, [r7, #12]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6a1a      	ldr	r2, [r3, #32]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	429a      	cmp	r2, r3
 8003824:	d901      	bls.n	800382a <PCD_WriteEmptyTxFifo+0x38>
 8003826:	2301      	movs	r3, #1
 8003828:	e06c      	b.n	8003904 <PCD_WriteEmptyTxFifo+0x112>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	699a      	ldr	r2, [r3, #24]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	61fb      	str	r3, [r7, #28]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	69fa      	ldr	r2, [r7, #28]
 800383c:	429a      	cmp	r2, r3
 800383e:	d902      	bls.n	8003846 <PCD_WriteEmptyTxFifo+0x54>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	61fb      	str	r3, [r7, #28]
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	3303      	adds	r3, #3
 800384a:	089b      	lsrs	r3, r3, #2
 800384c:	61bb      	str	r3, [r7, #24]
 800384e:	e02b      	b.n	80038a8 <PCD_WriteEmptyTxFifo+0xb6>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	699a      	ldr	r2, [r3, #24]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6a1b      	ldr	r3, [r3, #32]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	61fb      	str	r3, [r7, #28]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	69fa      	ldr	r2, [r7, #28]
 8003862:	429a      	cmp	r2, r3
 8003864:	d902      	bls.n	800386c <PCD_WriteEmptyTxFifo+0x7a>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	61fb      	str	r3, [r7, #28]
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	3303      	adds	r3, #3
 8003870:	089b      	lsrs	r3, r3, #2
 8003872:	61bb      	str	r3, [r7, #24]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6919      	ldr	r1, [r3, #16]
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	b2da      	uxtb	r2, r3
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	b298      	uxth	r0, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	b2db      	uxtb	r3, r3
 8003886:	9300      	str	r3, [sp, #0]
 8003888:	4603      	mov	r3, r0
 800388a:	6978      	ldr	r0, [r7, #20]
 800388c:	f001 ff66 	bl	800575c <USB_WritePacket>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	691a      	ldr	r2, [r3, #16]
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	441a      	add	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	611a      	str	r2, [r3, #16]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6a1a      	ldr	r2, [r3, #32]
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	441a      	add	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	621a      	str	r2, [r3, #32]
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	015a      	lsls	r2, r3, #5
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	4413      	add	r3, r2
 80038b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d809      	bhi.n	80038d2 <PCD_WriteEmptyTxFifo+0xe0>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6a1a      	ldr	r2, [r3, #32]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d203      	bcs.n	80038d2 <PCD_WriteEmptyTxFifo+0xe0>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1be      	bne.n	8003850 <PCD_WriteEmptyTxFifo+0x5e>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	699a      	ldr	r2, [r3, #24]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d811      	bhi.n	8003902 <PCD_WriteEmptyTxFifo+0x110>
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	f003 030f 	and.w	r3, r3, #15
 80038e4:	2201      	movs	r2, #1
 80038e6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ea:	60bb      	str	r3, [r7, #8]
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	43db      	mvns	r3, r3
 80038f8:	6939      	ldr	r1, [r7, #16]
 80038fa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80038fe:	4013      	ands	r3, r2
 8003900:	634b      	str	r3, [r1, #52]	@ 0x34
 8003902:	2300      	movs	r3, #0
 8003904:	4618      	mov	r0, r3
 8003906:	3720      	adds	r7, #32
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <PCD_EP_OutXfrComplete_int>:
 800390c:	b580      	push	{r7, lr}
 800390e:	b088      	sub	sp, #32
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	61fb      	str	r3, [r7, #28]
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	61bb      	str	r3, [r7, #24]
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	333c      	adds	r3, #60	@ 0x3c
 8003924:	3304      	adds	r3, #4
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	617b      	str	r3, [r7, #20]
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	015a      	lsls	r2, r3, #5
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	4413      	add	r3, r2
 8003932:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	613b      	str	r3, [r7, #16]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d17b      	bne.n	8003a3a <PCD_EP_OutXfrComplete_int+0x12e>
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	f003 0308 	and.w	r3, r3, #8
 8003948:	2b00      	cmp	r3, #0
 800394a:	d015      	beq.n	8003978 <PCD_EP_OutXfrComplete_int+0x6c>
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	4a61      	ldr	r2, [pc, #388]	@ (8003ad4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003950:	4293      	cmp	r3, r2
 8003952:	f240 80b9 	bls.w	8003ac8 <PCD_EP_OutXfrComplete_int+0x1bc>
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800395c:	2b00      	cmp	r3, #0
 800395e:	f000 80b3 	beq.w	8003ac8 <PCD_EP_OutXfrComplete_int+0x1bc>
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	015a      	lsls	r2, r3, #5
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	4413      	add	r3, r2
 800396a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800396e:	461a      	mov	r2, r3
 8003970:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003974:	6093      	str	r3, [r2, #8]
 8003976:	e0a7      	b.n	8003ac8 <PCD_EP_OutXfrComplete_int+0x1bc>
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	f003 0320 	and.w	r3, r3, #32
 800397e:	2b00      	cmp	r3, #0
 8003980:	d009      	beq.n	8003996 <PCD_EP_OutXfrComplete_int+0x8a>
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	015a      	lsls	r2, r3, #5
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	4413      	add	r3, r2
 800398a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800398e:	461a      	mov	r2, r3
 8003990:	2320      	movs	r3, #32
 8003992:	6093      	str	r3, [r2, #8]
 8003994:	e098      	b.n	8003ac8 <PCD_EP_OutXfrComplete_int+0x1bc>
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800399c:	2b00      	cmp	r3, #0
 800399e:	f040 8093 	bne.w	8003ac8 <PCD_EP_OutXfrComplete_int+0x1bc>
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	4a4b      	ldr	r2, [pc, #300]	@ (8003ad4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d90f      	bls.n	80039ca <PCD_EP_OutXfrComplete_int+0xbe>
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00a      	beq.n	80039ca <PCD_EP_OutXfrComplete_int+0xbe>
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	015a      	lsls	r2, r3, #5
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	4413      	add	r3, r2
 80039bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039c0:	461a      	mov	r2, r3
 80039c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039c6:	6093      	str	r3, [r2, #8]
 80039c8:	e07e      	b.n	8003ac8 <PCD_EP_OutXfrComplete_int+0x1bc>
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	4613      	mov	r3, r2
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	4413      	add	r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	4413      	add	r3, r2
 80039dc:	3304      	adds	r3, #4
 80039de:	60fb      	str	r3, [r7, #12]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	69da      	ldr	r2, [r3, #28]
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	0159      	lsls	r1, r3, #5
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	440b      	add	r3, r1
 80039ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039f6:	1ad2      	subs	r2, r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	621a      	str	r2, [r3, #32]
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d114      	bne.n	8003a2c <PCD_EP_OutXfrComplete_int+0x120>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d109      	bne.n	8003a1e <PCD_EP_OutXfrComplete_int+0x112>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6818      	ldr	r0, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003a14:	461a      	mov	r2, r3
 8003a16:	2101      	movs	r1, #1
 8003a18:	f002 f936 	bl	8005c88 <USB_EP0_OutStart>
 8003a1c:	e006      	b.n	8003a2c <PCD_EP_OutXfrComplete_int+0x120>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	691a      	ldr	r2, [r3, #16]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	441a      	add	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	611a      	str	r2, [r3, #16]
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	4619      	mov	r1, r3
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f004 fbfa 	bl	800822c <HAL_PCD_DataOutStageCallback>
 8003a38:	e046      	b.n	8003ac8 <PCD_EP_OutXfrComplete_int+0x1bc>
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	4a26      	ldr	r2, [pc, #152]	@ (8003ad8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d124      	bne.n	8003a8c <PCD_EP_OutXfrComplete_int+0x180>
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00a      	beq.n	8003a62 <PCD_EP_OutXfrComplete_int+0x156>
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	015a      	lsls	r2, r3, #5
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	4413      	add	r3, r2
 8003a54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a58:	461a      	mov	r2, r3
 8003a5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a5e:	6093      	str	r3, [r2, #8]
 8003a60:	e032      	b.n	8003ac8 <PCD_EP_OutXfrComplete_int+0x1bc>
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	f003 0320 	and.w	r3, r3, #32
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d008      	beq.n	8003a7e <PCD_EP_OutXfrComplete_int+0x172>
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	015a      	lsls	r2, r3, #5
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	4413      	add	r3, r2
 8003a74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a78:	461a      	mov	r2, r3
 8003a7a:	2320      	movs	r3, #32
 8003a7c:	6093      	str	r3, [r2, #8]
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	4619      	mov	r1, r3
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f004 fbd1 	bl	800822c <HAL_PCD_DataOutStageCallback>
 8003a8a:	e01d      	b.n	8003ac8 <PCD_EP_OutXfrComplete_int+0x1bc>
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d114      	bne.n	8003abc <PCD_EP_OutXfrComplete_int+0x1b0>
 8003a92:	6879      	ldr	r1, [r7, #4]
 8003a94:	683a      	ldr	r2, [r7, #0]
 8003a96:	4613      	mov	r3, r2
 8003a98:	00db      	lsls	r3, r3, #3
 8003a9a:	4413      	add	r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	440b      	add	r3, r1
 8003aa0:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d108      	bne.n	8003abc <PCD_EP_OutXfrComplete_int+0x1b0>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6818      	ldr	r0, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	f002 f8e6 	bl	8005c88 <USB_EP0_OutStart>
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f004 fbb2 	bl	800822c <HAL_PCD_DataOutStageCallback>
 8003ac8:	2300      	movs	r3, #0
 8003aca:	4618      	mov	r0, r3
 8003acc:	3720      	adds	r7, #32
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	4f54300a 	.word	0x4f54300a
 8003ad8:	4f54310a 	.word	0x4f54310a

08003adc <PCD_EP_OutSetupPacket_int>:
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	617b      	str	r3, [r7, #20]
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	613b      	str	r3, [r7, #16]
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	333c      	adds	r3, #60	@ 0x3c
 8003af4:	3304      	adds	r3, #4
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	60fb      	str	r3, [r7, #12]
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	015a      	lsls	r2, r3, #5
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	4413      	add	r3, r2
 8003b02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	60bb      	str	r3, [r7, #8]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	4a15      	ldr	r2, [pc, #84]	@ (8003b64 <PCD_EP_OutSetupPacket_int+0x88>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d90e      	bls.n	8003b30 <PCD_EP_OutSetupPacket_int+0x54>
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d009      	beq.n	8003b30 <PCD_EP_OutSetupPacket_int+0x54>
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	015a      	lsls	r2, r3, #5
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	4413      	add	r3, r2
 8003b24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b28:	461a      	mov	r2, r3
 8003b2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b2e:	6093      	str	r3, [r2, #8]
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f004 fb69 	bl	8008208 <HAL_PCD_SetupStageCallback>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	4a0a      	ldr	r2, [pc, #40]	@ (8003b64 <PCD_EP_OutSetupPacket_int+0x88>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d90c      	bls.n	8003b58 <PCD_EP_OutSetupPacket_int+0x7c>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d108      	bne.n	8003b58 <PCD_EP_OutSetupPacket_int+0x7c>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6818      	ldr	r0, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003b50:	461a      	mov	r2, r3
 8003b52:	2101      	movs	r1, #1
 8003b54:	f002 f898 	bl	8005c88 <USB_EP0_OutStart>
 8003b58:	2300      	movs	r3, #0
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3718      	adds	r7, #24
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	4f54300a 	.word	0x4f54300a

08003b68 <HAL_PCDEx_SetTxFiFo>:
 8003b68:	b480      	push	{r7}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	460b      	mov	r3, r1
 8003b72:	70fb      	strb	r3, [r7, #3]
 8003b74:	4613      	mov	r3, r2
 8003b76:	803b      	strh	r3, [r7, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b7e:	60bb      	str	r3, [r7, #8]
 8003b80:	78fb      	ldrb	r3, [r7, #3]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d107      	bne.n	8003b96 <HAL_PCDEx_SetTxFiFo+0x2e>
 8003b86:	883b      	ldrh	r3, [r7, #0]
 8003b88:	0419      	lsls	r1, r3, #16
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68ba      	ldr	r2, [r7, #8]
 8003b90:	430a      	orrs	r2, r1
 8003b92:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b94:	e028      	b.n	8003be8 <HAL_PCDEx_SetTxFiFo+0x80>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b9c:	0c1b      	lsrs	r3, r3, #16
 8003b9e:	68ba      	ldr	r2, [r7, #8]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	60bb      	str	r3, [r7, #8]
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	73fb      	strb	r3, [r7, #15]
 8003ba8:	e00d      	b.n	8003bc6 <HAL_PCDEx_SetTxFiFo+0x5e>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	7bfb      	ldrb	r3, [r7, #15]
 8003bb0:	3340      	adds	r3, #64	@ 0x40
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	4413      	add	r3, r2
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	0c1b      	lsrs	r3, r3, #16
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	60bb      	str	r3, [r7, #8]
 8003bc0:	7bfb      	ldrb	r3, [r7, #15]
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	73fb      	strb	r3, [r7, #15]
 8003bc6:	7bfa      	ldrb	r2, [r7, #15]
 8003bc8:	78fb      	ldrb	r3, [r7, #3]
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d3ec      	bcc.n	8003baa <HAL_PCDEx_SetTxFiFo+0x42>
 8003bd0:	883b      	ldrh	r3, [r7, #0]
 8003bd2:	0418      	lsls	r0, r3, #16
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6819      	ldr	r1, [r3, #0]
 8003bd8:	78fb      	ldrb	r3, [r7, #3]
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	68ba      	ldr	r2, [r7, #8]
 8003bde:	4302      	orrs	r2, r0
 8003be0:	3340      	adds	r3, #64	@ 0x40
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	440b      	add	r3, r1
 8003be6:	605a      	str	r2, [r3, #4]
 8003be8:	2300      	movs	r3, #0
 8003bea:	4618      	mov	r0, r3
 8003bec:	3714      	adds	r7, #20
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr

08003bf6 <HAL_PCDEx_SetRxFiFo>:
 8003bf6:	b480      	push	{r7}
 8003bf8:	b083      	sub	sp, #12
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
 8003bfe:	460b      	mov	r3, r1
 8003c00:	807b      	strh	r3, [r7, #2]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	887a      	ldrh	r2, [r7, #2]
 8003c08:	625a      	str	r2, [r3, #36]	@ 0x24
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <HAL_PCDEx_LPM_Callback>:
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	460b      	mov	r3, r1
 8003c22:	70fb      	strb	r3, [r7, #3]
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <HAL_RCC_OscConfig>:
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_RCC_OscConfig+0x12>
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e267      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d075      	beq.n	8003d3a <HAL_RCC_OscConfig+0x10a>
 8003c4e:	4b88      	ldr	r3, [pc, #544]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f003 030c 	and.w	r3, r3, #12
 8003c56:	2b04      	cmp	r3, #4
 8003c58:	d00c      	beq.n	8003c74 <HAL_RCC_OscConfig+0x44>
 8003c5a:	4b85      	ldr	r3, [pc, #532]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f003 030c 	and.w	r3, r3, #12
 8003c62:	2b08      	cmp	r3, #8
 8003c64:	d112      	bne.n	8003c8c <HAL_RCC_OscConfig+0x5c>
 8003c66:	4b82      	ldr	r3, [pc, #520]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c72:	d10b      	bne.n	8003c8c <HAL_RCC_OscConfig+0x5c>
 8003c74:	4b7e      	ldr	r3, [pc, #504]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d05b      	beq.n	8003d38 <HAL_RCC_OscConfig+0x108>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d157      	bne.n	8003d38 <HAL_RCC_OscConfig+0x108>
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e242      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c94:	d106      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x74>
 8003c96:	4b76      	ldr	r3, [pc, #472]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a75      	ldr	r2, [pc, #468]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003c9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ca0:	6013      	str	r3, [r2, #0]
 8003ca2:	e01d      	b.n	8003ce0 <HAL_RCC_OscConfig+0xb0>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003cac:	d10c      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x98>
 8003cae:	4b70      	ldr	r3, [pc, #448]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a6f      	ldr	r2, [pc, #444]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003cb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cb8:	6013      	str	r3, [r2, #0]
 8003cba:	4b6d      	ldr	r3, [pc, #436]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a6c      	ldr	r2, [pc, #432]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003cc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cc4:	6013      	str	r3, [r2, #0]
 8003cc6:	e00b      	b.n	8003ce0 <HAL_RCC_OscConfig+0xb0>
 8003cc8:	4b69      	ldr	r3, [pc, #420]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a68      	ldr	r2, [pc, #416]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003cce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cd2:	6013      	str	r3, [r2, #0]
 8003cd4:	4b66      	ldr	r3, [pc, #408]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a65      	ldr	r2, [pc, #404]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003cda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cde:	6013      	str	r3, [r2, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d013      	beq.n	8003d10 <HAL_RCC_OscConfig+0xe0>
 8003ce8:	f7fd fe48 	bl	800197c <HAL_GetTick>
 8003cec:	6138      	str	r0, [r7, #16]
 8003cee:	e008      	b.n	8003d02 <HAL_RCC_OscConfig+0xd2>
 8003cf0:	f7fd fe44 	bl	800197c <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b64      	cmp	r3, #100	@ 0x64
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0xd2>
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e207      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
 8003d02:	4b5b      	ldr	r3, [pc, #364]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d0f0      	beq.n	8003cf0 <HAL_RCC_OscConfig+0xc0>
 8003d0e:	e014      	b.n	8003d3a <HAL_RCC_OscConfig+0x10a>
 8003d10:	f7fd fe34 	bl	800197c <HAL_GetTick>
 8003d14:	6138      	str	r0, [r7, #16]
 8003d16:	e008      	b.n	8003d2a <HAL_RCC_OscConfig+0xfa>
 8003d18:	f7fd fe30 	bl	800197c <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b64      	cmp	r3, #100	@ 0x64
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_OscConfig+0xfa>
 8003d26:	2303      	movs	r3, #3
 8003d28:	e1f3      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
 8003d2a:	4b51      	ldr	r3, [pc, #324]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1f0      	bne.n	8003d18 <HAL_RCC_OscConfig+0xe8>
 8003d36:	e000      	b.n	8003d3a <HAL_RCC_OscConfig+0x10a>
 8003d38:	bf00      	nop
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d063      	beq.n	8003e0e <HAL_RCC_OscConfig+0x1de>
 8003d46:	4b4a      	ldr	r3, [pc, #296]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f003 030c 	and.w	r3, r3, #12
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00b      	beq.n	8003d6a <HAL_RCC_OscConfig+0x13a>
 8003d52:	4b47      	ldr	r3, [pc, #284]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f003 030c 	and.w	r3, r3, #12
 8003d5a:	2b08      	cmp	r3, #8
 8003d5c:	d11c      	bne.n	8003d98 <HAL_RCC_OscConfig+0x168>
 8003d5e:	4b44      	ldr	r3, [pc, #272]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d116      	bne.n	8003d98 <HAL_RCC_OscConfig+0x168>
 8003d6a:	4b41      	ldr	r3, [pc, #260]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d005      	beq.n	8003d82 <HAL_RCC_OscConfig+0x152>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d001      	beq.n	8003d82 <HAL_RCC_OscConfig+0x152>
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e1c7      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
 8003d82:	4b3b      	ldr	r3, [pc, #236]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	00db      	lsls	r3, r3, #3
 8003d90:	4937      	ldr	r1, [pc, #220]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	600b      	str	r3, [r1, #0]
 8003d96:	e03a      	b.n	8003e0e <HAL_RCC_OscConfig+0x1de>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d020      	beq.n	8003de2 <HAL_RCC_OscConfig+0x1b2>
 8003da0:	4b34      	ldr	r3, [pc, #208]	@ (8003e74 <HAL_RCC_OscConfig+0x244>)
 8003da2:	2201      	movs	r2, #1
 8003da4:	601a      	str	r2, [r3, #0]
 8003da6:	f7fd fde9 	bl	800197c <HAL_GetTick>
 8003daa:	6138      	str	r0, [r7, #16]
 8003dac:	e008      	b.n	8003dc0 <HAL_RCC_OscConfig+0x190>
 8003dae:	f7fd fde5 	bl	800197c <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d901      	bls.n	8003dc0 <HAL_RCC_OscConfig+0x190>
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e1a8      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
 8003dc0:	4b2b      	ldr	r3, [pc, #172]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d0f0      	beq.n	8003dae <HAL_RCC_OscConfig+0x17e>
 8003dcc:	4b28      	ldr	r3, [pc, #160]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	00db      	lsls	r3, r3, #3
 8003dda:	4925      	ldr	r1, [pc, #148]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	600b      	str	r3, [r1, #0]
 8003de0:	e015      	b.n	8003e0e <HAL_RCC_OscConfig+0x1de>
 8003de2:	4b24      	ldr	r3, [pc, #144]	@ (8003e74 <HAL_RCC_OscConfig+0x244>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	601a      	str	r2, [r3, #0]
 8003de8:	f7fd fdc8 	bl	800197c <HAL_GetTick>
 8003dec:	6138      	str	r0, [r7, #16]
 8003dee:	e008      	b.n	8003e02 <HAL_RCC_OscConfig+0x1d2>
 8003df0:	f7fd fdc4 	bl	800197c <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0x1d2>
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e187      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
 8003e02:	4b1b      	ldr	r3, [pc, #108]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1f0      	bne.n	8003df0 <HAL_RCC_OscConfig+0x1c0>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0308 	and.w	r3, r3, #8
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d036      	beq.n	8003e88 <HAL_RCC_OscConfig+0x258>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d016      	beq.n	8003e50 <HAL_RCC_OscConfig+0x220>
 8003e22:	4b15      	ldr	r3, [pc, #84]	@ (8003e78 <HAL_RCC_OscConfig+0x248>)
 8003e24:	2201      	movs	r2, #1
 8003e26:	601a      	str	r2, [r3, #0]
 8003e28:	f7fd fda8 	bl	800197c <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]
 8003e2e:	e008      	b.n	8003e42 <HAL_RCC_OscConfig+0x212>
 8003e30:	f7fd fda4 	bl	800197c <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0x212>
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e167      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
 8003e42:	4b0b      	ldr	r3, [pc, #44]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003e44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d0f0      	beq.n	8003e30 <HAL_RCC_OscConfig+0x200>
 8003e4e:	e01b      	b.n	8003e88 <HAL_RCC_OscConfig+0x258>
 8003e50:	4b09      	ldr	r3, [pc, #36]	@ (8003e78 <HAL_RCC_OscConfig+0x248>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	601a      	str	r2, [r3, #0]
 8003e56:	f7fd fd91 	bl	800197c <HAL_GetTick>
 8003e5a:	6138      	str	r0, [r7, #16]
 8003e5c:	e00e      	b.n	8003e7c <HAL_RCC_OscConfig+0x24c>
 8003e5e:	f7fd fd8d 	bl	800197c <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d907      	bls.n	8003e7c <HAL_RCC_OscConfig+0x24c>
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e150      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
 8003e70:	40023800 	.word	0x40023800
 8003e74:	42470000 	.word	0x42470000
 8003e78:	42470e80 	.word	0x42470e80
 8003e7c:	4b88      	ldr	r3, [pc, #544]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003e7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e80:	f003 0302 	and.w	r3, r3, #2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1ea      	bne.n	8003e5e <HAL_RCC_OscConfig+0x22e>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0304 	and.w	r3, r3, #4
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f000 8097 	beq.w	8003fc4 <HAL_RCC_OscConfig+0x394>
 8003e96:	2300      	movs	r3, #0
 8003e98:	75fb      	strb	r3, [r7, #23]
 8003e9a:	4b81      	ldr	r3, [pc, #516]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10f      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x296>
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	60bb      	str	r3, [r7, #8]
 8003eaa:	4b7d      	ldr	r3, [pc, #500]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eae:	4a7c      	ldr	r2, [pc, #496]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003eb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003eb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003eb6:	4b7a      	ldr	r3, [pc, #488]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ebe:	60bb      	str	r3, [r7, #8]
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	75fb      	strb	r3, [r7, #23]
 8003ec6:	4b77      	ldr	r3, [pc, #476]	@ (80040a4 <HAL_RCC_OscConfig+0x474>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d118      	bne.n	8003f04 <HAL_RCC_OscConfig+0x2d4>
 8003ed2:	4b74      	ldr	r3, [pc, #464]	@ (80040a4 <HAL_RCC_OscConfig+0x474>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a73      	ldr	r2, [pc, #460]	@ (80040a4 <HAL_RCC_OscConfig+0x474>)
 8003ed8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003edc:	6013      	str	r3, [r2, #0]
 8003ede:	f7fd fd4d 	bl	800197c <HAL_GetTick>
 8003ee2:	6138      	str	r0, [r7, #16]
 8003ee4:	e008      	b.n	8003ef8 <HAL_RCC_OscConfig+0x2c8>
 8003ee6:	f7fd fd49 	bl	800197c <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCC_OscConfig+0x2c8>
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e10c      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
 8003ef8:	4b6a      	ldr	r3, [pc, #424]	@ (80040a4 <HAL_RCC_OscConfig+0x474>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d0f0      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x2b6>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d106      	bne.n	8003f1a <HAL_RCC_OscConfig+0x2ea>
 8003f0c:	4b64      	ldr	r3, [pc, #400]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f10:	4a63      	ldr	r2, [pc, #396]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f12:	f043 0301 	orr.w	r3, r3, #1
 8003f16:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f18:	e01c      	b.n	8003f54 <HAL_RCC_OscConfig+0x324>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	2b05      	cmp	r3, #5
 8003f20:	d10c      	bne.n	8003f3c <HAL_RCC_OscConfig+0x30c>
 8003f22:	4b5f      	ldr	r3, [pc, #380]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f26:	4a5e      	ldr	r2, [pc, #376]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f28:	f043 0304 	orr.w	r3, r3, #4
 8003f2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f2e:	4b5c      	ldr	r3, [pc, #368]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f32:	4a5b      	ldr	r2, [pc, #364]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f34:	f043 0301 	orr.w	r3, r3, #1
 8003f38:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f3a:	e00b      	b.n	8003f54 <HAL_RCC_OscConfig+0x324>
 8003f3c:	4b58      	ldr	r3, [pc, #352]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f40:	4a57      	ldr	r2, [pc, #348]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f42:	f023 0301 	bic.w	r3, r3, #1
 8003f46:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f48:	4b55      	ldr	r3, [pc, #340]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f4c:	4a54      	ldr	r2, [pc, #336]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f4e:	f023 0304 	bic.w	r3, r3, #4
 8003f52:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d015      	beq.n	8003f88 <HAL_RCC_OscConfig+0x358>
 8003f5c:	f7fd fd0e 	bl	800197c <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]
 8003f62:	e00a      	b.n	8003f7a <HAL_RCC_OscConfig+0x34a>
 8003f64:	f7fd fd0a 	bl	800197c <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x34a>
 8003f76:	2303      	movs	r3, #3
 8003f78:	e0cb      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
 8003f7a:	4b49      	ldr	r3, [pc, #292]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d0ee      	beq.n	8003f64 <HAL_RCC_OscConfig+0x334>
 8003f86:	e014      	b.n	8003fb2 <HAL_RCC_OscConfig+0x382>
 8003f88:	f7fd fcf8 	bl	800197c <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]
 8003f8e:	e00a      	b.n	8003fa6 <HAL_RCC_OscConfig+0x376>
 8003f90:	f7fd fcf4 	bl	800197c <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x376>
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e0b5      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
 8003fa6:	4b3e      	ldr	r3, [pc, #248]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003fa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1ee      	bne.n	8003f90 <HAL_RCC_OscConfig+0x360>
 8003fb2:	7dfb      	ldrb	r3, [r7, #23]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d105      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x394>
 8003fb8:	4b39      	ldr	r3, [pc, #228]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fbc:	4a38      	ldr	r2, [pc, #224]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003fbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fc2:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f000 80a1 	beq.w	8004110 <HAL_RCC_OscConfig+0x4e0>
 8003fce:	4b34      	ldr	r3, [pc, #208]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f003 030c 	and.w	r3, r3, #12
 8003fd6:	2b08      	cmp	r3, #8
 8003fd8:	d05c      	beq.n	8004094 <HAL_RCC_OscConfig+0x464>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d141      	bne.n	8004066 <HAL_RCC_OscConfig+0x436>
 8003fe2:	4b31      	ldr	r3, [pc, #196]	@ (80040a8 <HAL_RCC_OscConfig+0x478>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	601a      	str	r2, [r3, #0]
 8003fe8:	f7fd fcc8 	bl	800197c <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0x3d2>
 8003ff0:	f7fd fcc4 	bl	800197c <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0x3d2>
 8003ffe:	2303      	movs	r3, #3
 8004000:	e087      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
 8004002:	4b27      	ldr	r3, [pc, #156]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1f0      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x3c0>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	69da      	ldr	r2, [r3, #28]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	431a      	orrs	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401c:	019b      	lsls	r3, r3, #6
 800401e:	431a      	orrs	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004024:	085b      	lsrs	r3, r3, #1
 8004026:	3b01      	subs	r3, #1
 8004028:	041b      	lsls	r3, r3, #16
 800402a:	431a      	orrs	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004030:	061b      	lsls	r3, r3, #24
 8004032:	491b      	ldr	r1, [pc, #108]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8004034:	4313      	orrs	r3, r2
 8004036:	604b      	str	r3, [r1, #4]
 8004038:	4b1b      	ldr	r3, [pc, #108]	@ (80040a8 <HAL_RCC_OscConfig+0x478>)
 800403a:	2201      	movs	r2, #1
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	f7fd fc9d 	bl	800197c <HAL_GetTick>
 8004042:	6138      	str	r0, [r7, #16]
 8004044:	e008      	b.n	8004058 <HAL_RCC_OscConfig+0x428>
 8004046:	f7fd fc99 	bl	800197c <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b02      	cmp	r3, #2
 8004052:	d901      	bls.n	8004058 <HAL_RCC_OscConfig+0x428>
 8004054:	2303      	movs	r3, #3
 8004056:	e05c      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
 8004058:	4b11      	ldr	r3, [pc, #68]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d0f0      	beq.n	8004046 <HAL_RCC_OscConfig+0x416>
 8004064:	e054      	b.n	8004110 <HAL_RCC_OscConfig+0x4e0>
 8004066:	4b10      	ldr	r3, [pc, #64]	@ (80040a8 <HAL_RCC_OscConfig+0x478>)
 8004068:	2200      	movs	r2, #0
 800406a:	601a      	str	r2, [r3, #0]
 800406c:	f7fd fc86 	bl	800197c <HAL_GetTick>
 8004070:	6138      	str	r0, [r7, #16]
 8004072:	e008      	b.n	8004086 <HAL_RCC_OscConfig+0x456>
 8004074:	f7fd fc82 	bl	800197c <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b02      	cmp	r3, #2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0x456>
 8004082:	2303      	movs	r3, #3
 8004084:	e045      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
 8004086:	4b06      	ldr	r3, [pc, #24]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1f0      	bne.n	8004074 <HAL_RCC_OscConfig+0x444>
 8004092:	e03d      	b.n	8004110 <HAL_RCC_OscConfig+0x4e0>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d107      	bne.n	80040ac <HAL_RCC_OscConfig+0x47c>
 800409c:	2301      	movs	r3, #1
 800409e:	e038      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
 80040a0:	40023800 	.word	0x40023800
 80040a4:	40007000 	.word	0x40007000
 80040a8:	42470060 	.word	0x42470060
 80040ac:	4b1b      	ldr	r3, [pc, #108]	@ (800411c <HAL_RCC_OscConfig+0x4ec>)
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	60fb      	str	r3, [r7, #12]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d028      	beq.n	800410c <HAL_RCC_OscConfig+0x4dc>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	69db      	ldr	r3, [r3, #28]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d121      	bne.n	800410c <HAL_RCC_OscConfig+0x4dc>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d11a      	bne.n	800410c <HAL_RCC_OscConfig+0x4dc>
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80040dc:	4013      	ands	r3, r2
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80040e2:	0192      	lsls	r2, r2, #6
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d111      	bne.n	800410c <HAL_RCC_OscConfig+0x4dc>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040f2:	085b      	lsrs	r3, r3, #1
 80040f4:	3b01      	subs	r3, #1
 80040f6:	041b      	lsls	r3, r3, #16
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d107      	bne.n	800410c <HAL_RCC_OscConfig+0x4dc>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004106:	061b      	lsls	r3, r3, #24
 8004108:	429a      	cmp	r2, r3
 800410a:	d001      	beq.n	8004110 <HAL_RCC_OscConfig+0x4e0>
 800410c:	2301      	movs	r3, #1
 800410e:	e000      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
 8004110:	2300      	movs	r3, #0
 8004112:	4618      	mov	r0, r3
 8004114:	3718      	adds	r7, #24
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	40023800 	.word	0x40023800

08004120 <HAL_RCC_ClockConfig>:
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d101      	bne.n	8004134 <HAL_RCC_ClockConfig+0x14>
 8004130:	2301      	movs	r3, #1
 8004132:	e0cc      	b.n	80042ce <HAL_RCC_ClockConfig+0x1ae>
 8004134:	4b68      	ldr	r3, [pc, #416]	@ (80042d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0307 	and.w	r3, r3, #7
 800413c:	683a      	ldr	r2, [r7, #0]
 800413e:	429a      	cmp	r2, r3
 8004140:	d90c      	bls.n	800415c <HAL_RCC_ClockConfig+0x3c>
 8004142:	4b65      	ldr	r3, [pc, #404]	@ (80042d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	b2d2      	uxtb	r2, r2
 8004148:	701a      	strb	r2, [r3, #0]
 800414a:	4b63      	ldr	r3, [pc, #396]	@ (80042d8 <HAL_RCC_ClockConfig+0x1b8>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0307 	and.w	r3, r3, #7
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	429a      	cmp	r2, r3
 8004156:	d001      	beq.n	800415c <HAL_RCC_ClockConfig+0x3c>
 8004158:	2301      	movs	r3, #1
 800415a:	e0b8      	b.n	80042ce <HAL_RCC_ClockConfig+0x1ae>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d020      	beq.n	80041aa <HAL_RCC_ClockConfig+0x8a>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0304 	and.w	r3, r3, #4
 8004170:	2b00      	cmp	r3, #0
 8004172:	d005      	beq.n	8004180 <HAL_RCC_ClockConfig+0x60>
 8004174:	4b59      	ldr	r3, [pc, #356]	@ (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	4a58      	ldr	r2, [pc, #352]	@ (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 800417a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800417e:	6093      	str	r3, [r2, #8]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0308 	and.w	r3, r3, #8
 8004188:	2b00      	cmp	r3, #0
 800418a:	d005      	beq.n	8004198 <HAL_RCC_ClockConfig+0x78>
 800418c:	4b53      	ldr	r3, [pc, #332]	@ (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	4a52      	ldr	r2, [pc, #328]	@ (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 8004192:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004196:	6093      	str	r3, [r2, #8]
 8004198:	4b50      	ldr	r3, [pc, #320]	@ (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	494d      	ldr	r1, [pc, #308]	@ (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	608b      	str	r3, [r1, #8]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d044      	beq.n	8004240 <HAL_RCC_ClockConfig+0x120>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d107      	bne.n	80041ce <HAL_RCC_ClockConfig+0xae>
 80041be:	4b47      	ldr	r3, [pc, #284]	@ (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d119      	bne.n	80041fe <HAL_RCC_ClockConfig+0xde>
 80041ca:	2301      	movs	r3, #1
 80041cc:	e07f      	b.n	80042ce <HAL_RCC_ClockConfig+0x1ae>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d003      	beq.n	80041de <HAL_RCC_ClockConfig+0xbe>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	2b03      	cmp	r3, #3
 80041dc:	d107      	bne.n	80041ee <HAL_RCC_ClockConfig+0xce>
 80041de:	4b3f      	ldr	r3, [pc, #252]	@ (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d109      	bne.n	80041fe <HAL_RCC_ClockConfig+0xde>
 80041ea:	2301      	movs	r3, #1
 80041ec:	e06f      	b.n	80042ce <HAL_RCC_ClockConfig+0x1ae>
 80041ee:	4b3b      	ldr	r3, [pc, #236]	@ (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d101      	bne.n	80041fe <HAL_RCC_ClockConfig+0xde>
 80041fa:	2301      	movs	r3, #1
 80041fc:	e067      	b.n	80042ce <HAL_RCC_ClockConfig+0x1ae>
 80041fe:	4b37      	ldr	r3, [pc, #220]	@ (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f023 0203 	bic.w	r2, r3, #3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	4934      	ldr	r1, [pc, #208]	@ (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 800420c:	4313      	orrs	r3, r2
 800420e:	608b      	str	r3, [r1, #8]
 8004210:	f7fd fbb4 	bl	800197c <HAL_GetTick>
 8004214:	60f8      	str	r0, [r7, #12]
 8004216:	e00a      	b.n	800422e <HAL_RCC_ClockConfig+0x10e>
 8004218:	f7fd fbb0 	bl	800197c <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004226:	4293      	cmp	r3, r2
 8004228:	d901      	bls.n	800422e <HAL_RCC_ClockConfig+0x10e>
 800422a:	2303      	movs	r3, #3
 800422c:	e04f      	b.n	80042ce <HAL_RCC_ClockConfig+0x1ae>
 800422e:	4b2b      	ldr	r3, [pc, #172]	@ (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f003 020c 	and.w	r2, r3, #12
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	429a      	cmp	r2, r3
 800423e:	d1eb      	bne.n	8004218 <HAL_RCC_ClockConfig+0xf8>
 8004240:	4b25      	ldr	r3, [pc, #148]	@ (80042d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0307 	and.w	r3, r3, #7
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	429a      	cmp	r2, r3
 800424c:	d20c      	bcs.n	8004268 <HAL_RCC_ClockConfig+0x148>
 800424e:	4b22      	ldr	r3, [pc, #136]	@ (80042d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	b2d2      	uxtb	r2, r2
 8004254:	701a      	strb	r2, [r3, #0]
 8004256:	4b20      	ldr	r3, [pc, #128]	@ (80042d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0307 	and.w	r3, r3, #7
 800425e:	683a      	ldr	r2, [r7, #0]
 8004260:	429a      	cmp	r2, r3
 8004262:	d001      	beq.n	8004268 <HAL_RCC_ClockConfig+0x148>
 8004264:	2301      	movs	r3, #1
 8004266:	e032      	b.n	80042ce <HAL_RCC_ClockConfig+0x1ae>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0304 	and.w	r3, r3, #4
 8004270:	2b00      	cmp	r3, #0
 8004272:	d008      	beq.n	8004286 <HAL_RCC_ClockConfig+0x166>
 8004274:	4b19      	ldr	r3, [pc, #100]	@ (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	4916      	ldr	r1, [pc, #88]	@ (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 8004282:	4313      	orrs	r3, r2
 8004284:	608b      	str	r3, [r1, #8]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0308 	and.w	r3, r3, #8
 800428e:	2b00      	cmp	r3, #0
 8004290:	d009      	beq.n	80042a6 <HAL_RCC_ClockConfig+0x186>
 8004292:	4b12      	ldr	r3, [pc, #72]	@ (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	00db      	lsls	r3, r3, #3
 80042a0:	490e      	ldr	r1, [pc, #56]	@ (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	608b      	str	r3, [r1, #8]
 80042a6:	f000 f821 	bl	80042ec <HAL_RCC_GetSysClockFreq>
 80042aa:	4602      	mov	r2, r0
 80042ac:	4b0b      	ldr	r3, [pc, #44]	@ (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	091b      	lsrs	r3, r3, #4
 80042b2:	f003 030f 	and.w	r3, r3, #15
 80042b6:	490a      	ldr	r1, [pc, #40]	@ (80042e0 <HAL_RCC_ClockConfig+0x1c0>)
 80042b8:	5ccb      	ldrb	r3, [r1, r3]
 80042ba:	fa22 f303 	lsr.w	r3, r2, r3
 80042be:	4a09      	ldr	r2, [pc, #36]	@ (80042e4 <HAL_RCC_ClockConfig+0x1c4>)
 80042c0:	6013      	str	r3, [r2, #0]
 80042c2:	4b09      	ldr	r3, [pc, #36]	@ (80042e8 <HAL_RCC_ClockConfig+0x1c8>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7fd fb14 	bl	80018f4 <HAL_InitTick>
 80042cc:	2300      	movs	r3, #0
 80042ce:	4618      	mov	r0, r3
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	40023c00 	.word	0x40023c00
 80042dc:	40023800 	.word	0x40023800
 80042e0:	08009290 	.word	0x08009290
 80042e4:	20000000 	.word	0x20000000
 80042e8:	20000004 	.word	0x20000004

080042ec <HAL_RCC_GetSysClockFreq>:
 80042ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042f0:	b094      	sub	sp, #80	@ 0x50
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	2300      	movs	r3, #0
 80042f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80042f8:	2300      	movs	r3, #0
 80042fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042fc:	2300      	movs	r3, #0
 80042fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8004300:	2300      	movs	r3, #0
 8004302:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004304:	4b79      	ldr	r3, [pc, #484]	@ (80044ec <HAL_RCC_GetSysClockFreq+0x200>)
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f003 030c 	and.w	r3, r3, #12
 800430c:	2b08      	cmp	r3, #8
 800430e:	d00d      	beq.n	800432c <HAL_RCC_GetSysClockFreq+0x40>
 8004310:	2b08      	cmp	r3, #8
 8004312:	f200 80e1 	bhi.w	80044d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004316:	2b00      	cmp	r3, #0
 8004318:	d002      	beq.n	8004320 <HAL_RCC_GetSysClockFreq+0x34>
 800431a:	2b04      	cmp	r3, #4
 800431c:	d003      	beq.n	8004326 <HAL_RCC_GetSysClockFreq+0x3a>
 800431e:	e0db      	b.n	80044d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004320:	4b73      	ldr	r3, [pc, #460]	@ (80044f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004322:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004324:	e0db      	b.n	80044de <HAL_RCC_GetSysClockFreq+0x1f2>
 8004326:	4b73      	ldr	r3, [pc, #460]	@ (80044f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004328:	64bb      	str	r3, [r7, #72]	@ 0x48
 800432a:	e0d8      	b.n	80044de <HAL_RCC_GetSysClockFreq+0x1f2>
 800432c:	4b6f      	ldr	r3, [pc, #444]	@ (80044ec <HAL_RCC_GetSysClockFreq+0x200>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004334:	647b      	str	r3, [r7, #68]	@ 0x44
 8004336:	4b6d      	ldr	r3, [pc, #436]	@ (80044ec <HAL_RCC_GetSysClockFreq+0x200>)
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d063      	beq.n	800440a <HAL_RCC_GetSysClockFreq+0x11e>
 8004342:	4b6a      	ldr	r3, [pc, #424]	@ (80044ec <HAL_RCC_GetSysClockFreq+0x200>)
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	099b      	lsrs	r3, r3, #6
 8004348:	2200      	movs	r2, #0
 800434a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800434c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800434e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004350:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004354:	633b      	str	r3, [r7, #48]	@ 0x30
 8004356:	2300      	movs	r3, #0
 8004358:	637b      	str	r3, [r7, #52]	@ 0x34
 800435a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800435e:	4622      	mov	r2, r4
 8004360:	462b      	mov	r3, r5
 8004362:	f04f 0000 	mov.w	r0, #0
 8004366:	f04f 0100 	mov.w	r1, #0
 800436a:	0159      	lsls	r1, r3, #5
 800436c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004370:	0150      	lsls	r0, r2, #5
 8004372:	4602      	mov	r2, r0
 8004374:	460b      	mov	r3, r1
 8004376:	4621      	mov	r1, r4
 8004378:	1a51      	subs	r1, r2, r1
 800437a:	6139      	str	r1, [r7, #16]
 800437c:	4629      	mov	r1, r5
 800437e:	eb63 0301 	sbc.w	r3, r3, r1
 8004382:	617b      	str	r3, [r7, #20]
 8004384:	f04f 0200 	mov.w	r2, #0
 8004388:	f04f 0300 	mov.w	r3, #0
 800438c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004390:	4659      	mov	r1, fp
 8004392:	018b      	lsls	r3, r1, #6
 8004394:	4651      	mov	r1, sl
 8004396:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800439a:	4651      	mov	r1, sl
 800439c:	018a      	lsls	r2, r1, #6
 800439e:	4651      	mov	r1, sl
 80043a0:	ebb2 0801 	subs.w	r8, r2, r1
 80043a4:	4659      	mov	r1, fp
 80043a6:	eb63 0901 	sbc.w	r9, r3, r1
 80043aa:	f04f 0200 	mov.w	r2, #0
 80043ae:	f04f 0300 	mov.w	r3, #0
 80043b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043be:	4690      	mov	r8, r2
 80043c0:	4699      	mov	r9, r3
 80043c2:	4623      	mov	r3, r4
 80043c4:	eb18 0303 	adds.w	r3, r8, r3
 80043c8:	60bb      	str	r3, [r7, #8]
 80043ca:	462b      	mov	r3, r5
 80043cc:	eb49 0303 	adc.w	r3, r9, r3
 80043d0:	60fb      	str	r3, [r7, #12]
 80043d2:	f04f 0200 	mov.w	r2, #0
 80043d6:	f04f 0300 	mov.w	r3, #0
 80043da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80043de:	4629      	mov	r1, r5
 80043e0:	024b      	lsls	r3, r1, #9
 80043e2:	4621      	mov	r1, r4
 80043e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80043e8:	4621      	mov	r1, r4
 80043ea:	024a      	lsls	r2, r1, #9
 80043ec:	4610      	mov	r0, r2
 80043ee:	4619      	mov	r1, r3
 80043f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043f2:	2200      	movs	r2, #0
 80043f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80043f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80043fc:	f7fb ff40 	bl	8000280 <__aeabi_uldivmod>
 8004400:	4602      	mov	r2, r0
 8004402:	460b      	mov	r3, r1
 8004404:	4613      	mov	r3, r2
 8004406:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004408:	e058      	b.n	80044bc <HAL_RCC_GetSysClockFreq+0x1d0>
 800440a:	4b38      	ldr	r3, [pc, #224]	@ (80044ec <HAL_RCC_GetSysClockFreq+0x200>)
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	099b      	lsrs	r3, r3, #6
 8004410:	2200      	movs	r2, #0
 8004412:	4618      	mov	r0, r3
 8004414:	4611      	mov	r1, r2
 8004416:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800441a:	623b      	str	r3, [r7, #32]
 800441c:	2300      	movs	r3, #0
 800441e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004420:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004424:	4642      	mov	r2, r8
 8004426:	464b      	mov	r3, r9
 8004428:	f04f 0000 	mov.w	r0, #0
 800442c:	f04f 0100 	mov.w	r1, #0
 8004430:	0159      	lsls	r1, r3, #5
 8004432:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004436:	0150      	lsls	r0, r2, #5
 8004438:	4602      	mov	r2, r0
 800443a:	460b      	mov	r3, r1
 800443c:	4641      	mov	r1, r8
 800443e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004442:	4649      	mov	r1, r9
 8004444:	eb63 0b01 	sbc.w	fp, r3, r1
 8004448:	f04f 0200 	mov.w	r2, #0
 800444c:	f04f 0300 	mov.w	r3, #0
 8004450:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004454:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004458:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800445c:	ebb2 040a 	subs.w	r4, r2, sl
 8004460:	eb63 050b 	sbc.w	r5, r3, fp
 8004464:	f04f 0200 	mov.w	r2, #0
 8004468:	f04f 0300 	mov.w	r3, #0
 800446c:	00eb      	lsls	r3, r5, #3
 800446e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004472:	00e2      	lsls	r2, r4, #3
 8004474:	4614      	mov	r4, r2
 8004476:	461d      	mov	r5, r3
 8004478:	4643      	mov	r3, r8
 800447a:	18e3      	adds	r3, r4, r3
 800447c:	603b      	str	r3, [r7, #0]
 800447e:	464b      	mov	r3, r9
 8004480:	eb45 0303 	adc.w	r3, r5, r3
 8004484:	607b      	str	r3, [r7, #4]
 8004486:	f04f 0200 	mov.w	r2, #0
 800448a:	f04f 0300 	mov.w	r3, #0
 800448e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004492:	4629      	mov	r1, r5
 8004494:	028b      	lsls	r3, r1, #10
 8004496:	4621      	mov	r1, r4
 8004498:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800449c:	4621      	mov	r1, r4
 800449e:	028a      	lsls	r2, r1, #10
 80044a0:	4610      	mov	r0, r2
 80044a2:	4619      	mov	r1, r3
 80044a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044a6:	2200      	movs	r2, #0
 80044a8:	61bb      	str	r3, [r7, #24]
 80044aa:	61fa      	str	r2, [r7, #28]
 80044ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044b0:	f7fb fee6 	bl	8000280 <__aeabi_uldivmod>
 80044b4:	4602      	mov	r2, r0
 80044b6:	460b      	mov	r3, r1
 80044b8:	4613      	mov	r3, r2
 80044ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044bc:	4b0b      	ldr	r3, [pc, #44]	@ (80044ec <HAL_RCC_GetSysClockFreq+0x200>)
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	0c1b      	lsrs	r3, r3, #16
 80044c2:	f003 0303 	and.w	r3, r3, #3
 80044c6:	3301      	adds	r3, #1
 80044c8:	005b      	lsls	r3, r3, #1
 80044ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80044cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80044ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044d6:	e002      	b.n	80044de <HAL_RCC_GetSysClockFreq+0x1f2>
 80044d8:	4b05      	ldr	r3, [pc, #20]	@ (80044f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80044da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044dc:	bf00      	nop
 80044de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044e0:	4618      	mov	r0, r3
 80044e2:	3750      	adds	r7, #80	@ 0x50
 80044e4:	46bd      	mov	sp, r7
 80044e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044ea:	bf00      	nop
 80044ec:	40023800 	.word	0x40023800
 80044f0:	00f42400 	.word	0x00f42400
 80044f4:	007a1200 	.word	0x007a1200

080044f8 <HAL_RCC_GetHCLKFreq>:
 80044f8:	b480      	push	{r7}
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	4b03      	ldr	r3, [pc, #12]	@ (800450c <HAL_RCC_GetHCLKFreq+0x14>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4618      	mov	r0, r3
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	20000000 	.word	0x20000000

08004510 <USB_CoreInit>:
 8004510:	b084      	sub	sp, #16
 8004512:	b580      	push	{r7, lr}
 8004514:	b084      	sub	sp, #16
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
 800451a:	f107 001c 	add.w	r0, r7, #28
 800451e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8004522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004524:	2b01      	cmp	r3, #1
 8004526:	d122      	bne.n	800456e <USB_CoreInit+0x5e>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800452c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	639a      	str	r2, [r3, #56]	@ 0x38
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800453c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	60d3      	str	r3, [r2, #12]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	60da      	str	r2, [r3, #12]
 8004550:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004552:	2b01      	cmp	r3, #1
 8004554:	d105      	bne.n	8004562 <USB_CoreInit+0x52>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	60da      	str	r2, [r3, #12]
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f001 fbee 	bl	8005d44 <USB_CoreReset>
 8004568:	4603      	mov	r3, r0
 800456a:	73fb      	strb	r3, [r7, #15]
 800456c:	e01a      	b.n	80045a4 <USB_CoreInit+0x94>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	60da      	str	r2, [r3, #12]
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f001 fbe2 	bl	8005d44 <USB_CoreReset>
 8004580:	4603      	mov	r3, r0
 8004582:	73fb      	strb	r3, [r7, #15]
 8004584:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004586:	2b00      	cmp	r3, #0
 8004588:	d106      	bne.n	8004598 <USB_CoreInit+0x88>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800458e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	639a      	str	r2, [r3, #56]	@ 0x38
 8004596:	e005      	b.n	80045a4 <USB_CoreInit+0x94>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800459c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	639a      	str	r2, [r3, #56]	@ 0x38
 80045a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d10b      	bne.n	80045c2 <USB_CoreInit+0xb2>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f043 0206 	orr.w	r2, r3, #6
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	609a      	str	r2, [r3, #8]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f043 0220 	orr.w	r2, r3, #32
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	609a      	str	r2, [r3, #8]
 80045c2:	7bfb      	ldrb	r3, [r7, #15]
 80045c4:	4618      	mov	r0, r3
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045ce:	b004      	add	sp, #16
 80045d0:	4770      	bx	lr
	...

080045d4 <USB_SetTurnaroundTime>:
 80045d4:	b480      	push	{r7}
 80045d6:	b087      	sub	sp, #28
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	4613      	mov	r3, r2
 80045e0:	71fb      	strb	r3, [r7, #7]
 80045e2:	79fb      	ldrb	r3, [r7, #7]
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d165      	bne.n	80046b4 <USB_SetTurnaroundTime+0xe0>
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	4a41      	ldr	r2, [pc, #260]	@ (80046f0 <USB_SetTurnaroundTime+0x11c>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d906      	bls.n	80045fe <USB_SetTurnaroundTime+0x2a>
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	4a40      	ldr	r2, [pc, #256]	@ (80046f4 <USB_SetTurnaroundTime+0x120>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d202      	bcs.n	80045fe <USB_SetTurnaroundTime+0x2a>
 80045f8:	230f      	movs	r3, #15
 80045fa:	617b      	str	r3, [r7, #20]
 80045fc:	e062      	b.n	80046c4 <USB_SetTurnaroundTime+0xf0>
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	4a3c      	ldr	r2, [pc, #240]	@ (80046f4 <USB_SetTurnaroundTime+0x120>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d306      	bcc.n	8004614 <USB_SetTurnaroundTime+0x40>
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	4a3b      	ldr	r2, [pc, #236]	@ (80046f8 <USB_SetTurnaroundTime+0x124>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d202      	bcs.n	8004614 <USB_SetTurnaroundTime+0x40>
 800460e:	230e      	movs	r3, #14
 8004610:	617b      	str	r3, [r7, #20]
 8004612:	e057      	b.n	80046c4 <USB_SetTurnaroundTime+0xf0>
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	4a38      	ldr	r2, [pc, #224]	@ (80046f8 <USB_SetTurnaroundTime+0x124>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d306      	bcc.n	800462a <USB_SetTurnaroundTime+0x56>
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	4a37      	ldr	r2, [pc, #220]	@ (80046fc <USB_SetTurnaroundTime+0x128>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d202      	bcs.n	800462a <USB_SetTurnaroundTime+0x56>
 8004624:	230d      	movs	r3, #13
 8004626:	617b      	str	r3, [r7, #20]
 8004628:	e04c      	b.n	80046c4 <USB_SetTurnaroundTime+0xf0>
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	4a33      	ldr	r2, [pc, #204]	@ (80046fc <USB_SetTurnaroundTime+0x128>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d306      	bcc.n	8004640 <USB_SetTurnaroundTime+0x6c>
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	4a32      	ldr	r2, [pc, #200]	@ (8004700 <USB_SetTurnaroundTime+0x12c>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d802      	bhi.n	8004640 <USB_SetTurnaroundTime+0x6c>
 800463a:	230c      	movs	r3, #12
 800463c:	617b      	str	r3, [r7, #20]
 800463e:	e041      	b.n	80046c4 <USB_SetTurnaroundTime+0xf0>
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	4a2f      	ldr	r2, [pc, #188]	@ (8004700 <USB_SetTurnaroundTime+0x12c>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d906      	bls.n	8004656 <USB_SetTurnaroundTime+0x82>
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	4a2e      	ldr	r2, [pc, #184]	@ (8004704 <USB_SetTurnaroundTime+0x130>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d802      	bhi.n	8004656 <USB_SetTurnaroundTime+0x82>
 8004650:	230b      	movs	r3, #11
 8004652:	617b      	str	r3, [r7, #20]
 8004654:	e036      	b.n	80046c4 <USB_SetTurnaroundTime+0xf0>
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	4a2a      	ldr	r2, [pc, #168]	@ (8004704 <USB_SetTurnaroundTime+0x130>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d906      	bls.n	800466c <USB_SetTurnaroundTime+0x98>
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	4a29      	ldr	r2, [pc, #164]	@ (8004708 <USB_SetTurnaroundTime+0x134>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d802      	bhi.n	800466c <USB_SetTurnaroundTime+0x98>
 8004666:	230a      	movs	r3, #10
 8004668:	617b      	str	r3, [r7, #20]
 800466a:	e02b      	b.n	80046c4 <USB_SetTurnaroundTime+0xf0>
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	4a26      	ldr	r2, [pc, #152]	@ (8004708 <USB_SetTurnaroundTime+0x134>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d906      	bls.n	8004682 <USB_SetTurnaroundTime+0xae>
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	4a25      	ldr	r2, [pc, #148]	@ (800470c <USB_SetTurnaroundTime+0x138>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d202      	bcs.n	8004682 <USB_SetTurnaroundTime+0xae>
 800467c:	2309      	movs	r3, #9
 800467e:	617b      	str	r3, [r7, #20]
 8004680:	e020      	b.n	80046c4 <USB_SetTurnaroundTime+0xf0>
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	4a21      	ldr	r2, [pc, #132]	@ (800470c <USB_SetTurnaroundTime+0x138>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d306      	bcc.n	8004698 <USB_SetTurnaroundTime+0xc4>
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	4a20      	ldr	r2, [pc, #128]	@ (8004710 <USB_SetTurnaroundTime+0x13c>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d802      	bhi.n	8004698 <USB_SetTurnaroundTime+0xc4>
 8004692:	2308      	movs	r3, #8
 8004694:	617b      	str	r3, [r7, #20]
 8004696:	e015      	b.n	80046c4 <USB_SetTurnaroundTime+0xf0>
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	4a1d      	ldr	r2, [pc, #116]	@ (8004710 <USB_SetTurnaroundTime+0x13c>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d906      	bls.n	80046ae <USB_SetTurnaroundTime+0xda>
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	4a1c      	ldr	r2, [pc, #112]	@ (8004714 <USB_SetTurnaroundTime+0x140>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d202      	bcs.n	80046ae <USB_SetTurnaroundTime+0xda>
 80046a8:	2307      	movs	r3, #7
 80046aa:	617b      	str	r3, [r7, #20]
 80046ac:	e00a      	b.n	80046c4 <USB_SetTurnaroundTime+0xf0>
 80046ae:	2306      	movs	r3, #6
 80046b0:	617b      	str	r3, [r7, #20]
 80046b2:	e007      	b.n	80046c4 <USB_SetTurnaroundTime+0xf0>
 80046b4:	79fb      	ldrb	r3, [r7, #7]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d102      	bne.n	80046c0 <USB_SetTurnaroundTime+0xec>
 80046ba:	2309      	movs	r3, #9
 80046bc:	617b      	str	r3, [r7, #20]
 80046be:	e001      	b.n	80046c4 <USB_SetTurnaroundTime+0xf0>
 80046c0:	2309      	movs	r3, #9
 80046c2:	617b      	str	r3, [r7, #20]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	60da      	str	r2, [r3, #12]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	68da      	ldr	r2, [r3, #12]
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	029b      	lsls	r3, r3, #10
 80046d8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80046dc:	431a      	orrs	r2, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	60da      	str	r2, [r3, #12]
 80046e2:	2300      	movs	r3, #0
 80046e4:	4618      	mov	r0, r3
 80046e6:	371c      	adds	r7, #28
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr
 80046f0:	00d8acbf 	.word	0x00d8acbf
 80046f4:	00e4e1c0 	.word	0x00e4e1c0
 80046f8:	00f42400 	.word	0x00f42400
 80046fc:	01067380 	.word	0x01067380
 8004700:	011a499f 	.word	0x011a499f
 8004704:	01312cff 	.word	0x01312cff
 8004708:	014ca43f 	.word	0x014ca43f
 800470c:	016e3600 	.word	0x016e3600
 8004710:	01a6ab1f 	.word	0x01a6ab1f
 8004714:	01e84800 	.word	0x01e84800

08004718 <USB_EnableGlobalInt>:
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f043 0201 	orr.w	r2, r3, #1
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	609a      	str	r2, [r3, #8]
 800472c:	2300      	movs	r3, #0
 800472e:	4618      	mov	r0, r3
 8004730:	370c      	adds	r7, #12
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr

0800473a <USB_DisableGlobalInt>:
 800473a:	b480      	push	{r7}
 800473c:	b083      	sub	sp, #12
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f023 0201 	bic.w	r2, r3, #1
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	609a      	str	r2, [r3, #8]
 800474e:	2300      	movs	r3, #0
 8004750:	4618      	mov	r0, r3
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <USB_SetCurrentMode>:
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	460b      	mov	r3, r1
 8004766:	70fb      	strb	r3, [r7, #3]
 8004768:	2300      	movs	r3, #0
 800476a:	60fb      	str	r3, [r7, #12]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	60da      	str	r2, [r3, #12]
 8004778:	78fb      	ldrb	r3, [r7, #3]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d115      	bne.n	80047aa <USB_SetCurrentMode+0x4e>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	60da      	str	r2, [r3, #12]
 800478a:	2001      	movs	r0, #1
 800478c:	f7fd f902 	bl	8001994 <HAL_Delay>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	3301      	adds	r3, #1
 8004794:	60fb      	str	r3, [r7, #12]
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f001 fa45 	bl	8005c26 <USB_GetMode>
 800479c:	4603      	mov	r3, r0
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d01e      	beq.n	80047e0 <USB_SetCurrentMode+0x84>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2b31      	cmp	r3, #49	@ 0x31
 80047a6:	d9f0      	bls.n	800478a <USB_SetCurrentMode+0x2e>
 80047a8:	e01a      	b.n	80047e0 <USB_SetCurrentMode+0x84>
 80047aa:	78fb      	ldrb	r3, [r7, #3]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d115      	bne.n	80047dc <USB_SetCurrentMode+0x80>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	60da      	str	r2, [r3, #12]
 80047bc:	2001      	movs	r0, #1
 80047be:	f7fd f8e9 	bl	8001994 <HAL_Delay>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	3301      	adds	r3, #1
 80047c6:	60fb      	str	r3, [r7, #12]
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f001 fa2c 	bl	8005c26 <USB_GetMode>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d005      	beq.n	80047e0 <USB_SetCurrentMode+0x84>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2b31      	cmp	r3, #49	@ 0x31
 80047d8:	d9f0      	bls.n	80047bc <USB_SetCurrentMode+0x60>
 80047da:	e001      	b.n	80047e0 <USB_SetCurrentMode+0x84>
 80047dc:	2301      	movs	r3, #1
 80047de:	e005      	b.n	80047ec <USB_SetCurrentMode+0x90>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2b32      	cmp	r3, #50	@ 0x32
 80047e4:	d101      	bne.n	80047ea <USB_SetCurrentMode+0x8e>
 80047e6:	2301      	movs	r3, #1
 80047e8:	e000      	b.n	80047ec <USB_SetCurrentMode+0x90>
 80047ea:	2300      	movs	r3, #0
 80047ec:	4618      	mov	r0, r3
 80047ee:	3710      	adds	r7, #16
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <USB_DevInit>:
 80047f4:	b084      	sub	sp, #16
 80047f6:	b580      	push	{r7, lr}
 80047f8:	b086      	sub	sp, #24
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
 80047fe:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004802:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8004806:	2300      	movs	r3, #0
 8004808:	75fb      	strb	r3, [r7, #23]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	60fb      	str	r3, [r7, #12]
 800480e:	2300      	movs	r3, #0
 8004810:	613b      	str	r3, [r7, #16]
 8004812:	e009      	b.n	8004828 <USB_DevInit+0x34>
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	3340      	adds	r3, #64	@ 0x40
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	4413      	add	r3, r2
 800481e:	2200      	movs	r2, #0
 8004820:	605a      	str	r2, [r3, #4]
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	3301      	adds	r3, #1
 8004826:	613b      	str	r3, [r7, #16]
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	2b0e      	cmp	r3, #14
 800482c:	d9f2      	bls.n	8004814 <USB_DevInit+0x20>
 800482e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004830:	2b00      	cmp	r3, #0
 8004832:	d11c      	bne.n	800486e <USB_DevInit+0x7a>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004842:	f043 0302 	orr.w	r3, r3, #2
 8004846:	6053      	str	r3, [r2, #4]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800484c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	639a      	str	r2, [r3, #56]	@ 0x38
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004858:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	639a      	str	r2, [r3, #56]	@ 0x38
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004864:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	639a      	str	r2, [r3, #56]	@ 0x38
 800486c:	e00b      	b.n	8004886 <USB_DevInit+0x92>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004872:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	639a      	str	r2, [r3, #56]	@ 0x38
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800487e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	639a      	str	r2, [r3, #56]	@ 0x38
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800488c:	461a      	mov	r2, r3
 800488e:	2300      	movs	r3, #0
 8004890:	6013      	str	r3, [r2, #0]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004898:	4619      	mov	r1, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048a0:	461a      	mov	r2, r3
 80048a2:	680b      	ldr	r3, [r1, #0]
 80048a4:	6013      	str	r3, [r2, #0]
 80048a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d10c      	bne.n	80048c6 <USB_DevInit+0xd2>
 80048ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d104      	bne.n	80048bc <USB_DevInit+0xc8>
 80048b2:	2100      	movs	r1, #0
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 f965 	bl	8004b84 <USB_SetDevSpeed>
 80048ba:	e008      	b.n	80048ce <USB_DevInit+0xda>
 80048bc:	2101      	movs	r1, #1
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 f960 	bl	8004b84 <USB_SetDevSpeed>
 80048c4:	e003      	b.n	80048ce <USB_DevInit+0xda>
 80048c6:	2103      	movs	r1, #3
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 f95b 	bl	8004b84 <USB_SetDevSpeed>
 80048ce:	2110      	movs	r1, #16
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 f8f3 	bl	8004abc <USB_FlushTxFifo>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d001      	beq.n	80048e0 <USB_DevInit+0xec>
 80048dc:	2301      	movs	r3, #1
 80048de:	75fb      	strb	r3, [r7, #23]
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 f91f 	bl	8004b24 <USB_FlushRxFifo>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d001      	beq.n	80048f0 <USB_DevInit+0xfc>
 80048ec:	2301      	movs	r3, #1
 80048ee:	75fb      	strb	r3, [r7, #23]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048f6:	461a      	mov	r2, r3
 80048f8:	2300      	movs	r3, #0
 80048fa:	6113      	str	r3, [r2, #16]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004902:	461a      	mov	r2, r3
 8004904:	2300      	movs	r3, #0
 8004906:	6153      	str	r3, [r2, #20]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800490e:	461a      	mov	r2, r3
 8004910:	2300      	movs	r3, #0
 8004912:	61d3      	str	r3, [r2, #28]
 8004914:	2300      	movs	r3, #0
 8004916:	613b      	str	r3, [r7, #16]
 8004918:	e043      	b.n	80049a2 <USB_DevInit+0x1ae>
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	015a      	lsls	r2, r3, #5
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	4413      	add	r3, r2
 8004922:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800492c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004930:	d118      	bne.n	8004964 <USB_DevInit+0x170>
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d10a      	bne.n	800494e <USB_DevInit+0x15a>
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	015a      	lsls	r2, r3, #5
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	4413      	add	r3, r2
 8004940:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004944:	461a      	mov	r2, r3
 8004946:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800494a:	6013      	str	r3, [r2, #0]
 800494c:	e013      	b.n	8004976 <USB_DevInit+0x182>
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	015a      	lsls	r2, r3, #5
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	4413      	add	r3, r2
 8004956:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800495a:	461a      	mov	r2, r3
 800495c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004960:	6013      	str	r3, [r2, #0]
 8004962:	e008      	b.n	8004976 <USB_DevInit+0x182>
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	015a      	lsls	r2, r3, #5
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	4413      	add	r3, r2
 800496c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004970:	461a      	mov	r2, r3
 8004972:	2300      	movs	r3, #0
 8004974:	6013      	str	r3, [r2, #0]
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	015a      	lsls	r2, r3, #5
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	4413      	add	r3, r2
 800497e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004982:	461a      	mov	r2, r3
 8004984:	2300      	movs	r3, #0
 8004986:	6113      	str	r3, [r2, #16]
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	015a      	lsls	r2, r3, #5
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	4413      	add	r3, r2
 8004990:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004994:	461a      	mov	r2, r3
 8004996:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800499a:	6093      	str	r3, [r2, #8]
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	3301      	adds	r3, #1
 80049a0:	613b      	str	r3, [r7, #16]
 80049a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d3b7      	bcc.n	800491a <USB_DevInit+0x126>
 80049aa:	2300      	movs	r3, #0
 80049ac:	613b      	str	r3, [r7, #16]
 80049ae:	e043      	b.n	8004a38 <USB_DevInit+0x244>
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	015a      	lsls	r2, r3, #5
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	4413      	add	r3, r2
 80049b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80049c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80049c6:	d118      	bne.n	80049fa <USB_DevInit+0x206>
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10a      	bne.n	80049e4 <USB_DevInit+0x1f0>
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	015a      	lsls	r2, r3, #5
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	4413      	add	r3, r2
 80049d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049da:	461a      	mov	r2, r3
 80049dc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80049e0:	6013      	str	r3, [r2, #0]
 80049e2:	e013      	b.n	8004a0c <USB_DevInit+0x218>
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	015a      	lsls	r2, r3, #5
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	4413      	add	r3, r2
 80049ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049f0:	461a      	mov	r2, r3
 80049f2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80049f6:	6013      	str	r3, [r2, #0]
 80049f8:	e008      	b.n	8004a0c <USB_DevInit+0x218>
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	015a      	lsls	r2, r3, #5
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	4413      	add	r3, r2
 8004a02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a06:	461a      	mov	r2, r3
 8004a08:	2300      	movs	r3, #0
 8004a0a:	6013      	str	r3, [r2, #0]
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	015a      	lsls	r2, r3, #5
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	4413      	add	r3, r2
 8004a14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a18:	461a      	mov	r2, r3
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	6113      	str	r3, [r2, #16]
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	015a      	lsls	r2, r3, #5
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	4413      	add	r3, r2
 8004a26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004a30:	6093      	str	r3, [r2, #8]
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	3301      	adds	r3, #1
 8004a36:	613b      	str	r3, [r7, #16]
 8004a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a3a:	693a      	ldr	r2, [r7, #16]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d3b7      	bcc.n	80049b0 <USB_DevInit+0x1bc>
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a4e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a52:	6113      	str	r3, [r2, #16]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	619a      	str	r2, [r3, #24]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004a60:	615a      	str	r2, [r3, #20]
 8004a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d105      	bne.n	8004a74 <USB_DevInit+0x280>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	f043 0210 	orr.w	r2, r3, #16
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	619a      	str	r2, [r3, #24]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	699a      	ldr	r2, [r3, #24]
 8004a78:	4b0f      	ldr	r3, [pc, #60]	@ (8004ab8 <USB_DevInit+0x2c4>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	6193      	str	r3, [r2, #24]
 8004a80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d005      	beq.n	8004a92 <USB_DevInit+0x29e>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	f043 0208 	orr.w	r2, r3, #8
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	619a      	str	r2, [r3, #24]
 8004a92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d107      	bne.n	8004aa8 <USB_DevInit+0x2b4>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004aa0:	f043 0304 	orr.w	r3, r3, #4
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	6193      	str	r3, [r2, #24]
 8004aa8:	7dfb      	ldrb	r3, [r7, #23]
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3718      	adds	r7, #24
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ab4:	b004      	add	sp, #16
 8004ab6:	4770      	bx	lr
 8004ab8:	803c3800 	.word	0x803c3800

08004abc <USB_FlushTxFifo>:
 8004abc:	b480      	push	{r7}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	60fb      	str	r3, [r7, #12]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	3301      	adds	r3, #1
 8004ace:	60fb      	str	r3, [r7, #12]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	4a13      	ldr	r2, [pc, #76]	@ (8004b20 <USB_FlushTxFifo+0x64>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d901      	bls.n	8004adc <USB_FlushTxFifo+0x20>
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e01b      	b.n	8004b14 <USB_FlushTxFifo+0x58>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	daf2      	bge.n	8004aca <USB_FlushTxFifo+0xe>
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	60fb      	str	r3, [r7, #12]
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	019b      	lsls	r3, r3, #6
 8004aec:	f043 0220 	orr.w	r2, r3, #32
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	611a      	str	r2, [r3, #16]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	3301      	adds	r3, #1
 8004af8:	60fb      	str	r3, [r7, #12]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	4a08      	ldr	r2, [pc, #32]	@ (8004b20 <USB_FlushTxFifo+0x64>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d901      	bls.n	8004b06 <USB_FlushTxFifo+0x4a>
 8004b02:	2303      	movs	r3, #3
 8004b04:	e006      	b.n	8004b14 <USB_FlushTxFifo+0x58>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	f003 0320 	and.w	r3, r3, #32
 8004b0e:	2b20      	cmp	r3, #32
 8004b10:	d0f0      	beq.n	8004af4 <USB_FlushTxFifo+0x38>
 8004b12:	2300      	movs	r3, #0
 8004b14:	4618      	mov	r0, r3
 8004b16:	3714      	adds	r7, #20
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr
 8004b20:	00030d40 	.word	0x00030d40

08004b24 <USB_FlushRxFifo>:
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	60fb      	str	r3, [r7, #12]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	3301      	adds	r3, #1
 8004b34:	60fb      	str	r3, [r7, #12]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	4a11      	ldr	r2, [pc, #68]	@ (8004b80 <USB_FlushRxFifo+0x5c>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d901      	bls.n	8004b42 <USB_FlushRxFifo+0x1e>
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e018      	b.n	8004b74 <USB_FlushRxFifo+0x50>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	daf2      	bge.n	8004b30 <USB_FlushRxFifo+0xc>
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	60fb      	str	r3, [r7, #12]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2210      	movs	r2, #16
 8004b52:	611a      	str	r2, [r3, #16]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	3301      	adds	r3, #1
 8004b58:	60fb      	str	r3, [r7, #12]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	4a08      	ldr	r2, [pc, #32]	@ (8004b80 <USB_FlushRxFifo+0x5c>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d901      	bls.n	8004b66 <USB_FlushRxFifo+0x42>
 8004b62:	2303      	movs	r3, #3
 8004b64:	e006      	b.n	8004b74 <USB_FlushRxFifo+0x50>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	f003 0310 	and.w	r3, r3, #16
 8004b6e:	2b10      	cmp	r3, #16
 8004b70:	d0f0      	beq.n	8004b54 <USB_FlushRxFifo+0x30>
 8004b72:	2300      	movs	r3, #0
 8004b74:	4618      	mov	r0, r3
 8004b76:	3714      	adds	r7, #20
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr
 8004b80:	00030d40 	.word	0x00030d40

08004b84 <USB_SetDevSpeed>:
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	70fb      	strb	r3, [r7, #3]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	60fb      	str	r3, [r7, #12]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	78fb      	ldrb	r3, [r7, #3]
 8004b9e:	68f9      	ldr	r1, [r7, #12]
 8004ba0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	600b      	str	r3, [r1, #0]
 8004ba8:	2300      	movs	r3, #0
 8004baa:	4618      	mov	r0, r3
 8004bac:	3714      	adds	r7, #20
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr

08004bb6 <USB_GetDevSpeed>:
 8004bb6:	b480      	push	{r7}
 8004bb8:	b087      	sub	sp, #28
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	613b      	str	r3, [r7, #16]
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f003 0306 	and.w	r3, r3, #6
 8004bce:	60fb      	str	r3, [r7, #12]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d102      	bne.n	8004bdc <USB_GetDevSpeed+0x26>
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	75fb      	strb	r3, [r7, #23]
 8004bda:	e00a      	b.n	8004bf2 <USB_GetDevSpeed+0x3c>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d002      	beq.n	8004be8 <USB_GetDevSpeed+0x32>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2b06      	cmp	r3, #6
 8004be6:	d102      	bne.n	8004bee <USB_GetDevSpeed+0x38>
 8004be8:	2302      	movs	r3, #2
 8004bea:	75fb      	strb	r3, [r7, #23]
 8004bec:	e001      	b.n	8004bf2 <USB_GetDevSpeed+0x3c>
 8004bee:	230f      	movs	r3, #15
 8004bf0:	75fb      	strb	r3, [r7, #23]
 8004bf2:	7dfb      	ldrb	r3, [r7, #23]
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	371c      	adds	r7, #28
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <USB_ActivateEndpoint>:
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	60fb      	str	r3, [r7, #12]
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	60bb      	str	r3, [r7, #8]
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	785b      	ldrb	r3, [r3, #1]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d13a      	bne.n	8004c92 <USB_ActivateEndpoint+0x92>
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c22:	69da      	ldr	r2, [r3, #28]
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	f003 030f 	and.w	r3, r3, #15
 8004c2c:	2101      	movs	r1, #1
 8004c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	68f9      	ldr	r1, [r7, #12]
 8004c36:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	61cb      	str	r3, [r1, #28]
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	015a      	lsls	r2, r3, #5
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	4413      	add	r3, r2
 8004c46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d155      	bne.n	8004d00 <USB_ActivateEndpoint+0x100>
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	015a      	lsls	r2, r3, #5
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	f3c3 010a 	ubfx	r1, r3, #0, #11
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	791b      	ldrb	r3, [r3, #4]
 8004c6e:	049b      	lsls	r3, r3, #18
 8004c70:	4319      	orrs	r1, r3
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	059b      	lsls	r3, r3, #22
 8004c76:	430b      	orrs	r3, r1
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	68ba      	ldr	r2, [r7, #8]
 8004c7c:	0151      	lsls	r1, r2, #5
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	440a      	add	r2, r1
 8004c82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c8e:	6013      	str	r3, [r2, #0]
 8004c90:	e036      	b.n	8004d00 <USB_ActivateEndpoint+0x100>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c98:	69da      	ldr	r2, [r3, #28]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	f003 030f 	and.w	r3, r3, #15
 8004ca2:	2101      	movs	r1, #1
 8004ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ca8:	041b      	lsls	r3, r3, #16
 8004caa:	68f9      	ldr	r1, [r7, #12]
 8004cac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	61cb      	str	r3, [r1, #28]
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	015a      	lsls	r2, r3, #5
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	4413      	add	r3, r2
 8004cbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d11a      	bne.n	8004d00 <USB_ActivateEndpoint+0x100>
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	015a      	lsls	r2, r3, #5
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	f3c3 010a 	ubfx	r1, r3, #0, #11
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	791b      	ldrb	r3, [r3, #4]
 8004ce4:	049b      	lsls	r3, r3, #18
 8004ce6:	430b      	orrs	r3, r1
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	0151      	lsls	r1, r2, #5
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	440a      	add	r2, r1
 8004cf2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004cf6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cfe:	6013      	str	r3, [r2, #0]
 8004d00:	2300      	movs	r3, #0
 8004d02:	4618      	mov	r0, r3
 8004d04:	3714      	adds	r7, #20
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
	...

08004d10 <USB_DeactivateEndpoint>:
 8004d10:	b480      	push	{r7}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	60fb      	str	r3, [r7, #12]
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	60bb      	str	r3, [r7, #8]
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	785b      	ldrb	r3, [r3, #1]
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d161      	bne.n	8004df0 <USB_DeactivateEndpoint+0xe0>
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	015a      	lsls	r2, r3, #5
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	4413      	add	r3, r2
 8004d34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004d3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d42:	d11f      	bne.n	8004d84 <USB_DeactivateEndpoint+0x74>
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	015a      	lsls	r2, r3, #5
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68ba      	ldr	r2, [r7, #8]
 8004d54:	0151      	lsls	r1, r2, #5
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	440a      	add	r2, r1
 8004d5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d5e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004d62:	6013      	str	r3, [r2, #0]
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	015a      	lsls	r2, r3, #5
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68ba      	ldr	r2, [r7, #8]
 8004d74:	0151      	lsls	r1, r2, #5
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	440a      	add	r2, r1
 8004d7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d7e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004d82:	6013      	str	r3, [r2, #0]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	f003 030f 	and.w	r3, r3, #15
 8004d94:	2101      	movs	r1, #1
 8004d96:	fa01 f303 	lsl.w	r3, r1, r3
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	43db      	mvns	r3, r3
 8004d9e:	68f9      	ldr	r1, [r7, #12]
 8004da0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004da4:	4013      	ands	r3, r2
 8004da6:	63cb      	str	r3, [r1, #60]	@ 0x3c
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004dae:	69da      	ldr	r2, [r3, #28]
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	f003 030f 	and.w	r3, r3, #15
 8004db8:	2101      	movs	r1, #1
 8004dba:	fa01 f303 	lsl.w	r3, r1, r3
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	43db      	mvns	r3, r3
 8004dc2:	68f9      	ldr	r1, [r7, #12]
 8004dc4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004dc8:	4013      	ands	r3, r2
 8004dca:	61cb      	str	r3, [r1, #28]
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	015a      	lsls	r2, r3, #5
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	0159      	lsls	r1, r3, #5
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	440b      	add	r3, r1
 8004de2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004de6:	4619      	mov	r1, r3
 8004de8:	4b35      	ldr	r3, [pc, #212]	@ (8004ec0 <USB_DeactivateEndpoint+0x1b0>)
 8004dea:	4013      	ands	r3, r2
 8004dec:	600b      	str	r3, [r1, #0]
 8004dee:	e060      	b.n	8004eb2 <USB_DeactivateEndpoint+0x1a2>
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	015a      	lsls	r2, r3, #5
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	4413      	add	r3, r2
 8004df8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004e02:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e06:	d11f      	bne.n	8004e48 <USB_DeactivateEndpoint+0x138>
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	015a      	lsls	r2, r3, #5
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	4413      	add	r3, r2
 8004e10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68ba      	ldr	r2, [r7, #8]
 8004e18:	0151      	lsls	r1, r2, #5
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	440a      	add	r2, r1
 8004e1e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e22:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004e26:	6013      	str	r3, [r2, #0]
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	015a      	lsls	r2, r3, #5
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	4413      	add	r3, r2
 8004e30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68ba      	ldr	r2, [r7, #8]
 8004e38:	0151      	lsls	r1, r2, #5
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	440a      	add	r2, r1
 8004e3e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e42:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004e46:	6013      	str	r3, [r2, #0]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	f003 030f 	and.w	r3, r3, #15
 8004e58:	2101      	movs	r1, #1
 8004e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e5e:	041b      	lsls	r3, r3, #16
 8004e60:	43db      	mvns	r3, r3
 8004e62:	68f9      	ldr	r1, [r7, #12]
 8004e64:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e68:	4013      	ands	r3, r2
 8004e6a:	63cb      	str	r3, [r1, #60]	@ 0x3c
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e72:	69da      	ldr	r2, [r3, #28]
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	f003 030f 	and.w	r3, r3, #15
 8004e7c:	2101      	movs	r1, #1
 8004e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e82:	041b      	lsls	r3, r3, #16
 8004e84:	43db      	mvns	r3, r3
 8004e86:	68f9      	ldr	r1, [r7, #12]
 8004e88:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	61cb      	str	r3, [r1, #28]
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	015a      	lsls	r2, r3, #5
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	4413      	add	r3, r2
 8004e98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	0159      	lsls	r1, r3, #5
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	440b      	add	r3, r1
 8004ea6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004eaa:	4619      	mov	r1, r3
 8004eac:	4b05      	ldr	r3, [pc, #20]	@ (8004ec4 <USB_DeactivateEndpoint+0x1b4>)
 8004eae:	4013      	ands	r3, r2
 8004eb0:	600b      	str	r3, [r1, #0]
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3714      	adds	r7, #20
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr
 8004ec0:	ec337800 	.word	0xec337800
 8004ec4:	eff37800 	.word	0xeff37800

08004ec8 <USB_EPStartXfer>:
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b08a      	sub	sp, #40	@ 0x28
 8004ecc:	af02      	add	r7, sp, #8
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	71fb      	strb	r3, [r7, #7]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	61fb      	str	r3, [r7, #28]
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	61bb      	str	r3, [r7, #24]
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	785b      	ldrb	r3, [r3, #1]
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	f040 815c 	bne.w	80051a2 <USB_EPStartXfer+0x2da>
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d132      	bne.n	8004f58 <USB_EPStartXfer+0x90>
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	015a      	lsls	r2, r3, #5
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	4413      	add	r3, r2
 8004efa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	0151      	lsls	r1, r2, #5
 8004f04:	69fa      	ldr	r2, [r7, #28]
 8004f06:	440a      	add	r2, r1
 8004f08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f0c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004f10:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004f14:	6113      	str	r3, [r2, #16]
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	015a      	lsls	r2, r3, #5
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	69ba      	ldr	r2, [r7, #24]
 8004f26:	0151      	lsls	r1, r2, #5
 8004f28:	69fa      	ldr	r2, [r7, #28]
 8004f2a:	440a      	add	r2, r1
 8004f2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f30:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004f34:	6113      	str	r3, [r2, #16]
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	015a      	lsls	r2, r3, #5
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f42:	691b      	ldr	r3, [r3, #16]
 8004f44:	69ba      	ldr	r2, [r7, #24]
 8004f46:	0151      	lsls	r1, r2, #5
 8004f48:	69fa      	ldr	r2, [r7, #28]
 8004f4a:	440a      	add	r2, r1
 8004f4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f50:	0cdb      	lsrs	r3, r3, #19
 8004f52:	04db      	lsls	r3, r3, #19
 8004f54:	6113      	str	r3, [r2, #16]
 8004f56:	e074      	b.n	8005042 <USB_EPStartXfer+0x17a>
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	015a      	lsls	r2, r3, #5
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	4413      	add	r3, r2
 8004f60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	69ba      	ldr	r2, [r7, #24]
 8004f68:	0151      	lsls	r1, r2, #5
 8004f6a:	69fa      	ldr	r2, [r7, #28]
 8004f6c:	440a      	add	r2, r1
 8004f6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f72:	0cdb      	lsrs	r3, r3, #19
 8004f74:	04db      	lsls	r3, r3, #19
 8004f76:	6113      	str	r3, [r2, #16]
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	015a      	lsls	r2, r3, #5
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	4413      	add	r3, r2
 8004f80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	69ba      	ldr	r2, [r7, #24]
 8004f88:	0151      	lsls	r1, r2, #5
 8004f8a:	69fa      	ldr	r2, [r7, #28]
 8004f8c:	440a      	add	r2, r1
 8004f8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f92:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004f96:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004f9a:	6113      	str	r3, [r2, #16]
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	015a      	lsls	r2, r3, #5
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fa8:	691a      	ldr	r2, [r3, #16]
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	6999      	ldr	r1, [r3, #24]
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	440b      	add	r3, r1
 8004fb4:	1e59      	subs	r1, r3, #1
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	fbb1 f3f3 	udiv	r3, r1, r3
 8004fbe:	04d9      	lsls	r1, r3, #19
 8004fc0:	4b9d      	ldr	r3, [pc, #628]	@ (8005238 <USB_EPStartXfer+0x370>)
 8004fc2:	400b      	ands	r3, r1
 8004fc4:	69b9      	ldr	r1, [r7, #24]
 8004fc6:	0148      	lsls	r0, r1, #5
 8004fc8:	69f9      	ldr	r1, [r7, #28]
 8004fca:	4401      	add	r1, r0
 8004fcc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	610b      	str	r3, [r1, #16]
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	015a      	lsls	r2, r3, #5
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	4413      	add	r3, r2
 8004fdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fe0:	691a      	ldr	r2, [r3, #16]
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fea:	69b9      	ldr	r1, [r7, #24]
 8004fec:	0148      	lsls	r0, r1, #5
 8004fee:	69f9      	ldr	r1, [r7, #28]
 8004ff0:	4401      	add	r1, r0
 8004ff2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	610b      	str	r3, [r1, #16]
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	791b      	ldrb	r3, [r3, #4]
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d11f      	bne.n	8005042 <USB_EPStartXfer+0x17a>
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	015a      	lsls	r2, r3, #5
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	4413      	add	r3, r2
 800500a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	69ba      	ldr	r2, [r7, #24]
 8005012:	0151      	lsls	r1, r2, #5
 8005014:	69fa      	ldr	r2, [r7, #28]
 8005016:	440a      	add	r2, r1
 8005018:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800501c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005020:	6113      	str	r3, [r2, #16]
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	015a      	lsls	r2, r3, #5
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	4413      	add	r3, r2
 800502a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	69ba      	ldr	r2, [r7, #24]
 8005032:	0151      	lsls	r1, r2, #5
 8005034:	69fa      	ldr	r2, [r7, #28]
 8005036:	440a      	add	r2, r1
 8005038:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800503c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005040:	6113      	str	r3, [r2, #16]
 8005042:	79fb      	ldrb	r3, [r7, #7]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d14b      	bne.n	80050e0 <USB_EPStartXfer+0x218>
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	695b      	ldr	r3, [r3, #20]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d009      	beq.n	8005064 <USB_EPStartXfer+0x19c>
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	015a      	lsls	r2, r3, #5
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	4413      	add	r3, r2
 8005058:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800505c:	461a      	mov	r2, r3
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	6153      	str	r3, [r2, #20]
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	791b      	ldrb	r3, [r3, #4]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d128      	bne.n	80050be <USB_EPStartXfer+0x1f6>
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005078:	2b00      	cmp	r3, #0
 800507a:	d110      	bne.n	800509e <USB_EPStartXfer+0x1d6>
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	015a      	lsls	r2, r3, #5
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	4413      	add	r3, r2
 8005084:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	69ba      	ldr	r2, [r7, #24]
 800508c:	0151      	lsls	r1, r2, #5
 800508e:	69fa      	ldr	r2, [r7, #28]
 8005090:	440a      	add	r2, r1
 8005092:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005096:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800509a:	6013      	str	r3, [r2, #0]
 800509c:	e00f      	b.n	80050be <USB_EPStartXfer+0x1f6>
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	015a      	lsls	r2, r3, #5
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	4413      	add	r3, r2
 80050a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	69ba      	ldr	r2, [r7, #24]
 80050ae:	0151      	lsls	r1, r2, #5
 80050b0:	69fa      	ldr	r2, [r7, #28]
 80050b2:	440a      	add	r2, r1
 80050b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80050b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050bc:	6013      	str	r3, [r2, #0]
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	015a      	lsls	r2, r3, #5
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	4413      	add	r3, r2
 80050c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	69ba      	ldr	r2, [r7, #24]
 80050ce:	0151      	lsls	r1, r2, #5
 80050d0:	69fa      	ldr	r2, [r7, #28]
 80050d2:	440a      	add	r2, r1
 80050d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80050d8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80050dc:	6013      	str	r3, [r2, #0]
 80050de:	e133      	b.n	8005348 <USB_EPStartXfer+0x480>
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	015a      	lsls	r2, r3, #5
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	4413      	add	r3, r2
 80050e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	69ba      	ldr	r2, [r7, #24]
 80050f0:	0151      	lsls	r1, r2, #5
 80050f2:	69fa      	ldr	r2, [r7, #28]
 80050f4:	440a      	add	r2, r1
 80050f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80050fa:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80050fe:	6013      	str	r3, [r2, #0]
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	791b      	ldrb	r3, [r3, #4]
 8005104:	2b01      	cmp	r3, #1
 8005106:	d015      	beq.n	8005134 <USB_EPStartXfer+0x26c>
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	2b00      	cmp	r3, #0
 800510e:	f000 811b 	beq.w	8005348 <USB_EPStartXfer+0x480>
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005118:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	f003 030f 	and.w	r3, r3, #15
 8005122:	2101      	movs	r1, #1
 8005124:	fa01 f303 	lsl.w	r3, r1, r3
 8005128:	69f9      	ldr	r1, [r7, #28]
 800512a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800512e:	4313      	orrs	r3, r2
 8005130:	634b      	str	r3, [r1, #52]	@ 0x34
 8005132:	e109      	b.n	8005348 <USB_EPStartXfer+0x480>
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005140:	2b00      	cmp	r3, #0
 8005142:	d110      	bne.n	8005166 <USB_EPStartXfer+0x29e>
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	015a      	lsls	r2, r3, #5
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	4413      	add	r3, r2
 800514c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	69ba      	ldr	r2, [r7, #24]
 8005154:	0151      	lsls	r1, r2, #5
 8005156:	69fa      	ldr	r2, [r7, #28]
 8005158:	440a      	add	r2, r1
 800515a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800515e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005162:	6013      	str	r3, [r2, #0]
 8005164:	e00f      	b.n	8005186 <USB_EPStartXfer+0x2be>
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	015a      	lsls	r2, r3, #5
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	4413      	add	r3, r2
 800516e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	69ba      	ldr	r2, [r7, #24]
 8005176:	0151      	lsls	r1, r2, #5
 8005178:	69fa      	ldr	r2, [r7, #28]
 800517a:	440a      	add	r2, r1
 800517c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005180:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005184:	6013      	str	r3, [r2, #0]
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	6919      	ldr	r1, [r3, #16]
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	781a      	ldrb	r2, [r3, #0]
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	b298      	uxth	r0, r3
 8005194:	79fb      	ldrb	r3, [r7, #7]
 8005196:	9300      	str	r3, [sp, #0]
 8005198:	4603      	mov	r3, r0
 800519a:	68f8      	ldr	r0, [r7, #12]
 800519c:	f000 fade 	bl	800575c <USB_WritePacket>
 80051a0:	e0d2      	b.n	8005348 <USB_EPStartXfer+0x480>
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	015a      	lsls	r2, r3, #5
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	4413      	add	r3, r2
 80051aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	69ba      	ldr	r2, [r7, #24]
 80051b2:	0151      	lsls	r1, r2, #5
 80051b4:	69fa      	ldr	r2, [r7, #28]
 80051b6:	440a      	add	r2, r1
 80051b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051bc:	0cdb      	lsrs	r3, r3, #19
 80051be:	04db      	lsls	r3, r3, #19
 80051c0:	6113      	str	r3, [r2, #16]
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	015a      	lsls	r2, r3, #5
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	4413      	add	r3, r2
 80051ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	69ba      	ldr	r2, [r7, #24]
 80051d2:	0151      	lsls	r1, r2, #5
 80051d4:	69fa      	ldr	r2, [r7, #28]
 80051d6:	440a      	add	r2, r1
 80051d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051dc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80051e0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80051e4:	6113      	str	r3, [r2, #16]
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	699b      	ldr	r3, [r3, #24]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d126      	bne.n	800523c <USB_EPStartXfer+0x374>
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	015a      	lsls	r2, r3, #5
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	4413      	add	r3, r2
 80051f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051fa:	691a      	ldr	r2, [r3, #16]
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005204:	69b9      	ldr	r1, [r7, #24]
 8005206:	0148      	lsls	r0, r1, #5
 8005208:	69f9      	ldr	r1, [r7, #28]
 800520a:	4401      	add	r1, r0
 800520c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005210:	4313      	orrs	r3, r2
 8005212:	610b      	str	r3, [r1, #16]
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	015a      	lsls	r2, r3, #5
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	4413      	add	r3, r2
 800521c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	69ba      	ldr	r2, [r7, #24]
 8005224:	0151      	lsls	r1, r2, #5
 8005226:	69fa      	ldr	r2, [r7, #28]
 8005228:	440a      	add	r2, r1
 800522a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800522e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005232:	6113      	str	r3, [r2, #16]
 8005234:	e03a      	b.n	80052ac <USB_EPStartXfer+0x3e4>
 8005236:	bf00      	nop
 8005238:	1ff80000 	.word	0x1ff80000
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	699a      	ldr	r2, [r3, #24]
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	4413      	add	r3, r2
 8005246:	1e5a      	subs	r2, r3, #1
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005250:	82fb      	strh	r3, [r7, #22]
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	8afa      	ldrh	r2, [r7, #22]
 8005258:	fb03 f202 	mul.w	r2, r3, r2
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	61da      	str	r2, [r3, #28]
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	015a      	lsls	r2, r3, #5
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	4413      	add	r3, r2
 8005268:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800526c:	691a      	ldr	r2, [r3, #16]
 800526e:	8afb      	ldrh	r3, [r7, #22]
 8005270:	04d9      	lsls	r1, r3, #19
 8005272:	4b38      	ldr	r3, [pc, #224]	@ (8005354 <USB_EPStartXfer+0x48c>)
 8005274:	400b      	ands	r3, r1
 8005276:	69b9      	ldr	r1, [r7, #24]
 8005278:	0148      	lsls	r0, r1, #5
 800527a:	69f9      	ldr	r1, [r7, #28]
 800527c:	4401      	add	r1, r0
 800527e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005282:	4313      	orrs	r3, r2
 8005284:	610b      	str	r3, [r1, #16]
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	015a      	lsls	r2, r3, #5
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	4413      	add	r3, r2
 800528e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005292:	691a      	ldr	r2, [r3, #16]
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	69db      	ldr	r3, [r3, #28]
 8005298:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800529c:	69b9      	ldr	r1, [r7, #24]
 800529e:	0148      	lsls	r0, r1, #5
 80052a0:	69f9      	ldr	r1, [r7, #28]
 80052a2:	4401      	add	r1, r0
 80052a4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80052a8:	4313      	orrs	r3, r2
 80052aa:	610b      	str	r3, [r1, #16]
 80052ac:	79fb      	ldrb	r3, [r7, #7]
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d10d      	bne.n	80052ce <USB_EPStartXfer+0x406>
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d009      	beq.n	80052ce <USB_EPStartXfer+0x406>
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	6919      	ldr	r1, [r3, #16]
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	015a      	lsls	r2, r3, #5
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	4413      	add	r3, r2
 80052c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052ca:	460a      	mov	r2, r1
 80052cc:	615a      	str	r2, [r3, #20]
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	791b      	ldrb	r3, [r3, #4]
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d128      	bne.n	8005328 <USB_EPStartXfer+0x460>
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d110      	bne.n	8005308 <USB_EPStartXfer+0x440>
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	015a      	lsls	r2, r3, #5
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	4413      	add	r3, r2
 80052ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	69ba      	ldr	r2, [r7, #24]
 80052f6:	0151      	lsls	r1, r2, #5
 80052f8:	69fa      	ldr	r2, [r7, #28]
 80052fa:	440a      	add	r2, r1
 80052fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005300:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005304:	6013      	str	r3, [r2, #0]
 8005306:	e00f      	b.n	8005328 <USB_EPStartXfer+0x460>
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	015a      	lsls	r2, r3, #5
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	4413      	add	r3, r2
 8005310:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	69ba      	ldr	r2, [r7, #24]
 8005318:	0151      	lsls	r1, r2, #5
 800531a:	69fa      	ldr	r2, [r7, #28]
 800531c:	440a      	add	r2, r1
 800531e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005322:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005326:	6013      	str	r3, [r2, #0]
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	015a      	lsls	r2, r3, #5
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	4413      	add	r3, r2
 8005330:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	69ba      	ldr	r2, [r7, #24]
 8005338:	0151      	lsls	r1, r2, #5
 800533a:	69fa      	ldr	r2, [r7, #28]
 800533c:	440a      	add	r2, r1
 800533e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005342:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005346:	6013      	str	r3, [r2, #0]
 8005348:	2300      	movs	r3, #0
 800534a:	4618      	mov	r0, r3
 800534c:	3720      	adds	r7, #32
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	1ff80000 	.word	0x1ff80000

08005358 <USB_EP0StartXfer>:
 8005358:	b480      	push	{r7}
 800535a:	b087      	sub	sp, #28
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	4613      	mov	r3, r2
 8005364:	71fb      	strb	r3, [r7, #7]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	617b      	str	r3, [r7, #20]
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	613b      	str	r3, [r7, #16]
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	785b      	ldrb	r3, [r3, #1]
 8005374:	2b01      	cmp	r3, #1
 8005376:	f040 80ce 	bne.w	8005516 <USB_EP0StartXfer+0x1be>
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	699b      	ldr	r3, [r3, #24]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d132      	bne.n	80053e8 <USB_EP0StartXfer+0x90>
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	015a      	lsls	r2, r3, #5
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	4413      	add	r3, r2
 800538a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	693a      	ldr	r2, [r7, #16]
 8005392:	0151      	lsls	r1, r2, #5
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	440a      	add	r2, r1
 8005398:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800539c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80053a0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80053a4:	6113      	str	r3, [r2, #16]
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	015a      	lsls	r2, r3, #5
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	4413      	add	r3, r2
 80053ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	693a      	ldr	r2, [r7, #16]
 80053b6:	0151      	lsls	r1, r2, #5
 80053b8:	697a      	ldr	r2, [r7, #20]
 80053ba:	440a      	add	r2, r1
 80053bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80053c4:	6113      	str	r3, [r2, #16]
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	015a      	lsls	r2, r3, #5
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	4413      	add	r3, r2
 80053ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	693a      	ldr	r2, [r7, #16]
 80053d6:	0151      	lsls	r1, r2, #5
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	440a      	add	r2, r1
 80053dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053e0:	0cdb      	lsrs	r3, r3, #19
 80053e2:	04db      	lsls	r3, r3, #19
 80053e4:	6113      	str	r3, [r2, #16]
 80053e6:	e04e      	b.n	8005486 <USB_EP0StartXfer+0x12e>
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	015a      	lsls	r2, r3, #5
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	4413      	add	r3, r2
 80053f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	693a      	ldr	r2, [r7, #16]
 80053f8:	0151      	lsls	r1, r2, #5
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	440a      	add	r2, r1
 80053fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005402:	0cdb      	lsrs	r3, r3, #19
 8005404:	04db      	lsls	r3, r3, #19
 8005406:	6113      	str	r3, [r2, #16]
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	015a      	lsls	r2, r3, #5
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	4413      	add	r3, r2
 8005410:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	693a      	ldr	r2, [r7, #16]
 8005418:	0151      	lsls	r1, r2, #5
 800541a:	697a      	ldr	r2, [r7, #20]
 800541c:	440a      	add	r2, r1
 800541e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005422:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005426:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800542a:	6113      	str	r3, [r2, #16]
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	699a      	ldr	r2, [r3, #24]
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	429a      	cmp	r2, r3
 8005436:	d903      	bls.n	8005440 <USB_EP0StartXfer+0xe8>
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	68da      	ldr	r2, [r3, #12]
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	619a      	str	r2, [r3, #24]
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	015a      	lsls	r2, r3, #5
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	4413      	add	r3, r2
 8005448:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	693a      	ldr	r2, [r7, #16]
 8005450:	0151      	lsls	r1, r2, #5
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	440a      	add	r2, r1
 8005456:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800545a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800545e:	6113      	str	r3, [r2, #16]
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	015a      	lsls	r2, r3, #5
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	4413      	add	r3, r2
 8005468:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800546c:	691a      	ldr	r2, [r3, #16]
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005476:	6939      	ldr	r1, [r7, #16]
 8005478:	0148      	lsls	r0, r1, #5
 800547a:	6979      	ldr	r1, [r7, #20]
 800547c:	4401      	add	r1, r0
 800547e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005482:	4313      	orrs	r3, r2
 8005484:	610b      	str	r3, [r1, #16]
 8005486:	79fb      	ldrb	r3, [r7, #7]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d11e      	bne.n	80054ca <USB_EP0StartXfer+0x172>
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	695b      	ldr	r3, [r3, #20]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d009      	beq.n	80054a8 <USB_EP0StartXfer+0x150>
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	015a      	lsls	r2, r3, #5
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	4413      	add	r3, r2
 800549c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054a0:	461a      	mov	r2, r3
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	6153      	str	r3, [r2, #20]
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	015a      	lsls	r2, r3, #5
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	4413      	add	r3, r2
 80054b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	0151      	lsls	r1, r2, #5
 80054ba:	697a      	ldr	r2, [r7, #20]
 80054bc:	440a      	add	r2, r1
 80054be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054c2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80054c6:	6013      	str	r3, [r2, #0]
 80054c8:	e097      	b.n	80055fa <USB_EP0StartXfer+0x2a2>
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	015a      	lsls	r2, r3, #5
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	4413      	add	r3, r2
 80054d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	693a      	ldr	r2, [r7, #16]
 80054da:	0151      	lsls	r1, r2, #5
 80054dc:	697a      	ldr	r2, [r7, #20]
 80054de:	440a      	add	r2, r1
 80054e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054e4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80054e8:	6013      	str	r3, [r2, #0]
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	f000 8083 	beq.w	80055fa <USB_EP0StartXfer+0x2a2>
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	f003 030f 	and.w	r3, r3, #15
 8005504:	2101      	movs	r1, #1
 8005506:	fa01 f303 	lsl.w	r3, r1, r3
 800550a:	6979      	ldr	r1, [r7, #20]
 800550c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005510:	4313      	orrs	r3, r2
 8005512:	634b      	str	r3, [r1, #52]	@ 0x34
 8005514:	e071      	b.n	80055fa <USB_EP0StartXfer+0x2a2>
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	015a      	lsls	r2, r3, #5
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	4413      	add	r3, r2
 800551e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	693a      	ldr	r2, [r7, #16]
 8005526:	0151      	lsls	r1, r2, #5
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	440a      	add	r2, r1
 800552c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005530:	0cdb      	lsrs	r3, r3, #19
 8005532:	04db      	lsls	r3, r3, #19
 8005534:	6113      	str	r3, [r2, #16]
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	015a      	lsls	r2, r3, #5
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	4413      	add	r3, r2
 800553e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	693a      	ldr	r2, [r7, #16]
 8005546:	0151      	lsls	r1, r2, #5
 8005548:	697a      	ldr	r2, [r7, #20]
 800554a:	440a      	add	r2, r1
 800554c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005550:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005554:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005558:	6113      	str	r3, [r2, #16]
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d003      	beq.n	800556a <USB_EP0StartXfer+0x212>
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	68da      	ldr	r2, [r3, #12]
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	619a      	str	r2, [r3, #24]
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	68da      	ldr	r2, [r3, #12]
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	61da      	str	r2, [r3, #28]
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	015a      	lsls	r2, r3, #5
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	4413      	add	r3, r2
 800557a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800557e:	691b      	ldr	r3, [r3, #16]
 8005580:	693a      	ldr	r2, [r7, #16]
 8005582:	0151      	lsls	r1, r2, #5
 8005584:	697a      	ldr	r2, [r7, #20]
 8005586:	440a      	add	r2, r1
 8005588:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800558c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005590:	6113      	str	r3, [r2, #16]
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	015a      	lsls	r2, r3, #5
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	4413      	add	r3, r2
 800559a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800559e:	691a      	ldr	r2, [r3, #16]
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	69db      	ldr	r3, [r3, #28]
 80055a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055a8:	6939      	ldr	r1, [r7, #16]
 80055aa:	0148      	lsls	r0, r1, #5
 80055ac:	6979      	ldr	r1, [r7, #20]
 80055ae:	4401      	add	r1, r0
 80055b0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80055b4:	4313      	orrs	r3, r2
 80055b6:	610b      	str	r3, [r1, #16]
 80055b8:	79fb      	ldrb	r3, [r7, #7]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d10d      	bne.n	80055da <USB_EP0StartXfer+0x282>
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d009      	beq.n	80055da <USB_EP0StartXfer+0x282>
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	6919      	ldr	r1, [r3, #16]
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	015a      	lsls	r2, r3, #5
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	4413      	add	r3, r2
 80055d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055d6:	460a      	mov	r2, r1
 80055d8:	615a      	str	r2, [r3, #20]
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	015a      	lsls	r2, r3, #5
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	4413      	add	r3, r2
 80055e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	0151      	lsls	r1, r2, #5
 80055ec:	697a      	ldr	r2, [r7, #20]
 80055ee:	440a      	add	r2, r1
 80055f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055f4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80055f8:	6013      	str	r3, [r2, #0]
 80055fa:	2300      	movs	r3, #0
 80055fc:	4618      	mov	r0, r3
 80055fe:	371c      	adds	r7, #28
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <USB_EPStopXfer>:
 8005608:	b480      	push	{r7}
 800560a:	b087      	sub	sp, #28
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
 8005612:	2300      	movs	r3, #0
 8005614:	60fb      	str	r3, [r7, #12]
 8005616:	2300      	movs	r3, #0
 8005618:	75fb      	strb	r3, [r7, #23]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	613b      	str	r3, [r7, #16]
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	785b      	ldrb	r3, [r3, #1]
 8005622:	2b01      	cmp	r3, #1
 8005624:	d14a      	bne.n	80056bc <USB_EPStopXfer+0xb4>
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	015a      	lsls	r2, r3, #5
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	4413      	add	r3, r2
 8005630:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800563a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800563e:	f040 8086 	bne.w	800574e <USB_EPStopXfer+0x146>
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	015a      	lsls	r2, r3, #5
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	4413      	add	r3, r2
 800564c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	683a      	ldr	r2, [r7, #0]
 8005654:	7812      	ldrb	r2, [r2, #0]
 8005656:	0151      	lsls	r1, r2, #5
 8005658:	693a      	ldr	r2, [r7, #16]
 800565a:	440a      	add	r2, r1
 800565c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005660:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005664:	6013      	str	r3, [r2, #0]
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	015a      	lsls	r2, r3, #5
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	4413      	add	r3, r2
 8005670:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	683a      	ldr	r2, [r7, #0]
 8005678:	7812      	ldrb	r2, [r2, #0]
 800567a:	0151      	lsls	r1, r2, #5
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	440a      	add	r2, r1
 8005680:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005684:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005688:	6013      	str	r3, [r2, #0]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	3301      	adds	r3, #1
 800568e:	60fb      	str	r3, [r7, #12]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005696:	4293      	cmp	r3, r2
 8005698:	d902      	bls.n	80056a0 <USB_EPStopXfer+0x98>
 800569a:	2301      	movs	r3, #1
 800569c:	75fb      	strb	r3, [r7, #23]
 800569e:	e056      	b.n	800574e <USB_EPStopXfer+0x146>
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	015a      	lsls	r2, r3, #5
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	4413      	add	r3, r2
 80056aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80056b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056b8:	d0e7      	beq.n	800568a <USB_EPStopXfer+0x82>
 80056ba:	e048      	b.n	800574e <USB_EPStopXfer+0x146>
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	015a      	lsls	r2, r3, #5
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	4413      	add	r3, r2
 80056c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80056d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056d4:	d13b      	bne.n	800574e <USB_EPStopXfer+0x146>
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	015a      	lsls	r2, r3, #5
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	4413      	add	r3, r2
 80056e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	683a      	ldr	r2, [r7, #0]
 80056e8:	7812      	ldrb	r2, [r2, #0]
 80056ea:	0151      	lsls	r1, r2, #5
 80056ec:	693a      	ldr	r2, [r7, #16]
 80056ee:	440a      	add	r2, r1
 80056f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056f4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80056f8:	6013      	str	r3, [r2, #0]
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	015a      	lsls	r2, r3, #5
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	4413      	add	r3, r2
 8005704:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	683a      	ldr	r2, [r7, #0]
 800570c:	7812      	ldrb	r2, [r2, #0]
 800570e:	0151      	lsls	r1, r2, #5
 8005710:	693a      	ldr	r2, [r7, #16]
 8005712:	440a      	add	r2, r1
 8005714:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005718:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800571c:	6013      	str	r3, [r2, #0]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	3301      	adds	r3, #1
 8005722:	60fb      	str	r3, [r7, #12]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f242 7210 	movw	r2, #10000	@ 0x2710
 800572a:	4293      	cmp	r3, r2
 800572c:	d902      	bls.n	8005734 <USB_EPStopXfer+0x12c>
 800572e:	2301      	movs	r3, #1
 8005730:	75fb      	strb	r3, [r7, #23]
 8005732:	e00c      	b.n	800574e <USB_EPStopXfer+0x146>
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	015a      	lsls	r2, r3, #5
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	4413      	add	r3, r2
 800573e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005748:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800574c:	d0e7      	beq.n	800571e <USB_EPStopXfer+0x116>
 800574e:	7dfb      	ldrb	r3, [r7, #23]
 8005750:	4618      	mov	r0, r3
 8005752:	371c      	adds	r7, #28
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <USB_WritePacket>:
 800575c:	b480      	push	{r7}
 800575e:	b089      	sub	sp, #36	@ 0x24
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	4611      	mov	r1, r2
 8005768:	461a      	mov	r2, r3
 800576a:	460b      	mov	r3, r1
 800576c:	71fb      	strb	r3, [r7, #7]
 800576e:	4613      	mov	r3, r2
 8005770:	80bb      	strh	r3, [r7, #4]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	617b      	str	r3, [r7, #20]
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	61fb      	str	r3, [r7, #28]
 800577a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800577e:	2b00      	cmp	r3, #0
 8005780:	d123      	bne.n	80057ca <USB_WritePacket+0x6e>
 8005782:	88bb      	ldrh	r3, [r7, #4]
 8005784:	3303      	adds	r3, #3
 8005786:	089b      	lsrs	r3, r3, #2
 8005788:	613b      	str	r3, [r7, #16]
 800578a:	2300      	movs	r3, #0
 800578c:	61bb      	str	r3, [r7, #24]
 800578e:	e018      	b.n	80057c2 <USB_WritePacket+0x66>
 8005790:	79fb      	ldrb	r3, [r7, #7]
 8005792:	031a      	lsls	r2, r3, #12
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	4413      	add	r3, r2
 8005798:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800579c:	461a      	mov	r2, r3
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	6013      	str	r3, [r2, #0]
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	3301      	adds	r3, #1
 80057a8:	61fb      	str	r3, [r7, #28]
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	3301      	adds	r3, #1
 80057ae:	61fb      	str	r3, [r7, #28]
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	3301      	adds	r3, #1
 80057b4:	61fb      	str	r3, [r7, #28]
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	3301      	adds	r3, #1
 80057ba:	61fb      	str	r3, [r7, #28]
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	3301      	adds	r3, #1
 80057c0:	61bb      	str	r3, [r7, #24]
 80057c2:	69ba      	ldr	r2, [r7, #24]
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d3e2      	bcc.n	8005790 <USB_WritePacket+0x34>
 80057ca:	2300      	movs	r3, #0
 80057cc:	4618      	mov	r0, r3
 80057ce:	3724      	adds	r7, #36	@ 0x24
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <USB_ReadPacket>:
 80057d8:	b480      	push	{r7}
 80057da:	b08b      	sub	sp, #44	@ 0x2c
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	4613      	mov	r3, r2
 80057e4:	80fb      	strh	r3, [r7, #6]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	61bb      	str	r3, [r7, #24]
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80057ee:	88fb      	ldrh	r3, [r7, #6]
 80057f0:	089b      	lsrs	r3, r3, #2
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	617b      	str	r3, [r7, #20]
 80057f6:	88fb      	ldrh	r3, [r7, #6]
 80057f8:	f003 0303 	and.w	r3, r3, #3
 80057fc:	83fb      	strh	r3, [r7, #30]
 80057fe:	2300      	movs	r3, #0
 8005800:	623b      	str	r3, [r7, #32]
 8005802:	e014      	b.n	800582e <USB_ReadPacket+0x56>
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800580e:	601a      	str	r2, [r3, #0]
 8005810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005812:	3301      	adds	r3, #1
 8005814:	627b      	str	r3, [r7, #36]	@ 0x24
 8005816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005818:	3301      	adds	r3, #1
 800581a:	627b      	str	r3, [r7, #36]	@ 0x24
 800581c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800581e:	3301      	adds	r3, #1
 8005820:	627b      	str	r3, [r7, #36]	@ 0x24
 8005822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005824:	3301      	adds	r3, #1
 8005826:	627b      	str	r3, [r7, #36]	@ 0x24
 8005828:	6a3b      	ldr	r3, [r7, #32]
 800582a:	3301      	adds	r3, #1
 800582c:	623b      	str	r3, [r7, #32]
 800582e:	6a3a      	ldr	r2, [r7, #32]
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	429a      	cmp	r2, r3
 8005834:	d3e6      	bcc.n	8005804 <USB_ReadPacket+0x2c>
 8005836:	8bfb      	ldrh	r3, [r7, #30]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d01e      	beq.n	800587a <USB_ReadPacket+0xa2>
 800583c:	2300      	movs	r3, #0
 800583e:	623b      	str	r3, [r7, #32]
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005846:	461a      	mov	r2, r3
 8005848:	f107 0310 	add.w	r3, r7, #16
 800584c:	6812      	ldr	r2, [r2, #0]
 800584e:	601a      	str	r2, [r3, #0]
 8005850:	693a      	ldr	r2, [r7, #16]
 8005852:	6a3b      	ldr	r3, [r7, #32]
 8005854:	b2db      	uxtb	r3, r3
 8005856:	00db      	lsls	r3, r3, #3
 8005858:	fa22 f303 	lsr.w	r3, r2, r3
 800585c:	b2da      	uxtb	r2, r3
 800585e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005860:	701a      	strb	r2, [r3, #0]
 8005862:	6a3b      	ldr	r3, [r7, #32]
 8005864:	3301      	adds	r3, #1
 8005866:	623b      	str	r3, [r7, #32]
 8005868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800586a:	3301      	adds	r3, #1
 800586c:	627b      	str	r3, [r7, #36]	@ 0x24
 800586e:	8bfb      	ldrh	r3, [r7, #30]
 8005870:	3b01      	subs	r3, #1
 8005872:	83fb      	strh	r3, [r7, #30]
 8005874:	8bfb      	ldrh	r3, [r7, #30]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1ea      	bne.n	8005850 <USB_ReadPacket+0x78>
 800587a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800587c:	4618      	mov	r0, r3
 800587e:	372c      	adds	r7, #44	@ 0x2c
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <USB_EPSetStall>:
 8005888:	b480      	push	{r7}
 800588a:	b085      	sub	sp, #20
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	60fb      	str	r3, [r7, #12]
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	60bb      	str	r3, [r7, #8]
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	785b      	ldrb	r3, [r3, #1]
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d12c      	bne.n	80058fe <USB_EPSetStall+0x76>
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	015a      	lsls	r2, r3, #5
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	4413      	add	r3, r2
 80058ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	db12      	blt.n	80058dc <USB_EPSetStall+0x54>
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00f      	beq.n	80058dc <USB_EPSetStall+0x54>
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	015a      	lsls	r2, r3, #5
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	4413      	add	r3, r2
 80058c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68ba      	ldr	r2, [r7, #8]
 80058cc:	0151      	lsls	r1, r2, #5
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	440a      	add	r2, r1
 80058d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058d6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80058da:	6013      	str	r3, [r2, #0]
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	015a      	lsls	r2, r3, #5
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	4413      	add	r3, r2
 80058e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68ba      	ldr	r2, [r7, #8]
 80058ec:	0151      	lsls	r1, r2, #5
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	440a      	add	r2, r1
 80058f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058f6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80058fa:	6013      	str	r3, [r2, #0]
 80058fc:	e02b      	b.n	8005956 <USB_EPSetStall+0xce>
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	015a      	lsls	r2, r3, #5
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	4413      	add	r3, r2
 8005906:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	db12      	blt.n	8005936 <USB_EPSetStall+0xae>
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00f      	beq.n	8005936 <USB_EPSetStall+0xae>
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	015a      	lsls	r2, r3, #5
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	4413      	add	r3, r2
 800591e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68ba      	ldr	r2, [r7, #8]
 8005926:	0151      	lsls	r1, r2, #5
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	440a      	add	r2, r1
 800592c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005930:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005934:	6013      	str	r3, [r2, #0]
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	015a      	lsls	r2, r3, #5
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	4413      	add	r3, r2
 800593e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68ba      	ldr	r2, [r7, #8]
 8005946:	0151      	lsls	r1, r2, #5
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	440a      	add	r2, r1
 800594c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005950:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005954:	6013      	str	r3, [r2, #0]
 8005956:	2300      	movs	r3, #0
 8005958:	4618      	mov	r0, r3
 800595a:	3714      	adds	r7, #20
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <USB_EPClearStall>:
 8005964:	b480      	push	{r7}
 8005966:	b085      	sub	sp, #20
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	60fb      	str	r3, [r7, #12]
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	60bb      	str	r3, [r7, #8]
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	785b      	ldrb	r3, [r3, #1]
 800597c:	2b01      	cmp	r3, #1
 800597e:	d128      	bne.n	80059d2 <USB_EPClearStall+0x6e>
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	015a      	lsls	r2, r3, #5
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	4413      	add	r3, r2
 8005988:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	68ba      	ldr	r2, [r7, #8]
 8005990:	0151      	lsls	r1, r2, #5
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	440a      	add	r2, r1
 8005996:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800599a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800599e:	6013      	str	r3, [r2, #0]
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	791b      	ldrb	r3, [r3, #4]
 80059a4:	2b03      	cmp	r3, #3
 80059a6:	d003      	beq.n	80059b0 <USB_EPClearStall+0x4c>
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	791b      	ldrb	r3, [r3, #4]
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	d138      	bne.n	8005a22 <USB_EPClearStall+0xbe>
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	015a      	lsls	r2, r3, #5
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	4413      	add	r3, r2
 80059b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	68ba      	ldr	r2, [r7, #8]
 80059c0:	0151      	lsls	r1, r2, #5
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	440a      	add	r2, r1
 80059c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059ce:	6013      	str	r3, [r2, #0]
 80059d0:	e027      	b.n	8005a22 <USB_EPClearStall+0xbe>
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	015a      	lsls	r2, r3, #5
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	4413      	add	r3, r2
 80059da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68ba      	ldr	r2, [r7, #8]
 80059e2:	0151      	lsls	r1, r2, #5
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	440a      	add	r2, r1
 80059e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059ec:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80059f0:	6013      	str	r3, [r2, #0]
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	791b      	ldrb	r3, [r3, #4]
 80059f6:	2b03      	cmp	r3, #3
 80059f8:	d003      	beq.n	8005a02 <USB_EPClearStall+0x9e>
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	791b      	ldrb	r3, [r3, #4]
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	d10f      	bne.n	8005a22 <USB_EPClearStall+0xbe>
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	015a      	lsls	r2, r3, #5
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	4413      	add	r3, r2
 8005a0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68ba      	ldr	r2, [r7, #8]
 8005a12:	0151      	lsls	r1, r2, #5
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	440a      	add	r2, r1
 8005a18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a20:	6013      	str	r3, [r2, #0]
 8005a22:	2300      	movs	r3, #0
 8005a24:	4618      	mov	r0, r3
 8005a26:	3714      	adds	r7, #20
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr

08005a30 <USB_SetDevAddress>:
 8005a30:	b480      	push	{r7}
 8005a32:	b085      	sub	sp, #20
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	460b      	mov	r3, r1
 8005a3a:	70fb      	strb	r3, [r7, #3]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	60fb      	str	r3, [r7, #12]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a4e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005a52:	6013      	str	r3, [r2, #0]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	78fb      	ldrb	r3, [r7, #3]
 8005a5e:	011b      	lsls	r3, r3, #4
 8005a60:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005a64:	68f9      	ldr	r1, [r7, #12]
 8005a66:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	600b      	str	r3, [r1, #0]
 8005a6e:	2300      	movs	r3, #0
 8005a70:	4618      	mov	r0, r3
 8005a72:	3714      	adds	r7, #20
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <USB_DevConnect>:
 8005a7c:	b480      	push	{r7}
 8005a7e:	b085      	sub	sp, #20
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	60fb      	str	r3, [r7, #12]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005a96:	f023 0303 	bic.w	r3, r3, #3
 8005a9a:	6013      	str	r3, [r2, #0]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005aaa:	f023 0302 	bic.w	r3, r3, #2
 8005aae:	6053      	str	r3, [r2, #4]
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3714      	adds	r7, #20
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr

08005abe <USB_DevDisconnect>:
 8005abe:	b480      	push	{r7}
 8005ac0:	b085      	sub	sp, #20
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	60fb      	str	r3, [r7, #12]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005ad8:	f023 0303 	bic.w	r3, r3, #3
 8005adc:	6013      	str	r3, [r2, #0]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005aec:	f043 0302 	orr.w	r3, r3, #2
 8005af0:	6053      	str	r3, [r2, #4]
 8005af2:	2300      	movs	r3, #0
 8005af4:	4618      	mov	r0, r3
 8005af6:	3714      	adds	r7, #20
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <USB_ReadInterrupts>:
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	695b      	ldr	r3, [r3, #20]
 8005b0c:	60fb      	str	r3, [r7, #12]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	4013      	ands	r3, r2
 8005b16:	60fb      	str	r3, [r7, #12]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3714      	adds	r7, #20
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr

08005b26 <USB_ReadDevAllOutEpInterrupt>:
 8005b26:	b480      	push	{r7}
 8005b28:	b085      	sub	sp, #20
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	60fb      	str	r3, [r7, #12]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	60bb      	str	r3, [r7, #8]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b42:	69db      	ldr	r3, [r3, #28]
 8005b44:	68ba      	ldr	r2, [r7, #8]
 8005b46:	4013      	ands	r3, r2
 8005b48:	60bb      	str	r3, [r7, #8]
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	0c1b      	lsrs	r3, r3, #16
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3714      	adds	r7, #20
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr

08005b5a <USB_ReadDevAllInEpInterrupt>:
 8005b5a:	b480      	push	{r7}
 8005b5c:	b085      	sub	sp, #20
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	60fb      	str	r3, [r7, #12]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	60bb      	str	r3, [r7, #8]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b76:	69db      	ldr	r3, [r3, #28]
 8005b78:	68ba      	ldr	r2, [r7, #8]
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	60bb      	str	r3, [r7, #8]
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	4618      	mov	r0, r3
 8005b84:	3714      	adds	r7, #20
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr

08005b8e <USB_ReadDevOutEPInterrupt>:
 8005b8e:	b480      	push	{r7}
 8005b90:	b085      	sub	sp, #20
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
 8005b96:	460b      	mov	r3, r1
 8005b98:	70fb      	strb	r3, [r7, #3]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	60fb      	str	r3, [r7, #12]
 8005b9e:	78fb      	ldrb	r3, [r7, #3]
 8005ba0:	015a      	lsls	r2, r3, #5
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	60bb      	str	r3, [r7, #8]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bb4:	695b      	ldr	r3, [r3, #20]
 8005bb6:	68ba      	ldr	r2, [r7, #8]
 8005bb8:	4013      	ands	r3, r2
 8005bba:	60bb      	str	r3, [r7, #8]
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3714      	adds	r7, #20
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr

08005bca <USB_ReadDevInEPInterrupt>:
 8005bca:	b480      	push	{r7}
 8005bcc:	b087      	sub	sp, #28
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	70fb      	strb	r3, [r7, #3]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	617b      	str	r3, [r7, #20]
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	613b      	str	r3, [r7, #16]
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bec:	60fb      	str	r3, [r7, #12]
 8005bee:	78fb      	ldrb	r3, [r7, #3]
 8005bf0:	f003 030f 	and.w	r3, r3, #15
 8005bf4:	68fa      	ldr	r2, [r7, #12]
 8005bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8005bfa:	01db      	lsls	r3, r3, #7
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	613b      	str	r3, [r7, #16]
 8005c04:	78fb      	ldrb	r3, [r7, #3]
 8005c06:	015a      	lsls	r2, r3, #5
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	4013      	ands	r3, r2
 8005c16:	60bb      	str	r3, [r7, #8]
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	371c      	adds	r7, #28
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <USB_GetMode>:
 8005c26:	b480      	push	{r7}
 8005c28:	b083      	sub	sp, #12
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	695b      	ldr	r3, [r3, #20]
 8005c32:	f003 0301 	and.w	r3, r3, #1
 8005c36:	4618      	mov	r0, r3
 8005c38:	370c      	adds	r7, #12
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr

08005c42 <USB_ActivateSetup>:
 8005c42:	b480      	push	{r7}
 8005c44:	b085      	sub	sp, #20
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	60fb      	str	r3, [r7, #12]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c5c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005c60:	f023 0307 	bic.w	r3, r3, #7
 8005c64:	6013      	str	r3, [r2, #0]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c78:	6053      	str	r3, [r2, #4]
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3714      	adds	r7, #20
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <USB_EP0_OutStart>:
 8005c88:	b480      	push	{r7}
 8005c8a:	b087      	sub	sp, #28
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	460b      	mov	r3, r1
 8005c92:	607a      	str	r2, [r7, #4]
 8005c94:	72fb      	strb	r3, [r7, #11]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	617b      	str	r3, [r7, #20]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	333c      	adds	r3, #60	@ 0x3c
 8005c9e:	3304      	adds	r3, #4
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	613b      	str	r3, [r7, #16]
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	4a26      	ldr	r2, [pc, #152]	@ (8005d40 <USB_EP0_OutStart+0xb8>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d90a      	bls.n	8005cc2 <USB_EP0_OutStart+0x3a>
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005cb8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005cbc:	d101      	bne.n	8005cc2 <USB_EP0_OutStart+0x3a>
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	e037      	b.n	8005d32 <USB_EP0_OutStart+0xaa>
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cc8:	461a      	mov	r2, r3
 8005cca:	2300      	movs	r3, #0
 8005ccc:	6113      	str	r3, [r2, #16]
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cdc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005ce0:	6113      	str	r3, [r2, #16]
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cf0:	f043 0318 	orr.w	r3, r3, #24
 8005cf4:	6113      	str	r3, [r2, #16]
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	697a      	ldr	r2, [r7, #20]
 8005d00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d04:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005d08:	6113      	str	r3, [r2, #16]
 8005d0a:	7afb      	ldrb	r3, [r7, #11]
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d10f      	bne.n	8005d30 <USB_EP0_OutStart+0xa8>
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d16:	461a      	mov	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6153      	str	r3, [r2, #20]
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	697a      	ldr	r2, [r7, #20]
 8005d26:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d2a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005d2e:	6013      	str	r3, [r2, #0]
 8005d30:	2300      	movs	r3, #0
 8005d32:	4618      	mov	r0, r3
 8005d34:	371c      	adds	r7, #28
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	4f54300a 	.word	0x4f54300a

08005d44 <USB_CoreReset>:
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	60fb      	str	r3, [r7, #12]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	3301      	adds	r3, #1
 8005d54:	60fb      	str	r3, [r7, #12]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	4a13      	ldr	r2, [pc, #76]	@ (8005da8 <USB_CoreReset+0x64>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d901      	bls.n	8005d62 <USB_CoreReset+0x1e>
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e01b      	b.n	8005d9a <USB_CoreReset+0x56>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	daf2      	bge.n	8005d50 <USB_CoreReset+0xc>
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	60fb      	str	r3, [r7, #12]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	f043 0201 	orr.w	r2, r3, #1
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	611a      	str	r2, [r3, #16]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	60fb      	str	r3, [r7, #12]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	4a09      	ldr	r2, [pc, #36]	@ (8005da8 <USB_CoreReset+0x64>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d901      	bls.n	8005d8c <USB_CoreReset+0x48>
 8005d88:	2303      	movs	r3, #3
 8005d8a:	e006      	b.n	8005d9a <USB_CoreReset+0x56>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	f003 0301 	and.w	r3, r3, #1
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d0f0      	beq.n	8005d7a <USB_CoreReset+0x36>
 8005d98:	2300      	movs	r3, #0
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3714      	adds	r7, #20
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr
 8005da6:	bf00      	nop
 8005da8:	00030d40 	.word	0x00030d40

08005dac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	460b      	mov	r3, r1
 8005db6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005db8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005dbc:	f002 fca0 	bl	8008700 <USBD_static_malloc>
 8005dc0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d109      	bne.n	8005ddc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	32b0      	adds	r2, #176	@ 0xb0
 8005dd2:	2100      	movs	r1, #0
 8005dd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005dd8:	2302      	movs	r3, #2
 8005dda:	e0d4      	b.n	8005f86 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005ddc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005de0:	2100      	movs	r1, #0
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	f002 fcf0 	bl	80087c8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	32b0      	adds	r2, #176	@ 0xb0
 8005df2:	68f9      	ldr	r1, [r7, #12]
 8005df4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	32b0      	adds	r2, #176	@ 0xb0
 8005e02:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	7c1b      	ldrb	r3, [r3, #16]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d138      	bne.n	8005e86 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005e14:	4b5e      	ldr	r3, [pc, #376]	@ (8005f90 <USBD_CDC_Init+0x1e4>)
 8005e16:	7819      	ldrb	r1, [r3, #0]
 8005e18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005e1c:	2202      	movs	r2, #2
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f002 fb4b 	bl	80084ba <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005e24:	4b5a      	ldr	r3, [pc, #360]	@ (8005f90 <USBD_CDC_Init+0x1e4>)
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	f003 020f 	and.w	r2, r3, #15
 8005e2c:	6879      	ldr	r1, [r7, #4]
 8005e2e:	4613      	mov	r3, r2
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	4413      	add	r3, r2
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	440b      	add	r3, r1
 8005e38:	3324      	adds	r3, #36	@ 0x24
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005e3e:	4b55      	ldr	r3, [pc, #340]	@ (8005f94 <USBD_CDC_Init+0x1e8>)
 8005e40:	7819      	ldrb	r1, [r3, #0]
 8005e42:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005e46:	2202      	movs	r2, #2
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f002 fb36 	bl	80084ba <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005e4e:	4b51      	ldr	r3, [pc, #324]	@ (8005f94 <USBD_CDC_Init+0x1e8>)
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	f003 020f 	and.w	r2, r3, #15
 8005e56:	6879      	ldr	r1, [r7, #4]
 8005e58:	4613      	mov	r3, r2
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	4413      	add	r3, r2
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	440b      	add	r3, r1
 8005e62:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005e66:	2201      	movs	r2, #1
 8005e68:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005e6a:	4b4b      	ldr	r3, [pc, #300]	@ (8005f98 <USBD_CDC_Init+0x1ec>)
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	f003 020f 	and.w	r2, r3, #15
 8005e72:	6879      	ldr	r1, [r7, #4]
 8005e74:	4613      	mov	r3, r2
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	4413      	add	r3, r2
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	440b      	add	r3, r1
 8005e7e:	3326      	adds	r3, #38	@ 0x26
 8005e80:	2210      	movs	r2, #16
 8005e82:	801a      	strh	r2, [r3, #0]
 8005e84:	e035      	b.n	8005ef2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005e86:	4b42      	ldr	r3, [pc, #264]	@ (8005f90 <USBD_CDC_Init+0x1e4>)
 8005e88:	7819      	ldrb	r1, [r3, #0]
 8005e8a:	2340      	movs	r3, #64	@ 0x40
 8005e8c:	2202      	movs	r2, #2
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f002 fb13 	bl	80084ba <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005e94:	4b3e      	ldr	r3, [pc, #248]	@ (8005f90 <USBD_CDC_Init+0x1e4>)
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	f003 020f 	and.w	r2, r3, #15
 8005e9c:	6879      	ldr	r1, [r7, #4]
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	4413      	add	r3, r2
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	440b      	add	r3, r1
 8005ea8:	3324      	adds	r3, #36	@ 0x24
 8005eaa:	2201      	movs	r2, #1
 8005eac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005eae:	4b39      	ldr	r3, [pc, #228]	@ (8005f94 <USBD_CDC_Init+0x1e8>)
 8005eb0:	7819      	ldrb	r1, [r3, #0]
 8005eb2:	2340      	movs	r3, #64	@ 0x40
 8005eb4:	2202      	movs	r2, #2
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f002 faff 	bl	80084ba <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005ebc:	4b35      	ldr	r3, [pc, #212]	@ (8005f94 <USBD_CDC_Init+0x1e8>)
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	f003 020f 	and.w	r2, r3, #15
 8005ec4:	6879      	ldr	r1, [r7, #4]
 8005ec6:	4613      	mov	r3, r2
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	4413      	add	r3, r2
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	440b      	add	r3, r1
 8005ed0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005ed8:	4b2f      	ldr	r3, [pc, #188]	@ (8005f98 <USBD_CDC_Init+0x1ec>)
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	f003 020f 	and.w	r2, r3, #15
 8005ee0:	6879      	ldr	r1, [r7, #4]
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	4413      	add	r3, r2
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	440b      	add	r3, r1
 8005eec:	3326      	adds	r3, #38	@ 0x26
 8005eee:	2210      	movs	r2, #16
 8005ef0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005ef2:	4b29      	ldr	r3, [pc, #164]	@ (8005f98 <USBD_CDC_Init+0x1ec>)
 8005ef4:	7819      	ldrb	r1, [r3, #0]
 8005ef6:	2308      	movs	r3, #8
 8005ef8:	2203      	movs	r2, #3
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f002 fadd 	bl	80084ba <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005f00:	4b25      	ldr	r3, [pc, #148]	@ (8005f98 <USBD_CDC_Init+0x1ec>)
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	f003 020f 	and.w	r2, r3, #15
 8005f08:	6879      	ldr	r1, [r7, #4]
 8005f0a:	4613      	mov	r3, r2
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	4413      	add	r3, r2
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	440b      	add	r3, r1
 8005f14:	3324      	adds	r3, #36	@ 0x24
 8005f16:	2201      	movs	r2, #1
 8005f18:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	33b0      	adds	r3, #176	@ 0xb0
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	4413      	add	r3, r2
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d101      	bne.n	8005f54 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005f50:	2302      	movs	r3, #2
 8005f52:	e018      	b.n	8005f86 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	7c1b      	ldrb	r3, [r3, #16]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d10a      	bne.n	8005f72 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005f5c:	4b0d      	ldr	r3, [pc, #52]	@ (8005f94 <USBD_CDC_Init+0x1e8>)
 8005f5e:	7819      	ldrb	r1, [r3, #0]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005f66:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f002 fb94 	bl	8008698 <USBD_LL_PrepareReceive>
 8005f70:	e008      	b.n	8005f84 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005f72:	4b08      	ldr	r3, [pc, #32]	@ (8005f94 <USBD_CDC_Init+0x1e8>)
 8005f74:	7819      	ldrb	r1, [r3, #0]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005f7c:	2340      	movs	r3, #64	@ 0x40
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f002 fb8a 	bl	8008698 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3710      	adds	r7, #16
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	20000093 	.word	0x20000093
 8005f94:	20000094 	.word	0x20000094
 8005f98:	20000095 	.word	0x20000095

08005f9c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b082      	sub	sp, #8
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005fa8:	4b3a      	ldr	r3, [pc, #232]	@ (8006094 <USBD_CDC_DeInit+0xf8>)
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	4619      	mov	r1, r3
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f002 faa9 	bl	8008506 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005fb4:	4b37      	ldr	r3, [pc, #220]	@ (8006094 <USBD_CDC_DeInit+0xf8>)
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	f003 020f 	and.w	r2, r3, #15
 8005fbc:	6879      	ldr	r1, [r7, #4]
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	4413      	add	r3, r2
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	440b      	add	r3, r1
 8005fc8:	3324      	adds	r3, #36	@ 0x24
 8005fca:	2200      	movs	r2, #0
 8005fcc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005fce:	4b32      	ldr	r3, [pc, #200]	@ (8006098 <USBD_CDC_DeInit+0xfc>)
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f002 fa96 	bl	8008506 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005fda:	4b2f      	ldr	r3, [pc, #188]	@ (8006098 <USBD_CDC_DeInit+0xfc>)
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	f003 020f 	and.w	r2, r3, #15
 8005fe2:	6879      	ldr	r1, [r7, #4]
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	4413      	add	r3, r2
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	440b      	add	r3, r1
 8005fee:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005ff6:	4b29      	ldr	r3, [pc, #164]	@ (800609c <USBD_CDC_DeInit+0x100>)
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f002 fa82 	bl	8008506 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006002:	4b26      	ldr	r3, [pc, #152]	@ (800609c <USBD_CDC_DeInit+0x100>)
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	f003 020f 	and.w	r2, r3, #15
 800600a:	6879      	ldr	r1, [r7, #4]
 800600c:	4613      	mov	r3, r2
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	4413      	add	r3, r2
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	440b      	add	r3, r1
 8006016:	3324      	adds	r3, #36	@ 0x24
 8006018:	2200      	movs	r2, #0
 800601a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800601c:	4b1f      	ldr	r3, [pc, #124]	@ (800609c <USBD_CDC_DeInit+0x100>)
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	f003 020f 	and.w	r2, r3, #15
 8006024:	6879      	ldr	r1, [r7, #4]
 8006026:	4613      	mov	r3, r2
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	4413      	add	r3, r2
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	440b      	add	r3, r1
 8006030:	3326      	adds	r3, #38	@ 0x26
 8006032:	2200      	movs	r2, #0
 8006034:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	32b0      	adds	r2, #176	@ 0xb0
 8006040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d01f      	beq.n	8006088 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	33b0      	adds	r3, #176	@ 0xb0
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	4413      	add	r3, r2
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	32b0      	adds	r2, #176	@ 0xb0
 8006066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800606a:	4618      	mov	r0, r3
 800606c:	f002 fb56 	bl	800871c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	32b0      	adds	r2, #176	@ 0xb0
 800607a:	2100      	movs	r1, #0
 800607c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	3708      	adds	r7, #8
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	20000093 	.word	0x20000093
 8006098:	20000094 	.word	0x20000094
 800609c:	20000095 	.word	0x20000095

080060a0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b086      	sub	sp, #24
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	32b0      	adds	r2, #176	@ 0xb0
 80060b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060b8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80060ba:	2300      	movs	r3, #0
 80060bc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80060be:	2300      	movs	r3, #0
 80060c0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80060c2:	2300      	movs	r3, #0
 80060c4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d101      	bne.n	80060d0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e0bf      	b.n	8006250 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d050      	beq.n	800617e <USBD_CDC_Setup+0xde>
 80060dc:	2b20      	cmp	r3, #32
 80060de:	f040 80af 	bne.w	8006240 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	88db      	ldrh	r3, [r3, #6]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d03a      	beq.n	8006160 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	b25b      	sxtb	r3, r3
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	da1b      	bge.n	800612c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	33b0      	adds	r3, #176	@ 0xb0
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	4413      	add	r3, r2
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	683a      	ldr	r2, [r7, #0]
 8006108:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800610a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800610c:	683a      	ldr	r2, [r7, #0]
 800610e:	88d2      	ldrh	r2, [r2, #6]
 8006110:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	88db      	ldrh	r3, [r3, #6]
 8006116:	2b07      	cmp	r3, #7
 8006118:	bf28      	it	cs
 800611a:	2307      	movcs	r3, #7
 800611c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	89fa      	ldrh	r2, [r7, #14]
 8006122:	4619      	mov	r1, r3
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f001 fd87 	bl	8007c38 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800612a:	e090      	b.n	800624e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	785a      	ldrb	r2, [r3, #1]
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	88db      	ldrh	r3, [r3, #6]
 800613a:	2b3f      	cmp	r3, #63	@ 0x3f
 800613c:	d803      	bhi.n	8006146 <USBD_CDC_Setup+0xa6>
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	88db      	ldrh	r3, [r3, #6]
 8006142:	b2da      	uxtb	r2, r3
 8006144:	e000      	b.n	8006148 <USBD_CDC_Setup+0xa8>
 8006146:	2240      	movs	r2, #64	@ 0x40
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800614e:	6939      	ldr	r1, [r7, #16]
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006156:	461a      	mov	r2, r3
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f001 fd99 	bl	8007c90 <USBD_CtlPrepareRx>
      break;
 800615e:	e076      	b.n	800624e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	33b0      	adds	r3, #176	@ 0xb0
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	4413      	add	r3, r2
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	683a      	ldr	r2, [r7, #0]
 8006174:	7850      	ldrb	r0, [r2, #1]
 8006176:	2200      	movs	r2, #0
 8006178:	6839      	ldr	r1, [r7, #0]
 800617a:	4798      	blx	r3
      break;
 800617c:	e067      	b.n	800624e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	785b      	ldrb	r3, [r3, #1]
 8006182:	2b0b      	cmp	r3, #11
 8006184:	d851      	bhi.n	800622a <USBD_CDC_Setup+0x18a>
 8006186:	a201      	add	r2, pc, #4	@ (adr r2, 800618c <USBD_CDC_Setup+0xec>)
 8006188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800618c:	080061bd 	.word	0x080061bd
 8006190:	08006239 	.word	0x08006239
 8006194:	0800622b 	.word	0x0800622b
 8006198:	0800622b 	.word	0x0800622b
 800619c:	0800622b 	.word	0x0800622b
 80061a0:	0800622b 	.word	0x0800622b
 80061a4:	0800622b 	.word	0x0800622b
 80061a8:	0800622b 	.word	0x0800622b
 80061ac:	0800622b 	.word	0x0800622b
 80061b0:	0800622b 	.word	0x0800622b
 80061b4:	080061e7 	.word	0x080061e7
 80061b8:	08006211 	.word	0x08006211
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	2b03      	cmp	r3, #3
 80061c6:	d107      	bne.n	80061d8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80061c8:	f107 030a 	add.w	r3, r7, #10
 80061cc:	2202      	movs	r2, #2
 80061ce:	4619      	mov	r1, r3
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f001 fd31 	bl	8007c38 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80061d6:	e032      	b.n	800623e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80061d8:	6839      	ldr	r1, [r7, #0]
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f001 fcbb 	bl	8007b56 <USBD_CtlError>
            ret = USBD_FAIL;
 80061e0:	2303      	movs	r3, #3
 80061e2:	75fb      	strb	r3, [r7, #23]
          break;
 80061e4:	e02b      	b.n	800623e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	2b03      	cmp	r3, #3
 80061f0:	d107      	bne.n	8006202 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80061f2:	f107 030d 	add.w	r3, r7, #13
 80061f6:	2201      	movs	r2, #1
 80061f8:	4619      	mov	r1, r3
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f001 fd1c 	bl	8007c38 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006200:	e01d      	b.n	800623e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006202:	6839      	ldr	r1, [r7, #0]
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f001 fca6 	bl	8007b56 <USBD_CtlError>
            ret = USBD_FAIL;
 800620a:	2303      	movs	r3, #3
 800620c:	75fb      	strb	r3, [r7, #23]
          break;
 800620e:	e016      	b.n	800623e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006216:	b2db      	uxtb	r3, r3
 8006218:	2b03      	cmp	r3, #3
 800621a:	d00f      	beq.n	800623c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800621c:	6839      	ldr	r1, [r7, #0]
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f001 fc99 	bl	8007b56 <USBD_CtlError>
            ret = USBD_FAIL;
 8006224:	2303      	movs	r3, #3
 8006226:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006228:	e008      	b.n	800623c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800622a:	6839      	ldr	r1, [r7, #0]
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f001 fc92 	bl	8007b56 <USBD_CtlError>
          ret = USBD_FAIL;
 8006232:	2303      	movs	r3, #3
 8006234:	75fb      	strb	r3, [r7, #23]
          break;
 8006236:	e002      	b.n	800623e <USBD_CDC_Setup+0x19e>
          break;
 8006238:	bf00      	nop
 800623a:	e008      	b.n	800624e <USBD_CDC_Setup+0x1ae>
          break;
 800623c:	bf00      	nop
      }
      break;
 800623e:	e006      	b.n	800624e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006240:	6839      	ldr	r1, [r7, #0]
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f001 fc87 	bl	8007b56 <USBD_CtlError>
      ret = USBD_FAIL;
 8006248:	2303      	movs	r3, #3
 800624a:	75fb      	strb	r3, [r7, #23]
      break;
 800624c:	bf00      	nop
  }

  return (uint8_t)ret;
 800624e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006250:	4618      	mov	r0, r3
 8006252:	3718      	adds	r7, #24
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	460b      	mov	r3, r1
 8006262:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800626a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	32b0      	adds	r2, #176	@ 0xb0
 8006276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d101      	bne.n	8006282 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800627e:	2303      	movs	r3, #3
 8006280:	e065      	b.n	800634e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	32b0      	adds	r2, #176	@ 0xb0
 800628c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006290:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006292:	78fb      	ldrb	r3, [r7, #3]
 8006294:	f003 020f 	and.w	r2, r3, #15
 8006298:	6879      	ldr	r1, [r7, #4]
 800629a:	4613      	mov	r3, r2
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	4413      	add	r3, r2
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	440b      	add	r3, r1
 80062a4:	3318      	adds	r3, #24
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d02f      	beq.n	800630c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80062ac:	78fb      	ldrb	r3, [r7, #3]
 80062ae:	f003 020f 	and.w	r2, r3, #15
 80062b2:	6879      	ldr	r1, [r7, #4]
 80062b4:	4613      	mov	r3, r2
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	4413      	add	r3, r2
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	440b      	add	r3, r1
 80062be:	3318      	adds	r3, #24
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	78fb      	ldrb	r3, [r7, #3]
 80062c4:	f003 010f 	and.w	r1, r3, #15
 80062c8:	68f8      	ldr	r0, [r7, #12]
 80062ca:	460b      	mov	r3, r1
 80062cc:	00db      	lsls	r3, r3, #3
 80062ce:	440b      	add	r3, r1
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	4403      	add	r3, r0
 80062d4:	3348      	adds	r3, #72	@ 0x48
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	fbb2 f1f3 	udiv	r1, r2, r3
 80062dc:	fb01 f303 	mul.w	r3, r1, r3
 80062e0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d112      	bne.n	800630c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80062e6:	78fb      	ldrb	r3, [r7, #3]
 80062e8:	f003 020f 	and.w	r2, r3, #15
 80062ec:	6879      	ldr	r1, [r7, #4]
 80062ee:	4613      	mov	r3, r2
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	4413      	add	r3, r2
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	440b      	add	r3, r1
 80062f8:	3318      	adds	r3, #24
 80062fa:	2200      	movs	r2, #0
 80062fc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80062fe:	78f9      	ldrb	r1, [r7, #3]
 8006300:	2300      	movs	r3, #0
 8006302:	2200      	movs	r2, #0
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f002 f9a6 	bl	8008656 <USBD_LL_Transmit>
 800630a:	e01f      	b.n	800634c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	2200      	movs	r2, #0
 8006310:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	33b0      	adds	r3, #176	@ 0xb0
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	4413      	add	r3, r2
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d010      	beq.n	800634c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	33b0      	adds	r3, #176	@ 0xb0
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	4413      	add	r3, r2
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	691b      	ldr	r3, [r3, #16]
 800633c:	68ba      	ldr	r2, [r7, #8]
 800633e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006342:	68ba      	ldr	r2, [r7, #8]
 8006344:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006348:	78fa      	ldrb	r2, [r7, #3]
 800634a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3710      	adds	r7, #16
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}

08006356 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006356:	b580      	push	{r7, lr}
 8006358:	b084      	sub	sp, #16
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
 800635e:	460b      	mov	r3, r1
 8006360:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	32b0      	adds	r2, #176	@ 0xb0
 800636c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006370:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	32b0      	adds	r2, #176	@ 0xb0
 800637c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d101      	bne.n	8006388 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006384:	2303      	movs	r3, #3
 8006386:	e01a      	b.n	80063be <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006388:	78fb      	ldrb	r3, [r7, #3]
 800638a:	4619      	mov	r1, r3
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f002 f9a4 	bl	80086da <USBD_LL_GetRxDataSize>
 8006392:	4602      	mov	r2, r0
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	33b0      	adds	r3, #176	@ 0xb0
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	4413      	add	r3, r2
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80063b8:	4611      	mov	r1, r2
 80063ba:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3710      	adds	r7, #16
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}

080063c6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80063c6:	b580      	push	{r7, lr}
 80063c8:	b084      	sub	sp, #16
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	32b0      	adds	r2, #176	@ 0xb0
 80063d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063dc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d101      	bne.n	80063e8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80063e4:	2303      	movs	r3, #3
 80063e6:	e024      	b.n	8006432 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	33b0      	adds	r3, #176	@ 0xb0
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	4413      	add	r3, r2
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d019      	beq.n	8006430 <USBD_CDC_EP0_RxReady+0x6a>
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006402:	2bff      	cmp	r3, #255	@ 0xff
 8006404:	d014      	beq.n	8006430 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	33b0      	adds	r3, #176	@ 0xb0
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	4413      	add	r3, r2
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800641e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006426:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	22ff      	movs	r2, #255	@ 0xff
 800642c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006430:	2300      	movs	r3, #0
}
 8006432:	4618      	mov	r0, r3
 8006434:	3710      	adds	r7, #16
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
	...

0800643c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b086      	sub	sp, #24
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006444:	2182      	movs	r1, #130	@ 0x82
 8006446:	4818      	ldr	r0, [pc, #96]	@ (80064a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006448:	f000 fd4f 	bl	8006eea <USBD_GetEpDesc>
 800644c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800644e:	2101      	movs	r1, #1
 8006450:	4815      	ldr	r0, [pc, #84]	@ (80064a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006452:	f000 fd4a 	bl	8006eea <USBD_GetEpDesc>
 8006456:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006458:	2181      	movs	r1, #129	@ 0x81
 800645a:	4813      	ldr	r0, [pc, #76]	@ (80064a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800645c:	f000 fd45 	bl	8006eea <USBD_GetEpDesc>
 8006460:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d002      	beq.n	800646e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	2210      	movs	r2, #16
 800646c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d006      	beq.n	8006482 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	2200      	movs	r2, #0
 8006478:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800647c:	711a      	strb	r2, [r3, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d006      	beq.n	8006496 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2200      	movs	r2, #0
 800648c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006490:	711a      	strb	r2, [r3, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2243      	movs	r2, #67	@ 0x43
 800649a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800649c:	4b02      	ldr	r3, [pc, #8]	@ (80064a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3718      	adds	r7, #24
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	20000050 	.word	0x20000050

080064ac <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b086      	sub	sp, #24
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80064b4:	2182      	movs	r1, #130	@ 0x82
 80064b6:	4818      	ldr	r0, [pc, #96]	@ (8006518 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80064b8:	f000 fd17 	bl	8006eea <USBD_GetEpDesc>
 80064bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80064be:	2101      	movs	r1, #1
 80064c0:	4815      	ldr	r0, [pc, #84]	@ (8006518 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80064c2:	f000 fd12 	bl	8006eea <USBD_GetEpDesc>
 80064c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80064c8:	2181      	movs	r1, #129	@ 0x81
 80064ca:	4813      	ldr	r0, [pc, #76]	@ (8006518 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80064cc:	f000 fd0d 	bl	8006eea <USBD_GetEpDesc>
 80064d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d002      	beq.n	80064de <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	2210      	movs	r2, #16
 80064dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d006      	beq.n	80064f2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	2200      	movs	r2, #0
 80064e8:	711a      	strb	r2, [r3, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f042 0202 	orr.w	r2, r2, #2
 80064f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d006      	beq.n	8006506 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2200      	movs	r2, #0
 80064fc:	711a      	strb	r2, [r3, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	f042 0202 	orr.w	r2, r2, #2
 8006504:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2243      	movs	r2, #67	@ 0x43
 800650a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800650c:	4b02      	ldr	r3, [pc, #8]	@ (8006518 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800650e:	4618      	mov	r0, r3
 8006510:	3718      	adds	r7, #24
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	20000050 	.word	0x20000050

0800651c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b086      	sub	sp, #24
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006524:	2182      	movs	r1, #130	@ 0x82
 8006526:	4818      	ldr	r0, [pc, #96]	@ (8006588 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006528:	f000 fcdf 	bl	8006eea <USBD_GetEpDesc>
 800652c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800652e:	2101      	movs	r1, #1
 8006530:	4815      	ldr	r0, [pc, #84]	@ (8006588 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006532:	f000 fcda 	bl	8006eea <USBD_GetEpDesc>
 8006536:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006538:	2181      	movs	r1, #129	@ 0x81
 800653a:	4813      	ldr	r0, [pc, #76]	@ (8006588 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800653c:	f000 fcd5 	bl	8006eea <USBD_GetEpDesc>
 8006540:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d002      	beq.n	800654e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	2210      	movs	r2, #16
 800654c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d006      	beq.n	8006562 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	2200      	movs	r2, #0
 8006558:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800655c:	711a      	strb	r2, [r3, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d006      	beq.n	8006576 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2200      	movs	r2, #0
 800656c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006570:	711a      	strb	r2, [r3, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2243      	movs	r2, #67	@ 0x43
 800657a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800657c:	4b02      	ldr	r3, [pc, #8]	@ (8006588 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800657e:	4618      	mov	r0, r3
 8006580:	3718      	adds	r7, #24
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	20000050 	.word	0x20000050

0800658c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	220a      	movs	r2, #10
 8006598:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800659a:	4b03      	ldr	r3, [pc, #12]	@ (80065a8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800659c:	4618      	mov	r0, r3
 800659e:	370c      	adds	r7, #12
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr
 80065a8:	2000000c 	.word	0x2000000c

080065ac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d101      	bne.n	80065c0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80065bc:	2303      	movs	r3, #3
 80065be:	e009      	b.n	80065d4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	33b0      	adds	r3, #176	@ 0xb0
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	4413      	add	r3, r2
 80065ce:	683a      	ldr	r2, [r7, #0]
 80065d0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80065d2:	2300      	movs	r3, #0
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	370c      	adds	r7, #12
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b087      	sub	sp, #28
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	32b0      	adds	r2, #176	@ 0xb0
 80065f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065fa:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d101      	bne.n	8006606 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006602:	2303      	movs	r3, #3
 8006604:	e008      	b.n	8006618 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	68ba      	ldr	r2, [r7, #8]
 800660a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006616:	2300      	movs	r3, #0
}
 8006618:	4618      	mov	r0, r3
 800661a:	371c      	adds	r7, #28
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006624:	b480      	push	{r7}
 8006626:	b085      	sub	sp, #20
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	32b0      	adds	r2, #176	@ 0xb0
 8006638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800663c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d101      	bne.n	8006648 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006644:	2303      	movs	r3, #3
 8006646:	e004      	b.n	8006652 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	683a      	ldr	r2, [r7, #0]
 800664c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3714      	adds	r7, #20
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr
	...

08006660 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	32b0      	adds	r2, #176	@ 0xb0
 8006672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006676:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006678:	2301      	movs	r3, #1
 800667a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	32b0      	adds	r2, #176	@ 0xb0
 8006686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d101      	bne.n	8006692 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800668e:	2303      	movs	r3, #3
 8006690:	e025      	b.n	80066de <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006698:	2b00      	cmp	r3, #0
 800669a:	d11f      	bne.n	80066dc <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	2201      	movs	r2, #1
 80066a0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80066a4:	4b10      	ldr	r3, [pc, #64]	@ (80066e8 <USBD_CDC_TransmitPacket+0x88>)
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	f003 020f 	and.w	r2, r3, #15
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	4613      	mov	r3, r2
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	4413      	add	r3, r2
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	4403      	add	r3, r0
 80066be:	3318      	adds	r3, #24
 80066c0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80066c2:	4b09      	ldr	r3, [pc, #36]	@ (80066e8 <USBD_CDC_TransmitPacket+0x88>)
 80066c4:	7819      	ldrb	r1, [r3, #0]
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f001 ffbf 	bl	8008656 <USBD_LL_Transmit>

    ret = USBD_OK;
 80066d8:	2300      	movs	r3, #0
 80066da:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80066dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3710      	adds	r7, #16
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	20000093 	.word	0x20000093

080066ec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	32b0      	adds	r2, #176	@ 0xb0
 80066fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006702:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	32b0      	adds	r2, #176	@ 0xb0
 800670e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d101      	bne.n	800671a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006716:	2303      	movs	r3, #3
 8006718:	e018      	b.n	800674c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	7c1b      	ldrb	r3, [r3, #16]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d10a      	bne.n	8006738 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006722:	4b0c      	ldr	r3, [pc, #48]	@ (8006754 <USBD_CDC_ReceivePacket+0x68>)
 8006724:	7819      	ldrb	r1, [r3, #0]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800672c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f001 ffb1 	bl	8008698 <USBD_LL_PrepareReceive>
 8006736:	e008      	b.n	800674a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006738:	4b06      	ldr	r3, [pc, #24]	@ (8006754 <USBD_CDC_ReceivePacket+0x68>)
 800673a:	7819      	ldrb	r1, [r3, #0]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006742:	2340      	movs	r3, #64	@ 0x40
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f001 ffa7 	bl	8008698 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800674a:	2300      	movs	r3, #0
}
 800674c:	4618      	mov	r0, r3
 800674e:	3710      	adds	r7, #16
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}
 8006754:	20000094 	.word	0x20000094

08006758 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b086      	sub	sp, #24
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	4613      	mov	r3, r2
 8006764:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d101      	bne.n	8006770 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800676c:	2303      	movs	r3, #3
 800676e:	e01f      	b.n	80067b0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2200      	movs	r2, #0
 8006774:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2200      	movs	r2, #0
 800677c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2200      	movs	r2, #0
 8006784:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d003      	beq.n	8006796 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	68ba      	ldr	r2, [r7, #8]
 8006792:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2201      	movs	r2, #1
 800679a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	79fa      	ldrb	r2, [r7, #7]
 80067a2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80067a4:	68f8      	ldr	r0, [r7, #12]
 80067a6:	f001 fe21 	bl	80083ec <USBD_LL_Init>
 80067aa:	4603      	mov	r3, r0
 80067ac:	75fb      	strb	r3, [r7, #23]

  return ret;
 80067ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3718      	adds	r7, #24
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80067c2:	2300      	movs	r3, #0
 80067c4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d101      	bne.n	80067d0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80067cc:	2303      	movs	r3, #3
 80067ce:	e025      	b.n	800681c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	683a      	ldr	r2, [r7, #0]
 80067d4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	32ae      	adds	r2, #174	@ 0xae
 80067e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d00f      	beq.n	800680c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	32ae      	adds	r2, #174	@ 0xae
 80067f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067fc:	f107 020e 	add.w	r2, r7, #14
 8006800:	4610      	mov	r0, r2
 8006802:	4798      	blx	r3
 8006804:	4602      	mov	r2, r0
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006812:	1c5a      	adds	r2, r3, #1
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800681a:	2300      	movs	r3, #0
}
 800681c:	4618      	mov	r0, r3
 800681e:	3710      	adds	r7, #16
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b082      	sub	sp, #8
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f001 fe29 	bl	8008484 <USBD_LL_Start>
 8006832:	4603      	mov	r3, r0
}
 8006834:	4618      	mov	r0, r3
 8006836:	3708      	adds	r7, #8
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006844:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006846:	4618      	mov	r0, r3
 8006848:	370c      	adds	r7, #12
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr

08006852 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006852:	b580      	push	{r7, lr}
 8006854:	b084      	sub	sp, #16
 8006856:	af00      	add	r7, sp, #0
 8006858:	6078      	str	r0, [r7, #4]
 800685a:	460b      	mov	r3, r1
 800685c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800685e:	2300      	movs	r3, #0
 8006860:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006868:	2b00      	cmp	r3, #0
 800686a:	d009      	beq.n	8006880 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	78fa      	ldrb	r2, [r7, #3]
 8006876:	4611      	mov	r1, r2
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	4798      	blx	r3
 800687c:	4603      	mov	r3, r0
 800687e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006880:	7bfb      	ldrb	r3, [r7, #15]
}
 8006882:	4618      	mov	r0, r3
 8006884:	3710      	adds	r7, #16
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}

0800688a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800688a:	b580      	push	{r7, lr}
 800688c:	b084      	sub	sp, #16
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
 8006892:	460b      	mov	r3, r1
 8006894:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006896:	2300      	movs	r3, #0
 8006898:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	78fa      	ldrb	r2, [r7, #3]
 80068a4:	4611      	mov	r1, r2
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	4798      	blx	r3
 80068aa:	4603      	mov	r3, r0
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d001      	beq.n	80068b4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80068b0:	2303      	movs	r3, #3
 80068b2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80068b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3710      	adds	r7, #16
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}

080068be <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80068be:	b580      	push	{r7, lr}
 80068c0:	b084      	sub	sp, #16
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
 80068c6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80068ce:	6839      	ldr	r1, [r7, #0]
 80068d0:	4618      	mov	r0, r3
 80068d2:	f001 f906 	bl	8007ae2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2201      	movs	r2, #1
 80068da:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80068e4:	461a      	mov	r2, r3
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80068f2:	f003 031f 	and.w	r3, r3, #31
 80068f6:	2b02      	cmp	r3, #2
 80068f8:	d01a      	beq.n	8006930 <USBD_LL_SetupStage+0x72>
 80068fa:	2b02      	cmp	r3, #2
 80068fc:	d822      	bhi.n	8006944 <USBD_LL_SetupStage+0x86>
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d002      	beq.n	8006908 <USBD_LL_SetupStage+0x4a>
 8006902:	2b01      	cmp	r3, #1
 8006904:	d00a      	beq.n	800691c <USBD_LL_SetupStage+0x5e>
 8006906:	e01d      	b.n	8006944 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800690e:	4619      	mov	r1, r3
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 fb5d 	bl	8006fd0 <USBD_StdDevReq>
 8006916:	4603      	mov	r3, r0
 8006918:	73fb      	strb	r3, [r7, #15]
      break;
 800691a:	e020      	b.n	800695e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006922:	4619      	mov	r1, r3
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 fbc5 	bl	80070b4 <USBD_StdItfReq>
 800692a:	4603      	mov	r3, r0
 800692c:	73fb      	strb	r3, [r7, #15]
      break;
 800692e:	e016      	b.n	800695e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006936:	4619      	mov	r1, r3
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 fc27 	bl	800718c <USBD_StdEPReq>
 800693e:	4603      	mov	r3, r0
 8006940:	73fb      	strb	r3, [r7, #15]
      break;
 8006942:	e00c      	b.n	800695e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800694a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800694e:	b2db      	uxtb	r3, r3
 8006950:	4619      	mov	r1, r3
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f001 fdf6 	bl	8008544 <USBD_LL_StallEP>
 8006958:	4603      	mov	r3, r0
 800695a:	73fb      	strb	r3, [r7, #15]
      break;
 800695c:	bf00      	nop
  }

  return ret;
 800695e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006960:	4618      	mov	r0, r3
 8006962:	3710      	adds	r7, #16
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b086      	sub	sp, #24
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	460b      	mov	r3, r1
 8006972:	607a      	str	r2, [r7, #4]
 8006974:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006976:	2300      	movs	r3, #0
 8006978:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800697a:	7afb      	ldrb	r3, [r7, #11]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d16e      	bne.n	8006a5e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006986:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800698e:	2b03      	cmp	r3, #3
 8006990:	f040 8098 	bne.w	8006ac4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	689a      	ldr	r2, [r3, #8]
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	429a      	cmp	r2, r3
 800699e:	d913      	bls.n	80069c8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	689a      	ldr	r2, [r3, #8]
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	1ad2      	subs	r2, r2, r3
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	68da      	ldr	r2, [r3, #12]
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	4293      	cmp	r3, r2
 80069b8:	bf28      	it	cs
 80069ba:	4613      	movcs	r3, r2
 80069bc:	461a      	mov	r2, r3
 80069be:	6879      	ldr	r1, [r7, #4]
 80069c0:	68f8      	ldr	r0, [r7, #12]
 80069c2:	f001 f982 	bl	8007cca <USBD_CtlContinueRx>
 80069c6:	e07d      	b.n	8006ac4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80069ce:	f003 031f 	and.w	r3, r3, #31
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	d014      	beq.n	8006a00 <USBD_LL_DataOutStage+0x98>
 80069d6:	2b02      	cmp	r3, #2
 80069d8:	d81d      	bhi.n	8006a16 <USBD_LL_DataOutStage+0xae>
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d002      	beq.n	80069e4 <USBD_LL_DataOutStage+0x7c>
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d003      	beq.n	80069ea <USBD_LL_DataOutStage+0x82>
 80069e2:	e018      	b.n	8006a16 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80069e4:	2300      	movs	r3, #0
 80069e6:	75bb      	strb	r3, [r7, #22]
            break;
 80069e8:	e018      	b.n	8006a1c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	4619      	mov	r1, r3
 80069f4:	68f8      	ldr	r0, [r7, #12]
 80069f6:	f000 fa5e 	bl	8006eb6 <USBD_CoreFindIF>
 80069fa:	4603      	mov	r3, r0
 80069fc:	75bb      	strb	r3, [r7, #22]
            break;
 80069fe:	e00d      	b.n	8006a1c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	4619      	mov	r1, r3
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	f000 fa60 	bl	8006ed0 <USBD_CoreFindEP>
 8006a10:	4603      	mov	r3, r0
 8006a12:	75bb      	strb	r3, [r7, #22]
            break;
 8006a14:	e002      	b.n	8006a1c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006a16:	2300      	movs	r3, #0
 8006a18:	75bb      	strb	r3, [r7, #22]
            break;
 8006a1a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006a1c:	7dbb      	ldrb	r3, [r7, #22]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d119      	bne.n	8006a56 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	2b03      	cmp	r3, #3
 8006a2c:	d113      	bne.n	8006a56 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006a2e:	7dba      	ldrb	r2, [r7, #22]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	32ae      	adds	r2, #174	@ 0xae
 8006a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00b      	beq.n	8006a56 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006a3e:	7dba      	ldrb	r2, [r7, #22]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006a46:	7dba      	ldrb	r2, [r7, #22]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	32ae      	adds	r2, #174	@ 0xae
 8006a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	68f8      	ldr	r0, [r7, #12]
 8006a54:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	f001 f948 	bl	8007cec <USBD_CtlSendStatus>
 8006a5c:	e032      	b.n	8006ac4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006a5e:	7afb      	ldrb	r3, [r7, #11]
 8006a60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	4619      	mov	r1, r3
 8006a68:	68f8      	ldr	r0, [r7, #12]
 8006a6a:	f000 fa31 	bl	8006ed0 <USBD_CoreFindEP>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a72:	7dbb      	ldrb	r3, [r7, #22]
 8006a74:	2bff      	cmp	r3, #255	@ 0xff
 8006a76:	d025      	beq.n	8006ac4 <USBD_LL_DataOutStage+0x15c>
 8006a78:	7dbb      	ldrb	r3, [r7, #22]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d122      	bne.n	8006ac4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	2b03      	cmp	r3, #3
 8006a88:	d117      	bne.n	8006aba <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006a8a:	7dba      	ldrb	r2, [r7, #22]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	32ae      	adds	r2, #174	@ 0xae
 8006a90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a94:	699b      	ldr	r3, [r3, #24]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00f      	beq.n	8006aba <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006a9a:	7dba      	ldrb	r2, [r7, #22]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006aa2:	7dba      	ldrb	r2, [r7, #22]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	32ae      	adds	r2, #174	@ 0xae
 8006aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aac:	699b      	ldr	r3, [r3, #24]
 8006aae:	7afa      	ldrb	r2, [r7, #11]
 8006ab0:	4611      	mov	r1, r2
 8006ab2:	68f8      	ldr	r0, [r7, #12]
 8006ab4:	4798      	blx	r3
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006aba:	7dfb      	ldrb	r3, [r7, #23]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d001      	beq.n	8006ac4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006ac0:	7dfb      	ldrb	r3, [r7, #23]
 8006ac2:	e000      	b.n	8006ac6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3718      	adds	r7, #24
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}

08006ace <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006ace:	b580      	push	{r7, lr}
 8006ad0:	b086      	sub	sp, #24
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	60f8      	str	r0, [r7, #12]
 8006ad6:	460b      	mov	r3, r1
 8006ad8:	607a      	str	r2, [r7, #4]
 8006ada:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006adc:	7afb      	ldrb	r3, [r7, #11]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d16f      	bne.n	8006bc2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	3314      	adds	r3, #20
 8006ae6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006aee:	2b02      	cmp	r3, #2
 8006af0:	d15a      	bne.n	8006ba8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	689a      	ldr	r2, [r3, #8]
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d914      	bls.n	8006b28 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	689a      	ldr	r2, [r3, #8]
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	1ad2      	subs	r2, r2, r3
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	461a      	mov	r2, r3
 8006b12:	6879      	ldr	r1, [r7, #4]
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f001 f8aa 	bl	8007c6e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	2100      	movs	r1, #0
 8006b20:	68f8      	ldr	r0, [r7, #12]
 8006b22:	f001 fdb9 	bl	8008698 <USBD_LL_PrepareReceive>
 8006b26:	e03f      	b.n	8006ba8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	68da      	ldr	r2, [r3, #12]
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d11c      	bne.n	8006b6e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	685a      	ldr	r2, [r3, #4]
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d316      	bcc.n	8006b6e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	685a      	ldr	r2, [r3, #4]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d20f      	bcs.n	8006b6e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006b4e:	2200      	movs	r2, #0
 8006b50:	2100      	movs	r1, #0
 8006b52:	68f8      	ldr	r0, [r7, #12]
 8006b54:	f001 f88b 	bl	8007c6e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b60:	2300      	movs	r3, #0
 8006b62:	2200      	movs	r2, #0
 8006b64:	2100      	movs	r1, #0
 8006b66:	68f8      	ldr	r0, [r7, #12]
 8006b68:	f001 fd96 	bl	8008698 <USBD_LL_PrepareReceive>
 8006b6c:	e01c      	b.n	8006ba8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	2b03      	cmp	r3, #3
 8006b78:	d10f      	bne.n	8006b9a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d009      	beq.n	8006b9a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	68f8      	ldr	r0, [r7, #12]
 8006b98:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b9a:	2180      	movs	r1, #128	@ 0x80
 8006b9c:	68f8      	ldr	r0, [r7, #12]
 8006b9e:	f001 fcd1 	bl	8008544 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006ba2:	68f8      	ldr	r0, [r7, #12]
 8006ba4:	f001 f8b5 	bl	8007d12 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d03a      	beq.n	8006c28 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f7ff fe42 	bl	800683c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006bc0:	e032      	b.n	8006c28 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006bc2:	7afb      	ldrb	r3, [r7, #11]
 8006bc4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	4619      	mov	r1, r3
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f000 f97f 	bl	8006ed0 <USBD_CoreFindEP>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006bd6:	7dfb      	ldrb	r3, [r7, #23]
 8006bd8:	2bff      	cmp	r3, #255	@ 0xff
 8006bda:	d025      	beq.n	8006c28 <USBD_LL_DataInStage+0x15a>
 8006bdc:	7dfb      	ldrb	r3, [r7, #23]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d122      	bne.n	8006c28 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	2b03      	cmp	r3, #3
 8006bec:	d11c      	bne.n	8006c28 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006bee:	7dfa      	ldrb	r2, [r7, #23]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	32ae      	adds	r2, #174	@ 0xae
 8006bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bf8:	695b      	ldr	r3, [r3, #20]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d014      	beq.n	8006c28 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006bfe:	7dfa      	ldrb	r2, [r7, #23]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006c06:	7dfa      	ldrb	r2, [r7, #23]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	32ae      	adds	r2, #174	@ 0xae
 8006c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c10:	695b      	ldr	r3, [r3, #20]
 8006c12:	7afa      	ldrb	r2, [r7, #11]
 8006c14:	4611      	mov	r1, r2
 8006c16:	68f8      	ldr	r0, [r7, #12]
 8006c18:	4798      	blx	r3
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006c1e:	7dbb      	ldrb	r3, [r7, #22]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d001      	beq.n	8006c28 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006c24:	7dbb      	ldrb	r3, [r7, #22]
 8006c26:	e000      	b.n	8006c2a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3718      	adds	r7, #24
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}

08006c32 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006c32:	b580      	push	{r7, lr}
 8006c34:	b084      	sub	sp, #16
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2201      	movs	r2, #1
 8006c42:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d014      	beq.n	8006c98 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00e      	beq.n	8006c98 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	6852      	ldr	r2, [r2, #4]
 8006c86:	b2d2      	uxtb	r2, r2
 8006c88:	4611      	mov	r1, r2
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	4798      	blx	r3
 8006c8e:	4603      	mov	r3, r0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d001      	beq.n	8006c98 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006c94:	2303      	movs	r3, #3
 8006c96:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c98:	2340      	movs	r3, #64	@ 0x40
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	2100      	movs	r1, #0
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f001 fc0b 	bl	80084ba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2240      	movs	r2, #64	@ 0x40
 8006cb0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006cb4:	2340      	movs	r3, #64	@ 0x40
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	2180      	movs	r1, #128	@ 0x80
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f001 fbfd 	bl	80084ba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2240      	movs	r2, #64	@ 0x40
 8006cca:	621a      	str	r2, [r3, #32]

  return ret;
 8006ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3710      	adds	r7, #16
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}

08006cd6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006cd6:	b480      	push	{r7}
 8006cd8:	b083      	sub	sp, #12
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
 8006cde:	460b      	mov	r3, r1
 8006ce0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	78fa      	ldrb	r2, [r7, #3]
 8006ce6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	370c      	adds	r7, #12
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr

08006cf6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006cf6:	b480      	push	{r7}
 8006cf8:	b083      	sub	sp, #12
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d04:	b2da      	uxtb	r2, r3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2204      	movs	r2, #4
 8006d10:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	370c      	adds	r7, #12
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr

08006d22 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006d22:	b480      	push	{r7}
 8006d24:	b083      	sub	sp, #12
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	2b04      	cmp	r3, #4
 8006d34:	d106      	bne.n	8006d44 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006d3c:	b2da      	uxtb	r2, r3
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	370c      	adds	r7, #12
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr

08006d52 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006d52:	b580      	push	{r7, lr}
 8006d54:	b082      	sub	sp, #8
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	2b03      	cmp	r3, #3
 8006d64:	d110      	bne.n	8006d88 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d00b      	beq.n	8006d88 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d76:	69db      	ldr	r3, [r3, #28]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d005      	beq.n	8006d88 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d82:	69db      	ldr	r3, [r3, #28]
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006d88:	2300      	movs	r3, #0
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3708      	adds	r7, #8
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}

08006d92 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006d92:	b580      	push	{r7, lr}
 8006d94:	b082      	sub	sp, #8
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
 8006d9a:	460b      	mov	r3, r1
 8006d9c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	32ae      	adds	r2, #174	@ 0xae
 8006da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d101      	bne.n	8006db4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006db0:	2303      	movs	r3, #3
 8006db2:	e01c      	b.n	8006dee <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	2b03      	cmp	r3, #3
 8006dbe:	d115      	bne.n	8006dec <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	32ae      	adds	r2, #174	@ 0xae
 8006dca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dce:	6a1b      	ldr	r3, [r3, #32]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d00b      	beq.n	8006dec <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	32ae      	adds	r2, #174	@ 0xae
 8006dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006de2:	6a1b      	ldr	r3, [r3, #32]
 8006de4:	78fa      	ldrb	r2, [r7, #3]
 8006de6:	4611      	mov	r1, r2
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006dec:	2300      	movs	r3, #0
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3708      	adds	r7, #8
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}

08006df6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006df6:	b580      	push	{r7, lr}
 8006df8:	b082      	sub	sp, #8
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
 8006dfe:	460b      	mov	r3, r1
 8006e00:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	32ae      	adds	r2, #174	@ 0xae
 8006e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d101      	bne.n	8006e18 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006e14:	2303      	movs	r3, #3
 8006e16:	e01c      	b.n	8006e52 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	2b03      	cmp	r3, #3
 8006e22:	d115      	bne.n	8006e50 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	32ae      	adds	r2, #174	@ 0xae
 8006e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d00b      	beq.n	8006e50 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	32ae      	adds	r2, #174	@ 0xae
 8006e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e48:	78fa      	ldrb	r2, [r7, #3]
 8006e4a:	4611      	mov	r1, r2
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3708      	adds	r7, #8
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}

08006e5a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006e5a:	b480      	push	{r7}
 8006e5c:	b083      	sub	sp, #12
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00e      	beq.n	8006eac <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	6852      	ldr	r2, [r2, #4]
 8006e9a:	b2d2      	uxtb	r2, r2
 8006e9c:	4611      	mov	r1, r2
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	4798      	blx	r3
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d001      	beq.n	8006eac <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006ea8:	2303      	movs	r3, #3
 8006eaa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3710      	adds	r7, #16
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}

08006eb6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006eb6:	b480      	push	{r7}
 8006eb8:	b083      	sub	sp, #12
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
 8006ebe:	460b      	mov	r3, r1
 8006ec0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006ec2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	370c      	adds	r7, #12
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b083      	sub	sp, #12
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	460b      	mov	r3, r1
 8006eda:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006edc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	370c      	adds	r7, #12
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr

08006eea <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006eea:	b580      	push	{r7, lr}
 8006eec:	b086      	sub	sp, #24
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
 8006ef2:	460b      	mov	r3, r1
 8006ef4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006efe:	2300      	movs	r3, #0
 8006f00:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	885b      	ldrh	r3, [r3, #2]
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	68fa      	ldr	r2, [r7, #12]
 8006f0a:	7812      	ldrb	r2, [r2, #0]
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d91f      	bls.n	8006f50 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006f16:	e013      	b.n	8006f40 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006f18:	f107 030a 	add.w	r3, r7, #10
 8006f1c:	4619      	mov	r1, r3
 8006f1e:	6978      	ldr	r0, [r7, #20]
 8006f20:	f000 f81b 	bl	8006f5a <USBD_GetNextDesc>
 8006f24:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	785b      	ldrb	r3, [r3, #1]
 8006f2a:	2b05      	cmp	r3, #5
 8006f2c:	d108      	bne.n	8006f40 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	789b      	ldrb	r3, [r3, #2]
 8006f36:	78fa      	ldrb	r2, [r7, #3]
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d008      	beq.n	8006f4e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	885b      	ldrh	r3, [r3, #2]
 8006f44:	b29a      	uxth	r2, r3
 8006f46:	897b      	ldrh	r3, [r7, #10]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d8e5      	bhi.n	8006f18 <USBD_GetEpDesc+0x2e>
 8006f4c:	e000      	b.n	8006f50 <USBD_GetEpDesc+0x66>
          break;
 8006f4e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006f50:	693b      	ldr	r3, [r7, #16]
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3718      	adds	r7, #24
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}

08006f5a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006f5a:	b480      	push	{r7}
 8006f5c:	b085      	sub	sp, #20
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
 8006f62:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	881b      	ldrh	r3, [r3, #0]
 8006f6c:	68fa      	ldr	r2, [r7, #12]
 8006f6e:	7812      	ldrb	r2, [r2, #0]
 8006f70:	4413      	add	r3, r2
 8006f72:	b29a      	uxth	r2, r3
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4413      	add	r3, r2
 8006f82:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006f84:	68fb      	ldr	r3, [r7, #12]
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3714      	adds	r7, #20
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr

08006f92 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006f92:	b480      	push	{r7}
 8006f94:	b087      	sub	sp, #28
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006fb0:	8a3b      	ldrh	r3, [r7, #16]
 8006fb2:	021b      	lsls	r3, r3, #8
 8006fb4:	b21a      	sxth	r2, r3
 8006fb6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	b21b      	sxth	r3, r3
 8006fbe:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006fc0:	89fb      	ldrh	r3, [r7, #14]
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	371c      	adds	r7, #28
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr
	...

08006fd0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006fe6:	2b40      	cmp	r3, #64	@ 0x40
 8006fe8:	d005      	beq.n	8006ff6 <USBD_StdDevReq+0x26>
 8006fea:	2b40      	cmp	r3, #64	@ 0x40
 8006fec:	d857      	bhi.n	800709e <USBD_StdDevReq+0xce>
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d00f      	beq.n	8007012 <USBD_StdDevReq+0x42>
 8006ff2:	2b20      	cmp	r3, #32
 8006ff4:	d153      	bne.n	800709e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	32ae      	adds	r2, #174	@ 0xae
 8007000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	6839      	ldr	r1, [r7, #0]
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	4798      	blx	r3
 800700c:	4603      	mov	r3, r0
 800700e:	73fb      	strb	r3, [r7, #15]
      break;
 8007010:	e04a      	b.n	80070a8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	785b      	ldrb	r3, [r3, #1]
 8007016:	2b09      	cmp	r3, #9
 8007018:	d83b      	bhi.n	8007092 <USBD_StdDevReq+0xc2>
 800701a:	a201      	add	r2, pc, #4	@ (adr r2, 8007020 <USBD_StdDevReq+0x50>)
 800701c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007020:	08007075 	.word	0x08007075
 8007024:	08007089 	.word	0x08007089
 8007028:	08007093 	.word	0x08007093
 800702c:	0800707f 	.word	0x0800707f
 8007030:	08007093 	.word	0x08007093
 8007034:	08007053 	.word	0x08007053
 8007038:	08007049 	.word	0x08007049
 800703c:	08007093 	.word	0x08007093
 8007040:	0800706b 	.word	0x0800706b
 8007044:	0800705d 	.word	0x0800705d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007048:	6839      	ldr	r1, [r7, #0]
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 fa3c 	bl	80074c8 <USBD_GetDescriptor>
          break;
 8007050:	e024      	b.n	800709c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007052:	6839      	ldr	r1, [r7, #0]
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 fba1 	bl	800779c <USBD_SetAddress>
          break;
 800705a:	e01f      	b.n	800709c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800705c:	6839      	ldr	r1, [r7, #0]
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 fbe0 	bl	8007824 <USBD_SetConfig>
 8007064:	4603      	mov	r3, r0
 8007066:	73fb      	strb	r3, [r7, #15]
          break;
 8007068:	e018      	b.n	800709c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800706a:	6839      	ldr	r1, [r7, #0]
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 fc83 	bl	8007978 <USBD_GetConfig>
          break;
 8007072:	e013      	b.n	800709c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007074:	6839      	ldr	r1, [r7, #0]
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 fcb4 	bl	80079e4 <USBD_GetStatus>
          break;
 800707c:	e00e      	b.n	800709c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800707e:	6839      	ldr	r1, [r7, #0]
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 fce3 	bl	8007a4c <USBD_SetFeature>
          break;
 8007086:	e009      	b.n	800709c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007088:	6839      	ldr	r1, [r7, #0]
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 fd07 	bl	8007a9e <USBD_ClrFeature>
          break;
 8007090:	e004      	b.n	800709c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007092:	6839      	ldr	r1, [r7, #0]
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f000 fd5e 	bl	8007b56 <USBD_CtlError>
          break;
 800709a:	bf00      	nop
      }
      break;
 800709c:	e004      	b.n	80070a8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800709e:	6839      	ldr	r1, [r7, #0]
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 fd58 	bl	8007b56 <USBD_CtlError>
      break;
 80070a6:	bf00      	nop
  }

  return ret;
 80070a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3710      	adds	r7, #16
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop

080070b4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80070be:	2300      	movs	r3, #0
 80070c0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80070ca:	2b40      	cmp	r3, #64	@ 0x40
 80070cc:	d005      	beq.n	80070da <USBD_StdItfReq+0x26>
 80070ce:	2b40      	cmp	r3, #64	@ 0x40
 80070d0:	d852      	bhi.n	8007178 <USBD_StdItfReq+0xc4>
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d001      	beq.n	80070da <USBD_StdItfReq+0x26>
 80070d6:	2b20      	cmp	r3, #32
 80070d8:	d14e      	bne.n	8007178 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	3b01      	subs	r3, #1
 80070e4:	2b02      	cmp	r3, #2
 80070e6:	d840      	bhi.n	800716a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	889b      	ldrh	r3, [r3, #4]
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d836      	bhi.n	8007160 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	889b      	ldrh	r3, [r3, #4]
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	4619      	mov	r1, r3
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f7ff fedb 	bl	8006eb6 <USBD_CoreFindIF>
 8007100:	4603      	mov	r3, r0
 8007102:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007104:	7bbb      	ldrb	r3, [r7, #14]
 8007106:	2bff      	cmp	r3, #255	@ 0xff
 8007108:	d01d      	beq.n	8007146 <USBD_StdItfReq+0x92>
 800710a:	7bbb      	ldrb	r3, [r7, #14]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d11a      	bne.n	8007146 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007110:	7bba      	ldrb	r2, [r7, #14]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	32ae      	adds	r2, #174	@ 0xae
 8007116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00f      	beq.n	8007140 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007120:	7bba      	ldrb	r2, [r7, #14]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007128:	7bba      	ldrb	r2, [r7, #14]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	32ae      	adds	r2, #174	@ 0xae
 800712e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	6839      	ldr	r1, [r7, #0]
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	4798      	blx	r3
 800713a:	4603      	mov	r3, r0
 800713c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800713e:	e004      	b.n	800714a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007140:	2303      	movs	r3, #3
 8007142:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007144:	e001      	b.n	800714a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007146:	2303      	movs	r3, #3
 8007148:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	88db      	ldrh	r3, [r3, #6]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d110      	bne.n	8007174 <USBD_StdItfReq+0xc0>
 8007152:	7bfb      	ldrb	r3, [r7, #15]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d10d      	bne.n	8007174 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f000 fdc7 	bl	8007cec <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800715e:	e009      	b.n	8007174 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007160:	6839      	ldr	r1, [r7, #0]
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 fcf7 	bl	8007b56 <USBD_CtlError>
          break;
 8007168:	e004      	b.n	8007174 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800716a:	6839      	ldr	r1, [r7, #0]
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 fcf2 	bl	8007b56 <USBD_CtlError>
          break;
 8007172:	e000      	b.n	8007176 <USBD_StdItfReq+0xc2>
          break;
 8007174:	bf00      	nop
      }
      break;
 8007176:	e004      	b.n	8007182 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007178:	6839      	ldr	r1, [r7, #0]
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 fceb 	bl	8007b56 <USBD_CtlError>
      break;
 8007180:	bf00      	nop
  }

  return ret;
 8007182:	7bfb      	ldrb	r3, [r7, #15]
}
 8007184:	4618      	mov	r0, r3
 8007186:	3710      	adds	r7, #16
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b084      	sub	sp, #16
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007196:	2300      	movs	r3, #0
 8007198:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	889b      	ldrh	r3, [r3, #4]
 800719e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80071a8:	2b40      	cmp	r3, #64	@ 0x40
 80071aa:	d007      	beq.n	80071bc <USBD_StdEPReq+0x30>
 80071ac:	2b40      	cmp	r3, #64	@ 0x40
 80071ae:	f200 817f 	bhi.w	80074b0 <USBD_StdEPReq+0x324>
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d02a      	beq.n	800720c <USBD_StdEPReq+0x80>
 80071b6:	2b20      	cmp	r3, #32
 80071b8:	f040 817a 	bne.w	80074b0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80071bc:	7bbb      	ldrb	r3, [r7, #14]
 80071be:	4619      	mov	r1, r3
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f7ff fe85 	bl	8006ed0 <USBD_CoreFindEP>
 80071c6:	4603      	mov	r3, r0
 80071c8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80071ca:	7b7b      	ldrb	r3, [r7, #13]
 80071cc:	2bff      	cmp	r3, #255	@ 0xff
 80071ce:	f000 8174 	beq.w	80074ba <USBD_StdEPReq+0x32e>
 80071d2:	7b7b      	ldrb	r3, [r7, #13]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	f040 8170 	bne.w	80074ba <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80071da:	7b7a      	ldrb	r2, [r7, #13]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80071e2:	7b7a      	ldrb	r2, [r7, #13]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	32ae      	adds	r2, #174	@ 0xae
 80071e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	f000 8163 	beq.w	80074ba <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80071f4:	7b7a      	ldrb	r2, [r7, #13]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	32ae      	adds	r2, #174	@ 0xae
 80071fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	6839      	ldr	r1, [r7, #0]
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	4798      	blx	r3
 8007206:	4603      	mov	r3, r0
 8007208:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800720a:	e156      	b.n	80074ba <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	785b      	ldrb	r3, [r3, #1]
 8007210:	2b03      	cmp	r3, #3
 8007212:	d008      	beq.n	8007226 <USBD_StdEPReq+0x9a>
 8007214:	2b03      	cmp	r3, #3
 8007216:	f300 8145 	bgt.w	80074a4 <USBD_StdEPReq+0x318>
 800721a:	2b00      	cmp	r3, #0
 800721c:	f000 809b 	beq.w	8007356 <USBD_StdEPReq+0x1ca>
 8007220:	2b01      	cmp	r3, #1
 8007222:	d03c      	beq.n	800729e <USBD_StdEPReq+0x112>
 8007224:	e13e      	b.n	80074a4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800722c:	b2db      	uxtb	r3, r3
 800722e:	2b02      	cmp	r3, #2
 8007230:	d002      	beq.n	8007238 <USBD_StdEPReq+0xac>
 8007232:	2b03      	cmp	r3, #3
 8007234:	d016      	beq.n	8007264 <USBD_StdEPReq+0xd8>
 8007236:	e02c      	b.n	8007292 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007238:	7bbb      	ldrb	r3, [r7, #14]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00d      	beq.n	800725a <USBD_StdEPReq+0xce>
 800723e:	7bbb      	ldrb	r3, [r7, #14]
 8007240:	2b80      	cmp	r3, #128	@ 0x80
 8007242:	d00a      	beq.n	800725a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007244:	7bbb      	ldrb	r3, [r7, #14]
 8007246:	4619      	mov	r1, r3
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f001 f97b 	bl	8008544 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800724e:	2180      	movs	r1, #128	@ 0x80
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f001 f977 	bl	8008544 <USBD_LL_StallEP>
 8007256:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007258:	e020      	b.n	800729c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800725a:	6839      	ldr	r1, [r7, #0]
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 fc7a 	bl	8007b56 <USBD_CtlError>
              break;
 8007262:	e01b      	b.n	800729c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	885b      	ldrh	r3, [r3, #2]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d10e      	bne.n	800728a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800726c:	7bbb      	ldrb	r3, [r7, #14]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d00b      	beq.n	800728a <USBD_StdEPReq+0xfe>
 8007272:	7bbb      	ldrb	r3, [r7, #14]
 8007274:	2b80      	cmp	r3, #128	@ 0x80
 8007276:	d008      	beq.n	800728a <USBD_StdEPReq+0xfe>
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	88db      	ldrh	r3, [r3, #6]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d104      	bne.n	800728a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007280:	7bbb      	ldrb	r3, [r7, #14]
 8007282:	4619      	mov	r1, r3
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f001 f95d 	bl	8008544 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 fd2e 	bl	8007cec <USBD_CtlSendStatus>

              break;
 8007290:	e004      	b.n	800729c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007292:	6839      	ldr	r1, [r7, #0]
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f000 fc5e 	bl	8007b56 <USBD_CtlError>
              break;
 800729a:	bf00      	nop
          }
          break;
 800729c:	e107      	b.n	80074ae <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	2b02      	cmp	r3, #2
 80072a8:	d002      	beq.n	80072b0 <USBD_StdEPReq+0x124>
 80072aa:	2b03      	cmp	r3, #3
 80072ac:	d016      	beq.n	80072dc <USBD_StdEPReq+0x150>
 80072ae:	e04b      	b.n	8007348 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072b0:	7bbb      	ldrb	r3, [r7, #14]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d00d      	beq.n	80072d2 <USBD_StdEPReq+0x146>
 80072b6:	7bbb      	ldrb	r3, [r7, #14]
 80072b8:	2b80      	cmp	r3, #128	@ 0x80
 80072ba:	d00a      	beq.n	80072d2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80072bc:	7bbb      	ldrb	r3, [r7, #14]
 80072be:	4619      	mov	r1, r3
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f001 f93f 	bl	8008544 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80072c6:	2180      	movs	r1, #128	@ 0x80
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f001 f93b 	bl	8008544 <USBD_LL_StallEP>
 80072ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80072d0:	e040      	b.n	8007354 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80072d2:	6839      	ldr	r1, [r7, #0]
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 fc3e 	bl	8007b56 <USBD_CtlError>
              break;
 80072da:	e03b      	b.n	8007354 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	885b      	ldrh	r3, [r3, #2]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d136      	bne.n	8007352 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80072e4:	7bbb      	ldrb	r3, [r7, #14]
 80072e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d004      	beq.n	80072f8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80072ee:	7bbb      	ldrb	r3, [r7, #14]
 80072f0:	4619      	mov	r1, r3
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f001 f945 	bl	8008582 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 fcf7 	bl	8007cec <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80072fe:	7bbb      	ldrb	r3, [r7, #14]
 8007300:	4619      	mov	r1, r3
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f7ff fde4 	bl	8006ed0 <USBD_CoreFindEP>
 8007308:	4603      	mov	r3, r0
 800730a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800730c:	7b7b      	ldrb	r3, [r7, #13]
 800730e:	2bff      	cmp	r3, #255	@ 0xff
 8007310:	d01f      	beq.n	8007352 <USBD_StdEPReq+0x1c6>
 8007312:	7b7b      	ldrb	r3, [r7, #13]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d11c      	bne.n	8007352 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007318:	7b7a      	ldrb	r2, [r7, #13]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007320:	7b7a      	ldrb	r2, [r7, #13]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	32ae      	adds	r2, #174	@ 0xae
 8007326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d010      	beq.n	8007352 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007330:	7b7a      	ldrb	r2, [r7, #13]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	32ae      	adds	r2, #174	@ 0xae
 8007336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	6839      	ldr	r1, [r7, #0]
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	4798      	blx	r3
 8007342:	4603      	mov	r3, r0
 8007344:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007346:	e004      	b.n	8007352 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007348:	6839      	ldr	r1, [r7, #0]
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 fc03 	bl	8007b56 <USBD_CtlError>
              break;
 8007350:	e000      	b.n	8007354 <USBD_StdEPReq+0x1c8>
              break;
 8007352:	bf00      	nop
          }
          break;
 8007354:	e0ab      	b.n	80074ae <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800735c:	b2db      	uxtb	r3, r3
 800735e:	2b02      	cmp	r3, #2
 8007360:	d002      	beq.n	8007368 <USBD_StdEPReq+0x1dc>
 8007362:	2b03      	cmp	r3, #3
 8007364:	d032      	beq.n	80073cc <USBD_StdEPReq+0x240>
 8007366:	e097      	b.n	8007498 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007368:	7bbb      	ldrb	r3, [r7, #14]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d007      	beq.n	800737e <USBD_StdEPReq+0x1f2>
 800736e:	7bbb      	ldrb	r3, [r7, #14]
 8007370:	2b80      	cmp	r3, #128	@ 0x80
 8007372:	d004      	beq.n	800737e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007374:	6839      	ldr	r1, [r7, #0]
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 fbed 	bl	8007b56 <USBD_CtlError>
                break;
 800737c:	e091      	b.n	80074a2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800737e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007382:	2b00      	cmp	r3, #0
 8007384:	da0b      	bge.n	800739e <USBD_StdEPReq+0x212>
 8007386:	7bbb      	ldrb	r3, [r7, #14]
 8007388:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800738c:	4613      	mov	r3, r2
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	4413      	add	r3, r2
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	3310      	adds	r3, #16
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	4413      	add	r3, r2
 800739a:	3304      	adds	r3, #4
 800739c:	e00b      	b.n	80073b6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800739e:	7bbb      	ldrb	r3, [r7, #14]
 80073a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073a4:	4613      	mov	r3, r2
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	4413      	add	r3, r2
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80073b0:	687a      	ldr	r2, [r7, #4]
 80073b2:	4413      	add	r3, r2
 80073b4:	3304      	adds	r3, #4
 80073b6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	2200      	movs	r2, #0
 80073bc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	2202      	movs	r2, #2
 80073c2:	4619      	mov	r1, r3
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 fc37 	bl	8007c38 <USBD_CtlSendData>
              break;
 80073ca:	e06a      	b.n	80074a2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80073cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	da11      	bge.n	80073f8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80073d4:	7bbb      	ldrb	r3, [r7, #14]
 80073d6:	f003 020f 	and.w	r2, r3, #15
 80073da:	6879      	ldr	r1, [r7, #4]
 80073dc:	4613      	mov	r3, r2
 80073de:	009b      	lsls	r3, r3, #2
 80073e0:	4413      	add	r3, r2
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	440b      	add	r3, r1
 80073e6:	3324      	adds	r3, #36	@ 0x24
 80073e8:	881b      	ldrh	r3, [r3, #0]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d117      	bne.n	800741e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80073ee:	6839      	ldr	r1, [r7, #0]
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 fbb0 	bl	8007b56 <USBD_CtlError>
                  break;
 80073f6:	e054      	b.n	80074a2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80073f8:	7bbb      	ldrb	r3, [r7, #14]
 80073fa:	f003 020f 	and.w	r2, r3, #15
 80073fe:	6879      	ldr	r1, [r7, #4]
 8007400:	4613      	mov	r3, r2
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	4413      	add	r3, r2
 8007406:	009b      	lsls	r3, r3, #2
 8007408:	440b      	add	r3, r1
 800740a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800740e:	881b      	ldrh	r3, [r3, #0]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d104      	bne.n	800741e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007414:	6839      	ldr	r1, [r7, #0]
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 fb9d 	bl	8007b56 <USBD_CtlError>
                  break;
 800741c:	e041      	b.n	80074a2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800741e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007422:	2b00      	cmp	r3, #0
 8007424:	da0b      	bge.n	800743e <USBD_StdEPReq+0x2b2>
 8007426:	7bbb      	ldrb	r3, [r7, #14]
 8007428:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800742c:	4613      	mov	r3, r2
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	4413      	add	r3, r2
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	3310      	adds	r3, #16
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	4413      	add	r3, r2
 800743a:	3304      	adds	r3, #4
 800743c:	e00b      	b.n	8007456 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800743e:	7bbb      	ldrb	r3, [r7, #14]
 8007440:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007444:	4613      	mov	r3, r2
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	4413      	add	r3, r2
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	4413      	add	r3, r2
 8007454:	3304      	adds	r3, #4
 8007456:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007458:	7bbb      	ldrb	r3, [r7, #14]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d002      	beq.n	8007464 <USBD_StdEPReq+0x2d8>
 800745e:	7bbb      	ldrb	r3, [r7, #14]
 8007460:	2b80      	cmp	r3, #128	@ 0x80
 8007462:	d103      	bne.n	800746c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	2200      	movs	r2, #0
 8007468:	601a      	str	r2, [r3, #0]
 800746a:	e00e      	b.n	800748a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800746c:	7bbb      	ldrb	r3, [r7, #14]
 800746e:	4619      	mov	r1, r3
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f001 f8a5 	bl	80085c0 <USBD_LL_IsStallEP>
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	d003      	beq.n	8007484 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	2201      	movs	r2, #1
 8007480:	601a      	str	r2, [r3, #0]
 8007482:	e002      	b.n	800748a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	2200      	movs	r2, #0
 8007488:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	2202      	movs	r2, #2
 800748e:	4619      	mov	r1, r3
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 fbd1 	bl	8007c38 <USBD_CtlSendData>
              break;
 8007496:	e004      	b.n	80074a2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007498:	6839      	ldr	r1, [r7, #0]
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 fb5b 	bl	8007b56 <USBD_CtlError>
              break;
 80074a0:	bf00      	nop
          }
          break;
 80074a2:	e004      	b.n	80074ae <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80074a4:	6839      	ldr	r1, [r7, #0]
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 fb55 	bl	8007b56 <USBD_CtlError>
          break;
 80074ac:	bf00      	nop
      }
      break;
 80074ae:	e005      	b.n	80074bc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80074b0:	6839      	ldr	r1, [r7, #0]
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 fb4f 	bl	8007b56 <USBD_CtlError>
      break;
 80074b8:	e000      	b.n	80074bc <USBD_StdEPReq+0x330>
      break;
 80074ba:	bf00      	nop
  }

  return ret;
 80074bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3710      	adds	r7, #16
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
	...

080074c8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80074d2:	2300      	movs	r3, #0
 80074d4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80074d6:	2300      	movs	r3, #0
 80074d8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80074da:	2300      	movs	r3, #0
 80074dc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	885b      	ldrh	r3, [r3, #2]
 80074e2:	0a1b      	lsrs	r3, r3, #8
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	3b01      	subs	r3, #1
 80074e8:	2b06      	cmp	r3, #6
 80074ea:	f200 8128 	bhi.w	800773e <USBD_GetDescriptor+0x276>
 80074ee:	a201      	add	r2, pc, #4	@ (adr r2, 80074f4 <USBD_GetDescriptor+0x2c>)
 80074f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f4:	08007511 	.word	0x08007511
 80074f8:	08007529 	.word	0x08007529
 80074fc:	08007569 	.word	0x08007569
 8007500:	0800773f 	.word	0x0800773f
 8007504:	0800773f 	.word	0x0800773f
 8007508:	080076df 	.word	0x080076df
 800750c:	0800770b 	.word	0x0800770b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	7c12      	ldrb	r2, [r2, #16]
 800751c:	f107 0108 	add.w	r1, r7, #8
 8007520:	4610      	mov	r0, r2
 8007522:	4798      	blx	r3
 8007524:	60f8      	str	r0, [r7, #12]
      break;
 8007526:	e112      	b.n	800774e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	7c1b      	ldrb	r3, [r3, #16]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d10d      	bne.n	800754c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007538:	f107 0208 	add.w	r2, r7, #8
 800753c:	4610      	mov	r0, r2
 800753e:	4798      	blx	r3
 8007540:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	3301      	adds	r3, #1
 8007546:	2202      	movs	r2, #2
 8007548:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800754a:	e100      	b.n	800774e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007554:	f107 0208 	add.w	r2, r7, #8
 8007558:	4610      	mov	r0, r2
 800755a:	4798      	blx	r3
 800755c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	3301      	adds	r3, #1
 8007562:	2202      	movs	r2, #2
 8007564:	701a      	strb	r2, [r3, #0]
      break;
 8007566:	e0f2      	b.n	800774e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	885b      	ldrh	r3, [r3, #2]
 800756c:	b2db      	uxtb	r3, r3
 800756e:	2b05      	cmp	r3, #5
 8007570:	f200 80ac 	bhi.w	80076cc <USBD_GetDescriptor+0x204>
 8007574:	a201      	add	r2, pc, #4	@ (adr r2, 800757c <USBD_GetDescriptor+0xb4>)
 8007576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800757a:	bf00      	nop
 800757c:	08007595 	.word	0x08007595
 8007580:	080075c9 	.word	0x080075c9
 8007584:	080075fd 	.word	0x080075fd
 8007588:	08007631 	.word	0x08007631
 800758c:	08007665 	.word	0x08007665
 8007590:	08007699 	.word	0x08007699
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d00b      	beq.n	80075b8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	7c12      	ldrb	r2, [r2, #16]
 80075ac:	f107 0108 	add.w	r1, r7, #8
 80075b0:	4610      	mov	r0, r2
 80075b2:	4798      	blx	r3
 80075b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075b6:	e091      	b.n	80076dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075b8:	6839      	ldr	r1, [r7, #0]
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 facb 	bl	8007b56 <USBD_CtlError>
            err++;
 80075c0:	7afb      	ldrb	r3, [r7, #11]
 80075c2:	3301      	adds	r3, #1
 80075c4:	72fb      	strb	r3, [r7, #11]
          break;
 80075c6:	e089      	b.n	80076dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d00b      	beq.n	80075ec <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	7c12      	ldrb	r2, [r2, #16]
 80075e0:	f107 0108 	add.w	r1, r7, #8
 80075e4:	4610      	mov	r0, r2
 80075e6:	4798      	blx	r3
 80075e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075ea:	e077      	b.n	80076dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075ec:	6839      	ldr	r1, [r7, #0]
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 fab1 	bl	8007b56 <USBD_CtlError>
            err++;
 80075f4:	7afb      	ldrb	r3, [r7, #11]
 80075f6:	3301      	adds	r3, #1
 80075f8:	72fb      	strb	r3, [r7, #11]
          break;
 80075fa:	e06f      	b.n	80076dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d00b      	beq.n	8007620 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	7c12      	ldrb	r2, [r2, #16]
 8007614:	f107 0108 	add.w	r1, r7, #8
 8007618:	4610      	mov	r0, r2
 800761a:	4798      	blx	r3
 800761c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800761e:	e05d      	b.n	80076dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007620:	6839      	ldr	r1, [r7, #0]
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 fa97 	bl	8007b56 <USBD_CtlError>
            err++;
 8007628:	7afb      	ldrb	r3, [r7, #11]
 800762a:	3301      	adds	r3, #1
 800762c:	72fb      	strb	r3, [r7, #11]
          break;
 800762e:	e055      	b.n	80076dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007636:	691b      	ldr	r3, [r3, #16]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d00b      	beq.n	8007654 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007642:	691b      	ldr	r3, [r3, #16]
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	7c12      	ldrb	r2, [r2, #16]
 8007648:	f107 0108 	add.w	r1, r7, #8
 800764c:	4610      	mov	r0, r2
 800764e:	4798      	blx	r3
 8007650:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007652:	e043      	b.n	80076dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007654:	6839      	ldr	r1, [r7, #0]
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 fa7d 	bl	8007b56 <USBD_CtlError>
            err++;
 800765c:	7afb      	ldrb	r3, [r7, #11]
 800765e:	3301      	adds	r3, #1
 8007660:	72fb      	strb	r3, [r7, #11]
          break;
 8007662:	e03b      	b.n	80076dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800766a:	695b      	ldr	r3, [r3, #20]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d00b      	beq.n	8007688 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007676:	695b      	ldr	r3, [r3, #20]
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	7c12      	ldrb	r2, [r2, #16]
 800767c:	f107 0108 	add.w	r1, r7, #8
 8007680:	4610      	mov	r0, r2
 8007682:	4798      	blx	r3
 8007684:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007686:	e029      	b.n	80076dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007688:	6839      	ldr	r1, [r7, #0]
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 fa63 	bl	8007b56 <USBD_CtlError>
            err++;
 8007690:	7afb      	ldrb	r3, [r7, #11]
 8007692:	3301      	adds	r3, #1
 8007694:	72fb      	strb	r3, [r7, #11]
          break;
 8007696:	e021      	b.n	80076dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800769e:	699b      	ldr	r3, [r3, #24]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d00b      	beq.n	80076bc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076aa:	699b      	ldr	r3, [r3, #24]
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	7c12      	ldrb	r2, [r2, #16]
 80076b0:	f107 0108 	add.w	r1, r7, #8
 80076b4:	4610      	mov	r0, r2
 80076b6:	4798      	blx	r3
 80076b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076ba:	e00f      	b.n	80076dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076bc:	6839      	ldr	r1, [r7, #0]
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 fa49 	bl	8007b56 <USBD_CtlError>
            err++;
 80076c4:	7afb      	ldrb	r3, [r7, #11]
 80076c6:	3301      	adds	r3, #1
 80076c8:	72fb      	strb	r3, [r7, #11]
          break;
 80076ca:	e007      	b.n	80076dc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80076cc:	6839      	ldr	r1, [r7, #0]
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 fa41 	bl	8007b56 <USBD_CtlError>
          err++;
 80076d4:	7afb      	ldrb	r3, [r7, #11]
 80076d6:	3301      	adds	r3, #1
 80076d8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80076da:	bf00      	nop
      }
      break;
 80076dc:	e037      	b.n	800774e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	7c1b      	ldrb	r3, [r3, #16]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d109      	bne.n	80076fa <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076ee:	f107 0208 	add.w	r2, r7, #8
 80076f2:	4610      	mov	r0, r2
 80076f4:	4798      	blx	r3
 80076f6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80076f8:	e029      	b.n	800774e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80076fa:	6839      	ldr	r1, [r7, #0]
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 fa2a 	bl	8007b56 <USBD_CtlError>
        err++;
 8007702:	7afb      	ldrb	r3, [r7, #11]
 8007704:	3301      	adds	r3, #1
 8007706:	72fb      	strb	r3, [r7, #11]
      break;
 8007708:	e021      	b.n	800774e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	7c1b      	ldrb	r3, [r3, #16]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d10d      	bne.n	800772e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800771a:	f107 0208 	add.w	r2, r7, #8
 800771e:	4610      	mov	r0, r2
 8007720:	4798      	blx	r3
 8007722:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	3301      	adds	r3, #1
 8007728:	2207      	movs	r2, #7
 800772a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800772c:	e00f      	b.n	800774e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800772e:	6839      	ldr	r1, [r7, #0]
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f000 fa10 	bl	8007b56 <USBD_CtlError>
        err++;
 8007736:	7afb      	ldrb	r3, [r7, #11]
 8007738:	3301      	adds	r3, #1
 800773a:	72fb      	strb	r3, [r7, #11]
      break;
 800773c:	e007      	b.n	800774e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800773e:	6839      	ldr	r1, [r7, #0]
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 fa08 	bl	8007b56 <USBD_CtlError>
      err++;
 8007746:	7afb      	ldrb	r3, [r7, #11]
 8007748:	3301      	adds	r3, #1
 800774a:	72fb      	strb	r3, [r7, #11]
      break;
 800774c:	bf00      	nop
  }

  if (err != 0U)
 800774e:	7afb      	ldrb	r3, [r7, #11]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d11e      	bne.n	8007792 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	88db      	ldrh	r3, [r3, #6]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d016      	beq.n	800778a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800775c:	893b      	ldrh	r3, [r7, #8]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d00e      	beq.n	8007780 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	88da      	ldrh	r2, [r3, #6]
 8007766:	893b      	ldrh	r3, [r7, #8]
 8007768:	4293      	cmp	r3, r2
 800776a:	bf28      	it	cs
 800776c:	4613      	movcs	r3, r2
 800776e:	b29b      	uxth	r3, r3
 8007770:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007772:	893b      	ldrh	r3, [r7, #8]
 8007774:	461a      	mov	r2, r3
 8007776:	68f9      	ldr	r1, [r7, #12]
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 fa5d 	bl	8007c38 <USBD_CtlSendData>
 800777e:	e009      	b.n	8007794 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007780:	6839      	ldr	r1, [r7, #0]
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 f9e7 	bl	8007b56 <USBD_CtlError>
 8007788:	e004      	b.n	8007794 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 faae 	bl	8007cec <USBD_CtlSendStatus>
 8007790:	e000      	b.n	8007794 <USBD_GetDescriptor+0x2cc>
    return;
 8007792:	bf00      	nop
  }
}
 8007794:	3710      	adds	r7, #16
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop

0800779c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	889b      	ldrh	r3, [r3, #4]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d131      	bne.n	8007812 <USBD_SetAddress+0x76>
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	88db      	ldrh	r3, [r3, #6]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d12d      	bne.n	8007812 <USBD_SetAddress+0x76>
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	885b      	ldrh	r3, [r3, #2]
 80077ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80077bc:	d829      	bhi.n	8007812 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	885b      	ldrh	r3, [r3, #2]
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077c8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	2b03      	cmp	r3, #3
 80077d4:	d104      	bne.n	80077e0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80077d6:	6839      	ldr	r1, [r7, #0]
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f000 f9bc 	bl	8007b56 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077de:	e01d      	b.n	800781c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	7bfa      	ldrb	r2, [r7, #15]
 80077e4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80077e8:	7bfb      	ldrb	r3, [r7, #15]
 80077ea:	4619      	mov	r1, r3
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 ff13 	bl	8008618 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 fa7a 	bl	8007cec <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80077f8:	7bfb      	ldrb	r3, [r7, #15]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d004      	beq.n	8007808 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2202      	movs	r2, #2
 8007802:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007806:	e009      	b.n	800781c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007810:	e004      	b.n	800781c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007812:	6839      	ldr	r1, [r7, #0]
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 f99e 	bl	8007b56 <USBD_CtlError>
  }
}
 800781a:	bf00      	nop
 800781c:	bf00      	nop
 800781e:	3710      	adds	r7, #16
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b084      	sub	sp, #16
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800782e:	2300      	movs	r3, #0
 8007830:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	885b      	ldrh	r3, [r3, #2]
 8007836:	b2da      	uxtb	r2, r3
 8007838:	4b4e      	ldr	r3, [pc, #312]	@ (8007974 <USBD_SetConfig+0x150>)
 800783a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800783c:	4b4d      	ldr	r3, [pc, #308]	@ (8007974 <USBD_SetConfig+0x150>)
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	2b01      	cmp	r3, #1
 8007842:	d905      	bls.n	8007850 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007844:	6839      	ldr	r1, [r7, #0]
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 f985 	bl	8007b56 <USBD_CtlError>
    return USBD_FAIL;
 800784c:	2303      	movs	r3, #3
 800784e:	e08c      	b.n	800796a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007856:	b2db      	uxtb	r3, r3
 8007858:	2b02      	cmp	r3, #2
 800785a:	d002      	beq.n	8007862 <USBD_SetConfig+0x3e>
 800785c:	2b03      	cmp	r3, #3
 800785e:	d029      	beq.n	80078b4 <USBD_SetConfig+0x90>
 8007860:	e075      	b.n	800794e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007862:	4b44      	ldr	r3, [pc, #272]	@ (8007974 <USBD_SetConfig+0x150>)
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d020      	beq.n	80078ac <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800786a:	4b42      	ldr	r3, [pc, #264]	@ (8007974 <USBD_SetConfig+0x150>)
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	461a      	mov	r2, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007874:	4b3f      	ldr	r3, [pc, #252]	@ (8007974 <USBD_SetConfig+0x150>)
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	4619      	mov	r1, r3
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f7fe ffe9 	bl	8006852 <USBD_SetClassConfig>
 8007880:	4603      	mov	r3, r0
 8007882:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007884:	7bfb      	ldrb	r3, [r7, #15]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d008      	beq.n	800789c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800788a:	6839      	ldr	r1, [r7, #0]
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 f962 	bl	8007b56 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2202      	movs	r2, #2
 8007896:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800789a:	e065      	b.n	8007968 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 fa25 	bl	8007cec <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2203      	movs	r2, #3
 80078a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80078aa:	e05d      	b.n	8007968 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 fa1d 	bl	8007cec <USBD_CtlSendStatus>
      break;
 80078b2:	e059      	b.n	8007968 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80078b4:	4b2f      	ldr	r3, [pc, #188]	@ (8007974 <USBD_SetConfig+0x150>)
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d112      	bne.n	80078e2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2202      	movs	r2, #2
 80078c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80078c4:	4b2b      	ldr	r3, [pc, #172]	@ (8007974 <USBD_SetConfig+0x150>)
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	461a      	mov	r2, r3
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80078ce:	4b29      	ldr	r3, [pc, #164]	@ (8007974 <USBD_SetConfig+0x150>)
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	4619      	mov	r1, r3
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f7fe ffd8 	bl	800688a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 fa06 	bl	8007cec <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80078e0:	e042      	b.n	8007968 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80078e2:	4b24      	ldr	r3, [pc, #144]	@ (8007974 <USBD_SetConfig+0x150>)
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	461a      	mov	r2, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d02a      	beq.n	8007946 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	4619      	mov	r1, r3
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f7fe ffc6 	bl	800688a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80078fe:	4b1d      	ldr	r3, [pc, #116]	@ (8007974 <USBD_SetConfig+0x150>)
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	461a      	mov	r2, r3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007908:	4b1a      	ldr	r3, [pc, #104]	@ (8007974 <USBD_SetConfig+0x150>)
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	4619      	mov	r1, r3
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f7fe ff9f 	bl	8006852 <USBD_SetClassConfig>
 8007914:	4603      	mov	r3, r0
 8007916:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007918:	7bfb      	ldrb	r3, [r7, #15]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d00f      	beq.n	800793e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800791e:	6839      	ldr	r1, [r7, #0]
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 f918 	bl	8007b56 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	b2db      	uxtb	r3, r3
 800792c:	4619      	mov	r1, r3
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f7fe ffab 	bl	800688a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2202      	movs	r2, #2
 8007938:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800793c:	e014      	b.n	8007968 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 f9d4 	bl	8007cec <USBD_CtlSendStatus>
      break;
 8007944:	e010      	b.n	8007968 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 f9d0 	bl	8007cec <USBD_CtlSendStatus>
      break;
 800794c:	e00c      	b.n	8007968 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800794e:	6839      	ldr	r1, [r7, #0]
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 f900 	bl	8007b56 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007956:	4b07      	ldr	r3, [pc, #28]	@ (8007974 <USBD_SetConfig+0x150>)
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	4619      	mov	r1, r3
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f7fe ff94 	bl	800688a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007962:	2303      	movs	r3, #3
 8007964:	73fb      	strb	r3, [r7, #15]
      break;
 8007966:	bf00      	nop
  }

  return ret;
 8007968:	7bfb      	ldrb	r3, [r7, #15]
}
 800796a:	4618      	mov	r0, r3
 800796c:	3710      	adds	r7, #16
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
 8007972:	bf00      	nop
 8007974:	2000035c 	.word	0x2000035c

08007978 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b082      	sub	sp, #8
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	88db      	ldrh	r3, [r3, #6]
 8007986:	2b01      	cmp	r3, #1
 8007988:	d004      	beq.n	8007994 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800798a:	6839      	ldr	r1, [r7, #0]
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 f8e2 	bl	8007b56 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007992:	e023      	b.n	80079dc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800799a:	b2db      	uxtb	r3, r3
 800799c:	2b02      	cmp	r3, #2
 800799e:	dc02      	bgt.n	80079a6 <USBD_GetConfig+0x2e>
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	dc03      	bgt.n	80079ac <USBD_GetConfig+0x34>
 80079a4:	e015      	b.n	80079d2 <USBD_GetConfig+0x5a>
 80079a6:	2b03      	cmp	r3, #3
 80079a8:	d00b      	beq.n	80079c2 <USBD_GetConfig+0x4a>
 80079aa:	e012      	b.n	80079d2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2200      	movs	r2, #0
 80079b0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	3308      	adds	r3, #8
 80079b6:	2201      	movs	r2, #1
 80079b8:	4619      	mov	r1, r3
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 f93c 	bl	8007c38 <USBD_CtlSendData>
        break;
 80079c0:	e00c      	b.n	80079dc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	3304      	adds	r3, #4
 80079c6:	2201      	movs	r2, #1
 80079c8:	4619      	mov	r1, r3
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 f934 	bl	8007c38 <USBD_CtlSendData>
        break;
 80079d0:	e004      	b.n	80079dc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80079d2:	6839      	ldr	r1, [r7, #0]
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 f8be 	bl	8007b56 <USBD_CtlError>
        break;
 80079da:	bf00      	nop
}
 80079dc:	bf00      	nop
 80079de:	3708      	adds	r7, #8
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b082      	sub	sp, #8
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	3b01      	subs	r3, #1
 80079f8:	2b02      	cmp	r3, #2
 80079fa:	d81e      	bhi.n	8007a3a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	88db      	ldrh	r3, [r3, #6]
 8007a00:	2b02      	cmp	r3, #2
 8007a02:	d004      	beq.n	8007a0e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007a04:	6839      	ldr	r1, [r7, #0]
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 f8a5 	bl	8007b56 <USBD_CtlError>
        break;
 8007a0c:	e01a      	b.n	8007a44 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2201      	movs	r2, #1
 8007a12:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d005      	beq.n	8007a2a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	f043 0202 	orr.w	r2, r3, #2
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	330c      	adds	r3, #12
 8007a2e:	2202      	movs	r2, #2
 8007a30:	4619      	mov	r1, r3
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 f900 	bl	8007c38 <USBD_CtlSendData>
      break;
 8007a38:	e004      	b.n	8007a44 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007a3a:	6839      	ldr	r1, [r7, #0]
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 f88a 	bl	8007b56 <USBD_CtlError>
      break;
 8007a42:	bf00      	nop
  }
}
 8007a44:	bf00      	nop
 8007a46:	3708      	adds	r7, #8
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	885b      	ldrh	r3, [r3, #2]
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d107      	bne.n	8007a6e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2201      	movs	r2, #1
 8007a62:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 f940 	bl	8007cec <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007a6c:	e013      	b.n	8007a96 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	885b      	ldrh	r3, [r3, #2]
 8007a72:	2b02      	cmp	r3, #2
 8007a74:	d10b      	bne.n	8007a8e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	889b      	ldrh	r3, [r3, #4]
 8007a7a:	0a1b      	lsrs	r3, r3, #8
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	b2da      	uxtb	r2, r3
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 f930 	bl	8007cec <USBD_CtlSendStatus>
}
 8007a8c:	e003      	b.n	8007a96 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007a8e:	6839      	ldr	r1, [r7, #0]
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 f860 	bl	8007b56 <USBD_CtlError>
}
 8007a96:	bf00      	nop
 8007a98:	3708      	adds	r7, #8
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}

08007a9e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a9e:	b580      	push	{r7, lr}
 8007aa0:	b082      	sub	sp, #8
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]
 8007aa6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	3b01      	subs	r3, #1
 8007ab2:	2b02      	cmp	r3, #2
 8007ab4:	d80b      	bhi.n	8007ace <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	885b      	ldrh	r3, [r3, #2]
 8007aba:	2b01      	cmp	r3, #1
 8007abc:	d10c      	bne.n	8007ad8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 f910 	bl	8007cec <USBD_CtlSendStatus>
      }
      break;
 8007acc:	e004      	b.n	8007ad8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007ace:	6839      	ldr	r1, [r7, #0]
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 f840 	bl	8007b56 <USBD_CtlError>
      break;
 8007ad6:	e000      	b.n	8007ada <USBD_ClrFeature+0x3c>
      break;
 8007ad8:	bf00      	nop
  }
}
 8007ada:	bf00      	nop
 8007adc:	3708      	adds	r7, #8
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}

08007ae2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007ae2:	b580      	push	{r7, lr}
 8007ae4:	b084      	sub	sp, #16
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	6078      	str	r0, [r7, #4]
 8007aea:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	781a      	ldrb	r2, [r3, #0]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	3301      	adds	r3, #1
 8007afc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	781a      	ldrb	r2, [r3, #0]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	3301      	adds	r3, #1
 8007b0a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007b0c:	68f8      	ldr	r0, [r7, #12]
 8007b0e:	f7ff fa40 	bl	8006f92 <SWAPBYTE>
 8007b12:	4603      	mov	r3, r0
 8007b14:	461a      	mov	r2, r3
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	3301      	adds	r3, #1
 8007b1e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	3301      	adds	r3, #1
 8007b24:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007b26:	68f8      	ldr	r0, [r7, #12]
 8007b28:	f7ff fa33 	bl	8006f92 <SWAPBYTE>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	461a      	mov	r2, r3
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	3301      	adds	r3, #1
 8007b38:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	3301      	adds	r3, #1
 8007b3e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007b40:	68f8      	ldr	r0, [r7, #12]
 8007b42:	f7ff fa26 	bl	8006f92 <SWAPBYTE>
 8007b46:	4603      	mov	r3, r0
 8007b48:	461a      	mov	r2, r3
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	80da      	strh	r2, [r3, #6]
}
 8007b4e:	bf00      	nop
 8007b50:	3710      	adds	r7, #16
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}

08007b56 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b56:	b580      	push	{r7, lr}
 8007b58:	b082      	sub	sp, #8
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]
 8007b5e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b60:	2180      	movs	r1, #128	@ 0x80
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 fcee 	bl	8008544 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007b68:	2100      	movs	r1, #0
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 fcea 	bl	8008544 <USBD_LL_StallEP>
}
 8007b70:	bf00      	nop
 8007b72:	3708      	adds	r7, #8
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b086      	sub	sp, #24
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	60f8      	str	r0, [r7, #12]
 8007b80:	60b9      	str	r1, [r7, #8]
 8007b82:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007b84:	2300      	movs	r3, #0
 8007b86:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d036      	beq.n	8007bfc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007b92:	6938      	ldr	r0, [r7, #16]
 8007b94:	f000 f836 	bl	8007c04 <USBD_GetLen>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	005b      	lsls	r3, r3, #1
 8007ba0:	b29a      	uxth	r2, r3
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007ba6:	7dfb      	ldrb	r3, [r7, #23]
 8007ba8:	68ba      	ldr	r2, [r7, #8]
 8007baa:	4413      	add	r3, r2
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	7812      	ldrb	r2, [r2, #0]
 8007bb0:	701a      	strb	r2, [r3, #0]
  idx++;
 8007bb2:	7dfb      	ldrb	r3, [r7, #23]
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007bb8:	7dfb      	ldrb	r3, [r7, #23]
 8007bba:	68ba      	ldr	r2, [r7, #8]
 8007bbc:	4413      	add	r3, r2
 8007bbe:	2203      	movs	r2, #3
 8007bc0:	701a      	strb	r2, [r3, #0]
  idx++;
 8007bc2:	7dfb      	ldrb	r3, [r7, #23]
 8007bc4:	3301      	adds	r3, #1
 8007bc6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007bc8:	e013      	b.n	8007bf2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007bca:	7dfb      	ldrb	r3, [r7, #23]
 8007bcc:	68ba      	ldr	r2, [r7, #8]
 8007bce:	4413      	add	r3, r2
 8007bd0:	693a      	ldr	r2, [r7, #16]
 8007bd2:	7812      	ldrb	r2, [r2, #0]
 8007bd4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	3301      	adds	r3, #1
 8007bda:	613b      	str	r3, [r7, #16]
    idx++;
 8007bdc:	7dfb      	ldrb	r3, [r7, #23]
 8007bde:	3301      	adds	r3, #1
 8007be0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007be2:	7dfb      	ldrb	r3, [r7, #23]
 8007be4:	68ba      	ldr	r2, [r7, #8]
 8007be6:	4413      	add	r3, r2
 8007be8:	2200      	movs	r2, #0
 8007bea:	701a      	strb	r2, [r3, #0]
    idx++;
 8007bec:	7dfb      	ldrb	r3, [r7, #23]
 8007bee:	3301      	adds	r3, #1
 8007bf0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d1e7      	bne.n	8007bca <USBD_GetString+0x52>
 8007bfa:	e000      	b.n	8007bfe <USBD_GetString+0x86>
    return;
 8007bfc:	bf00      	nop
  }
}
 8007bfe:	3718      	adds	r7, #24
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b085      	sub	sp, #20
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007c14:	e005      	b.n	8007c22 <USBD_GetLen+0x1e>
  {
    len++;
 8007c16:	7bfb      	ldrb	r3, [r7, #15]
 8007c18:	3301      	adds	r3, #1
 8007c1a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	3301      	adds	r3, #1
 8007c20:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d1f5      	bne.n	8007c16 <USBD_GetLen+0x12>
  }

  return len;
 8007c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3714      	adds	r7, #20
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr

08007c38 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	60b9      	str	r1, [r7, #8]
 8007c42:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2202      	movs	r2, #2
 8007c48:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	68ba      	ldr	r2, [r7, #8]
 8007c5c:	2100      	movs	r1, #0
 8007c5e:	68f8      	ldr	r0, [r7, #12]
 8007c60:	f000 fcf9 	bl	8008656 <USBD_LL_Transmit>

  return USBD_OK;
 8007c64:	2300      	movs	r3, #0
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3710      	adds	r7, #16
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}

08007c6e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	b084      	sub	sp, #16
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	60f8      	str	r0, [r7, #12]
 8007c76:	60b9      	str	r1, [r7, #8]
 8007c78:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	68ba      	ldr	r2, [r7, #8]
 8007c7e:	2100      	movs	r1, #0
 8007c80:	68f8      	ldr	r0, [r7, #12]
 8007c82:	f000 fce8 	bl	8008656 <USBD_LL_Transmit>

  return USBD_OK;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3710      	adds	r7, #16
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b084      	sub	sp, #16
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	60b9      	str	r1, [r7, #8]
 8007c9a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2203      	movs	r2, #3
 8007ca0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	687a      	ldr	r2, [r7, #4]
 8007cb0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	68ba      	ldr	r2, [r7, #8]
 8007cb8:	2100      	movs	r1, #0
 8007cba:	68f8      	ldr	r0, [r7, #12]
 8007cbc:	f000 fcec 	bl	8008698 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3710      	adds	r7, #16
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}

08007cca <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007cca:	b580      	push	{r7, lr}
 8007ccc:	b084      	sub	sp, #16
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	60f8      	str	r0, [r7, #12]
 8007cd2:	60b9      	str	r1, [r7, #8]
 8007cd4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	68ba      	ldr	r2, [r7, #8]
 8007cda:	2100      	movs	r1, #0
 8007cdc:	68f8      	ldr	r0, [r7, #12]
 8007cde:	f000 fcdb 	bl	8008698 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ce2:	2300      	movs	r3, #0
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3710      	adds	r7, #16
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b082      	sub	sp, #8
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2204      	movs	r2, #4
 8007cf8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	2200      	movs	r2, #0
 8007d00:	2100      	movs	r1, #0
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 fca7 	bl	8008656 <USBD_LL_Transmit>

  return USBD_OK;
 8007d08:	2300      	movs	r3, #0
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3708      	adds	r7, #8
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}

08007d12 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007d12:	b580      	push	{r7, lr}
 8007d14:	b082      	sub	sp, #8
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2205      	movs	r2, #5
 8007d1e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d22:	2300      	movs	r3, #0
 8007d24:	2200      	movs	r2, #0
 8007d26:	2100      	movs	r1, #0
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 fcb5 	bl	8008698 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d2e:	2300      	movs	r3, #0
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3708      	adds	r7, #8
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	4912      	ldr	r1, [pc, #72]	@ (8007d88 <MX_USB_DEVICE_Init+0x50>)
 8007d40:	4812      	ldr	r0, [pc, #72]	@ (8007d8c <MX_USB_DEVICE_Init+0x54>)
 8007d42:	f7fe fd09 	bl	8006758 <USBD_Init>
 8007d46:	4603      	mov	r3, r0
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d001      	beq.n	8007d50 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007d4c:	f7f9 fbd6 	bl	80014fc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007d50:	490f      	ldr	r1, [pc, #60]	@ (8007d90 <MX_USB_DEVICE_Init+0x58>)
 8007d52:	480e      	ldr	r0, [pc, #56]	@ (8007d8c <MX_USB_DEVICE_Init+0x54>)
 8007d54:	f7fe fd30 	bl	80067b8 <USBD_RegisterClass>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d001      	beq.n	8007d62 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007d5e:	f7f9 fbcd 	bl	80014fc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007d62:	490c      	ldr	r1, [pc, #48]	@ (8007d94 <MX_USB_DEVICE_Init+0x5c>)
 8007d64:	4809      	ldr	r0, [pc, #36]	@ (8007d8c <MX_USB_DEVICE_Init+0x54>)
 8007d66:	f7fe fc21 	bl	80065ac <USBD_CDC_RegisterInterface>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d001      	beq.n	8007d74 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007d70:	f7f9 fbc4 	bl	80014fc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007d74:	4805      	ldr	r0, [pc, #20]	@ (8007d8c <MX_USB_DEVICE_Init+0x54>)
 8007d76:	f7fe fd55 	bl	8006824 <USBD_Start>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d001      	beq.n	8007d84 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007d80:	f7f9 fbbc 	bl	80014fc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007d84:	bf00      	nop
 8007d86:	bd80      	pop	{r7, pc}
 8007d88:	200000ac 	.word	0x200000ac
 8007d8c:	20000360 	.word	0x20000360
 8007d90:	20000018 	.word	0x20000018
 8007d94:	20000098 	.word	0x20000098

08007d98 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	4905      	ldr	r1, [pc, #20]	@ (8007db4 <CDC_Init_FS+0x1c>)
 8007da0:	4805      	ldr	r0, [pc, #20]	@ (8007db8 <CDC_Init_FS+0x20>)
 8007da2:	f7fe fc1d 	bl	80065e0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007da6:	4905      	ldr	r1, [pc, #20]	@ (8007dbc <CDC_Init_FS+0x24>)
 8007da8:	4803      	ldr	r0, [pc, #12]	@ (8007db8 <CDC_Init_FS+0x20>)
 8007daa:	f7fe fc3b 	bl	8006624 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007dae:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	20000e3c 	.word	0x20000e3c
 8007db8:	20000360 	.word	0x20000360
 8007dbc:	2000063c 	.word	0x2000063c

08007dc0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007dc4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr

08007dd0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	6039      	str	r1, [r7, #0]
 8007dda:	71fb      	strb	r3, [r7, #7]
 8007ddc:	4613      	mov	r3, r2
 8007dde:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007de0:	79fb      	ldrb	r3, [r7, #7]
 8007de2:	2b23      	cmp	r3, #35	@ 0x23
 8007de4:	d84a      	bhi.n	8007e7c <CDC_Control_FS+0xac>
 8007de6:	a201      	add	r2, pc, #4	@ (adr r2, 8007dec <CDC_Control_FS+0x1c>)
 8007de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dec:	08007e7d 	.word	0x08007e7d
 8007df0:	08007e7d 	.word	0x08007e7d
 8007df4:	08007e7d 	.word	0x08007e7d
 8007df8:	08007e7d 	.word	0x08007e7d
 8007dfc:	08007e7d 	.word	0x08007e7d
 8007e00:	08007e7d 	.word	0x08007e7d
 8007e04:	08007e7d 	.word	0x08007e7d
 8007e08:	08007e7d 	.word	0x08007e7d
 8007e0c:	08007e7d 	.word	0x08007e7d
 8007e10:	08007e7d 	.word	0x08007e7d
 8007e14:	08007e7d 	.word	0x08007e7d
 8007e18:	08007e7d 	.word	0x08007e7d
 8007e1c:	08007e7d 	.word	0x08007e7d
 8007e20:	08007e7d 	.word	0x08007e7d
 8007e24:	08007e7d 	.word	0x08007e7d
 8007e28:	08007e7d 	.word	0x08007e7d
 8007e2c:	08007e7d 	.word	0x08007e7d
 8007e30:	08007e7d 	.word	0x08007e7d
 8007e34:	08007e7d 	.word	0x08007e7d
 8007e38:	08007e7d 	.word	0x08007e7d
 8007e3c:	08007e7d 	.word	0x08007e7d
 8007e40:	08007e7d 	.word	0x08007e7d
 8007e44:	08007e7d 	.word	0x08007e7d
 8007e48:	08007e7d 	.word	0x08007e7d
 8007e4c:	08007e7d 	.word	0x08007e7d
 8007e50:	08007e7d 	.word	0x08007e7d
 8007e54:	08007e7d 	.word	0x08007e7d
 8007e58:	08007e7d 	.word	0x08007e7d
 8007e5c:	08007e7d 	.word	0x08007e7d
 8007e60:	08007e7d 	.word	0x08007e7d
 8007e64:	08007e7d 	.word	0x08007e7d
 8007e68:	08007e7d 	.word	0x08007e7d
 8007e6c:	08007e7d 	.word	0x08007e7d
 8007e70:	08007e7d 	.word	0x08007e7d
 8007e74:	08007e7d 	.word	0x08007e7d
 8007e78:	08007e7d 	.word	0x08007e7d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007e7c:	bf00      	nop
  }

  return (USBD_OK);
 8007e7e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	370c      	adds	r7, #12
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b082      	sub	sp, #8
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007e96:	6879      	ldr	r1, [r7, #4]
 8007e98:	4805      	ldr	r0, [pc, #20]	@ (8007eb0 <CDC_Receive_FS+0x24>)
 8007e9a:	f7fe fbc3 	bl	8006624 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007e9e:	4804      	ldr	r0, [pc, #16]	@ (8007eb0 <CDC_Receive_FS+0x24>)
 8007ea0:	f7fe fc24 	bl	80066ec <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007ea4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3708      	adds	r7, #8
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop
 8007eb0:	20000360 	.word	0x20000360

08007eb4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007ec4:	4b0d      	ldr	r3, [pc, #52]	@ (8007efc <CDC_Transmit_FS+0x48>)
 8007ec6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007eca:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d001      	beq.n	8007eda <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	e00b      	b.n	8007ef2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007eda:	887b      	ldrh	r3, [r7, #2]
 8007edc:	461a      	mov	r2, r3
 8007ede:	6879      	ldr	r1, [r7, #4]
 8007ee0:	4806      	ldr	r0, [pc, #24]	@ (8007efc <CDC_Transmit_FS+0x48>)
 8007ee2:	f7fe fb7d 	bl	80065e0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007ee6:	4805      	ldr	r0, [pc, #20]	@ (8007efc <CDC_Transmit_FS+0x48>)
 8007ee8:	f7fe fbba 	bl	8006660 <USBD_CDC_TransmitPacket>
 8007eec:	4603      	mov	r3, r0
 8007eee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3710      	adds	r7, #16
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop
 8007efc:	20000360 	.word	0x20000360

08007f00 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b087      	sub	sp, #28
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	60b9      	str	r1, [r7, #8]
 8007f0a:	4613      	mov	r3, r2
 8007f0c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007f12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	371c      	adds	r7, #28
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr
	...

08007f24 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	6039      	str	r1, [r7, #0]
 8007f2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	2212      	movs	r2, #18
 8007f34:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007f36:	4b03      	ldr	r3, [pc, #12]	@ (8007f44 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	370c      	adds	r7, #12
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr
 8007f44:	200000c8 	.word	0x200000c8

08007f48 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b083      	sub	sp, #12
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	4603      	mov	r3, r0
 8007f50:	6039      	str	r1, [r7, #0]
 8007f52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	2204      	movs	r2, #4
 8007f58:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007f5a:	4b03      	ldr	r3, [pc, #12]	@ (8007f68 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr
 8007f68:	200000dc 	.word	0x200000dc

08007f6c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	4603      	mov	r3, r0
 8007f74:	6039      	str	r1, [r7, #0]
 8007f76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007f78:	79fb      	ldrb	r3, [r7, #7]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d105      	bne.n	8007f8a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007f7e:	683a      	ldr	r2, [r7, #0]
 8007f80:	4907      	ldr	r1, [pc, #28]	@ (8007fa0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007f82:	4808      	ldr	r0, [pc, #32]	@ (8007fa4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007f84:	f7ff fdf8 	bl	8007b78 <USBD_GetString>
 8007f88:	e004      	b.n	8007f94 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007f8a:	683a      	ldr	r2, [r7, #0]
 8007f8c:	4904      	ldr	r1, [pc, #16]	@ (8007fa0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007f8e:	4805      	ldr	r0, [pc, #20]	@ (8007fa4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007f90:	f7ff fdf2 	bl	8007b78 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f94:	4b02      	ldr	r3, [pc, #8]	@ (8007fa0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3708      	adds	r7, #8
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}
 8007f9e:	bf00      	nop
 8007fa0:	2000163c 	.word	0x2000163c
 8007fa4:	08009248 	.word	0x08009248

08007fa8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b082      	sub	sp, #8
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	4603      	mov	r3, r0
 8007fb0:	6039      	str	r1, [r7, #0]
 8007fb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007fb4:	683a      	ldr	r2, [r7, #0]
 8007fb6:	4904      	ldr	r1, [pc, #16]	@ (8007fc8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007fb8:	4804      	ldr	r0, [pc, #16]	@ (8007fcc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007fba:	f7ff fddd 	bl	8007b78 <USBD_GetString>
  return USBD_StrDesc;
 8007fbe:	4b02      	ldr	r3, [pc, #8]	@ (8007fc8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3708      	adds	r7, #8
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}
 8007fc8:	2000163c 	.word	0x2000163c
 8007fcc:	08009260 	.word	0x08009260

08007fd0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	6039      	str	r1, [r7, #0]
 8007fda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	221a      	movs	r2, #26
 8007fe0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007fe2:	f000 f843 	bl	800806c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007fe6:	4b02      	ldr	r3, [pc, #8]	@ (8007ff0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3708      	adds	r7, #8
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}
 8007ff0:	200000e0 	.word	0x200000e0

08007ff4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	6039      	str	r1, [r7, #0]
 8007ffe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008000:	79fb      	ldrb	r3, [r7, #7]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d105      	bne.n	8008012 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008006:	683a      	ldr	r2, [r7, #0]
 8008008:	4907      	ldr	r1, [pc, #28]	@ (8008028 <USBD_FS_ConfigStrDescriptor+0x34>)
 800800a:	4808      	ldr	r0, [pc, #32]	@ (800802c <USBD_FS_ConfigStrDescriptor+0x38>)
 800800c:	f7ff fdb4 	bl	8007b78 <USBD_GetString>
 8008010:	e004      	b.n	800801c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008012:	683a      	ldr	r2, [r7, #0]
 8008014:	4904      	ldr	r1, [pc, #16]	@ (8008028 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008016:	4805      	ldr	r0, [pc, #20]	@ (800802c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008018:	f7ff fdae 	bl	8007b78 <USBD_GetString>
  }
  return USBD_StrDesc;
 800801c:	4b02      	ldr	r3, [pc, #8]	@ (8008028 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800801e:	4618      	mov	r0, r3
 8008020:	3708      	adds	r7, #8
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}
 8008026:	bf00      	nop
 8008028:	2000163c 	.word	0x2000163c
 800802c:	08009274 	.word	0x08009274

08008030 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b082      	sub	sp, #8
 8008034:	af00      	add	r7, sp, #0
 8008036:	4603      	mov	r3, r0
 8008038:	6039      	str	r1, [r7, #0]
 800803a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800803c:	79fb      	ldrb	r3, [r7, #7]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d105      	bne.n	800804e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008042:	683a      	ldr	r2, [r7, #0]
 8008044:	4907      	ldr	r1, [pc, #28]	@ (8008064 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008046:	4808      	ldr	r0, [pc, #32]	@ (8008068 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008048:	f7ff fd96 	bl	8007b78 <USBD_GetString>
 800804c:	e004      	b.n	8008058 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800804e:	683a      	ldr	r2, [r7, #0]
 8008050:	4904      	ldr	r1, [pc, #16]	@ (8008064 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008052:	4805      	ldr	r0, [pc, #20]	@ (8008068 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008054:	f7ff fd90 	bl	8007b78 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008058:	4b02      	ldr	r3, [pc, #8]	@ (8008064 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800805a:	4618      	mov	r0, r3
 800805c:	3708      	adds	r7, #8
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
 8008062:	bf00      	nop
 8008064:	2000163c 	.word	0x2000163c
 8008068:	08009280 	.word	0x08009280

0800806c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008072:	4b0f      	ldr	r3, [pc, #60]	@ (80080b0 <Get_SerialNum+0x44>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008078:	4b0e      	ldr	r3, [pc, #56]	@ (80080b4 <Get_SerialNum+0x48>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800807e:	4b0e      	ldr	r3, [pc, #56]	@ (80080b8 <Get_SerialNum+0x4c>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008084:	68fa      	ldr	r2, [r7, #12]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	4413      	add	r3, r2
 800808a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d009      	beq.n	80080a6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008092:	2208      	movs	r2, #8
 8008094:	4909      	ldr	r1, [pc, #36]	@ (80080bc <Get_SerialNum+0x50>)
 8008096:	68f8      	ldr	r0, [r7, #12]
 8008098:	f000 f814 	bl	80080c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800809c:	2204      	movs	r2, #4
 800809e:	4908      	ldr	r1, [pc, #32]	@ (80080c0 <Get_SerialNum+0x54>)
 80080a0:	68b8      	ldr	r0, [r7, #8]
 80080a2:	f000 f80f 	bl	80080c4 <IntToUnicode>
  }
}
 80080a6:	bf00      	nop
 80080a8:	3710      	adds	r7, #16
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}
 80080ae:	bf00      	nop
 80080b0:	1fff7a10 	.word	0x1fff7a10
 80080b4:	1fff7a14 	.word	0x1fff7a14
 80080b8:	1fff7a18 	.word	0x1fff7a18
 80080bc:	200000e2 	.word	0x200000e2
 80080c0:	200000f2 	.word	0x200000f2

080080c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b087      	sub	sp, #28
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	60f8      	str	r0, [r7, #12]
 80080cc:	60b9      	str	r1, [r7, #8]
 80080ce:	4613      	mov	r3, r2
 80080d0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80080d2:	2300      	movs	r3, #0
 80080d4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80080d6:	2300      	movs	r3, #0
 80080d8:	75fb      	strb	r3, [r7, #23]
 80080da:	e027      	b.n	800812c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	0f1b      	lsrs	r3, r3, #28
 80080e0:	2b09      	cmp	r3, #9
 80080e2:	d80b      	bhi.n	80080fc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	0f1b      	lsrs	r3, r3, #28
 80080e8:	b2da      	uxtb	r2, r3
 80080ea:	7dfb      	ldrb	r3, [r7, #23]
 80080ec:	005b      	lsls	r3, r3, #1
 80080ee:	4619      	mov	r1, r3
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	440b      	add	r3, r1
 80080f4:	3230      	adds	r2, #48	@ 0x30
 80080f6:	b2d2      	uxtb	r2, r2
 80080f8:	701a      	strb	r2, [r3, #0]
 80080fa:	e00a      	b.n	8008112 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	0f1b      	lsrs	r3, r3, #28
 8008100:	b2da      	uxtb	r2, r3
 8008102:	7dfb      	ldrb	r3, [r7, #23]
 8008104:	005b      	lsls	r3, r3, #1
 8008106:	4619      	mov	r1, r3
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	440b      	add	r3, r1
 800810c:	3237      	adds	r2, #55	@ 0x37
 800810e:	b2d2      	uxtb	r2, r2
 8008110:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	011b      	lsls	r3, r3, #4
 8008116:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008118:	7dfb      	ldrb	r3, [r7, #23]
 800811a:	005b      	lsls	r3, r3, #1
 800811c:	3301      	adds	r3, #1
 800811e:	68ba      	ldr	r2, [r7, #8]
 8008120:	4413      	add	r3, r2
 8008122:	2200      	movs	r2, #0
 8008124:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008126:	7dfb      	ldrb	r3, [r7, #23]
 8008128:	3301      	adds	r3, #1
 800812a:	75fb      	strb	r3, [r7, #23]
 800812c:	7dfa      	ldrb	r2, [r7, #23]
 800812e:	79fb      	ldrb	r3, [r7, #7]
 8008130:	429a      	cmp	r2, r3
 8008132:	d3d3      	bcc.n	80080dc <IntToUnicode+0x18>
  }
}
 8008134:	bf00      	nop
 8008136:	bf00      	nop
 8008138:	371c      	adds	r7, #28
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr
	...

08008144 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b08a      	sub	sp, #40	@ 0x28
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800814c:	f107 0314 	add.w	r3, r7, #20
 8008150:	2200      	movs	r2, #0
 8008152:	601a      	str	r2, [r3, #0]
 8008154:	605a      	str	r2, [r3, #4]
 8008156:	609a      	str	r2, [r3, #8]
 8008158:	60da      	str	r2, [r3, #12]
 800815a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008164:	d147      	bne.n	80081f6 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008166:	2300      	movs	r3, #0
 8008168:	613b      	str	r3, [r7, #16]
 800816a:	4b25      	ldr	r3, [pc, #148]	@ (8008200 <HAL_PCD_MspInit+0xbc>)
 800816c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800816e:	4a24      	ldr	r2, [pc, #144]	@ (8008200 <HAL_PCD_MspInit+0xbc>)
 8008170:	f043 0301 	orr.w	r3, r3, #1
 8008174:	6313      	str	r3, [r2, #48]	@ 0x30
 8008176:	4b22      	ldr	r3, [pc, #136]	@ (8008200 <HAL_PCD_MspInit+0xbc>)
 8008178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800817a:	f003 0301 	and.w	r3, r3, #1
 800817e:	613b      	str	r3, [r7, #16]
 8008180:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008182:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008186:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008188:	2300      	movs	r3, #0
 800818a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800818c:	2300      	movs	r3, #0
 800818e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008190:	f107 0314 	add.w	r3, r7, #20
 8008194:	4619      	mov	r1, r3
 8008196:	481b      	ldr	r0, [pc, #108]	@ (8008204 <HAL_PCD_MspInit+0xc0>)
 8008198:	f7fa f900 	bl	800239c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800819c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80081a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081a2:	2302      	movs	r3, #2
 80081a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081a6:	2300      	movs	r3, #0
 80081a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80081aa:	2300      	movs	r3, #0
 80081ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80081ae:	230a      	movs	r3, #10
 80081b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081b2:	f107 0314 	add.w	r3, r7, #20
 80081b6:	4619      	mov	r1, r3
 80081b8:	4812      	ldr	r0, [pc, #72]	@ (8008204 <HAL_PCD_MspInit+0xc0>)
 80081ba:	f7fa f8ef 	bl	800239c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80081be:	4b10      	ldr	r3, [pc, #64]	@ (8008200 <HAL_PCD_MspInit+0xbc>)
 80081c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081c2:	4a0f      	ldr	r2, [pc, #60]	@ (8008200 <HAL_PCD_MspInit+0xbc>)
 80081c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081c8:	6353      	str	r3, [r2, #52]	@ 0x34
 80081ca:	2300      	movs	r3, #0
 80081cc:	60fb      	str	r3, [r7, #12]
 80081ce:	4b0c      	ldr	r3, [pc, #48]	@ (8008200 <HAL_PCD_MspInit+0xbc>)
 80081d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081d2:	4a0b      	ldr	r2, [pc, #44]	@ (8008200 <HAL_PCD_MspInit+0xbc>)
 80081d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80081d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80081da:	4b09      	ldr	r3, [pc, #36]	@ (8008200 <HAL_PCD_MspInit+0xbc>)
 80081dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80081e2:	60fb      	str	r3, [r7, #12]
 80081e4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80081e6:	2200      	movs	r2, #0
 80081e8:	2100      	movs	r1, #0
 80081ea:	2043      	movs	r0, #67	@ 0x43
 80081ec:	f7fa f82f 	bl	800224e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80081f0:	2043      	movs	r0, #67	@ 0x43
 80081f2:	f7fa f848 	bl	8002286 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80081f6:	bf00      	nop
 80081f8:	3728      	adds	r7, #40	@ 0x28
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	40023800 	.word	0x40023800
 8008204:	40020000 	.word	0x40020000

08008208 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b082      	sub	sp, #8
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800821c:	4619      	mov	r1, r3
 800821e:	4610      	mov	r0, r2
 8008220:	f7fe fb4d 	bl	80068be <USBD_LL_SetupStage>
}
 8008224:	bf00      	nop
 8008226:	3708      	adds	r7, #8
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b082      	sub	sp, #8
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	460b      	mov	r3, r1
 8008236:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800823e:	78fa      	ldrb	r2, [r7, #3]
 8008240:	6879      	ldr	r1, [r7, #4]
 8008242:	4613      	mov	r3, r2
 8008244:	00db      	lsls	r3, r3, #3
 8008246:	4413      	add	r3, r2
 8008248:	009b      	lsls	r3, r3, #2
 800824a:	440b      	add	r3, r1
 800824c:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	78fb      	ldrb	r3, [r7, #3]
 8008254:	4619      	mov	r1, r3
 8008256:	f7fe fb87 	bl	8006968 <USBD_LL_DataOutStage>
}
 800825a:	bf00      	nop
 800825c:	3708      	adds	r7, #8
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}

08008262 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008262:	b580      	push	{r7, lr}
 8008264:	b082      	sub	sp, #8
 8008266:	af00      	add	r7, sp, #0
 8008268:	6078      	str	r0, [r7, #4]
 800826a:	460b      	mov	r3, r1
 800826c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 8008274:	78fa      	ldrb	r2, [r7, #3]
 8008276:	6879      	ldr	r1, [r7, #4]
 8008278:	4613      	mov	r3, r2
 800827a:	00db      	lsls	r3, r3, #3
 800827c:	4413      	add	r3, r2
 800827e:	009b      	lsls	r3, r3, #2
 8008280:	440b      	add	r3, r1
 8008282:	334c      	adds	r3, #76	@ 0x4c
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	78fb      	ldrb	r3, [r7, #3]
 8008288:	4619      	mov	r1, r3
 800828a:	f7fe fc20 	bl	8006ace <USBD_LL_DataInStage>
}
 800828e:	bf00      	nop
 8008290:	3708      	adds	r7, #8
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}

08008296 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008296:	b580      	push	{r7, lr}
 8008298:	b082      	sub	sp, #8
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80082a4:	4618      	mov	r0, r3
 80082a6:	f7fe fd54 	bl	8006d52 <USBD_LL_SOF>
}
 80082aa:	bf00      	nop
 80082ac:	3708      	adds	r7, #8
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}

080082b2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082b2:	b580      	push	{r7, lr}
 80082b4:	b084      	sub	sp, #16
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80082ba:	2301      	movs	r3, #1
 80082bc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d102      	bne.n	80082cc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80082c6:	2300      	movs	r3, #0
 80082c8:	73fb      	strb	r3, [r7, #15]
 80082ca:	e008      	b.n	80082de <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	68db      	ldr	r3, [r3, #12]
 80082d0:	2b02      	cmp	r3, #2
 80082d2:	d102      	bne.n	80082da <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80082d4:	2301      	movs	r3, #1
 80082d6:	73fb      	strb	r3, [r7, #15]
 80082d8:	e001      	b.n	80082de <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80082da:	f7f9 f90f 	bl	80014fc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80082e4:	7bfa      	ldrb	r2, [r7, #15]
 80082e6:	4611      	mov	r1, r2
 80082e8:	4618      	mov	r0, r3
 80082ea:	f7fe fcf4 	bl	8006cd6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80082f4:	4618      	mov	r0, r3
 80082f6:	f7fe fc9c 	bl	8006c32 <USBD_LL_Reset>
}
 80082fa:	bf00      	nop
 80082fc:	3710      	adds	r7, #16
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
	...

08008304 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b082      	sub	sp, #8
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008312:	4618      	mov	r0, r3
 8008314:	f7fe fcef 	bl	8006cf6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	687a      	ldr	r2, [r7, #4]
 8008324:	6812      	ldr	r2, [r2, #0]
 8008326:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800832a:	f043 0301 	orr.w	r3, r3, #1
 800832e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6a1b      	ldr	r3, [r3, #32]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d005      	beq.n	8008344 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008338:	4b04      	ldr	r3, [pc, #16]	@ (800834c <HAL_PCD_SuspendCallback+0x48>)
 800833a:	691b      	ldr	r3, [r3, #16]
 800833c:	4a03      	ldr	r2, [pc, #12]	@ (800834c <HAL_PCD_SuspendCallback+0x48>)
 800833e:	f043 0306 	orr.w	r3, r3, #6
 8008342:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008344:	bf00      	nop
 8008346:	3708      	adds	r7, #8
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}
 800834c:	e000ed00 	.word	0xe000ed00

08008350 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b082      	sub	sp, #8
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800835e:	4618      	mov	r0, r3
 8008360:	f7fe fcdf 	bl	8006d22 <USBD_LL_Resume>
}
 8008364:	bf00      	nop
 8008366:	3708      	adds	r7, #8
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b082      	sub	sp, #8
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	460b      	mov	r3, r1
 8008376:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800837e:	78fa      	ldrb	r2, [r7, #3]
 8008380:	4611      	mov	r1, r2
 8008382:	4618      	mov	r0, r3
 8008384:	f7fe fd37 	bl	8006df6 <USBD_LL_IsoOUTIncomplete>
}
 8008388:	bf00      	nop
 800838a:	3708      	adds	r7, #8
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	460b      	mov	r3, r1
 800839a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80083a2:	78fa      	ldrb	r2, [r7, #3]
 80083a4:	4611      	mov	r1, r2
 80083a6:	4618      	mov	r0, r3
 80083a8:	f7fe fcf3 	bl	8006d92 <USBD_LL_IsoINIncomplete>
}
 80083ac:	bf00      	nop
 80083ae:	3708      	adds	r7, #8
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b082      	sub	sp, #8
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80083c2:	4618      	mov	r0, r3
 80083c4:	f7fe fd49 	bl	8006e5a <USBD_LL_DevConnected>
}
 80083c8:	bf00      	nop
 80083ca:	3708      	adds	r7, #8
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}

080083d0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b082      	sub	sp, #8
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80083de:	4618      	mov	r0, r3
 80083e0:	f7fe fd46 	bl	8006e70 <USBD_LL_DevDisconnected>
}
 80083e4:	bf00      	nop
 80083e6:	3708      	adds	r7, #8
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b082      	sub	sp, #8
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d13c      	bne.n	8008476 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80083fc:	4a20      	ldr	r2, [pc, #128]	@ (8008480 <USBD_LL_Init+0x94>)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	4a1e      	ldr	r2, [pc, #120]	@ (8008480 <USBD_LL_Init+0x94>)
 8008408:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800840c:	4b1c      	ldr	r3, [pc, #112]	@ (8008480 <USBD_LL_Init+0x94>)
 800840e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008412:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008414:	4b1a      	ldr	r3, [pc, #104]	@ (8008480 <USBD_LL_Init+0x94>)
 8008416:	2204      	movs	r2, #4
 8008418:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800841a:	4b19      	ldr	r3, [pc, #100]	@ (8008480 <USBD_LL_Init+0x94>)
 800841c:	2202      	movs	r2, #2
 800841e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008420:	4b17      	ldr	r3, [pc, #92]	@ (8008480 <USBD_LL_Init+0x94>)
 8008422:	2200      	movs	r2, #0
 8008424:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008426:	4b16      	ldr	r3, [pc, #88]	@ (8008480 <USBD_LL_Init+0x94>)
 8008428:	2202      	movs	r2, #2
 800842a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800842c:	4b14      	ldr	r3, [pc, #80]	@ (8008480 <USBD_LL_Init+0x94>)
 800842e:	2200      	movs	r2, #0
 8008430:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008432:	4b13      	ldr	r3, [pc, #76]	@ (8008480 <USBD_LL_Init+0x94>)
 8008434:	2200      	movs	r2, #0
 8008436:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008438:	4b11      	ldr	r3, [pc, #68]	@ (8008480 <USBD_LL_Init+0x94>)
 800843a:	2200      	movs	r2, #0
 800843c:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800843e:	4b10      	ldr	r3, [pc, #64]	@ (8008480 <USBD_LL_Init+0x94>)
 8008440:	2201      	movs	r2, #1
 8008442:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008444:	4b0e      	ldr	r3, [pc, #56]	@ (8008480 <USBD_LL_Init+0x94>)
 8008446:	2200      	movs	r2, #0
 8008448:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800844a:	480d      	ldr	r0, [pc, #52]	@ (8008480 <USBD_LL_Init+0x94>)
 800844c:	f7fa f973 	bl	8002736 <HAL_PCD_Init>
 8008450:	4603      	mov	r3, r0
 8008452:	2b00      	cmp	r3, #0
 8008454:	d001      	beq.n	800845a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008456:	f7f9 f851 	bl	80014fc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800845a:	2180      	movs	r1, #128	@ 0x80
 800845c:	4808      	ldr	r0, [pc, #32]	@ (8008480 <USBD_LL_Init+0x94>)
 800845e:	f7fb fbca 	bl	8003bf6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008462:	2240      	movs	r2, #64	@ 0x40
 8008464:	2100      	movs	r1, #0
 8008466:	4806      	ldr	r0, [pc, #24]	@ (8008480 <USBD_LL_Init+0x94>)
 8008468:	f7fb fb7e 	bl	8003b68 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800846c:	2280      	movs	r2, #128	@ 0x80
 800846e:	2101      	movs	r1, #1
 8008470:	4803      	ldr	r0, [pc, #12]	@ (8008480 <USBD_LL_Init+0x94>)
 8008472:	f7fb fb79 	bl	8003b68 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008476:	2300      	movs	r3, #0
}
 8008478:	4618      	mov	r0, r3
 800847a:	3708      	adds	r7, #8
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}
 8008480:	2000183c 	.word	0x2000183c

08008484 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800848c:	2300      	movs	r3, #0
 800848e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008490:	2300      	movs	r3, #0
 8008492:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800849a:	4618      	mov	r0, r3
 800849c:	f7fa fa68 	bl	8002970 <HAL_PCD_Start>
 80084a0:	4603      	mov	r3, r0
 80084a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084a4:	7bfb      	ldrb	r3, [r7, #15]
 80084a6:	4618      	mov	r0, r3
 80084a8:	f000 f942 	bl	8008730 <USBD_Get_USB_Status>
 80084ac:	4603      	mov	r3, r0
 80084ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3710      	adds	r7, #16
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}

080084ba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80084ba:	b580      	push	{r7, lr}
 80084bc:	b084      	sub	sp, #16
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
 80084c2:	4608      	mov	r0, r1
 80084c4:	4611      	mov	r1, r2
 80084c6:	461a      	mov	r2, r3
 80084c8:	4603      	mov	r3, r0
 80084ca:	70fb      	strb	r3, [r7, #3]
 80084cc:	460b      	mov	r3, r1
 80084ce:	70bb      	strb	r3, [r7, #2]
 80084d0:	4613      	mov	r3, r2
 80084d2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084d4:	2300      	movs	r3, #0
 80084d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084d8:	2300      	movs	r3, #0
 80084da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80084e2:	78bb      	ldrb	r3, [r7, #2]
 80084e4:	883a      	ldrh	r2, [r7, #0]
 80084e6:	78f9      	ldrb	r1, [r7, #3]
 80084e8:	f7fa ff39 	bl	800335e <HAL_PCD_EP_Open>
 80084ec:	4603      	mov	r3, r0
 80084ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084f0:	7bfb      	ldrb	r3, [r7, #15]
 80084f2:	4618      	mov	r0, r3
 80084f4:	f000 f91c 	bl	8008730 <USBD_Get_USB_Status>
 80084f8:	4603      	mov	r3, r0
 80084fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3710      	adds	r7, #16
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}

08008506 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008506:	b580      	push	{r7, lr}
 8008508:	b084      	sub	sp, #16
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
 800850e:	460b      	mov	r3, r1
 8008510:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008512:	2300      	movs	r3, #0
 8008514:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008516:	2300      	movs	r3, #0
 8008518:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008520:	78fa      	ldrb	r2, [r7, #3]
 8008522:	4611      	mov	r1, r2
 8008524:	4618      	mov	r0, r3
 8008526:	f7fa ff82 	bl	800342e <HAL_PCD_EP_Close>
 800852a:	4603      	mov	r3, r0
 800852c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800852e:	7bfb      	ldrb	r3, [r7, #15]
 8008530:	4618      	mov	r0, r3
 8008532:	f000 f8fd 	bl	8008730 <USBD_Get_USB_Status>
 8008536:	4603      	mov	r3, r0
 8008538:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800853a:	7bbb      	ldrb	r3, [r7, #14]
}
 800853c:	4618      	mov	r0, r3
 800853e:	3710      	adds	r7, #16
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b084      	sub	sp, #16
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	460b      	mov	r3, r1
 800854e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008550:	2300      	movs	r3, #0
 8008552:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008554:	2300      	movs	r3, #0
 8008556:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800855e:	78fa      	ldrb	r2, [r7, #3]
 8008560:	4611      	mov	r1, r2
 8008562:	4618      	mov	r0, r3
 8008564:	f7fb f85a 	bl	800361c <HAL_PCD_EP_SetStall>
 8008568:	4603      	mov	r3, r0
 800856a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800856c:	7bfb      	ldrb	r3, [r7, #15]
 800856e:	4618      	mov	r0, r3
 8008570:	f000 f8de 	bl	8008730 <USBD_Get_USB_Status>
 8008574:	4603      	mov	r3, r0
 8008576:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008578:	7bbb      	ldrb	r3, [r7, #14]
}
 800857a:	4618      	mov	r0, r3
 800857c:	3710      	adds	r7, #16
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}

08008582 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008582:	b580      	push	{r7, lr}
 8008584:	b084      	sub	sp, #16
 8008586:	af00      	add	r7, sp, #0
 8008588:	6078      	str	r0, [r7, #4]
 800858a:	460b      	mov	r3, r1
 800858c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800858e:	2300      	movs	r3, #0
 8008590:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008592:	2300      	movs	r3, #0
 8008594:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800859c:	78fa      	ldrb	r2, [r7, #3]
 800859e:	4611      	mov	r1, r2
 80085a0:	4618      	mov	r0, r3
 80085a2:	f7fb f89f 	bl	80036e4 <HAL_PCD_EP_ClrStall>
 80085a6:	4603      	mov	r3, r0
 80085a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085aa:	7bfb      	ldrb	r3, [r7, #15]
 80085ac:	4618      	mov	r0, r3
 80085ae:	f000 f8bf 	bl	8008730 <USBD_Get_USB_Status>
 80085b2:	4603      	mov	r3, r0
 80085b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3710      	adds	r7, #16
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b085      	sub	sp, #20
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	460b      	mov	r3, r1
 80085ca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80085d2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80085d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	da0b      	bge.n	80085f4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80085dc:	78fb      	ldrb	r3, [r7, #3]
 80085de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80085e2:	68f9      	ldr	r1, [r7, #12]
 80085e4:	4613      	mov	r3, r2
 80085e6:	00db      	lsls	r3, r3, #3
 80085e8:	4413      	add	r3, r2
 80085ea:	009b      	lsls	r3, r3, #2
 80085ec:	440b      	add	r3, r1
 80085ee:	333e      	adds	r3, #62	@ 0x3e
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	e00b      	b.n	800860c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80085f4:	78fb      	ldrb	r3, [r7, #3]
 80085f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80085fa:	68f9      	ldr	r1, [r7, #12]
 80085fc:	4613      	mov	r3, r2
 80085fe:	00db      	lsls	r3, r3, #3
 8008600:	4413      	add	r3, r2
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	440b      	add	r3, r1
 8008606:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 800860a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800860c:	4618      	mov	r0, r3
 800860e:	3714      	adds	r7, #20
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr

08008618 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	460b      	mov	r3, r1
 8008622:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008624:	2300      	movs	r3, #0
 8008626:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008628:	2300      	movs	r3, #0
 800862a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008632:	78fa      	ldrb	r2, [r7, #3]
 8008634:	4611      	mov	r1, r2
 8008636:	4618      	mov	r0, r3
 8008638:	f7fa fe6c 	bl	8003314 <HAL_PCD_SetAddress>
 800863c:	4603      	mov	r3, r0
 800863e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008640:	7bfb      	ldrb	r3, [r7, #15]
 8008642:	4618      	mov	r0, r3
 8008644:	f000 f874 	bl	8008730 <USBD_Get_USB_Status>
 8008648:	4603      	mov	r3, r0
 800864a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800864c:	7bbb      	ldrb	r3, [r7, #14]
}
 800864e:	4618      	mov	r0, r3
 8008650:	3710      	adds	r7, #16
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}

08008656 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008656:	b580      	push	{r7, lr}
 8008658:	b086      	sub	sp, #24
 800865a:	af00      	add	r7, sp, #0
 800865c:	60f8      	str	r0, [r7, #12]
 800865e:	607a      	str	r2, [r7, #4]
 8008660:	603b      	str	r3, [r7, #0]
 8008662:	460b      	mov	r3, r1
 8008664:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008666:	2300      	movs	r3, #0
 8008668:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800866a:	2300      	movs	r3, #0
 800866c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008674:	7af9      	ldrb	r1, [r7, #11]
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	687a      	ldr	r2, [r7, #4]
 800867a:	f7fa ff85 	bl	8003588 <HAL_PCD_EP_Transmit>
 800867e:	4603      	mov	r3, r0
 8008680:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008682:	7dfb      	ldrb	r3, [r7, #23]
 8008684:	4618      	mov	r0, r3
 8008686:	f000 f853 	bl	8008730 <USBD_Get_USB_Status>
 800868a:	4603      	mov	r3, r0
 800868c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800868e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008690:	4618      	mov	r0, r3
 8008692:	3718      	adds	r7, #24
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b086      	sub	sp, #24
 800869c:	af00      	add	r7, sp, #0
 800869e:	60f8      	str	r0, [r7, #12]
 80086a0:	607a      	str	r2, [r7, #4]
 80086a2:	603b      	str	r3, [r7, #0]
 80086a4:	460b      	mov	r3, r1
 80086a6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086a8:	2300      	movs	r3, #0
 80086aa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086ac:	2300      	movs	r3, #0
 80086ae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80086b6:	7af9      	ldrb	r1, [r7, #11]
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	687a      	ldr	r2, [r7, #4]
 80086bc:	f7fa ff01 	bl	80034c2 <HAL_PCD_EP_Receive>
 80086c0:	4603      	mov	r3, r0
 80086c2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086c4:	7dfb      	ldrb	r3, [r7, #23]
 80086c6:	4618      	mov	r0, r3
 80086c8:	f000 f832 	bl	8008730 <USBD_Get_USB_Status>
 80086cc:	4603      	mov	r3, r0
 80086ce:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80086d0:	7dbb      	ldrb	r3, [r7, #22]
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3718      	adds	r7, #24
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}

080086da <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086da:	b580      	push	{r7, lr}
 80086dc:	b082      	sub	sp, #8
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6078      	str	r0, [r7, #4]
 80086e2:	460b      	mov	r3, r1
 80086e4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80086ec:	78fa      	ldrb	r2, [r7, #3]
 80086ee:	4611      	mov	r1, r2
 80086f0:	4618      	mov	r0, r3
 80086f2:	f7fa ff31 	bl	8003558 <HAL_PCD_EP_GetRxCount>
 80086f6:	4603      	mov	r3, r0
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3708      	adds	r7, #8
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}

08008700 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008700:	b480      	push	{r7}
 8008702:	b083      	sub	sp, #12
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008708:	4b03      	ldr	r3, [pc, #12]	@ (8008718 <USBD_static_malloc+0x18>)
}
 800870a:	4618      	mov	r0, r3
 800870c:	370c      	adds	r7, #12
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr
 8008716:	bf00      	nop
 8008718:	20001d48 	.word	0x20001d48

0800871c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800871c:	b480      	push	{r7}
 800871e:	b083      	sub	sp, #12
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]

}
 8008724:	bf00      	nop
 8008726:	370c      	adds	r7, #12
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr

08008730 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008730:	b480      	push	{r7}
 8008732:	b085      	sub	sp, #20
 8008734:	af00      	add	r7, sp, #0
 8008736:	4603      	mov	r3, r0
 8008738:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800873a:	2300      	movs	r3, #0
 800873c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800873e:	79fb      	ldrb	r3, [r7, #7]
 8008740:	2b03      	cmp	r3, #3
 8008742:	d817      	bhi.n	8008774 <USBD_Get_USB_Status+0x44>
 8008744:	a201      	add	r2, pc, #4	@ (adr r2, 800874c <USBD_Get_USB_Status+0x1c>)
 8008746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800874a:	bf00      	nop
 800874c:	0800875d 	.word	0x0800875d
 8008750:	08008763 	.word	0x08008763
 8008754:	08008769 	.word	0x08008769
 8008758:	0800876f 	.word	0x0800876f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800875c:	2300      	movs	r3, #0
 800875e:	73fb      	strb	r3, [r7, #15]
    break;
 8008760:	e00b      	b.n	800877a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008762:	2303      	movs	r3, #3
 8008764:	73fb      	strb	r3, [r7, #15]
    break;
 8008766:	e008      	b.n	800877a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008768:	2301      	movs	r3, #1
 800876a:	73fb      	strb	r3, [r7, #15]
    break;
 800876c:	e005      	b.n	800877a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800876e:	2303      	movs	r3, #3
 8008770:	73fb      	strb	r3, [r7, #15]
    break;
 8008772:	e002      	b.n	800877a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008774:	2303      	movs	r3, #3
 8008776:	73fb      	strb	r3, [r7, #15]
    break;
 8008778:	bf00      	nop
  }
  return usb_status;
 800877a:	7bfb      	ldrb	r3, [r7, #15]
}
 800877c:	4618      	mov	r0, r3
 800877e:	3714      	adds	r7, #20
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr

08008788 <siprintf>:
 8008788:	b40e      	push	{r1, r2, r3}
 800878a:	b500      	push	{lr}
 800878c:	b09c      	sub	sp, #112	@ 0x70
 800878e:	ab1d      	add	r3, sp, #116	@ 0x74
 8008790:	9002      	str	r0, [sp, #8]
 8008792:	9006      	str	r0, [sp, #24]
 8008794:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008798:	4809      	ldr	r0, [pc, #36]	@ (80087c0 <siprintf+0x38>)
 800879a:	9107      	str	r1, [sp, #28]
 800879c:	9104      	str	r1, [sp, #16]
 800879e:	4909      	ldr	r1, [pc, #36]	@ (80087c4 <siprintf+0x3c>)
 80087a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80087a4:	9105      	str	r1, [sp, #20]
 80087a6:	6800      	ldr	r0, [r0, #0]
 80087a8:	9301      	str	r3, [sp, #4]
 80087aa:	a902      	add	r1, sp, #8
 80087ac:	f000 f994 	bl	8008ad8 <_svfiprintf_r>
 80087b0:	9b02      	ldr	r3, [sp, #8]
 80087b2:	2200      	movs	r2, #0
 80087b4:	701a      	strb	r2, [r3, #0]
 80087b6:	b01c      	add	sp, #112	@ 0x70
 80087b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80087bc:	b003      	add	sp, #12
 80087be:	4770      	bx	lr
 80087c0:	200000fc 	.word	0x200000fc
 80087c4:	ffff0208 	.word	0xffff0208

080087c8 <memset>:
 80087c8:	4402      	add	r2, r0
 80087ca:	4603      	mov	r3, r0
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d100      	bne.n	80087d2 <memset+0xa>
 80087d0:	4770      	bx	lr
 80087d2:	f803 1b01 	strb.w	r1, [r3], #1
 80087d6:	e7f9      	b.n	80087cc <memset+0x4>

080087d8 <__errno>:
 80087d8:	4b01      	ldr	r3, [pc, #4]	@ (80087e0 <__errno+0x8>)
 80087da:	6818      	ldr	r0, [r3, #0]
 80087dc:	4770      	bx	lr
 80087de:	bf00      	nop
 80087e0:	200000fc 	.word	0x200000fc

080087e4 <__libc_init_array>:
 80087e4:	b570      	push	{r4, r5, r6, lr}
 80087e6:	4d0d      	ldr	r5, [pc, #52]	@ (800881c <__libc_init_array+0x38>)
 80087e8:	4c0d      	ldr	r4, [pc, #52]	@ (8008820 <__libc_init_array+0x3c>)
 80087ea:	1b64      	subs	r4, r4, r5
 80087ec:	10a4      	asrs	r4, r4, #2
 80087ee:	2600      	movs	r6, #0
 80087f0:	42a6      	cmp	r6, r4
 80087f2:	d109      	bne.n	8008808 <__libc_init_array+0x24>
 80087f4:	4d0b      	ldr	r5, [pc, #44]	@ (8008824 <__libc_init_array+0x40>)
 80087f6:	4c0c      	ldr	r4, [pc, #48]	@ (8008828 <__libc_init_array+0x44>)
 80087f8:	f000 fc66 	bl	80090c8 <_init>
 80087fc:	1b64      	subs	r4, r4, r5
 80087fe:	10a4      	asrs	r4, r4, #2
 8008800:	2600      	movs	r6, #0
 8008802:	42a6      	cmp	r6, r4
 8008804:	d105      	bne.n	8008812 <__libc_init_array+0x2e>
 8008806:	bd70      	pop	{r4, r5, r6, pc}
 8008808:	f855 3b04 	ldr.w	r3, [r5], #4
 800880c:	4798      	blx	r3
 800880e:	3601      	adds	r6, #1
 8008810:	e7ee      	b.n	80087f0 <__libc_init_array+0xc>
 8008812:	f855 3b04 	ldr.w	r3, [r5], #4
 8008816:	4798      	blx	r3
 8008818:	3601      	adds	r6, #1
 800881a:	e7f2      	b.n	8008802 <__libc_init_array+0x1e>
 800881c:	080092dc 	.word	0x080092dc
 8008820:	080092dc 	.word	0x080092dc
 8008824:	080092dc 	.word	0x080092dc
 8008828:	080092e0 	.word	0x080092e0

0800882c <__retarget_lock_acquire_recursive>:
 800882c:	4770      	bx	lr

0800882e <__retarget_lock_release_recursive>:
 800882e:	4770      	bx	lr

08008830 <_free_r>:
 8008830:	b538      	push	{r3, r4, r5, lr}
 8008832:	4605      	mov	r5, r0
 8008834:	2900      	cmp	r1, #0
 8008836:	d041      	beq.n	80088bc <_free_r+0x8c>
 8008838:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800883c:	1f0c      	subs	r4, r1, #4
 800883e:	2b00      	cmp	r3, #0
 8008840:	bfb8      	it	lt
 8008842:	18e4      	addlt	r4, r4, r3
 8008844:	f000 f8e0 	bl	8008a08 <__malloc_lock>
 8008848:	4a1d      	ldr	r2, [pc, #116]	@ (80088c0 <_free_r+0x90>)
 800884a:	6813      	ldr	r3, [r2, #0]
 800884c:	b933      	cbnz	r3, 800885c <_free_r+0x2c>
 800884e:	6063      	str	r3, [r4, #4]
 8008850:	6014      	str	r4, [r2, #0]
 8008852:	4628      	mov	r0, r5
 8008854:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008858:	f000 b8dc 	b.w	8008a14 <__malloc_unlock>
 800885c:	42a3      	cmp	r3, r4
 800885e:	d908      	bls.n	8008872 <_free_r+0x42>
 8008860:	6820      	ldr	r0, [r4, #0]
 8008862:	1821      	adds	r1, r4, r0
 8008864:	428b      	cmp	r3, r1
 8008866:	bf01      	itttt	eq
 8008868:	6819      	ldreq	r1, [r3, #0]
 800886a:	685b      	ldreq	r3, [r3, #4]
 800886c:	1809      	addeq	r1, r1, r0
 800886e:	6021      	streq	r1, [r4, #0]
 8008870:	e7ed      	b.n	800884e <_free_r+0x1e>
 8008872:	461a      	mov	r2, r3
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	b10b      	cbz	r3, 800887c <_free_r+0x4c>
 8008878:	42a3      	cmp	r3, r4
 800887a:	d9fa      	bls.n	8008872 <_free_r+0x42>
 800887c:	6811      	ldr	r1, [r2, #0]
 800887e:	1850      	adds	r0, r2, r1
 8008880:	42a0      	cmp	r0, r4
 8008882:	d10b      	bne.n	800889c <_free_r+0x6c>
 8008884:	6820      	ldr	r0, [r4, #0]
 8008886:	4401      	add	r1, r0
 8008888:	1850      	adds	r0, r2, r1
 800888a:	4283      	cmp	r3, r0
 800888c:	6011      	str	r1, [r2, #0]
 800888e:	d1e0      	bne.n	8008852 <_free_r+0x22>
 8008890:	6818      	ldr	r0, [r3, #0]
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	6053      	str	r3, [r2, #4]
 8008896:	4408      	add	r0, r1
 8008898:	6010      	str	r0, [r2, #0]
 800889a:	e7da      	b.n	8008852 <_free_r+0x22>
 800889c:	d902      	bls.n	80088a4 <_free_r+0x74>
 800889e:	230c      	movs	r3, #12
 80088a0:	602b      	str	r3, [r5, #0]
 80088a2:	e7d6      	b.n	8008852 <_free_r+0x22>
 80088a4:	6820      	ldr	r0, [r4, #0]
 80088a6:	1821      	adds	r1, r4, r0
 80088a8:	428b      	cmp	r3, r1
 80088aa:	bf04      	itt	eq
 80088ac:	6819      	ldreq	r1, [r3, #0]
 80088ae:	685b      	ldreq	r3, [r3, #4]
 80088b0:	6063      	str	r3, [r4, #4]
 80088b2:	bf04      	itt	eq
 80088b4:	1809      	addeq	r1, r1, r0
 80088b6:	6021      	streq	r1, [r4, #0]
 80088b8:	6054      	str	r4, [r2, #4]
 80088ba:	e7ca      	b.n	8008852 <_free_r+0x22>
 80088bc:	bd38      	pop	{r3, r4, r5, pc}
 80088be:	bf00      	nop
 80088c0:	200020ac 	.word	0x200020ac

080088c4 <sbrk_aligned>:
 80088c4:	b570      	push	{r4, r5, r6, lr}
 80088c6:	4e0f      	ldr	r6, [pc, #60]	@ (8008904 <sbrk_aligned+0x40>)
 80088c8:	460c      	mov	r4, r1
 80088ca:	6831      	ldr	r1, [r6, #0]
 80088cc:	4605      	mov	r5, r0
 80088ce:	b911      	cbnz	r1, 80088d6 <sbrk_aligned+0x12>
 80088d0:	f000 fba6 	bl	8009020 <_sbrk_r>
 80088d4:	6030      	str	r0, [r6, #0]
 80088d6:	4621      	mov	r1, r4
 80088d8:	4628      	mov	r0, r5
 80088da:	f000 fba1 	bl	8009020 <_sbrk_r>
 80088de:	1c43      	adds	r3, r0, #1
 80088e0:	d103      	bne.n	80088ea <sbrk_aligned+0x26>
 80088e2:	f04f 34ff 	mov.w	r4, #4294967295
 80088e6:	4620      	mov	r0, r4
 80088e8:	bd70      	pop	{r4, r5, r6, pc}
 80088ea:	1cc4      	adds	r4, r0, #3
 80088ec:	f024 0403 	bic.w	r4, r4, #3
 80088f0:	42a0      	cmp	r0, r4
 80088f2:	d0f8      	beq.n	80088e6 <sbrk_aligned+0x22>
 80088f4:	1a21      	subs	r1, r4, r0
 80088f6:	4628      	mov	r0, r5
 80088f8:	f000 fb92 	bl	8009020 <_sbrk_r>
 80088fc:	3001      	adds	r0, #1
 80088fe:	d1f2      	bne.n	80088e6 <sbrk_aligned+0x22>
 8008900:	e7ef      	b.n	80088e2 <sbrk_aligned+0x1e>
 8008902:	bf00      	nop
 8008904:	200020a8 	.word	0x200020a8

08008908 <_malloc_r>:
 8008908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800890c:	1ccd      	adds	r5, r1, #3
 800890e:	f025 0503 	bic.w	r5, r5, #3
 8008912:	3508      	adds	r5, #8
 8008914:	2d0c      	cmp	r5, #12
 8008916:	bf38      	it	cc
 8008918:	250c      	movcc	r5, #12
 800891a:	2d00      	cmp	r5, #0
 800891c:	4606      	mov	r6, r0
 800891e:	db01      	blt.n	8008924 <_malloc_r+0x1c>
 8008920:	42a9      	cmp	r1, r5
 8008922:	d904      	bls.n	800892e <_malloc_r+0x26>
 8008924:	230c      	movs	r3, #12
 8008926:	6033      	str	r3, [r6, #0]
 8008928:	2000      	movs	r0, #0
 800892a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800892e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008a04 <_malloc_r+0xfc>
 8008932:	f000 f869 	bl	8008a08 <__malloc_lock>
 8008936:	f8d8 3000 	ldr.w	r3, [r8]
 800893a:	461c      	mov	r4, r3
 800893c:	bb44      	cbnz	r4, 8008990 <_malloc_r+0x88>
 800893e:	4629      	mov	r1, r5
 8008940:	4630      	mov	r0, r6
 8008942:	f7ff ffbf 	bl	80088c4 <sbrk_aligned>
 8008946:	1c43      	adds	r3, r0, #1
 8008948:	4604      	mov	r4, r0
 800894a:	d158      	bne.n	80089fe <_malloc_r+0xf6>
 800894c:	f8d8 4000 	ldr.w	r4, [r8]
 8008950:	4627      	mov	r7, r4
 8008952:	2f00      	cmp	r7, #0
 8008954:	d143      	bne.n	80089de <_malloc_r+0xd6>
 8008956:	2c00      	cmp	r4, #0
 8008958:	d04b      	beq.n	80089f2 <_malloc_r+0xea>
 800895a:	6823      	ldr	r3, [r4, #0]
 800895c:	4639      	mov	r1, r7
 800895e:	4630      	mov	r0, r6
 8008960:	eb04 0903 	add.w	r9, r4, r3
 8008964:	f000 fb5c 	bl	8009020 <_sbrk_r>
 8008968:	4581      	cmp	r9, r0
 800896a:	d142      	bne.n	80089f2 <_malloc_r+0xea>
 800896c:	6821      	ldr	r1, [r4, #0]
 800896e:	1a6d      	subs	r5, r5, r1
 8008970:	4629      	mov	r1, r5
 8008972:	4630      	mov	r0, r6
 8008974:	f7ff ffa6 	bl	80088c4 <sbrk_aligned>
 8008978:	3001      	adds	r0, #1
 800897a:	d03a      	beq.n	80089f2 <_malloc_r+0xea>
 800897c:	6823      	ldr	r3, [r4, #0]
 800897e:	442b      	add	r3, r5
 8008980:	6023      	str	r3, [r4, #0]
 8008982:	f8d8 3000 	ldr.w	r3, [r8]
 8008986:	685a      	ldr	r2, [r3, #4]
 8008988:	bb62      	cbnz	r2, 80089e4 <_malloc_r+0xdc>
 800898a:	f8c8 7000 	str.w	r7, [r8]
 800898e:	e00f      	b.n	80089b0 <_malloc_r+0xa8>
 8008990:	6822      	ldr	r2, [r4, #0]
 8008992:	1b52      	subs	r2, r2, r5
 8008994:	d420      	bmi.n	80089d8 <_malloc_r+0xd0>
 8008996:	2a0b      	cmp	r2, #11
 8008998:	d917      	bls.n	80089ca <_malloc_r+0xc2>
 800899a:	1961      	adds	r1, r4, r5
 800899c:	42a3      	cmp	r3, r4
 800899e:	6025      	str	r5, [r4, #0]
 80089a0:	bf18      	it	ne
 80089a2:	6059      	strne	r1, [r3, #4]
 80089a4:	6863      	ldr	r3, [r4, #4]
 80089a6:	bf08      	it	eq
 80089a8:	f8c8 1000 	streq.w	r1, [r8]
 80089ac:	5162      	str	r2, [r4, r5]
 80089ae:	604b      	str	r3, [r1, #4]
 80089b0:	4630      	mov	r0, r6
 80089b2:	f000 f82f 	bl	8008a14 <__malloc_unlock>
 80089b6:	f104 000b 	add.w	r0, r4, #11
 80089ba:	1d23      	adds	r3, r4, #4
 80089bc:	f020 0007 	bic.w	r0, r0, #7
 80089c0:	1ac2      	subs	r2, r0, r3
 80089c2:	bf1c      	itt	ne
 80089c4:	1a1b      	subne	r3, r3, r0
 80089c6:	50a3      	strne	r3, [r4, r2]
 80089c8:	e7af      	b.n	800892a <_malloc_r+0x22>
 80089ca:	6862      	ldr	r2, [r4, #4]
 80089cc:	42a3      	cmp	r3, r4
 80089ce:	bf0c      	ite	eq
 80089d0:	f8c8 2000 	streq.w	r2, [r8]
 80089d4:	605a      	strne	r2, [r3, #4]
 80089d6:	e7eb      	b.n	80089b0 <_malloc_r+0xa8>
 80089d8:	4623      	mov	r3, r4
 80089da:	6864      	ldr	r4, [r4, #4]
 80089dc:	e7ae      	b.n	800893c <_malloc_r+0x34>
 80089de:	463c      	mov	r4, r7
 80089e0:	687f      	ldr	r7, [r7, #4]
 80089e2:	e7b6      	b.n	8008952 <_malloc_r+0x4a>
 80089e4:	461a      	mov	r2, r3
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	42a3      	cmp	r3, r4
 80089ea:	d1fb      	bne.n	80089e4 <_malloc_r+0xdc>
 80089ec:	2300      	movs	r3, #0
 80089ee:	6053      	str	r3, [r2, #4]
 80089f0:	e7de      	b.n	80089b0 <_malloc_r+0xa8>
 80089f2:	230c      	movs	r3, #12
 80089f4:	6033      	str	r3, [r6, #0]
 80089f6:	4630      	mov	r0, r6
 80089f8:	f000 f80c 	bl	8008a14 <__malloc_unlock>
 80089fc:	e794      	b.n	8008928 <_malloc_r+0x20>
 80089fe:	6005      	str	r5, [r0, #0]
 8008a00:	e7d6      	b.n	80089b0 <_malloc_r+0xa8>
 8008a02:	bf00      	nop
 8008a04:	200020ac 	.word	0x200020ac

08008a08 <__malloc_lock>:
 8008a08:	4801      	ldr	r0, [pc, #4]	@ (8008a10 <__malloc_lock+0x8>)
 8008a0a:	f7ff bf0f 	b.w	800882c <__retarget_lock_acquire_recursive>
 8008a0e:	bf00      	nop
 8008a10:	200020a4 	.word	0x200020a4

08008a14 <__malloc_unlock>:
 8008a14:	4801      	ldr	r0, [pc, #4]	@ (8008a1c <__malloc_unlock+0x8>)
 8008a16:	f7ff bf0a 	b.w	800882e <__retarget_lock_release_recursive>
 8008a1a:	bf00      	nop
 8008a1c:	200020a4 	.word	0x200020a4

08008a20 <__ssputs_r>:
 8008a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a24:	688e      	ldr	r6, [r1, #8]
 8008a26:	461f      	mov	r7, r3
 8008a28:	42be      	cmp	r6, r7
 8008a2a:	680b      	ldr	r3, [r1, #0]
 8008a2c:	4682      	mov	sl, r0
 8008a2e:	460c      	mov	r4, r1
 8008a30:	4690      	mov	r8, r2
 8008a32:	d82d      	bhi.n	8008a90 <__ssputs_r+0x70>
 8008a34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008a38:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008a3c:	d026      	beq.n	8008a8c <__ssputs_r+0x6c>
 8008a3e:	6965      	ldr	r5, [r4, #20]
 8008a40:	6909      	ldr	r1, [r1, #16]
 8008a42:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a46:	eba3 0901 	sub.w	r9, r3, r1
 8008a4a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008a4e:	1c7b      	adds	r3, r7, #1
 8008a50:	444b      	add	r3, r9
 8008a52:	106d      	asrs	r5, r5, #1
 8008a54:	429d      	cmp	r5, r3
 8008a56:	bf38      	it	cc
 8008a58:	461d      	movcc	r5, r3
 8008a5a:	0553      	lsls	r3, r2, #21
 8008a5c:	d527      	bpl.n	8008aae <__ssputs_r+0x8e>
 8008a5e:	4629      	mov	r1, r5
 8008a60:	f7ff ff52 	bl	8008908 <_malloc_r>
 8008a64:	4606      	mov	r6, r0
 8008a66:	b360      	cbz	r0, 8008ac2 <__ssputs_r+0xa2>
 8008a68:	6921      	ldr	r1, [r4, #16]
 8008a6a:	464a      	mov	r2, r9
 8008a6c:	f000 fae8 	bl	8009040 <memcpy>
 8008a70:	89a3      	ldrh	r3, [r4, #12]
 8008a72:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008a76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a7a:	81a3      	strh	r3, [r4, #12]
 8008a7c:	6126      	str	r6, [r4, #16]
 8008a7e:	6165      	str	r5, [r4, #20]
 8008a80:	444e      	add	r6, r9
 8008a82:	eba5 0509 	sub.w	r5, r5, r9
 8008a86:	6026      	str	r6, [r4, #0]
 8008a88:	60a5      	str	r5, [r4, #8]
 8008a8a:	463e      	mov	r6, r7
 8008a8c:	42be      	cmp	r6, r7
 8008a8e:	d900      	bls.n	8008a92 <__ssputs_r+0x72>
 8008a90:	463e      	mov	r6, r7
 8008a92:	6820      	ldr	r0, [r4, #0]
 8008a94:	4632      	mov	r2, r6
 8008a96:	4641      	mov	r1, r8
 8008a98:	f000 faa8 	bl	8008fec <memmove>
 8008a9c:	68a3      	ldr	r3, [r4, #8]
 8008a9e:	1b9b      	subs	r3, r3, r6
 8008aa0:	60a3      	str	r3, [r4, #8]
 8008aa2:	6823      	ldr	r3, [r4, #0]
 8008aa4:	4433      	add	r3, r6
 8008aa6:	6023      	str	r3, [r4, #0]
 8008aa8:	2000      	movs	r0, #0
 8008aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aae:	462a      	mov	r2, r5
 8008ab0:	f000 fad4 	bl	800905c <_realloc_r>
 8008ab4:	4606      	mov	r6, r0
 8008ab6:	2800      	cmp	r0, #0
 8008ab8:	d1e0      	bne.n	8008a7c <__ssputs_r+0x5c>
 8008aba:	6921      	ldr	r1, [r4, #16]
 8008abc:	4650      	mov	r0, sl
 8008abe:	f7ff feb7 	bl	8008830 <_free_r>
 8008ac2:	230c      	movs	r3, #12
 8008ac4:	f8ca 3000 	str.w	r3, [sl]
 8008ac8:	89a3      	ldrh	r3, [r4, #12]
 8008aca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ace:	81a3      	strh	r3, [r4, #12]
 8008ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ad4:	e7e9      	b.n	8008aaa <__ssputs_r+0x8a>
	...

08008ad8 <_svfiprintf_r>:
 8008ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008adc:	4698      	mov	r8, r3
 8008ade:	898b      	ldrh	r3, [r1, #12]
 8008ae0:	061b      	lsls	r3, r3, #24
 8008ae2:	b09d      	sub	sp, #116	@ 0x74
 8008ae4:	4607      	mov	r7, r0
 8008ae6:	460d      	mov	r5, r1
 8008ae8:	4614      	mov	r4, r2
 8008aea:	d510      	bpl.n	8008b0e <_svfiprintf_r+0x36>
 8008aec:	690b      	ldr	r3, [r1, #16]
 8008aee:	b973      	cbnz	r3, 8008b0e <_svfiprintf_r+0x36>
 8008af0:	2140      	movs	r1, #64	@ 0x40
 8008af2:	f7ff ff09 	bl	8008908 <_malloc_r>
 8008af6:	6028      	str	r0, [r5, #0]
 8008af8:	6128      	str	r0, [r5, #16]
 8008afa:	b930      	cbnz	r0, 8008b0a <_svfiprintf_r+0x32>
 8008afc:	230c      	movs	r3, #12
 8008afe:	603b      	str	r3, [r7, #0]
 8008b00:	f04f 30ff 	mov.w	r0, #4294967295
 8008b04:	b01d      	add	sp, #116	@ 0x74
 8008b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b0a:	2340      	movs	r3, #64	@ 0x40
 8008b0c:	616b      	str	r3, [r5, #20]
 8008b0e:	2300      	movs	r3, #0
 8008b10:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b12:	2320      	movs	r3, #32
 8008b14:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008b18:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b1c:	2330      	movs	r3, #48	@ 0x30
 8008b1e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008cbc <_svfiprintf_r+0x1e4>
 8008b22:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008b26:	f04f 0901 	mov.w	r9, #1
 8008b2a:	4623      	mov	r3, r4
 8008b2c:	469a      	mov	sl, r3
 8008b2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b32:	b10a      	cbz	r2, 8008b38 <_svfiprintf_r+0x60>
 8008b34:	2a25      	cmp	r2, #37	@ 0x25
 8008b36:	d1f9      	bne.n	8008b2c <_svfiprintf_r+0x54>
 8008b38:	ebba 0b04 	subs.w	fp, sl, r4
 8008b3c:	d00b      	beq.n	8008b56 <_svfiprintf_r+0x7e>
 8008b3e:	465b      	mov	r3, fp
 8008b40:	4622      	mov	r2, r4
 8008b42:	4629      	mov	r1, r5
 8008b44:	4638      	mov	r0, r7
 8008b46:	f7ff ff6b 	bl	8008a20 <__ssputs_r>
 8008b4a:	3001      	adds	r0, #1
 8008b4c:	f000 80a7 	beq.w	8008c9e <_svfiprintf_r+0x1c6>
 8008b50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b52:	445a      	add	r2, fp
 8008b54:	9209      	str	r2, [sp, #36]	@ 0x24
 8008b56:	f89a 3000 	ldrb.w	r3, [sl]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	f000 809f 	beq.w	8008c9e <_svfiprintf_r+0x1c6>
 8008b60:	2300      	movs	r3, #0
 8008b62:	f04f 32ff 	mov.w	r2, #4294967295
 8008b66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b6a:	f10a 0a01 	add.w	sl, sl, #1
 8008b6e:	9304      	str	r3, [sp, #16]
 8008b70:	9307      	str	r3, [sp, #28]
 8008b72:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008b76:	931a      	str	r3, [sp, #104]	@ 0x68
 8008b78:	4654      	mov	r4, sl
 8008b7a:	2205      	movs	r2, #5
 8008b7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b80:	484e      	ldr	r0, [pc, #312]	@ (8008cbc <_svfiprintf_r+0x1e4>)
 8008b82:	f7f7 fb2d 	bl	80001e0 <memchr>
 8008b86:	9a04      	ldr	r2, [sp, #16]
 8008b88:	b9d8      	cbnz	r0, 8008bc2 <_svfiprintf_r+0xea>
 8008b8a:	06d0      	lsls	r0, r2, #27
 8008b8c:	bf44      	itt	mi
 8008b8e:	2320      	movmi	r3, #32
 8008b90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b94:	0711      	lsls	r1, r2, #28
 8008b96:	bf44      	itt	mi
 8008b98:	232b      	movmi	r3, #43	@ 0x2b
 8008b9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b9e:	f89a 3000 	ldrb.w	r3, [sl]
 8008ba2:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ba4:	d015      	beq.n	8008bd2 <_svfiprintf_r+0xfa>
 8008ba6:	9a07      	ldr	r2, [sp, #28]
 8008ba8:	4654      	mov	r4, sl
 8008baa:	2000      	movs	r0, #0
 8008bac:	f04f 0c0a 	mov.w	ip, #10
 8008bb0:	4621      	mov	r1, r4
 8008bb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bb6:	3b30      	subs	r3, #48	@ 0x30
 8008bb8:	2b09      	cmp	r3, #9
 8008bba:	d94b      	bls.n	8008c54 <_svfiprintf_r+0x17c>
 8008bbc:	b1b0      	cbz	r0, 8008bec <_svfiprintf_r+0x114>
 8008bbe:	9207      	str	r2, [sp, #28]
 8008bc0:	e014      	b.n	8008bec <_svfiprintf_r+0x114>
 8008bc2:	eba0 0308 	sub.w	r3, r0, r8
 8008bc6:	fa09 f303 	lsl.w	r3, r9, r3
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	9304      	str	r3, [sp, #16]
 8008bce:	46a2      	mov	sl, r4
 8008bd0:	e7d2      	b.n	8008b78 <_svfiprintf_r+0xa0>
 8008bd2:	9b03      	ldr	r3, [sp, #12]
 8008bd4:	1d19      	adds	r1, r3, #4
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	9103      	str	r1, [sp, #12]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	bfbb      	ittet	lt
 8008bde:	425b      	neglt	r3, r3
 8008be0:	f042 0202 	orrlt.w	r2, r2, #2
 8008be4:	9307      	strge	r3, [sp, #28]
 8008be6:	9307      	strlt	r3, [sp, #28]
 8008be8:	bfb8      	it	lt
 8008bea:	9204      	strlt	r2, [sp, #16]
 8008bec:	7823      	ldrb	r3, [r4, #0]
 8008bee:	2b2e      	cmp	r3, #46	@ 0x2e
 8008bf0:	d10a      	bne.n	8008c08 <_svfiprintf_r+0x130>
 8008bf2:	7863      	ldrb	r3, [r4, #1]
 8008bf4:	2b2a      	cmp	r3, #42	@ 0x2a
 8008bf6:	d132      	bne.n	8008c5e <_svfiprintf_r+0x186>
 8008bf8:	9b03      	ldr	r3, [sp, #12]
 8008bfa:	1d1a      	adds	r2, r3, #4
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	9203      	str	r2, [sp, #12]
 8008c00:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008c04:	3402      	adds	r4, #2
 8008c06:	9305      	str	r3, [sp, #20]
 8008c08:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008ccc <_svfiprintf_r+0x1f4>
 8008c0c:	7821      	ldrb	r1, [r4, #0]
 8008c0e:	2203      	movs	r2, #3
 8008c10:	4650      	mov	r0, sl
 8008c12:	f7f7 fae5 	bl	80001e0 <memchr>
 8008c16:	b138      	cbz	r0, 8008c28 <_svfiprintf_r+0x150>
 8008c18:	9b04      	ldr	r3, [sp, #16]
 8008c1a:	eba0 000a 	sub.w	r0, r0, sl
 8008c1e:	2240      	movs	r2, #64	@ 0x40
 8008c20:	4082      	lsls	r2, r0
 8008c22:	4313      	orrs	r3, r2
 8008c24:	3401      	adds	r4, #1
 8008c26:	9304      	str	r3, [sp, #16]
 8008c28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c2c:	4824      	ldr	r0, [pc, #144]	@ (8008cc0 <_svfiprintf_r+0x1e8>)
 8008c2e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008c32:	2206      	movs	r2, #6
 8008c34:	f7f7 fad4 	bl	80001e0 <memchr>
 8008c38:	2800      	cmp	r0, #0
 8008c3a:	d036      	beq.n	8008caa <_svfiprintf_r+0x1d2>
 8008c3c:	4b21      	ldr	r3, [pc, #132]	@ (8008cc4 <_svfiprintf_r+0x1ec>)
 8008c3e:	bb1b      	cbnz	r3, 8008c88 <_svfiprintf_r+0x1b0>
 8008c40:	9b03      	ldr	r3, [sp, #12]
 8008c42:	3307      	adds	r3, #7
 8008c44:	f023 0307 	bic.w	r3, r3, #7
 8008c48:	3308      	adds	r3, #8
 8008c4a:	9303      	str	r3, [sp, #12]
 8008c4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c4e:	4433      	add	r3, r6
 8008c50:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c52:	e76a      	b.n	8008b2a <_svfiprintf_r+0x52>
 8008c54:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c58:	460c      	mov	r4, r1
 8008c5a:	2001      	movs	r0, #1
 8008c5c:	e7a8      	b.n	8008bb0 <_svfiprintf_r+0xd8>
 8008c5e:	2300      	movs	r3, #0
 8008c60:	3401      	adds	r4, #1
 8008c62:	9305      	str	r3, [sp, #20]
 8008c64:	4619      	mov	r1, r3
 8008c66:	f04f 0c0a 	mov.w	ip, #10
 8008c6a:	4620      	mov	r0, r4
 8008c6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c70:	3a30      	subs	r2, #48	@ 0x30
 8008c72:	2a09      	cmp	r2, #9
 8008c74:	d903      	bls.n	8008c7e <_svfiprintf_r+0x1a6>
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d0c6      	beq.n	8008c08 <_svfiprintf_r+0x130>
 8008c7a:	9105      	str	r1, [sp, #20]
 8008c7c:	e7c4      	b.n	8008c08 <_svfiprintf_r+0x130>
 8008c7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c82:	4604      	mov	r4, r0
 8008c84:	2301      	movs	r3, #1
 8008c86:	e7f0      	b.n	8008c6a <_svfiprintf_r+0x192>
 8008c88:	ab03      	add	r3, sp, #12
 8008c8a:	9300      	str	r3, [sp, #0]
 8008c8c:	462a      	mov	r2, r5
 8008c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8008cc8 <_svfiprintf_r+0x1f0>)
 8008c90:	a904      	add	r1, sp, #16
 8008c92:	4638      	mov	r0, r7
 8008c94:	f3af 8000 	nop.w
 8008c98:	1c42      	adds	r2, r0, #1
 8008c9a:	4606      	mov	r6, r0
 8008c9c:	d1d6      	bne.n	8008c4c <_svfiprintf_r+0x174>
 8008c9e:	89ab      	ldrh	r3, [r5, #12]
 8008ca0:	065b      	lsls	r3, r3, #25
 8008ca2:	f53f af2d 	bmi.w	8008b00 <_svfiprintf_r+0x28>
 8008ca6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ca8:	e72c      	b.n	8008b04 <_svfiprintf_r+0x2c>
 8008caa:	ab03      	add	r3, sp, #12
 8008cac:	9300      	str	r3, [sp, #0]
 8008cae:	462a      	mov	r2, r5
 8008cb0:	4b05      	ldr	r3, [pc, #20]	@ (8008cc8 <_svfiprintf_r+0x1f0>)
 8008cb2:	a904      	add	r1, sp, #16
 8008cb4:	4638      	mov	r0, r7
 8008cb6:	f000 f879 	bl	8008dac <_printf_i>
 8008cba:	e7ed      	b.n	8008c98 <_svfiprintf_r+0x1c0>
 8008cbc:	080092a0 	.word	0x080092a0
 8008cc0:	080092aa 	.word	0x080092aa
 8008cc4:	00000000 	.word	0x00000000
 8008cc8:	08008a21 	.word	0x08008a21
 8008ccc:	080092a6 	.word	0x080092a6

08008cd0 <_printf_common>:
 8008cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cd4:	4616      	mov	r6, r2
 8008cd6:	4698      	mov	r8, r3
 8008cd8:	688a      	ldr	r2, [r1, #8]
 8008cda:	690b      	ldr	r3, [r1, #16]
 8008cdc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	bfb8      	it	lt
 8008ce4:	4613      	movlt	r3, r2
 8008ce6:	6033      	str	r3, [r6, #0]
 8008ce8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008cec:	4607      	mov	r7, r0
 8008cee:	460c      	mov	r4, r1
 8008cf0:	b10a      	cbz	r2, 8008cf6 <_printf_common+0x26>
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	6033      	str	r3, [r6, #0]
 8008cf6:	6823      	ldr	r3, [r4, #0]
 8008cf8:	0699      	lsls	r1, r3, #26
 8008cfa:	bf42      	ittt	mi
 8008cfc:	6833      	ldrmi	r3, [r6, #0]
 8008cfe:	3302      	addmi	r3, #2
 8008d00:	6033      	strmi	r3, [r6, #0]
 8008d02:	6825      	ldr	r5, [r4, #0]
 8008d04:	f015 0506 	ands.w	r5, r5, #6
 8008d08:	d106      	bne.n	8008d18 <_printf_common+0x48>
 8008d0a:	f104 0a19 	add.w	sl, r4, #25
 8008d0e:	68e3      	ldr	r3, [r4, #12]
 8008d10:	6832      	ldr	r2, [r6, #0]
 8008d12:	1a9b      	subs	r3, r3, r2
 8008d14:	42ab      	cmp	r3, r5
 8008d16:	dc26      	bgt.n	8008d66 <_printf_common+0x96>
 8008d18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008d1c:	6822      	ldr	r2, [r4, #0]
 8008d1e:	3b00      	subs	r3, #0
 8008d20:	bf18      	it	ne
 8008d22:	2301      	movne	r3, #1
 8008d24:	0692      	lsls	r2, r2, #26
 8008d26:	d42b      	bmi.n	8008d80 <_printf_common+0xb0>
 8008d28:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008d2c:	4641      	mov	r1, r8
 8008d2e:	4638      	mov	r0, r7
 8008d30:	47c8      	blx	r9
 8008d32:	3001      	adds	r0, #1
 8008d34:	d01e      	beq.n	8008d74 <_printf_common+0xa4>
 8008d36:	6823      	ldr	r3, [r4, #0]
 8008d38:	6922      	ldr	r2, [r4, #16]
 8008d3a:	f003 0306 	and.w	r3, r3, #6
 8008d3e:	2b04      	cmp	r3, #4
 8008d40:	bf02      	ittt	eq
 8008d42:	68e5      	ldreq	r5, [r4, #12]
 8008d44:	6833      	ldreq	r3, [r6, #0]
 8008d46:	1aed      	subeq	r5, r5, r3
 8008d48:	68a3      	ldr	r3, [r4, #8]
 8008d4a:	bf0c      	ite	eq
 8008d4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d50:	2500      	movne	r5, #0
 8008d52:	4293      	cmp	r3, r2
 8008d54:	bfc4      	itt	gt
 8008d56:	1a9b      	subgt	r3, r3, r2
 8008d58:	18ed      	addgt	r5, r5, r3
 8008d5a:	2600      	movs	r6, #0
 8008d5c:	341a      	adds	r4, #26
 8008d5e:	42b5      	cmp	r5, r6
 8008d60:	d11a      	bne.n	8008d98 <_printf_common+0xc8>
 8008d62:	2000      	movs	r0, #0
 8008d64:	e008      	b.n	8008d78 <_printf_common+0xa8>
 8008d66:	2301      	movs	r3, #1
 8008d68:	4652      	mov	r2, sl
 8008d6a:	4641      	mov	r1, r8
 8008d6c:	4638      	mov	r0, r7
 8008d6e:	47c8      	blx	r9
 8008d70:	3001      	adds	r0, #1
 8008d72:	d103      	bne.n	8008d7c <_printf_common+0xac>
 8008d74:	f04f 30ff 	mov.w	r0, #4294967295
 8008d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d7c:	3501      	adds	r5, #1
 8008d7e:	e7c6      	b.n	8008d0e <_printf_common+0x3e>
 8008d80:	18e1      	adds	r1, r4, r3
 8008d82:	1c5a      	adds	r2, r3, #1
 8008d84:	2030      	movs	r0, #48	@ 0x30
 8008d86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008d8a:	4422      	add	r2, r4
 8008d8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008d90:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008d94:	3302      	adds	r3, #2
 8008d96:	e7c7      	b.n	8008d28 <_printf_common+0x58>
 8008d98:	2301      	movs	r3, #1
 8008d9a:	4622      	mov	r2, r4
 8008d9c:	4641      	mov	r1, r8
 8008d9e:	4638      	mov	r0, r7
 8008da0:	47c8      	blx	r9
 8008da2:	3001      	adds	r0, #1
 8008da4:	d0e6      	beq.n	8008d74 <_printf_common+0xa4>
 8008da6:	3601      	adds	r6, #1
 8008da8:	e7d9      	b.n	8008d5e <_printf_common+0x8e>
	...

08008dac <_printf_i>:
 8008dac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008db0:	7e0f      	ldrb	r7, [r1, #24]
 8008db2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008db4:	2f78      	cmp	r7, #120	@ 0x78
 8008db6:	4691      	mov	r9, r2
 8008db8:	4680      	mov	r8, r0
 8008dba:	460c      	mov	r4, r1
 8008dbc:	469a      	mov	sl, r3
 8008dbe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008dc2:	d807      	bhi.n	8008dd4 <_printf_i+0x28>
 8008dc4:	2f62      	cmp	r7, #98	@ 0x62
 8008dc6:	d80a      	bhi.n	8008dde <_printf_i+0x32>
 8008dc8:	2f00      	cmp	r7, #0
 8008dca:	f000 80d2 	beq.w	8008f72 <_printf_i+0x1c6>
 8008dce:	2f58      	cmp	r7, #88	@ 0x58
 8008dd0:	f000 80b9 	beq.w	8008f46 <_printf_i+0x19a>
 8008dd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008dd8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008ddc:	e03a      	b.n	8008e54 <_printf_i+0xa8>
 8008dde:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008de2:	2b15      	cmp	r3, #21
 8008de4:	d8f6      	bhi.n	8008dd4 <_printf_i+0x28>
 8008de6:	a101      	add	r1, pc, #4	@ (adr r1, 8008dec <_printf_i+0x40>)
 8008de8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008dec:	08008e45 	.word	0x08008e45
 8008df0:	08008e59 	.word	0x08008e59
 8008df4:	08008dd5 	.word	0x08008dd5
 8008df8:	08008dd5 	.word	0x08008dd5
 8008dfc:	08008dd5 	.word	0x08008dd5
 8008e00:	08008dd5 	.word	0x08008dd5
 8008e04:	08008e59 	.word	0x08008e59
 8008e08:	08008dd5 	.word	0x08008dd5
 8008e0c:	08008dd5 	.word	0x08008dd5
 8008e10:	08008dd5 	.word	0x08008dd5
 8008e14:	08008dd5 	.word	0x08008dd5
 8008e18:	08008f59 	.word	0x08008f59
 8008e1c:	08008e83 	.word	0x08008e83
 8008e20:	08008f13 	.word	0x08008f13
 8008e24:	08008dd5 	.word	0x08008dd5
 8008e28:	08008dd5 	.word	0x08008dd5
 8008e2c:	08008f7b 	.word	0x08008f7b
 8008e30:	08008dd5 	.word	0x08008dd5
 8008e34:	08008e83 	.word	0x08008e83
 8008e38:	08008dd5 	.word	0x08008dd5
 8008e3c:	08008dd5 	.word	0x08008dd5
 8008e40:	08008f1b 	.word	0x08008f1b
 8008e44:	6833      	ldr	r3, [r6, #0]
 8008e46:	1d1a      	adds	r2, r3, #4
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	6032      	str	r2, [r6, #0]
 8008e4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008e54:	2301      	movs	r3, #1
 8008e56:	e09d      	b.n	8008f94 <_printf_i+0x1e8>
 8008e58:	6833      	ldr	r3, [r6, #0]
 8008e5a:	6820      	ldr	r0, [r4, #0]
 8008e5c:	1d19      	adds	r1, r3, #4
 8008e5e:	6031      	str	r1, [r6, #0]
 8008e60:	0606      	lsls	r6, r0, #24
 8008e62:	d501      	bpl.n	8008e68 <_printf_i+0xbc>
 8008e64:	681d      	ldr	r5, [r3, #0]
 8008e66:	e003      	b.n	8008e70 <_printf_i+0xc4>
 8008e68:	0645      	lsls	r5, r0, #25
 8008e6a:	d5fb      	bpl.n	8008e64 <_printf_i+0xb8>
 8008e6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008e70:	2d00      	cmp	r5, #0
 8008e72:	da03      	bge.n	8008e7c <_printf_i+0xd0>
 8008e74:	232d      	movs	r3, #45	@ 0x2d
 8008e76:	426d      	negs	r5, r5
 8008e78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e7c:	4859      	ldr	r0, [pc, #356]	@ (8008fe4 <_printf_i+0x238>)
 8008e7e:	230a      	movs	r3, #10
 8008e80:	e011      	b.n	8008ea6 <_printf_i+0xfa>
 8008e82:	6821      	ldr	r1, [r4, #0]
 8008e84:	6833      	ldr	r3, [r6, #0]
 8008e86:	0608      	lsls	r0, r1, #24
 8008e88:	f853 5b04 	ldr.w	r5, [r3], #4
 8008e8c:	d402      	bmi.n	8008e94 <_printf_i+0xe8>
 8008e8e:	0649      	lsls	r1, r1, #25
 8008e90:	bf48      	it	mi
 8008e92:	b2ad      	uxthmi	r5, r5
 8008e94:	2f6f      	cmp	r7, #111	@ 0x6f
 8008e96:	4853      	ldr	r0, [pc, #332]	@ (8008fe4 <_printf_i+0x238>)
 8008e98:	6033      	str	r3, [r6, #0]
 8008e9a:	bf14      	ite	ne
 8008e9c:	230a      	movne	r3, #10
 8008e9e:	2308      	moveq	r3, #8
 8008ea0:	2100      	movs	r1, #0
 8008ea2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008ea6:	6866      	ldr	r6, [r4, #4]
 8008ea8:	60a6      	str	r6, [r4, #8]
 8008eaa:	2e00      	cmp	r6, #0
 8008eac:	bfa2      	ittt	ge
 8008eae:	6821      	ldrge	r1, [r4, #0]
 8008eb0:	f021 0104 	bicge.w	r1, r1, #4
 8008eb4:	6021      	strge	r1, [r4, #0]
 8008eb6:	b90d      	cbnz	r5, 8008ebc <_printf_i+0x110>
 8008eb8:	2e00      	cmp	r6, #0
 8008eba:	d04b      	beq.n	8008f54 <_printf_i+0x1a8>
 8008ebc:	4616      	mov	r6, r2
 8008ebe:	fbb5 f1f3 	udiv	r1, r5, r3
 8008ec2:	fb03 5711 	mls	r7, r3, r1, r5
 8008ec6:	5dc7      	ldrb	r7, [r0, r7]
 8008ec8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008ecc:	462f      	mov	r7, r5
 8008ece:	42bb      	cmp	r3, r7
 8008ed0:	460d      	mov	r5, r1
 8008ed2:	d9f4      	bls.n	8008ebe <_printf_i+0x112>
 8008ed4:	2b08      	cmp	r3, #8
 8008ed6:	d10b      	bne.n	8008ef0 <_printf_i+0x144>
 8008ed8:	6823      	ldr	r3, [r4, #0]
 8008eda:	07df      	lsls	r7, r3, #31
 8008edc:	d508      	bpl.n	8008ef0 <_printf_i+0x144>
 8008ede:	6923      	ldr	r3, [r4, #16]
 8008ee0:	6861      	ldr	r1, [r4, #4]
 8008ee2:	4299      	cmp	r1, r3
 8008ee4:	bfde      	ittt	le
 8008ee6:	2330      	movle	r3, #48	@ 0x30
 8008ee8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008eec:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008ef0:	1b92      	subs	r2, r2, r6
 8008ef2:	6122      	str	r2, [r4, #16]
 8008ef4:	f8cd a000 	str.w	sl, [sp]
 8008ef8:	464b      	mov	r3, r9
 8008efa:	aa03      	add	r2, sp, #12
 8008efc:	4621      	mov	r1, r4
 8008efe:	4640      	mov	r0, r8
 8008f00:	f7ff fee6 	bl	8008cd0 <_printf_common>
 8008f04:	3001      	adds	r0, #1
 8008f06:	d14a      	bne.n	8008f9e <_printf_i+0x1f2>
 8008f08:	f04f 30ff 	mov.w	r0, #4294967295
 8008f0c:	b004      	add	sp, #16
 8008f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f12:	6823      	ldr	r3, [r4, #0]
 8008f14:	f043 0320 	orr.w	r3, r3, #32
 8008f18:	6023      	str	r3, [r4, #0]
 8008f1a:	4833      	ldr	r0, [pc, #204]	@ (8008fe8 <_printf_i+0x23c>)
 8008f1c:	2778      	movs	r7, #120	@ 0x78
 8008f1e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008f22:	6823      	ldr	r3, [r4, #0]
 8008f24:	6831      	ldr	r1, [r6, #0]
 8008f26:	061f      	lsls	r7, r3, #24
 8008f28:	f851 5b04 	ldr.w	r5, [r1], #4
 8008f2c:	d402      	bmi.n	8008f34 <_printf_i+0x188>
 8008f2e:	065f      	lsls	r7, r3, #25
 8008f30:	bf48      	it	mi
 8008f32:	b2ad      	uxthmi	r5, r5
 8008f34:	6031      	str	r1, [r6, #0]
 8008f36:	07d9      	lsls	r1, r3, #31
 8008f38:	bf44      	itt	mi
 8008f3a:	f043 0320 	orrmi.w	r3, r3, #32
 8008f3e:	6023      	strmi	r3, [r4, #0]
 8008f40:	b11d      	cbz	r5, 8008f4a <_printf_i+0x19e>
 8008f42:	2310      	movs	r3, #16
 8008f44:	e7ac      	b.n	8008ea0 <_printf_i+0xf4>
 8008f46:	4827      	ldr	r0, [pc, #156]	@ (8008fe4 <_printf_i+0x238>)
 8008f48:	e7e9      	b.n	8008f1e <_printf_i+0x172>
 8008f4a:	6823      	ldr	r3, [r4, #0]
 8008f4c:	f023 0320 	bic.w	r3, r3, #32
 8008f50:	6023      	str	r3, [r4, #0]
 8008f52:	e7f6      	b.n	8008f42 <_printf_i+0x196>
 8008f54:	4616      	mov	r6, r2
 8008f56:	e7bd      	b.n	8008ed4 <_printf_i+0x128>
 8008f58:	6833      	ldr	r3, [r6, #0]
 8008f5a:	6825      	ldr	r5, [r4, #0]
 8008f5c:	6961      	ldr	r1, [r4, #20]
 8008f5e:	1d18      	adds	r0, r3, #4
 8008f60:	6030      	str	r0, [r6, #0]
 8008f62:	062e      	lsls	r6, r5, #24
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	d501      	bpl.n	8008f6c <_printf_i+0x1c0>
 8008f68:	6019      	str	r1, [r3, #0]
 8008f6a:	e002      	b.n	8008f72 <_printf_i+0x1c6>
 8008f6c:	0668      	lsls	r0, r5, #25
 8008f6e:	d5fb      	bpl.n	8008f68 <_printf_i+0x1bc>
 8008f70:	8019      	strh	r1, [r3, #0]
 8008f72:	2300      	movs	r3, #0
 8008f74:	6123      	str	r3, [r4, #16]
 8008f76:	4616      	mov	r6, r2
 8008f78:	e7bc      	b.n	8008ef4 <_printf_i+0x148>
 8008f7a:	6833      	ldr	r3, [r6, #0]
 8008f7c:	1d1a      	adds	r2, r3, #4
 8008f7e:	6032      	str	r2, [r6, #0]
 8008f80:	681e      	ldr	r6, [r3, #0]
 8008f82:	6862      	ldr	r2, [r4, #4]
 8008f84:	2100      	movs	r1, #0
 8008f86:	4630      	mov	r0, r6
 8008f88:	f7f7 f92a 	bl	80001e0 <memchr>
 8008f8c:	b108      	cbz	r0, 8008f92 <_printf_i+0x1e6>
 8008f8e:	1b80      	subs	r0, r0, r6
 8008f90:	6060      	str	r0, [r4, #4]
 8008f92:	6863      	ldr	r3, [r4, #4]
 8008f94:	6123      	str	r3, [r4, #16]
 8008f96:	2300      	movs	r3, #0
 8008f98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f9c:	e7aa      	b.n	8008ef4 <_printf_i+0x148>
 8008f9e:	6923      	ldr	r3, [r4, #16]
 8008fa0:	4632      	mov	r2, r6
 8008fa2:	4649      	mov	r1, r9
 8008fa4:	4640      	mov	r0, r8
 8008fa6:	47d0      	blx	sl
 8008fa8:	3001      	adds	r0, #1
 8008faa:	d0ad      	beq.n	8008f08 <_printf_i+0x15c>
 8008fac:	6823      	ldr	r3, [r4, #0]
 8008fae:	079b      	lsls	r3, r3, #30
 8008fb0:	d413      	bmi.n	8008fda <_printf_i+0x22e>
 8008fb2:	68e0      	ldr	r0, [r4, #12]
 8008fb4:	9b03      	ldr	r3, [sp, #12]
 8008fb6:	4298      	cmp	r0, r3
 8008fb8:	bfb8      	it	lt
 8008fba:	4618      	movlt	r0, r3
 8008fbc:	e7a6      	b.n	8008f0c <_printf_i+0x160>
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	4632      	mov	r2, r6
 8008fc2:	4649      	mov	r1, r9
 8008fc4:	4640      	mov	r0, r8
 8008fc6:	47d0      	blx	sl
 8008fc8:	3001      	adds	r0, #1
 8008fca:	d09d      	beq.n	8008f08 <_printf_i+0x15c>
 8008fcc:	3501      	adds	r5, #1
 8008fce:	68e3      	ldr	r3, [r4, #12]
 8008fd0:	9903      	ldr	r1, [sp, #12]
 8008fd2:	1a5b      	subs	r3, r3, r1
 8008fd4:	42ab      	cmp	r3, r5
 8008fd6:	dcf2      	bgt.n	8008fbe <_printf_i+0x212>
 8008fd8:	e7eb      	b.n	8008fb2 <_printf_i+0x206>
 8008fda:	2500      	movs	r5, #0
 8008fdc:	f104 0619 	add.w	r6, r4, #25
 8008fe0:	e7f5      	b.n	8008fce <_printf_i+0x222>
 8008fe2:	bf00      	nop
 8008fe4:	080092b1 	.word	0x080092b1
 8008fe8:	080092c2 	.word	0x080092c2

08008fec <memmove>:
 8008fec:	4288      	cmp	r0, r1
 8008fee:	b510      	push	{r4, lr}
 8008ff0:	eb01 0402 	add.w	r4, r1, r2
 8008ff4:	d902      	bls.n	8008ffc <memmove+0x10>
 8008ff6:	4284      	cmp	r4, r0
 8008ff8:	4623      	mov	r3, r4
 8008ffa:	d807      	bhi.n	800900c <memmove+0x20>
 8008ffc:	1e43      	subs	r3, r0, #1
 8008ffe:	42a1      	cmp	r1, r4
 8009000:	d008      	beq.n	8009014 <memmove+0x28>
 8009002:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009006:	f803 2f01 	strb.w	r2, [r3, #1]!
 800900a:	e7f8      	b.n	8008ffe <memmove+0x12>
 800900c:	4402      	add	r2, r0
 800900e:	4601      	mov	r1, r0
 8009010:	428a      	cmp	r2, r1
 8009012:	d100      	bne.n	8009016 <memmove+0x2a>
 8009014:	bd10      	pop	{r4, pc}
 8009016:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800901a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800901e:	e7f7      	b.n	8009010 <memmove+0x24>

08009020 <_sbrk_r>:
 8009020:	b538      	push	{r3, r4, r5, lr}
 8009022:	4d06      	ldr	r5, [pc, #24]	@ (800903c <_sbrk_r+0x1c>)
 8009024:	2300      	movs	r3, #0
 8009026:	4604      	mov	r4, r0
 8009028:	4608      	mov	r0, r1
 800902a:	602b      	str	r3, [r5, #0]
 800902c:	f7f8 fbce 	bl	80017cc <_sbrk>
 8009030:	1c43      	adds	r3, r0, #1
 8009032:	d102      	bne.n	800903a <_sbrk_r+0x1a>
 8009034:	682b      	ldr	r3, [r5, #0]
 8009036:	b103      	cbz	r3, 800903a <_sbrk_r+0x1a>
 8009038:	6023      	str	r3, [r4, #0]
 800903a:	bd38      	pop	{r3, r4, r5, pc}
 800903c:	200020a0 	.word	0x200020a0

08009040 <memcpy>:
 8009040:	440a      	add	r2, r1
 8009042:	4291      	cmp	r1, r2
 8009044:	f100 33ff 	add.w	r3, r0, #4294967295
 8009048:	d100      	bne.n	800904c <memcpy+0xc>
 800904a:	4770      	bx	lr
 800904c:	b510      	push	{r4, lr}
 800904e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009052:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009056:	4291      	cmp	r1, r2
 8009058:	d1f9      	bne.n	800904e <memcpy+0xe>
 800905a:	bd10      	pop	{r4, pc}

0800905c <_realloc_r>:
 800905c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009060:	4680      	mov	r8, r0
 8009062:	4615      	mov	r5, r2
 8009064:	460c      	mov	r4, r1
 8009066:	b921      	cbnz	r1, 8009072 <_realloc_r+0x16>
 8009068:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800906c:	4611      	mov	r1, r2
 800906e:	f7ff bc4b 	b.w	8008908 <_malloc_r>
 8009072:	b92a      	cbnz	r2, 8009080 <_realloc_r+0x24>
 8009074:	f7ff fbdc 	bl	8008830 <_free_r>
 8009078:	2400      	movs	r4, #0
 800907a:	4620      	mov	r0, r4
 800907c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009080:	f000 f81a 	bl	80090b8 <_malloc_usable_size_r>
 8009084:	4285      	cmp	r5, r0
 8009086:	4606      	mov	r6, r0
 8009088:	d802      	bhi.n	8009090 <_realloc_r+0x34>
 800908a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800908e:	d8f4      	bhi.n	800907a <_realloc_r+0x1e>
 8009090:	4629      	mov	r1, r5
 8009092:	4640      	mov	r0, r8
 8009094:	f7ff fc38 	bl	8008908 <_malloc_r>
 8009098:	4607      	mov	r7, r0
 800909a:	2800      	cmp	r0, #0
 800909c:	d0ec      	beq.n	8009078 <_realloc_r+0x1c>
 800909e:	42b5      	cmp	r5, r6
 80090a0:	462a      	mov	r2, r5
 80090a2:	4621      	mov	r1, r4
 80090a4:	bf28      	it	cs
 80090a6:	4632      	movcs	r2, r6
 80090a8:	f7ff ffca 	bl	8009040 <memcpy>
 80090ac:	4621      	mov	r1, r4
 80090ae:	4640      	mov	r0, r8
 80090b0:	f7ff fbbe 	bl	8008830 <_free_r>
 80090b4:	463c      	mov	r4, r7
 80090b6:	e7e0      	b.n	800907a <_realloc_r+0x1e>

080090b8 <_malloc_usable_size_r>:
 80090b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090bc:	1f18      	subs	r0, r3, #4
 80090be:	2b00      	cmp	r3, #0
 80090c0:	bfbc      	itt	lt
 80090c2:	580b      	ldrlt	r3, [r1, r0]
 80090c4:	18c0      	addlt	r0, r0, r3
 80090c6:	4770      	bx	lr

080090c8 <_init>:
 80090c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ca:	bf00      	nop
 80090cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090ce:	bc08      	pop	{r3}
 80090d0:	469e      	mov	lr, r3
 80090d2:	4770      	bx	lr

080090d4 <_fini>:
 80090d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090d6:	bf00      	nop
 80090d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090da:	bc08      	pop	{r3}
 80090dc:	469e      	mov	lr, r3
 80090de:	4770      	bx	lr
