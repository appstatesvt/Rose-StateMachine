
StateMachine2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009590  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08009720  08009720  0000a720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009850  08009850  0000b14c  2**0
                  CONTENTS
  4 .ARM          00000008  08009850  08009850  0000a850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009858  08009858  0000b14c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009858  08009858  0000a858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800985c  0800985c  0000a85c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  08009860  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b14c  2**0
                  CONTENTS
 10 .bss          00001ecc  2000014c  2000014c  0000b14c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002018  20002018  0000b14c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b14c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011cb1  00000000  00000000  0000b17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003330  00000000  00000000  0001ce2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f18  00000000  00000000  00020160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b43  00000000  00000000  00021078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025c18  00000000  00000000  00021bbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014241  00000000  00000000  000477d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7b0b  00000000  00000000  0005ba14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013351f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004234  00000000  00000000  00133564  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  00137798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000014c 	.word	0x2000014c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009708 	.word	0x08009708

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000150 	.word	0x20000150
 80001cc:	08009708 	.word	0x08009708

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f001 fb50 	bl	8001c18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 fdf2 	bl	8001160 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f000 fff8 	bl	8001570 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000580:	f000 fe58 	bl	8001234 <MX_ADC1_Init>
  MX_DAC_Init();
 8000584:	f000 ffc0 	bl	8001508 <MX_DAC_Init>
  MX_USB_DEVICE_Init();
 8000588:	f007 fef6 	bl	8008378 <MX_USB_DEVICE_Init>
  MX_ADC2_Init();
 800058c:	f000 fea4 	bl	80012d8 <MX_ADC2_Init>
  MX_CAN1_Init();
 8000590:	f000 ff46 	bl	8001420 <MX_CAN1_Init>
  MX_ADC3_Init();
 8000594:	f000 fef2 	bl	800137c <MX_ADC3_Init>


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  i_keyIGN 				= HAL_GPIO_ReadPin(keyIGNPort, keyIGN);
 8000598:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800059c:	483e      	ldr	r0, [pc, #248]	@ (8000698 <main+0x128>)
 800059e:	f002 fcdd 	bl	8002f5c <HAL_GPIO_ReadPin>
 80005a2:	4603      	mov	r3, r0
 80005a4:	461a      	mov	r2, r3
 80005a6:	4b3d      	ldr	r3, [pc, #244]	@ (800069c <main+0x12c>)
 80005a8:	701a      	strb	r2, [r3, #0]
	  i_keyACC 				= HAL_GPIO_ReadPin(keyACCPort, keyACC);
 80005aa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005ae:	483a      	ldr	r0, [pc, #232]	@ (8000698 <main+0x128>)
 80005b0:	f002 fcd4 	bl	8002f5c <HAL_GPIO_ReadPin>
 80005b4:	4603      	mov	r3, r0
 80005b6:	461a      	mov	r2, r3
 80005b8:	4b39      	ldr	r3, [pc, #228]	@ (80006a0 <main+0x130>)
 80005ba:	701a      	strb	r2, [r3, #0]
	  i_killSwitch 			= !HAL_GPIO_ReadPin(killSwitchPort, killSwitch);
 80005bc:	2102      	movs	r1, #2
 80005be:	4839      	ldr	r0, [pc, #228]	@ (80006a4 <main+0x134>)
 80005c0:	f002 fccc 	bl	8002f5c <HAL_GPIO_ReadPin>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	bf0c      	ite	eq
 80005ca:	2301      	moveq	r3, #1
 80005cc:	2300      	movne	r3, #0
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	461a      	mov	r2, r3
 80005d2:	4b35      	ldr	r3, [pc, #212]	@ (80006a8 <main+0x138>)
 80005d4:	701a      	strb	r2, [r3, #0]
	  i_chargeContactor 	= HAL_GPIO_ReadPin(chargeContactorPort, chargeContactor);
 80005d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005da:	482f      	ldr	r0, [pc, #188]	@ (8000698 <main+0x128>)
 80005dc:	f002 fcbe 	bl	8002f5c <HAL_GPIO_ReadPin>
 80005e0:	4603      	mov	r3, r0
 80005e2:	461a      	mov	r2, r3
 80005e4:	4b31      	ldr	r3, [pc, #196]	@ (80006ac <main+0x13c>)
 80005e6:	701a      	strb	r2, [r3, #0]
	  i_chargeEnable 		= !HAL_GPIO_ReadPin(chargeEnablePort, chargeEnable);
 80005e8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005ec:	482a      	ldr	r0, [pc, #168]	@ (8000698 <main+0x128>)
 80005ee:	f002 fcb5 	bl	8002f5c <HAL_GPIO_ReadPin>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	bf0c      	ite	eq
 80005f8:	2301      	moveq	r3, #1
 80005fa:	2300      	movne	r3, #0
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	461a      	mov	r2, r3
 8000600:	4b2b      	ldr	r3, [pc, #172]	@ (80006b0 <main+0x140>)
 8000602:	701a      	strb	r2, [r3, #0]
	  i_disChargeEnable 	= !HAL_GPIO_ReadPin(disChargeEnablePort, disChargeEnable);
 8000604:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000608:	4823      	ldr	r0, [pc, #140]	@ (8000698 <main+0x128>)
 800060a:	f002 fca7 	bl	8002f5c <HAL_GPIO_ReadPin>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	bf0c      	ite	eq
 8000614:	2301      	moveq	r3, #1
 8000616:	2300      	movne	r3, #0
 8000618:	b2db      	uxtb	r3, r3
 800061a:	461a      	mov	r2, r3
 800061c:	4b25      	ldr	r3, [pc, #148]	@ (80006b4 <main+0x144>)
 800061e:	701a      	strb	r2, [r3, #0]
	  i_brakeSwitchInput 	= HAL_GPIO_ReadPin(brakeSwitchInputPort, brakeSwitchInput);
 8000620:	2104      	movs	r1, #4
 8000622:	4820      	ldr	r0, [pc, #128]	@ (80006a4 <main+0x134>)
 8000624:	f002 fc9a 	bl	8002f5c <HAL_GPIO_ReadPin>
 8000628:	4603      	mov	r3, r0
 800062a:	461a      	mov	r2, r3
 800062c:	4b22      	ldr	r3, [pc, #136]	@ (80006b8 <main+0x148>)
 800062e:	701a      	strb	r2, [r3, #0]


	switch(currentState) {
 8000630:	4b22      	ldr	r3, [pc, #136]	@ (80006bc <main+0x14c>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2b07      	cmp	r3, #7
 8000636:	d82b      	bhi.n	8000690 <main+0x120>
 8000638:	a201      	add	r2, pc, #4	@ (adr r2, 8000640 <main+0xd0>)
 800063a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800063e:	bf00      	nop
 8000640:	08000661 	.word	0x08000661
 8000644:	08000667 	.word	0x08000667
 8000648:	0800066d 	.word	0x0800066d
 800064c:	08000673 	.word	0x08000673
 8000650:	08000679 	.word	0x08000679
 8000654:	0800067f 	.word	0x0800067f
 8000658:	08000685 	.word	0x08000685
 800065c:	0800068b 	.word	0x0800068b
			case OFF:
				off_state();
 8000660:	f000 f82e 	bl	80006c0 <off_state>
				break;
 8000664:	e014      	b.n	8000690 <main+0x120>
			case ACC:
				acc_state();
 8000666:	f000 f8a3 	bl	80007b0 <acc_state>
				break;
 800066a:	e011      	b.n	8000690 <main+0x120>
			case IGN:
				ign_state();
 800066c:	f000 f916 	bl	800089c <ign_state>
				break;
 8000670:	e00e      	b.n	8000690 <main+0x120>
			case DCDC:
				dcdc_state();
 8000672:	f000 f9a7 	bl	80009c4 <dcdc_state>
				break;
 8000676:	e00b      	b.n	8000690 <main+0x120>
			case ON:
				on_state();
 8000678:	f000 fa30 	bl	8000adc <on_state>
				break;
 800067c:	e008      	b.n	8000690 <main+0x120>
			case CHARGE:
				charge_state();
 800067e:	f000 fb37 	bl	8000cf0 <charge_state>
				break;
 8000682:	e005      	b.n	8000690 <main+0x120>
			case FAULT:
				fault_state();
 8000684:	f000 fbc0 	bl	8000e08 <fault_state>
				break;
 8000688:	e002      	b.n	8000690 <main+0x120>
			case FAULT_TEMP:
				faultTemp_state();
 800068a:	f000 fa91 	bl	8000bb0 <faultTemp_state>
				break;
 800068e:	bf00      	nop
		}

	if (1)
	{
		debugMonitor();
 8000690:	f000 fc26 	bl	8000ee0 <debugMonitor>
	  i_keyIGN 				= HAL_GPIO_ReadPin(keyIGNPort, keyIGN);
 8000694:	e780      	b.n	8000598 <main+0x28>
 8000696:	bf00      	nop
 8000698:	40021000 	.word	0x40021000
 800069c:	2000028d 	.word	0x2000028d
 80006a0:	2000028e 	.word	0x2000028e
 80006a4:	40020c00 	.word	0x40020c00
 80006a8:	2000028f 	.word	0x2000028f
 80006ac:	20000290 	.word	0x20000290
 80006b0:	20000291 	.word	0x20000291
 80006b4:	20000292 	.word	0x20000292
 80006b8:	20000293 	.word	0x20000293
 80006bc:	2000027c 	.word	0x2000027c

080006c0 <off_state>:
}

//add brake lights

//Initial setting of bits
void off_state(void){		// State 0
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	currentTime = HAL_GetTick();
 80006c4:	f001 fb0e 	bl	8001ce4 <HAL_GetTick>
 80006c8:	4603      	mov	r3, r0
 80006ca:	4a29      	ldr	r2, [pc, #164]	@ (8000770 <off_state+0xb0>)
 80006cc:	6013      	str	r3, [r2, #0]
	lastState = OFF;
 80006ce:	4b29      	ldr	r3, [pc, #164]	@ (8000774 <off_state+0xb4>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(preChargeRelayPort,preChargeRelay,GPIO_PIN_RESET);
 80006d4:	2200      	movs	r2, #0
 80006d6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006da:	4827      	ldr	r0, [pc, #156]	@ (8000778 <off_state+0xb8>)
 80006dc:	f002 fc56 	bl	8002f8c <HAL_GPIO_WritePin>
	o_preChargeRelay = GPIO_PIN_RESET;
 80006e0:	4b26      	ldr	r3, [pc, #152]	@ (800077c <off_state+0xbc>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(hvContactorPort,hvContactor,GPIO_PIN_RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006ec:	4822      	ldr	r0, [pc, #136]	@ (8000778 <off_state+0xb8>)
 80006ee:	f002 fc4d 	bl	8002f8c <HAL_GPIO_WritePin>
	o_hvContactor = GPIO_PIN_RESET;
 80006f2:	4b23      	ldr	r3, [pc, #140]	@ (8000780 <off_state+0xc0>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(auxDCDCDisablePort,auxDCDCDisable,GPIO_PIN_RESET);
 80006f8:	2200      	movs	r2, #0
 80006fa:	2180      	movs	r1, #128	@ 0x80
 80006fc:	481e      	ldr	r0, [pc, #120]	@ (8000778 <off_state+0xb8>)
 80006fe:	f002 fc45 	bl	8002f8c <HAL_GPIO_WritePin>
	o_auxDCDCDisable = GPIO_PIN_RESET;
 8000702:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <off_state+0xc4>)
 8000704:	2200      	movs	r2, #0
 8000706:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(hvDCDCEnablePort,hvDCDCEnable,GPIO_PIN_RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800070e:	481a      	ldr	r0, [pc, #104]	@ (8000778 <off_state+0xb8>)
 8000710:	f002 fc3c 	bl	8002f8c <HAL_GPIO_WritePin>
	o_hvDCDCEnable = GPIO_PIN_RESET;
 8000714:	4b1c      	ldr	r3, [pc, #112]	@ (8000788 <off_state+0xc8>)
 8000716:	2200      	movs	r2, #0
 8000718:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(chargeIndicatorPort,chargeIndicator,RESET);
 800071a:	2200      	movs	r2, #0
 800071c:	2110      	movs	r1, #16
 800071e:	481b      	ldr	r0, [pc, #108]	@ (800078c <off_state+0xcc>)
 8000720:	f002 fc34 	bl	8002f8c <HAL_GPIO_WritePin>
	o_chargeIndicator = GPIO_PIN_RESET;
 8000724:	4b1a      	ldr	r3, [pc, #104]	@ (8000790 <off_state+0xd0>)
 8000726:	2200      	movs	r2, #0
 8000728:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(faultIndicatorPort,faultIndicator,RESET);
 800072a:	2200      	movs	r2, #0
 800072c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000730:	4818      	ldr	r0, [pc, #96]	@ (8000794 <off_state+0xd4>)
 8000732:	f002 fc2b 	bl	8002f8c <HAL_GPIO_WritePin>
	o_faultIndicator = GPIO_PIN_RESET;
 8000736:	4b18      	ldr	r3, [pc, #96]	@ (8000798 <off_state+0xd8>)
 8000738:	2200      	movs	r2, #0
 800073a:	701a      	strb	r2, [r3, #0]

	updateAuxADC();
 800073c:	f000 fcca 	bl	80010d4 <updateAuxADC>
	//Changes States
	if ((i_keyACC != 0 ) && (i_disChargeEnable != 0) && (i_killSwitch != 1) && (ai_auxVoltage > UNDERVOLTAGE)){
 8000740:	4b16      	ldr	r3, [pc, #88]	@ (800079c <off_state+0xdc>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d011      	beq.n	800076c <off_state+0xac>
 8000748:	4b15      	ldr	r3, [pc, #84]	@ (80007a0 <off_state+0xe0>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d00d      	beq.n	800076c <off_state+0xac>
 8000750:	4b14      	ldr	r3, [pc, #80]	@ (80007a4 <off_state+0xe4>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2b01      	cmp	r3, #1
 8000756:	d009      	beq.n	800076c <off_state+0xac>
 8000758:	4b13      	ldr	r3, [pc, #76]	@ (80007a8 <off_state+0xe8>)
 800075a:	881b      	ldrh	r3, [r3, #0]
 800075c:	461a      	mov	r2, r3
 800075e:	f640 438a 	movw	r3, #3210	@ 0xc8a
 8000762:	429a      	cmp	r2, r3
 8000764:	dd02      	ble.n	800076c <off_state+0xac>
		currentState = ACC;
 8000766:	4b11      	ldr	r3, [pc, #68]	@ (80007ac <off_state+0xec>)
 8000768:	2201      	movs	r2, #1
 800076a:	701a      	strb	r2, [r3, #0]
	}
}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000284 	.word	0x20000284
 8000774:	2000027d 	.word	0x2000027d
 8000778:	40021000 	.word	0x40021000
 800077c:	20000299 	.word	0x20000299
 8000780:	20000298 	.word	0x20000298
 8000784:	20000295 	.word	0x20000295
 8000788:	20000294 	.word	0x20000294
 800078c:	40020c00 	.word	0x40020c00
 8000790:	20000296 	.word	0x20000296
 8000794:	40020800 	.word	0x40020800
 8000798:	20000297 	.word	0x20000297
 800079c:	2000028e 	.word	0x2000028e
 80007a0:	20000292 	.word	0x20000292
 80007a4:	2000028f 	.word	0x2000028f
 80007a8:	2000029e 	.word	0x2000029e
 80007ac:	2000027c 	.word	0x2000027c

080007b0 <acc_state>:


void acc_state(void){		// State 1
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
	if( lastState != ACC)
 80007b4:	4b2b      	ldr	r3, [pc, #172]	@ (8000864 <acc_state+0xb4>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d027      	beq.n	800080c <acc_state+0x5c>
	{
		enterStateTime = HAL_GetTick();
 80007bc:	f001 fa92 	bl	8001ce4 <HAL_GetTick>
 80007c0:	4603      	mov	r3, r0
 80007c2:	4a29      	ldr	r2, [pc, #164]	@ (8000868 <acc_state+0xb8>)
 80007c4:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(preChargeRelayPort,preChargeRelay,GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007cc:	4827      	ldr	r0, [pc, #156]	@ (800086c <acc_state+0xbc>)
 80007ce:	f002 fbdd 	bl	8002f8c <HAL_GPIO_WritePin>
		o_preChargeRelay = GPIO_PIN_RESET;
 80007d2:	4b27      	ldr	r3, [pc, #156]	@ (8000870 <acc_state+0xc0>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(hvContactorPort,hvContactor,GPIO_PIN_RESET);
 80007d8:	2200      	movs	r2, #0
 80007da:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007de:	4823      	ldr	r0, [pc, #140]	@ (800086c <acc_state+0xbc>)
 80007e0:	f002 fbd4 	bl	8002f8c <HAL_GPIO_WritePin>
		o_hvContactor = GPIO_PIN_RESET;
 80007e4:	4b23      	ldr	r3, [pc, #140]	@ (8000874 <acc_state+0xc4>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(auxDCDCDisablePort,auxDCDCDisable,GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2180      	movs	r1, #128	@ 0x80
 80007ee:	481f      	ldr	r0, [pc, #124]	@ (800086c <acc_state+0xbc>)
 80007f0:	f002 fbcc 	bl	8002f8c <HAL_GPIO_WritePin>
		o_auxDCDCDisable = GPIO_PIN_RESET;
 80007f4:	4b20      	ldr	r3, [pc, #128]	@ (8000878 <acc_state+0xc8>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(hvDCDCEnablePort,hvDCDCEnable,GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000800:	481a      	ldr	r0, [pc, #104]	@ (800086c <acc_state+0xbc>)
 8000802:	f002 fbc3 	bl	8002f8c <HAL_GPIO_WritePin>
		o_hvDCDCEnable = GPIO_PIN_RESET;
 8000806:	4b1d      	ldr	r3, [pc, #116]	@ (800087c <acc_state+0xcc>)
 8000808:	2200      	movs	r2, #0
 800080a:	701a      	strb	r2, [r3, #0]
	}
	lastState = ACC;
 800080c:	4b15      	ldr	r3, [pc, #84]	@ (8000864 <acc_state+0xb4>)
 800080e:	2201      	movs	r2, #1
 8000810:	701a      	strb	r2, [r3, #0]

	currentTime = HAL_GetTick();
 8000812:	f001 fa67 	bl	8001ce4 <HAL_GetTick>
 8000816:	4603      	mov	r3, r0
 8000818:	4a19      	ldr	r2, [pc, #100]	@ (8000880 <acc_state+0xd0>)
 800081a:	6013      	str	r3, [r2, #0]
	// goes back to off if any one bit is wrong
	if((i_keyACC != 1) || (i_disChargeEnable != 1) || (i_killSwitch != 0))			//(i_chargeEnable != 1) ||
 800081c:	4b19      	ldr	r3, [pc, #100]	@ (8000884 <acc_state+0xd4>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d107      	bne.n	8000834 <acc_state+0x84>
 8000824:	4b18      	ldr	r3, [pc, #96]	@ (8000888 <acc_state+0xd8>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2b01      	cmp	r3, #1
 800082a:	d103      	bne.n	8000834 <acc_state+0x84>
 800082c:	4b17      	ldr	r3, [pc, #92]	@ (800088c <acc_state+0xdc>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d002      	beq.n	800083a <acc_state+0x8a>
		currentState = OFF; 			// No fault occurs
 8000834:	4b16      	ldr	r3, [pc, #88]	@ (8000890 <acc_state+0xe0>)
 8000836:	2200      	movs	r2, #0
 8000838:	701a      	strb	r2, [r3, #0]

	//Changes States
	if ((i_keyIGN != 0) && (i_disChargeEnable != 0) && (i_keyACC != 0) && (i_chargeEnable != 0))
 800083a:	4b16      	ldr	r3, [pc, #88]	@ (8000894 <acc_state+0xe4>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d00e      	beq.n	8000860 <acc_state+0xb0>
 8000842:	4b11      	ldr	r3, [pc, #68]	@ (8000888 <acc_state+0xd8>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d00a      	beq.n	8000860 <acc_state+0xb0>
 800084a:	4b0e      	ldr	r3, [pc, #56]	@ (8000884 <acc_state+0xd4>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d006      	beq.n	8000860 <acc_state+0xb0>
 8000852:	4b11      	ldr	r3, [pc, #68]	@ (8000898 <acc_state+0xe8>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d002      	beq.n	8000860 <acc_state+0xb0>
	{
		currentState = IGN;
 800085a:	4b0d      	ldr	r3, [pc, #52]	@ (8000890 <acc_state+0xe0>)
 800085c:	2202      	movs	r2, #2
 800085e:	701a      	strb	r2, [r3, #0]
	}
}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}
 8000864:	2000027d 	.word	0x2000027d
 8000868:	20000280 	.word	0x20000280
 800086c:	40021000 	.word	0x40021000
 8000870:	20000299 	.word	0x20000299
 8000874:	20000298 	.word	0x20000298
 8000878:	20000295 	.word	0x20000295
 800087c:	20000294 	.word	0x20000294
 8000880:	20000284 	.word	0x20000284
 8000884:	2000028e 	.word	0x2000028e
 8000888:	20000292 	.word	0x20000292
 800088c:	2000028f 	.word	0x2000028f
 8000890:	2000027c 	.word	0x2000027c
 8000894:	2000028d 	.word	0x2000028d
 8000898:	20000291 	.word	0x20000291

0800089c <ign_state>:


void ign_state(void){		// State 2
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0

	if( lastState == ACC )
 80008a0:	4b3a      	ldr	r3, [pc, #232]	@ (800098c <ign_state+0xf0>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d112      	bne.n	80008ce <ign_state+0x32>
	{
		enterStateTime = HAL_GetTick();
 80008a8:	f001 fa1c 	bl	8001ce4 <HAL_GetTick>
 80008ac:	4603      	mov	r3, r0
 80008ae:	4a38      	ldr	r2, [pc, #224]	@ (8000990 <ign_state+0xf4>)
 80008b0:	6013      	str	r3, [r2, #0]

		HAL_GPIO_WritePin(preChargeRelayPort, preChargeRelay, GPIO_PIN_SET);
 80008b2:	2201      	movs	r2, #1
 80008b4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80008b8:	4836      	ldr	r0, [pc, #216]	@ (8000994 <ign_state+0xf8>)
 80008ba:	f002 fb67 	bl	8002f8c <HAL_GPIO_WritePin>
		o_preChargeRelay = GPIO_PIN_SET;
 80008be:	4b36      	ldr	r3, [pc, #216]	@ (8000998 <ign_state+0xfc>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(spareOutput3Port, spareOutput3, GPIO_PIN_SET); //why does this exist? test point?
 80008c4:	2201      	movs	r2, #1
 80008c6:	2140      	movs	r1, #64	@ 0x40
 80008c8:	4834      	ldr	r0, [pc, #208]	@ (800099c <ign_state+0x100>)
 80008ca:	f002 fb5f 	bl	8002f8c <HAL_GPIO_WritePin>
	}
	lastState = IGN;
 80008ce:	4b2f      	ldr	r3, [pc, #188]	@ (800098c <ign_state+0xf0>)
 80008d0:	2202      	movs	r2, #2
 80008d2:	701a      	strb	r2, [r3, #0]
	currentTime = HAL_GetTick();
 80008d4:	f001 fa06 	bl	8001ce4 <HAL_GetTick>
 80008d8:	4603      	mov	r3, r0
 80008da:	4a31      	ldr	r2, [pc, #196]	@ (80009a0 <ign_state+0x104>)
 80008dc:	6013      	str	r3, [r2, #0]

	// Key was not held long enough
	if (i_keyIGN != 1)
 80008de:	4b31      	ldr	r3, [pc, #196]	@ (80009a4 <ign_state+0x108>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d003      	beq.n	80008ee <ign_state+0x52>
	{
		currentState = ACC;
 80008e6:	4b30      	ldr	r3, [pc, #192]	@ (80009a8 <ign_state+0x10c>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(hvContactorPort, hvContactor, GPIO_PIN_SET);
		o_hvContactor = GPIO_PIN_SET;

		currentState = DCDC;
	}
}
 80008ec:	e04b      	b.n	8000986 <ign_state+0xea>
	else if ((i_keyACC != 1) || (i_disChargeEnable != 1) || (i_chargeEnable != 1) || (i_killSwitch != 0))
 80008ee:	4b2f      	ldr	r3, [pc, #188]	@ (80009ac <ign_state+0x110>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d10b      	bne.n	800090e <ign_state+0x72>
 80008f6:	4b2e      	ldr	r3, [pc, #184]	@ (80009b0 <ign_state+0x114>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d107      	bne.n	800090e <ign_state+0x72>
 80008fe:	4b2d      	ldr	r3, [pc, #180]	@ (80009b4 <ign_state+0x118>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2b01      	cmp	r3, #1
 8000904:	d103      	bne.n	800090e <ign_state+0x72>
 8000906:	4b2c      	ldr	r3, [pc, #176]	@ (80009b8 <ign_state+0x11c>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d026      	beq.n	800095c <ign_state+0xc0>
		currentState = FAULT;
 800090e:	4b26      	ldr	r3, [pc, #152]	@ (80009a8 <ign_state+0x10c>)
 8000910:	2206      	movs	r2, #6
 8000912:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000914:	4b25      	ldr	r3, [pc, #148]	@ (80009ac <ign_state+0x110>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b01      	cmp	r3, #1
 800091a:	d003      	beq.n	8000924 <ign_state+0x88>
			faultCode = 21;
 800091c:	4b27      	ldr	r3, [pc, #156]	@ (80009bc <ign_state+0x120>)
 800091e:	2215      	movs	r2, #21
 8000920:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000922:	e030      	b.n	8000986 <ign_state+0xea>
		else if (i_disChargeEnable != 1)
 8000924:	4b22      	ldr	r3, [pc, #136]	@ (80009b0 <ign_state+0x114>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2b01      	cmp	r3, #1
 800092a:	d003      	beq.n	8000934 <ign_state+0x98>
			faultCode = 22;
 800092c:	4b23      	ldr	r3, [pc, #140]	@ (80009bc <ign_state+0x120>)
 800092e:	2216      	movs	r2, #22
 8000930:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000932:	e028      	b.n	8000986 <ign_state+0xea>
		else if (i_chargeEnable != 1)
 8000934:	4b1f      	ldr	r3, [pc, #124]	@ (80009b4 <ign_state+0x118>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b01      	cmp	r3, #1
 800093a:	d003      	beq.n	8000944 <ign_state+0xa8>
			faultCode = 23;
 800093c:	4b1f      	ldr	r3, [pc, #124]	@ (80009bc <ign_state+0x120>)
 800093e:	2217      	movs	r2, #23
 8000940:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000942:	e020      	b.n	8000986 <ign_state+0xea>
		else if (i_killSwitch != 0)
 8000944:	4b1c      	ldr	r3, [pc, #112]	@ (80009b8 <ign_state+0x11c>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d003      	beq.n	8000954 <ign_state+0xb8>
			faultCode = 24;
 800094c:	4b1b      	ldr	r3, [pc, #108]	@ (80009bc <ign_state+0x120>)
 800094e:	2218      	movs	r2, #24
 8000950:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000952:	e018      	b.n	8000986 <ign_state+0xea>
			faultCode = 29;
 8000954:	4b19      	ldr	r3, [pc, #100]	@ (80009bc <ign_state+0x120>)
 8000956:	221d      	movs	r2, #29
 8000958:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 800095a:	e014      	b.n	8000986 <ign_state+0xea>
	else if(currentTime - enterStateTime >= 4000)
 800095c:	4b10      	ldr	r3, [pc, #64]	@ (80009a0 <ign_state+0x104>)
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	4b0b      	ldr	r3, [pc, #44]	@ (8000990 <ign_state+0xf4>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	1ad3      	subs	r3, r2, r3
 8000966:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 800096a:	d30c      	bcc.n	8000986 <ign_state+0xea>
		HAL_GPIO_WritePin(hvContactorPort, hvContactor, GPIO_PIN_SET);
 800096c:	2201      	movs	r2, #1
 800096e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000972:	4808      	ldr	r0, [pc, #32]	@ (8000994 <ign_state+0xf8>)
 8000974:	f002 fb0a 	bl	8002f8c <HAL_GPIO_WritePin>
		o_hvContactor = GPIO_PIN_SET;
 8000978:	4b11      	ldr	r3, [pc, #68]	@ (80009c0 <ign_state+0x124>)
 800097a:	2201      	movs	r2, #1
 800097c:	701a      	strb	r2, [r3, #0]
		currentState = DCDC;
 800097e:	4b0a      	ldr	r3, [pc, #40]	@ (80009a8 <ign_state+0x10c>)
 8000980:	2203      	movs	r2, #3
 8000982:	701a      	strb	r2, [r3, #0]
}
 8000984:	e7ff      	b.n	8000986 <ign_state+0xea>
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	2000027d 	.word	0x2000027d
 8000990:	20000280 	.word	0x20000280
 8000994:	40021000 	.word	0x40021000
 8000998:	20000299 	.word	0x20000299
 800099c:	40020c00 	.word	0x40020c00
 80009a0:	20000284 	.word	0x20000284
 80009a4:	2000028d 	.word	0x2000028d
 80009a8:	2000027c 	.word	0x2000027c
 80009ac:	2000028e 	.word	0x2000028e
 80009b0:	20000292 	.word	0x20000292
 80009b4:	20000291 	.word	0x20000291
 80009b8:	2000028f 	.word	0x2000028f
 80009bc:	2000028c 	.word	0x2000028c
 80009c0:	20000298 	.word	0x20000298

080009c4 <dcdc_state>:


//Short state for the transition between the two DCDC's
void dcdc_state(void){		// State 3
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0


	if ( lastState == IGN )
 80009c8:	4b37      	ldr	r3, [pc, #220]	@ (8000aa8 <dcdc_state+0xe4>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b02      	cmp	r3, #2
 80009ce:	d116      	bne.n	80009fe <dcdc_state+0x3a>
	{
		enterStateTime = HAL_GetTick();
 80009d0:	f001 f988 	bl	8001ce4 <HAL_GetTick>
 80009d4:	4603      	mov	r3, r0
 80009d6:	4a35      	ldr	r2, [pc, #212]	@ (8000aac <dcdc_state+0xe8>)
 80009d8:	6013      	str	r3, [r2, #0]

		HAL_GPIO_WritePin(hvDCDCEnablePort,hvDCDCEnable, GPIO_PIN_SET);
 80009da:	2201      	movs	r2, #1
 80009dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009e0:	4833      	ldr	r0, [pc, #204]	@ (8000ab0 <dcdc_state+0xec>)
 80009e2:	f002 fad3 	bl	8002f8c <HAL_GPIO_WritePin>
		o_hvDCDCEnable = GPIO_PIN_SET;
 80009e6:	4b33      	ldr	r3, [pc, #204]	@ (8000ab4 <dcdc_state+0xf0>)
 80009e8:	2201      	movs	r2, #1
 80009ea:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(preChargeRelayPort,preChargeRelay, GPIO_PIN_RESET);
 80009ec:	2200      	movs	r2, #0
 80009ee:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009f2:	482f      	ldr	r0, [pc, #188]	@ (8000ab0 <dcdc_state+0xec>)
 80009f4:	f002 faca 	bl	8002f8c <HAL_GPIO_WritePin>
		o_preChargeRelay = GPIO_PIN_RESET;
 80009f8:	4b2f      	ldr	r3, [pc, #188]	@ (8000ab8 <dcdc_state+0xf4>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	701a      	strb	r2, [r3, #0]
	}

	lastState = DCDC;
 80009fe:	4b2a      	ldr	r3, [pc, #168]	@ (8000aa8 <dcdc_state+0xe4>)
 8000a00:	2203      	movs	r2, #3
 8000a02:	701a      	strb	r2, [r3, #0]

	currentTime = HAL_GetTick();
 8000a04:	f001 f96e 	bl	8001ce4 <HAL_GetTick>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	4a2c      	ldr	r2, [pc, #176]	@ (8000abc <dcdc_state+0xf8>)
 8000a0c:	6013      	str	r3, [r2, #0]
	// Check if any signal is missing --> FAULT State
	if ((i_keyACC != 1) || (i_disChargeEnable != 1) || (i_chargeEnable != 1) || (i_killSwitch != 0))
 8000a0e:	4b2c      	ldr	r3, [pc, #176]	@ (8000ac0 <dcdc_state+0xfc>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d10b      	bne.n	8000a2e <dcdc_state+0x6a>
 8000a16:	4b2b      	ldr	r3, [pc, #172]	@ (8000ac4 <dcdc_state+0x100>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d107      	bne.n	8000a2e <dcdc_state+0x6a>
 8000a1e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ac8 <dcdc_state+0x104>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d103      	bne.n	8000a2e <dcdc_state+0x6a>
 8000a26:	4b29      	ldr	r3, [pc, #164]	@ (8000acc <dcdc_state+0x108>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d026      	beq.n	8000a7c <dcdc_state+0xb8>
	{
		currentState = FAULT;
 8000a2e:	4b28      	ldr	r3, [pc, #160]	@ (8000ad0 <dcdc_state+0x10c>)
 8000a30:	2206      	movs	r2, #6
 8000a32:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000a34:	4b22      	ldr	r3, [pc, #136]	@ (8000ac0 <dcdc_state+0xfc>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d003      	beq.n	8000a44 <dcdc_state+0x80>
		{
			faultCode = 31;
 8000a3c:	4b25      	ldr	r3, [pc, #148]	@ (8000ad4 <dcdc_state+0x110>)
 8000a3e:	221f      	movs	r2, #31
 8000a40:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000a42:	e02f      	b.n	8000aa4 <dcdc_state+0xe0>
		}
		else if (i_disChargeEnable != 1)
 8000a44:	4b1f      	ldr	r3, [pc, #124]	@ (8000ac4 <dcdc_state+0x100>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d003      	beq.n	8000a54 <dcdc_state+0x90>
		{
			faultCode = 32;
 8000a4c:	4b21      	ldr	r3, [pc, #132]	@ (8000ad4 <dcdc_state+0x110>)
 8000a4e:	2220      	movs	r2, #32
 8000a50:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000a52:	e027      	b.n	8000aa4 <dcdc_state+0xe0>
		}
		else if (i_chargeEnable != 1)
 8000a54:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac8 <dcdc_state+0x104>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d003      	beq.n	8000a64 <dcdc_state+0xa0>
		{
			faultCode = 33;
 8000a5c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad4 <dcdc_state+0x110>)
 8000a5e:	2221      	movs	r2, #33	@ 0x21
 8000a60:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000a62:	e01f      	b.n	8000aa4 <dcdc_state+0xe0>
		}
		else if (i_killSwitch != 0)
 8000a64:	4b19      	ldr	r3, [pc, #100]	@ (8000acc <dcdc_state+0x108>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d003      	beq.n	8000a74 <dcdc_state+0xb0>
		{
			faultCode = 34;
 8000a6c:	4b19      	ldr	r3, [pc, #100]	@ (8000ad4 <dcdc_state+0x110>)
 8000a6e:	2222      	movs	r2, #34	@ 0x22
 8000a70:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000a72:	e017      	b.n	8000aa4 <dcdc_state+0xe0>
		}
		else
		{
			faultCode = 39;
 8000a74:	4b17      	ldr	r3, [pc, #92]	@ (8000ad4 <dcdc_state+0x110>)
 8000a76:	2227      	movs	r2, #39	@ 0x27
 8000a78:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000a7a:	e013      	b.n	8000aa4 <dcdc_state+0xe0>
		}
	}
	// Switch off the AUX-DCDC after 1000 ms(1sec)
	else if (currentTime - enterStateTime >= 1000)
 8000a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000abc <dcdc_state+0xf8>)
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	4b0a      	ldr	r3, [pc, #40]	@ (8000aac <dcdc_state+0xe8>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000a8a:	d30b      	bcc.n	8000aa4 <dcdc_state+0xe0>
	{
		HAL_GPIO_WritePin(auxDCDCDisablePort,auxDCDCDisable, GPIO_PIN_SET);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	2180      	movs	r1, #128	@ 0x80
 8000a90:	4807      	ldr	r0, [pc, #28]	@ (8000ab0 <dcdc_state+0xec>)
 8000a92:	f002 fa7b 	bl	8002f8c <HAL_GPIO_WritePin>
		o_auxDCDCDisable = GPIO_PIN_SET;
 8000a96:	4b10      	ldr	r3, [pc, #64]	@ (8000ad8 <dcdc_state+0x114>)
 8000a98:	2201      	movs	r2, #1
 8000a9a:	701a      	strb	r2, [r3, #0]
		currentState = ON;
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad0 <dcdc_state+0x10c>)
 8000a9e:	2204      	movs	r2, #4
 8000aa0:	701a      	strb	r2, [r3, #0]
	}
}
 8000aa2:	e7ff      	b.n	8000aa4 <dcdc_state+0xe0>
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	2000027d 	.word	0x2000027d
 8000aac:	20000280 	.word	0x20000280
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	20000294 	.word	0x20000294
 8000ab8:	20000299 	.word	0x20000299
 8000abc:	20000284 	.word	0x20000284
 8000ac0:	2000028e 	.word	0x2000028e
 8000ac4:	20000292 	.word	0x20000292
 8000ac8:	20000291 	.word	0x20000291
 8000acc:	2000028f 	.word	0x2000028f
 8000ad0:	2000027c 	.word	0x2000027c
 8000ad4:	2000028c 	.word	0x2000028c
 8000ad8:	20000295 	.word	0x20000295

08000adc <on_state>:


void on_state(void){		// State 4 = DRIVING
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0


	if ( lastState == DCDC )
 8000ae0:	4b29      	ldr	r3, [pc, #164]	@ (8000b88 <on_state+0xac>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b03      	cmp	r3, #3
 8000ae6:	d104      	bne.n	8000af2 <on_state+0x16>
	{
		enterStateTime = HAL_GetTick();
 8000ae8:	f001 f8fc 	bl	8001ce4 <HAL_GetTick>
 8000aec:	4603      	mov	r3, r0
 8000aee:	4a27      	ldr	r2, [pc, #156]	@ (8000b8c <on_state+0xb0>)
 8000af0:	6013      	str	r3, [r2, #0]
	}
	lastState = ON;
 8000af2:	4b25      	ldr	r3, [pc, #148]	@ (8000b88 <on_state+0xac>)
 8000af4:	2204      	movs	r2, #4
 8000af6:	701a      	strb	r2, [r3, #0]

	currentTime = HAL_GetTick();
 8000af8:	f001 f8f4 	bl	8001ce4 <HAL_GetTick>
 8000afc:	4603      	mov	r3, r0
 8000afe:	4a24      	ldr	r2, [pc, #144]	@ (8000b90 <on_state+0xb4>)
 8000b00:	6013      	str	r3, [r2, #0]


	// SETS THE OUTPUTS!!!
	// Throttle pedal output function

	updatePedal();
 8000b02:	f000 fa77 	bl	8000ff4 <updatePedal>

	updateRegen();
 8000b06:	f000 fabd 	bl	8001084 <updateRegen>


	// Go to FAULT_TEMP state because we might want to charge if disChargeEnable goes 0
	if (i_disChargeEnable != 1)
 8000b0a:	4b22      	ldr	r3, [pc, #136]	@ (8000b94 <on_state+0xb8>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d002      	beq.n	8000b18 <on_state+0x3c>
	{
		currentState = FAULT_TEMP;
 8000b12:	4b21      	ldr	r3, [pc, #132]	@ (8000b98 <on_state+0xbc>)
 8000b14:	2207      	movs	r2, #7
 8000b16:	701a      	strb	r2, [r3, #0]
	}

	// Check if any signal is missing --> FAULT State
	if ((i_keyACC != 1) || (i_chargeEnable != 1) || (i_chargeContactor != 0) || (i_killSwitch != 0))
 8000b18:	4b20      	ldr	r3, [pc, #128]	@ (8000b9c <on_state+0xc0>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d10b      	bne.n	8000b38 <on_state+0x5c>
 8000b20:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba0 <on_state+0xc4>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d107      	bne.n	8000b38 <on_state+0x5c>
 8000b28:	4b1e      	ldr	r3, [pc, #120]	@ (8000ba4 <on_state+0xc8>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d103      	bne.n	8000b38 <on_state+0x5c>
 8000b30:	4b1d      	ldr	r3, [pc, #116]	@ (8000ba8 <on_state+0xcc>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d025      	beq.n	8000b84 <on_state+0xa8>
	{
		currentState = FAULT;
 8000b38:	4b17      	ldr	r3, [pc, #92]	@ (8000b98 <on_state+0xbc>)
 8000b3a:	2206      	movs	r2, #6
 8000b3c:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000b3e:	4b17      	ldr	r3, [pc, #92]	@ (8000b9c <on_state+0xc0>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d003      	beq.n	8000b4e <on_state+0x72>
		{
			faultCode = 41;
 8000b46:	4b19      	ldr	r3, [pc, #100]	@ (8000bac <on_state+0xd0>)
 8000b48:	2229      	movs	r2, #41	@ 0x29
 8000b4a:	701a      	strb	r2, [r3, #0]
		else
		{
			faultCode = 49;
		}
	}
}
 8000b4c:	e01a      	b.n	8000b84 <on_state+0xa8>
		else if (i_chargeEnable != 1)
 8000b4e:	4b14      	ldr	r3, [pc, #80]	@ (8000ba0 <on_state+0xc4>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d003      	beq.n	8000b5e <on_state+0x82>
			faultCode = 43;
 8000b56:	4b15      	ldr	r3, [pc, #84]	@ (8000bac <on_state+0xd0>)
 8000b58:	222b      	movs	r2, #43	@ 0x2b
 8000b5a:	701a      	strb	r2, [r3, #0]
}
 8000b5c:	e012      	b.n	8000b84 <on_state+0xa8>
		else if (i_killSwitch != 0)
 8000b5e:	4b12      	ldr	r3, [pc, #72]	@ (8000ba8 <on_state+0xcc>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d003      	beq.n	8000b6e <on_state+0x92>
			faultCode = 44;
 8000b66:	4b11      	ldr	r3, [pc, #68]	@ (8000bac <on_state+0xd0>)
 8000b68:	222c      	movs	r2, #44	@ 0x2c
 8000b6a:	701a      	strb	r2, [r3, #0]
}
 8000b6c:	e00a      	b.n	8000b84 <on_state+0xa8>
		else if (i_chargeContactor != 0)
 8000b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba4 <on_state+0xc8>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d003      	beq.n	8000b7e <on_state+0xa2>
			faultCode = 45;
 8000b76:	4b0d      	ldr	r3, [pc, #52]	@ (8000bac <on_state+0xd0>)
 8000b78:	222d      	movs	r2, #45	@ 0x2d
 8000b7a:	701a      	strb	r2, [r3, #0]
}
 8000b7c:	e002      	b.n	8000b84 <on_state+0xa8>
			faultCode = 49;
 8000b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000bac <on_state+0xd0>)
 8000b80:	2231      	movs	r2, #49	@ 0x31
 8000b82:	701a      	strb	r2, [r3, #0]
}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	2000027d 	.word	0x2000027d
 8000b8c:	20000280 	.word	0x20000280
 8000b90:	20000284 	.word	0x20000284
 8000b94:	20000292 	.word	0x20000292
 8000b98:	2000027c 	.word	0x2000027c
 8000b9c:	2000028e 	.word	0x2000028e
 8000ba0:	20000291 	.word	0x20000291
 8000ba4:	20000290 	.word	0x20000290
 8000ba8:	2000028f 	.word	0x2000028f
 8000bac:	2000028c 	.word	0x2000028c

08000bb0 <faultTemp_state>:

void faultTemp_state(void){			// State 7
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
	if (lastState == ON)
 8000bb4:	4b3f      	ldr	r3, [pc, #252]	@ (8000cb4 <faultTemp_state+0x104>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	2b04      	cmp	r3, #4
 8000bba:	d115      	bne.n	8000be8 <faultTemp_state+0x38>
	{
		// Set fault indicator GPIO pin
		HAL_GPIO_WritePin(faultIndicatorPort, faultIndicator, GPIO_PIN_SET);
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bc2:	483d      	ldr	r0, [pc, #244]	@ (8000cb8 <faultTemp_state+0x108>)
 8000bc4:	f002 f9e2 	bl	8002f8c <HAL_GPIO_WritePin>
		o_faultIndicator = GPIO_PIN_SET;
 8000bc8:	4b3c      	ldr	r3, [pc, #240]	@ (8000cbc <faultTemp_state+0x10c>)
 8000bca:	2201      	movs	r2, #1
 8000bcc:	701a      	strb	r2, [r3, #0]

        //Reset auxDCDCDisable GPIO pin
        HAL_GPIO_WritePin(auxDCDCDisablePort,auxDCDCDisable, GPIO_PIN_RESET);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2180      	movs	r1, #128	@ 0x80
 8000bd2:	483b      	ldr	r0, [pc, #236]	@ (8000cc0 <faultTemp_state+0x110>)
 8000bd4:	f002 f9da 	bl	8002f8c <HAL_GPIO_WritePin>
        o_auxDCDCDisable = GPIO_PIN_RESET;
 8000bd8:	4b3a      	ldr	r3, [pc, #232]	@ (8000cc4 <faultTemp_state+0x114>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	701a      	strb	r2, [r3, #0]

		enterStateTime = HAL_GetTick();
 8000bde:	f001 f881 	bl	8001ce4 <HAL_GetTick>
 8000be2:	4603      	mov	r3, r0
 8000be4:	4a38      	ldr	r2, [pc, #224]	@ (8000cc8 <faultTemp_state+0x118>)
 8000be6:	6013      	str	r3, [r2, #0]
	}
	lastState = FAULT_TEMP;
 8000be8:	4b32      	ldr	r3, [pc, #200]	@ (8000cb4 <faultTemp_state+0x104>)
 8000bea:	2207      	movs	r2, #7
 8000bec:	701a      	strb	r2, [r3, #0]

	currentTime = HAL_GetTick();
 8000bee:	f001 f879 	bl	8001ce4 <HAL_GetTick>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	4a35      	ldr	r2, [pc, #212]	@ (8000ccc <faultTemp_state+0x11c>)
 8000bf6:	6013      	str	r3, [r2, #0]



    if (currentTime - enterStateTime >= 500) {
 8000bf8:	4b34      	ldr	r3, [pc, #208]	@ (8000ccc <faultTemp_state+0x11c>)
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	4b32      	ldr	r3, [pc, #200]	@ (8000cc8 <faultTemp_state+0x118>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000c06:	d311      	bcc.n	8000c2c <faultTemp_state+0x7c>
        // Reset hvDCDCEnable GPIO pin after 500ms
        HAL_GPIO_WritePin(hvDCDCEnablePort, hvDCDCEnable, GPIO_PIN_RESET);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c0e:	482c      	ldr	r0, [pc, #176]	@ (8000cc0 <faultTemp_state+0x110>)
 8000c10:	f002 f9bc 	bl	8002f8c <HAL_GPIO_WritePin>
        o_hvDCDCEnable = GPIO_PIN_RESET;
 8000c14:	4b2e      	ldr	r3, [pc, #184]	@ (8000cd0 <faultTemp_state+0x120>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	701a      	strb	r2, [r3, #0]

        // Open HV Contactor
        HAL_GPIO_WritePin(hvContactorPort, hvContactor, GPIO_PIN_RESET);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c20:	4827      	ldr	r0, [pc, #156]	@ (8000cc0 <faultTemp_state+0x110>)
 8000c22:	f002 f9b3 	bl	8002f8c <HAL_GPIO_WritePin>
        o_hvContactor = GPIO_PIN_RESET;
 8000c26:	4b2b      	ldr	r3, [pc, #172]	@ (8000cd4 <faultTemp_state+0x124>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	701a      	strb	r2, [r3, #0]
    }

    // FAULT INDICATOR
    faultBlinker();
 8000c2c:	f000 fa68 	bl	8001100 <faultBlinker>

    // Switch to charging state because chargeContactor = 1
    if (i_chargeContactor == 1){
 8000c30:	4b29      	ldr	r3, [pc, #164]	@ (8000cd8 <faultTemp_state+0x128>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d103      	bne.n	8000c40 <faultTemp_state+0x90>
    	currentState = CHARGE;
 8000c38:	4b28      	ldr	r3, [pc, #160]	@ (8000cdc <faultTemp_state+0x12c>)
 8000c3a:	2205      	movs	r2, #5
 8000c3c:	701a      	strb	r2, [r3, #0]
	{
		currentState = FAULT;
		faultCode = 72;
	}

}
 8000c3e:	e037      	b.n	8000cb0 <faultTemp_state+0x100>
    else if((i_keyACC != 1) || (i_chargeEnable != 1) || (i_killSwitch != 0))
 8000c40:	4b27      	ldr	r3, [pc, #156]	@ (8000ce0 <faultTemp_state+0x130>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d107      	bne.n	8000c58 <faultTemp_state+0xa8>
 8000c48:	4b26      	ldr	r3, [pc, #152]	@ (8000ce4 <faultTemp_state+0x134>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d103      	bne.n	8000c58 <faultTemp_state+0xa8>
 8000c50:	4b25      	ldr	r3, [pc, #148]	@ (8000ce8 <faultTemp_state+0x138>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d01a      	beq.n	8000c8e <faultTemp_state+0xde>
		currentState = FAULT;
 8000c58:	4b20      	ldr	r3, [pc, #128]	@ (8000cdc <faultTemp_state+0x12c>)
 8000c5a:	2206      	movs	r2, #6
 8000c5c:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000c5e:	4b20      	ldr	r3, [pc, #128]	@ (8000ce0 <faultTemp_state+0x130>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d003      	beq.n	8000c6e <faultTemp_state+0xbe>
			faultCode = 71;
 8000c66:	4b21      	ldr	r3, [pc, #132]	@ (8000cec <faultTemp_state+0x13c>)
 8000c68:	2247      	movs	r2, #71	@ 0x47
 8000c6a:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000c6c:	e01f      	b.n	8000cae <faultTemp_state+0xfe>
		else if (i_chargeEnable != 1)
 8000c6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce4 <faultTemp_state+0x134>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d003      	beq.n	8000c7e <faultTemp_state+0xce>
			faultCode = 73;
 8000c76:	4b1d      	ldr	r3, [pc, #116]	@ (8000cec <faultTemp_state+0x13c>)
 8000c78:	2249      	movs	r2, #73	@ 0x49
 8000c7a:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000c7c:	e017      	b.n	8000cae <faultTemp_state+0xfe>
		else if (i_killSwitch != 0)
 8000c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce8 <faultTemp_state+0x138>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d013      	beq.n	8000cae <faultTemp_state+0xfe>
			faultCode = 75;
 8000c86:	4b19      	ldr	r3, [pc, #100]	@ (8000cec <faultTemp_state+0x13c>)
 8000c88:	224b      	movs	r2, #75	@ 0x4b
 8000c8a:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000c8c:	e00f      	b.n	8000cae <faultTemp_state+0xfe>
    else if (currentTime - enterStateTime >= 30000)
 8000c8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000ccc <faultTemp_state+0x11c>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	4b0d      	ldr	r3, [pc, #52]	@ (8000cc8 <faultTemp_state+0x118>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	1ad3      	subs	r3, r2, r3
 8000c98:	f247 522f 	movw	r2, #29999	@ 0x752f
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d907      	bls.n	8000cb0 <faultTemp_state+0x100>
		currentState = FAULT;
 8000ca0:	4b0e      	ldr	r3, [pc, #56]	@ (8000cdc <faultTemp_state+0x12c>)
 8000ca2:	2206      	movs	r2, #6
 8000ca4:	701a      	strb	r2, [r3, #0]
		faultCode = 72;
 8000ca6:	4b11      	ldr	r3, [pc, #68]	@ (8000cec <faultTemp_state+0x13c>)
 8000ca8:	2248      	movs	r2, #72	@ 0x48
 8000caa:	701a      	strb	r2, [r3, #0]
}
 8000cac:	e000      	b.n	8000cb0 <faultTemp_state+0x100>
		if (i_keyACC != 1)
 8000cae:	bf00      	nop
}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	2000027d 	.word	0x2000027d
 8000cb8:	40020800 	.word	0x40020800
 8000cbc:	20000297 	.word	0x20000297
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	20000295 	.word	0x20000295
 8000cc8:	20000280 	.word	0x20000280
 8000ccc:	20000284 	.word	0x20000284
 8000cd0:	20000294 	.word	0x20000294
 8000cd4:	20000298 	.word	0x20000298
 8000cd8:	20000290 	.word	0x20000290
 8000cdc:	2000027c 	.word	0x2000027c
 8000ce0:	2000028e 	.word	0x2000028e
 8000ce4:	20000291 	.word	0x20000291
 8000ce8:	2000028f 	.word	0x2000028f
 8000cec:	2000028c 	.word	0x2000028c

08000cf0 <charge_state>:

void charge_state(void){	// State 5
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0

	// Start charging routine by enabling AUX DCDC
	if (lastState == FAULT_TEMP)
 8000cf4:	4b34      	ldr	r3, [pc, #208]	@ (8000dc8 <charge_state+0xd8>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2b07      	cmp	r3, #7
 8000cfa:	d11d      	bne.n	8000d38 <charge_state+0x48>
	{
        // Set auxDCDCDisable GPIO pin -> AUX-DCDC off
        HAL_GPIO_WritePin(auxDCDCDisablePort,auxDCDCDisable, GPIO_PIN_SET);
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	2180      	movs	r1, #128	@ 0x80
 8000d00:	4832      	ldr	r0, [pc, #200]	@ (8000dcc <charge_state+0xdc>)
 8000d02:	f002 f943 	bl	8002f8c <HAL_GPIO_WritePin>
        o_auxDCDCDisable = GPIO_PIN_SET;
 8000d06:	4b32      	ldr	r3, [pc, #200]	@ (8000dd0 <charge_state+0xe0>)
 8000d08:	2201      	movs	r2, #1
 8000d0a:	701a      	strb	r2, [r3, #0]

		// Reset fault indicator GPIO pin
		HAL_GPIO_WritePin(faultIndicatorPort, faultIndicator, GPIO_PIN_RESET);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d12:	4830      	ldr	r0, [pc, #192]	@ (8000dd4 <charge_state+0xe4>)
 8000d14:	f002 f93a 	bl	8002f8c <HAL_GPIO_WritePin>
		o_faultIndicator = GPIO_PIN_RESET;
 8000d18:	4b2f      	ldr	r3, [pc, #188]	@ (8000dd8 <charge_state+0xe8>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	701a      	strb	r2, [r3, #0]

        // Set charge indicator GPIO pin
        HAL_GPIO_WritePin(chargeIndicatorPort, chargeIndicator, GPIO_PIN_SET);
 8000d1e:	2201      	movs	r2, #1
 8000d20:	2110      	movs	r1, #16
 8000d22:	482e      	ldr	r0, [pc, #184]	@ (8000ddc <charge_state+0xec>)
 8000d24:	f002 f932 	bl	8002f8c <HAL_GPIO_WritePin>
        o_chargeIndicator = GPIO_PIN_SET;
 8000d28:	4b2d      	ldr	r3, [pc, #180]	@ (8000de0 <charge_state+0xf0>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	701a      	strb	r2, [r3, #0]

		enterStateTime = HAL_GetTick();
 8000d2e:	f000 ffd9 	bl	8001ce4 <HAL_GetTick>
 8000d32:	4603      	mov	r3, r0
 8000d34:	4a2b      	ldr	r2, [pc, #172]	@ (8000de4 <charge_state+0xf4>)
 8000d36:	6013      	str	r3, [r2, #0]
	}
	lastState = CHARGE;
 8000d38:	4b23      	ldr	r3, [pc, #140]	@ (8000dc8 <charge_state+0xd8>)
 8000d3a:	2205      	movs	r2, #5
 8000d3c:	701a      	strb	r2, [r3, #0]

	currentTime = HAL_GetTick();
 8000d3e:	f000 ffd1 	bl	8001ce4 <HAL_GetTick>
 8000d42:	4603      	mov	r3, r0
 8000d44:	4a28      	ldr	r2, [pc, #160]	@ (8000de8 <charge_state+0xf8>)
 8000d46:	6013      	str	r3, [r2, #0]

	if((i_keyACC != 1) || (i_chargeEnable != 1) || (i_disChargeEnable != 0)  || (i_killSwitch != 0))
 8000d48:	4b28      	ldr	r3, [pc, #160]	@ (8000dec <charge_state+0xfc>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d10b      	bne.n	8000d68 <charge_state+0x78>
 8000d50:	4b27      	ldr	r3, [pc, #156]	@ (8000df0 <charge_state+0x100>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d107      	bne.n	8000d68 <charge_state+0x78>
 8000d58:	4b26      	ldr	r3, [pc, #152]	@ (8000df4 <charge_state+0x104>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d103      	bne.n	8000d68 <charge_state+0x78>
 8000d60:	4b25      	ldr	r3, [pc, #148]	@ (8000df8 <charge_state+0x108>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d02d      	beq.n	8000dc4 <charge_state+0xd4>
	{
		currentState = FAULT;
 8000d68:	4b24      	ldr	r3, [pc, #144]	@ (8000dfc <charge_state+0x10c>)
 8000d6a:	2206      	movs	r2, #6
 8000d6c:	701a      	strb	r2, [r3, #0]
		if (i_keyACC != 1)
 8000d6e:	4b1f      	ldr	r3, [pc, #124]	@ (8000dec <charge_state+0xfc>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d003      	beq.n	8000d7e <charge_state+0x8e>
		{
			faultCode = 51;
 8000d76:	4b22      	ldr	r3, [pc, #136]	@ (8000e00 <charge_state+0x110>)
 8000d78:	2233      	movs	r2, #51	@ 0x33
 8000d7a:	701a      	strb	r2, [r3, #0]
		{
			faultCode = 59;
		}
	}

}
 8000d7c:	e022      	b.n	8000dc4 <charge_state+0xd4>
		else if (i_disChargeEnable != 0)
 8000d7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000df4 <charge_state+0x104>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d003      	beq.n	8000d8e <charge_state+0x9e>
			faultCode = 52;
 8000d86:	4b1e      	ldr	r3, [pc, #120]	@ (8000e00 <charge_state+0x110>)
 8000d88:	2234      	movs	r2, #52	@ 0x34
 8000d8a:	701a      	strb	r2, [r3, #0]
}
 8000d8c:	e01a      	b.n	8000dc4 <charge_state+0xd4>
		else if (i_chargeEnable != 1)
 8000d8e:	4b18      	ldr	r3, [pc, #96]	@ (8000df0 <charge_state+0x100>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d003      	beq.n	8000d9e <charge_state+0xae>
			faultCode = 53;
 8000d96:	4b1a      	ldr	r3, [pc, #104]	@ (8000e00 <charge_state+0x110>)
 8000d98:	2235      	movs	r2, #53	@ 0x35
 8000d9a:	701a      	strb	r2, [r3, #0]
}
 8000d9c:	e012      	b.n	8000dc4 <charge_state+0xd4>
		else if (i_chargeContactor != 1)
 8000d9e:	4b19      	ldr	r3, [pc, #100]	@ (8000e04 <charge_state+0x114>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d003      	beq.n	8000dae <charge_state+0xbe>
			faultCode = 54;
 8000da6:	4b16      	ldr	r3, [pc, #88]	@ (8000e00 <charge_state+0x110>)
 8000da8:	2236      	movs	r2, #54	@ 0x36
 8000daa:	701a      	strb	r2, [r3, #0]
}
 8000dac:	e00a      	b.n	8000dc4 <charge_state+0xd4>
		else if (i_killSwitch != 0)
 8000dae:	4b12      	ldr	r3, [pc, #72]	@ (8000df8 <charge_state+0x108>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d003      	beq.n	8000dbe <charge_state+0xce>
			faultCode = 55;
 8000db6:	4b12      	ldr	r3, [pc, #72]	@ (8000e00 <charge_state+0x110>)
 8000db8:	2237      	movs	r2, #55	@ 0x37
 8000dba:	701a      	strb	r2, [r3, #0]
}
 8000dbc:	e002      	b.n	8000dc4 <charge_state+0xd4>
			faultCode = 59;
 8000dbe:	4b10      	ldr	r3, [pc, #64]	@ (8000e00 <charge_state+0x110>)
 8000dc0:	223b      	movs	r2, #59	@ 0x3b
 8000dc2:	701a      	strb	r2, [r3, #0]
}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	2000027d 	.word	0x2000027d
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	20000295 	.word	0x20000295
 8000dd4:	40020800 	.word	0x40020800
 8000dd8:	20000297 	.word	0x20000297
 8000ddc:	40020c00 	.word	0x40020c00
 8000de0:	20000296 	.word	0x20000296
 8000de4:	20000280 	.word	0x20000280
 8000de8:	20000284 	.word	0x20000284
 8000dec:	2000028e 	.word	0x2000028e
 8000df0:	20000291 	.word	0x20000291
 8000df4:	20000292 	.word	0x20000292
 8000df8:	2000028f 	.word	0x2000028f
 8000dfc:	2000027c 	.word	0x2000027c
 8000e00:	2000028c 	.word	0x2000028c
 8000e04:	20000290 	.word	0x20000290

08000e08 <fault_state>:


void fault_state(void) { // State 6
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0

    if (lastState != FAULT) {
 8000e0c:	4b28      	ldr	r3, [pc, #160]	@ (8000eb0 <fault_state+0xa8>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b06      	cmp	r3, #6
 8000e12:	d029      	beq.n	8000e68 <fault_state+0x60>
        // Set fault indicator GPIO pin
        HAL_GPIO_WritePin(faultIndicatorPort, faultIndicator, GPIO_PIN_SET);
 8000e14:	2201      	movs	r2, #1
 8000e16:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e1a:	4826      	ldr	r0, [pc, #152]	@ (8000eb4 <fault_state+0xac>)
 8000e1c:	f002 f8b6 	bl	8002f8c <HAL_GPIO_WritePin>
        o_faultIndicator = GPIO_PIN_SET;
 8000e20:	4b25      	ldr	r3, [pc, #148]	@ (8000eb8 <fault_state+0xb0>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	701a      	strb	r2, [r3, #0]

        // Reset charge indicator GPIO pin
        HAL_GPIO_WritePin(chargeIndicatorPort, chargeIndicator, GPIO_PIN_RESET);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2110      	movs	r1, #16
 8000e2a:	4824      	ldr	r0, [pc, #144]	@ (8000ebc <fault_state+0xb4>)
 8000e2c:	f002 f8ae 	bl	8002f8c <HAL_GPIO_WritePin>
        o_chargeIndicator = GPIO_PIN_RESET;
 8000e30:	4b23      	ldr	r3, [pc, #140]	@ (8000ec0 <fault_state+0xb8>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	701a      	strb	r2, [r3, #0]

        // Reset pre-charge relay GPIO pin
        HAL_GPIO_WritePin(preChargeRelayPort, preChargeRelay, GPIO_PIN_RESET);
 8000e36:	2200      	movs	r2, #0
 8000e38:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e3c:	4821      	ldr	r0, [pc, #132]	@ (8000ec4 <fault_state+0xbc>)
 8000e3e:	f002 f8a5 	bl	8002f8c <HAL_GPIO_WritePin>
        o_preChargeRelay = GPIO_PIN_RESET;
 8000e42:	4b21      	ldr	r3, [pc, #132]	@ (8000ec8 <fault_state+0xc0>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	701a      	strb	r2, [r3, #0]

        //Reset auxDCDCDisable GPIO pin -> Aux-DCDC turns on
        HAL_GPIO_WritePin(auxDCDCDisablePort,auxDCDCDisable, GPIO_PIN_RESET);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2180      	movs	r1, #128	@ 0x80
 8000e4c:	481d      	ldr	r0, [pc, #116]	@ (8000ec4 <fault_state+0xbc>)
 8000e4e:	f002 f89d 	bl	8002f8c <HAL_GPIO_WritePin>
        o_auxDCDCDisable = GPIO_PIN_RESET;
 8000e52:	4b1e      	ldr	r3, [pc, #120]	@ (8000ecc <fault_state+0xc4>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	701a      	strb	r2, [r3, #0]

        // Update last state to FAULT
        lastState = FAULT;
 8000e58:	4b15      	ldr	r3, [pc, #84]	@ (8000eb0 <fault_state+0xa8>)
 8000e5a:	2206      	movs	r2, #6
 8000e5c:	701a      	strb	r2, [r3, #0]

        // Record the time when entering the FAULT state
        enterStateTime = HAL_GetTick();
 8000e5e:	f000 ff41 	bl	8001ce4 <HAL_GetTick>
 8000e62:	4603      	mov	r3, r0
 8000e64:	4a1a      	ldr	r2, [pc, #104]	@ (8000ed0 <fault_state+0xc8>)
 8000e66:	6013      	str	r3, [r2, #0]

    }

    currentTime = HAL_GetTick();
 8000e68:	f000 ff3c 	bl	8001ce4 <HAL_GetTick>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	4a19      	ldr	r2, [pc, #100]	@ (8000ed4 <fault_state+0xcc>)
 8000e70:	6013      	str	r3, [r2, #0]

    if (currentTime - enterStateTime >= 500) {
 8000e72:	4b18      	ldr	r3, [pc, #96]	@ (8000ed4 <fault_state+0xcc>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	4b16      	ldr	r3, [pc, #88]	@ (8000ed0 <fault_state+0xc8>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	1ad3      	subs	r3, r2, r3
 8000e7c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000e80:	d311      	bcc.n	8000ea6 <fault_state+0x9e>
        // Reset hvDCDCEnable GPIO pin after 500ms
        HAL_GPIO_WritePin(hvDCDCEnablePort, hvDCDCEnable, GPIO_PIN_RESET);
 8000e82:	2200      	movs	r2, #0
 8000e84:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e88:	480e      	ldr	r0, [pc, #56]	@ (8000ec4 <fault_state+0xbc>)
 8000e8a:	f002 f87f 	bl	8002f8c <HAL_GPIO_WritePin>
        o_hvDCDCEnable = GPIO_PIN_RESET;
 8000e8e:	4b12      	ldr	r3, [pc, #72]	@ (8000ed8 <fault_state+0xd0>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	701a      	strb	r2, [r3, #0]

        // Open HV Contactor
        HAL_GPIO_WritePin(hvContactorPort, hvContactor, GPIO_PIN_RESET);
 8000e94:	2200      	movs	r2, #0
 8000e96:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e9a:	480a      	ldr	r0, [pc, #40]	@ (8000ec4 <fault_state+0xbc>)
 8000e9c:	f002 f876 	bl	8002f8c <HAL_GPIO_WritePin>
        o_hvContactor = GPIO_PIN_RESET;
 8000ea0:	4b0e      	ldr	r3, [pc, #56]	@ (8000edc <fault_state+0xd4>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	701a      	strb	r2, [r3, #0]
    }

    faultBlinker();
 8000ea6:	f000 f92b 	bl	8001100 <faultBlinker>
    // FAULT INDICATOR
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	2000027d 	.word	0x2000027d
 8000eb4:	40020800 	.word	0x40020800
 8000eb8:	20000297 	.word	0x20000297
 8000ebc:	40020c00 	.word	0x40020c00
 8000ec0:	20000296 	.word	0x20000296
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	20000299 	.word	0x20000299
 8000ecc:	20000295 	.word	0x20000295
 8000ed0:	20000280 	.word	0x20000280
 8000ed4:	20000284 	.word	0x20000284
 8000ed8:	20000294 	.word	0x20000294
 8000edc:	20000298 	.word	0x20000298

08000ee0 <debugMonitor>:

void debugMonitor(void)
{
 8000ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ee2:	f5ad 7d01 	sub.w	sp, sp, #516	@ 0x204
 8000ee6:	af0c      	add	r7, sp, #48	@ 0x30
	char  analogBuffer[200], outBuffer[240];
	//stateBuffer[240] inBuffer[300], outBuffer[240], outBufferOld[240,;
	//old unused  String arrays ^^^

	sprintf(analogBuffer, "\rPedalADC : %d PedalDAC: %d RegenADC: %d RegenDAC: %d\n",
 8000ee8:	4b30      	ldr	r3, [pc, #192]	@ (8000fac <debugMonitor+0xcc>)
 8000eea:	881b      	ldrh	r3, [r3, #0]
 8000eec:	4619      	mov	r1, r3
 8000eee:	4b30      	ldr	r3, [pc, #192]	@ (8000fb0 <debugMonitor+0xd0>)
 8000ef0:	881b      	ldrh	r3, [r3, #0]
 8000ef2:	461c      	mov	r4, r3
 8000ef4:	4b2f      	ldr	r3, [pc, #188]	@ (8000fb4 <debugMonitor+0xd4>)
 8000ef6:	881b      	ldrh	r3, [r3, #0]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4b2f      	ldr	r3, [pc, #188]	@ (8000fb8 <debugMonitor+0xd8>)
 8000efc:	881b      	ldrh	r3, [r3, #0]
 8000efe:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8000f02:	9301      	str	r3, [sp, #4]
 8000f04:	9200      	str	r2, [sp, #0]
 8000f06:	4623      	mov	r3, r4
 8000f08:	460a      	mov	r2, r1
 8000f0a:	492c      	ldr	r1, [pc, #176]	@ (8000fbc <debugMonitor+0xdc>)
 8000f0c:	f007 ff5c 	bl	8008dc8 <siprintf>
			i_pedalADC, o_pedalDAC, i_regenADC, o_regenDAC);

	sprintf(outBuffer, "\rS: %d hvDCe=%d AuxDCd=%d FltIn=%d PChg=%d KeyI=%d KeyA=%d DisCe=%d KSw=%d CHGe=%d CHGc=%d ADC=%d Code=%d\n",
 8000f10:	4b2b      	ldr	r3, [pc, #172]	@ (8000fc0 <debugMonitor+0xe0>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	469c      	mov	ip, r3
 8000f16:	4b2b      	ldr	r3, [pc, #172]	@ (8000fc4 <debugMonitor+0xe4>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	469e      	mov	lr, r3
 8000f1c:	4b2a      	ldr	r3, [pc, #168]	@ (8000fc8 <debugMonitor+0xe8>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	461a      	mov	r2, r3
 8000f22:	4b2a      	ldr	r3, [pc, #168]	@ (8000fcc <debugMonitor+0xec>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	4619      	mov	r1, r3
 8000f28:	4b29      	ldr	r3, [pc, #164]	@ (8000fd0 <debugMonitor+0xf0>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	461c      	mov	r4, r3
 8000f2e:	4b29      	ldr	r3, [pc, #164]	@ (8000fd4 <debugMonitor+0xf4>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	461d      	mov	r5, r3
 8000f34:	4b28      	ldr	r3, [pc, #160]	@ (8000fd8 <debugMonitor+0xf8>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	461e      	mov	r6, r3
 8000f3a:	4b28      	ldr	r3, [pc, #160]	@ (8000fdc <debugMonitor+0xfc>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	617b      	str	r3, [r7, #20]
 8000f40:	4b27      	ldr	r3, [pc, #156]	@ (8000fe0 <debugMonitor+0x100>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	613b      	str	r3, [r7, #16]
 8000f46:	4b27      	ldr	r3, [pc, #156]	@ (8000fe4 <debugMonitor+0x104>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	4b26      	ldr	r3, [pc, #152]	@ (8000fe8 <debugMonitor+0x108>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	60bb      	str	r3, [r7, #8]
 8000f52:	4b16      	ldr	r3, [pc, #88]	@ (8000fac <debugMonitor+0xcc>)
 8000f54:	881b      	ldrh	r3, [r3, #0]
 8000f56:	607b      	str	r3, [r7, #4]
 8000f58:	4b24      	ldr	r3, [pc, #144]	@ (8000fec <debugMonitor+0x10c>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	f107 0018 	add.w	r0, r7, #24
 8000f60:	930a      	str	r3, [sp, #40]	@ 0x28
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	9309      	str	r3, [sp, #36]	@ 0x24
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	9308      	str	r3, [sp, #32]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	9307      	str	r3, [sp, #28]
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	9306      	str	r3, [sp, #24]
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	9305      	str	r3, [sp, #20]
 8000f76:	9604      	str	r6, [sp, #16]
 8000f78:	9503      	str	r5, [sp, #12]
 8000f7a:	9402      	str	r4, [sp, #8]
 8000f7c:	9101      	str	r1, [sp, #4]
 8000f7e:	9200      	str	r2, [sp, #0]
 8000f80:	4673      	mov	r3, lr
 8000f82:	4662      	mov	r2, ip
 8000f84:	491a      	ldr	r1, [pc, #104]	@ (8000ff0 <debugMonitor+0x110>)
 8000f86:	f007 ff1f 	bl	8008dc8 <siprintf>
//						currentState, i_chargeContactor,i_chargeEnable, o_hvDCDCEnable, o_auxDCDCDisable,o_chargeIndicator, o_faultIndicator, o_hvContactor, faultCode);

//	sprintf(outBuffer,"\rS: %d Discharge=%d KillSwitch= %d\n",
//			currentState, i_disChargeEnable, i_killSwitch);

	CDC_Transmit_FS((uint8_t*)outBuffer, strlen((char*)outBuffer));
 8000f8a:	f107 0318 	add.w	r3, r7, #24
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff f91e 	bl	80001d0 <strlen>
 8000f94:	4602      	mov	r2, r0
 8000f96:	f107 0318 	add.w	r3, r7, #24
 8000f9a:	4611      	mov	r1, r2
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f007 faa9 	bl	80084f4 <CDC_Transmit_FS>


}
 8000fa2:	bf00      	nop
 8000fa4:	f507 77ea 	add.w	r7, r7, #468	@ 0x1d4
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fac:	2000029c 	.word	0x2000029c
 8000fb0:	2000029a 	.word	0x2000029a
 8000fb4:	200002a2 	.word	0x200002a2
 8000fb8:	200002a0 	.word	0x200002a0
 8000fbc:	08009720 	.word	0x08009720
 8000fc0:	2000027c 	.word	0x2000027c
 8000fc4:	20000294 	.word	0x20000294
 8000fc8:	20000295 	.word	0x20000295
 8000fcc:	20000297 	.word	0x20000297
 8000fd0:	20000299 	.word	0x20000299
 8000fd4:	2000028d 	.word	0x2000028d
 8000fd8:	2000028e 	.word	0x2000028e
 8000fdc:	20000292 	.word	0x20000292
 8000fe0:	2000028f 	.word	0x2000028f
 8000fe4:	20000291 	.word	0x20000291
 8000fe8:	20000290 	.word	0x20000290
 8000fec:	2000028c 	.word	0x2000028c
 8000ff0:	08009758 	.word	0x08009758

08000ff4 <updatePedal>:

void updatePedal(void){
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0

    HAL_ADC_Start(&hadc1);
 8000ff8:	481e      	ldr	r0, [pc, #120]	@ (8001074 <updatePedal+0x80>)
 8000ffa:	f000 fee7 	bl	8001dcc <HAL_ADC_Start>
    HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000ffe:	2100      	movs	r1, #0
 8001000:	481d      	ldr	r0, [pc, #116]	@ (8001078 <updatePedal+0x84>)
 8001002:	f001 fd34 	bl	8002a6e <HAL_DAC_Start>

    // Get input from PA0
    	i_pedalADC = HAL_ADC_GetValue(&hadc1);
 8001006:	481b      	ldr	r0, [pc, #108]	@ (8001074 <updatePedal+0x80>)
 8001008:	f000 ffb2 	bl	8001f70 <HAL_ADC_GetValue>
 800100c:	4603      	mov	r3, r0
 800100e:	b29a      	uxth	r2, r3
 8001010:	4b1a      	ldr	r3, [pc, #104]	@ (800107c <updatePedal+0x88>)
 8001012:	801a      	strh	r2, [r3, #0]
    	//o_DAC = ( (i_ADC - min_ADC) * (max_DAC - min_DAC) )/(max_ADC - min_ADC)+ min_DAC
    	//o_DAC = max_DAC - o_DAC;

    	// map value_adc to the range 740-4095 to value dac range to 4095
    	// vaule_dac starts high then goes low(4095-->0)
        o_pedalDAC = ((i_pedalADC - MIN_ADC) * (MAX_DAC- MIN_DAC)) / (MAX_ADC - MIN_ADC) + MIN_DAC;
 8001014:	4b19      	ldr	r3, [pc, #100]	@ (800107c <updatePedal+0x88>)
 8001016:	881b      	ldrh	r3, [r3, #0]
 8001018:	461a      	mov	r2, r3
 800101a:	f240 2376 	movw	r3, #630	@ 0x276
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	f640 71ff 	movw	r1, #4095	@ 0xfff
 8001024:	2200      	movs	r2, #0
 8001026:	1a8a      	subs	r2, r1, r2
 8001028:	fb03 f202 	mul.w	r2, r3, r2
 800102c:	f640 713c 	movw	r1, #3900	@ 0xf3c
 8001030:	f240 2376 	movw	r3, #630	@ 0x276
 8001034:	1acb      	subs	r3, r1, r3
 8001036:	fb92 f3f3 	sdiv	r3, r2, r3
 800103a:	b29a      	uxth	r2, r3
 800103c:	2300      	movs	r3, #0
 800103e:	b29b      	uxth	r3, r3
 8001040:	4413      	add	r3, r2
 8001042:	b29a      	uxth	r2, r3
 8001044:	4b0e      	ldr	r3, [pc, #56]	@ (8001080 <updatePedal+0x8c>)
 8001046:	801a      	strh	r2, [r3, #0]
        //invert value
        o_pedalDAC = MAX_DAC - o_pedalDAC;
 8001048:	f640 73ff 	movw	r3, #4095	@ 0xfff
 800104c:	b29a      	uxth	r2, r3
 800104e:	4b0c      	ldr	r3, [pc, #48]	@ (8001080 <updatePedal+0x8c>)
 8001050:	881b      	ldrh	r3, [r3, #0]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	b29a      	uxth	r2, r3
 8001056:	4b0a      	ldr	r3, [pc, #40]	@ (8001080 <updatePedal+0x8c>)
 8001058:	801a      	strh	r2, [r3, #0]

        // Outputting DAC value to PA4
        HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, o_pedalDAC);
 800105a:	4b09      	ldr	r3, [pc, #36]	@ (8001080 <updatePedal+0x8c>)
 800105c:	881b      	ldrh	r3, [r3, #0]
 800105e:	2200      	movs	r2, #0
 8001060:	2100      	movs	r1, #0
 8001062:	4805      	ldr	r0, [pc, #20]	@ (8001078 <updatePedal+0x84>)
 8001064:	f001 fd5a 	bl	8002b1c <HAL_DAC_SetValue>
        HAL_Delay(1);
 8001068:	2001      	movs	r0, #1
 800106a:	f000 fe47 	bl	8001cfc <HAL_Delay>
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000168 	.word	0x20000168
 8001078:	20000268 	.word	0x20000268
 800107c:	2000029c 	.word	0x2000029c
 8001080:	2000029a 	.word	0x2000029a

08001084 <updateRegen>:

void updateRegen(void) {
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0

            HAL_ADC_Start(&hadc2);
 8001088:	480e      	ldr	r0, [pc, #56]	@ (80010c4 <updateRegen+0x40>)
 800108a:	f000 fe9f 	bl	8001dcc <HAL_ADC_Start>
            HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 800108e:	2110      	movs	r1, #16
 8001090:	480d      	ldr	r0, [pc, #52]	@ (80010c8 <updateRegen+0x44>)
 8001092:	f001 fcec 	bl	8002a6e <HAL_DAC_Start>

            	i_regenADC = HAL_ADC_GetValue(&hadc2);
 8001096:	480b      	ldr	r0, [pc, #44]	@ (80010c4 <updateRegen+0x40>)
 8001098:	f000 ff6a 	bl	8001f70 <HAL_ADC_GetValue>
 800109c:	4603      	mov	r3, r0
 800109e:	b29a      	uxth	r2, r3
 80010a0:	4b0a      	ldr	r3, [pc, #40]	@ (80010cc <updateRegen+0x48>)
 80010a2:	801a      	strh	r2, [r3, #0]

                // Map value_adc to the range 740-4095 to value_dac range 0-4095
                o_regenDAC = i_regenADC;
 80010a4:	4b09      	ldr	r3, [pc, #36]	@ (80010cc <updateRegen+0x48>)
 80010a6:	881a      	ldrh	r2, [r3, #0]
 80010a8:	4b09      	ldr	r3, [pc, #36]	@ (80010d0 <updateRegen+0x4c>)
 80010aa:	801a      	strh	r2, [r3, #0]
                //throttle_pos = (uint32_t)((value_dac / 4096) * 100); // Truncate to integer
                // Output DAC value to PA
                HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, o_regenDAC);
 80010ac:	4b08      	ldr	r3, [pc, #32]	@ (80010d0 <updateRegen+0x4c>)
 80010ae:	881b      	ldrh	r3, [r3, #0]
 80010b0:	2200      	movs	r2, #0
 80010b2:	2110      	movs	r1, #16
 80010b4:	4804      	ldr	r0, [pc, #16]	@ (80010c8 <updateRegen+0x44>)
 80010b6:	f001 fd31 	bl	8002b1c <HAL_DAC_SetValue>
                HAL_Delay(1);
 80010ba:	2001      	movs	r0, #1
 80010bc:	f000 fe1e 	bl	8001cfc <HAL_Delay>
}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	200001b0 	.word	0x200001b0
 80010c8:	20000268 	.word	0x20000268
 80010cc:	200002a2 	.word	0x200002a2
 80010d0:	200002a0 	.word	0x200002a0

080010d4 <updateAuxADC>:

void updateAuxADC(void){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc3);
 80010d8:	4807      	ldr	r0, [pc, #28]	@ (80010f8 <updateAuxADC+0x24>)
 80010da:	f000 fe77 	bl	8001dcc <HAL_ADC_Start>
	ai_auxVoltage = HAL_ADC_GetValue(&hadc3);			// Measure aux voltage and compare to threshold value
 80010de:	4806      	ldr	r0, [pc, #24]	@ (80010f8 <updateAuxADC+0x24>)
 80010e0:	f000 ff46 	bl	8001f70 <HAL_ADC_GetValue>
 80010e4:	4603      	mov	r3, r0
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	4b04      	ldr	r3, [pc, #16]	@ (80010fc <updateAuxADC+0x28>)
 80010ea:	801a      	strh	r2, [r3, #0]
	HAL_Delay(1);
 80010ec:	2001      	movs	r0, #1
 80010ee:	f000 fe05 	bl	8001cfc <HAL_Delay>
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	200001f8 	.word	0x200001f8
 80010fc:	2000029e 	.word	0x2000029e

08001100 <faultBlinker>:

void faultBlinker(void) {
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
    // Blinks the Fault Indicator at 1.5 Hz (1.5p second on/off)
    if (currentTime - extraTime >= 750) {
 8001104:	4b12      	ldr	r3, [pc, #72]	@ (8001150 <faultBlinker+0x50>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4b12      	ldr	r3, [pc, #72]	@ (8001154 <faultBlinker+0x54>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	f240 22ed 	movw	r2, #749	@ 0x2ed
 8001112:	4293      	cmp	r3, r2
 8001114:	d91a      	bls.n	800114c <faultBlinker+0x4c>

        // Toggle fault indicator GPIO pin
        if (o_faultIndicator == GPIO_PIN_RESET) { // Checks to see if Fault Light is OFF
 8001116:	4b10      	ldr	r3, [pc, #64]	@ (8001158 <faultBlinker+0x58>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d109      	bne.n	8001132 <faultBlinker+0x32>

            // Turns on the Fault Light
            HAL_GPIO_WritePin(faultIndicatorPort, faultIndicator, GPIO_PIN_SET);
 800111e:	2201      	movs	r2, #1
 8001120:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001124:	480d      	ldr	r0, [pc, #52]	@ (800115c <faultBlinker+0x5c>)
 8001126:	f001 ff31 	bl	8002f8c <HAL_GPIO_WritePin>
            o_faultIndicator = GPIO_PIN_SET;
 800112a:	4b0b      	ldr	r3, [pc, #44]	@ (8001158 <faultBlinker+0x58>)
 800112c:	2201      	movs	r2, #1
 800112e:	701a      	strb	r2, [r3, #0]
 8001130:	e008      	b.n	8001144 <faultBlinker+0x44>
        } else {
            // Turns off the Fault Light
            HAL_GPIO_WritePin(faultIndicatorPort, faultIndicator, GPIO_PIN_RESET);
 8001132:	2200      	movs	r2, #0
 8001134:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001138:	4808      	ldr	r0, [pc, #32]	@ (800115c <faultBlinker+0x5c>)
 800113a:	f001 ff27 	bl	8002f8c <HAL_GPIO_WritePin>
            o_faultIndicator = GPIO_PIN_RESET;
 800113e:	4b06      	ldr	r3, [pc, #24]	@ (8001158 <faultBlinker+0x58>)
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]
        }

        extraTime = currentTime;
 8001144:	4b02      	ldr	r3, [pc, #8]	@ (8001150 <faultBlinker+0x50>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a02      	ldr	r2, [pc, #8]	@ (8001154 <faultBlinker+0x54>)
 800114a:	6013      	str	r3, [r2, #0]
    }


  /* USER CODE END 3 */
}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000284 	.word	0x20000284
 8001154:	20000288 	.word	0x20000288
 8001158:	20000297 	.word	0x20000297
 800115c:	40020800 	.word	0x40020800

08001160 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b094      	sub	sp, #80	@ 0x50
 8001164:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001166:	f107 0320 	add.w	r3, r7, #32
 800116a:	2230      	movs	r2, #48	@ 0x30
 800116c:	2100      	movs	r1, #0
 800116e:	4618      	mov	r0, r3
 8001170:	f007 fe4a 	bl	8008e08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001174:	f107 030c 	add.w	r3, r7, #12
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001184:	2300      	movs	r3, #0
 8001186:	60bb      	str	r3, [r7, #8]
 8001188:	4b28      	ldr	r3, [pc, #160]	@ (800122c <SystemClock_Config+0xcc>)
 800118a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118c:	4a27      	ldr	r2, [pc, #156]	@ (800122c <SystemClock_Config+0xcc>)
 800118e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001192:	6413      	str	r3, [r2, #64]	@ 0x40
 8001194:	4b25      	ldr	r3, [pc, #148]	@ (800122c <SystemClock_Config+0xcc>)
 8001196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001198:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011a0:	2300      	movs	r3, #0
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	4b22      	ldr	r3, [pc, #136]	@ (8001230 <SystemClock_Config+0xd0>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a21      	ldr	r2, [pc, #132]	@ (8001230 <SystemClock_Config+0xd0>)
 80011aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011ae:	6013      	str	r3, [r2, #0]
 80011b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001230 <SystemClock_Config+0xd0>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011b8:	607b      	str	r3, [r7, #4]
 80011ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011bc:	2301      	movs	r3, #1
 80011be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011c6:	2302      	movs	r3, #2
 80011c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011ca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80011ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011d0:	2308      	movs	r3, #8
 80011d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011d4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80011d8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011da:	2302      	movs	r3, #2
 80011dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011de:	2307      	movs	r3, #7
 80011e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e2:	f107 0320 	add.w	r3, r7, #32
 80011e6:	4618      	mov	r0, r3
 80011e8:	f003 f93c 	bl	8004464 <HAL_RCC_OscConfig>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80011f2:	f000 fb05 	bl	8001800 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011f6:	230f      	movs	r3, #15
 80011f8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011fa:	2302      	movs	r3, #2
 80011fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011fe:	2300      	movs	r3, #0
 8001200:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001202:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001206:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001208:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800120c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800120e:	f107 030c 	add.w	r3, r7, #12
 8001212:	2105      	movs	r1, #5
 8001214:	4618      	mov	r0, r3
 8001216:	f003 fb9d 	bl	8004954 <HAL_RCC_ClockConfig>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001220:	f000 faee 	bl	8001800 <Error_Handler>
  }
}
 8001224:	bf00      	nop
 8001226:	3750      	adds	r7, #80	@ 0x50
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40023800 	.word	0x40023800
 8001230:	40007000 	.word	0x40007000

08001234 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800123a:	463b      	mov	r3, r7
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001246:	4b21      	ldr	r3, [pc, #132]	@ (80012cc <MX_ADC1_Init+0x98>)
 8001248:	4a21      	ldr	r2, [pc, #132]	@ (80012d0 <MX_ADC1_Init+0x9c>)
 800124a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800124c:	4b1f      	ldr	r3, [pc, #124]	@ (80012cc <MX_ADC1_Init+0x98>)
 800124e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001252:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001254:	4b1d      	ldr	r3, [pc, #116]	@ (80012cc <MX_ADC1_Init+0x98>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800125a:	4b1c      	ldr	r3, [pc, #112]	@ (80012cc <MX_ADC1_Init+0x98>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001260:	4b1a      	ldr	r3, [pc, #104]	@ (80012cc <MX_ADC1_Init+0x98>)
 8001262:	2201      	movs	r2, #1
 8001264:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001266:	4b19      	ldr	r3, [pc, #100]	@ (80012cc <MX_ADC1_Init+0x98>)
 8001268:	2200      	movs	r2, #0
 800126a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800126e:	4b17      	ldr	r3, [pc, #92]	@ (80012cc <MX_ADC1_Init+0x98>)
 8001270:	2200      	movs	r2, #0
 8001272:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001274:	4b15      	ldr	r3, [pc, #84]	@ (80012cc <MX_ADC1_Init+0x98>)
 8001276:	4a17      	ldr	r2, [pc, #92]	@ (80012d4 <MX_ADC1_Init+0xa0>)
 8001278:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800127a:	4b14      	ldr	r3, [pc, #80]	@ (80012cc <MX_ADC1_Init+0x98>)
 800127c:	2200      	movs	r2, #0
 800127e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001280:	4b12      	ldr	r3, [pc, #72]	@ (80012cc <MX_ADC1_Init+0x98>)
 8001282:	2201      	movs	r2, #1
 8001284:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001286:	4b11      	ldr	r3, [pc, #68]	@ (80012cc <MX_ADC1_Init+0x98>)
 8001288:	2200      	movs	r2, #0
 800128a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800128e:	4b0f      	ldr	r3, [pc, #60]	@ (80012cc <MX_ADC1_Init+0x98>)
 8001290:	2201      	movs	r2, #1
 8001292:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001294:	480d      	ldr	r0, [pc, #52]	@ (80012cc <MX_ADC1_Init+0x98>)
 8001296:	f000 fd55 	bl	8001d44 <HAL_ADC_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80012a0:	f000 faae 	bl	8001800 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012a4:	2301      	movs	r3, #1
 80012a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012a8:	2301      	movs	r3, #1
 80012aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80012ac:	2301      	movs	r3, #1
 80012ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012b0:	463b      	mov	r3, r7
 80012b2:	4619      	mov	r1, r3
 80012b4:	4805      	ldr	r0, [pc, #20]	@ (80012cc <MX_ADC1_Init+0x98>)
 80012b6:	f000 fe69 	bl	8001f8c <HAL_ADC_ConfigChannel>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80012c0:	f000 fa9e 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012c4:	bf00      	nop
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000168 	.word	0x20000168
 80012d0:	40012000 	.word	0x40012000
 80012d4:	0f000001 	.word	0x0f000001

080012d8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012de:	463b      	mov	r3, r7
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80012ea:	4b21      	ldr	r3, [pc, #132]	@ (8001370 <MX_ADC2_Init+0x98>)
 80012ec:	4a21      	ldr	r2, [pc, #132]	@ (8001374 <MX_ADC2_Init+0x9c>)
 80012ee:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001370 <MX_ADC2_Init+0x98>)
 80012f2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80012f6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80012f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001370 <MX_ADC2_Init+0x98>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80012fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001370 <MX_ADC2_Init+0x98>)
 8001300:	2200      	movs	r2, #0
 8001302:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001304:	4b1a      	ldr	r3, [pc, #104]	@ (8001370 <MX_ADC2_Init+0x98>)
 8001306:	2201      	movs	r2, #1
 8001308:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800130a:	4b19      	ldr	r3, [pc, #100]	@ (8001370 <MX_ADC2_Init+0x98>)
 800130c:	2200      	movs	r2, #0
 800130e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001312:	4b17      	ldr	r3, [pc, #92]	@ (8001370 <MX_ADC2_Init+0x98>)
 8001314:	2200      	movs	r2, #0
 8001316:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001318:	4b15      	ldr	r3, [pc, #84]	@ (8001370 <MX_ADC2_Init+0x98>)
 800131a:	4a17      	ldr	r2, [pc, #92]	@ (8001378 <MX_ADC2_Init+0xa0>)
 800131c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800131e:	4b14      	ldr	r3, [pc, #80]	@ (8001370 <MX_ADC2_Init+0x98>)
 8001320:	2200      	movs	r2, #0
 8001322:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001324:	4b12      	ldr	r3, [pc, #72]	@ (8001370 <MX_ADC2_Init+0x98>)
 8001326:	2201      	movs	r2, #1
 8001328:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800132a:	4b11      	ldr	r3, [pc, #68]	@ (8001370 <MX_ADC2_Init+0x98>)
 800132c:	2200      	movs	r2, #0
 800132e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001332:	4b0f      	ldr	r3, [pc, #60]	@ (8001370 <MX_ADC2_Init+0x98>)
 8001334:	2201      	movs	r2, #1
 8001336:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001338:	480d      	ldr	r0, [pc, #52]	@ (8001370 <MX_ADC2_Init+0x98>)
 800133a:	f000 fd03 	bl	8001d44 <HAL_ADC_Init>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001344:	f000 fa5c 	bl	8001800 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001348:	2302      	movs	r3, #2
 800134a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800134c:	2301      	movs	r3, #1
 800134e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001350:	2300      	movs	r3, #0
 8001352:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001354:	463b      	mov	r3, r7
 8001356:	4619      	mov	r1, r3
 8001358:	4805      	ldr	r0, [pc, #20]	@ (8001370 <MX_ADC2_Init+0x98>)
 800135a:	f000 fe17 	bl	8001f8c <HAL_ADC_ConfigChannel>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001364:	f000 fa4c 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001368:	bf00      	nop
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	200001b0 	.word	0x200001b0
 8001374:	40012100 	.word	0x40012100
 8001378:	0f000001 	.word	0x0f000001

0800137c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001382:	463b      	mov	r3, r7
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800138e:	4b21      	ldr	r3, [pc, #132]	@ (8001414 <MX_ADC3_Init+0x98>)
 8001390:	4a21      	ldr	r2, [pc, #132]	@ (8001418 <MX_ADC3_Init+0x9c>)
 8001392:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001394:	4b1f      	ldr	r3, [pc, #124]	@ (8001414 <MX_ADC3_Init+0x98>)
 8001396:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800139a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800139c:	4b1d      	ldr	r3, [pc, #116]	@ (8001414 <MX_ADC3_Init+0x98>)
 800139e:	2200      	movs	r2, #0
 80013a0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80013a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001414 <MX_ADC3_Init+0x98>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80013a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001414 <MX_ADC3_Init+0x98>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80013ae:	4b19      	ldr	r3, [pc, #100]	@ (8001414 <MX_ADC3_Init+0x98>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013b6:	4b17      	ldr	r3, [pc, #92]	@ (8001414 <MX_ADC3_Init+0x98>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013bc:	4b15      	ldr	r3, [pc, #84]	@ (8001414 <MX_ADC3_Init+0x98>)
 80013be:	4a17      	ldr	r2, [pc, #92]	@ (800141c <MX_ADC3_Init+0xa0>)
 80013c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013c2:	4b14      	ldr	r3, [pc, #80]	@ (8001414 <MX_ADC3_Init+0x98>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80013c8:	4b12      	ldr	r3, [pc, #72]	@ (8001414 <MX_ADC3_Init+0x98>)
 80013ca:	2201      	movs	r2, #1
 80013cc:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80013ce:	4b11      	ldr	r3, [pc, #68]	@ (8001414 <MX_ADC3_Init+0x98>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001414 <MX_ADC3_Init+0x98>)
 80013d8:	2201      	movs	r2, #1
 80013da:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80013dc:	480d      	ldr	r0, [pc, #52]	@ (8001414 <MX_ADC3_Init+0x98>)
 80013de:	f000 fcb1 	bl	8001d44 <HAL_ADC_Init>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80013e8:	f000 fa0a 	bl	8001800 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80013ec:	230c      	movs	r3, #12
 80013ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80013f0:	2301      	movs	r3, #1
 80013f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80013f8:	463b      	mov	r3, r7
 80013fa:	4619      	mov	r1, r3
 80013fc:	4805      	ldr	r0, [pc, #20]	@ (8001414 <MX_ADC3_Init+0x98>)
 80013fe:	f000 fdc5 	bl	8001f8c <HAL_ADC_ConfigChannel>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001408:	f000 f9fa 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800140c:	bf00      	nop
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	200001f8 	.word	0x200001f8
 8001418:	40012200 	.word	0x40012200
 800141c:	0f000001 	.word	0x0f000001

08001420 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001424:	4b34      	ldr	r3, [pc, #208]	@ (80014f8 <MX_CAN1_Init+0xd8>)
 8001426:	4a35      	ldr	r2, [pc, #212]	@ (80014fc <MX_CAN1_Init+0xdc>)
 8001428:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800142a:	4b33      	ldr	r3, [pc, #204]	@ (80014f8 <MX_CAN1_Init+0xd8>)
 800142c:	2210      	movs	r2, #16
 800142e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001430:	4b31      	ldr	r3, [pc, #196]	@ (80014f8 <MX_CAN1_Init+0xd8>)
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001436:	4b30      	ldr	r3, [pc, #192]	@ (80014f8 <MX_CAN1_Init+0xd8>)
 8001438:	2200      	movs	r2, #0
 800143a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 800143c:	4b2e      	ldr	r3, [pc, #184]	@ (80014f8 <MX_CAN1_Init+0xd8>)
 800143e:	2200      	movs	r2, #0
 8001440:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001442:	4b2d      	ldr	r3, [pc, #180]	@ (80014f8 <MX_CAN1_Init+0xd8>)
 8001444:	2200      	movs	r2, #0
 8001446:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001448:	4b2b      	ldr	r3, [pc, #172]	@ (80014f8 <MX_CAN1_Init+0xd8>)
 800144a:	2200      	movs	r2, #0
 800144c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800144e:	4b2a      	ldr	r3, [pc, #168]	@ (80014f8 <MX_CAN1_Init+0xd8>)
 8001450:	2200      	movs	r2, #0
 8001452:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001454:	4b28      	ldr	r3, [pc, #160]	@ (80014f8 <MX_CAN1_Init+0xd8>)
 8001456:	2200      	movs	r2, #0
 8001458:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800145a:	4b27      	ldr	r3, [pc, #156]	@ (80014f8 <MX_CAN1_Init+0xd8>)
 800145c:	2200      	movs	r2, #0
 800145e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001460:	4b25      	ldr	r3, [pc, #148]	@ (80014f8 <MX_CAN1_Init+0xd8>)
 8001462:	2200      	movs	r2, #0
 8001464:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001466:	4b24      	ldr	r3, [pc, #144]	@ (80014f8 <MX_CAN1_Init+0xd8>)
 8001468:	2200      	movs	r2, #0
 800146a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800146c:	4822      	ldr	r0, [pc, #136]	@ (80014f8 <MX_CAN1_Init+0xd8>)
 800146e:	f000 ffab 	bl	80023c8 <HAL_CAN_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8001478:	f000 f9c2 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  //Sets Up the First part of the CAN FRAME
  TxHeader.IDE = CAN_ID_STD;
 800147c:	4b20      	ldr	r3, [pc, #128]	@ (8001500 <MX_CAN1_Init+0xe0>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
  TxHeader.StdId = 0x420;
 8001482:	4b1f      	ldr	r3, [pc, #124]	@ (8001500 <MX_CAN1_Init+0xe0>)
 8001484:	f44f 6284 	mov.w	r2, #1056	@ 0x420
 8001488:	601a      	str	r2, [r3, #0]
  TxHeader.RTR = CAN_RTR_DATA;
 800148a:	4b1d      	ldr	r3, [pc, #116]	@ (8001500 <MX_CAN1_Init+0xe0>)
 800148c:	2200      	movs	r2, #0
 800148e:	60da      	str	r2, [r3, #12]
  TxHeader.DLC = 8;
 8001490:	4b1b      	ldr	r3, [pc, #108]	@ (8001500 <MX_CAN1_Init+0xe0>)
 8001492:	2208      	movs	r2, #8
 8001494:	611a      	str	r2, [r3, #16]

  Filter.FilterActivation = CAN_FILTER_ENABLE;
 8001496:	4b1b      	ldr	r3, [pc, #108]	@ (8001504 <MX_CAN1_Init+0xe4>)
 8001498:	2201      	movs	r2, #1
 800149a:	621a      	str	r2, [r3, #32]
  Filter.FilterBank = 0;
 800149c:	4b19      	ldr	r3, [pc, #100]	@ (8001504 <MX_CAN1_Init+0xe4>)
 800149e:	2200      	movs	r2, #0
 80014a0:	615a      	str	r2, [r3, #20]
  Filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80014a2:	4b18      	ldr	r3, [pc, #96]	@ (8001504 <MX_CAN1_Init+0xe4>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	611a      	str	r2, [r3, #16]
  Filter.FilterIdHigh = 0x0000;
 80014a8:	4b16      	ldr	r3, [pc, #88]	@ (8001504 <MX_CAN1_Init+0xe4>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
  Filter.FilterIdLow = 0x0000;
 80014ae:	4b15      	ldr	r3, [pc, #84]	@ (8001504 <MX_CAN1_Init+0xe4>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	605a      	str	r2, [r3, #4]
  Filter.FilterMaskIdHigh = 0x0000;
 80014b4:	4b13      	ldr	r3, [pc, #76]	@ (8001504 <MX_CAN1_Init+0xe4>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
  Filter.FilterMaskIdLow = 0x0000;
 80014ba:	4b12      	ldr	r3, [pc, #72]	@ (8001504 <MX_CAN1_Init+0xe4>)
 80014bc:	2200      	movs	r2, #0
 80014be:	60da      	str	r2, [r3, #12]
  Filter.FilterMode = CAN_FILTERMODE_IDMASK;
 80014c0:	4b10      	ldr	r3, [pc, #64]	@ (8001504 <MX_CAN1_Init+0xe4>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	619a      	str	r2, [r3, #24]
  Filter.FilterScale = CAN_FILTERSCALE_32BIT;
 80014c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001504 <MX_CAN1_Init+0xe4>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	61da      	str	r2, [r3, #28]
  Filter.SlaveStartFilterBank = 14;
 80014cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001504 <MX_CAN1_Init+0xe4>)
 80014ce:	220e      	movs	r2, #14
 80014d0:	625a      	str	r2, [r3, #36]	@ 0x24

  if (HAL_CAN_ConfigFilter(&hcan1, &Filter) != HAL_OK){
 80014d2:	490c      	ldr	r1, [pc, #48]	@ (8001504 <MX_CAN1_Init+0xe4>)
 80014d4:	4808      	ldr	r0, [pc, #32]	@ (80014f8 <MX_CAN1_Init+0xd8>)
 80014d6:	f001 f873 	bl	80025c0 <HAL_CAN_ConfigFilter>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_CAN1_Init+0xc4>
	  Error_Handler();
 80014e0:	f000 f98e 	bl	8001800 <Error_Handler>
  }
  if(HAL_CAN_Start(&hcan1)!= HAL_OK){
 80014e4:	4804      	ldr	r0, [pc, #16]	@ (80014f8 <MX_CAN1_Init+0xd8>)
 80014e6:	f001 f94b 	bl	8002780 <HAL_CAN_Start>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_CAN1_Init+0xd4>
	  Error_Handler();
 80014f0:	f000 f986 	bl	8001800 <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 80014f4:	bf00      	nop
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000240 	.word	0x20000240
 80014fc:	40006400 	.word	0x40006400
 8001500:	200002cc 	.word	0x200002cc
 8001504:	200002a4 	.word	0x200002a4

08001508 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800150e:	463b      	mov	r3, r7
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001516:	4b14      	ldr	r3, [pc, #80]	@ (8001568 <MX_DAC_Init+0x60>)
 8001518:	4a14      	ldr	r2, [pc, #80]	@ (800156c <MX_DAC_Init+0x64>)
 800151a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800151c:	4812      	ldr	r0, [pc, #72]	@ (8001568 <MX_DAC_Init+0x60>)
 800151e:	f001 fa84 	bl	8002a2a <HAL_DAC_Init>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001528:	f000 f96a 	bl	8001800 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800152c:	2300      	movs	r3, #0
 800152e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001530:	2300      	movs	r3, #0
 8001532:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001534:	463b      	mov	r3, r7
 8001536:	2200      	movs	r2, #0
 8001538:	4619      	mov	r1, r3
 800153a:	480b      	ldr	r0, [pc, #44]	@ (8001568 <MX_DAC_Init+0x60>)
 800153c:	f001 fb18 	bl	8002b70 <HAL_DAC_ConfigChannel>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001546:	f000 f95b 	bl	8001800 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800154a:	463b      	mov	r3, r7
 800154c:	2210      	movs	r2, #16
 800154e:	4619      	mov	r1, r3
 8001550:	4805      	ldr	r0, [pc, #20]	@ (8001568 <MX_DAC_Init+0x60>)
 8001552:	f001 fb0d 	bl	8002b70 <HAL_DAC_ConfigChannel>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 800155c:	f000 f950 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001560:	bf00      	nop
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20000268 	.word	0x20000268
 800156c:	40007400 	.word	0x40007400

08001570 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08c      	sub	sp, #48	@ 0x30
 8001574:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001576:	f107 031c 	add.w	r3, r7, #28
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]
 8001582:	60da      	str	r2, [r3, #12]
 8001584:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	61bb      	str	r3, [r7, #24]
 800158a:	4b97      	ldr	r3, [pc, #604]	@ (80017e8 <MX_GPIO_Init+0x278>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158e:	4a96      	ldr	r2, [pc, #600]	@ (80017e8 <MX_GPIO_Init+0x278>)
 8001590:	f043 0310 	orr.w	r3, r3, #16
 8001594:	6313      	str	r3, [r2, #48]	@ 0x30
 8001596:	4b94      	ldr	r3, [pc, #592]	@ (80017e8 <MX_GPIO_Init+0x278>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159a:	f003 0310 	and.w	r3, r3, #16
 800159e:	61bb      	str	r3, [r7, #24]
 80015a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	617b      	str	r3, [r7, #20]
 80015a6:	4b90      	ldr	r3, [pc, #576]	@ (80017e8 <MX_GPIO_Init+0x278>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015aa:	4a8f      	ldr	r2, [pc, #572]	@ (80017e8 <MX_GPIO_Init+0x278>)
 80015ac:	f043 0304 	orr.w	r3, r3, #4
 80015b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015b2:	4b8d      	ldr	r3, [pc, #564]	@ (80017e8 <MX_GPIO_Init+0x278>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b6:	f003 0304 	and.w	r3, r3, #4
 80015ba:	617b      	str	r3, [r7, #20]
 80015bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	613b      	str	r3, [r7, #16]
 80015c2:	4b89      	ldr	r3, [pc, #548]	@ (80017e8 <MX_GPIO_Init+0x278>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c6:	4a88      	ldr	r2, [pc, #544]	@ (80017e8 <MX_GPIO_Init+0x278>)
 80015c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ce:	4b86      	ldr	r3, [pc, #536]	@ (80017e8 <MX_GPIO_Init+0x278>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015d6:	613b      	str	r3, [r7, #16]
 80015d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	4b82      	ldr	r3, [pc, #520]	@ (80017e8 <MX_GPIO_Init+0x278>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e2:	4a81      	ldr	r2, [pc, #516]	@ (80017e8 <MX_GPIO_Init+0x278>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ea:	4b7f      	ldr	r3, [pc, #508]	@ (80017e8 <MX_GPIO_Init+0x278>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	60bb      	str	r3, [r7, #8]
 80015fa:	4b7b      	ldr	r3, [pc, #492]	@ (80017e8 <MX_GPIO_Init+0x278>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fe:	4a7a      	ldr	r2, [pc, #488]	@ (80017e8 <MX_GPIO_Init+0x278>)
 8001600:	f043 0302 	orr.w	r3, r3, #2
 8001604:	6313      	str	r3, [r2, #48]	@ 0x30
 8001606:	4b78      	ldr	r3, [pc, #480]	@ (80017e8 <MX_GPIO_Init+0x278>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	607b      	str	r3, [r7, #4]
 8001616:	4b74      	ldr	r3, [pc, #464]	@ (80017e8 <MX_GPIO_Init+0x278>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161a:	4a73      	ldr	r2, [pc, #460]	@ (80017e8 <MX_GPIO_Init+0x278>)
 800161c:	f043 0308 	orr.w	r3, r3, #8
 8001620:	6313      	str	r3, [r2, #48]	@ 0x30
 8001622:	4b71      	ldr	r3, [pc, #452]	@ (80017e8 <MX_GPIO_Init+0x278>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001626:	f003 0308 	and.w	r3, r3, #8
 800162a:	607b      	str	r3, [r7, #4]
 800162c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|auxDCDCDisable_Pin|hvDCDCEnable_Pin|preChargeRelay_Pin
 800162e:	2200      	movs	r2, #0
 8001630:	f641 1188 	movw	r1, #6536	@ 0x1988
 8001634:	486d      	ldr	r0, [pc, #436]	@ (80017ec <MX_GPIO_Init+0x27c>)
 8001636:	f001 fca9 	bl	8002f8c <HAL_GPIO_WritePin>
                          |hvContactor_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800163a:	2201      	movs	r2, #1
 800163c:	2101      	movs	r1, #1
 800163e:	486c      	ldr	r0, [pc, #432]	@ (80017f0 <MX_GPIO_Init+0x280>)
 8001640:	f001 fca4 	bl	8002f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD6_Pin|spareOutput2_Pin
 8001644:	2200      	movs	r2, #0
 8001646:	f24b 0191 	movw	r1, #45201	@ 0xb091
 800164a:	486a      	ldr	r0, [pc, #424]	@ (80017f4 <MX_GPIO_Init+0x284>)
 800164c:	f001 fc9e 	bl	8002f8c <HAL_GPIO_WritePin>
                          |chargeIndicator_Pin|NA2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(faultIndicator_GPIO_Port, faultIndicator_Pin, GPIO_PIN_RESET);
 8001650:	2200      	movs	r2, #0
 8001652:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001656:	4866      	ldr	r0, [pc, #408]	@ (80017f0 <MX_GPIO_Init+0x280>)
 8001658:	f001 fc98 	bl	8002f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(spareOutput3_GPIO_Port, spareOutput3_Pin, GPIO_PIN_SET);
 800165c:	2201      	movs	r2, #1
 800165e:	2140      	movs	r1, #64	@ 0x40
 8001660:	4864      	ldr	r0, [pc, #400]	@ (80017f4 <MX_GPIO_Init+0x284>)
 8001662:	f001 fc93 	bl	8002f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_I2C_SPI_Pin auxDCDCDisable_Pin hvDCDCEnable_Pin preChargeRelay_Pin
                           hvContactor_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|auxDCDCDisable_Pin|hvDCDCEnable_Pin|preChargeRelay_Pin
 8001666:	f641 1388 	movw	r3, #6536	@ 0x1988
 800166a:	61fb      	str	r3, [r7, #28]
                          |hvContactor_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166c:	2301      	movs	r3, #1
 800166e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001674:	2300      	movs	r3, #0
 8001676:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001678:	f107 031c 	add.w	r3, r7, #28
 800167c:	4619      	mov	r1, r3
 800167e:	485b      	ldr	r0, [pc, #364]	@ (80017ec <MX_GPIO_Init+0x27c>)
 8001680:	f001 fad0 	bl	8002c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin faultIndicator_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|faultIndicator_Pin;
 8001684:	f241 0301 	movw	r3, #4097	@ 0x1001
 8001688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168a:	2301      	movs	r3, #1
 800168c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001692:	2300      	movs	r3, #0
 8001694:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001696:	f107 031c 	add.w	r3, r7, #28
 800169a:	4619      	mov	r1, r3
 800169c:	4854      	ldr	r0, [pc, #336]	@ (80017f0 <MX_GPIO_Init+0x280>)
 800169e:	f001 fac1 	bl	8002c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80016a2:	2308      	movs	r3, #8
 80016a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a6:	2302      	movs	r3, #2
 80016a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ae:	2300      	movs	r3, #0
 80016b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016b2:	2305      	movs	r3, #5
 80016b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80016b6:	f107 031c 	add.w	r3, r7, #28
 80016ba:	4619      	mov	r1, r3
 80016bc:	484c      	ldr	r0, [pc, #304]	@ (80017f0 <MX_GPIO_Init+0x280>)
 80016be:	f001 fab1 	bl	8002c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016c2:	2301      	movs	r3, #1
 80016c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80016c6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80016ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016d0:	f107 031c 	add.w	r3, r7, #28
 80016d4:	4619      	mov	r1, r3
 80016d6:	4848      	ldr	r0, [pc, #288]	@ (80017f8 <MX_GPIO_Init+0x288>)
 80016d8:	f001 faa4 	bl	8002c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_MISO_Pin */
  GPIO_InitStruct.Pin = SPI1_MISO_Pin;
 80016dc:	2340      	movs	r3, #64	@ 0x40
 80016de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e0:	2302      	movs	r3, #2
 80016e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e8:	2300      	movs	r3, #0
 80016ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016ec:	2305      	movs	r3, #5
 80016ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(SPI1_MISO_GPIO_Port, &GPIO_InitStruct);
 80016f0:	f107 031c 	add.w	r3, r7, #28
 80016f4:	4619      	mov	r1, r3
 80016f6:	4840      	ldr	r0, [pc, #256]	@ (80017f8 <MX_GPIO_Init+0x288>)
 80016f8:	f001 fa94 	bl	8002c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80016fc:	2304      	movs	r3, #4
 80016fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001700:	2300      	movs	r3, #0
 8001702:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001708:	f107 031c 	add.w	r3, r7, #28
 800170c:	4619      	mov	r1, r3
 800170e:	483b      	ldr	r0, [pc, #236]	@ (80017fc <MX_GPIO_Init+0x28c>)
 8001710:	f001 fa88 	bl	8002c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : keyIGN_Pin keyACC_Pin chargeContactor_Pin disChargeEnable_Pin
                           chargeEnable_Pin */
  GPIO_InitStruct.Pin = keyIGN_Pin|keyACC_Pin|chargeContactor_Pin|disChargeEnable_Pin
 8001714:	f44f 4366 	mov.w	r3, #58880	@ 0xe600
 8001718:	61fb      	str	r3, [r7, #28]
                          |chargeEnable_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800171a:	2300      	movs	r3, #0
 800171c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001722:	f107 031c 	add.w	r3, r7, #28
 8001726:	4619      	mov	r1, r3
 8001728:	4830      	ldr	r0, [pc, #192]	@ (80017ec <MX_GPIO_Init+0x27c>)
 800172a:	f001 fa7b 	bl	8002c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800172e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001732:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001734:	2302      	movs	r3, #2
 8001736:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173c:	2300      	movs	r3, #0
 800173e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001740:	2305      	movs	r3, #5
 8001742:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001744:	f107 031c 	add.w	r3, r7, #28
 8001748:	4619      	mov	r1, r3
 800174a:	482c      	ldr	r0, [pc, #176]	@ (80017fc <MX_GPIO_Init+0x28c>)
 800174c:	f001 fa6a 	bl	8002c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : spareInput2_Pin spareInput1_Pin spareInput3_Pin killSwitch_Pin
                           brakeSwitchInput_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = spareInput2_Pin|spareInput1_Pin|spareInput3_Pin|killSwitch_Pin
 8001750:	f240 7326 	movw	r3, #1830	@ 0x726
 8001754:	61fb      	str	r3, [r7, #28]
                          |brakeSwitchInput_Pin|OTG_FS_OverCurrent_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001756:	2300      	movs	r3, #0
 8001758:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800175e:	f107 031c 	add.w	r3, r7, #28
 8001762:	4619      	mov	r1, r3
 8001764:	4823      	ldr	r0, [pc, #140]	@ (80017f4 <MX_GPIO_Init+0x284>)
 8001766:	f001 fa5d 	bl	8002c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD6_Pin spareOutput2_Pin
                           chargeIndicator_Pin NA2_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD6_Pin|spareOutput2_Pin
 800176a:	f24b 0391 	movw	r3, #45201	@ 0xb091
 800176e:	61fb      	str	r3, [r7, #28]
                          |chargeIndicator_Pin|NA2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001770:	2301      	movs	r3, #1
 8001772:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001778:	2300      	movs	r3, #0
 800177a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800177c:	f107 031c 	add.w	r3, r7, #28
 8001780:	4619      	mov	r1, r3
 8001782:	481c      	ldr	r0, [pc, #112]	@ (80017f4 <MX_GPIO_Init+0x284>)
 8001784:	f001 fa4e 	bl	8002c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_SCK_Pin */
  GPIO_InitStruct.Pin = I2S3_SCK_Pin;
 8001788:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800178c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178e:	2302      	movs	r3, #2
 8001790:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001792:	2300      	movs	r3, #0
 8001794:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001796:	2300      	movs	r3, #0
 8001798:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800179a:	2306      	movs	r3, #6
 800179c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_SCK_GPIO_Port, &GPIO_InitStruct);
 800179e:	f107 031c 	add.w	r3, r7, #28
 80017a2:	4619      	mov	r1, r3
 80017a4:	4812      	ldr	r0, [pc, #72]	@ (80017f0 <MX_GPIO_Init+0x280>)
 80017a6:	f001 fa3d 	bl	8002c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : spareOutput3_Pin */
  GPIO_InitStruct.Pin = spareOutput3_Pin;
 80017aa:	2340      	movs	r3, #64	@ 0x40
 80017ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ae:	2301      	movs	r3, #1
 80017b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017b2:	2302      	movs	r3, #2
 80017b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017b6:	2302      	movs	r3, #2
 80017b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(spareOutput3_GPIO_Port, &GPIO_InitStruct);
 80017ba:	f107 031c 	add.w	r3, r7, #28
 80017be:	4619      	mov	r1, r3
 80017c0:	480c      	ldr	r0, [pc, #48]	@ (80017f4 <MX_GPIO_Init+0x284>)
 80017c2:	f001 fa2f 	bl	8002c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80017c6:	2302      	movs	r3, #2
 80017c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80017ca:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80017ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80017d4:	f107 031c 	add.w	r3, r7, #28
 80017d8:	4619      	mov	r1, r3
 80017da:	4804      	ldr	r0, [pc, #16]	@ (80017ec <MX_GPIO_Init+0x27c>)
 80017dc:	f001 fa22 	bl	8002c24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017e0:	bf00      	nop
 80017e2:	3730      	adds	r7, #48	@ 0x30
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40023800 	.word	0x40023800
 80017ec:	40021000 	.word	0x40021000
 80017f0:	40020800 	.word	0x40020800
 80017f4:	40020c00 	.word	0x40020c00
 80017f8:	40020000 	.word	0x40020000
 80017fc:	40020400 	.word	0x40020400

08001800 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001804:	b672      	cpsid	i
}
 8001806:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001808:	bf00      	nop
 800180a:	e7fd      	b.n	8001808 <Error_Handler+0x8>

0800180c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	607b      	str	r3, [r7, #4]
 8001816:	4b10      	ldr	r3, [pc, #64]	@ (8001858 <HAL_MspInit+0x4c>)
 8001818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800181a:	4a0f      	ldr	r2, [pc, #60]	@ (8001858 <HAL_MspInit+0x4c>)
 800181c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001820:	6453      	str	r3, [r2, #68]	@ 0x44
 8001822:	4b0d      	ldr	r3, [pc, #52]	@ (8001858 <HAL_MspInit+0x4c>)
 8001824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001826:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800182a:	607b      	str	r3, [r7, #4]
 800182c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	603b      	str	r3, [r7, #0]
 8001832:	4b09      	ldr	r3, [pc, #36]	@ (8001858 <HAL_MspInit+0x4c>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001836:	4a08      	ldr	r2, [pc, #32]	@ (8001858 <HAL_MspInit+0x4c>)
 8001838:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800183c:	6413      	str	r3, [r2, #64]	@ 0x40
 800183e:	4b06      	ldr	r3, [pc, #24]	@ (8001858 <HAL_MspInit+0x4c>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001842:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001846:	603b      	str	r3, [r7, #0]
 8001848:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800184a:	2007      	movs	r0, #7
 800184c:	f001 f8ac 	bl	80029a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001850:	bf00      	nop
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40023800 	.word	0x40023800

0800185c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b08e      	sub	sp, #56	@ 0x38
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001864:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a45      	ldr	r2, [pc, #276]	@ (8001990 <HAL_ADC_MspInit+0x134>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d128      	bne.n	80018d0 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	623b      	str	r3, [r7, #32]
 8001882:	4b44      	ldr	r3, [pc, #272]	@ (8001994 <HAL_ADC_MspInit+0x138>)
 8001884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001886:	4a43      	ldr	r2, [pc, #268]	@ (8001994 <HAL_ADC_MspInit+0x138>)
 8001888:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800188c:	6453      	str	r3, [r2, #68]	@ 0x44
 800188e:	4b41      	ldr	r3, [pc, #260]	@ (8001994 <HAL_ADC_MspInit+0x138>)
 8001890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001892:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001896:	623b      	str	r3, [r7, #32]
 8001898:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]
 800189e:	4b3d      	ldr	r3, [pc, #244]	@ (8001994 <HAL_ADC_MspInit+0x138>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a2:	4a3c      	ldr	r2, [pc, #240]	@ (8001994 <HAL_ADC_MspInit+0x138>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018aa:	4b3a      	ldr	r3, [pc, #232]	@ (8001994 <HAL_ADC_MspInit+0x138>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	61fb      	str	r3, [r7, #28]
 80018b4:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = pedalADC_Pin;
 80018b6:	2302      	movs	r3, #2
 80018b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018ba:	2303      	movs	r3, #3
 80018bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	2300      	movs	r3, #0
 80018c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(pedalADC_GPIO_Port, &GPIO_InitStruct);
 80018c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018c6:	4619      	mov	r1, r3
 80018c8:	4833      	ldr	r0, [pc, #204]	@ (8001998 <HAL_ADC_MspInit+0x13c>)
 80018ca:	f001 f9ab 	bl	8002c24 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80018ce:	e05a      	b.n	8001986 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a31      	ldr	r2, [pc, #196]	@ (800199c <HAL_ADC_MspInit+0x140>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d128      	bne.n	800192c <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	61bb      	str	r3, [r7, #24]
 80018de:	4b2d      	ldr	r3, [pc, #180]	@ (8001994 <HAL_ADC_MspInit+0x138>)
 80018e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018e2:	4a2c      	ldr	r2, [pc, #176]	@ (8001994 <HAL_ADC_MspInit+0x138>)
 80018e4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80018ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001994 <HAL_ADC_MspInit+0x138>)
 80018ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018f2:	61bb      	str	r3, [r7, #24]
 80018f4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	617b      	str	r3, [r7, #20]
 80018fa:	4b26      	ldr	r3, [pc, #152]	@ (8001994 <HAL_ADC_MspInit+0x138>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fe:	4a25      	ldr	r2, [pc, #148]	@ (8001994 <HAL_ADC_MspInit+0x138>)
 8001900:	f043 0301 	orr.w	r3, r3, #1
 8001904:	6313      	str	r3, [r2, #48]	@ 0x30
 8001906:	4b23      	ldr	r3, [pc, #140]	@ (8001994 <HAL_ADC_MspInit+0x138>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	617b      	str	r3, [r7, #20]
 8001910:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = regenADC_Pin;
 8001912:	2304      	movs	r3, #4
 8001914:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001916:	2303      	movs	r3, #3
 8001918:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(regenADC_GPIO_Port, &GPIO_InitStruct);
 800191e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001922:	4619      	mov	r1, r3
 8001924:	481c      	ldr	r0, [pc, #112]	@ (8001998 <HAL_ADC_MspInit+0x13c>)
 8001926:	f001 f97d 	bl	8002c24 <HAL_GPIO_Init>
}
 800192a:	e02c      	b.n	8001986 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a1b      	ldr	r2, [pc, #108]	@ (80019a0 <HAL_ADC_MspInit+0x144>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d127      	bne.n	8001986 <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	613b      	str	r3, [r7, #16]
 800193a:	4b16      	ldr	r3, [pc, #88]	@ (8001994 <HAL_ADC_MspInit+0x138>)
 800193c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800193e:	4a15      	ldr	r2, [pc, #84]	@ (8001994 <HAL_ADC_MspInit+0x138>)
 8001940:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001944:	6453      	str	r3, [r2, #68]	@ 0x44
 8001946:	4b13      	ldr	r3, [pc, #76]	@ (8001994 <HAL_ADC_MspInit+0x138>)
 8001948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800194a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800194e:	613b      	str	r3, [r7, #16]
 8001950:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	4b0f      	ldr	r3, [pc, #60]	@ (8001994 <HAL_ADC_MspInit+0x138>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195a:	4a0e      	ldr	r2, [pc, #56]	@ (8001994 <HAL_ADC_MspInit+0x138>)
 800195c:	f043 0304 	orr.w	r3, r3, #4
 8001960:	6313      	str	r3, [r2, #48]	@ 0x30
 8001962:	4b0c      	ldr	r3, [pc, #48]	@ (8001994 <HAL_ADC_MspInit+0x138>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001966:	f003 0304 	and.w	r3, r3, #4
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = auxVoltageIN_Pin;
 800196e:	2304      	movs	r3, #4
 8001970:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001972:	2303      	movs	r3, #3
 8001974:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001976:	2300      	movs	r3, #0
 8001978:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(auxVoltageIN_GPIO_Port, &GPIO_InitStruct);
 800197a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800197e:	4619      	mov	r1, r3
 8001980:	4808      	ldr	r0, [pc, #32]	@ (80019a4 <HAL_ADC_MspInit+0x148>)
 8001982:	f001 f94f 	bl	8002c24 <HAL_GPIO_Init>
}
 8001986:	bf00      	nop
 8001988:	3738      	adds	r7, #56	@ 0x38
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40012000 	.word	0x40012000
 8001994:	40023800 	.word	0x40023800
 8001998:	40020000 	.word	0x40020000
 800199c:	40012100 	.word	0x40012100
 80019a0:	40012200 	.word	0x40012200
 80019a4:	40020800 	.word	0x40020800

080019a8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b08a      	sub	sp, #40	@ 0x28
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b0:	f107 0314 	add.w	r3, r7, #20
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	60da      	str	r2, [r3, #12]
 80019be:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a19      	ldr	r2, [pc, #100]	@ (8001a2c <HAL_CAN_MspInit+0x84>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d12c      	bne.n	8001a24 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	613b      	str	r3, [r7, #16]
 80019ce:	4b18      	ldr	r3, [pc, #96]	@ (8001a30 <HAL_CAN_MspInit+0x88>)
 80019d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d2:	4a17      	ldr	r2, [pc, #92]	@ (8001a30 <HAL_CAN_MspInit+0x88>)
 80019d4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80019d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80019da:	4b15      	ldr	r3, [pc, #84]	@ (8001a30 <HAL_CAN_MspInit+0x88>)
 80019dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019e2:	613b      	str	r3, [r7, #16]
 80019e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	4b11      	ldr	r3, [pc, #68]	@ (8001a30 <HAL_CAN_MspInit+0x88>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ee:	4a10      	ldr	r2, [pc, #64]	@ (8001a30 <HAL_CAN_MspInit+0x88>)
 80019f0:	f043 0302 	orr.w	r3, r3, #2
 80019f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001a30 <HAL_CAN_MspInit+0x88>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = canRX_Pin|canTX_Pin;
 8001a02:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a10:	2303      	movs	r3, #3
 8001a12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001a14:	2309      	movs	r3, #9
 8001a16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a18:	f107 0314 	add.w	r3, r7, #20
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4805      	ldr	r0, [pc, #20]	@ (8001a34 <HAL_CAN_MspInit+0x8c>)
 8001a20:	f001 f900 	bl	8002c24 <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001a24:	bf00      	nop
 8001a26:	3728      	adds	r7, #40	@ 0x28
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40006400 	.word	0x40006400
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40020400 	.word	0x40020400

08001a38 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08a      	sub	sp, #40	@ 0x28
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a40:	f107 0314 	add.w	r3, r7, #20
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a17      	ldr	r2, [pc, #92]	@ (8001ab4 <HAL_DAC_MspInit+0x7c>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d127      	bne.n	8001aaa <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	613b      	str	r3, [r7, #16]
 8001a5e:	4b16      	ldr	r3, [pc, #88]	@ (8001ab8 <HAL_DAC_MspInit+0x80>)
 8001a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a62:	4a15      	ldr	r2, [pc, #84]	@ (8001ab8 <HAL_DAC_MspInit+0x80>)
 8001a64:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001a68:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a6a:	4b13      	ldr	r3, [pc, #76]	@ (8001ab8 <HAL_DAC_MspInit+0x80>)
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001a72:	613b      	str	r3, [r7, #16]
 8001a74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab8 <HAL_DAC_MspInit+0x80>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7e:	4a0e      	ldr	r2, [pc, #56]	@ (8001ab8 <HAL_DAC_MspInit+0x80>)
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a86:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab8 <HAL_DAC_MspInit+0x80>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = pedalDAC_Pin|regenDAC_Pin;
 8001a92:	2330      	movs	r3, #48	@ 0x30
 8001a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a96:	2303      	movs	r3, #3
 8001a98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9e:	f107 0314 	add.w	r3, r7, #20
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4805      	ldr	r0, [pc, #20]	@ (8001abc <HAL_DAC_MspInit+0x84>)
 8001aa6:	f001 f8bd 	bl	8002c24 <HAL_GPIO_Init>

  /* USER CODE END DAC_MspInit 1 */

  }

}
 8001aaa:	bf00      	nop
 8001aac:	3728      	adds	r7, #40	@ 0x28
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40007400 	.word	0x40007400
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	40020000 	.word	0x40020000

08001ac0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ac4:	bf00      	nop
 8001ac6:	e7fd      	b.n	8001ac4 <NMI_Handler+0x4>

08001ac8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001acc:	bf00      	nop
 8001ace:	e7fd      	b.n	8001acc <HardFault_Handler+0x4>

08001ad0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ad4:	bf00      	nop
 8001ad6:	e7fd      	b.n	8001ad4 <MemManage_Handler+0x4>

08001ad8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001adc:	bf00      	nop
 8001ade:	e7fd      	b.n	8001adc <BusFault_Handler+0x4>

08001ae0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ae4:	bf00      	nop
 8001ae6:	e7fd      	b.n	8001ae4 <UsageFault_Handler+0x4>

08001ae8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b16:	f000 f8d1 	bl	8001cbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
	...

08001b20 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001b24:	4802      	ldr	r0, [pc, #8]	@ (8001b30 <OTG_FS_IRQHandler+0x10>)
 8001b26:	f001 fb8e 	bl	8003246 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	200017cc 	.word	0x200017cc

08001b34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b3c:	4a14      	ldr	r2, [pc, #80]	@ (8001b90 <_sbrk+0x5c>)
 8001b3e:	4b15      	ldr	r3, [pc, #84]	@ (8001b94 <_sbrk+0x60>)
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b48:	4b13      	ldr	r3, [pc, #76]	@ (8001b98 <_sbrk+0x64>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d102      	bne.n	8001b56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b50:	4b11      	ldr	r3, [pc, #68]	@ (8001b98 <_sbrk+0x64>)
 8001b52:	4a12      	ldr	r2, [pc, #72]	@ (8001b9c <_sbrk+0x68>)
 8001b54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b56:	4b10      	ldr	r3, [pc, #64]	@ (8001b98 <_sbrk+0x64>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d207      	bcs.n	8001b74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b64:	f007 f958 	bl	8008e18 <__errno>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	220c      	movs	r2, #12
 8001b6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b72:	e009      	b.n	8001b88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b74:	4b08      	ldr	r3, [pc, #32]	@ (8001b98 <_sbrk+0x64>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b7a:	4b07      	ldr	r3, [pc, #28]	@ (8001b98 <_sbrk+0x64>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4413      	add	r3, r2
 8001b82:	4a05      	ldr	r2, [pc, #20]	@ (8001b98 <_sbrk+0x64>)
 8001b84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b86:	68fb      	ldr	r3, [r7, #12]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3718      	adds	r7, #24
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20020000 	.word	0x20020000
 8001b94:	00000400 	.word	0x00000400
 8001b98:	200002e4 	.word	0x200002e4
 8001b9c:	20002018 	.word	0x20002018

08001ba0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ba4:	4b06      	ldr	r3, [pc, #24]	@ (8001bc0 <SystemInit+0x20>)
 8001ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001baa:	4a05      	ldr	r2, [pc, #20]	@ (8001bc0 <SystemInit+0x20>)
 8001bac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bb0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bb4:	bf00      	nop
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001bc4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bfc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bc8:	480d      	ldr	r0, [pc, #52]	@ (8001c00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bca:	490e      	ldr	r1, [pc, #56]	@ (8001c04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bcc:	4a0e      	ldr	r2, [pc, #56]	@ (8001c08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bd0:	e002      	b.n	8001bd8 <LoopCopyDataInit>

08001bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bd6:	3304      	adds	r3, #4

08001bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bdc:	d3f9      	bcc.n	8001bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bde:	4a0b      	ldr	r2, [pc, #44]	@ (8001c0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001be0:	4c0b      	ldr	r4, [pc, #44]	@ (8001c10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be4:	e001      	b.n	8001bea <LoopFillZerobss>

08001be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001be8:	3204      	adds	r2, #4

08001bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bec:	d3fb      	bcc.n	8001be6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001bee:	f7ff ffd7 	bl	8001ba0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bf2:	f007 f917 	bl	8008e24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bf6:	f7fe fcbb 	bl	8000570 <main>
  bx  lr    
 8001bfa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001bfc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c04:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8001c08:	08009860 	.word	0x08009860
  ldr r2, =_sbss
 8001c0c:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8001c10:	20002018 	.word	0x20002018

08001c14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c14:	e7fe      	b.n	8001c14 <ADC_IRQHandler>
	...

08001c18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c1c:	4b0e      	ldr	r3, [pc, #56]	@ (8001c58 <HAL_Init+0x40>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a0d      	ldr	r2, [pc, #52]	@ (8001c58 <HAL_Init+0x40>)
 8001c22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c28:	4b0b      	ldr	r3, [pc, #44]	@ (8001c58 <HAL_Init+0x40>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a0a      	ldr	r2, [pc, #40]	@ (8001c58 <HAL_Init+0x40>)
 8001c2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c34:	4b08      	ldr	r3, [pc, #32]	@ (8001c58 <HAL_Init+0x40>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a07      	ldr	r2, [pc, #28]	@ (8001c58 <HAL_Init+0x40>)
 8001c3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c40:	2003      	movs	r0, #3
 8001c42:	f000 feb1 	bl	80029a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c46:	2000      	movs	r0, #0
 8001c48:	f000 f808 	bl	8001c5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c4c:	f7ff fdde 	bl	800180c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40023c00 	.word	0x40023c00

08001c5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c64:	4b12      	ldr	r3, [pc, #72]	@ (8001cb0 <HAL_InitTick+0x54>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	4b12      	ldr	r3, [pc, #72]	@ (8001cb4 <HAL_InitTick+0x58>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f000 fec9 	bl	8002a12 <HAL_SYSTICK_Config>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e00e      	b.n	8001ca8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2b0f      	cmp	r3, #15
 8001c8e:	d80a      	bhi.n	8001ca6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c90:	2200      	movs	r2, #0
 8001c92:	6879      	ldr	r1, [r7, #4]
 8001c94:	f04f 30ff 	mov.w	r0, #4294967295
 8001c98:	f000 fe91 	bl	80029be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c9c:	4a06      	ldr	r2, [pc, #24]	@ (8001cb8 <HAL_InitTick+0x5c>)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	e000      	b.n	8001ca8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20000000 	.word	0x20000000
 8001cb4:	20000008 	.word	0x20000008
 8001cb8:	20000004 	.word	0x20000004

08001cbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cc0:	4b06      	ldr	r3, [pc, #24]	@ (8001cdc <HAL_IncTick+0x20>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4b06      	ldr	r3, [pc, #24]	@ (8001ce0 <HAL_IncTick+0x24>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4413      	add	r3, r2
 8001ccc:	4a04      	ldr	r2, [pc, #16]	@ (8001ce0 <HAL_IncTick+0x24>)
 8001cce:	6013      	str	r3, [r2, #0]
}
 8001cd0:	bf00      	nop
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	20000008 	.word	0x20000008
 8001ce0:	200002e8 	.word	0x200002e8

08001ce4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ce8:	4b03      	ldr	r3, [pc, #12]	@ (8001cf8 <HAL_GetTick+0x14>)
 8001cea:	681b      	ldr	r3, [r3, #0]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	200002e8 	.word	0x200002e8

08001cfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d04:	f7ff ffee 	bl	8001ce4 <HAL_GetTick>
 8001d08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d14:	d005      	beq.n	8001d22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d16:	4b0a      	ldr	r3, [pc, #40]	@ (8001d40 <HAL_Delay+0x44>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	4413      	add	r3, r2
 8001d20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d22:	bf00      	nop
 8001d24:	f7ff ffde 	bl	8001ce4 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	68fa      	ldr	r2, [r7, #12]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d8f7      	bhi.n	8001d24 <HAL_Delay+0x28>
  {
  }
}
 8001d34:	bf00      	nop
 8001d36:	bf00      	nop
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	20000008 	.word	0x20000008

08001d44 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e033      	b.n	8001dc2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d109      	bne.n	8001d76 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f7ff fd7a 	bl	800185c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7a:	f003 0310 	and.w	r3, r3, #16
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d118      	bne.n	8001db4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d86:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001d8a:	f023 0302 	bic.w	r3, r3, #2
 8001d8e:	f043 0202 	orr.w	r2, r3, #2
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 fa1a 	bl	80021d0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da6:	f023 0303 	bic.w	r3, r3, #3
 8001daa:	f043 0201 	orr.w	r2, r3, #1
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	641a      	str	r2, [r3, #64]	@ 0x40
 8001db2:	e001      	b.n	8001db8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
	...

08001dcc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d101      	bne.n	8001de6 <HAL_ADC_Start+0x1a>
 8001de2:	2302      	movs	r3, #2
 8001de4:	e0b2      	b.n	8001f4c <HAL_ADC_Start+0x180>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2201      	movs	r2, #1
 8001dea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d018      	beq.n	8001e2e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	689a      	ldr	r2, [r3, #8]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f042 0201 	orr.w	r2, r2, #1
 8001e0a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e0c:	4b52      	ldr	r3, [pc, #328]	@ (8001f58 <HAL_ADC_Start+0x18c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a52      	ldr	r2, [pc, #328]	@ (8001f5c <HAL_ADC_Start+0x190>)
 8001e12:	fba2 2303 	umull	r2, r3, r2, r3
 8001e16:	0c9a      	lsrs	r2, r3, #18
 8001e18:	4613      	mov	r3, r2
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	4413      	add	r3, r2
 8001e1e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001e20:	e002      	b.n	8001e28 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	3b01      	subs	r3, #1
 8001e26:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1f9      	bne.n	8001e22 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d17a      	bne.n	8001f32 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e40:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001e44:	f023 0301 	bic.w	r3, r3, #1
 8001e48:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d007      	beq.n	8001e6e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e62:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001e66:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e7a:	d106      	bne.n	8001e8a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e80:	f023 0206 	bic.w	r2, r3, #6
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	645a      	str	r2, [r3, #68]	@ 0x44
 8001e88:	e002      	b.n	8001e90 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e98:	4b31      	ldr	r3, [pc, #196]	@ (8001f60 <HAL_ADC_Start+0x194>)
 8001e9a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001ea4:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f003 031f 	and.w	r3, r3, #31
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d12a      	bne.n	8001f08 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a2b      	ldr	r2, [pc, #172]	@ (8001f64 <HAL_ADC_Start+0x198>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d015      	beq.n	8001ee8 <HAL_ADC_Start+0x11c>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a29      	ldr	r2, [pc, #164]	@ (8001f68 <HAL_ADC_Start+0x19c>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d105      	bne.n	8001ed2 <HAL_ADC_Start+0x106>
 8001ec6:	4b26      	ldr	r3, [pc, #152]	@ (8001f60 <HAL_ADC_Start+0x194>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f003 031f 	and.w	r3, r3, #31
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00a      	beq.n	8001ee8 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a25      	ldr	r2, [pc, #148]	@ (8001f6c <HAL_ADC_Start+0x1a0>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d136      	bne.n	8001f4a <HAL_ADC_Start+0x17e>
 8001edc:	4b20      	ldr	r3, [pc, #128]	@ (8001f60 <HAL_ADC_Start+0x194>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f003 0310 	and.w	r3, r3, #16
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d130      	bne.n	8001f4a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d129      	bne.n	8001f4a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001f04:	609a      	str	r2, [r3, #8]
 8001f06:	e020      	b.n	8001f4a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a15      	ldr	r2, [pc, #84]	@ (8001f64 <HAL_ADC_Start+0x198>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d11b      	bne.n	8001f4a <HAL_ADC_Start+0x17e>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d114      	bne.n	8001f4a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	689a      	ldr	r2, [r3, #8]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	e00b      	b.n	8001f4a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f36:	f043 0210 	orr.w	r2, r3, #16
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f42:	f043 0201 	orr.w	r2, r3, #1
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	20000000 	.word	0x20000000
 8001f5c:	431bde83 	.word	0x431bde83
 8001f60:	40012300 	.word	0x40012300
 8001f64:	40012000 	.word	0x40012000
 8001f68:	40012100 	.word	0x40012100
 8001f6c:	40012200 	.word	0x40012200

08001f70 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
	...

08001f8c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f96:	2300      	movs	r3, #0
 8001f98:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d101      	bne.n	8001fa8 <HAL_ADC_ConfigChannel+0x1c>
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	e105      	b.n	80021b4 <HAL_ADC_ConfigChannel+0x228>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2b09      	cmp	r3, #9
 8001fb6:	d925      	bls.n	8002004 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68d9      	ldr	r1, [r3, #12]
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	4413      	add	r3, r2
 8001fcc:	3b1e      	subs	r3, #30
 8001fce:	2207      	movs	r2, #7
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	43da      	mvns	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	400a      	ands	r2, r1
 8001fdc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68d9      	ldr	r1, [r3, #12]
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	4618      	mov	r0, r3
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	4403      	add	r3, r0
 8001ff6:	3b1e      	subs	r3, #30
 8001ff8:	409a      	lsls	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	430a      	orrs	r2, r1
 8002000:	60da      	str	r2, [r3, #12]
 8002002:	e022      	b.n	800204a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6919      	ldr	r1, [r3, #16]
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	b29b      	uxth	r3, r3
 8002010:	461a      	mov	r2, r3
 8002012:	4613      	mov	r3, r2
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	4413      	add	r3, r2
 8002018:	2207      	movs	r2, #7
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	43da      	mvns	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	400a      	ands	r2, r1
 8002026:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6919      	ldr	r1, [r3, #16]
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	689a      	ldr	r2, [r3, #8]
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	b29b      	uxth	r3, r3
 8002038:	4618      	mov	r0, r3
 800203a:	4603      	mov	r3, r0
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	4403      	add	r3, r0
 8002040:	409a      	lsls	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	430a      	orrs	r2, r1
 8002048:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	2b06      	cmp	r3, #6
 8002050:	d824      	bhi.n	800209c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685a      	ldr	r2, [r3, #4]
 800205c:	4613      	mov	r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	4413      	add	r3, r2
 8002062:	3b05      	subs	r3, #5
 8002064:	221f      	movs	r2, #31
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	43da      	mvns	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	400a      	ands	r2, r1
 8002072:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	b29b      	uxth	r3, r3
 8002080:	4618      	mov	r0, r3
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685a      	ldr	r2, [r3, #4]
 8002086:	4613      	mov	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4413      	add	r3, r2
 800208c:	3b05      	subs	r3, #5
 800208e:	fa00 f203 	lsl.w	r2, r0, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	430a      	orrs	r2, r1
 8002098:	635a      	str	r2, [r3, #52]	@ 0x34
 800209a:	e04c      	b.n	8002136 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	2b0c      	cmp	r3, #12
 80020a2:	d824      	bhi.n	80020ee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	4613      	mov	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4413      	add	r3, r2
 80020b4:	3b23      	subs	r3, #35	@ 0x23
 80020b6:	221f      	movs	r2, #31
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43da      	mvns	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	400a      	ands	r2, r1
 80020c4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	4618      	mov	r0, r3
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685a      	ldr	r2, [r3, #4]
 80020d8:	4613      	mov	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4413      	add	r3, r2
 80020de:	3b23      	subs	r3, #35	@ 0x23
 80020e0:	fa00 f203 	lsl.w	r2, r0, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	430a      	orrs	r2, r1
 80020ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80020ec:	e023      	b.n	8002136 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685a      	ldr	r2, [r3, #4]
 80020f8:	4613      	mov	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	3b41      	subs	r3, #65	@ 0x41
 8002100:	221f      	movs	r2, #31
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	43da      	mvns	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	400a      	ands	r2, r1
 800210e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	b29b      	uxth	r3, r3
 800211c:	4618      	mov	r0, r3
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	4613      	mov	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	4413      	add	r3, r2
 8002128:	3b41      	subs	r3, #65	@ 0x41
 800212a:	fa00 f203 	lsl.w	r2, r0, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	430a      	orrs	r2, r1
 8002134:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002136:	4b22      	ldr	r3, [pc, #136]	@ (80021c0 <HAL_ADC_ConfigChannel+0x234>)
 8002138:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a21      	ldr	r2, [pc, #132]	@ (80021c4 <HAL_ADC_ConfigChannel+0x238>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d109      	bne.n	8002158 <HAL_ADC_ConfigChannel+0x1cc>
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2b12      	cmp	r3, #18
 800214a:	d105      	bne.n	8002158 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a19      	ldr	r2, [pc, #100]	@ (80021c4 <HAL_ADC_ConfigChannel+0x238>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d123      	bne.n	80021aa <HAL_ADC_ConfigChannel+0x21e>
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2b10      	cmp	r3, #16
 8002168:	d003      	beq.n	8002172 <HAL_ADC_ConfigChannel+0x1e6>
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2b11      	cmp	r3, #17
 8002170:	d11b      	bne.n	80021aa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2b10      	cmp	r3, #16
 8002184:	d111      	bne.n	80021aa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002186:	4b10      	ldr	r3, [pc, #64]	@ (80021c8 <HAL_ADC_ConfigChannel+0x23c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a10      	ldr	r2, [pc, #64]	@ (80021cc <HAL_ADC_ConfigChannel+0x240>)
 800218c:	fba2 2303 	umull	r2, r3, r2, r3
 8002190:	0c9a      	lsrs	r2, r3, #18
 8002192:	4613      	mov	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4413      	add	r3, r2
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800219c:	e002      	b.n	80021a4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	3b01      	subs	r3, #1
 80021a2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1f9      	bne.n	800219e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3714      	adds	r7, #20
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	40012300 	.word	0x40012300
 80021c4:	40012000 	.word	0x40012000
 80021c8:	20000000 	.word	0x20000000
 80021cc:	431bde83 	.word	0x431bde83

080021d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021d8:	4b79      	ldr	r3, [pc, #484]	@ (80023c0 <ADC_Init+0x1f0>)
 80021da:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	431a      	orrs	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002204:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	6859      	ldr	r1, [r3, #4]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	021a      	lsls	r2, r3, #8
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	430a      	orrs	r2, r1
 8002218:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	685a      	ldr	r2, [r3, #4]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002228:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	6859      	ldr	r1, [r3, #4]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	430a      	orrs	r2, r1
 800223a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	689a      	ldr	r2, [r3, #8]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800224a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	6899      	ldr	r1, [r3, #8]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68da      	ldr	r2, [r3, #12]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	430a      	orrs	r2, r1
 800225c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002262:	4a58      	ldr	r2, [pc, #352]	@ (80023c4 <ADC_Init+0x1f4>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d022      	beq.n	80022ae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	689a      	ldr	r2, [r3, #8]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002276:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6899      	ldr	r1, [r3, #8]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	430a      	orrs	r2, r1
 8002288:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002298:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6899      	ldr	r1, [r3, #8]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	430a      	orrs	r2, r1
 80022aa:	609a      	str	r2, [r3, #8]
 80022ac:	e00f      	b.n	80022ce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	689a      	ldr	r2, [r3, #8]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80022bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80022cc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f022 0202 	bic.w	r2, r2, #2
 80022dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6899      	ldr	r1, [r3, #8]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	7e1b      	ldrb	r3, [r3, #24]
 80022e8:	005a      	lsls	r2, r3, #1
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	430a      	orrs	r2, r1
 80022f0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d01b      	beq.n	8002334 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	685a      	ldr	r2, [r3, #4]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800230a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800231a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6859      	ldr	r1, [r3, #4]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002326:	3b01      	subs	r3, #1
 8002328:	035a      	lsls	r2, r3, #13
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	430a      	orrs	r2, r1
 8002330:	605a      	str	r2, [r3, #4]
 8002332:	e007      	b.n	8002344 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002342:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002352:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	3b01      	subs	r3, #1
 8002360:	051a      	lsls	r2, r3, #20
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	430a      	orrs	r2, r1
 8002368:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002378:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6899      	ldr	r1, [r3, #8]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002386:	025a      	lsls	r2, r3, #9
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	430a      	orrs	r2, r1
 800238e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	689a      	ldr	r2, [r3, #8]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800239e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6899      	ldr	r1, [r3, #8]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	029a      	lsls	r2, r3, #10
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	430a      	orrs	r2, r1
 80023b2:	609a      	str	r2, [r3, #8]
}
 80023b4:	bf00      	nop
 80023b6:	3714      	adds	r7, #20
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	40012300 	.word	0x40012300
 80023c4:	0f000001 	.word	0x0f000001

080023c8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e0ed      	b.n	80025b6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d102      	bne.n	80023ec <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f7ff fade 	bl	80019a8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f042 0201 	orr.w	r2, r2, #1
 80023fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023fc:	f7ff fc72 	bl	8001ce4 <HAL_GetTick>
 8002400:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002402:	e012      	b.n	800242a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002404:	f7ff fc6e 	bl	8001ce4 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b0a      	cmp	r3, #10
 8002410:	d90b      	bls.n	800242a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002416:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2205      	movs	r2, #5
 8002422:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e0c5      	b.n	80025b6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	2b00      	cmp	r3, #0
 8002436:	d0e5      	beq.n	8002404 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f022 0202 	bic.w	r2, r2, #2
 8002446:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002448:	f7ff fc4c 	bl	8001ce4 <HAL_GetTick>
 800244c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800244e:	e012      	b.n	8002476 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002450:	f7ff fc48 	bl	8001ce4 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b0a      	cmp	r3, #10
 800245c:	d90b      	bls.n	8002476 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002462:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2205      	movs	r2, #5
 800246e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e09f      	b.n	80025b6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1e5      	bne.n	8002450 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	7e1b      	ldrb	r3, [r3, #24]
 8002488:	2b01      	cmp	r3, #1
 800248a:	d108      	bne.n	800249e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	e007      	b.n	80024ae <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80024ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	7e5b      	ldrb	r3, [r3, #25]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d108      	bne.n	80024c8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80024c4:	601a      	str	r2, [r3, #0]
 80024c6:	e007      	b.n	80024d8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80024d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	7e9b      	ldrb	r3, [r3, #26]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d108      	bne.n	80024f2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f042 0220 	orr.w	r2, r2, #32
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	e007      	b.n	8002502 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 0220 	bic.w	r2, r2, #32
 8002500:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	7edb      	ldrb	r3, [r3, #27]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d108      	bne.n	800251c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 0210 	bic.w	r2, r2, #16
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	e007      	b.n	800252c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f042 0210 	orr.w	r2, r2, #16
 800252a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	7f1b      	ldrb	r3, [r3, #28]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d108      	bne.n	8002546 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f042 0208 	orr.w	r2, r2, #8
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	e007      	b.n	8002556 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 0208 	bic.w	r2, r2, #8
 8002554:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	7f5b      	ldrb	r3, [r3, #29]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d108      	bne.n	8002570 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f042 0204 	orr.w	r2, r2, #4
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	e007      	b.n	8002580 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f022 0204 	bic.w	r2, r2, #4
 800257e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689a      	ldr	r2, [r3, #8]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	431a      	orrs	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	431a      	orrs	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	695b      	ldr	r3, [r3, #20]
 8002594:	ea42 0103 	orr.w	r1, r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	1e5a      	subs	r2, r3, #1
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	430a      	orrs	r2, r1
 80025a4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
	...

080025c0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b087      	sub	sp, #28
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025d6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80025d8:	7cfb      	ldrb	r3, [r7, #19]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d003      	beq.n	80025e6 <HAL_CAN_ConfigFilter+0x26>
 80025de:	7cfb      	ldrb	r3, [r7, #19]
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	f040 80be 	bne.w	8002762 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80025e6:	4b65      	ldr	r3, [pc, #404]	@ (800277c <HAL_CAN_ConfigFilter+0x1bc>)
 80025e8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80025f0:	f043 0201 	orr.w	r2, r3, #1
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002600:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002614:	021b      	lsls	r3, r3, #8
 8002616:	431a      	orrs	r2, r3
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	f003 031f 	and.w	r3, r3, #31
 8002626:	2201      	movs	r2, #1
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	43db      	mvns	r3, r3
 8002638:	401a      	ands	r2, r3
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	69db      	ldr	r3, [r3, #28]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d123      	bne.n	8002690 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	43db      	mvns	r3, r3
 8002652:	401a      	ands	r2, r3
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800266a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	3248      	adds	r2, #72	@ 0x48
 8002670:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002684:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002686:	6979      	ldr	r1, [r7, #20]
 8002688:	3348      	adds	r3, #72	@ 0x48
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	440b      	add	r3, r1
 800268e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	69db      	ldr	r3, [r3, #28]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d122      	bne.n	80026de <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	431a      	orrs	r2, r3
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80026b8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	3248      	adds	r2, #72	@ 0x48
 80026be:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026d2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026d4:	6979      	ldr	r1, [r7, #20]
 80026d6:	3348      	adds	r3, #72	@ 0x48
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	440b      	add	r3, r1
 80026dc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d109      	bne.n	80026fa <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	43db      	mvns	r3, r3
 80026f0:	401a      	ands	r2, r3
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80026f8:	e007      	b.n	800270a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	431a      	orrs	r2, r3
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d109      	bne.n	8002726 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	43db      	mvns	r3, r3
 800271c:	401a      	ands	r2, r3
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002724:	e007      	b.n	8002736 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	431a      	orrs	r2, r3
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d107      	bne.n	800274e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	431a      	orrs	r2, r3
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002754:	f023 0201 	bic.w	r2, r3, #1
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800275e:	2300      	movs	r3, #0
 8002760:	e006      	b.n	8002770 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002766:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
  }
}
 8002770:	4618      	mov	r0, r3
 8002772:	371c      	adds	r7, #28
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	40006400 	.word	0x40006400

08002780 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2b01      	cmp	r3, #1
 8002792:	d12e      	bne.n	80027f2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2202      	movs	r2, #2
 8002798:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f022 0201 	bic.w	r2, r2, #1
 80027aa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80027ac:	f7ff fa9a 	bl	8001ce4 <HAL_GetTick>
 80027b0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80027b2:	e012      	b.n	80027da <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80027b4:	f7ff fa96 	bl	8001ce4 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b0a      	cmp	r3, #10
 80027c0:	d90b      	bls.n	80027da <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2205      	movs	r2, #5
 80027d2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e012      	b.n	8002800 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1e5      	bne.n	80027b4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80027ee:	2300      	movs	r3, #0
 80027f0:	e006      	b.n	8002800 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f6:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
  }
}
 8002800:	4618      	mov	r0, r3
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002818:	4b0c      	ldr	r3, [pc, #48]	@ (800284c <__NVIC_SetPriorityGrouping+0x44>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800281e:	68ba      	ldr	r2, [r7, #8]
 8002820:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002824:	4013      	ands	r3, r2
 8002826:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002830:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002834:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002838:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800283a:	4a04      	ldr	r2, [pc, #16]	@ (800284c <__NVIC_SetPriorityGrouping+0x44>)
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	60d3      	str	r3, [r2, #12]
}
 8002840:	bf00      	nop
 8002842:	3714      	adds	r7, #20
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	e000ed00 	.word	0xe000ed00

08002850 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002854:	4b04      	ldr	r3, [pc, #16]	@ (8002868 <__NVIC_GetPriorityGrouping+0x18>)
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	0a1b      	lsrs	r3, r3, #8
 800285a:	f003 0307 	and.w	r3, r3, #7
}
 800285e:	4618      	mov	r0, r3
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	e000ed00 	.word	0xe000ed00

0800286c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	4603      	mov	r3, r0
 8002874:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287a:	2b00      	cmp	r3, #0
 800287c:	db0b      	blt.n	8002896 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800287e:	79fb      	ldrb	r3, [r7, #7]
 8002880:	f003 021f 	and.w	r2, r3, #31
 8002884:	4907      	ldr	r1, [pc, #28]	@ (80028a4 <__NVIC_EnableIRQ+0x38>)
 8002886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288a:	095b      	lsrs	r3, r3, #5
 800288c:	2001      	movs	r0, #1
 800288e:	fa00 f202 	lsl.w	r2, r0, r2
 8002892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	e000e100 	.word	0xe000e100

080028a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4603      	mov	r3, r0
 80028b0:	6039      	str	r1, [r7, #0]
 80028b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	db0a      	blt.n	80028d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	b2da      	uxtb	r2, r3
 80028c0:	490c      	ldr	r1, [pc, #48]	@ (80028f4 <__NVIC_SetPriority+0x4c>)
 80028c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c6:	0112      	lsls	r2, r2, #4
 80028c8:	b2d2      	uxtb	r2, r2
 80028ca:	440b      	add	r3, r1
 80028cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028d0:	e00a      	b.n	80028e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	4908      	ldr	r1, [pc, #32]	@ (80028f8 <__NVIC_SetPriority+0x50>)
 80028d8:	79fb      	ldrb	r3, [r7, #7]
 80028da:	f003 030f 	and.w	r3, r3, #15
 80028de:	3b04      	subs	r3, #4
 80028e0:	0112      	lsls	r2, r2, #4
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	440b      	add	r3, r1
 80028e6:	761a      	strb	r2, [r3, #24]
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	e000e100 	.word	0xe000e100
 80028f8:	e000ed00 	.word	0xe000ed00

080028fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b089      	sub	sp, #36	@ 0x24
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f003 0307 	and.w	r3, r3, #7
 800290e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	f1c3 0307 	rsb	r3, r3, #7
 8002916:	2b04      	cmp	r3, #4
 8002918:	bf28      	it	cs
 800291a:	2304      	movcs	r3, #4
 800291c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	3304      	adds	r3, #4
 8002922:	2b06      	cmp	r3, #6
 8002924:	d902      	bls.n	800292c <NVIC_EncodePriority+0x30>
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	3b03      	subs	r3, #3
 800292a:	e000      	b.n	800292e <NVIC_EncodePriority+0x32>
 800292c:	2300      	movs	r3, #0
 800292e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002930:	f04f 32ff 	mov.w	r2, #4294967295
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	43da      	mvns	r2, r3
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	401a      	ands	r2, r3
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002944:	f04f 31ff 	mov.w	r1, #4294967295
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	fa01 f303 	lsl.w	r3, r1, r3
 800294e:	43d9      	mvns	r1, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002954:	4313      	orrs	r3, r2
         );
}
 8002956:	4618      	mov	r0, r3
 8002958:	3724      	adds	r7, #36	@ 0x24
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
	...

08002964 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	3b01      	subs	r3, #1
 8002970:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002974:	d301      	bcc.n	800297a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002976:	2301      	movs	r3, #1
 8002978:	e00f      	b.n	800299a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800297a:	4a0a      	ldr	r2, [pc, #40]	@ (80029a4 <SysTick_Config+0x40>)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3b01      	subs	r3, #1
 8002980:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002982:	210f      	movs	r1, #15
 8002984:	f04f 30ff 	mov.w	r0, #4294967295
 8002988:	f7ff ff8e 	bl	80028a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800298c:	4b05      	ldr	r3, [pc, #20]	@ (80029a4 <SysTick_Config+0x40>)
 800298e:	2200      	movs	r2, #0
 8002990:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002992:	4b04      	ldr	r3, [pc, #16]	@ (80029a4 <SysTick_Config+0x40>)
 8002994:	2207      	movs	r2, #7
 8002996:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	e000e010 	.word	0xe000e010

080029a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f7ff ff29 	bl	8002808 <__NVIC_SetPriorityGrouping>
}
 80029b6:	bf00      	nop
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029be:	b580      	push	{r7, lr}
 80029c0:	b086      	sub	sp, #24
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	4603      	mov	r3, r0
 80029c6:	60b9      	str	r1, [r7, #8]
 80029c8:	607a      	str	r2, [r7, #4]
 80029ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029cc:	2300      	movs	r3, #0
 80029ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029d0:	f7ff ff3e 	bl	8002850 <__NVIC_GetPriorityGrouping>
 80029d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	68b9      	ldr	r1, [r7, #8]
 80029da:	6978      	ldr	r0, [r7, #20]
 80029dc:	f7ff ff8e 	bl	80028fc <NVIC_EncodePriority>
 80029e0:	4602      	mov	r2, r0
 80029e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029e6:	4611      	mov	r1, r2
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7ff ff5d 	bl	80028a8 <__NVIC_SetPriority>
}
 80029ee:	bf00      	nop
 80029f0:	3718      	adds	r7, #24
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b082      	sub	sp, #8
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	4603      	mov	r3, r0
 80029fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff ff31 	bl	800286c <__NVIC_EnableIRQ>
}
 8002a0a:	bf00      	nop
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b082      	sub	sp, #8
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f7ff ffa2 	bl	8002964 <SysTick_Config>
 8002a20:	4603      	mov	r3, r0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b082      	sub	sp, #8
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d101      	bne.n	8002a3c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e014      	b.n	8002a66 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	791b      	ldrb	r3, [r3, #4]
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d105      	bne.n	8002a52 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f7fe fff3 	bl	8001a38 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2202      	movs	r2, #2
 8002a56:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b083      	sub	sp, #12
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
 8002a76:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e046      	b.n	8002b10 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	795b      	ldrb	r3, [r3, #5]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d101      	bne.n	8002a8e <HAL_DAC_Start+0x20>
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	e040      	b.n	8002b10 <HAL_DAC_Start+0xa2>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2201      	movs	r2, #1
 8002a92:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2202      	movs	r2, #2
 8002a98:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6819      	ldr	r1, [r3, #0]
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	f003 0310 	and.w	r3, r3, #16
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	409a      	lsls	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d10f      	bne.n	8002ad8 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8002ac2:	2b3c      	cmp	r3, #60	@ 0x3c
 8002ac4:	d11d      	bne.n	8002b02 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	685a      	ldr	r2, [r3, #4]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f042 0201 	orr.w	r2, r2, #1
 8002ad4:	605a      	str	r2, [r3, #4]
 8002ad6:	e014      	b.n	8002b02 <HAL_DAC_Start+0x94>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	f003 0310 	and.w	r3, r3, #16
 8002ae8:	213c      	movs	r1, #60	@ 0x3c
 8002aea:	fa01 f303 	lsl.w	r3, r1, r3
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d107      	bne.n	8002b02 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	685a      	ldr	r2, [r3, #4]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f042 0202 	orr.w	r2, r2, #2
 8002b00:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b087      	sub	sp, #28
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
 8002b28:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d101      	bne.n	8002b38 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e015      	b.n	8002b64 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d105      	bne.n	8002b50 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002b44:	697a      	ldr	r2, [r7, #20]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4413      	add	r3, r2
 8002b4a:	3308      	adds	r3, #8
 8002b4c:	617b      	str	r3, [r7, #20]
 8002b4e:	e004      	b.n	8002b5a <HAL_DAC_SetValue+0x3e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002b50:	697a      	ldr	r2, [r7, #20]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4413      	add	r3, r2
 8002b56:	3314      	adds	r3, #20
 8002b58:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	371c      	adds	r7, #28
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b089      	sub	sp, #36	@ 0x24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d002      	beq.n	8002b8c <HAL_DAC_ConfigChannel+0x1c>
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d101      	bne.n	8002b90 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e042      	b.n	8002c16 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	795b      	ldrb	r3, [r3, #5]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d101      	bne.n	8002b9c <HAL_DAC_ConfigChannel+0x2c>
 8002b98:	2302      	movs	r3, #2
 8002b9a:	e03c      	b.n	8002c16 <HAL_DAC_ConfigChannel+0xa6>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2202      	movs	r2, #2
 8002ba6:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f003 0310 	and.w	r3, r3, #16
 8002bb6:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8002bbe:	43db      	mvns	r3, r3
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f003 0310 	and.w	r3, r3, #16
 8002bd8:	697a      	ldr	r2, [r7, #20]
 8002bda:	fa02 f303 	lsl.w	r3, r2, r3
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6819      	ldr	r1, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f003 0310 	and.w	r3, r3, #16
 8002bf8:	22c0      	movs	r2, #192	@ 0xc0
 8002bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfe:	43da      	mvns	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	400a      	ands	r2, r1
 8002c06:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002c14:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3724      	adds	r7, #36	@ 0x24
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
	...

08002c24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b089      	sub	sp, #36	@ 0x24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c32:	2300      	movs	r3, #0
 8002c34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c36:	2300      	movs	r3, #0
 8002c38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	61fb      	str	r3, [r7, #28]
 8002c3e:	e16b      	b.n	8002f18 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c40:	2201      	movs	r2, #1
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	4013      	ands	r3, r2
 8002c52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	f040 815a 	bne.w	8002f12 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f003 0303 	and.w	r3, r3, #3
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d005      	beq.n	8002c76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d130      	bne.n	8002cd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	2203      	movs	r2, #3
 8002c82:	fa02 f303 	lsl.w	r3, r2, r3
 8002c86:	43db      	mvns	r3, r3
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	68da      	ldr	r2, [r3, #12]
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cac:	2201      	movs	r2, #1
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	091b      	lsrs	r3, r3, #4
 8002cc2:	f003 0201 	and.w	r2, r3, #1
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f003 0303 	and.w	r3, r3, #3
 8002ce0:	2b03      	cmp	r3, #3
 8002ce2:	d017      	beq.n	8002d14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	2203      	movs	r2, #3
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f003 0303 	and.w	r3, r3, #3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d123      	bne.n	8002d68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	08da      	lsrs	r2, r3, #3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	3208      	adds	r2, #8
 8002d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	f003 0307 	and.w	r3, r3, #7
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	220f      	movs	r2, #15
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	4013      	ands	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	691a      	ldr	r2, [r3, #16]
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	f003 0307 	and.w	r3, r3, #7
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	08da      	lsrs	r2, r3, #3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	3208      	adds	r2, #8
 8002d62:	69b9      	ldr	r1, [r7, #24]
 8002d64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	2203      	movs	r2, #3
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f003 0203 	and.w	r2, r3, #3
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f000 80b4 	beq.w	8002f12 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002daa:	2300      	movs	r3, #0
 8002dac:	60fb      	str	r3, [r7, #12]
 8002dae:	4b60      	ldr	r3, [pc, #384]	@ (8002f30 <HAL_GPIO_Init+0x30c>)
 8002db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002db2:	4a5f      	ldr	r2, [pc, #380]	@ (8002f30 <HAL_GPIO_Init+0x30c>)
 8002db4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002db8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dba:	4b5d      	ldr	r3, [pc, #372]	@ (8002f30 <HAL_GPIO_Init+0x30c>)
 8002dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dc6:	4a5b      	ldr	r2, [pc, #364]	@ (8002f34 <HAL_GPIO_Init+0x310>)
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	089b      	lsrs	r3, r3, #2
 8002dcc:	3302      	adds	r3, #2
 8002dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	f003 0303 	and.w	r3, r3, #3
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	220f      	movs	r2, #15
 8002dde:	fa02 f303 	lsl.w	r3, r2, r3
 8002de2:	43db      	mvns	r3, r3
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	4013      	ands	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a52      	ldr	r2, [pc, #328]	@ (8002f38 <HAL_GPIO_Init+0x314>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d02b      	beq.n	8002e4a <HAL_GPIO_Init+0x226>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a51      	ldr	r2, [pc, #324]	@ (8002f3c <HAL_GPIO_Init+0x318>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d025      	beq.n	8002e46 <HAL_GPIO_Init+0x222>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a50      	ldr	r2, [pc, #320]	@ (8002f40 <HAL_GPIO_Init+0x31c>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d01f      	beq.n	8002e42 <HAL_GPIO_Init+0x21e>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a4f      	ldr	r2, [pc, #316]	@ (8002f44 <HAL_GPIO_Init+0x320>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d019      	beq.n	8002e3e <HAL_GPIO_Init+0x21a>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a4e      	ldr	r2, [pc, #312]	@ (8002f48 <HAL_GPIO_Init+0x324>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d013      	beq.n	8002e3a <HAL_GPIO_Init+0x216>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a4d      	ldr	r2, [pc, #308]	@ (8002f4c <HAL_GPIO_Init+0x328>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d00d      	beq.n	8002e36 <HAL_GPIO_Init+0x212>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a4c      	ldr	r2, [pc, #304]	@ (8002f50 <HAL_GPIO_Init+0x32c>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d007      	beq.n	8002e32 <HAL_GPIO_Init+0x20e>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a4b      	ldr	r2, [pc, #300]	@ (8002f54 <HAL_GPIO_Init+0x330>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d101      	bne.n	8002e2e <HAL_GPIO_Init+0x20a>
 8002e2a:	2307      	movs	r3, #7
 8002e2c:	e00e      	b.n	8002e4c <HAL_GPIO_Init+0x228>
 8002e2e:	2308      	movs	r3, #8
 8002e30:	e00c      	b.n	8002e4c <HAL_GPIO_Init+0x228>
 8002e32:	2306      	movs	r3, #6
 8002e34:	e00a      	b.n	8002e4c <HAL_GPIO_Init+0x228>
 8002e36:	2305      	movs	r3, #5
 8002e38:	e008      	b.n	8002e4c <HAL_GPIO_Init+0x228>
 8002e3a:	2304      	movs	r3, #4
 8002e3c:	e006      	b.n	8002e4c <HAL_GPIO_Init+0x228>
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e004      	b.n	8002e4c <HAL_GPIO_Init+0x228>
 8002e42:	2302      	movs	r3, #2
 8002e44:	e002      	b.n	8002e4c <HAL_GPIO_Init+0x228>
 8002e46:	2301      	movs	r3, #1
 8002e48:	e000      	b.n	8002e4c <HAL_GPIO_Init+0x228>
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	69fa      	ldr	r2, [r7, #28]
 8002e4e:	f002 0203 	and.w	r2, r2, #3
 8002e52:	0092      	lsls	r2, r2, #2
 8002e54:	4093      	lsls	r3, r2
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e5c:	4935      	ldr	r1, [pc, #212]	@ (8002f34 <HAL_GPIO_Init+0x310>)
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	089b      	lsrs	r3, r3, #2
 8002e62:	3302      	adds	r3, #2
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e6a:	4b3b      	ldr	r3, [pc, #236]	@ (8002f58 <HAL_GPIO_Init+0x334>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	43db      	mvns	r3, r3
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	4013      	ands	r3, r2
 8002e78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d003      	beq.n	8002e8e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e8e:	4a32      	ldr	r2, [pc, #200]	@ (8002f58 <HAL_GPIO_Init+0x334>)
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e94:	4b30      	ldr	r3, [pc, #192]	@ (8002f58 <HAL_GPIO_Init+0x334>)
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	43db      	mvns	r3, r3
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d003      	beq.n	8002eb8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002eb8:	4a27      	ldr	r2, [pc, #156]	@ (8002f58 <HAL_GPIO_Init+0x334>)
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ebe:	4b26      	ldr	r3, [pc, #152]	@ (8002f58 <HAL_GPIO_Init+0x334>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d003      	beq.n	8002ee2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ee2:	4a1d      	ldr	r2, [pc, #116]	@ (8002f58 <HAL_GPIO_Init+0x334>)
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ee8:	4b1b      	ldr	r3, [pc, #108]	@ (8002f58 <HAL_GPIO_Init+0x334>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	43db      	mvns	r3, r3
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d003      	beq.n	8002f0c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f0c:	4a12      	ldr	r2, [pc, #72]	@ (8002f58 <HAL_GPIO_Init+0x334>)
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	3301      	adds	r3, #1
 8002f16:	61fb      	str	r3, [r7, #28]
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	2b0f      	cmp	r3, #15
 8002f1c:	f67f ae90 	bls.w	8002c40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f20:	bf00      	nop
 8002f22:	bf00      	nop
 8002f24:	3724      	adds	r7, #36	@ 0x24
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	40023800 	.word	0x40023800
 8002f34:	40013800 	.word	0x40013800
 8002f38:	40020000 	.word	0x40020000
 8002f3c:	40020400 	.word	0x40020400
 8002f40:	40020800 	.word	0x40020800
 8002f44:	40020c00 	.word	0x40020c00
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	40021400 	.word	0x40021400
 8002f50:	40021800 	.word	0x40021800
 8002f54:	40021c00 	.word	0x40021c00
 8002f58:	40013c00 	.word	0x40013c00

08002f5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	460b      	mov	r3, r1
 8002f66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	691a      	ldr	r2, [r3, #16]
 8002f6c:	887b      	ldrh	r3, [r7, #2]
 8002f6e:	4013      	ands	r3, r2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d002      	beq.n	8002f7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f74:	2301      	movs	r3, #1
 8002f76:	73fb      	strb	r3, [r7, #15]
 8002f78:	e001      	b.n	8002f7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3714      	adds	r7, #20
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	460b      	mov	r3, r1
 8002f96:	807b      	strh	r3, [r7, #2]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f9c:	787b      	ldrb	r3, [r7, #1]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fa2:	887a      	ldrh	r2, [r7, #2]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fa8:	e003      	b.n	8002fb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002faa:	887b      	ldrh	r3, [r7, #2]
 8002fac:	041a      	lsls	r2, r3, #16
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	619a      	str	r2, [r3, #24]
}
 8002fb2:	bf00      	nop
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr

08002fbe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b086      	sub	sp, #24
 8002fc2:	af02      	add	r7, sp, #8
 8002fc4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d101      	bne.n	8002fd0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e101      	b.n	80031d4 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d106      	bne.n	8002ff0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f005 fbca 	bl	8008784 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2203      	movs	r2, #3
 8002ff4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ffe:	d102      	bne.n	8003006 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4618      	mov	r0, r3
 800300c:	f001 ffb1 	bl	8004f72 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6818      	ldr	r0, [r3, #0]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	7c1a      	ldrb	r2, [r3, #16]
 8003018:	f88d 2000 	strb.w	r2, [sp]
 800301c:	3304      	adds	r3, #4
 800301e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003020:	f001 fe90 	bl	8004d44 <USB_CoreInit>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d005      	beq.n	8003036 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2202      	movs	r2, #2
 800302e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e0ce      	b.n	80031d4 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2100      	movs	r1, #0
 800303c:	4618      	mov	r0, r3
 800303e:	f001 ffa9 	bl	8004f94 <USB_SetCurrentMode>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d005      	beq.n	8003054 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2202      	movs	r2, #2
 800304c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e0bf      	b.n	80031d4 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003054:	2300      	movs	r3, #0
 8003056:	73fb      	strb	r3, [r7, #15]
 8003058:	e04a      	b.n	80030f0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800305a:	7bfa      	ldrb	r2, [r7, #15]
 800305c:	6879      	ldr	r1, [r7, #4]
 800305e:	4613      	mov	r3, r2
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	4413      	add	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	440b      	add	r3, r1
 8003068:	3315      	adds	r3, #21
 800306a:	2201      	movs	r2, #1
 800306c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800306e:	7bfa      	ldrb	r2, [r7, #15]
 8003070:	6879      	ldr	r1, [r7, #4]
 8003072:	4613      	mov	r3, r2
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	4413      	add	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	440b      	add	r3, r1
 800307c:	3314      	adds	r3, #20
 800307e:	7bfa      	ldrb	r2, [r7, #15]
 8003080:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003082:	7bfa      	ldrb	r2, [r7, #15]
 8003084:	7bfb      	ldrb	r3, [r7, #15]
 8003086:	b298      	uxth	r0, r3
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	4613      	mov	r3, r2
 800308c:	00db      	lsls	r3, r3, #3
 800308e:	4413      	add	r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	440b      	add	r3, r1
 8003094:	332e      	adds	r3, #46	@ 0x2e
 8003096:	4602      	mov	r2, r0
 8003098:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800309a:	7bfa      	ldrb	r2, [r7, #15]
 800309c:	6879      	ldr	r1, [r7, #4]
 800309e:	4613      	mov	r3, r2
 80030a0:	00db      	lsls	r3, r3, #3
 80030a2:	4413      	add	r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	440b      	add	r3, r1
 80030a8:	3318      	adds	r3, #24
 80030aa:	2200      	movs	r2, #0
 80030ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80030ae:	7bfa      	ldrb	r2, [r7, #15]
 80030b0:	6879      	ldr	r1, [r7, #4]
 80030b2:	4613      	mov	r3, r2
 80030b4:	00db      	lsls	r3, r3, #3
 80030b6:	4413      	add	r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	440b      	add	r3, r1
 80030bc:	331c      	adds	r3, #28
 80030be:	2200      	movs	r2, #0
 80030c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80030c2:	7bfa      	ldrb	r2, [r7, #15]
 80030c4:	6879      	ldr	r1, [r7, #4]
 80030c6:	4613      	mov	r3, r2
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	4413      	add	r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	440b      	add	r3, r1
 80030d0:	3320      	adds	r3, #32
 80030d2:	2200      	movs	r2, #0
 80030d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80030d6:	7bfa      	ldrb	r2, [r7, #15]
 80030d8:	6879      	ldr	r1, [r7, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	4413      	add	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	440b      	add	r3, r1
 80030e4:	3324      	adds	r3, #36	@ 0x24
 80030e6:	2200      	movs	r2, #0
 80030e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030ea:	7bfb      	ldrb	r3, [r7, #15]
 80030ec:	3301      	adds	r3, #1
 80030ee:	73fb      	strb	r3, [r7, #15]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	791b      	ldrb	r3, [r3, #4]
 80030f4:	7bfa      	ldrb	r2, [r7, #15]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d3af      	bcc.n	800305a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030fa:	2300      	movs	r3, #0
 80030fc:	73fb      	strb	r3, [r7, #15]
 80030fe:	e044      	b.n	800318a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003100:	7bfa      	ldrb	r2, [r7, #15]
 8003102:	6879      	ldr	r1, [r7, #4]
 8003104:	4613      	mov	r3, r2
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	4413      	add	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	440b      	add	r3, r1
 800310e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003112:	2200      	movs	r2, #0
 8003114:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003116:	7bfa      	ldrb	r2, [r7, #15]
 8003118:	6879      	ldr	r1, [r7, #4]
 800311a:	4613      	mov	r3, r2
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	4413      	add	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	440b      	add	r3, r1
 8003124:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003128:	7bfa      	ldrb	r2, [r7, #15]
 800312a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800312c:	7bfa      	ldrb	r2, [r7, #15]
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	4613      	mov	r3, r2
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	4413      	add	r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	440b      	add	r3, r1
 800313a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800313e:	2200      	movs	r2, #0
 8003140:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003142:	7bfa      	ldrb	r2, [r7, #15]
 8003144:	6879      	ldr	r1, [r7, #4]
 8003146:	4613      	mov	r3, r2
 8003148:	00db      	lsls	r3, r3, #3
 800314a:	4413      	add	r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	440b      	add	r3, r1
 8003150:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003158:	7bfa      	ldrb	r2, [r7, #15]
 800315a:	6879      	ldr	r1, [r7, #4]
 800315c:	4613      	mov	r3, r2
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	4413      	add	r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800316a:	2200      	movs	r2, #0
 800316c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800316e:	7bfa      	ldrb	r2, [r7, #15]
 8003170:	6879      	ldr	r1, [r7, #4]
 8003172:	4613      	mov	r3, r2
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	4413      	add	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	440b      	add	r3, r1
 800317c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003180:	2200      	movs	r2, #0
 8003182:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003184:	7bfb      	ldrb	r3, [r7, #15]
 8003186:	3301      	adds	r3, #1
 8003188:	73fb      	strb	r3, [r7, #15]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	791b      	ldrb	r3, [r3, #4]
 800318e:	7bfa      	ldrb	r2, [r7, #15]
 8003190:	429a      	cmp	r2, r3
 8003192:	d3b5      	bcc.n	8003100 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6818      	ldr	r0, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	7c1a      	ldrb	r2, [r3, #16]
 800319c:	f88d 2000 	strb.w	r2, [sp]
 80031a0:	3304      	adds	r3, #4
 80031a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031a4:	f001 ff42 	bl	800502c <USB_DevInit>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d005      	beq.n	80031ba <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2202      	movs	r2, #2
 80031b2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e00c      	b.n	80031d4 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4618      	mov	r0, r3
 80031ce:	f002 ff8c 	bl	80060ea <USB_DevDisconnect>

  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3710      	adds	r7, #16
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d101      	bne.n	80031f8 <HAL_PCD_Start+0x1c>
 80031f4:	2302      	movs	r3, #2
 80031f6:	e022      	b.n	800323e <HAL_PCD_Start+0x62>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003208:	2b00      	cmp	r3, #0
 800320a:	d009      	beq.n	8003220 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003210:	2b01      	cmp	r3, #1
 8003212:	d105      	bne.n	8003220 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003218:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4618      	mov	r0, r3
 8003226:	f001 fe93 	bl	8004f50 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4618      	mov	r0, r3
 8003230:	f002 ff3a 	bl	80060a8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003246:	b590      	push	{r4, r7, lr}
 8003248:	b08d      	sub	sp, #52	@ 0x34
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003254:	6a3b      	ldr	r3, [r7, #32]
 8003256:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4618      	mov	r0, r3
 800325e:	f002 fff8 	bl	8006252 <USB_GetMode>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	f040 848c 	bne.w	8003b82 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4618      	mov	r0, r3
 8003270:	f002 ff5c 	bl	800612c <USB_ReadInterrupts>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	f000 8482 	beq.w	8003b80 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	0a1b      	lsrs	r3, r3, #8
 8003286:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4618      	mov	r0, r3
 8003296:	f002 ff49 	bl	800612c <USB_ReadInterrupts>
 800329a:	4603      	mov	r3, r0
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d107      	bne.n	80032b4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	695a      	ldr	r2, [r3, #20]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f002 0202 	and.w	r2, r2, #2
 80032b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f002 ff37 	bl	800612c <USB_ReadInterrupts>
 80032be:	4603      	mov	r3, r0
 80032c0:	f003 0310 	and.w	r3, r3, #16
 80032c4:	2b10      	cmp	r3, #16
 80032c6:	d161      	bne.n	800338c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	699a      	ldr	r2, [r3, #24]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 0210 	bic.w	r2, r2, #16
 80032d6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80032d8:	6a3b      	ldr	r3, [r7, #32]
 80032da:	6a1b      	ldr	r3, [r3, #32]
 80032dc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	f003 020f 	and.w	r2, r3, #15
 80032e4:	4613      	mov	r3, r2
 80032e6:	00db      	lsls	r3, r3, #3
 80032e8:	4413      	add	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	4413      	add	r3, r2
 80032f4:	3304      	adds	r3, #4
 80032f6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	0c5b      	lsrs	r3, r3, #17
 80032fc:	f003 030f 	and.w	r3, r3, #15
 8003300:	2b02      	cmp	r3, #2
 8003302:	d124      	bne.n	800334e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800330a:	4013      	ands	r3, r2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d035      	beq.n	800337c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	091b      	lsrs	r3, r3, #4
 8003318:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800331a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800331e:	b29b      	uxth	r3, r3
 8003320:	461a      	mov	r2, r3
 8003322:	6a38      	ldr	r0, [r7, #32]
 8003324:	f002 fd6e 	bl	8005e04 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	68da      	ldr	r2, [r3, #12]
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	091b      	lsrs	r3, r3, #4
 8003330:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003334:	441a      	add	r2, r3
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	695a      	ldr	r2, [r3, #20]
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	091b      	lsrs	r3, r3, #4
 8003342:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003346:	441a      	add	r2, r3
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	615a      	str	r2, [r3, #20]
 800334c:	e016      	b.n	800337c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	0c5b      	lsrs	r3, r3, #17
 8003352:	f003 030f 	and.w	r3, r3, #15
 8003356:	2b06      	cmp	r3, #6
 8003358:	d110      	bne.n	800337c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003360:	2208      	movs	r2, #8
 8003362:	4619      	mov	r1, r3
 8003364:	6a38      	ldr	r0, [r7, #32]
 8003366:	f002 fd4d 	bl	8005e04 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	695a      	ldr	r2, [r3, #20]
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	091b      	lsrs	r3, r3, #4
 8003372:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003376:	441a      	add	r2, r3
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	699a      	ldr	r2, [r3, #24]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 0210 	orr.w	r2, r2, #16
 800338a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4618      	mov	r0, r3
 8003392:	f002 fecb 	bl	800612c <USB_ReadInterrupts>
 8003396:	4603      	mov	r3, r0
 8003398:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800339c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80033a0:	f040 80a7 	bne.w	80034f2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80033a4:	2300      	movs	r3, #0
 80033a6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f002 fed0 	bl	8006152 <USB_ReadDevAllOutEpInterrupt>
 80033b2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80033b4:	e099      	b.n	80034ea <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80033b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f000 808e 	beq.w	80034de <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033c8:	b2d2      	uxtb	r2, r2
 80033ca:	4611      	mov	r1, r2
 80033cc:	4618      	mov	r0, r3
 80033ce:	f002 fef4 	bl	80061ba <USB_ReadDevOutEPInterrupt>
 80033d2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00c      	beq.n	80033f8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80033de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e0:	015a      	lsls	r2, r3, #5
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	4413      	add	r3, r2
 80033e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033ea:	461a      	mov	r2, r3
 80033ec:	2301      	movs	r3, #1
 80033ee:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80033f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 fea4 	bl	8004140 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	f003 0308 	and.w	r3, r3, #8
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00c      	beq.n	800341c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003404:	015a      	lsls	r2, r3, #5
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	4413      	add	r3, r2
 800340a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800340e:	461a      	mov	r2, r3
 8003410:	2308      	movs	r3, #8
 8003412:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003414:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 ff7a 	bl	8004310 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	f003 0310 	and.w	r3, r3, #16
 8003422:	2b00      	cmp	r3, #0
 8003424:	d008      	beq.n	8003438 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003428:	015a      	lsls	r2, r3, #5
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	4413      	add	r3, r2
 800342e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003432:	461a      	mov	r2, r3
 8003434:	2310      	movs	r3, #16
 8003436:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d030      	beq.n	80034a4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003442:	6a3b      	ldr	r3, [r7, #32]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800344a:	2b80      	cmp	r3, #128	@ 0x80
 800344c:	d109      	bne.n	8003462 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	69fa      	ldr	r2, [r7, #28]
 8003458:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800345c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003460:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003462:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003464:	4613      	mov	r3, r2
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	4413      	add	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	4413      	add	r3, r2
 8003474:	3304      	adds	r3, #4
 8003476:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	78db      	ldrb	r3, [r3, #3]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d108      	bne.n	8003492 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	2200      	movs	r2, #0
 8003484:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003488:	b2db      	uxtb	r3, r3
 800348a:	4619      	mov	r1, r3
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f005 fa8d 	bl	80089ac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003494:	015a      	lsls	r2, r3, #5
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	4413      	add	r3, r2
 800349a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800349e:	461a      	mov	r2, r3
 80034a0:	2302      	movs	r3, #2
 80034a2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	f003 0320 	and.w	r3, r3, #32
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d008      	beq.n	80034c0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b0:	015a      	lsls	r2, r3, #5
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	4413      	add	r3, r2
 80034b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034ba:	461a      	mov	r2, r3
 80034bc:	2320      	movs	r3, #32
 80034be:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d009      	beq.n	80034de <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80034ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034cc:	015a      	lsls	r2, r3, #5
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	4413      	add	r3, r2
 80034d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034d6:	461a      	mov	r2, r3
 80034d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80034dc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80034de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e0:	3301      	adds	r3, #1
 80034e2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80034e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034e6:	085b      	lsrs	r3, r3, #1
 80034e8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80034ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f47f af62 	bne.w	80033b6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f002 fe18 	bl	800612c <USB_ReadInterrupts>
 80034fc:	4603      	mov	r3, r0
 80034fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003502:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003506:	f040 80db 	bne.w	80036c0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4618      	mov	r0, r3
 8003510:	f002 fe39 	bl	8006186 <USB_ReadDevAllInEpInterrupt>
 8003514:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003516:	2300      	movs	r3, #0
 8003518:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800351a:	e0cd      	b.n	80036b8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800351c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b00      	cmp	r3, #0
 8003524:	f000 80c2 	beq.w	80036ac <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800352e:	b2d2      	uxtb	r2, r2
 8003530:	4611      	mov	r1, r2
 8003532:	4618      	mov	r0, r3
 8003534:	f002 fe5f 	bl	80061f6 <USB_ReadDevInEPInterrupt>
 8003538:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	2b00      	cmp	r3, #0
 8003542:	d057      	beq.n	80035f4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003546:	f003 030f 	and.w	r3, r3, #15
 800354a:	2201      	movs	r2, #1
 800354c:	fa02 f303 	lsl.w	r3, r2, r3
 8003550:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003558:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	43db      	mvns	r3, r3
 800355e:	69f9      	ldr	r1, [r7, #28]
 8003560:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003564:	4013      	ands	r3, r2
 8003566:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356a:	015a      	lsls	r2, r3, #5
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	4413      	add	r3, r2
 8003570:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003574:	461a      	mov	r2, r3
 8003576:	2301      	movs	r3, #1
 8003578:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	799b      	ldrb	r3, [r3, #6]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d132      	bne.n	80035e8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003582:	6879      	ldr	r1, [r7, #4]
 8003584:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003586:	4613      	mov	r3, r2
 8003588:	00db      	lsls	r3, r3, #3
 800358a:	4413      	add	r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	440b      	add	r3, r1
 8003590:	3320      	adds	r3, #32
 8003592:	6819      	ldr	r1, [r3, #0]
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003598:	4613      	mov	r3, r2
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	4413      	add	r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	4403      	add	r3, r0
 80035a2:	331c      	adds	r3, #28
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4419      	add	r1, r3
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035ac:	4613      	mov	r3, r2
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	4413      	add	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4403      	add	r3, r0
 80035b6:	3320      	adds	r3, #32
 80035b8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80035ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d113      	bne.n	80035e8 <HAL_PCD_IRQHandler+0x3a2>
 80035c0:	6879      	ldr	r1, [r7, #4]
 80035c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035c4:	4613      	mov	r3, r2
 80035c6:	00db      	lsls	r3, r3, #3
 80035c8:	4413      	add	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	440b      	add	r3, r1
 80035ce:	3324      	adds	r3, #36	@ 0x24
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d108      	bne.n	80035e8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6818      	ldr	r0, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80035e0:	461a      	mov	r2, r3
 80035e2:	2101      	movs	r1, #1
 80035e4:	f002 fe66 	bl	80062b4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80035e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	4619      	mov	r1, r3
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f005 f957 	bl	80088a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	f003 0308 	and.w	r3, r3, #8
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d008      	beq.n	8003610 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80035fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003600:	015a      	lsls	r2, r3, #5
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	4413      	add	r3, r2
 8003606:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800360a:	461a      	mov	r2, r3
 800360c:	2308      	movs	r3, #8
 800360e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	f003 0310 	and.w	r3, r3, #16
 8003616:	2b00      	cmp	r3, #0
 8003618:	d008      	beq.n	800362c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800361a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800361c:	015a      	lsls	r2, r3, #5
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	4413      	add	r3, r2
 8003622:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003626:	461a      	mov	r2, r3
 8003628:	2310      	movs	r3, #16
 800362a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003632:	2b00      	cmp	r3, #0
 8003634:	d008      	beq.n	8003648 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003638:	015a      	lsls	r2, r3, #5
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	4413      	add	r3, r2
 800363e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003642:	461a      	mov	r2, r3
 8003644:	2340      	movs	r3, #64	@ 0x40
 8003646:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d023      	beq.n	800369a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003652:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003654:	6a38      	ldr	r0, [r7, #32]
 8003656:	f001 fe4d 	bl	80052f4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800365a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800365c:	4613      	mov	r3, r2
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	4413      	add	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	3310      	adds	r3, #16
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	4413      	add	r3, r2
 800366a:	3304      	adds	r3, #4
 800366c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	78db      	ldrb	r3, [r3, #3]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d108      	bne.n	8003688 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	2200      	movs	r2, #0
 800367a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800367c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367e:	b2db      	uxtb	r3, r3
 8003680:	4619      	mov	r1, r3
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f005 f9a4 	bl	80089d0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368a:	015a      	lsls	r2, r3, #5
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	4413      	add	r3, r2
 8003690:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003694:	461a      	mov	r2, r3
 8003696:	2302      	movs	r3, #2
 8003698:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d003      	beq.n	80036ac <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80036a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 fcbd 	bl	8004026 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80036ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ae:	3301      	adds	r3, #1
 80036b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80036b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036b4:	085b      	lsrs	r3, r3, #1
 80036b6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80036b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f47f af2e 	bne.w	800351c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f002 fd31 	bl	800612c <USB_ReadInterrupts>
 80036ca:	4603      	mov	r3, r0
 80036cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80036d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80036d4:	d122      	bne.n	800371c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	69fa      	ldr	r2, [r7, #28]
 80036e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036e4:	f023 0301 	bic.w	r3, r3, #1
 80036e8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d108      	bne.n	8003706 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80036fc:	2100      	movs	r1, #0
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 fea4 	bl	800444c <HAL_PCDEx_LPM_Callback>
 8003704:	e002      	b.n	800370c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f005 f942 	bl	8008990 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	695a      	ldr	r2, [r3, #20]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800371a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4618      	mov	r0, r3
 8003722:	f002 fd03 	bl	800612c <USB_ReadInterrupts>
 8003726:	4603      	mov	r3, r0
 8003728:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800372c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003730:	d112      	bne.n	8003758 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	2b01      	cmp	r3, #1
 8003740:	d102      	bne.n	8003748 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f005 f8fe 	bl	8008944 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	695a      	ldr	r2, [r3, #20]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003756:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4618      	mov	r0, r3
 800375e:	f002 fce5 	bl	800612c <USB_ReadInterrupts>
 8003762:	4603      	mov	r3, r0
 8003764:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003768:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800376c:	f040 80b7 	bne.w	80038de <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	69fa      	ldr	r2, [r7, #28]
 800377a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800377e:	f023 0301 	bic.w	r3, r3, #1
 8003782:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2110      	movs	r1, #16
 800378a:	4618      	mov	r0, r3
 800378c:	f001 fdb2 	bl	80052f4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003790:	2300      	movs	r3, #0
 8003792:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003794:	e046      	b.n	8003824 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003798:	015a      	lsls	r2, r3, #5
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	4413      	add	r3, r2
 800379e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037a2:	461a      	mov	r2, r3
 80037a4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80037a8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80037aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ac:	015a      	lsls	r2, r3, #5
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	4413      	add	r3, r2
 80037b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037ba:	0151      	lsls	r1, r2, #5
 80037bc:	69fa      	ldr	r2, [r7, #28]
 80037be:	440a      	add	r2, r1
 80037c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80037c4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80037c8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80037ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037cc:	015a      	lsls	r2, r3, #5
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	4413      	add	r3, r2
 80037d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037d6:	461a      	mov	r2, r3
 80037d8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80037dc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80037de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037e0:	015a      	lsls	r2, r3, #5
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	4413      	add	r3, r2
 80037e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037ee:	0151      	lsls	r1, r2, #5
 80037f0:	69fa      	ldr	r2, [r7, #28]
 80037f2:	440a      	add	r2, r1
 80037f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80037f8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80037fc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80037fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003800:	015a      	lsls	r2, r3, #5
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	4413      	add	r3, r2
 8003806:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800380e:	0151      	lsls	r1, r2, #5
 8003810:	69fa      	ldr	r2, [r7, #28]
 8003812:	440a      	add	r2, r1
 8003814:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003818:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800381c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800381e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003820:	3301      	adds	r3, #1
 8003822:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	791b      	ldrb	r3, [r3, #4]
 8003828:	461a      	mov	r2, r3
 800382a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800382c:	4293      	cmp	r3, r2
 800382e:	d3b2      	bcc.n	8003796 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003836:	69db      	ldr	r3, [r3, #28]
 8003838:	69fa      	ldr	r2, [r7, #28]
 800383a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800383e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003842:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	7bdb      	ldrb	r3, [r3, #15]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d016      	beq.n	800387a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003852:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003856:	69fa      	ldr	r2, [r7, #28]
 8003858:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800385c:	f043 030b 	orr.w	r3, r3, #11
 8003860:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800386a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800386c:	69fa      	ldr	r2, [r7, #28]
 800386e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003872:	f043 030b 	orr.w	r3, r3, #11
 8003876:	6453      	str	r3, [r2, #68]	@ 0x44
 8003878:	e015      	b.n	80038a6 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	69fa      	ldr	r2, [r7, #28]
 8003884:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003888:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800388c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003890:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	69fa      	ldr	r2, [r7, #28]
 800389c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038a0:	f043 030b 	orr.w	r3, r3, #11
 80038a4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	69fa      	ldr	r2, [r7, #28]
 80038b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038b4:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80038b8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6818      	ldr	r0, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80038c8:	461a      	mov	r2, r3
 80038ca:	f002 fcf3 	bl	80062b4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	695a      	ldr	r2, [r3, #20]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80038dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f002 fc22 	bl	800612c <USB_ReadInterrupts>
 80038e8:	4603      	mov	r3, r0
 80038ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038f2:	d123      	bne.n	800393c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f002 fcb8 	bl	800626e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4618      	mov	r0, r3
 8003904:	f001 fd6f 	bl	80053e6 <USB_GetDevSpeed>
 8003908:	4603      	mov	r3, r0
 800390a:	461a      	mov	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681c      	ldr	r4, [r3, #0]
 8003914:	f001 fa0a 	bl	8004d2c <HAL_RCC_GetHCLKFreq>
 8003918:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800391e:	461a      	mov	r2, r3
 8003920:	4620      	mov	r0, r4
 8003922:	f001 fa73 	bl	8004e0c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f004 ffe3 	bl	80088f2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	695a      	ldr	r2, [r3, #20]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800393a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4618      	mov	r0, r3
 8003942:	f002 fbf3 	bl	800612c <USB_ReadInterrupts>
 8003946:	4603      	mov	r3, r0
 8003948:	f003 0308 	and.w	r3, r3, #8
 800394c:	2b08      	cmp	r3, #8
 800394e:	d10a      	bne.n	8003966 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f004 ffc0 	bl	80088d6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	695a      	ldr	r2, [r3, #20]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f002 0208 	and.w	r2, r2, #8
 8003964:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4618      	mov	r0, r3
 800396c:	f002 fbde 	bl	800612c <USB_ReadInterrupts>
 8003970:	4603      	mov	r3, r0
 8003972:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003976:	2b80      	cmp	r3, #128	@ 0x80
 8003978:	d123      	bne.n	80039c2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800397a:	6a3b      	ldr	r3, [r7, #32]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003982:	6a3b      	ldr	r3, [r7, #32]
 8003984:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003986:	2301      	movs	r3, #1
 8003988:	627b      	str	r3, [r7, #36]	@ 0x24
 800398a:	e014      	b.n	80039b6 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800398c:	6879      	ldr	r1, [r7, #4]
 800398e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003990:	4613      	mov	r3, r2
 8003992:	00db      	lsls	r3, r3, #3
 8003994:	4413      	add	r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	440b      	add	r3, r1
 800399a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d105      	bne.n	80039b0 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80039a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	4619      	mov	r1, r3
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 fb0a 	bl	8003fc4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b2:	3301      	adds	r3, #1
 80039b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	791b      	ldrb	r3, [r3, #4]
 80039ba:	461a      	mov	r2, r3
 80039bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039be:	4293      	cmp	r3, r2
 80039c0:	d3e4      	bcc.n	800398c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f002 fbb0 	bl	800612c <USB_ReadInterrupts>
 80039cc:	4603      	mov	r3, r0
 80039ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039d6:	d13c      	bne.n	8003a52 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039d8:	2301      	movs	r3, #1
 80039da:	627b      	str	r3, [r7, #36]	@ 0x24
 80039dc:	e02b      	b.n	8003a36 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80039de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e0:	015a      	lsls	r2, r3, #5
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	4413      	add	r3, r2
 80039e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80039ee:	6879      	ldr	r1, [r7, #4]
 80039f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039f2:	4613      	mov	r3, r2
 80039f4:	00db      	lsls	r3, r3, #3
 80039f6:	4413      	add	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	440b      	add	r3, r1
 80039fc:	3318      	adds	r3, #24
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d115      	bne.n	8003a30 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003a04:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	da12      	bge.n	8003a30 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003a0a:	6879      	ldr	r1, [r7, #4]
 8003a0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a0e:	4613      	mov	r3, r2
 8003a10:	00db      	lsls	r3, r3, #3
 8003a12:	4413      	add	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	440b      	add	r3, r1
 8003a18:	3317      	adds	r3, #23
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	4619      	mov	r1, r3
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 faca 	bl	8003fc4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a32:	3301      	adds	r3, #1
 8003a34:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	791b      	ldrb	r3, [r3, #4]
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d3cd      	bcc.n	80039de <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	695a      	ldr	r2, [r3, #20]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003a50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f002 fb68 	bl	800612c <USB_ReadInterrupts>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a66:	d156      	bne.n	8003b16 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a68:	2301      	movs	r3, #1
 8003a6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a6c:	e045      	b.n	8003afa <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a70:	015a      	lsls	r2, r3, #5
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	4413      	add	r3, r2
 8003a76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a7e:	6879      	ldr	r1, [r7, #4]
 8003a80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a82:	4613      	mov	r3, r2
 8003a84:	00db      	lsls	r3, r3, #3
 8003a86:	4413      	add	r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	440b      	add	r3, r1
 8003a8c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d12e      	bne.n	8003af4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003a96:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	da2b      	bge.n	8003af4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003aa8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d121      	bne.n	8003af4 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003ab0:	6879      	ldr	r1, [r7, #4]
 8003ab2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	00db      	lsls	r3, r3, #3
 8003ab8:	4413      	add	r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	440b      	add	r3, r1
 8003abe:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003ac6:	6a3b      	ldr	r3, [r7, #32]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003ace:	6a3b      	ldr	r3, [r7, #32]
 8003ad0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003ad2:	6a3b      	ldr	r3, [r7, #32]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10a      	bne.n	8003af4 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	69fa      	ldr	r2, [r7, #28]
 8003ae8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003aec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003af0:	6053      	str	r3, [r2, #4]
            break;
 8003af2:	e008      	b.n	8003b06 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af6:	3301      	adds	r3, #1
 8003af8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	791b      	ldrb	r3, [r3, #4]
 8003afe:	461a      	mov	r2, r3
 8003b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d3b3      	bcc.n	8003a6e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	695a      	ldr	r2, [r3, #20]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003b14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f002 fb06 	bl	800612c <USB_ReadInterrupts>
 8003b20:	4603      	mov	r3, r0
 8003b22:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003b26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b2a:	d10a      	bne.n	8003b42 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f004 ff61 	bl	80089f4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	695a      	ldr	r2, [r3, #20]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003b40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f002 faf0 	bl	800612c <USB_ReadInterrupts>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	f003 0304 	and.w	r3, r3, #4
 8003b52:	2b04      	cmp	r3, #4
 8003b54:	d115      	bne.n	8003b82 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	f003 0304 	and.w	r3, r3, #4
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d002      	beq.n	8003b6e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f004 ff51 	bl	8008a10 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	6859      	ldr	r1, [r3, #4]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	605a      	str	r2, [r3, #4]
 8003b7e:	e000      	b.n	8003b82 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003b80:	bf00      	nop
    }
  }
}
 8003b82:	3734      	adds	r7, #52	@ 0x34
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd90      	pop	{r4, r7, pc}

08003b88 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	460b      	mov	r3, r1
 8003b92:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d101      	bne.n	8003ba2 <HAL_PCD_SetAddress+0x1a>
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	e012      	b.n	8003bc8 <HAL_PCD_SetAddress+0x40>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	78fa      	ldrb	r2, [r7, #3]
 8003bae:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	78fa      	ldrb	r2, [r7, #3]
 8003bb6:	4611      	mov	r1, r2
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f002 fa4f 	bl	800605c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3708      	adds	r7, #8
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	4608      	mov	r0, r1
 8003bda:	4611      	mov	r1, r2
 8003bdc:	461a      	mov	r2, r3
 8003bde:	4603      	mov	r3, r0
 8003be0:	70fb      	strb	r3, [r7, #3]
 8003be2:	460b      	mov	r3, r1
 8003be4:	803b      	strh	r3, [r7, #0]
 8003be6:	4613      	mov	r3, r2
 8003be8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003bea:	2300      	movs	r3, #0
 8003bec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003bee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	da0f      	bge.n	8003c16 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bf6:	78fb      	ldrb	r3, [r7, #3]
 8003bf8:	f003 020f 	and.w	r2, r3, #15
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	4413      	add	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	3310      	adds	r3, #16
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	4413      	add	r3, r2
 8003c0a:	3304      	adds	r3, #4
 8003c0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2201      	movs	r2, #1
 8003c12:	705a      	strb	r2, [r3, #1]
 8003c14:	e00f      	b.n	8003c36 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c16:	78fb      	ldrb	r3, [r7, #3]
 8003c18:	f003 020f 	and.w	r2, r3, #15
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	4413      	add	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	3304      	adds	r3, #4
 8003c2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003c36:	78fb      	ldrb	r3, [r7, #3]
 8003c38:	f003 030f 	and.w	r3, r3, #15
 8003c3c:	b2da      	uxtb	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003c42:	883b      	ldrh	r3, [r7, #0]
 8003c44:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	78ba      	ldrb	r2, [r7, #2]
 8003c50:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	785b      	ldrb	r3, [r3, #1]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d004      	beq.n	8003c64 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	461a      	mov	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003c64:	78bb      	ldrb	r3, [r7, #2]
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d102      	bne.n	8003c70 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d101      	bne.n	8003c7e <HAL_PCD_EP_Open+0xae>
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	e00e      	b.n	8003c9c <HAL_PCD_EP_Open+0xcc>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68f9      	ldr	r1, [r7, #12]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f001 fbcf 	bl	8005430 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003c9a:	7afb      	ldrb	r3, [r7, #11]
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	460b      	mov	r3, r1
 8003cae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003cb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	da0f      	bge.n	8003cd8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cb8:	78fb      	ldrb	r3, [r7, #3]
 8003cba:	f003 020f 	and.w	r2, r3, #15
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	00db      	lsls	r3, r3, #3
 8003cc2:	4413      	add	r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	3310      	adds	r3, #16
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	4413      	add	r3, r2
 8003ccc:	3304      	adds	r3, #4
 8003cce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	705a      	strb	r2, [r3, #1]
 8003cd6:	e00f      	b.n	8003cf8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cd8:	78fb      	ldrb	r3, [r7, #3]
 8003cda:	f003 020f 	and.w	r2, r3, #15
 8003cde:	4613      	mov	r3, r2
 8003ce0:	00db      	lsls	r3, r3, #3
 8003ce2:	4413      	add	r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	4413      	add	r3, r2
 8003cee:	3304      	adds	r3, #4
 8003cf0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cf8:	78fb      	ldrb	r3, [r7, #3]
 8003cfa:	f003 030f 	and.w	r3, r3, #15
 8003cfe:	b2da      	uxtb	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d101      	bne.n	8003d12 <HAL_PCD_EP_Close+0x6e>
 8003d0e:	2302      	movs	r3, #2
 8003d10:	e00e      	b.n	8003d30 <HAL_PCD_EP_Close+0x8c>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68f9      	ldr	r1, [r7, #12]
 8003d20:	4618      	mov	r0, r3
 8003d22:	f001 fc0d 	bl	8005540 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	607a      	str	r2, [r7, #4]
 8003d42:	603b      	str	r3, [r7, #0]
 8003d44:	460b      	mov	r3, r1
 8003d46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d48:	7afb      	ldrb	r3, [r7, #11]
 8003d4a:	f003 020f 	and.w	r2, r3, #15
 8003d4e:	4613      	mov	r3, r2
 8003d50:	00db      	lsls	r3, r3, #3
 8003d52:	4413      	add	r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	3304      	adds	r3, #4
 8003d60:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	2200      	movs	r2, #0
 8003d72:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	2200      	movs	r2, #0
 8003d78:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d7a:	7afb      	ldrb	r3, [r7, #11]
 8003d7c:	f003 030f 	and.w	r3, r3, #15
 8003d80:	b2da      	uxtb	r2, r3
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	799b      	ldrb	r3, [r3, #6]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d102      	bne.n	8003d94 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6818      	ldr	r0, [r3, #0]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	799b      	ldrb	r3, [r3, #6]
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	6979      	ldr	r1, [r7, #20]
 8003da0:	f001 fcaa 	bl	80056f8 <USB_EPStartXfer>

  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3718      	adds	r7, #24
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003dae:	b480      	push	{r7}
 8003db0:	b083      	sub	sp, #12
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
 8003db6:	460b      	mov	r3, r1
 8003db8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003dba:	78fb      	ldrb	r3, [r7, #3]
 8003dbc:	f003 020f 	and.w	r2, r3, #15
 8003dc0:	6879      	ldr	r1, [r7, #4]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	00db      	lsls	r3, r3, #3
 8003dc6:	4413      	add	r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	440b      	add	r3, r1
 8003dcc:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003dd0:	681b      	ldr	r3, [r3, #0]
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr

08003dde <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b086      	sub	sp, #24
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	60f8      	str	r0, [r7, #12]
 8003de6:	607a      	str	r2, [r7, #4]
 8003de8:	603b      	str	r3, [r7, #0]
 8003dea:	460b      	mov	r3, r1
 8003dec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dee:	7afb      	ldrb	r3, [r7, #11]
 8003df0:	f003 020f 	and.w	r2, r3, #15
 8003df4:	4613      	mov	r3, r2
 8003df6:	00db      	lsls	r3, r3, #3
 8003df8:	4413      	add	r3, r2
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	3310      	adds	r3, #16
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	4413      	add	r3, r2
 8003e02:	3304      	adds	r3, #4
 8003e04:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	2200      	movs	r2, #0
 8003e16:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e1e:	7afb      	ldrb	r3, [r7, #11]
 8003e20:	f003 030f 	and.w	r3, r3, #15
 8003e24:	b2da      	uxtb	r2, r3
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	799b      	ldrb	r3, [r3, #6]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d102      	bne.n	8003e38 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6818      	ldr	r0, [r3, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	799b      	ldrb	r3, [r3, #6]
 8003e40:	461a      	mov	r2, r3
 8003e42:	6979      	ldr	r1, [r7, #20]
 8003e44:	f001 fc58 	bl	80056f8 <USB_EPStartXfer>

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3718      	adds	r7, #24
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b084      	sub	sp, #16
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003e5e:	78fb      	ldrb	r3, [r7, #3]
 8003e60:	f003 030f 	and.w	r3, r3, #15
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	7912      	ldrb	r2, [r2, #4]
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d901      	bls.n	8003e70 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e04f      	b.n	8003f10 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	da0f      	bge.n	8003e98 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e78:	78fb      	ldrb	r3, [r7, #3]
 8003e7a:	f003 020f 	and.w	r2, r3, #15
 8003e7e:	4613      	mov	r3, r2
 8003e80:	00db      	lsls	r3, r3, #3
 8003e82:	4413      	add	r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	3310      	adds	r3, #16
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	3304      	adds	r3, #4
 8003e8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2201      	movs	r2, #1
 8003e94:	705a      	strb	r2, [r3, #1]
 8003e96:	e00d      	b.n	8003eb4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003e98:	78fa      	ldrb	r2, [r7, #3]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	4413      	add	r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	3304      	adds	r3, #4
 8003eac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003eba:	78fb      	ldrb	r3, [r7, #3]
 8003ebc:	f003 030f 	and.w	r3, r3, #15
 8003ec0:	b2da      	uxtb	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d101      	bne.n	8003ed4 <HAL_PCD_EP_SetStall+0x82>
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	e01d      	b.n	8003f10 <HAL_PCD_EP_SetStall+0xbe>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68f9      	ldr	r1, [r7, #12]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f001 ffe6 	bl	8005eb4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ee8:	78fb      	ldrb	r3, [r7, #3]
 8003eea:	f003 030f 	and.w	r3, r3, #15
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d109      	bne.n	8003f06 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6818      	ldr	r0, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	7999      	ldrb	r1, [r3, #6]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003f00:	461a      	mov	r2, r3
 8003f02:	f002 f9d7 	bl	80062b4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3710      	adds	r7, #16
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	460b      	mov	r3, r1
 8003f22:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003f24:	78fb      	ldrb	r3, [r7, #3]
 8003f26:	f003 030f 	and.w	r3, r3, #15
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	7912      	ldrb	r2, [r2, #4]
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d901      	bls.n	8003f36 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e042      	b.n	8003fbc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	da0f      	bge.n	8003f5e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f3e:	78fb      	ldrb	r3, [r7, #3]
 8003f40:	f003 020f 	and.w	r2, r3, #15
 8003f44:	4613      	mov	r3, r2
 8003f46:	00db      	lsls	r3, r3, #3
 8003f48:	4413      	add	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	3310      	adds	r3, #16
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	4413      	add	r3, r2
 8003f52:	3304      	adds	r3, #4
 8003f54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	705a      	strb	r2, [r3, #1]
 8003f5c:	e00f      	b.n	8003f7e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f5e:	78fb      	ldrb	r3, [r7, #3]
 8003f60:	f003 020f 	and.w	r2, r3, #15
 8003f64:	4613      	mov	r3, r2
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	4413      	add	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	4413      	add	r3, r2
 8003f74:	3304      	adds	r3, #4
 8003f76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f84:	78fb      	ldrb	r3, [r7, #3]
 8003f86:	f003 030f 	and.w	r3, r3, #15
 8003f8a:	b2da      	uxtb	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d101      	bne.n	8003f9e <HAL_PCD_EP_ClrStall+0x86>
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	e00e      	b.n	8003fbc <HAL_PCD_EP_ClrStall+0xa4>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68f9      	ldr	r1, [r7, #12]
 8003fac:	4618      	mov	r0, r3
 8003fae:	f001 ffef 	bl	8005f90 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3710      	adds	r7, #16
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	460b      	mov	r3, r1
 8003fce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003fd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	da0c      	bge.n	8003ff2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fd8:	78fb      	ldrb	r3, [r7, #3]
 8003fda:	f003 020f 	and.w	r2, r3, #15
 8003fde:	4613      	mov	r3, r2
 8003fe0:	00db      	lsls	r3, r3, #3
 8003fe2:	4413      	add	r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	3310      	adds	r3, #16
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	4413      	add	r3, r2
 8003fec:	3304      	adds	r3, #4
 8003fee:	60fb      	str	r3, [r7, #12]
 8003ff0:	e00c      	b.n	800400c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ff2:	78fb      	ldrb	r3, [r7, #3]
 8003ff4:	f003 020f 	and.w	r2, r3, #15
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	00db      	lsls	r3, r3, #3
 8003ffc:	4413      	add	r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	4413      	add	r3, r2
 8004008:	3304      	adds	r3, #4
 800400a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68f9      	ldr	r1, [r7, #12]
 8004012:	4618      	mov	r0, r3
 8004014:	f001 fe0e 	bl	8005c34 <USB_EPStopXfer>
 8004018:	4603      	mov	r3, r0
 800401a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800401c:	7afb      	ldrb	r3, [r7, #11]
}
 800401e:	4618      	mov	r0, r3
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004026:	b580      	push	{r7, lr}
 8004028:	b08a      	sub	sp, #40	@ 0x28
 800402a:	af02      	add	r7, sp, #8
 800402c:	6078      	str	r0, [r7, #4]
 800402e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800403a:	683a      	ldr	r2, [r7, #0]
 800403c:	4613      	mov	r3, r2
 800403e:	00db      	lsls	r3, r3, #3
 8004040:	4413      	add	r3, r2
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	3310      	adds	r3, #16
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	4413      	add	r3, r2
 800404a:	3304      	adds	r3, #4
 800404c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	695a      	ldr	r2, [r3, #20]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	429a      	cmp	r2, r3
 8004058:	d901      	bls.n	800405e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e06b      	b.n	8004136 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	691a      	ldr	r2, [r3, #16]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	69fa      	ldr	r2, [r7, #28]
 8004070:	429a      	cmp	r2, r3
 8004072:	d902      	bls.n	800407a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	3303      	adds	r3, #3
 800407e:	089b      	lsrs	r3, r3, #2
 8004080:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004082:	e02a      	b.n	80040da <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	691a      	ldr	r2, [r3, #16]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	69fa      	ldr	r2, [r7, #28]
 8004096:	429a      	cmp	r2, r3
 8004098:	d902      	bls.n	80040a0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	3303      	adds	r3, #3
 80040a4:	089b      	lsrs	r3, r3, #2
 80040a6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	68d9      	ldr	r1, [r3, #12]
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	b2da      	uxtb	r2, r3
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80040b8:	9300      	str	r3, [sp, #0]
 80040ba:	4603      	mov	r3, r0
 80040bc:	6978      	ldr	r0, [r7, #20]
 80040be:	f001 fe63 	bl	8005d88 <USB_WritePacket>

    ep->xfer_buff  += len;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	68da      	ldr	r2, [r3, #12]
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	441a      	add	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	695a      	ldr	r2, [r3, #20]
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	441a      	add	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	015a      	lsls	r2, r3, #5
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	4413      	add	r3, r2
 80040e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80040ea:	69ba      	ldr	r2, [r7, #24]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d809      	bhi.n	8004104 <PCD_WriteEmptyTxFifo+0xde>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	695a      	ldr	r2, [r3, #20]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d203      	bcs.n	8004104 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d1bf      	bne.n	8004084 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	691a      	ldr	r2, [r3, #16]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	695b      	ldr	r3, [r3, #20]
 800410c:	429a      	cmp	r2, r3
 800410e:	d811      	bhi.n	8004134 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	f003 030f 	and.w	r3, r3, #15
 8004116:	2201      	movs	r2, #1
 8004118:	fa02 f303 	lsl.w	r3, r2, r3
 800411c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004124:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	43db      	mvns	r3, r3
 800412a:	6939      	ldr	r1, [r7, #16]
 800412c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004130:	4013      	ands	r3, r2
 8004132:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3720      	adds	r7, #32
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
	...

08004140 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b088      	sub	sp, #32
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	333c      	adds	r3, #60	@ 0x3c
 8004158:	3304      	adds	r3, #4
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	015a      	lsls	r2, r3, #5
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	4413      	add	r3, r2
 8004166:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	799b      	ldrb	r3, [r3, #6]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d17b      	bne.n	800426e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	f003 0308 	and.w	r3, r3, #8
 800417c:	2b00      	cmp	r3, #0
 800417e:	d015      	beq.n	80041ac <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	4a61      	ldr	r2, [pc, #388]	@ (8004308 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004184:	4293      	cmp	r3, r2
 8004186:	f240 80b9 	bls.w	80042fc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004190:	2b00      	cmp	r3, #0
 8004192:	f000 80b3 	beq.w	80042fc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	015a      	lsls	r2, r3, #5
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	4413      	add	r3, r2
 800419e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041a2:	461a      	mov	r2, r3
 80041a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041a8:	6093      	str	r3, [r2, #8]
 80041aa:	e0a7      	b.n	80042fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	f003 0320 	and.w	r3, r3, #32
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d009      	beq.n	80041ca <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	015a      	lsls	r2, r3, #5
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	4413      	add	r3, r2
 80041be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041c2:	461a      	mov	r2, r3
 80041c4:	2320      	movs	r3, #32
 80041c6:	6093      	str	r3, [r2, #8]
 80041c8:	e098      	b.n	80042fc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f040 8093 	bne.w	80042fc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	4a4b      	ldr	r2, [pc, #300]	@ (8004308 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d90f      	bls.n	80041fe <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00a      	beq.n	80041fe <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	015a      	lsls	r2, r3, #5
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	4413      	add	r3, r2
 80041f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041f4:	461a      	mov	r2, r3
 80041f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041fa:	6093      	str	r3, [r2, #8]
 80041fc:	e07e      	b.n	80042fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	4613      	mov	r3, r2
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	4413      	add	r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	4413      	add	r3, r2
 8004210:	3304      	adds	r3, #4
 8004212:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6a1a      	ldr	r2, [r3, #32]
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	0159      	lsls	r1, r3, #5
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	440b      	add	r3, r1
 8004220:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800422a:	1ad2      	subs	r2, r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d114      	bne.n	8004260 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d109      	bne.n	8004252 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6818      	ldr	r0, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004248:	461a      	mov	r2, r3
 800424a:	2101      	movs	r1, #1
 800424c:	f002 f832 	bl	80062b4 <USB_EP0_OutStart>
 8004250:	e006      	b.n	8004260 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	68da      	ldr	r2, [r3, #12]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	441a      	add	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	b2db      	uxtb	r3, r3
 8004264:	4619      	mov	r1, r3
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f004 fb00 	bl	800886c <HAL_PCD_DataOutStageCallback>
 800426c:	e046      	b.n	80042fc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	4a26      	ldr	r2, [pc, #152]	@ (800430c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d124      	bne.n	80042c0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00a      	beq.n	8004296 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	015a      	lsls	r2, r3, #5
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	4413      	add	r3, r2
 8004288:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800428c:	461a      	mov	r2, r3
 800428e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004292:	6093      	str	r3, [r2, #8]
 8004294:	e032      	b.n	80042fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	f003 0320 	and.w	r3, r3, #32
 800429c:	2b00      	cmp	r3, #0
 800429e:	d008      	beq.n	80042b2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	015a      	lsls	r2, r3, #5
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	4413      	add	r3, r2
 80042a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042ac:	461a      	mov	r2, r3
 80042ae:	2320      	movs	r3, #32
 80042b0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	4619      	mov	r1, r3
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f004 fad7 	bl	800886c <HAL_PCD_DataOutStageCallback>
 80042be:	e01d      	b.n	80042fc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d114      	bne.n	80042f0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80042c6:	6879      	ldr	r1, [r7, #4]
 80042c8:	683a      	ldr	r2, [r7, #0]
 80042ca:	4613      	mov	r3, r2
 80042cc:	00db      	lsls	r3, r3, #3
 80042ce:	4413      	add	r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	440b      	add	r3, r1
 80042d4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d108      	bne.n	80042f0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6818      	ldr	r0, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80042e8:	461a      	mov	r2, r3
 80042ea:	2100      	movs	r1, #0
 80042ec:	f001 ffe2 	bl	80062b4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	4619      	mov	r1, r3
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f004 fab8 	bl	800886c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3720      	adds	r7, #32
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	4f54300a 	.word	0x4f54300a
 800430c:	4f54310a 	.word	0x4f54310a

08004310 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	333c      	adds	r3, #60	@ 0x3c
 8004328:	3304      	adds	r3, #4
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	015a      	lsls	r2, r3, #5
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	4413      	add	r3, r2
 8004336:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	4a15      	ldr	r2, [pc, #84]	@ (8004398 <PCD_EP_OutSetupPacket_int+0x88>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d90e      	bls.n	8004364 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800434c:	2b00      	cmp	r3, #0
 800434e:	d009      	beq.n	8004364 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	015a      	lsls	r2, r3, #5
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	4413      	add	r3, r2
 8004358:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800435c:	461a      	mov	r2, r3
 800435e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004362:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f004 fa6f 	bl	8008848 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	4a0a      	ldr	r2, [pc, #40]	@ (8004398 <PCD_EP_OutSetupPacket_int+0x88>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d90c      	bls.n	800438c <PCD_EP_OutSetupPacket_int+0x7c>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	799b      	ldrb	r3, [r3, #6]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d108      	bne.n	800438c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6818      	ldr	r0, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004384:	461a      	mov	r2, r3
 8004386:	2101      	movs	r1, #1
 8004388:	f001 ff94 	bl	80062b4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3718      	adds	r7, #24
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	4f54300a 	.word	0x4f54300a

0800439c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800439c:	b480      	push	{r7}
 800439e:	b085      	sub	sp, #20
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	460b      	mov	r3, r1
 80043a6:	70fb      	strb	r3, [r7, #3]
 80043a8:	4613      	mov	r3, r2
 80043aa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80043b4:	78fb      	ldrb	r3, [r7, #3]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d107      	bne.n	80043ca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80043ba:	883b      	ldrh	r3, [r7, #0]
 80043bc:	0419      	lsls	r1, r3, #16
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68ba      	ldr	r2, [r7, #8]
 80043c4:	430a      	orrs	r2, r1
 80043c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80043c8:	e028      	b.n	800441c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043d0:	0c1b      	lsrs	r3, r3, #16
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	4413      	add	r3, r2
 80043d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80043d8:	2300      	movs	r3, #0
 80043da:	73fb      	strb	r3, [r7, #15]
 80043dc:	e00d      	b.n	80043fa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	7bfb      	ldrb	r3, [r7, #15]
 80043e4:	3340      	adds	r3, #64	@ 0x40
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	4413      	add	r3, r2
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	0c1b      	lsrs	r3, r3, #16
 80043ee:	68ba      	ldr	r2, [r7, #8]
 80043f0:	4413      	add	r3, r2
 80043f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80043f4:	7bfb      	ldrb	r3, [r7, #15]
 80043f6:	3301      	adds	r3, #1
 80043f8:	73fb      	strb	r3, [r7, #15]
 80043fa:	7bfa      	ldrb	r2, [r7, #15]
 80043fc:	78fb      	ldrb	r3, [r7, #3]
 80043fe:	3b01      	subs	r3, #1
 8004400:	429a      	cmp	r2, r3
 8004402:	d3ec      	bcc.n	80043de <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004404:	883b      	ldrh	r3, [r7, #0]
 8004406:	0418      	lsls	r0, r3, #16
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6819      	ldr	r1, [r3, #0]
 800440c:	78fb      	ldrb	r3, [r7, #3]
 800440e:	3b01      	subs	r3, #1
 8004410:	68ba      	ldr	r2, [r7, #8]
 8004412:	4302      	orrs	r2, r0
 8004414:	3340      	adds	r3, #64	@ 0x40
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	440b      	add	r3, r1
 800441a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3714      	adds	r7, #20
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr

0800442a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800442a:	b480      	push	{r7}
 800442c:	b083      	sub	sp, #12
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
 8004432:	460b      	mov	r3, r1
 8004434:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	887a      	ldrh	r2, [r7, #2]
 800443c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	460b      	mov	r3, r1
 8004456:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e267      	b.n	8004946 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	2b00      	cmp	r3, #0
 8004480:	d075      	beq.n	800456e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004482:	4b88      	ldr	r3, [pc, #544]	@ (80046a4 <HAL_RCC_OscConfig+0x240>)
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f003 030c 	and.w	r3, r3, #12
 800448a:	2b04      	cmp	r3, #4
 800448c:	d00c      	beq.n	80044a8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800448e:	4b85      	ldr	r3, [pc, #532]	@ (80046a4 <HAL_RCC_OscConfig+0x240>)
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004496:	2b08      	cmp	r3, #8
 8004498:	d112      	bne.n	80044c0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800449a:	4b82      	ldr	r3, [pc, #520]	@ (80046a4 <HAL_RCC_OscConfig+0x240>)
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044a6:	d10b      	bne.n	80044c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044a8:	4b7e      	ldr	r3, [pc, #504]	@ (80046a4 <HAL_RCC_OscConfig+0x240>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d05b      	beq.n	800456c <HAL_RCC_OscConfig+0x108>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d157      	bne.n	800456c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e242      	b.n	8004946 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044c8:	d106      	bne.n	80044d8 <HAL_RCC_OscConfig+0x74>
 80044ca:	4b76      	ldr	r3, [pc, #472]	@ (80046a4 <HAL_RCC_OscConfig+0x240>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a75      	ldr	r2, [pc, #468]	@ (80046a4 <HAL_RCC_OscConfig+0x240>)
 80044d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044d4:	6013      	str	r3, [r2, #0]
 80044d6:	e01d      	b.n	8004514 <HAL_RCC_OscConfig+0xb0>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044e0:	d10c      	bne.n	80044fc <HAL_RCC_OscConfig+0x98>
 80044e2:	4b70      	ldr	r3, [pc, #448]	@ (80046a4 <HAL_RCC_OscConfig+0x240>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a6f      	ldr	r2, [pc, #444]	@ (80046a4 <HAL_RCC_OscConfig+0x240>)
 80044e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044ec:	6013      	str	r3, [r2, #0]
 80044ee:	4b6d      	ldr	r3, [pc, #436]	@ (80046a4 <HAL_RCC_OscConfig+0x240>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a6c      	ldr	r2, [pc, #432]	@ (80046a4 <HAL_RCC_OscConfig+0x240>)
 80044f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044f8:	6013      	str	r3, [r2, #0]
 80044fa:	e00b      	b.n	8004514 <HAL_RCC_OscConfig+0xb0>
 80044fc:	4b69      	ldr	r3, [pc, #420]	@ (80046a4 <HAL_RCC_OscConfig+0x240>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a68      	ldr	r2, [pc, #416]	@ (80046a4 <HAL_RCC_OscConfig+0x240>)
 8004502:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004506:	6013      	str	r3, [r2, #0]
 8004508:	4b66      	ldr	r3, [pc, #408]	@ (80046a4 <HAL_RCC_OscConfig+0x240>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a65      	ldr	r2, [pc, #404]	@ (80046a4 <HAL_RCC_OscConfig+0x240>)
 800450e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004512:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d013      	beq.n	8004544 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800451c:	f7fd fbe2 	bl	8001ce4 <HAL_GetTick>
 8004520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004522:	e008      	b.n	8004536 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004524:	f7fd fbde 	bl	8001ce4 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b64      	cmp	r3, #100	@ 0x64
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e207      	b.n	8004946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004536:	4b5b      	ldr	r3, [pc, #364]	@ (80046a4 <HAL_RCC_OscConfig+0x240>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d0f0      	beq.n	8004524 <HAL_RCC_OscConfig+0xc0>
 8004542:	e014      	b.n	800456e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004544:	f7fd fbce 	bl	8001ce4 <HAL_GetTick>
 8004548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800454a:	e008      	b.n	800455e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800454c:	f7fd fbca 	bl	8001ce4 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b64      	cmp	r3, #100	@ 0x64
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e1f3      	b.n	8004946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800455e:	4b51      	ldr	r3, [pc, #324]	@ (80046a4 <HAL_RCC_OscConfig+0x240>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1f0      	bne.n	800454c <HAL_RCC_OscConfig+0xe8>
 800456a:	e000      	b.n	800456e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800456c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d063      	beq.n	8004642 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800457a:	4b4a      	ldr	r3, [pc, #296]	@ (80046a4 <HAL_RCC_OscConfig+0x240>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f003 030c 	and.w	r3, r3, #12
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00b      	beq.n	800459e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004586:	4b47      	ldr	r3, [pc, #284]	@ (80046a4 <HAL_RCC_OscConfig+0x240>)
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800458e:	2b08      	cmp	r3, #8
 8004590:	d11c      	bne.n	80045cc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004592:	4b44      	ldr	r3, [pc, #272]	@ (80046a4 <HAL_RCC_OscConfig+0x240>)
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d116      	bne.n	80045cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800459e:	4b41      	ldr	r3, [pc, #260]	@ (80046a4 <HAL_RCC_OscConfig+0x240>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0302 	and.w	r3, r3, #2
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d005      	beq.n	80045b6 <HAL_RCC_OscConfig+0x152>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d001      	beq.n	80045b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e1c7      	b.n	8004946 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045b6:	4b3b      	ldr	r3, [pc, #236]	@ (80046a4 <HAL_RCC_OscConfig+0x240>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	00db      	lsls	r3, r3, #3
 80045c4:	4937      	ldr	r1, [pc, #220]	@ (80046a4 <HAL_RCC_OscConfig+0x240>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045ca:	e03a      	b.n	8004642 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d020      	beq.n	8004616 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045d4:	4b34      	ldr	r3, [pc, #208]	@ (80046a8 <HAL_RCC_OscConfig+0x244>)
 80045d6:	2201      	movs	r2, #1
 80045d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045da:	f7fd fb83 	bl	8001ce4 <HAL_GetTick>
 80045de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045e0:	e008      	b.n	80045f4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045e2:	f7fd fb7f 	bl	8001ce4 <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d901      	bls.n	80045f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e1a8      	b.n	8004946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045f4:	4b2b      	ldr	r3, [pc, #172]	@ (80046a4 <HAL_RCC_OscConfig+0x240>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d0f0      	beq.n	80045e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004600:	4b28      	ldr	r3, [pc, #160]	@ (80046a4 <HAL_RCC_OscConfig+0x240>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	00db      	lsls	r3, r3, #3
 800460e:	4925      	ldr	r1, [pc, #148]	@ (80046a4 <HAL_RCC_OscConfig+0x240>)
 8004610:	4313      	orrs	r3, r2
 8004612:	600b      	str	r3, [r1, #0]
 8004614:	e015      	b.n	8004642 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004616:	4b24      	ldr	r3, [pc, #144]	@ (80046a8 <HAL_RCC_OscConfig+0x244>)
 8004618:	2200      	movs	r2, #0
 800461a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800461c:	f7fd fb62 	bl	8001ce4 <HAL_GetTick>
 8004620:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004622:	e008      	b.n	8004636 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004624:	f7fd fb5e 	bl	8001ce4 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b02      	cmp	r3, #2
 8004630:	d901      	bls.n	8004636 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e187      	b.n	8004946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004636:	4b1b      	ldr	r3, [pc, #108]	@ (80046a4 <HAL_RCC_OscConfig+0x240>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1f0      	bne.n	8004624 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0308 	and.w	r3, r3, #8
 800464a:	2b00      	cmp	r3, #0
 800464c:	d036      	beq.n	80046bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d016      	beq.n	8004684 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004656:	4b15      	ldr	r3, [pc, #84]	@ (80046ac <HAL_RCC_OscConfig+0x248>)
 8004658:	2201      	movs	r2, #1
 800465a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800465c:	f7fd fb42 	bl	8001ce4 <HAL_GetTick>
 8004660:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004662:	e008      	b.n	8004676 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004664:	f7fd fb3e 	bl	8001ce4 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b02      	cmp	r3, #2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e167      	b.n	8004946 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004676:	4b0b      	ldr	r3, [pc, #44]	@ (80046a4 <HAL_RCC_OscConfig+0x240>)
 8004678:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d0f0      	beq.n	8004664 <HAL_RCC_OscConfig+0x200>
 8004682:	e01b      	b.n	80046bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004684:	4b09      	ldr	r3, [pc, #36]	@ (80046ac <HAL_RCC_OscConfig+0x248>)
 8004686:	2200      	movs	r2, #0
 8004688:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800468a:	f7fd fb2b 	bl	8001ce4 <HAL_GetTick>
 800468e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004690:	e00e      	b.n	80046b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004692:	f7fd fb27 	bl	8001ce4 <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	2b02      	cmp	r3, #2
 800469e:	d907      	bls.n	80046b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e150      	b.n	8004946 <HAL_RCC_OscConfig+0x4e2>
 80046a4:	40023800 	.word	0x40023800
 80046a8:	42470000 	.word	0x42470000
 80046ac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046b0:	4b88      	ldr	r3, [pc, #544]	@ (80048d4 <HAL_RCC_OscConfig+0x470>)
 80046b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1ea      	bne.n	8004692 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0304 	and.w	r3, r3, #4
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	f000 8097 	beq.w	80047f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046ca:	2300      	movs	r3, #0
 80046cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046ce:	4b81      	ldr	r3, [pc, #516]	@ (80048d4 <HAL_RCC_OscConfig+0x470>)
 80046d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10f      	bne.n	80046fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046da:	2300      	movs	r3, #0
 80046dc:	60bb      	str	r3, [r7, #8]
 80046de:	4b7d      	ldr	r3, [pc, #500]	@ (80048d4 <HAL_RCC_OscConfig+0x470>)
 80046e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046e2:	4a7c      	ldr	r2, [pc, #496]	@ (80048d4 <HAL_RCC_OscConfig+0x470>)
 80046e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80046ea:	4b7a      	ldr	r3, [pc, #488]	@ (80048d4 <HAL_RCC_OscConfig+0x470>)
 80046ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046f2:	60bb      	str	r3, [r7, #8]
 80046f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046f6:	2301      	movs	r3, #1
 80046f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046fa:	4b77      	ldr	r3, [pc, #476]	@ (80048d8 <HAL_RCC_OscConfig+0x474>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004702:	2b00      	cmp	r3, #0
 8004704:	d118      	bne.n	8004738 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004706:	4b74      	ldr	r3, [pc, #464]	@ (80048d8 <HAL_RCC_OscConfig+0x474>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a73      	ldr	r2, [pc, #460]	@ (80048d8 <HAL_RCC_OscConfig+0x474>)
 800470c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004710:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004712:	f7fd fae7 	bl	8001ce4 <HAL_GetTick>
 8004716:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004718:	e008      	b.n	800472c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800471a:	f7fd fae3 	bl	8001ce4 <HAL_GetTick>
 800471e:	4602      	mov	r2, r0
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	2b02      	cmp	r3, #2
 8004726:	d901      	bls.n	800472c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e10c      	b.n	8004946 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800472c:	4b6a      	ldr	r3, [pc, #424]	@ (80048d8 <HAL_RCC_OscConfig+0x474>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004734:	2b00      	cmp	r3, #0
 8004736:	d0f0      	beq.n	800471a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d106      	bne.n	800474e <HAL_RCC_OscConfig+0x2ea>
 8004740:	4b64      	ldr	r3, [pc, #400]	@ (80048d4 <HAL_RCC_OscConfig+0x470>)
 8004742:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004744:	4a63      	ldr	r2, [pc, #396]	@ (80048d4 <HAL_RCC_OscConfig+0x470>)
 8004746:	f043 0301 	orr.w	r3, r3, #1
 800474a:	6713      	str	r3, [r2, #112]	@ 0x70
 800474c:	e01c      	b.n	8004788 <HAL_RCC_OscConfig+0x324>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	2b05      	cmp	r3, #5
 8004754:	d10c      	bne.n	8004770 <HAL_RCC_OscConfig+0x30c>
 8004756:	4b5f      	ldr	r3, [pc, #380]	@ (80048d4 <HAL_RCC_OscConfig+0x470>)
 8004758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800475a:	4a5e      	ldr	r2, [pc, #376]	@ (80048d4 <HAL_RCC_OscConfig+0x470>)
 800475c:	f043 0304 	orr.w	r3, r3, #4
 8004760:	6713      	str	r3, [r2, #112]	@ 0x70
 8004762:	4b5c      	ldr	r3, [pc, #368]	@ (80048d4 <HAL_RCC_OscConfig+0x470>)
 8004764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004766:	4a5b      	ldr	r2, [pc, #364]	@ (80048d4 <HAL_RCC_OscConfig+0x470>)
 8004768:	f043 0301 	orr.w	r3, r3, #1
 800476c:	6713      	str	r3, [r2, #112]	@ 0x70
 800476e:	e00b      	b.n	8004788 <HAL_RCC_OscConfig+0x324>
 8004770:	4b58      	ldr	r3, [pc, #352]	@ (80048d4 <HAL_RCC_OscConfig+0x470>)
 8004772:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004774:	4a57      	ldr	r2, [pc, #348]	@ (80048d4 <HAL_RCC_OscConfig+0x470>)
 8004776:	f023 0301 	bic.w	r3, r3, #1
 800477a:	6713      	str	r3, [r2, #112]	@ 0x70
 800477c:	4b55      	ldr	r3, [pc, #340]	@ (80048d4 <HAL_RCC_OscConfig+0x470>)
 800477e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004780:	4a54      	ldr	r2, [pc, #336]	@ (80048d4 <HAL_RCC_OscConfig+0x470>)
 8004782:	f023 0304 	bic.w	r3, r3, #4
 8004786:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d015      	beq.n	80047bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004790:	f7fd faa8 	bl	8001ce4 <HAL_GetTick>
 8004794:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004796:	e00a      	b.n	80047ae <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004798:	f7fd faa4 	bl	8001ce4 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e0cb      	b.n	8004946 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ae:	4b49      	ldr	r3, [pc, #292]	@ (80048d4 <HAL_RCC_OscConfig+0x470>)
 80047b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d0ee      	beq.n	8004798 <HAL_RCC_OscConfig+0x334>
 80047ba:	e014      	b.n	80047e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047bc:	f7fd fa92 	bl	8001ce4 <HAL_GetTick>
 80047c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047c2:	e00a      	b.n	80047da <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047c4:	f7fd fa8e 	bl	8001ce4 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d901      	bls.n	80047da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e0b5      	b.n	8004946 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047da:	4b3e      	ldr	r3, [pc, #248]	@ (80048d4 <HAL_RCC_OscConfig+0x470>)
 80047dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1ee      	bne.n	80047c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80047e6:	7dfb      	ldrb	r3, [r7, #23]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d105      	bne.n	80047f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047ec:	4b39      	ldr	r3, [pc, #228]	@ (80048d4 <HAL_RCC_OscConfig+0x470>)
 80047ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f0:	4a38      	ldr	r2, [pc, #224]	@ (80048d4 <HAL_RCC_OscConfig+0x470>)
 80047f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f000 80a1 	beq.w	8004944 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004802:	4b34      	ldr	r3, [pc, #208]	@ (80048d4 <HAL_RCC_OscConfig+0x470>)
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f003 030c 	and.w	r3, r3, #12
 800480a:	2b08      	cmp	r3, #8
 800480c:	d05c      	beq.n	80048c8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	2b02      	cmp	r3, #2
 8004814:	d141      	bne.n	800489a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004816:	4b31      	ldr	r3, [pc, #196]	@ (80048dc <HAL_RCC_OscConfig+0x478>)
 8004818:	2200      	movs	r2, #0
 800481a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800481c:	f7fd fa62 	bl	8001ce4 <HAL_GetTick>
 8004820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004822:	e008      	b.n	8004836 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004824:	f7fd fa5e 	bl	8001ce4 <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	2b02      	cmp	r3, #2
 8004830:	d901      	bls.n	8004836 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e087      	b.n	8004946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004836:	4b27      	ldr	r3, [pc, #156]	@ (80048d4 <HAL_RCC_OscConfig+0x470>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1f0      	bne.n	8004824 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	69da      	ldr	r2, [r3, #28]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	431a      	orrs	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004850:	019b      	lsls	r3, r3, #6
 8004852:	431a      	orrs	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004858:	085b      	lsrs	r3, r3, #1
 800485a:	3b01      	subs	r3, #1
 800485c:	041b      	lsls	r3, r3, #16
 800485e:	431a      	orrs	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004864:	061b      	lsls	r3, r3, #24
 8004866:	491b      	ldr	r1, [pc, #108]	@ (80048d4 <HAL_RCC_OscConfig+0x470>)
 8004868:	4313      	orrs	r3, r2
 800486a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800486c:	4b1b      	ldr	r3, [pc, #108]	@ (80048dc <HAL_RCC_OscConfig+0x478>)
 800486e:	2201      	movs	r2, #1
 8004870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004872:	f7fd fa37 	bl	8001ce4 <HAL_GetTick>
 8004876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004878:	e008      	b.n	800488c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800487a:	f7fd fa33 	bl	8001ce4 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b02      	cmp	r3, #2
 8004886:	d901      	bls.n	800488c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e05c      	b.n	8004946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800488c:	4b11      	ldr	r3, [pc, #68]	@ (80048d4 <HAL_RCC_OscConfig+0x470>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d0f0      	beq.n	800487a <HAL_RCC_OscConfig+0x416>
 8004898:	e054      	b.n	8004944 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800489a:	4b10      	ldr	r3, [pc, #64]	@ (80048dc <HAL_RCC_OscConfig+0x478>)
 800489c:	2200      	movs	r2, #0
 800489e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a0:	f7fd fa20 	bl	8001ce4 <HAL_GetTick>
 80048a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048a6:	e008      	b.n	80048ba <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048a8:	f7fd fa1c 	bl	8001ce4 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e045      	b.n	8004946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ba:	4b06      	ldr	r3, [pc, #24]	@ (80048d4 <HAL_RCC_OscConfig+0x470>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1f0      	bne.n	80048a8 <HAL_RCC_OscConfig+0x444>
 80048c6:	e03d      	b.n	8004944 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d107      	bne.n	80048e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e038      	b.n	8004946 <HAL_RCC_OscConfig+0x4e2>
 80048d4:	40023800 	.word	0x40023800
 80048d8:	40007000 	.word	0x40007000
 80048dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80048e0:	4b1b      	ldr	r3, [pc, #108]	@ (8004950 <HAL_RCC_OscConfig+0x4ec>)
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	699b      	ldr	r3, [r3, #24]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d028      	beq.n	8004940 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d121      	bne.n	8004940 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004906:	429a      	cmp	r2, r3
 8004908:	d11a      	bne.n	8004940 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004910:	4013      	ands	r3, r2
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004916:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004918:	4293      	cmp	r3, r2
 800491a:	d111      	bne.n	8004940 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004926:	085b      	lsrs	r3, r3, #1
 8004928:	3b01      	subs	r3, #1
 800492a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800492c:	429a      	cmp	r2, r3
 800492e:	d107      	bne.n	8004940 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800493a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800493c:	429a      	cmp	r2, r3
 800493e:	d001      	beq.n	8004944 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e000      	b.n	8004946 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3718      	adds	r7, #24
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	40023800 	.word	0x40023800

08004954 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d101      	bne.n	8004968 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e0cc      	b.n	8004b02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004968:	4b68      	ldr	r3, [pc, #416]	@ (8004b0c <HAL_RCC_ClockConfig+0x1b8>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0307 	and.w	r3, r3, #7
 8004970:	683a      	ldr	r2, [r7, #0]
 8004972:	429a      	cmp	r2, r3
 8004974:	d90c      	bls.n	8004990 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004976:	4b65      	ldr	r3, [pc, #404]	@ (8004b0c <HAL_RCC_ClockConfig+0x1b8>)
 8004978:	683a      	ldr	r2, [r7, #0]
 800497a:	b2d2      	uxtb	r2, r2
 800497c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800497e:	4b63      	ldr	r3, [pc, #396]	@ (8004b0c <HAL_RCC_ClockConfig+0x1b8>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0307 	and.w	r3, r3, #7
 8004986:	683a      	ldr	r2, [r7, #0]
 8004988:	429a      	cmp	r2, r3
 800498a:	d001      	beq.n	8004990 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e0b8      	b.n	8004b02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0302 	and.w	r3, r3, #2
 8004998:	2b00      	cmp	r3, #0
 800499a:	d020      	beq.n	80049de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0304 	and.w	r3, r3, #4
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d005      	beq.n	80049b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049a8:	4b59      	ldr	r3, [pc, #356]	@ (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	4a58      	ldr	r2, [pc, #352]	@ (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 80049ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80049b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0308 	and.w	r3, r3, #8
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d005      	beq.n	80049cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049c0:	4b53      	ldr	r3, [pc, #332]	@ (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	4a52      	ldr	r2, [pc, #328]	@ (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 80049c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80049ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049cc:	4b50      	ldr	r3, [pc, #320]	@ (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	494d      	ldr	r1, [pc, #308]	@ (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0301 	and.w	r3, r3, #1
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d044      	beq.n	8004a74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d107      	bne.n	8004a02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049f2:	4b47      	ldr	r3, [pc, #284]	@ (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d119      	bne.n	8004a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e07f      	b.n	8004b02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d003      	beq.n	8004a12 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a0e:	2b03      	cmp	r3, #3
 8004a10:	d107      	bne.n	8004a22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a12:	4b3f      	ldr	r3, [pc, #252]	@ (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d109      	bne.n	8004a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e06f      	b.n	8004b02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a22:	4b3b      	ldr	r3, [pc, #236]	@ (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0302 	and.w	r3, r3, #2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e067      	b.n	8004b02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a32:	4b37      	ldr	r3, [pc, #220]	@ (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f023 0203 	bic.w	r2, r3, #3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	4934      	ldr	r1, [pc, #208]	@ (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a44:	f7fd f94e 	bl	8001ce4 <HAL_GetTick>
 8004a48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a4a:	e00a      	b.n	8004a62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a4c:	f7fd f94a 	bl	8001ce4 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e04f      	b.n	8004b02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a62:	4b2b      	ldr	r3, [pc, #172]	@ (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f003 020c 	and.w	r2, r3, #12
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d1eb      	bne.n	8004a4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a74:	4b25      	ldr	r3, [pc, #148]	@ (8004b0c <HAL_RCC_ClockConfig+0x1b8>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0307 	and.w	r3, r3, #7
 8004a7c:	683a      	ldr	r2, [r7, #0]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d20c      	bcs.n	8004a9c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a82:	4b22      	ldr	r3, [pc, #136]	@ (8004b0c <HAL_RCC_ClockConfig+0x1b8>)
 8004a84:	683a      	ldr	r2, [r7, #0]
 8004a86:	b2d2      	uxtb	r2, r2
 8004a88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a8a:	4b20      	ldr	r3, [pc, #128]	@ (8004b0c <HAL_RCC_ClockConfig+0x1b8>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0307 	and.w	r3, r3, #7
 8004a92:	683a      	ldr	r2, [r7, #0]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d001      	beq.n	8004a9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e032      	b.n	8004b02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0304 	and.w	r3, r3, #4
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d008      	beq.n	8004aba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004aa8:	4b19      	ldr	r3, [pc, #100]	@ (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	4916      	ldr	r1, [pc, #88]	@ (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0308 	and.w	r3, r3, #8
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d009      	beq.n	8004ada <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ac6:	4b12      	ldr	r3, [pc, #72]	@ (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	00db      	lsls	r3, r3, #3
 8004ad4:	490e      	ldr	r1, [pc, #56]	@ (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ada:	f000 f821 	bl	8004b20 <HAL_RCC_GetSysClockFreq>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	091b      	lsrs	r3, r3, #4
 8004ae6:	f003 030f 	and.w	r3, r3, #15
 8004aea:	490a      	ldr	r1, [pc, #40]	@ (8004b14 <HAL_RCC_ClockConfig+0x1c0>)
 8004aec:	5ccb      	ldrb	r3, [r1, r3]
 8004aee:	fa22 f303 	lsr.w	r3, r2, r3
 8004af2:	4a09      	ldr	r2, [pc, #36]	@ (8004b18 <HAL_RCC_ClockConfig+0x1c4>)
 8004af4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004af6:	4b09      	ldr	r3, [pc, #36]	@ (8004b1c <HAL_RCC_ClockConfig+0x1c8>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7fd f8ae 	bl	8001c5c <HAL_InitTick>

  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3710      	adds	r7, #16
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	40023c00 	.word	0x40023c00
 8004b10:	40023800 	.word	0x40023800
 8004b14:	0800980c 	.word	0x0800980c
 8004b18:	20000000 	.word	0x20000000
 8004b1c:	20000004 	.word	0x20000004

08004b20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b24:	b094      	sub	sp, #80	@ 0x50
 8004b26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004b30:	2300      	movs	r3, #0
 8004b32:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004b34:	2300      	movs	r3, #0
 8004b36:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b38:	4b79      	ldr	r3, [pc, #484]	@ (8004d20 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f003 030c 	and.w	r3, r3, #12
 8004b40:	2b08      	cmp	r3, #8
 8004b42:	d00d      	beq.n	8004b60 <HAL_RCC_GetSysClockFreq+0x40>
 8004b44:	2b08      	cmp	r3, #8
 8004b46:	f200 80e1 	bhi.w	8004d0c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d002      	beq.n	8004b54 <HAL_RCC_GetSysClockFreq+0x34>
 8004b4e:	2b04      	cmp	r3, #4
 8004b50:	d003      	beq.n	8004b5a <HAL_RCC_GetSysClockFreq+0x3a>
 8004b52:	e0db      	b.n	8004d0c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b54:	4b73      	ldr	r3, [pc, #460]	@ (8004d24 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b56:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b58:	e0db      	b.n	8004d12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b5a:	4b73      	ldr	r3, [pc, #460]	@ (8004d28 <HAL_RCC_GetSysClockFreq+0x208>)
 8004b5c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b5e:	e0d8      	b.n	8004d12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b60:	4b6f      	ldr	r3, [pc, #444]	@ (8004d20 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b68:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b6a:	4b6d      	ldr	r3, [pc, #436]	@ (8004d20 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d063      	beq.n	8004c3e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b76:	4b6a      	ldr	r3, [pc, #424]	@ (8004d20 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	099b      	lsrs	r3, r3, #6
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b80:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b88:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004b92:	4622      	mov	r2, r4
 8004b94:	462b      	mov	r3, r5
 8004b96:	f04f 0000 	mov.w	r0, #0
 8004b9a:	f04f 0100 	mov.w	r1, #0
 8004b9e:	0159      	lsls	r1, r3, #5
 8004ba0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ba4:	0150      	lsls	r0, r2, #5
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	460b      	mov	r3, r1
 8004baa:	4621      	mov	r1, r4
 8004bac:	1a51      	subs	r1, r2, r1
 8004bae:	6139      	str	r1, [r7, #16]
 8004bb0:	4629      	mov	r1, r5
 8004bb2:	eb63 0301 	sbc.w	r3, r3, r1
 8004bb6:	617b      	str	r3, [r7, #20]
 8004bb8:	f04f 0200 	mov.w	r2, #0
 8004bbc:	f04f 0300 	mov.w	r3, #0
 8004bc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004bc4:	4659      	mov	r1, fp
 8004bc6:	018b      	lsls	r3, r1, #6
 8004bc8:	4651      	mov	r1, sl
 8004bca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004bce:	4651      	mov	r1, sl
 8004bd0:	018a      	lsls	r2, r1, #6
 8004bd2:	4651      	mov	r1, sl
 8004bd4:	ebb2 0801 	subs.w	r8, r2, r1
 8004bd8:	4659      	mov	r1, fp
 8004bda:	eb63 0901 	sbc.w	r9, r3, r1
 8004bde:	f04f 0200 	mov.w	r2, #0
 8004be2:	f04f 0300 	mov.w	r3, #0
 8004be6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bf2:	4690      	mov	r8, r2
 8004bf4:	4699      	mov	r9, r3
 8004bf6:	4623      	mov	r3, r4
 8004bf8:	eb18 0303 	adds.w	r3, r8, r3
 8004bfc:	60bb      	str	r3, [r7, #8]
 8004bfe:	462b      	mov	r3, r5
 8004c00:	eb49 0303 	adc.w	r3, r9, r3
 8004c04:	60fb      	str	r3, [r7, #12]
 8004c06:	f04f 0200 	mov.w	r2, #0
 8004c0a:	f04f 0300 	mov.w	r3, #0
 8004c0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c12:	4629      	mov	r1, r5
 8004c14:	024b      	lsls	r3, r1, #9
 8004c16:	4621      	mov	r1, r4
 8004c18:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c1c:	4621      	mov	r1, r4
 8004c1e:	024a      	lsls	r2, r1, #9
 8004c20:	4610      	mov	r0, r2
 8004c22:	4619      	mov	r1, r3
 8004c24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c26:	2200      	movs	r2, #0
 8004c28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c30:	f7fb fb26 	bl	8000280 <__aeabi_uldivmod>
 8004c34:	4602      	mov	r2, r0
 8004c36:	460b      	mov	r3, r1
 8004c38:	4613      	mov	r3, r2
 8004c3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c3c:	e058      	b.n	8004cf0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c3e:	4b38      	ldr	r3, [pc, #224]	@ (8004d20 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	099b      	lsrs	r3, r3, #6
 8004c44:	2200      	movs	r2, #0
 8004c46:	4618      	mov	r0, r3
 8004c48:	4611      	mov	r1, r2
 8004c4a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c4e:	623b      	str	r3, [r7, #32]
 8004c50:	2300      	movs	r3, #0
 8004c52:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004c58:	4642      	mov	r2, r8
 8004c5a:	464b      	mov	r3, r9
 8004c5c:	f04f 0000 	mov.w	r0, #0
 8004c60:	f04f 0100 	mov.w	r1, #0
 8004c64:	0159      	lsls	r1, r3, #5
 8004c66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c6a:	0150      	lsls	r0, r2, #5
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	460b      	mov	r3, r1
 8004c70:	4641      	mov	r1, r8
 8004c72:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c76:	4649      	mov	r1, r9
 8004c78:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c7c:	f04f 0200 	mov.w	r2, #0
 8004c80:	f04f 0300 	mov.w	r3, #0
 8004c84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004c88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004c8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004c90:	ebb2 040a 	subs.w	r4, r2, sl
 8004c94:	eb63 050b 	sbc.w	r5, r3, fp
 8004c98:	f04f 0200 	mov.w	r2, #0
 8004c9c:	f04f 0300 	mov.w	r3, #0
 8004ca0:	00eb      	lsls	r3, r5, #3
 8004ca2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ca6:	00e2      	lsls	r2, r4, #3
 8004ca8:	4614      	mov	r4, r2
 8004caa:	461d      	mov	r5, r3
 8004cac:	4643      	mov	r3, r8
 8004cae:	18e3      	adds	r3, r4, r3
 8004cb0:	603b      	str	r3, [r7, #0]
 8004cb2:	464b      	mov	r3, r9
 8004cb4:	eb45 0303 	adc.w	r3, r5, r3
 8004cb8:	607b      	str	r3, [r7, #4]
 8004cba:	f04f 0200 	mov.w	r2, #0
 8004cbe:	f04f 0300 	mov.w	r3, #0
 8004cc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004cc6:	4629      	mov	r1, r5
 8004cc8:	028b      	lsls	r3, r1, #10
 8004cca:	4621      	mov	r1, r4
 8004ccc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004cd0:	4621      	mov	r1, r4
 8004cd2:	028a      	lsls	r2, r1, #10
 8004cd4:	4610      	mov	r0, r2
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cda:	2200      	movs	r2, #0
 8004cdc:	61bb      	str	r3, [r7, #24]
 8004cde:	61fa      	str	r2, [r7, #28]
 8004ce0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ce4:	f7fb facc 	bl	8000280 <__aeabi_uldivmod>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	460b      	mov	r3, r1
 8004cec:	4613      	mov	r3, r2
 8004cee:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8004d20 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	0c1b      	lsrs	r3, r3, #16
 8004cf6:	f003 0303 	and.w	r3, r3, #3
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	005b      	lsls	r3, r3, #1
 8004cfe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004d00:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d08:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d0a:	e002      	b.n	8004d12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d0c:	4b05      	ldr	r3, [pc, #20]	@ (8004d24 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d0e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3750      	adds	r7, #80	@ 0x50
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d1e:	bf00      	nop
 8004d20:	40023800 	.word	0x40023800
 8004d24:	00f42400 	.word	0x00f42400
 8004d28:	007a1200 	.word	0x007a1200

08004d2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d30:	4b03      	ldr	r3, [pc, #12]	@ (8004d40 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d32:	681b      	ldr	r3, [r3, #0]
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	20000000 	.word	0x20000000

08004d44 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d44:	b084      	sub	sp, #16
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b084      	sub	sp, #16
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
 8004d4e:	f107 001c 	add.w	r0, r7, #28
 8004d52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d56:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d123      	bne.n	8004da6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d62:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004d72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004d86:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d105      	bne.n	8004d9a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f001 fae8 	bl	8006370 <USB_CoreReset>
 8004da0:	4603      	mov	r3, r0
 8004da2:	73fb      	strb	r3, [r7, #15]
 8004da4:	e01b      	b.n	8004dde <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f001 fadc 	bl	8006370 <USB_CoreReset>
 8004db8:	4603      	mov	r3, r0
 8004dba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004dbc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d106      	bne.n	8004dd2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dc8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	639a      	str	r2, [r3, #56]	@ 0x38
 8004dd0:	e005      	b.n	8004dde <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dd6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004dde:	7fbb      	ldrb	r3, [r7, #30]
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d10b      	bne.n	8004dfc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f043 0206 	orr.w	r2, r3, #6
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f043 0220 	orr.w	r2, r3, #32
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3710      	adds	r7, #16
 8004e02:	46bd      	mov	sp, r7
 8004e04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e08:	b004      	add	sp, #16
 8004e0a:	4770      	bx	lr

08004e0c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b087      	sub	sp, #28
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	4613      	mov	r3, r2
 8004e18:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004e1a:	79fb      	ldrb	r3, [r7, #7]
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d165      	bne.n	8004eec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	4a41      	ldr	r2, [pc, #260]	@ (8004f28 <USB_SetTurnaroundTime+0x11c>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d906      	bls.n	8004e36 <USB_SetTurnaroundTime+0x2a>
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	4a40      	ldr	r2, [pc, #256]	@ (8004f2c <USB_SetTurnaroundTime+0x120>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d202      	bcs.n	8004e36 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004e30:	230f      	movs	r3, #15
 8004e32:	617b      	str	r3, [r7, #20]
 8004e34:	e062      	b.n	8004efc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	4a3c      	ldr	r2, [pc, #240]	@ (8004f2c <USB_SetTurnaroundTime+0x120>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d306      	bcc.n	8004e4c <USB_SetTurnaroundTime+0x40>
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	4a3b      	ldr	r2, [pc, #236]	@ (8004f30 <USB_SetTurnaroundTime+0x124>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d202      	bcs.n	8004e4c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004e46:	230e      	movs	r3, #14
 8004e48:	617b      	str	r3, [r7, #20]
 8004e4a:	e057      	b.n	8004efc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	4a38      	ldr	r2, [pc, #224]	@ (8004f30 <USB_SetTurnaroundTime+0x124>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d306      	bcc.n	8004e62 <USB_SetTurnaroundTime+0x56>
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	4a37      	ldr	r2, [pc, #220]	@ (8004f34 <USB_SetTurnaroundTime+0x128>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d202      	bcs.n	8004e62 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004e5c:	230d      	movs	r3, #13
 8004e5e:	617b      	str	r3, [r7, #20]
 8004e60:	e04c      	b.n	8004efc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	4a33      	ldr	r2, [pc, #204]	@ (8004f34 <USB_SetTurnaroundTime+0x128>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d306      	bcc.n	8004e78 <USB_SetTurnaroundTime+0x6c>
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	4a32      	ldr	r2, [pc, #200]	@ (8004f38 <USB_SetTurnaroundTime+0x12c>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d802      	bhi.n	8004e78 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004e72:	230c      	movs	r3, #12
 8004e74:	617b      	str	r3, [r7, #20]
 8004e76:	e041      	b.n	8004efc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	4a2f      	ldr	r2, [pc, #188]	@ (8004f38 <USB_SetTurnaroundTime+0x12c>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d906      	bls.n	8004e8e <USB_SetTurnaroundTime+0x82>
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	4a2e      	ldr	r2, [pc, #184]	@ (8004f3c <USB_SetTurnaroundTime+0x130>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d802      	bhi.n	8004e8e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004e88:	230b      	movs	r3, #11
 8004e8a:	617b      	str	r3, [r7, #20]
 8004e8c:	e036      	b.n	8004efc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	4a2a      	ldr	r2, [pc, #168]	@ (8004f3c <USB_SetTurnaroundTime+0x130>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d906      	bls.n	8004ea4 <USB_SetTurnaroundTime+0x98>
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	4a29      	ldr	r2, [pc, #164]	@ (8004f40 <USB_SetTurnaroundTime+0x134>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d802      	bhi.n	8004ea4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004e9e:	230a      	movs	r3, #10
 8004ea0:	617b      	str	r3, [r7, #20]
 8004ea2:	e02b      	b.n	8004efc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	4a26      	ldr	r2, [pc, #152]	@ (8004f40 <USB_SetTurnaroundTime+0x134>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d906      	bls.n	8004eba <USB_SetTurnaroundTime+0xae>
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	4a25      	ldr	r2, [pc, #148]	@ (8004f44 <USB_SetTurnaroundTime+0x138>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d202      	bcs.n	8004eba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004eb4:	2309      	movs	r3, #9
 8004eb6:	617b      	str	r3, [r7, #20]
 8004eb8:	e020      	b.n	8004efc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	4a21      	ldr	r2, [pc, #132]	@ (8004f44 <USB_SetTurnaroundTime+0x138>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d306      	bcc.n	8004ed0 <USB_SetTurnaroundTime+0xc4>
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	4a20      	ldr	r2, [pc, #128]	@ (8004f48 <USB_SetTurnaroundTime+0x13c>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d802      	bhi.n	8004ed0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004eca:	2308      	movs	r3, #8
 8004ecc:	617b      	str	r3, [r7, #20]
 8004ece:	e015      	b.n	8004efc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	4a1d      	ldr	r2, [pc, #116]	@ (8004f48 <USB_SetTurnaroundTime+0x13c>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d906      	bls.n	8004ee6 <USB_SetTurnaroundTime+0xda>
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	4a1c      	ldr	r2, [pc, #112]	@ (8004f4c <USB_SetTurnaroundTime+0x140>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d202      	bcs.n	8004ee6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004ee0:	2307      	movs	r3, #7
 8004ee2:	617b      	str	r3, [r7, #20]
 8004ee4:	e00a      	b.n	8004efc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004ee6:	2306      	movs	r3, #6
 8004ee8:	617b      	str	r3, [r7, #20]
 8004eea:	e007      	b.n	8004efc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004eec:	79fb      	ldrb	r3, [r7, #7]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d102      	bne.n	8004ef8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004ef2:	2309      	movs	r3, #9
 8004ef4:	617b      	str	r3, [r7, #20]
 8004ef6:	e001      	b.n	8004efc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004ef8:	2309      	movs	r3, #9
 8004efa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	68da      	ldr	r2, [r3, #12]
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	029b      	lsls	r3, r3, #10
 8004f10:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004f14:	431a      	orrs	r2, r3
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	371c      	adds	r7, #28
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr
 8004f28:	00d8acbf 	.word	0x00d8acbf
 8004f2c:	00e4e1c0 	.word	0x00e4e1c0
 8004f30:	00f42400 	.word	0x00f42400
 8004f34:	01067380 	.word	0x01067380
 8004f38:	011a499f 	.word	0x011a499f
 8004f3c:	01312cff 	.word	0x01312cff
 8004f40:	014ca43f 	.word	0x014ca43f
 8004f44:	016e3600 	.word	0x016e3600
 8004f48:	01a6ab1f 	.word	0x01a6ab1f
 8004f4c:	01e84800 	.word	0x01e84800

08004f50 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	f043 0201 	orr.w	r2, r3, #1
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr

08004f72 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b083      	sub	sp, #12
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f023 0201 	bic.w	r2, r3, #1
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004fb0:	78fb      	ldrb	r3, [r7, #3]
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d115      	bne.n	8004fe2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004fc2:	200a      	movs	r0, #10
 8004fc4:	f7fc fe9a 	bl	8001cfc <HAL_Delay>
      ms += 10U;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	330a      	adds	r3, #10
 8004fcc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f001 f93f 	bl	8006252 <USB_GetMode>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d01e      	beq.n	8005018 <USB_SetCurrentMode+0x84>
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2bc7      	cmp	r3, #199	@ 0xc7
 8004fde:	d9f0      	bls.n	8004fc2 <USB_SetCurrentMode+0x2e>
 8004fe0:	e01a      	b.n	8005018 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004fe2:	78fb      	ldrb	r3, [r7, #3]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d115      	bne.n	8005014 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004ff4:	200a      	movs	r0, #10
 8004ff6:	f7fc fe81 	bl	8001cfc <HAL_Delay>
      ms += 10U;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	330a      	adds	r3, #10
 8004ffe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f001 f926 	bl	8006252 <USB_GetMode>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d005      	beq.n	8005018 <USB_SetCurrentMode+0x84>
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2bc7      	cmp	r3, #199	@ 0xc7
 8005010:	d9f0      	bls.n	8004ff4 <USB_SetCurrentMode+0x60>
 8005012:	e001      	b.n	8005018 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e005      	b.n	8005024 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2bc8      	cmp	r3, #200	@ 0xc8
 800501c:	d101      	bne.n	8005022 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e000      	b.n	8005024 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3710      	adds	r7, #16
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800502c:	b084      	sub	sp, #16
 800502e:	b580      	push	{r7, lr}
 8005030:	b086      	sub	sp, #24
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
 8005036:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800503a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800503e:	2300      	movs	r3, #0
 8005040:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005046:	2300      	movs	r3, #0
 8005048:	613b      	str	r3, [r7, #16]
 800504a:	e009      	b.n	8005060 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	3340      	adds	r3, #64	@ 0x40
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	4413      	add	r3, r2
 8005056:	2200      	movs	r2, #0
 8005058:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	3301      	adds	r3, #1
 800505e:	613b      	str	r3, [r7, #16]
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	2b0e      	cmp	r3, #14
 8005064:	d9f2      	bls.n	800504c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005066:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800506a:	2b00      	cmp	r3, #0
 800506c:	d11c      	bne.n	80050a8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800507c:	f043 0302 	orr.w	r3, r3, #2
 8005080:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005086:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005092:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800509e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	639a      	str	r2, [r3, #56]	@ 0x38
 80050a6:	e00b      	b.n	80050c0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ac:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050b8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80050c6:	461a      	mov	r2, r3
 80050c8:	2300      	movs	r3, #0
 80050ca:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050cc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d10d      	bne.n	80050f0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80050d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d104      	bne.n	80050e6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80050dc:	2100      	movs	r1, #0
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 f968 	bl	80053b4 <USB_SetDevSpeed>
 80050e4:	e008      	b.n	80050f8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80050e6:	2101      	movs	r1, #1
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 f963 	bl	80053b4 <USB_SetDevSpeed>
 80050ee:	e003      	b.n	80050f8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80050f0:	2103      	movs	r1, #3
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f95e 	bl	80053b4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80050f8:	2110      	movs	r1, #16
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 f8fa 	bl	80052f4 <USB_FlushTxFifo>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d001      	beq.n	800510a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 f924 	bl	8005358 <USB_FlushRxFifo>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d001      	beq.n	800511a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005120:	461a      	mov	r2, r3
 8005122:	2300      	movs	r3, #0
 8005124:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800512c:	461a      	mov	r2, r3
 800512e:	2300      	movs	r3, #0
 8005130:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005138:	461a      	mov	r2, r3
 800513a:	2300      	movs	r3, #0
 800513c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800513e:	2300      	movs	r3, #0
 8005140:	613b      	str	r3, [r7, #16]
 8005142:	e043      	b.n	80051cc <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	015a      	lsls	r2, r3, #5
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	4413      	add	r3, r2
 800514c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005156:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800515a:	d118      	bne.n	800518e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d10a      	bne.n	8005178 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	015a      	lsls	r2, r3, #5
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	4413      	add	r3, r2
 800516a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800516e:	461a      	mov	r2, r3
 8005170:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005174:	6013      	str	r3, [r2, #0]
 8005176:	e013      	b.n	80051a0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	015a      	lsls	r2, r3, #5
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	4413      	add	r3, r2
 8005180:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005184:	461a      	mov	r2, r3
 8005186:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800518a:	6013      	str	r3, [r2, #0]
 800518c:	e008      	b.n	80051a0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	015a      	lsls	r2, r3, #5
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	4413      	add	r3, r2
 8005196:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800519a:	461a      	mov	r2, r3
 800519c:	2300      	movs	r3, #0
 800519e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	015a      	lsls	r2, r3, #5
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	4413      	add	r3, r2
 80051a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051ac:	461a      	mov	r2, r3
 80051ae:	2300      	movs	r3, #0
 80051b0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	015a      	lsls	r2, r3, #5
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	4413      	add	r3, r2
 80051ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051be:	461a      	mov	r2, r3
 80051c0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80051c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	3301      	adds	r3, #1
 80051ca:	613b      	str	r3, [r7, #16]
 80051cc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80051d0:	461a      	mov	r2, r3
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d3b5      	bcc.n	8005144 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051d8:	2300      	movs	r3, #0
 80051da:	613b      	str	r3, [r7, #16]
 80051dc:	e043      	b.n	8005266 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	015a      	lsls	r2, r3, #5
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	4413      	add	r3, r2
 80051e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80051f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80051f4:	d118      	bne.n	8005228 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d10a      	bne.n	8005212 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	015a      	lsls	r2, r3, #5
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	4413      	add	r3, r2
 8005204:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005208:	461a      	mov	r2, r3
 800520a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800520e:	6013      	str	r3, [r2, #0]
 8005210:	e013      	b.n	800523a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	015a      	lsls	r2, r3, #5
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	4413      	add	r3, r2
 800521a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800521e:	461a      	mov	r2, r3
 8005220:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005224:	6013      	str	r3, [r2, #0]
 8005226:	e008      	b.n	800523a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	015a      	lsls	r2, r3, #5
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	4413      	add	r3, r2
 8005230:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005234:	461a      	mov	r2, r3
 8005236:	2300      	movs	r3, #0
 8005238:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	015a      	lsls	r2, r3, #5
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	4413      	add	r3, r2
 8005242:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005246:	461a      	mov	r2, r3
 8005248:	2300      	movs	r3, #0
 800524a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	015a      	lsls	r2, r3, #5
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	4413      	add	r3, r2
 8005254:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005258:	461a      	mov	r2, r3
 800525a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800525e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	3301      	adds	r3, #1
 8005264:	613b      	str	r3, [r7, #16]
 8005266:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800526a:	461a      	mov	r2, r3
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	4293      	cmp	r3, r2
 8005270:	d3b5      	bcc.n	80051de <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005280:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005284:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005292:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005294:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005298:	2b00      	cmp	r3, #0
 800529a:	d105      	bne.n	80052a8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	699b      	ldr	r3, [r3, #24]
 80052a0:	f043 0210 	orr.w	r2, r3, #16
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	699a      	ldr	r2, [r3, #24]
 80052ac:	4b10      	ldr	r3, [pc, #64]	@ (80052f0 <USB_DevInit+0x2c4>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80052b4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d005      	beq.n	80052c8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	699b      	ldr	r3, [r3, #24]
 80052c0:	f043 0208 	orr.w	r2, r3, #8
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80052c8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d107      	bne.n	80052e0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	699b      	ldr	r3, [r3, #24]
 80052d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80052d8:	f043 0304 	orr.w	r3, r3, #4
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80052e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3718      	adds	r7, #24
 80052e6:	46bd      	mov	sp, r7
 80052e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052ec:	b004      	add	sp, #16
 80052ee:	4770      	bx	lr
 80052f0:	803c3800 	.word	0x803c3800

080052f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80052fe:	2300      	movs	r3, #0
 8005300:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	3301      	adds	r3, #1
 8005306:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800530e:	d901      	bls.n	8005314 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e01b      	b.n	800534c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	2b00      	cmp	r3, #0
 800531a:	daf2      	bge.n	8005302 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800531c:	2300      	movs	r3, #0
 800531e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	019b      	lsls	r3, r3, #6
 8005324:	f043 0220 	orr.w	r2, r3, #32
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	3301      	adds	r3, #1
 8005330:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005338:	d901      	bls.n	800533e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e006      	b.n	800534c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	f003 0320 	and.w	r3, r3, #32
 8005346:	2b20      	cmp	r3, #32
 8005348:	d0f0      	beq.n	800532c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3714      	adds	r7, #20
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005360:	2300      	movs	r3, #0
 8005362:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	3301      	adds	r3, #1
 8005368:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005370:	d901      	bls.n	8005376 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e018      	b.n	80053a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	2b00      	cmp	r3, #0
 800537c:	daf2      	bge.n	8005364 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800537e:	2300      	movs	r3, #0
 8005380:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2210      	movs	r2, #16
 8005386:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	3301      	adds	r3, #1
 800538c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005394:	d901      	bls.n	800539a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e006      	b.n	80053a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	f003 0310 	and.w	r3, r3, #16
 80053a2:	2b10      	cmp	r3, #16
 80053a4:	d0f0      	beq.n	8005388 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80053a6:	2300      	movs	r3, #0
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3714      	adds	r7, #20
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	460b      	mov	r3, r1
 80053be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	78fb      	ldrb	r3, [r7, #3]
 80053ce:	68f9      	ldr	r1, [r7, #12]
 80053d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80053d4:	4313      	orrs	r3, r2
 80053d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3714      	adds	r7, #20
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr

080053e6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80053e6:	b480      	push	{r7}
 80053e8:	b087      	sub	sp, #28
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f003 0306 	and.w	r3, r3, #6
 80053fe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d102      	bne.n	800540c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005406:	2300      	movs	r3, #0
 8005408:	75fb      	strb	r3, [r7, #23]
 800540a:	e00a      	b.n	8005422 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2b02      	cmp	r3, #2
 8005410:	d002      	beq.n	8005418 <USB_GetDevSpeed+0x32>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2b06      	cmp	r3, #6
 8005416:	d102      	bne.n	800541e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005418:	2302      	movs	r3, #2
 800541a:	75fb      	strb	r3, [r7, #23]
 800541c:	e001      	b.n	8005422 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800541e:	230f      	movs	r3, #15
 8005420:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005422:	7dfb      	ldrb	r3, [r7, #23]
}
 8005424:	4618      	mov	r0, r3
 8005426:	371c      	adds	r7, #28
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	785b      	ldrb	r3, [r3, #1]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d13a      	bne.n	80054c2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005452:	69da      	ldr	r2, [r3, #28]
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	f003 030f 	and.w	r3, r3, #15
 800545c:	2101      	movs	r1, #1
 800545e:	fa01 f303 	lsl.w	r3, r1, r3
 8005462:	b29b      	uxth	r3, r3
 8005464:	68f9      	ldr	r1, [r7, #12]
 8005466:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800546a:	4313      	orrs	r3, r2
 800546c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	015a      	lsls	r2, r3, #5
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	4413      	add	r3, r2
 8005476:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d155      	bne.n	8005530 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	015a      	lsls	r2, r3, #5
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	4413      	add	r3, r2
 800548c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	791b      	ldrb	r3, [r3, #4]
 800549e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054a0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	059b      	lsls	r3, r3, #22
 80054a6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054a8:	4313      	orrs	r3, r2
 80054aa:	68ba      	ldr	r2, [r7, #8]
 80054ac:	0151      	lsls	r1, r2, #5
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	440a      	add	r2, r1
 80054b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054be:	6013      	str	r3, [r2, #0]
 80054c0:	e036      	b.n	8005530 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054c8:	69da      	ldr	r2, [r3, #28]
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	f003 030f 	and.w	r3, r3, #15
 80054d2:	2101      	movs	r1, #1
 80054d4:	fa01 f303 	lsl.w	r3, r1, r3
 80054d8:	041b      	lsls	r3, r3, #16
 80054da:	68f9      	ldr	r1, [r7, #12]
 80054dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80054e0:	4313      	orrs	r3, r2
 80054e2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	015a      	lsls	r2, r3, #5
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	4413      	add	r3, r2
 80054ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d11a      	bne.n	8005530 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	015a      	lsls	r2, r3, #5
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	4413      	add	r3, r2
 8005502:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	791b      	ldrb	r3, [r3, #4]
 8005514:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005516:	430b      	orrs	r3, r1
 8005518:	4313      	orrs	r3, r2
 800551a:	68ba      	ldr	r2, [r7, #8]
 800551c:	0151      	lsls	r1, r2, #5
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	440a      	add	r2, r1
 8005522:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005526:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800552a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800552e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3714      	adds	r7, #20
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
	...

08005540 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005540:	b480      	push	{r7}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	785b      	ldrb	r3, [r3, #1]
 8005558:	2b01      	cmp	r3, #1
 800555a:	d161      	bne.n	8005620 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	015a      	lsls	r2, r3, #5
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	4413      	add	r3, r2
 8005564:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800556e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005572:	d11f      	bne.n	80055b4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	015a      	lsls	r2, r3, #5
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	4413      	add	r3, r2
 800557c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68ba      	ldr	r2, [r7, #8]
 8005584:	0151      	lsls	r1, r2, #5
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	440a      	add	r2, r1
 800558a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800558e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005592:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	015a      	lsls	r2, r3, #5
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	4413      	add	r3, r2
 800559c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68ba      	ldr	r2, [r7, #8]
 80055a4:	0151      	lsls	r1, r2, #5
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	440a      	add	r2, r1
 80055aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055ae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80055b2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	f003 030f 	and.w	r3, r3, #15
 80055c4:	2101      	movs	r1, #1
 80055c6:	fa01 f303 	lsl.w	r3, r1, r3
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	43db      	mvns	r3, r3
 80055ce:	68f9      	ldr	r1, [r7, #12]
 80055d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80055d4:	4013      	ands	r3, r2
 80055d6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055de:	69da      	ldr	r2, [r3, #28]
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	f003 030f 	and.w	r3, r3, #15
 80055e8:	2101      	movs	r1, #1
 80055ea:	fa01 f303 	lsl.w	r3, r1, r3
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	43db      	mvns	r3, r3
 80055f2:	68f9      	ldr	r1, [r7, #12]
 80055f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80055f8:	4013      	ands	r3, r2
 80055fa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	015a      	lsls	r2, r3, #5
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	4413      	add	r3, r2
 8005604:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	0159      	lsls	r1, r3, #5
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	440b      	add	r3, r1
 8005612:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005616:	4619      	mov	r1, r3
 8005618:	4b35      	ldr	r3, [pc, #212]	@ (80056f0 <USB_DeactivateEndpoint+0x1b0>)
 800561a:	4013      	ands	r3, r2
 800561c:	600b      	str	r3, [r1, #0]
 800561e:	e060      	b.n	80056e2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	015a      	lsls	r2, r3, #5
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	4413      	add	r3, r2
 8005628:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005632:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005636:	d11f      	bne.n	8005678 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	015a      	lsls	r2, r3, #5
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	4413      	add	r3, r2
 8005640:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68ba      	ldr	r2, [r7, #8]
 8005648:	0151      	lsls	r1, r2, #5
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	440a      	add	r2, r1
 800564e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005652:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005656:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	015a      	lsls	r2, r3, #5
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	4413      	add	r3, r2
 8005660:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68ba      	ldr	r2, [r7, #8]
 8005668:	0151      	lsls	r1, r2, #5
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	440a      	add	r2, r1
 800566e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005672:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005676:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800567e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	f003 030f 	and.w	r3, r3, #15
 8005688:	2101      	movs	r1, #1
 800568a:	fa01 f303 	lsl.w	r3, r1, r3
 800568e:	041b      	lsls	r3, r3, #16
 8005690:	43db      	mvns	r3, r3
 8005692:	68f9      	ldr	r1, [r7, #12]
 8005694:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005698:	4013      	ands	r3, r2
 800569a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056a2:	69da      	ldr	r2, [r3, #28]
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	f003 030f 	and.w	r3, r3, #15
 80056ac:	2101      	movs	r1, #1
 80056ae:	fa01 f303 	lsl.w	r3, r1, r3
 80056b2:	041b      	lsls	r3, r3, #16
 80056b4:	43db      	mvns	r3, r3
 80056b6:	68f9      	ldr	r1, [r7, #12]
 80056b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80056bc:	4013      	ands	r3, r2
 80056be:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	015a      	lsls	r2, r3, #5
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	4413      	add	r3, r2
 80056c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	0159      	lsls	r1, r3, #5
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	440b      	add	r3, r1
 80056d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056da:	4619      	mov	r1, r3
 80056dc:	4b05      	ldr	r3, [pc, #20]	@ (80056f4 <USB_DeactivateEndpoint+0x1b4>)
 80056de:	4013      	ands	r3, r2
 80056e0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80056e2:	2300      	movs	r3, #0
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3714      	adds	r7, #20
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr
 80056f0:	ec337800 	.word	0xec337800
 80056f4:	eff37800 	.word	0xeff37800

080056f8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b08a      	sub	sp, #40	@ 0x28
 80056fc:	af02      	add	r7, sp, #8
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	4613      	mov	r3, r2
 8005704:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	785b      	ldrb	r3, [r3, #1]
 8005714:	2b01      	cmp	r3, #1
 8005716:	f040 817f 	bne.w	8005a18 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d132      	bne.n	8005788 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	015a      	lsls	r2, r3, #5
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	4413      	add	r3, r2
 800572a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	69ba      	ldr	r2, [r7, #24]
 8005732:	0151      	lsls	r1, r2, #5
 8005734:	69fa      	ldr	r2, [r7, #28]
 8005736:	440a      	add	r2, r1
 8005738:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800573c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005740:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005744:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	015a      	lsls	r2, r3, #5
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	4413      	add	r3, r2
 800574e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	69ba      	ldr	r2, [r7, #24]
 8005756:	0151      	lsls	r1, r2, #5
 8005758:	69fa      	ldr	r2, [r7, #28]
 800575a:	440a      	add	r2, r1
 800575c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005760:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005764:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	015a      	lsls	r2, r3, #5
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	4413      	add	r3, r2
 800576e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	69ba      	ldr	r2, [r7, #24]
 8005776:	0151      	lsls	r1, r2, #5
 8005778:	69fa      	ldr	r2, [r7, #28]
 800577a:	440a      	add	r2, r1
 800577c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005780:	0cdb      	lsrs	r3, r3, #19
 8005782:	04db      	lsls	r3, r3, #19
 8005784:	6113      	str	r3, [r2, #16]
 8005786:	e097      	b.n	80058b8 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	015a      	lsls	r2, r3, #5
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	4413      	add	r3, r2
 8005790:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	69ba      	ldr	r2, [r7, #24]
 8005798:	0151      	lsls	r1, r2, #5
 800579a:	69fa      	ldr	r2, [r7, #28]
 800579c:	440a      	add	r2, r1
 800579e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057a2:	0cdb      	lsrs	r3, r3, #19
 80057a4:	04db      	lsls	r3, r3, #19
 80057a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	015a      	lsls	r2, r3, #5
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	4413      	add	r3, r2
 80057b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	69ba      	ldr	r2, [r7, #24]
 80057b8:	0151      	lsls	r1, r2, #5
 80057ba:	69fa      	ldr	r2, [r7, #28]
 80057bc:	440a      	add	r2, r1
 80057be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057c2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80057c6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80057ca:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d11a      	bne.n	8005808 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	691a      	ldr	r2, [r3, #16]
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d903      	bls.n	80057e6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	689a      	ldr	r2, [r3, #8]
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	015a      	lsls	r2, r3, #5
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	4413      	add	r3, r2
 80057ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	69ba      	ldr	r2, [r7, #24]
 80057f6:	0151      	lsls	r1, r2, #5
 80057f8:	69fa      	ldr	r2, [r7, #28]
 80057fa:	440a      	add	r2, r1
 80057fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005800:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005804:	6113      	str	r3, [r2, #16]
 8005806:	e044      	b.n	8005892 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	691a      	ldr	r2, [r3, #16]
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	4413      	add	r3, r2
 8005812:	1e5a      	subs	r2, r3, #1
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	fbb2 f3f3 	udiv	r3, r2, r3
 800581c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	015a      	lsls	r2, r3, #5
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	4413      	add	r3, r2
 8005826:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800582a:	691a      	ldr	r2, [r3, #16]
 800582c:	8afb      	ldrh	r3, [r7, #22]
 800582e:	04d9      	lsls	r1, r3, #19
 8005830:	4ba4      	ldr	r3, [pc, #656]	@ (8005ac4 <USB_EPStartXfer+0x3cc>)
 8005832:	400b      	ands	r3, r1
 8005834:	69b9      	ldr	r1, [r7, #24]
 8005836:	0148      	lsls	r0, r1, #5
 8005838:	69f9      	ldr	r1, [r7, #28]
 800583a:	4401      	add	r1, r0
 800583c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005840:	4313      	orrs	r3, r2
 8005842:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	791b      	ldrb	r3, [r3, #4]
 8005848:	2b01      	cmp	r3, #1
 800584a:	d122      	bne.n	8005892 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	015a      	lsls	r2, r3, #5
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	4413      	add	r3, r2
 8005854:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	69ba      	ldr	r2, [r7, #24]
 800585c:	0151      	lsls	r1, r2, #5
 800585e:	69fa      	ldr	r2, [r7, #28]
 8005860:	440a      	add	r2, r1
 8005862:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005866:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800586a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	015a      	lsls	r2, r3, #5
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	4413      	add	r3, r2
 8005874:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005878:	691a      	ldr	r2, [r3, #16]
 800587a:	8afb      	ldrh	r3, [r7, #22]
 800587c:	075b      	lsls	r3, r3, #29
 800587e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8005882:	69b9      	ldr	r1, [r7, #24]
 8005884:	0148      	lsls	r0, r1, #5
 8005886:	69f9      	ldr	r1, [r7, #28]
 8005888:	4401      	add	r1, r0
 800588a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800588e:	4313      	orrs	r3, r2
 8005890:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	015a      	lsls	r2, r3, #5
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	4413      	add	r3, r2
 800589a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800589e:	691a      	ldr	r2, [r3, #16]
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058a8:	69b9      	ldr	r1, [r7, #24]
 80058aa:	0148      	lsls	r0, r1, #5
 80058ac:	69f9      	ldr	r1, [r7, #28]
 80058ae:	4401      	add	r1, r0
 80058b0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80058b4:	4313      	orrs	r3, r2
 80058b6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80058b8:	79fb      	ldrb	r3, [r7, #7]
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d14b      	bne.n	8005956 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	69db      	ldr	r3, [r3, #28]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d009      	beq.n	80058da <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	015a      	lsls	r2, r3, #5
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	4413      	add	r3, r2
 80058ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058d2:	461a      	mov	r2, r3
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	69db      	ldr	r3, [r3, #28]
 80058d8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	791b      	ldrb	r3, [r3, #4]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d128      	bne.n	8005934 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d110      	bne.n	8005914 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	015a      	lsls	r2, r3, #5
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	4413      	add	r3, r2
 80058fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	69ba      	ldr	r2, [r7, #24]
 8005902:	0151      	lsls	r1, r2, #5
 8005904:	69fa      	ldr	r2, [r7, #28]
 8005906:	440a      	add	r2, r1
 8005908:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800590c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005910:	6013      	str	r3, [r2, #0]
 8005912:	e00f      	b.n	8005934 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	015a      	lsls	r2, r3, #5
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	4413      	add	r3, r2
 800591c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	69ba      	ldr	r2, [r7, #24]
 8005924:	0151      	lsls	r1, r2, #5
 8005926:	69fa      	ldr	r2, [r7, #28]
 8005928:	440a      	add	r2, r1
 800592a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800592e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005932:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	015a      	lsls	r2, r3, #5
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	4413      	add	r3, r2
 800593c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	69ba      	ldr	r2, [r7, #24]
 8005944:	0151      	lsls	r1, r2, #5
 8005946:	69fa      	ldr	r2, [r7, #28]
 8005948:	440a      	add	r2, r1
 800594a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800594e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005952:	6013      	str	r3, [r2, #0]
 8005954:	e166      	b.n	8005c24 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	015a      	lsls	r2, r3, #5
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	4413      	add	r3, r2
 800595e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	69ba      	ldr	r2, [r7, #24]
 8005966:	0151      	lsls	r1, r2, #5
 8005968:	69fa      	ldr	r2, [r7, #28]
 800596a:	440a      	add	r2, r1
 800596c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005970:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005974:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	791b      	ldrb	r3, [r3, #4]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d015      	beq.n	80059aa <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	2b00      	cmp	r3, #0
 8005984:	f000 814e 	beq.w	8005c24 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800598e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	f003 030f 	and.w	r3, r3, #15
 8005998:	2101      	movs	r1, #1
 800599a:	fa01 f303 	lsl.w	r3, r1, r3
 800599e:	69f9      	ldr	r1, [r7, #28]
 80059a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80059a4:	4313      	orrs	r3, r2
 80059a6:	634b      	str	r3, [r1, #52]	@ 0x34
 80059a8:	e13c      	b.n	8005c24 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80059aa:	69fb      	ldr	r3, [r7, #28]
 80059ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d110      	bne.n	80059dc <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	015a      	lsls	r2, r3, #5
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	4413      	add	r3, r2
 80059c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	69ba      	ldr	r2, [r7, #24]
 80059ca:	0151      	lsls	r1, r2, #5
 80059cc:	69fa      	ldr	r2, [r7, #28]
 80059ce:	440a      	add	r2, r1
 80059d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059d4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80059d8:	6013      	str	r3, [r2, #0]
 80059da:	e00f      	b.n	80059fc <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	015a      	lsls	r2, r3, #5
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	4413      	add	r3, r2
 80059e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	69ba      	ldr	r2, [r7, #24]
 80059ec:	0151      	lsls	r1, r2, #5
 80059ee:	69fa      	ldr	r2, [r7, #28]
 80059f0:	440a      	add	r2, r1
 80059f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059fa:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	68d9      	ldr	r1, [r3, #12]
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	781a      	ldrb	r2, [r3, #0]
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	691b      	ldr	r3, [r3, #16]
 8005a08:	b298      	uxth	r0, r3
 8005a0a:	79fb      	ldrb	r3, [r7, #7]
 8005a0c:	9300      	str	r3, [sp, #0]
 8005a0e:	4603      	mov	r3, r0
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f000 f9b9 	bl	8005d88 <USB_WritePacket>
 8005a16:	e105      	b.n	8005c24 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	015a      	lsls	r2, r3, #5
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	4413      	add	r3, r2
 8005a20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	69ba      	ldr	r2, [r7, #24]
 8005a28:	0151      	lsls	r1, r2, #5
 8005a2a:	69fa      	ldr	r2, [r7, #28]
 8005a2c:	440a      	add	r2, r1
 8005a2e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a32:	0cdb      	lsrs	r3, r3, #19
 8005a34:	04db      	lsls	r3, r3, #19
 8005a36:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	015a      	lsls	r2, r3, #5
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	4413      	add	r3, r2
 8005a40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	69ba      	ldr	r2, [r7, #24]
 8005a48:	0151      	lsls	r1, r2, #5
 8005a4a:	69fa      	ldr	r2, [r7, #28]
 8005a4c:	440a      	add	r2, r1
 8005a4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a52:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005a56:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005a5a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d132      	bne.n	8005ac8 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d003      	beq.n	8005a72 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	689a      	ldr	r2, [r3, #8]
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	689a      	ldr	r2, [r3, #8]
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	015a      	lsls	r2, r3, #5
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	4413      	add	r3, r2
 8005a82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a86:	691a      	ldr	r2, [r3, #16]
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	6a1b      	ldr	r3, [r3, #32]
 8005a8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a90:	69b9      	ldr	r1, [r7, #24]
 8005a92:	0148      	lsls	r0, r1, #5
 8005a94:	69f9      	ldr	r1, [r7, #28]
 8005a96:	4401      	add	r1, r0
 8005a98:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005aa0:	69bb      	ldr	r3, [r7, #24]
 8005aa2:	015a      	lsls	r2, r3, #5
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	69ba      	ldr	r2, [r7, #24]
 8005ab0:	0151      	lsls	r1, r2, #5
 8005ab2:	69fa      	ldr	r2, [r7, #28]
 8005ab4:	440a      	add	r2, r1
 8005ab6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005aba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005abe:	6113      	str	r3, [r2, #16]
 8005ac0:	e062      	b.n	8005b88 <USB_EPStartXfer+0x490>
 8005ac2:	bf00      	nop
 8005ac4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d123      	bne.n	8005b18 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	015a      	lsls	r2, r3, #5
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005adc:	691a      	ldr	r2, [r3, #16]
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ae6:	69b9      	ldr	r1, [r7, #24]
 8005ae8:	0148      	lsls	r0, r1, #5
 8005aea:	69f9      	ldr	r1, [r7, #28]
 8005aec:	4401      	add	r1, r0
 8005aee:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005af2:	4313      	orrs	r3, r2
 8005af4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	015a      	lsls	r2, r3, #5
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	4413      	add	r3, r2
 8005afe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	69ba      	ldr	r2, [r7, #24]
 8005b06:	0151      	lsls	r1, r2, #5
 8005b08:	69fa      	ldr	r2, [r7, #28]
 8005b0a:	440a      	add	r2, r1
 8005b0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b10:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005b14:	6113      	str	r3, [r2, #16]
 8005b16:	e037      	b.n	8005b88 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	691a      	ldr	r2, [r3, #16]
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	4413      	add	r3, r2
 8005b22:	1e5a      	subs	r2, r3, #1
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b2c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	8afa      	ldrh	r2, [r7, #22]
 8005b34:	fb03 f202 	mul.w	r2, r3, r2
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	015a      	lsls	r2, r3, #5
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	4413      	add	r3, r2
 8005b44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b48:	691a      	ldr	r2, [r3, #16]
 8005b4a:	8afb      	ldrh	r3, [r7, #22]
 8005b4c:	04d9      	lsls	r1, r3, #19
 8005b4e:	4b38      	ldr	r3, [pc, #224]	@ (8005c30 <USB_EPStartXfer+0x538>)
 8005b50:	400b      	ands	r3, r1
 8005b52:	69b9      	ldr	r1, [r7, #24]
 8005b54:	0148      	lsls	r0, r1, #5
 8005b56:	69f9      	ldr	r1, [r7, #28]
 8005b58:	4401      	add	r1, r0
 8005b5a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	015a      	lsls	r2, r3, #5
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	4413      	add	r3, r2
 8005b6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b6e:	691a      	ldr	r2, [r3, #16]
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	6a1b      	ldr	r3, [r3, #32]
 8005b74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b78:	69b9      	ldr	r1, [r7, #24]
 8005b7a:	0148      	lsls	r0, r1, #5
 8005b7c:	69f9      	ldr	r1, [r7, #28]
 8005b7e:	4401      	add	r1, r0
 8005b80:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005b84:	4313      	orrs	r3, r2
 8005b86:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005b88:	79fb      	ldrb	r3, [r7, #7]
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d10d      	bne.n	8005baa <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d009      	beq.n	8005baa <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	68d9      	ldr	r1, [r3, #12]
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	015a      	lsls	r2, r3, #5
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ba6:	460a      	mov	r2, r1
 8005ba8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	791b      	ldrb	r3, [r3, #4]
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d128      	bne.n	8005c04 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d110      	bne.n	8005be4 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	015a      	lsls	r2, r3, #5
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	4413      	add	r3, r2
 8005bca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	69ba      	ldr	r2, [r7, #24]
 8005bd2:	0151      	lsls	r1, r2, #5
 8005bd4:	69fa      	ldr	r2, [r7, #28]
 8005bd6:	440a      	add	r2, r1
 8005bd8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bdc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005be0:	6013      	str	r3, [r2, #0]
 8005be2:	e00f      	b.n	8005c04 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	015a      	lsls	r2, r3, #5
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	4413      	add	r3, r2
 8005bec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	69ba      	ldr	r2, [r7, #24]
 8005bf4:	0151      	lsls	r1, r2, #5
 8005bf6:	69fa      	ldr	r2, [r7, #28]
 8005bf8:	440a      	add	r2, r1
 8005bfa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c02:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	015a      	lsls	r2, r3, #5
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	69ba      	ldr	r2, [r7, #24]
 8005c14:	0151      	lsls	r1, r2, #5
 8005c16:	69fa      	ldr	r2, [r7, #28]
 8005c18:	440a      	add	r2, r1
 8005c1a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c1e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005c22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3720      	adds	r7, #32
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	1ff80000 	.word	0x1ff80000

08005c34 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b087      	sub	sp, #28
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005c42:	2300      	movs	r3, #0
 8005c44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	785b      	ldrb	r3, [r3, #1]
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d14a      	bne.n	8005ce8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	015a      	lsls	r2, r3, #5
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c66:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c6a:	f040 8086 	bne.w	8005d7a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	015a      	lsls	r2, r3, #5
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	4413      	add	r3, r2
 8005c78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	683a      	ldr	r2, [r7, #0]
 8005c80:	7812      	ldrb	r2, [r2, #0]
 8005c82:	0151      	lsls	r1, r2, #5
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	440a      	add	r2, r1
 8005c88:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c8c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005c90:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	015a      	lsls	r2, r3, #5
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	683a      	ldr	r2, [r7, #0]
 8005ca4:	7812      	ldrb	r2, [r2, #0]
 8005ca6:	0151      	lsls	r1, r2, #5
 8005ca8:	693a      	ldr	r2, [r7, #16]
 8005caa:	440a      	add	r2, r1
 8005cac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cb0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005cb4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	3301      	adds	r3, #1
 8005cba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d902      	bls.n	8005ccc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	75fb      	strb	r3, [r7, #23]
          break;
 8005cca:	e056      	b.n	8005d7a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	015a      	lsls	r2, r3, #5
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ce0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ce4:	d0e7      	beq.n	8005cb6 <USB_EPStopXfer+0x82>
 8005ce6:	e048      	b.n	8005d7a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	015a      	lsls	r2, r3, #5
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005cfc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d00:	d13b      	bne.n	8005d7a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	015a      	lsls	r2, r3, #5
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	683a      	ldr	r2, [r7, #0]
 8005d14:	7812      	ldrb	r2, [r2, #0]
 8005d16:	0151      	lsls	r1, r2, #5
 8005d18:	693a      	ldr	r2, [r7, #16]
 8005d1a:	440a      	add	r2, r1
 8005d1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d20:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005d24:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	015a      	lsls	r2, r3, #5
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	4413      	add	r3, r2
 8005d30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	683a      	ldr	r2, [r7, #0]
 8005d38:	7812      	ldrb	r2, [r2, #0]
 8005d3a:	0151      	lsls	r1, r2, #5
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	440a      	add	r2, r1
 8005d40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d44:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005d48:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d902      	bls.n	8005d60 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	75fb      	strb	r3, [r7, #23]
          break;
 8005d5e:	e00c      	b.n	8005d7a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	015a      	lsls	r2, r3, #5
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	4413      	add	r3, r2
 8005d6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d78:	d0e7      	beq.n	8005d4a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005d7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	371c      	adds	r7, #28
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b089      	sub	sp, #36	@ 0x24
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	4611      	mov	r1, r2
 8005d94:	461a      	mov	r2, r3
 8005d96:	460b      	mov	r3, r1
 8005d98:	71fb      	strb	r3, [r7, #7]
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005da6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d123      	bne.n	8005df6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005dae:	88bb      	ldrh	r3, [r7, #4]
 8005db0:	3303      	adds	r3, #3
 8005db2:	089b      	lsrs	r3, r3, #2
 8005db4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005db6:	2300      	movs	r3, #0
 8005db8:	61bb      	str	r3, [r7, #24]
 8005dba:	e018      	b.n	8005dee <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005dbc:	79fb      	ldrb	r3, [r7, #7]
 8005dbe:	031a      	lsls	r2, r3, #12
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005dc8:	461a      	mov	r2, r3
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005dd0:	69fb      	ldr	r3, [r7, #28]
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	3301      	adds	r3, #1
 8005dda:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	3301      	adds	r3, #1
 8005de0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	3301      	adds	r3, #1
 8005de6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	3301      	adds	r3, #1
 8005dec:	61bb      	str	r3, [r7, #24]
 8005dee:	69ba      	ldr	r2, [r7, #24]
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d3e2      	bcc.n	8005dbc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3724      	adds	r7, #36	@ 0x24
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b08b      	sub	sp, #44	@ 0x2c
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	4613      	mov	r3, r2
 8005e10:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005e1a:	88fb      	ldrh	r3, [r7, #6]
 8005e1c:	089b      	lsrs	r3, r3, #2
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005e22:	88fb      	ldrh	r3, [r7, #6]
 8005e24:	f003 0303 	and.w	r3, r3, #3
 8005e28:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	623b      	str	r3, [r7, #32]
 8005e2e:	e014      	b.n	8005e5a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e3a:	601a      	str	r2, [r3, #0]
    pDest++;
 8005e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e3e:	3301      	adds	r3, #1
 8005e40:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e44:	3301      	adds	r3, #1
 8005e46:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e50:	3301      	adds	r3, #1
 8005e52:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005e54:	6a3b      	ldr	r3, [r7, #32]
 8005e56:	3301      	adds	r3, #1
 8005e58:	623b      	str	r3, [r7, #32]
 8005e5a:	6a3a      	ldr	r2, [r7, #32]
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d3e6      	bcc.n	8005e30 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005e62:	8bfb      	ldrh	r3, [r7, #30]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d01e      	beq.n	8005ea6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e72:	461a      	mov	r2, r3
 8005e74:	f107 0310 	add.w	r3, r7, #16
 8005e78:	6812      	ldr	r2, [r2, #0]
 8005e7a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005e7c:	693a      	ldr	r2, [r7, #16]
 8005e7e:	6a3b      	ldr	r3, [r7, #32]
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	00db      	lsls	r3, r3, #3
 8005e84:	fa22 f303 	lsr.w	r3, r2, r3
 8005e88:	b2da      	uxtb	r2, r3
 8005e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e8c:	701a      	strb	r2, [r3, #0]
      i++;
 8005e8e:	6a3b      	ldr	r3, [r7, #32]
 8005e90:	3301      	adds	r3, #1
 8005e92:	623b      	str	r3, [r7, #32]
      pDest++;
 8005e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e96:	3301      	adds	r3, #1
 8005e98:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005e9a:	8bfb      	ldrh	r3, [r7, #30]
 8005e9c:	3b01      	subs	r3, #1
 8005e9e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005ea0:	8bfb      	ldrh	r3, [r7, #30]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d1ea      	bne.n	8005e7c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	372c      	adds	r7, #44	@ 0x2c
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b085      	sub	sp, #20
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	785b      	ldrb	r3, [r3, #1]
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d12c      	bne.n	8005f2a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	015a      	lsls	r2, r3, #5
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	db12      	blt.n	8005f08 <USB_EPSetStall+0x54>
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d00f      	beq.n	8005f08 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	015a      	lsls	r2, r3, #5
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	4413      	add	r3, r2
 8005ef0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68ba      	ldr	r2, [r7, #8]
 8005ef8:	0151      	lsls	r1, r2, #5
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	440a      	add	r2, r1
 8005efe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f02:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005f06:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	015a      	lsls	r2, r3, #5
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	4413      	add	r3, r2
 8005f10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68ba      	ldr	r2, [r7, #8]
 8005f18:	0151      	lsls	r1, r2, #5
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	440a      	add	r2, r1
 8005f1e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f22:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005f26:	6013      	str	r3, [r2, #0]
 8005f28:	e02b      	b.n	8005f82 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	015a      	lsls	r2, r3, #5
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	4413      	add	r3, r2
 8005f32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	db12      	blt.n	8005f62 <USB_EPSetStall+0xae>
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00f      	beq.n	8005f62 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	015a      	lsls	r2, r3, #5
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	4413      	add	r3, r2
 8005f4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68ba      	ldr	r2, [r7, #8]
 8005f52:	0151      	lsls	r1, r2, #5
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	440a      	add	r2, r1
 8005f58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f5c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005f60:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	015a      	lsls	r2, r3, #5
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	4413      	add	r3, r2
 8005f6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68ba      	ldr	r2, [r7, #8]
 8005f72:	0151      	lsls	r1, r2, #5
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	440a      	add	r2, r1
 8005f78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f7c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005f80:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3714      	adds	r7, #20
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b085      	sub	sp, #20
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	785b      	ldrb	r3, [r3, #1]
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d128      	bne.n	8005ffe <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	015a      	lsls	r2, r3, #5
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68ba      	ldr	r2, [r7, #8]
 8005fbc:	0151      	lsls	r1, r2, #5
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	440a      	add	r2, r1
 8005fc2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fc6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005fca:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	791b      	ldrb	r3, [r3, #4]
 8005fd0:	2b03      	cmp	r3, #3
 8005fd2:	d003      	beq.n	8005fdc <USB_EPClearStall+0x4c>
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	791b      	ldrb	r3, [r3, #4]
 8005fd8:	2b02      	cmp	r3, #2
 8005fda:	d138      	bne.n	800604e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	015a      	lsls	r2, r3, #5
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68ba      	ldr	r2, [r7, #8]
 8005fec:	0151      	lsls	r1, r2, #5
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	440a      	add	r2, r1
 8005ff2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ff6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ffa:	6013      	str	r3, [r2, #0]
 8005ffc:	e027      	b.n	800604e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	015a      	lsls	r2, r3, #5
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	4413      	add	r3, r2
 8006006:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	68ba      	ldr	r2, [r7, #8]
 800600e:	0151      	lsls	r1, r2, #5
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	440a      	add	r2, r1
 8006014:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006018:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800601c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	791b      	ldrb	r3, [r3, #4]
 8006022:	2b03      	cmp	r3, #3
 8006024:	d003      	beq.n	800602e <USB_EPClearStall+0x9e>
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	791b      	ldrb	r3, [r3, #4]
 800602a:	2b02      	cmp	r3, #2
 800602c:	d10f      	bne.n	800604e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	015a      	lsls	r2, r3, #5
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	4413      	add	r3, r2
 8006036:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68ba      	ldr	r2, [r7, #8]
 800603e:	0151      	lsls	r1, r2, #5
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	440a      	add	r2, r1
 8006044:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006048:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800604c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	4618      	mov	r0, r3
 8006052:	3714      	adds	r7, #20
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800605c:	b480      	push	{r7}
 800605e:	b085      	sub	sp, #20
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	460b      	mov	r3, r1
 8006066:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800607a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800607e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	78fb      	ldrb	r3, [r7, #3]
 800608a:	011b      	lsls	r3, r3, #4
 800608c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006090:	68f9      	ldr	r1, [r7, #12]
 8006092:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006096:	4313      	orrs	r3, r2
 8006098:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800609a:	2300      	movs	r3, #0
}
 800609c:	4618      	mov	r0, r3
 800609e:	3714      	adds	r7, #20
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b085      	sub	sp, #20
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80060c2:	f023 0303 	bic.w	r3, r3, #3
 80060c6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80060d6:	f023 0302 	bic.w	r3, r3, #2
 80060da:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3714      	adds	r7, #20
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr

080060ea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80060ea:	b480      	push	{r7}
 80060ec:	b085      	sub	sp, #20
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006104:	f023 0303 	bic.w	r3, r3, #3
 8006108:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	68fa      	ldr	r2, [r7, #12]
 8006114:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006118:	f043 0302 	orr.w	r3, r3, #2
 800611c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800611e:	2300      	movs	r3, #0
}
 8006120:	4618      	mov	r0, r3
 8006122:	3714      	adds	r7, #20
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800612c:	b480      	push	{r7}
 800612e:	b085      	sub	sp, #20
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	695b      	ldr	r3, [r3, #20]
 8006138:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	4013      	ands	r3, r2
 8006142:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006144:	68fb      	ldr	r3, [r7, #12]
}
 8006146:	4618      	mov	r0, r3
 8006148:	3714      	adds	r7, #20
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr

08006152 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006152:	b480      	push	{r7}
 8006154:	b085      	sub	sp, #20
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006164:	699b      	ldr	r3, [r3, #24]
 8006166:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800616e:	69db      	ldr	r3, [r3, #28]
 8006170:	68ba      	ldr	r2, [r7, #8]
 8006172:	4013      	ands	r3, r2
 8006174:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	0c1b      	lsrs	r3, r3, #16
}
 800617a:	4618      	mov	r0, r3
 800617c:	3714      	adds	r7, #20
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr

08006186 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006186:	b480      	push	{r7}
 8006188:	b085      	sub	sp, #20
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006198:	699b      	ldr	r3, [r3, #24]
 800619a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061a2:	69db      	ldr	r3, [r3, #28]
 80061a4:	68ba      	ldr	r2, [r7, #8]
 80061a6:	4013      	ands	r3, r2
 80061a8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	b29b      	uxth	r3, r3
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3714      	adds	r7, #20
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80061ba:	b480      	push	{r7}
 80061bc:	b085      	sub	sp, #20
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
 80061c2:	460b      	mov	r3, r1
 80061c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80061ca:	78fb      	ldrb	r3, [r7, #3]
 80061cc:	015a      	lsls	r2, r3, #5
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	4413      	add	r3, r2
 80061d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061e0:	695b      	ldr	r3, [r3, #20]
 80061e2:	68ba      	ldr	r2, [r7, #8]
 80061e4:	4013      	ands	r3, r2
 80061e6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80061e8:	68bb      	ldr	r3, [r7, #8]
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3714      	adds	r7, #20
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr

080061f6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80061f6:	b480      	push	{r7}
 80061f8:	b087      	sub	sp, #28
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
 80061fe:	460b      	mov	r3, r1
 8006200:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006216:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006218:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800621a:	78fb      	ldrb	r3, [r7, #3]
 800621c:	f003 030f 	and.w	r3, r3, #15
 8006220:	68fa      	ldr	r2, [r7, #12]
 8006222:	fa22 f303 	lsr.w	r3, r2, r3
 8006226:	01db      	lsls	r3, r3, #7
 8006228:	b2db      	uxtb	r3, r3
 800622a:	693a      	ldr	r2, [r7, #16]
 800622c:	4313      	orrs	r3, r2
 800622e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006230:	78fb      	ldrb	r3, [r7, #3]
 8006232:	015a      	lsls	r2, r3, #5
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	4413      	add	r3, r2
 8006238:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	693a      	ldr	r2, [r7, #16]
 8006240:	4013      	ands	r3, r2
 8006242:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006244:	68bb      	ldr	r3, [r7, #8]
}
 8006246:	4618      	mov	r0, r3
 8006248:	371c      	adds	r7, #28
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr

08006252 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006252:	b480      	push	{r7}
 8006254:	b083      	sub	sp, #12
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	695b      	ldr	r3, [r3, #20]
 800625e:	f003 0301 	and.w	r3, r3, #1
}
 8006262:	4618      	mov	r0, r3
 8006264:	370c      	adds	r7, #12
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800626e:	b480      	push	{r7}
 8006270:	b085      	sub	sp, #20
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006288:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800628c:	f023 0307 	bic.w	r3, r3, #7
 8006290:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80062a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80062a6:	2300      	movs	r3, #0
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3714      	adds	r7, #20
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b087      	sub	sp, #28
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	460b      	mov	r3, r1
 80062be:	607a      	str	r2, [r7, #4]
 80062c0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	333c      	adds	r3, #60	@ 0x3c
 80062ca:	3304      	adds	r3, #4
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	4a26      	ldr	r2, [pc, #152]	@ (800636c <USB_EP0_OutStart+0xb8>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d90a      	bls.n	80062ee <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80062e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80062e8:	d101      	bne.n	80062ee <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80062ea:	2300      	movs	r3, #0
 80062ec:	e037      	b.n	800635e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062f4:	461a      	mov	r2, r3
 80062f6:	2300      	movs	r3, #0
 80062f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	697a      	ldr	r2, [r7, #20]
 8006304:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006308:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800630c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	697a      	ldr	r2, [r7, #20]
 8006318:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800631c:	f043 0318 	orr.w	r3, r3, #24
 8006320:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	697a      	ldr	r2, [r7, #20]
 800632c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006330:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006334:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006336:	7afb      	ldrb	r3, [r7, #11]
 8006338:	2b01      	cmp	r3, #1
 800633a:	d10f      	bne.n	800635c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006342:	461a      	mov	r2, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	697a      	ldr	r2, [r7, #20]
 8006352:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006356:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800635a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800635c:	2300      	movs	r3, #0
}
 800635e:	4618      	mov	r0, r3
 8006360:	371c      	adds	r7, #28
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr
 800636a:	bf00      	nop
 800636c:	4f54300a 	.word	0x4f54300a

08006370 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006370:	b480      	push	{r7}
 8006372:	b085      	sub	sp, #20
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006378:	2300      	movs	r3, #0
 800637a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	3301      	adds	r3, #1
 8006380:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006388:	d901      	bls.n	800638e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	e01b      	b.n	80063c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	2b00      	cmp	r3, #0
 8006394:	daf2      	bge.n	800637c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006396:	2300      	movs	r3, #0
 8006398:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	f043 0201 	orr.w	r2, r3, #1
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	3301      	adds	r3, #1
 80063aa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80063b2:	d901      	bls.n	80063b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80063b4:	2303      	movs	r3, #3
 80063b6:	e006      	b.n	80063c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	f003 0301 	and.w	r3, r3, #1
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d0f0      	beq.n	80063a6 <USB_CoreReset+0x36>

  return HAL_OK;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3714      	adds	r7, #20
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr
	...

080063d4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	460b      	mov	r3, r1
 80063de:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80063e0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80063e4:	f002 fcac 	bl	8008d40 <USBD_static_malloc>
 80063e8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d109      	bne.n	8006404 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	32b0      	adds	r2, #176	@ 0xb0
 80063fa:	2100      	movs	r1, #0
 80063fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006400:	2302      	movs	r3, #2
 8006402:	e0d4      	b.n	80065ae <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006404:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006408:	2100      	movs	r1, #0
 800640a:	68f8      	ldr	r0, [r7, #12]
 800640c:	f002 fcfc 	bl	8008e08 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	32b0      	adds	r2, #176	@ 0xb0
 800641a:	68f9      	ldr	r1, [r7, #12]
 800641c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	32b0      	adds	r2, #176	@ 0xb0
 800642a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	7c1b      	ldrb	r3, [r3, #16]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d138      	bne.n	80064ae <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800643c:	4b5e      	ldr	r3, [pc, #376]	@ (80065b8 <USBD_CDC_Init+0x1e4>)
 800643e:	7819      	ldrb	r1, [r3, #0]
 8006440:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006444:	2202      	movs	r2, #2
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f002 fb57 	bl	8008afa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800644c:	4b5a      	ldr	r3, [pc, #360]	@ (80065b8 <USBD_CDC_Init+0x1e4>)
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	f003 020f 	and.w	r2, r3, #15
 8006454:	6879      	ldr	r1, [r7, #4]
 8006456:	4613      	mov	r3, r2
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	4413      	add	r3, r2
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	440b      	add	r3, r1
 8006460:	3324      	adds	r3, #36	@ 0x24
 8006462:	2201      	movs	r2, #1
 8006464:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006466:	4b55      	ldr	r3, [pc, #340]	@ (80065bc <USBD_CDC_Init+0x1e8>)
 8006468:	7819      	ldrb	r1, [r3, #0]
 800646a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800646e:	2202      	movs	r2, #2
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f002 fb42 	bl	8008afa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006476:	4b51      	ldr	r3, [pc, #324]	@ (80065bc <USBD_CDC_Init+0x1e8>)
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	f003 020f 	and.w	r2, r3, #15
 800647e:	6879      	ldr	r1, [r7, #4]
 8006480:	4613      	mov	r3, r2
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	4413      	add	r3, r2
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	440b      	add	r3, r1
 800648a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800648e:	2201      	movs	r2, #1
 8006490:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006492:	4b4b      	ldr	r3, [pc, #300]	@ (80065c0 <USBD_CDC_Init+0x1ec>)
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	f003 020f 	and.w	r2, r3, #15
 800649a:	6879      	ldr	r1, [r7, #4]
 800649c:	4613      	mov	r3, r2
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	4413      	add	r3, r2
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	440b      	add	r3, r1
 80064a6:	3326      	adds	r3, #38	@ 0x26
 80064a8:	2210      	movs	r2, #16
 80064aa:	801a      	strh	r2, [r3, #0]
 80064ac:	e035      	b.n	800651a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80064ae:	4b42      	ldr	r3, [pc, #264]	@ (80065b8 <USBD_CDC_Init+0x1e4>)
 80064b0:	7819      	ldrb	r1, [r3, #0]
 80064b2:	2340      	movs	r3, #64	@ 0x40
 80064b4:	2202      	movs	r2, #2
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f002 fb1f 	bl	8008afa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80064bc:	4b3e      	ldr	r3, [pc, #248]	@ (80065b8 <USBD_CDC_Init+0x1e4>)
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	f003 020f 	and.w	r2, r3, #15
 80064c4:	6879      	ldr	r1, [r7, #4]
 80064c6:	4613      	mov	r3, r2
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	4413      	add	r3, r2
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	440b      	add	r3, r1
 80064d0:	3324      	adds	r3, #36	@ 0x24
 80064d2:	2201      	movs	r2, #1
 80064d4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80064d6:	4b39      	ldr	r3, [pc, #228]	@ (80065bc <USBD_CDC_Init+0x1e8>)
 80064d8:	7819      	ldrb	r1, [r3, #0]
 80064da:	2340      	movs	r3, #64	@ 0x40
 80064dc:	2202      	movs	r2, #2
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f002 fb0b 	bl	8008afa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80064e4:	4b35      	ldr	r3, [pc, #212]	@ (80065bc <USBD_CDC_Init+0x1e8>)
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	f003 020f 	and.w	r2, r3, #15
 80064ec:	6879      	ldr	r1, [r7, #4]
 80064ee:	4613      	mov	r3, r2
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	4413      	add	r3, r2
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	440b      	add	r3, r1
 80064f8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80064fc:	2201      	movs	r2, #1
 80064fe:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006500:	4b2f      	ldr	r3, [pc, #188]	@ (80065c0 <USBD_CDC_Init+0x1ec>)
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	f003 020f 	and.w	r2, r3, #15
 8006508:	6879      	ldr	r1, [r7, #4]
 800650a:	4613      	mov	r3, r2
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	4413      	add	r3, r2
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	440b      	add	r3, r1
 8006514:	3326      	adds	r3, #38	@ 0x26
 8006516:	2210      	movs	r2, #16
 8006518:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800651a:	4b29      	ldr	r3, [pc, #164]	@ (80065c0 <USBD_CDC_Init+0x1ec>)
 800651c:	7819      	ldrb	r1, [r3, #0]
 800651e:	2308      	movs	r3, #8
 8006520:	2203      	movs	r2, #3
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f002 fae9 	bl	8008afa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006528:	4b25      	ldr	r3, [pc, #148]	@ (80065c0 <USBD_CDC_Init+0x1ec>)
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	f003 020f 	and.w	r2, r3, #15
 8006530:	6879      	ldr	r1, [r7, #4]
 8006532:	4613      	mov	r3, r2
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	4413      	add	r3, r2
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	440b      	add	r3, r1
 800653c:	3324      	adds	r3, #36	@ 0x24
 800653e:	2201      	movs	r2, #1
 8006540:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	33b0      	adds	r3, #176	@ 0xb0
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	4413      	add	r3, r2
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2200      	movs	r2, #0
 8006562:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2200      	movs	r2, #0
 800656a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006574:	2b00      	cmp	r3, #0
 8006576:	d101      	bne.n	800657c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006578:	2302      	movs	r3, #2
 800657a:	e018      	b.n	80065ae <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	7c1b      	ldrb	r3, [r3, #16]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d10a      	bne.n	800659a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006584:	4b0d      	ldr	r3, [pc, #52]	@ (80065bc <USBD_CDC_Init+0x1e8>)
 8006586:	7819      	ldrb	r1, [r3, #0]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800658e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f002 fba0 	bl	8008cd8 <USBD_LL_PrepareReceive>
 8006598:	e008      	b.n	80065ac <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800659a:	4b08      	ldr	r3, [pc, #32]	@ (80065bc <USBD_CDC_Init+0x1e8>)
 800659c:	7819      	ldrb	r1, [r3, #0]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80065a4:	2340      	movs	r3, #64	@ 0x40
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f002 fb96 	bl	8008cd8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3710      	adds	r7, #16
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	20000093 	.word	0x20000093
 80065bc:	20000094 	.word	0x20000094
 80065c0:	20000095 	.word	0x20000095

080065c4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	460b      	mov	r3, r1
 80065ce:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80065d0:	4b3a      	ldr	r3, [pc, #232]	@ (80066bc <USBD_CDC_DeInit+0xf8>)
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	4619      	mov	r1, r3
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f002 fab5 	bl	8008b46 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80065dc:	4b37      	ldr	r3, [pc, #220]	@ (80066bc <USBD_CDC_DeInit+0xf8>)
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	f003 020f 	and.w	r2, r3, #15
 80065e4:	6879      	ldr	r1, [r7, #4]
 80065e6:	4613      	mov	r3, r2
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	4413      	add	r3, r2
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	440b      	add	r3, r1
 80065f0:	3324      	adds	r3, #36	@ 0x24
 80065f2:	2200      	movs	r2, #0
 80065f4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80065f6:	4b32      	ldr	r3, [pc, #200]	@ (80066c0 <USBD_CDC_DeInit+0xfc>)
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	4619      	mov	r1, r3
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f002 faa2 	bl	8008b46 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006602:	4b2f      	ldr	r3, [pc, #188]	@ (80066c0 <USBD_CDC_DeInit+0xfc>)
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	f003 020f 	and.w	r2, r3, #15
 800660a:	6879      	ldr	r1, [r7, #4]
 800660c:	4613      	mov	r3, r2
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	4413      	add	r3, r2
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	440b      	add	r3, r1
 8006616:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800661a:	2200      	movs	r2, #0
 800661c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800661e:	4b29      	ldr	r3, [pc, #164]	@ (80066c4 <USBD_CDC_DeInit+0x100>)
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	4619      	mov	r1, r3
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f002 fa8e 	bl	8008b46 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800662a:	4b26      	ldr	r3, [pc, #152]	@ (80066c4 <USBD_CDC_DeInit+0x100>)
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	f003 020f 	and.w	r2, r3, #15
 8006632:	6879      	ldr	r1, [r7, #4]
 8006634:	4613      	mov	r3, r2
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	4413      	add	r3, r2
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	440b      	add	r3, r1
 800663e:	3324      	adds	r3, #36	@ 0x24
 8006640:	2200      	movs	r2, #0
 8006642:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006644:	4b1f      	ldr	r3, [pc, #124]	@ (80066c4 <USBD_CDC_DeInit+0x100>)
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	f003 020f 	and.w	r2, r3, #15
 800664c:	6879      	ldr	r1, [r7, #4]
 800664e:	4613      	mov	r3, r2
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	4413      	add	r3, r2
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	440b      	add	r3, r1
 8006658:	3326      	adds	r3, #38	@ 0x26
 800665a:	2200      	movs	r2, #0
 800665c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	32b0      	adds	r2, #176	@ 0xb0
 8006668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d01f      	beq.n	80066b0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	33b0      	adds	r3, #176	@ 0xb0
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	4413      	add	r3, r2
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	32b0      	adds	r2, #176	@ 0xb0
 800668e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006692:	4618      	mov	r0, r3
 8006694:	f002 fb62 	bl	8008d5c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	32b0      	adds	r2, #176	@ 0xb0
 80066a2:	2100      	movs	r1, #0
 80066a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3708      	adds	r7, #8
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	20000093 	.word	0x20000093
 80066c0:	20000094 	.word	0x20000094
 80066c4:	20000095 	.word	0x20000095

080066c8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b086      	sub	sp, #24
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	32b0      	adds	r2, #176	@ 0xb0
 80066dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066e0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80066e2:	2300      	movs	r3, #0
 80066e4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80066e6:	2300      	movs	r3, #0
 80066e8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80066ea:	2300      	movs	r3, #0
 80066ec:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d101      	bne.n	80066f8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80066f4:	2303      	movs	r3, #3
 80066f6:	e0bf      	b.n	8006878 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006700:	2b00      	cmp	r3, #0
 8006702:	d050      	beq.n	80067a6 <USBD_CDC_Setup+0xde>
 8006704:	2b20      	cmp	r3, #32
 8006706:	f040 80af 	bne.w	8006868 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	88db      	ldrh	r3, [r3, #6]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d03a      	beq.n	8006788 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	b25b      	sxtb	r3, r3
 8006718:	2b00      	cmp	r3, #0
 800671a:	da1b      	bge.n	8006754 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	33b0      	adds	r3, #176	@ 0xb0
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	4413      	add	r3, r2
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	683a      	ldr	r2, [r7, #0]
 8006730:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006732:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006734:	683a      	ldr	r2, [r7, #0]
 8006736:	88d2      	ldrh	r2, [r2, #6]
 8006738:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	88db      	ldrh	r3, [r3, #6]
 800673e:	2b07      	cmp	r3, #7
 8006740:	bf28      	it	cs
 8006742:	2307      	movcs	r3, #7
 8006744:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	89fa      	ldrh	r2, [r7, #14]
 800674a:	4619      	mov	r1, r3
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f001 fd93 	bl	8008278 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006752:	e090      	b.n	8006876 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	785a      	ldrb	r2, [r3, #1]
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	88db      	ldrh	r3, [r3, #6]
 8006762:	2b3f      	cmp	r3, #63	@ 0x3f
 8006764:	d803      	bhi.n	800676e <USBD_CDC_Setup+0xa6>
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	88db      	ldrh	r3, [r3, #6]
 800676a:	b2da      	uxtb	r2, r3
 800676c:	e000      	b.n	8006770 <USBD_CDC_Setup+0xa8>
 800676e:	2240      	movs	r2, #64	@ 0x40
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006776:	6939      	ldr	r1, [r7, #16]
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800677e:	461a      	mov	r2, r3
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f001 fda5 	bl	80082d0 <USBD_CtlPrepareRx>
      break;
 8006786:	e076      	b.n	8006876 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	33b0      	adds	r3, #176	@ 0xb0
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	4413      	add	r3, r2
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	683a      	ldr	r2, [r7, #0]
 800679c:	7850      	ldrb	r0, [r2, #1]
 800679e:	2200      	movs	r2, #0
 80067a0:	6839      	ldr	r1, [r7, #0]
 80067a2:	4798      	blx	r3
      break;
 80067a4:	e067      	b.n	8006876 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	785b      	ldrb	r3, [r3, #1]
 80067aa:	2b0b      	cmp	r3, #11
 80067ac:	d851      	bhi.n	8006852 <USBD_CDC_Setup+0x18a>
 80067ae:	a201      	add	r2, pc, #4	@ (adr r2, 80067b4 <USBD_CDC_Setup+0xec>)
 80067b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b4:	080067e5 	.word	0x080067e5
 80067b8:	08006861 	.word	0x08006861
 80067bc:	08006853 	.word	0x08006853
 80067c0:	08006853 	.word	0x08006853
 80067c4:	08006853 	.word	0x08006853
 80067c8:	08006853 	.word	0x08006853
 80067cc:	08006853 	.word	0x08006853
 80067d0:	08006853 	.word	0x08006853
 80067d4:	08006853 	.word	0x08006853
 80067d8:	08006853 	.word	0x08006853
 80067dc:	0800680f 	.word	0x0800680f
 80067e0:	08006839 	.word	0x08006839
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	2b03      	cmp	r3, #3
 80067ee:	d107      	bne.n	8006800 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80067f0:	f107 030a 	add.w	r3, r7, #10
 80067f4:	2202      	movs	r2, #2
 80067f6:	4619      	mov	r1, r3
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f001 fd3d 	bl	8008278 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80067fe:	e032      	b.n	8006866 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006800:	6839      	ldr	r1, [r7, #0]
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f001 fcbb 	bl	800817e <USBD_CtlError>
            ret = USBD_FAIL;
 8006808:	2303      	movs	r3, #3
 800680a:	75fb      	strb	r3, [r7, #23]
          break;
 800680c:	e02b      	b.n	8006866 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006814:	b2db      	uxtb	r3, r3
 8006816:	2b03      	cmp	r3, #3
 8006818:	d107      	bne.n	800682a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800681a:	f107 030d 	add.w	r3, r7, #13
 800681e:	2201      	movs	r2, #1
 8006820:	4619      	mov	r1, r3
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f001 fd28 	bl	8008278 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006828:	e01d      	b.n	8006866 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800682a:	6839      	ldr	r1, [r7, #0]
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f001 fca6 	bl	800817e <USBD_CtlError>
            ret = USBD_FAIL;
 8006832:	2303      	movs	r3, #3
 8006834:	75fb      	strb	r3, [r7, #23]
          break;
 8006836:	e016      	b.n	8006866 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800683e:	b2db      	uxtb	r3, r3
 8006840:	2b03      	cmp	r3, #3
 8006842:	d00f      	beq.n	8006864 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006844:	6839      	ldr	r1, [r7, #0]
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f001 fc99 	bl	800817e <USBD_CtlError>
            ret = USBD_FAIL;
 800684c:	2303      	movs	r3, #3
 800684e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006850:	e008      	b.n	8006864 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006852:	6839      	ldr	r1, [r7, #0]
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f001 fc92 	bl	800817e <USBD_CtlError>
          ret = USBD_FAIL;
 800685a:	2303      	movs	r3, #3
 800685c:	75fb      	strb	r3, [r7, #23]
          break;
 800685e:	e002      	b.n	8006866 <USBD_CDC_Setup+0x19e>
          break;
 8006860:	bf00      	nop
 8006862:	e008      	b.n	8006876 <USBD_CDC_Setup+0x1ae>
          break;
 8006864:	bf00      	nop
      }
      break;
 8006866:	e006      	b.n	8006876 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006868:	6839      	ldr	r1, [r7, #0]
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f001 fc87 	bl	800817e <USBD_CtlError>
      ret = USBD_FAIL;
 8006870:	2303      	movs	r3, #3
 8006872:	75fb      	strb	r3, [r7, #23]
      break;
 8006874:	bf00      	nop
  }

  return (uint8_t)ret;
 8006876:	7dfb      	ldrb	r3, [r7, #23]
}
 8006878:	4618      	mov	r0, r3
 800687a:	3718      	adds	r7, #24
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	460b      	mov	r3, r1
 800688a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006892:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	32b0      	adds	r2, #176	@ 0xb0
 800689e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d101      	bne.n	80068aa <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80068a6:	2303      	movs	r3, #3
 80068a8:	e065      	b.n	8006976 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	32b0      	adds	r2, #176	@ 0xb0
 80068b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068b8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80068ba:	78fb      	ldrb	r3, [r7, #3]
 80068bc:	f003 020f 	and.w	r2, r3, #15
 80068c0:	6879      	ldr	r1, [r7, #4]
 80068c2:	4613      	mov	r3, r2
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	4413      	add	r3, r2
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	440b      	add	r3, r1
 80068cc:	3318      	adds	r3, #24
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d02f      	beq.n	8006934 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80068d4:	78fb      	ldrb	r3, [r7, #3]
 80068d6:	f003 020f 	and.w	r2, r3, #15
 80068da:	6879      	ldr	r1, [r7, #4]
 80068dc:	4613      	mov	r3, r2
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	4413      	add	r3, r2
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	440b      	add	r3, r1
 80068e6:	3318      	adds	r3, #24
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	78fb      	ldrb	r3, [r7, #3]
 80068ec:	f003 010f 	and.w	r1, r3, #15
 80068f0:	68f8      	ldr	r0, [r7, #12]
 80068f2:	460b      	mov	r3, r1
 80068f4:	00db      	lsls	r3, r3, #3
 80068f6:	440b      	add	r3, r1
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	4403      	add	r3, r0
 80068fc:	331c      	adds	r3, #28
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	fbb2 f1f3 	udiv	r1, r2, r3
 8006904:	fb01 f303 	mul.w	r3, r1, r3
 8006908:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800690a:	2b00      	cmp	r3, #0
 800690c:	d112      	bne.n	8006934 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800690e:	78fb      	ldrb	r3, [r7, #3]
 8006910:	f003 020f 	and.w	r2, r3, #15
 8006914:	6879      	ldr	r1, [r7, #4]
 8006916:	4613      	mov	r3, r2
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	4413      	add	r3, r2
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	440b      	add	r3, r1
 8006920:	3318      	adds	r3, #24
 8006922:	2200      	movs	r2, #0
 8006924:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006926:	78f9      	ldrb	r1, [r7, #3]
 8006928:	2300      	movs	r3, #0
 800692a:	2200      	movs	r2, #0
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f002 f9b2 	bl	8008c96 <USBD_LL_Transmit>
 8006932:	e01f      	b.n	8006974 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	2200      	movs	r2, #0
 8006938:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	33b0      	adds	r3, #176	@ 0xb0
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	4413      	add	r3, r2
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d010      	beq.n	8006974 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	33b0      	adds	r3, #176	@ 0xb0
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	4413      	add	r3, r2
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	691b      	ldr	r3, [r3, #16]
 8006964:	68ba      	ldr	r2, [r7, #8]
 8006966:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800696a:	68ba      	ldr	r2, [r7, #8]
 800696c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006970:	78fa      	ldrb	r2, [r7, #3]
 8006972:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006974:	2300      	movs	r3, #0
}
 8006976:	4618      	mov	r0, r3
 8006978:	3710      	adds	r7, #16
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}

0800697e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800697e:	b580      	push	{r7, lr}
 8006980:	b084      	sub	sp, #16
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
 8006986:	460b      	mov	r3, r1
 8006988:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	32b0      	adds	r2, #176	@ 0xb0
 8006994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006998:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	32b0      	adds	r2, #176	@ 0xb0
 80069a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d101      	bne.n	80069b0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80069ac:	2303      	movs	r3, #3
 80069ae:	e01a      	b.n	80069e6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80069b0:	78fb      	ldrb	r3, [r7, #3]
 80069b2:	4619      	mov	r1, r3
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f002 f9b0 	bl	8008d1a <USBD_LL_GetRxDataSize>
 80069ba:	4602      	mov	r2, r0
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	33b0      	adds	r3, #176	@ 0xb0
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	4413      	add	r3, r2
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	68fa      	ldr	r2, [r7, #12]
 80069d6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80069da:	68fa      	ldr	r2, [r7, #12]
 80069dc:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80069e0:	4611      	mov	r1, r2
 80069e2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3710      	adds	r7, #16
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}

080069ee <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80069ee:	b580      	push	{r7, lr}
 80069f0:	b084      	sub	sp, #16
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	32b0      	adds	r2, #176	@ 0xb0
 8006a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a04:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d101      	bne.n	8006a10 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006a0c:	2303      	movs	r3, #3
 8006a0e:	e024      	b.n	8006a5a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	33b0      	adds	r3, #176	@ 0xb0
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	4413      	add	r3, r2
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d019      	beq.n	8006a58 <USBD_CDC_EP0_RxReady+0x6a>
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006a2a:	2bff      	cmp	r3, #255	@ 0xff
 8006a2c:	d014      	beq.n	8006a58 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	33b0      	adds	r3, #176	@ 0xb0
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	4413      	add	r3, r2
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	68fa      	ldr	r2, [r7, #12]
 8006a42:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8006a46:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006a48:	68fa      	ldr	r2, [r7, #12]
 8006a4a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006a4e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	22ff      	movs	r2, #255	@ 0xff
 8006a54:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006a58:	2300      	movs	r3, #0
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3710      	adds	r7, #16
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
	...

08006a64 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b086      	sub	sp, #24
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006a6c:	2182      	movs	r1, #130	@ 0x82
 8006a6e:	4818      	ldr	r0, [pc, #96]	@ (8006ad0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006a70:	f000 fd4f 	bl	8007512 <USBD_GetEpDesc>
 8006a74:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006a76:	2101      	movs	r1, #1
 8006a78:	4815      	ldr	r0, [pc, #84]	@ (8006ad0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006a7a:	f000 fd4a 	bl	8007512 <USBD_GetEpDesc>
 8006a7e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006a80:	2181      	movs	r1, #129	@ 0x81
 8006a82:	4813      	ldr	r0, [pc, #76]	@ (8006ad0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006a84:	f000 fd45 	bl	8007512 <USBD_GetEpDesc>
 8006a88:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d002      	beq.n	8006a96 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	2210      	movs	r2, #16
 8006a94:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d006      	beq.n	8006aaa <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006aa4:	711a      	strb	r2, [r3, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d006      	beq.n	8006abe <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ab8:	711a      	strb	r2, [r3, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2243      	movs	r2, #67	@ 0x43
 8006ac2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006ac4:	4b02      	ldr	r3, [pc, #8]	@ (8006ad0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3718      	adds	r7, #24
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	20000050 	.word	0x20000050

08006ad4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b086      	sub	sp, #24
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006adc:	2182      	movs	r1, #130	@ 0x82
 8006ade:	4818      	ldr	r0, [pc, #96]	@ (8006b40 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006ae0:	f000 fd17 	bl	8007512 <USBD_GetEpDesc>
 8006ae4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006ae6:	2101      	movs	r1, #1
 8006ae8:	4815      	ldr	r0, [pc, #84]	@ (8006b40 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006aea:	f000 fd12 	bl	8007512 <USBD_GetEpDesc>
 8006aee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006af0:	2181      	movs	r1, #129	@ 0x81
 8006af2:	4813      	ldr	r0, [pc, #76]	@ (8006b40 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006af4:	f000 fd0d 	bl	8007512 <USBD_GetEpDesc>
 8006af8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d002      	beq.n	8006b06 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	2210      	movs	r2, #16
 8006b04:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d006      	beq.n	8006b1a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	711a      	strb	r2, [r3, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f042 0202 	orr.w	r2, r2, #2
 8006b18:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d006      	beq.n	8006b2e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2200      	movs	r2, #0
 8006b24:	711a      	strb	r2, [r3, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f042 0202 	orr.w	r2, r2, #2
 8006b2c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2243      	movs	r2, #67	@ 0x43
 8006b32:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006b34:	4b02      	ldr	r3, [pc, #8]	@ (8006b40 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3718      	adds	r7, #24
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
 8006b3e:	bf00      	nop
 8006b40:	20000050 	.word	0x20000050

08006b44 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b086      	sub	sp, #24
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006b4c:	2182      	movs	r1, #130	@ 0x82
 8006b4e:	4818      	ldr	r0, [pc, #96]	@ (8006bb0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006b50:	f000 fcdf 	bl	8007512 <USBD_GetEpDesc>
 8006b54:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006b56:	2101      	movs	r1, #1
 8006b58:	4815      	ldr	r0, [pc, #84]	@ (8006bb0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006b5a:	f000 fcda 	bl	8007512 <USBD_GetEpDesc>
 8006b5e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006b60:	2181      	movs	r1, #129	@ 0x81
 8006b62:	4813      	ldr	r0, [pc, #76]	@ (8006bb0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006b64:	f000 fcd5 	bl	8007512 <USBD_GetEpDesc>
 8006b68:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d002      	beq.n	8006b76 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	2210      	movs	r2, #16
 8006b74:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d006      	beq.n	8006b8a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b84:	711a      	strb	r2, [r3, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d006      	beq.n	8006b9e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b98:	711a      	strb	r2, [r3, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2243      	movs	r2, #67	@ 0x43
 8006ba2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006ba4:	4b02      	ldr	r3, [pc, #8]	@ (8006bb0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3718      	adds	r7, #24
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	bf00      	nop
 8006bb0:	20000050 	.word	0x20000050

08006bb4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	220a      	movs	r2, #10
 8006bc0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006bc2:	4b03      	ldr	r3, [pc, #12]	@ (8006bd0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	370c      	adds	r7, #12
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr
 8006bd0:	2000000c 	.word	0x2000000c

08006bd4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d101      	bne.n	8006be8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006be4:	2303      	movs	r3, #3
 8006be6:	e009      	b.n	8006bfc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	33b0      	adds	r3, #176	@ 0xb0
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	4413      	add	r3, r2
 8006bf6:	683a      	ldr	r2, [r7, #0]
 8006bf8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	370c      	adds	r7, #12
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b087      	sub	sp, #28
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	32b0      	adds	r2, #176	@ 0xb0
 8006c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c22:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d101      	bne.n	8006c2e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	e008      	b.n	8006c40 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	68ba      	ldr	r2, [r7, #8]
 8006c32:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	371c      	adds	r7, #28
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b085      	sub	sp, #20
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	32b0      	adds	r2, #176	@ 0xb0
 8006c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c64:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d101      	bne.n	8006c70 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006c6c:	2303      	movs	r3, #3
 8006c6e:	e004      	b.n	8006c7a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	683a      	ldr	r2, [r7, #0]
 8006c74:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006c78:	2300      	movs	r3, #0
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3714      	adds	r7, #20
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr
	...

08006c88 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b084      	sub	sp, #16
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	32b0      	adds	r2, #176	@ 0xb0
 8006c9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c9e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d101      	bne.n	8006cae <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006caa:	2303      	movs	r3, #3
 8006cac:	e025      	b.n	8006cfa <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d11f      	bne.n	8006cf8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006cc0:	4b10      	ldr	r3, [pc, #64]	@ (8006d04 <USBD_CDC_TransmitPacket+0x7c>)
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	f003 020f 	and.w	r2, r3, #15
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	4613      	mov	r3, r2
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	4413      	add	r3, r2
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	4403      	add	r3, r0
 8006cda:	3318      	adds	r3, #24
 8006cdc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006cde:	4b09      	ldr	r3, [pc, #36]	@ (8006d04 <USBD_CDC_TransmitPacket+0x7c>)
 8006ce0:	7819      	ldrb	r1, [r3, #0]
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f001 ffd1 	bl	8008c96 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3710      	adds	r7, #16
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	20000093 	.word	0x20000093

08006d08 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	32b0      	adds	r2, #176	@ 0xb0
 8006d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d1e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	32b0      	adds	r2, #176	@ 0xb0
 8006d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d101      	bne.n	8006d36 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006d32:	2303      	movs	r3, #3
 8006d34:	e018      	b.n	8006d68 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	7c1b      	ldrb	r3, [r3, #16]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d10a      	bne.n	8006d54 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006d3e:	4b0c      	ldr	r3, [pc, #48]	@ (8006d70 <USBD_CDC_ReceivePacket+0x68>)
 8006d40:	7819      	ldrb	r1, [r3, #0]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006d48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f001 ffc3 	bl	8008cd8 <USBD_LL_PrepareReceive>
 8006d52:	e008      	b.n	8006d66 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006d54:	4b06      	ldr	r3, [pc, #24]	@ (8006d70 <USBD_CDC_ReceivePacket+0x68>)
 8006d56:	7819      	ldrb	r1, [r3, #0]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006d5e:	2340      	movs	r3, #64	@ 0x40
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f001 ffb9 	bl	8008cd8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3710      	adds	r7, #16
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}
 8006d70:	20000094 	.word	0x20000094

08006d74 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b086      	sub	sp, #24
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	60f8      	str	r0, [r7, #12]
 8006d7c:	60b9      	str	r1, [r7, #8]
 8006d7e:	4613      	mov	r3, r2
 8006d80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d101      	bne.n	8006d8c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006d88:	2303      	movs	r3, #3
 8006d8a:	e01f      	b.n	8006dcc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2200      	movs	r2, #0
 8006d98:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d003      	beq.n	8006db2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	68ba      	ldr	r2, [r7, #8]
 8006dae:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2201      	movs	r2, #1
 8006db6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	79fa      	ldrb	r2, [r7, #7]
 8006dbe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006dc0:	68f8      	ldr	r0, [r7, #12]
 8006dc2:	f001 fe33 	bl	8008a2c <USBD_LL_Init>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006dca:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3718      	adds	r7, #24
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006dde:	2300      	movs	r3, #0
 8006de0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d101      	bne.n	8006dec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006de8:	2303      	movs	r3, #3
 8006dea:	e025      	b.n	8006e38 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	683a      	ldr	r2, [r7, #0]
 8006df0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	32ae      	adds	r2, #174	@ 0xae
 8006dfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d00f      	beq.n	8006e28 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	32ae      	adds	r2, #174	@ 0xae
 8006e12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e18:	f107 020e 	add.w	r2, r7, #14
 8006e1c:	4610      	mov	r0, r2
 8006e1e:	4798      	blx	r3
 8006e20:	4602      	mov	r2, r0
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006e2e:	1c5a      	adds	r2, r3, #1
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006e36:	2300      	movs	r3, #0
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3710      	adds	r7, #16
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b082      	sub	sp, #8
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f001 fe3b 	bl	8008ac4 <USBD_LL_Start>
 8006e4e:	4603      	mov	r3, r0
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3708      	adds	r7, #8
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e60:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	370c      	adds	r7, #12
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr

08006e6e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b084      	sub	sp, #16
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
 8006e76:	460b      	mov	r3, r1
 8006e78:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d009      	beq.n	8006e9c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	78fa      	ldrb	r2, [r7, #3]
 8006e92:	4611      	mov	r1, r2
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	4798      	blx	r3
 8006e98:	4603      	mov	r3, r0
 8006e9a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3710      	adds	r7, #16
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}

08006ea6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ea6:	b580      	push	{r7, lr}
 8006ea8:	b084      	sub	sp, #16
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
 8006eae:	460b      	mov	r3, r1
 8006eb0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	78fa      	ldrb	r2, [r7, #3]
 8006ec0:	4611      	mov	r1, r2
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	4798      	blx	r3
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d001      	beq.n	8006ed0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006ecc:	2303      	movs	r3, #3
 8006ece:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3710      	adds	r7, #16
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b084      	sub	sp, #16
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
 8006ee2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006eea:	6839      	ldr	r1, [r7, #0]
 8006eec:	4618      	mov	r0, r3
 8006eee:	f001 f90c 	bl	800810a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006f00:	461a      	mov	r2, r3
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006f0e:	f003 031f 	and.w	r3, r3, #31
 8006f12:	2b02      	cmp	r3, #2
 8006f14:	d01a      	beq.n	8006f4c <USBD_LL_SetupStage+0x72>
 8006f16:	2b02      	cmp	r3, #2
 8006f18:	d822      	bhi.n	8006f60 <USBD_LL_SetupStage+0x86>
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d002      	beq.n	8006f24 <USBD_LL_SetupStage+0x4a>
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d00a      	beq.n	8006f38 <USBD_LL_SetupStage+0x5e>
 8006f22:	e01d      	b.n	8006f60 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 fb63 	bl	80075f8 <USBD_StdDevReq>
 8006f32:	4603      	mov	r3, r0
 8006f34:	73fb      	strb	r3, [r7, #15]
      break;
 8006f36:	e020      	b.n	8006f7a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006f3e:	4619      	mov	r1, r3
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 fbcb 	bl	80076dc <USBD_StdItfReq>
 8006f46:	4603      	mov	r3, r0
 8006f48:	73fb      	strb	r3, [r7, #15]
      break;
 8006f4a:	e016      	b.n	8006f7a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006f52:	4619      	mov	r1, r3
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 fc2d 	bl	80077b4 <USBD_StdEPReq>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	73fb      	strb	r3, [r7, #15]
      break;
 8006f5e:	e00c      	b.n	8006f7a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006f66:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f001 fe08 	bl	8008b84 <USBD_LL_StallEP>
 8006f74:	4603      	mov	r3, r0
 8006f76:	73fb      	strb	r3, [r7, #15]
      break;
 8006f78:	bf00      	nop
  }

  return ret;
 8006f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3710      	adds	r7, #16
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b086      	sub	sp, #24
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	607a      	str	r2, [r7, #4]
 8006f90:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006f92:	2300      	movs	r3, #0
 8006f94:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006f96:	7afb      	ldrb	r3, [r7, #11]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d16e      	bne.n	800707a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006fa2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006faa:	2b03      	cmp	r3, #3
 8006fac:	f040 8098 	bne.w	80070e0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	689a      	ldr	r2, [r3, #8]
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d913      	bls.n	8006fe4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	689a      	ldr	r2, [r3, #8]
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	1ad2      	subs	r2, r2, r3
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	68da      	ldr	r2, [r3, #12]
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	bf28      	it	cs
 8006fd6:	4613      	movcs	r3, r2
 8006fd8:	461a      	mov	r2, r3
 8006fda:	6879      	ldr	r1, [r7, #4]
 8006fdc:	68f8      	ldr	r0, [r7, #12]
 8006fde:	f001 f994 	bl	800830a <USBD_CtlContinueRx>
 8006fe2:	e07d      	b.n	80070e0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006fea:	f003 031f 	and.w	r3, r3, #31
 8006fee:	2b02      	cmp	r3, #2
 8006ff0:	d014      	beq.n	800701c <USBD_LL_DataOutStage+0x98>
 8006ff2:	2b02      	cmp	r3, #2
 8006ff4:	d81d      	bhi.n	8007032 <USBD_LL_DataOutStage+0xae>
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d002      	beq.n	8007000 <USBD_LL_DataOutStage+0x7c>
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d003      	beq.n	8007006 <USBD_LL_DataOutStage+0x82>
 8006ffe:	e018      	b.n	8007032 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007000:	2300      	movs	r3, #0
 8007002:	75bb      	strb	r3, [r7, #22]
            break;
 8007004:	e018      	b.n	8007038 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800700c:	b2db      	uxtb	r3, r3
 800700e:	4619      	mov	r1, r3
 8007010:	68f8      	ldr	r0, [r7, #12]
 8007012:	f000 fa64 	bl	80074de <USBD_CoreFindIF>
 8007016:	4603      	mov	r3, r0
 8007018:	75bb      	strb	r3, [r7, #22]
            break;
 800701a:	e00d      	b.n	8007038 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007022:	b2db      	uxtb	r3, r3
 8007024:	4619      	mov	r1, r3
 8007026:	68f8      	ldr	r0, [r7, #12]
 8007028:	f000 fa66 	bl	80074f8 <USBD_CoreFindEP>
 800702c:	4603      	mov	r3, r0
 800702e:	75bb      	strb	r3, [r7, #22]
            break;
 8007030:	e002      	b.n	8007038 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007032:	2300      	movs	r3, #0
 8007034:	75bb      	strb	r3, [r7, #22]
            break;
 8007036:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007038:	7dbb      	ldrb	r3, [r7, #22]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d119      	bne.n	8007072 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007044:	b2db      	uxtb	r3, r3
 8007046:	2b03      	cmp	r3, #3
 8007048:	d113      	bne.n	8007072 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800704a:	7dba      	ldrb	r2, [r7, #22]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	32ae      	adds	r2, #174	@ 0xae
 8007050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007054:	691b      	ldr	r3, [r3, #16]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d00b      	beq.n	8007072 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800705a:	7dba      	ldrb	r2, [r7, #22]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007062:	7dba      	ldrb	r2, [r7, #22]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	32ae      	adds	r2, #174	@ 0xae
 8007068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800706c:	691b      	ldr	r3, [r3, #16]
 800706e:	68f8      	ldr	r0, [r7, #12]
 8007070:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007072:	68f8      	ldr	r0, [r7, #12]
 8007074:	f001 f95a 	bl	800832c <USBD_CtlSendStatus>
 8007078:	e032      	b.n	80070e0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800707a:	7afb      	ldrb	r3, [r7, #11]
 800707c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007080:	b2db      	uxtb	r3, r3
 8007082:	4619      	mov	r1, r3
 8007084:	68f8      	ldr	r0, [r7, #12]
 8007086:	f000 fa37 	bl	80074f8 <USBD_CoreFindEP>
 800708a:	4603      	mov	r3, r0
 800708c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800708e:	7dbb      	ldrb	r3, [r7, #22]
 8007090:	2bff      	cmp	r3, #255	@ 0xff
 8007092:	d025      	beq.n	80070e0 <USBD_LL_DataOutStage+0x15c>
 8007094:	7dbb      	ldrb	r3, [r7, #22]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d122      	bne.n	80070e0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	2b03      	cmp	r3, #3
 80070a4:	d117      	bne.n	80070d6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80070a6:	7dba      	ldrb	r2, [r7, #22]
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	32ae      	adds	r2, #174	@ 0xae
 80070ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070b0:	699b      	ldr	r3, [r3, #24]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d00f      	beq.n	80070d6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80070b6:	7dba      	ldrb	r2, [r7, #22]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80070be:	7dba      	ldrb	r2, [r7, #22]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	32ae      	adds	r2, #174	@ 0xae
 80070c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070c8:	699b      	ldr	r3, [r3, #24]
 80070ca:	7afa      	ldrb	r2, [r7, #11]
 80070cc:	4611      	mov	r1, r2
 80070ce:	68f8      	ldr	r0, [r7, #12]
 80070d0:	4798      	blx	r3
 80070d2:	4603      	mov	r3, r0
 80070d4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80070d6:	7dfb      	ldrb	r3, [r7, #23]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d001      	beq.n	80070e0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80070dc:	7dfb      	ldrb	r3, [r7, #23]
 80070de:	e000      	b.n	80070e2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80070e0:	2300      	movs	r3, #0
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3718      	adds	r7, #24
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}

080070ea <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80070ea:	b580      	push	{r7, lr}
 80070ec:	b086      	sub	sp, #24
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	60f8      	str	r0, [r7, #12]
 80070f2:	460b      	mov	r3, r1
 80070f4:	607a      	str	r2, [r7, #4]
 80070f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80070f8:	7afb      	ldrb	r3, [r7, #11]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d16f      	bne.n	80071de <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	3314      	adds	r3, #20
 8007102:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800710a:	2b02      	cmp	r3, #2
 800710c:	d15a      	bne.n	80071c4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	689a      	ldr	r2, [r3, #8]
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	68db      	ldr	r3, [r3, #12]
 8007116:	429a      	cmp	r2, r3
 8007118:	d914      	bls.n	8007144 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	689a      	ldr	r2, [r3, #8]
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	68db      	ldr	r3, [r3, #12]
 8007122:	1ad2      	subs	r2, r2, r3
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	461a      	mov	r2, r3
 800712e:	6879      	ldr	r1, [r7, #4]
 8007130:	68f8      	ldr	r0, [r7, #12]
 8007132:	f001 f8bc 	bl	80082ae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007136:	2300      	movs	r3, #0
 8007138:	2200      	movs	r2, #0
 800713a:	2100      	movs	r1, #0
 800713c:	68f8      	ldr	r0, [r7, #12]
 800713e:	f001 fdcb 	bl	8008cd8 <USBD_LL_PrepareReceive>
 8007142:	e03f      	b.n	80071c4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	68da      	ldr	r2, [r3, #12]
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	429a      	cmp	r2, r3
 800714e:	d11c      	bne.n	800718a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	685a      	ldr	r2, [r3, #4]
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007158:	429a      	cmp	r2, r3
 800715a:	d316      	bcc.n	800718a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	685a      	ldr	r2, [r3, #4]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007166:	429a      	cmp	r2, r3
 8007168:	d20f      	bcs.n	800718a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800716a:	2200      	movs	r2, #0
 800716c:	2100      	movs	r1, #0
 800716e:	68f8      	ldr	r0, [r7, #12]
 8007170:	f001 f89d 	bl	80082ae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2200      	movs	r2, #0
 8007178:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800717c:	2300      	movs	r3, #0
 800717e:	2200      	movs	r2, #0
 8007180:	2100      	movs	r1, #0
 8007182:	68f8      	ldr	r0, [r7, #12]
 8007184:	f001 fda8 	bl	8008cd8 <USBD_LL_PrepareReceive>
 8007188:	e01c      	b.n	80071c4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007190:	b2db      	uxtb	r3, r3
 8007192:	2b03      	cmp	r3, #3
 8007194:	d10f      	bne.n	80071b6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800719c:	68db      	ldr	r3, [r3, #12]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d009      	beq.n	80071b6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80071b0:	68db      	ldr	r3, [r3, #12]
 80071b2:	68f8      	ldr	r0, [r7, #12]
 80071b4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80071b6:	2180      	movs	r1, #128	@ 0x80
 80071b8:	68f8      	ldr	r0, [r7, #12]
 80071ba:	f001 fce3 	bl	8008b84 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80071be:	68f8      	ldr	r0, [r7, #12]
 80071c0:	f001 f8c7 	bl	8008352 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d03a      	beq.n	8007244 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80071ce:	68f8      	ldr	r0, [r7, #12]
 80071d0:	f7ff fe42 	bl	8006e58 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2200      	movs	r2, #0
 80071d8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80071dc:	e032      	b.n	8007244 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80071de:	7afb      	ldrb	r3, [r7, #11]
 80071e0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	4619      	mov	r1, r3
 80071e8:	68f8      	ldr	r0, [r7, #12]
 80071ea:	f000 f985 	bl	80074f8 <USBD_CoreFindEP>
 80071ee:	4603      	mov	r3, r0
 80071f0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80071f2:	7dfb      	ldrb	r3, [r7, #23]
 80071f4:	2bff      	cmp	r3, #255	@ 0xff
 80071f6:	d025      	beq.n	8007244 <USBD_LL_DataInStage+0x15a>
 80071f8:	7dfb      	ldrb	r3, [r7, #23]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d122      	bne.n	8007244 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007204:	b2db      	uxtb	r3, r3
 8007206:	2b03      	cmp	r3, #3
 8007208:	d11c      	bne.n	8007244 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800720a:	7dfa      	ldrb	r2, [r7, #23]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	32ae      	adds	r2, #174	@ 0xae
 8007210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007214:	695b      	ldr	r3, [r3, #20]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d014      	beq.n	8007244 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800721a:	7dfa      	ldrb	r2, [r7, #23]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007222:	7dfa      	ldrb	r2, [r7, #23]
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	32ae      	adds	r2, #174	@ 0xae
 8007228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800722c:	695b      	ldr	r3, [r3, #20]
 800722e:	7afa      	ldrb	r2, [r7, #11]
 8007230:	4611      	mov	r1, r2
 8007232:	68f8      	ldr	r0, [r7, #12]
 8007234:	4798      	blx	r3
 8007236:	4603      	mov	r3, r0
 8007238:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800723a:	7dbb      	ldrb	r3, [r7, #22]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d001      	beq.n	8007244 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007240:	7dbb      	ldrb	r3, [r7, #22]
 8007242:	e000      	b.n	8007246 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007244:	2300      	movs	r3, #0
}
 8007246:	4618      	mov	r0, r3
 8007248:	3718      	adds	r7, #24
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}

0800724e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800724e:	b580      	push	{r7, lr}
 8007250:	b084      	sub	sp, #16
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007256:	2300      	movs	r3, #0
 8007258:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2201      	movs	r2, #1
 800725e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007286:	2b00      	cmp	r3, #0
 8007288:	d014      	beq.n	80072b4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d00e      	beq.n	80072b4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	6852      	ldr	r2, [r2, #4]
 80072a2:	b2d2      	uxtb	r2, r2
 80072a4:	4611      	mov	r1, r2
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	4798      	blx	r3
 80072aa:	4603      	mov	r3, r0
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d001      	beq.n	80072b4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80072b0:	2303      	movs	r3, #3
 80072b2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80072b4:	2340      	movs	r3, #64	@ 0x40
 80072b6:	2200      	movs	r2, #0
 80072b8:	2100      	movs	r1, #0
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f001 fc1d 	bl	8008afa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2240      	movs	r2, #64	@ 0x40
 80072cc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80072d0:	2340      	movs	r3, #64	@ 0x40
 80072d2:	2200      	movs	r2, #0
 80072d4:	2180      	movs	r1, #128	@ 0x80
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f001 fc0f 	bl	8008afa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2240      	movs	r2, #64	@ 0x40
 80072e6:	621a      	str	r2, [r3, #32]

  return ret;
 80072e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3710      	adds	r7, #16
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}

080072f2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80072f2:	b480      	push	{r7}
 80072f4:	b083      	sub	sp, #12
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
 80072fa:	460b      	mov	r3, r1
 80072fc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	78fa      	ldrb	r2, [r7, #3]
 8007302:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	370c      	adds	r7, #12
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr

08007312 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007312:	b480      	push	{r7}
 8007314:	b083      	sub	sp, #12
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007320:	b2db      	uxtb	r3, r3
 8007322:	2b04      	cmp	r3, #4
 8007324:	d006      	beq.n	8007334 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800732c:	b2da      	uxtb	r2, r3
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2204      	movs	r2, #4
 8007338:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800733c:	2300      	movs	r3, #0
}
 800733e:	4618      	mov	r0, r3
 8007340:	370c      	adds	r7, #12
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr

0800734a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800734a:	b480      	push	{r7}
 800734c:	b083      	sub	sp, #12
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007358:	b2db      	uxtb	r3, r3
 800735a:	2b04      	cmp	r3, #4
 800735c:	d106      	bne.n	800736c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007364:	b2da      	uxtb	r2, r3
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800736c:	2300      	movs	r3, #0
}
 800736e:	4618      	mov	r0, r3
 8007370:	370c      	adds	r7, #12
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr

0800737a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800737a:	b580      	push	{r7, lr}
 800737c:	b082      	sub	sp, #8
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007388:	b2db      	uxtb	r3, r3
 800738a:	2b03      	cmp	r3, #3
 800738c:	d110      	bne.n	80073b0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007394:	2b00      	cmp	r3, #0
 8007396:	d00b      	beq.n	80073b0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800739e:	69db      	ldr	r3, [r3, #28]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d005      	beq.n	80073b0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073aa:	69db      	ldr	r3, [r3, #28]
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80073b0:	2300      	movs	r3, #0
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3708      	adds	r7, #8
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80073ba:	b580      	push	{r7, lr}
 80073bc:	b082      	sub	sp, #8
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
 80073c2:	460b      	mov	r3, r1
 80073c4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	32ae      	adds	r2, #174	@ 0xae
 80073d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d101      	bne.n	80073dc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80073d8:	2303      	movs	r3, #3
 80073da:	e01c      	b.n	8007416 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	2b03      	cmp	r3, #3
 80073e6:	d115      	bne.n	8007414 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	32ae      	adds	r2, #174	@ 0xae
 80073f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073f6:	6a1b      	ldr	r3, [r3, #32]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d00b      	beq.n	8007414 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	32ae      	adds	r2, #174	@ 0xae
 8007406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800740a:	6a1b      	ldr	r3, [r3, #32]
 800740c:	78fa      	ldrb	r2, [r7, #3]
 800740e:	4611      	mov	r1, r2
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	3708      	adds	r7, #8
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}

0800741e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800741e:	b580      	push	{r7, lr}
 8007420:	b082      	sub	sp, #8
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
 8007426:	460b      	mov	r3, r1
 8007428:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	32ae      	adds	r2, #174	@ 0xae
 8007434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d101      	bne.n	8007440 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800743c:	2303      	movs	r3, #3
 800743e:	e01c      	b.n	800747a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007446:	b2db      	uxtb	r3, r3
 8007448:	2b03      	cmp	r3, #3
 800744a:	d115      	bne.n	8007478 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	32ae      	adds	r2, #174	@ 0xae
 8007456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800745a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800745c:	2b00      	cmp	r3, #0
 800745e:	d00b      	beq.n	8007478 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	32ae      	adds	r2, #174	@ 0xae
 800746a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800746e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007470:	78fa      	ldrb	r2, [r7, #3]
 8007472:	4611      	mov	r1, r2
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007478:	2300      	movs	r3, #0
}
 800747a:	4618      	mov	r0, r3
 800747c:	3708      	adds	r7, #8
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}

08007482 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007482:	b480      	push	{r7}
 8007484:	b083      	sub	sp, #12
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800748a:	2300      	movs	r3, #0
}
 800748c:	4618      	mov	r0, r3
 800748e:	370c      	adds	r7, #12
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr

08007498 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80074a0:	2300      	movs	r3, #0
 80074a2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d00e      	beq.n	80074d4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	6852      	ldr	r2, [r2, #4]
 80074c2:	b2d2      	uxtb	r2, r2
 80074c4:	4611      	mov	r1, r2
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	4798      	blx	r3
 80074ca:	4603      	mov	r3, r0
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d001      	beq.n	80074d4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80074d0:	2303      	movs	r3, #3
 80074d2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80074d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3710      	adds	r7, #16
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}

080074de <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80074de:	b480      	push	{r7}
 80074e0:	b083      	sub	sp, #12
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
 80074e6:	460b      	mov	r3, r1
 80074e8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80074ea:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	370c      	adds	r7, #12
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b083      	sub	sp, #12
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	460b      	mov	r3, r1
 8007502:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007504:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007506:	4618      	mov	r0, r3
 8007508:	370c      	adds	r7, #12
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr

08007512 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007512:	b580      	push	{r7, lr}
 8007514:	b086      	sub	sp, #24
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
 800751a:	460b      	mov	r3, r1
 800751c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007526:	2300      	movs	r3, #0
 8007528:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	885b      	ldrh	r3, [r3, #2]
 800752e:	b29b      	uxth	r3, r3
 8007530:	68fa      	ldr	r2, [r7, #12]
 8007532:	7812      	ldrb	r2, [r2, #0]
 8007534:	4293      	cmp	r3, r2
 8007536:	d91f      	bls.n	8007578 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800753e:	e013      	b.n	8007568 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007540:	f107 030a 	add.w	r3, r7, #10
 8007544:	4619      	mov	r1, r3
 8007546:	6978      	ldr	r0, [r7, #20]
 8007548:	f000 f81b 	bl	8007582 <USBD_GetNextDesc>
 800754c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	785b      	ldrb	r3, [r3, #1]
 8007552:	2b05      	cmp	r3, #5
 8007554:	d108      	bne.n	8007568 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	789b      	ldrb	r3, [r3, #2]
 800755e:	78fa      	ldrb	r2, [r7, #3]
 8007560:	429a      	cmp	r2, r3
 8007562:	d008      	beq.n	8007576 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007564:	2300      	movs	r3, #0
 8007566:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	885b      	ldrh	r3, [r3, #2]
 800756c:	b29a      	uxth	r2, r3
 800756e:	897b      	ldrh	r3, [r7, #10]
 8007570:	429a      	cmp	r2, r3
 8007572:	d8e5      	bhi.n	8007540 <USBD_GetEpDesc+0x2e>
 8007574:	e000      	b.n	8007578 <USBD_GetEpDesc+0x66>
          break;
 8007576:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007578:	693b      	ldr	r3, [r7, #16]
}
 800757a:	4618      	mov	r0, r3
 800757c:	3718      	adds	r7, #24
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}

08007582 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007582:	b480      	push	{r7}
 8007584:	b085      	sub	sp, #20
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
 800758a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	881b      	ldrh	r3, [r3, #0]
 8007594:	68fa      	ldr	r2, [r7, #12]
 8007596:	7812      	ldrb	r2, [r2, #0]
 8007598:	4413      	add	r3, r2
 800759a:	b29a      	uxth	r2, r3
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	461a      	mov	r2, r3
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4413      	add	r3, r2
 80075aa:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80075ac:	68fb      	ldr	r3, [r7, #12]
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3714      	adds	r7, #20
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr

080075ba <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80075ba:	b480      	push	{r7}
 80075bc:	b087      	sub	sp, #28
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	3301      	adds	r3, #1
 80075d0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80075d8:	8a3b      	ldrh	r3, [r7, #16]
 80075da:	021b      	lsls	r3, r3, #8
 80075dc:	b21a      	sxth	r2, r3
 80075de:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80075e2:	4313      	orrs	r3, r2
 80075e4:	b21b      	sxth	r3, r3
 80075e6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80075e8:	89fb      	ldrh	r3, [r7, #14]
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	371c      	adds	r7, #28
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr
	...

080075f8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007602:	2300      	movs	r3, #0
 8007604:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800760e:	2b40      	cmp	r3, #64	@ 0x40
 8007610:	d005      	beq.n	800761e <USBD_StdDevReq+0x26>
 8007612:	2b40      	cmp	r3, #64	@ 0x40
 8007614:	d857      	bhi.n	80076c6 <USBD_StdDevReq+0xce>
 8007616:	2b00      	cmp	r3, #0
 8007618:	d00f      	beq.n	800763a <USBD_StdDevReq+0x42>
 800761a:	2b20      	cmp	r3, #32
 800761c:	d153      	bne.n	80076c6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	32ae      	adds	r2, #174	@ 0xae
 8007628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	6839      	ldr	r1, [r7, #0]
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	4798      	blx	r3
 8007634:	4603      	mov	r3, r0
 8007636:	73fb      	strb	r3, [r7, #15]
      break;
 8007638:	e04a      	b.n	80076d0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	785b      	ldrb	r3, [r3, #1]
 800763e:	2b09      	cmp	r3, #9
 8007640:	d83b      	bhi.n	80076ba <USBD_StdDevReq+0xc2>
 8007642:	a201      	add	r2, pc, #4	@ (adr r2, 8007648 <USBD_StdDevReq+0x50>)
 8007644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007648:	0800769d 	.word	0x0800769d
 800764c:	080076b1 	.word	0x080076b1
 8007650:	080076bb 	.word	0x080076bb
 8007654:	080076a7 	.word	0x080076a7
 8007658:	080076bb 	.word	0x080076bb
 800765c:	0800767b 	.word	0x0800767b
 8007660:	08007671 	.word	0x08007671
 8007664:	080076bb 	.word	0x080076bb
 8007668:	08007693 	.word	0x08007693
 800766c:	08007685 	.word	0x08007685
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007670:	6839      	ldr	r1, [r7, #0]
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 fa3c 	bl	8007af0 <USBD_GetDescriptor>
          break;
 8007678:	e024      	b.n	80076c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800767a:	6839      	ldr	r1, [r7, #0]
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 fba1 	bl	8007dc4 <USBD_SetAddress>
          break;
 8007682:	e01f      	b.n	80076c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007684:	6839      	ldr	r1, [r7, #0]
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 fbe0 	bl	8007e4c <USBD_SetConfig>
 800768c:	4603      	mov	r3, r0
 800768e:	73fb      	strb	r3, [r7, #15]
          break;
 8007690:	e018      	b.n	80076c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007692:	6839      	ldr	r1, [r7, #0]
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 fc83 	bl	8007fa0 <USBD_GetConfig>
          break;
 800769a:	e013      	b.n	80076c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800769c:	6839      	ldr	r1, [r7, #0]
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 fcb4 	bl	800800c <USBD_GetStatus>
          break;
 80076a4:	e00e      	b.n	80076c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80076a6:	6839      	ldr	r1, [r7, #0]
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 fce3 	bl	8008074 <USBD_SetFeature>
          break;
 80076ae:	e009      	b.n	80076c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80076b0:	6839      	ldr	r1, [r7, #0]
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 fd07 	bl	80080c6 <USBD_ClrFeature>
          break;
 80076b8:	e004      	b.n	80076c4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80076ba:	6839      	ldr	r1, [r7, #0]
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 fd5e 	bl	800817e <USBD_CtlError>
          break;
 80076c2:	bf00      	nop
      }
      break;
 80076c4:	e004      	b.n	80076d0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80076c6:	6839      	ldr	r1, [r7, #0]
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 fd58 	bl	800817e <USBD_CtlError>
      break;
 80076ce:	bf00      	nop
  }

  return ret;
 80076d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3710      	adds	r7, #16
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop

080076dc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b084      	sub	sp, #16
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076e6:	2300      	movs	r3, #0
 80076e8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80076f2:	2b40      	cmp	r3, #64	@ 0x40
 80076f4:	d005      	beq.n	8007702 <USBD_StdItfReq+0x26>
 80076f6:	2b40      	cmp	r3, #64	@ 0x40
 80076f8:	d852      	bhi.n	80077a0 <USBD_StdItfReq+0xc4>
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d001      	beq.n	8007702 <USBD_StdItfReq+0x26>
 80076fe:	2b20      	cmp	r3, #32
 8007700:	d14e      	bne.n	80077a0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007708:	b2db      	uxtb	r3, r3
 800770a:	3b01      	subs	r3, #1
 800770c:	2b02      	cmp	r3, #2
 800770e:	d840      	bhi.n	8007792 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	889b      	ldrh	r3, [r3, #4]
 8007714:	b2db      	uxtb	r3, r3
 8007716:	2b01      	cmp	r3, #1
 8007718:	d836      	bhi.n	8007788 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	889b      	ldrh	r3, [r3, #4]
 800771e:	b2db      	uxtb	r3, r3
 8007720:	4619      	mov	r1, r3
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f7ff fedb 	bl	80074de <USBD_CoreFindIF>
 8007728:	4603      	mov	r3, r0
 800772a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800772c:	7bbb      	ldrb	r3, [r7, #14]
 800772e:	2bff      	cmp	r3, #255	@ 0xff
 8007730:	d01d      	beq.n	800776e <USBD_StdItfReq+0x92>
 8007732:	7bbb      	ldrb	r3, [r7, #14]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d11a      	bne.n	800776e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007738:	7bba      	ldrb	r2, [r7, #14]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	32ae      	adds	r2, #174	@ 0xae
 800773e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d00f      	beq.n	8007768 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007748:	7bba      	ldrb	r2, [r7, #14]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007750:	7bba      	ldrb	r2, [r7, #14]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	32ae      	adds	r2, #174	@ 0xae
 8007756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	6839      	ldr	r1, [r7, #0]
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	4798      	blx	r3
 8007762:	4603      	mov	r3, r0
 8007764:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007766:	e004      	b.n	8007772 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007768:	2303      	movs	r3, #3
 800776a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800776c:	e001      	b.n	8007772 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800776e:	2303      	movs	r3, #3
 8007770:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	88db      	ldrh	r3, [r3, #6]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d110      	bne.n	800779c <USBD_StdItfReq+0xc0>
 800777a:	7bfb      	ldrb	r3, [r7, #15]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d10d      	bne.n	800779c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 fdd3 	bl	800832c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007786:	e009      	b.n	800779c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007788:	6839      	ldr	r1, [r7, #0]
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 fcf7 	bl	800817e <USBD_CtlError>
          break;
 8007790:	e004      	b.n	800779c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007792:	6839      	ldr	r1, [r7, #0]
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 fcf2 	bl	800817e <USBD_CtlError>
          break;
 800779a:	e000      	b.n	800779e <USBD_StdItfReq+0xc2>
          break;
 800779c:	bf00      	nop
      }
      break;
 800779e:	e004      	b.n	80077aa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80077a0:	6839      	ldr	r1, [r7, #0]
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 fceb 	bl	800817e <USBD_CtlError>
      break;
 80077a8:	bf00      	nop
  }

  return ret;
 80077aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3710      	adds	r7, #16
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80077be:	2300      	movs	r3, #0
 80077c0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	889b      	ldrh	r3, [r3, #4]
 80077c6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80077d0:	2b40      	cmp	r3, #64	@ 0x40
 80077d2:	d007      	beq.n	80077e4 <USBD_StdEPReq+0x30>
 80077d4:	2b40      	cmp	r3, #64	@ 0x40
 80077d6:	f200 817f 	bhi.w	8007ad8 <USBD_StdEPReq+0x324>
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d02a      	beq.n	8007834 <USBD_StdEPReq+0x80>
 80077de:	2b20      	cmp	r3, #32
 80077e0:	f040 817a 	bne.w	8007ad8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80077e4:	7bbb      	ldrb	r3, [r7, #14]
 80077e6:	4619      	mov	r1, r3
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f7ff fe85 	bl	80074f8 <USBD_CoreFindEP>
 80077ee:	4603      	mov	r3, r0
 80077f0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80077f2:	7b7b      	ldrb	r3, [r7, #13]
 80077f4:	2bff      	cmp	r3, #255	@ 0xff
 80077f6:	f000 8174 	beq.w	8007ae2 <USBD_StdEPReq+0x32e>
 80077fa:	7b7b      	ldrb	r3, [r7, #13]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f040 8170 	bne.w	8007ae2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007802:	7b7a      	ldrb	r2, [r7, #13]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800780a:	7b7a      	ldrb	r2, [r7, #13]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	32ae      	adds	r2, #174	@ 0xae
 8007810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	2b00      	cmp	r3, #0
 8007818:	f000 8163 	beq.w	8007ae2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800781c:	7b7a      	ldrb	r2, [r7, #13]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	32ae      	adds	r2, #174	@ 0xae
 8007822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	6839      	ldr	r1, [r7, #0]
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	4798      	blx	r3
 800782e:	4603      	mov	r3, r0
 8007830:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007832:	e156      	b.n	8007ae2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	785b      	ldrb	r3, [r3, #1]
 8007838:	2b03      	cmp	r3, #3
 800783a:	d008      	beq.n	800784e <USBD_StdEPReq+0x9a>
 800783c:	2b03      	cmp	r3, #3
 800783e:	f300 8145 	bgt.w	8007acc <USBD_StdEPReq+0x318>
 8007842:	2b00      	cmp	r3, #0
 8007844:	f000 809b 	beq.w	800797e <USBD_StdEPReq+0x1ca>
 8007848:	2b01      	cmp	r3, #1
 800784a:	d03c      	beq.n	80078c6 <USBD_StdEPReq+0x112>
 800784c:	e13e      	b.n	8007acc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007854:	b2db      	uxtb	r3, r3
 8007856:	2b02      	cmp	r3, #2
 8007858:	d002      	beq.n	8007860 <USBD_StdEPReq+0xac>
 800785a:	2b03      	cmp	r3, #3
 800785c:	d016      	beq.n	800788c <USBD_StdEPReq+0xd8>
 800785e:	e02c      	b.n	80078ba <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007860:	7bbb      	ldrb	r3, [r7, #14]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d00d      	beq.n	8007882 <USBD_StdEPReq+0xce>
 8007866:	7bbb      	ldrb	r3, [r7, #14]
 8007868:	2b80      	cmp	r3, #128	@ 0x80
 800786a:	d00a      	beq.n	8007882 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800786c:	7bbb      	ldrb	r3, [r7, #14]
 800786e:	4619      	mov	r1, r3
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f001 f987 	bl	8008b84 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007876:	2180      	movs	r1, #128	@ 0x80
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f001 f983 	bl	8008b84 <USBD_LL_StallEP>
 800787e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007880:	e020      	b.n	80078c4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007882:	6839      	ldr	r1, [r7, #0]
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 fc7a 	bl	800817e <USBD_CtlError>
              break;
 800788a:	e01b      	b.n	80078c4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	885b      	ldrh	r3, [r3, #2]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d10e      	bne.n	80078b2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007894:	7bbb      	ldrb	r3, [r7, #14]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d00b      	beq.n	80078b2 <USBD_StdEPReq+0xfe>
 800789a:	7bbb      	ldrb	r3, [r7, #14]
 800789c:	2b80      	cmp	r3, #128	@ 0x80
 800789e:	d008      	beq.n	80078b2 <USBD_StdEPReq+0xfe>
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	88db      	ldrh	r3, [r3, #6]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d104      	bne.n	80078b2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80078a8:	7bbb      	ldrb	r3, [r7, #14]
 80078aa:	4619      	mov	r1, r3
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f001 f969 	bl	8008b84 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 fd3a 	bl	800832c <USBD_CtlSendStatus>

              break;
 80078b8:	e004      	b.n	80078c4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80078ba:	6839      	ldr	r1, [r7, #0]
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 fc5e 	bl	800817e <USBD_CtlError>
              break;
 80078c2:	bf00      	nop
          }
          break;
 80078c4:	e107      	b.n	8007ad6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	2b02      	cmp	r3, #2
 80078d0:	d002      	beq.n	80078d8 <USBD_StdEPReq+0x124>
 80078d2:	2b03      	cmp	r3, #3
 80078d4:	d016      	beq.n	8007904 <USBD_StdEPReq+0x150>
 80078d6:	e04b      	b.n	8007970 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078d8:	7bbb      	ldrb	r3, [r7, #14]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d00d      	beq.n	80078fa <USBD_StdEPReq+0x146>
 80078de:	7bbb      	ldrb	r3, [r7, #14]
 80078e0:	2b80      	cmp	r3, #128	@ 0x80
 80078e2:	d00a      	beq.n	80078fa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80078e4:	7bbb      	ldrb	r3, [r7, #14]
 80078e6:	4619      	mov	r1, r3
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f001 f94b 	bl	8008b84 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80078ee:	2180      	movs	r1, #128	@ 0x80
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f001 f947 	bl	8008b84 <USBD_LL_StallEP>
 80078f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80078f8:	e040      	b.n	800797c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80078fa:	6839      	ldr	r1, [r7, #0]
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 fc3e 	bl	800817e <USBD_CtlError>
              break;
 8007902:	e03b      	b.n	800797c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	885b      	ldrh	r3, [r3, #2]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d136      	bne.n	800797a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800790c:	7bbb      	ldrb	r3, [r7, #14]
 800790e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007912:	2b00      	cmp	r3, #0
 8007914:	d004      	beq.n	8007920 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007916:	7bbb      	ldrb	r3, [r7, #14]
 8007918:	4619      	mov	r1, r3
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f001 f951 	bl	8008bc2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 fd03 	bl	800832c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007926:	7bbb      	ldrb	r3, [r7, #14]
 8007928:	4619      	mov	r1, r3
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f7ff fde4 	bl	80074f8 <USBD_CoreFindEP>
 8007930:	4603      	mov	r3, r0
 8007932:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007934:	7b7b      	ldrb	r3, [r7, #13]
 8007936:	2bff      	cmp	r3, #255	@ 0xff
 8007938:	d01f      	beq.n	800797a <USBD_StdEPReq+0x1c6>
 800793a:	7b7b      	ldrb	r3, [r7, #13]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d11c      	bne.n	800797a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007940:	7b7a      	ldrb	r2, [r7, #13]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007948:	7b7a      	ldrb	r2, [r7, #13]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	32ae      	adds	r2, #174	@ 0xae
 800794e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d010      	beq.n	800797a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007958:	7b7a      	ldrb	r2, [r7, #13]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	32ae      	adds	r2, #174	@ 0xae
 800795e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	6839      	ldr	r1, [r7, #0]
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	4798      	blx	r3
 800796a:	4603      	mov	r3, r0
 800796c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800796e:	e004      	b.n	800797a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007970:	6839      	ldr	r1, [r7, #0]
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 fc03 	bl	800817e <USBD_CtlError>
              break;
 8007978:	e000      	b.n	800797c <USBD_StdEPReq+0x1c8>
              break;
 800797a:	bf00      	nop
          }
          break;
 800797c:	e0ab      	b.n	8007ad6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007984:	b2db      	uxtb	r3, r3
 8007986:	2b02      	cmp	r3, #2
 8007988:	d002      	beq.n	8007990 <USBD_StdEPReq+0x1dc>
 800798a:	2b03      	cmp	r3, #3
 800798c:	d032      	beq.n	80079f4 <USBD_StdEPReq+0x240>
 800798e:	e097      	b.n	8007ac0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007990:	7bbb      	ldrb	r3, [r7, #14]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d007      	beq.n	80079a6 <USBD_StdEPReq+0x1f2>
 8007996:	7bbb      	ldrb	r3, [r7, #14]
 8007998:	2b80      	cmp	r3, #128	@ 0x80
 800799a:	d004      	beq.n	80079a6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800799c:	6839      	ldr	r1, [r7, #0]
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 fbed 	bl	800817e <USBD_CtlError>
                break;
 80079a4:	e091      	b.n	8007aca <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	da0b      	bge.n	80079c6 <USBD_StdEPReq+0x212>
 80079ae:	7bbb      	ldrb	r3, [r7, #14]
 80079b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80079b4:	4613      	mov	r3, r2
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	4413      	add	r3, r2
 80079ba:	009b      	lsls	r3, r3, #2
 80079bc:	3310      	adds	r3, #16
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	4413      	add	r3, r2
 80079c2:	3304      	adds	r3, #4
 80079c4:	e00b      	b.n	80079de <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80079c6:	7bbb      	ldrb	r3, [r7, #14]
 80079c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079cc:	4613      	mov	r3, r2
 80079ce:	009b      	lsls	r3, r3, #2
 80079d0:	4413      	add	r3, r2
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	4413      	add	r3, r2
 80079dc:	3304      	adds	r3, #4
 80079de:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	2200      	movs	r2, #0
 80079e4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	2202      	movs	r2, #2
 80079ea:	4619      	mov	r1, r3
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 fc43 	bl	8008278 <USBD_CtlSendData>
              break;
 80079f2:	e06a      	b.n	8007aca <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80079f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	da11      	bge.n	8007a20 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80079fc:	7bbb      	ldrb	r3, [r7, #14]
 80079fe:	f003 020f 	and.w	r2, r3, #15
 8007a02:	6879      	ldr	r1, [r7, #4]
 8007a04:	4613      	mov	r3, r2
 8007a06:	009b      	lsls	r3, r3, #2
 8007a08:	4413      	add	r3, r2
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	440b      	add	r3, r1
 8007a0e:	3324      	adds	r3, #36	@ 0x24
 8007a10:	881b      	ldrh	r3, [r3, #0]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d117      	bne.n	8007a46 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007a16:	6839      	ldr	r1, [r7, #0]
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 fbb0 	bl	800817e <USBD_CtlError>
                  break;
 8007a1e:	e054      	b.n	8007aca <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007a20:	7bbb      	ldrb	r3, [r7, #14]
 8007a22:	f003 020f 	and.w	r2, r3, #15
 8007a26:	6879      	ldr	r1, [r7, #4]
 8007a28:	4613      	mov	r3, r2
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	4413      	add	r3, r2
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	440b      	add	r3, r1
 8007a32:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007a36:	881b      	ldrh	r3, [r3, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d104      	bne.n	8007a46 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007a3c:	6839      	ldr	r1, [r7, #0]
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 fb9d 	bl	800817e <USBD_CtlError>
                  break;
 8007a44:	e041      	b.n	8007aca <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	da0b      	bge.n	8007a66 <USBD_StdEPReq+0x2b2>
 8007a4e:	7bbb      	ldrb	r3, [r7, #14]
 8007a50:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007a54:	4613      	mov	r3, r2
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	4413      	add	r3, r2
 8007a5a:	009b      	lsls	r3, r3, #2
 8007a5c:	3310      	adds	r3, #16
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	4413      	add	r3, r2
 8007a62:	3304      	adds	r3, #4
 8007a64:	e00b      	b.n	8007a7e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a66:	7bbb      	ldrb	r3, [r7, #14]
 8007a68:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a6c:	4613      	mov	r3, r2
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	4413      	add	r3, r2
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007a78:	687a      	ldr	r2, [r7, #4]
 8007a7a:	4413      	add	r3, r2
 8007a7c:	3304      	adds	r3, #4
 8007a7e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007a80:	7bbb      	ldrb	r3, [r7, #14]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d002      	beq.n	8007a8c <USBD_StdEPReq+0x2d8>
 8007a86:	7bbb      	ldrb	r3, [r7, #14]
 8007a88:	2b80      	cmp	r3, #128	@ 0x80
 8007a8a:	d103      	bne.n	8007a94 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	601a      	str	r2, [r3, #0]
 8007a92:	e00e      	b.n	8007ab2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007a94:	7bbb      	ldrb	r3, [r7, #14]
 8007a96:	4619      	mov	r1, r3
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f001 f8b1 	bl	8008c00 <USBD_LL_IsStallEP>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d003      	beq.n	8007aac <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	601a      	str	r2, [r3, #0]
 8007aaa:	e002      	b.n	8007ab2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	2202      	movs	r2, #2
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 fbdd 	bl	8008278 <USBD_CtlSendData>
              break;
 8007abe:	e004      	b.n	8007aca <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007ac0:	6839      	ldr	r1, [r7, #0]
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 fb5b 	bl	800817e <USBD_CtlError>
              break;
 8007ac8:	bf00      	nop
          }
          break;
 8007aca:	e004      	b.n	8007ad6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007acc:	6839      	ldr	r1, [r7, #0]
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 fb55 	bl	800817e <USBD_CtlError>
          break;
 8007ad4:	bf00      	nop
      }
      break;
 8007ad6:	e005      	b.n	8007ae4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007ad8:	6839      	ldr	r1, [r7, #0]
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 fb4f 	bl	800817e <USBD_CtlError>
      break;
 8007ae0:	e000      	b.n	8007ae4 <USBD_StdEPReq+0x330>
      break;
 8007ae2:	bf00      	nop
  }

  return ret;
 8007ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3710      	adds	r7, #16
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
	...

08007af0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007afa:	2300      	movs	r3, #0
 8007afc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007afe:	2300      	movs	r3, #0
 8007b00:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007b02:	2300      	movs	r3, #0
 8007b04:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	885b      	ldrh	r3, [r3, #2]
 8007b0a:	0a1b      	lsrs	r3, r3, #8
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	3b01      	subs	r3, #1
 8007b10:	2b06      	cmp	r3, #6
 8007b12:	f200 8128 	bhi.w	8007d66 <USBD_GetDescriptor+0x276>
 8007b16:	a201      	add	r2, pc, #4	@ (adr r2, 8007b1c <USBD_GetDescriptor+0x2c>)
 8007b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b1c:	08007b39 	.word	0x08007b39
 8007b20:	08007b51 	.word	0x08007b51
 8007b24:	08007b91 	.word	0x08007b91
 8007b28:	08007d67 	.word	0x08007d67
 8007b2c:	08007d67 	.word	0x08007d67
 8007b30:	08007d07 	.word	0x08007d07
 8007b34:	08007d33 	.word	0x08007d33
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	7c12      	ldrb	r2, [r2, #16]
 8007b44:	f107 0108 	add.w	r1, r7, #8
 8007b48:	4610      	mov	r0, r2
 8007b4a:	4798      	blx	r3
 8007b4c:	60f8      	str	r0, [r7, #12]
      break;
 8007b4e:	e112      	b.n	8007d76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	7c1b      	ldrb	r3, [r3, #16]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d10d      	bne.n	8007b74 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b60:	f107 0208 	add.w	r2, r7, #8
 8007b64:	4610      	mov	r0, r2
 8007b66:	4798      	blx	r3
 8007b68:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	3301      	adds	r3, #1
 8007b6e:	2202      	movs	r2, #2
 8007b70:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007b72:	e100      	b.n	8007d76 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b7c:	f107 0208 	add.w	r2, r7, #8
 8007b80:	4610      	mov	r0, r2
 8007b82:	4798      	blx	r3
 8007b84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	3301      	adds	r3, #1
 8007b8a:	2202      	movs	r2, #2
 8007b8c:	701a      	strb	r2, [r3, #0]
      break;
 8007b8e:	e0f2      	b.n	8007d76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	885b      	ldrh	r3, [r3, #2]
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	2b05      	cmp	r3, #5
 8007b98:	f200 80ac 	bhi.w	8007cf4 <USBD_GetDescriptor+0x204>
 8007b9c:	a201      	add	r2, pc, #4	@ (adr r2, 8007ba4 <USBD_GetDescriptor+0xb4>)
 8007b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba2:	bf00      	nop
 8007ba4:	08007bbd 	.word	0x08007bbd
 8007ba8:	08007bf1 	.word	0x08007bf1
 8007bac:	08007c25 	.word	0x08007c25
 8007bb0:	08007c59 	.word	0x08007c59
 8007bb4:	08007c8d 	.word	0x08007c8d
 8007bb8:	08007cc1 	.word	0x08007cc1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d00b      	beq.n	8007be0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	7c12      	ldrb	r2, [r2, #16]
 8007bd4:	f107 0108 	add.w	r1, r7, #8
 8007bd8:	4610      	mov	r0, r2
 8007bda:	4798      	blx	r3
 8007bdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bde:	e091      	b.n	8007d04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007be0:	6839      	ldr	r1, [r7, #0]
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 facb 	bl	800817e <USBD_CtlError>
            err++;
 8007be8:	7afb      	ldrb	r3, [r7, #11]
 8007bea:	3301      	adds	r3, #1
 8007bec:	72fb      	strb	r3, [r7, #11]
          break;
 8007bee:	e089      	b.n	8007d04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d00b      	beq.n	8007c14 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	7c12      	ldrb	r2, [r2, #16]
 8007c08:	f107 0108 	add.w	r1, r7, #8
 8007c0c:	4610      	mov	r0, r2
 8007c0e:	4798      	blx	r3
 8007c10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c12:	e077      	b.n	8007d04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c14:	6839      	ldr	r1, [r7, #0]
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 fab1 	bl	800817e <USBD_CtlError>
            err++;
 8007c1c:	7afb      	ldrb	r3, [r7, #11]
 8007c1e:	3301      	adds	r3, #1
 8007c20:	72fb      	strb	r3, [r7, #11]
          break;
 8007c22:	e06f      	b.n	8007d04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d00b      	beq.n	8007c48 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c36:	68db      	ldr	r3, [r3, #12]
 8007c38:	687a      	ldr	r2, [r7, #4]
 8007c3a:	7c12      	ldrb	r2, [r2, #16]
 8007c3c:	f107 0108 	add.w	r1, r7, #8
 8007c40:	4610      	mov	r0, r2
 8007c42:	4798      	blx	r3
 8007c44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c46:	e05d      	b.n	8007d04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c48:	6839      	ldr	r1, [r7, #0]
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 fa97 	bl	800817e <USBD_CtlError>
            err++;
 8007c50:	7afb      	ldrb	r3, [r7, #11]
 8007c52:	3301      	adds	r3, #1
 8007c54:	72fb      	strb	r3, [r7, #11]
          break;
 8007c56:	e055      	b.n	8007d04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c5e:	691b      	ldr	r3, [r3, #16]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d00b      	beq.n	8007c7c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c6a:	691b      	ldr	r3, [r3, #16]
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	7c12      	ldrb	r2, [r2, #16]
 8007c70:	f107 0108 	add.w	r1, r7, #8
 8007c74:	4610      	mov	r0, r2
 8007c76:	4798      	blx	r3
 8007c78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c7a:	e043      	b.n	8007d04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c7c:	6839      	ldr	r1, [r7, #0]
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 fa7d 	bl	800817e <USBD_CtlError>
            err++;
 8007c84:	7afb      	ldrb	r3, [r7, #11]
 8007c86:	3301      	adds	r3, #1
 8007c88:	72fb      	strb	r3, [r7, #11]
          break;
 8007c8a:	e03b      	b.n	8007d04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c92:	695b      	ldr	r3, [r3, #20]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d00b      	beq.n	8007cb0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c9e:	695b      	ldr	r3, [r3, #20]
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	7c12      	ldrb	r2, [r2, #16]
 8007ca4:	f107 0108 	add.w	r1, r7, #8
 8007ca8:	4610      	mov	r0, r2
 8007caa:	4798      	blx	r3
 8007cac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cae:	e029      	b.n	8007d04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007cb0:	6839      	ldr	r1, [r7, #0]
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 fa63 	bl	800817e <USBD_CtlError>
            err++;
 8007cb8:	7afb      	ldrb	r3, [r7, #11]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	72fb      	strb	r3, [r7, #11]
          break;
 8007cbe:	e021      	b.n	8007d04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cc6:	699b      	ldr	r3, [r3, #24]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d00b      	beq.n	8007ce4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cd2:	699b      	ldr	r3, [r3, #24]
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	7c12      	ldrb	r2, [r2, #16]
 8007cd8:	f107 0108 	add.w	r1, r7, #8
 8007cdc:	4610      	mov	r0, r2
 8007cde:	4798      	blx	r3
 8007ce0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ce2:	e00f      	b.n	8007d04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ce4:	6839      	ldr	r1, [r7, #0]
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 fa49 	bl	800817e <USBD_CtlError>
            err++;
 8007cec:	7afb      	ldrb	r3, [r7, #11]
 8007cee:	3301      	adds	r3, #1
 8007cf0:	72fb      	strb	r3, [r7, #11]
          break;
 8007cf2:	e007      	b.n	8007d04 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007cf4:	6839      	ldr	r1, [r7, #0]
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 fa41 	bl	800817e <USBD_CtlError>
          err++;
 8007cfc:	7afb      	ldrb	r3, [r7, #11]
 8007cfe:	3301      	adds	r3, #1
 8007d00:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007d02:	bf00      	nop
      }
      break;
 8007d04:	e037      	b.n	8007d76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	7c1b      	ldrb	r3, [r3, #16]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d109      	bne.n	8007d22 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d16:	f107 0208 	add.w	r2, r7, #8
 8007d1a:	4610      	mov	r0, r2
 8007d1c:	4798      	blx	r3
 8007d1e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d20:	e029      	b.n	8007d76 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d22:	6839      	ldr	r1, [r7, #0]
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 fa2a 	bl	800817e <USBD_CtlError>
        err++;
 8007d2a:	7afb      	ldrb	r3, [r7, #11]
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	72fb      	strb	r3, [r7, #11]
      break;
 8007d30:	e021      	b.n	8007d76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	7c1b      	ldrb	r3, [r3, #16]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d10d      	bne.n	8007d56 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d42:	f107 0208 	add.w	r2, r7, #8
 8007d46:	4610      	mov	r0, r2
 8007d48:	4798      	blx	r3
 8007d4a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	3301      	adds	r3, #1
 8007d50:	2207      	movs	r2, #7
 8007d52:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d54:	e00f      	b.n	8007d76 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d56:	6839      	ldr	r1, [r7, #0]
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 fa10 	bl	800817e <USBD_CtlError>
        err++;
 8007d5e:	7afb      	ldrb	r3, [r7, #11]
 8007d60:	3301      	adds	r3, #1
 8007d62:	72fb      	strb	r3, [r7, #11]
      break;
 8007d64:	e007      	b.n	8007d76 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007d66:	6839      	ldr	r1, [r7, #0]
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 fa08 	bl	800817e <USBD_CtlError>
      err++;
 8007d6e:	7afb      	ldrb	r3, [r7, #11]
 8007d70:	3301      	adds	r3, #1
 8007d72:	72fb      	strb	r3, [r7, #11]
      break;
 8007d74:	bf00      	nop
  }

  if (err != 0U)
 8007d76:	7afb      	ldrb	r3, [r7, #11]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d11e      	bne.n	8007dba <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	88db      	ldrh	r3, [r3, #6]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d016      	beq.n	8007db2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007d84:	893b      	ldrh	r3, [r7, #8]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d00e      	beq.n	8007da8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	88da      	ldrh	r2, [r3, #6]
 8007d8e:	893b      	ldrh	r3, [r7, #8]
 8007d90:	4293      	cmp	r3, r2
 8007d92:	bf28      	it	cs
 8007d94:	4613      	movcs	r3, r2
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007d9a:	893b      	ldrh	r3, [r7, #8]
 8007d9c:	461a      	mov	r2, r3
 8007d9e:	68f9      	ldr	r1, [r7, #12]
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 fa69 	bl	8008278 <USBD_CtlSendData>
 8007da6:	e009      	b.n	8007dbc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007da8:	6839      	ldr	r1, [r7, #0]
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 f9e7 	bl	800817e <USBD_CtlError>
 8007db0:	e004      	b.n	8007dbc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 faba 	bl	800832c <USBD_CtlSendStatus>
 8007db8:	e000      	b.n	8007dbc <USBD_GetDescriptor+0x2cc>
    return;
 8007dba:	bf00      	nop
  }
}
 8007dbc:	3710      	adds	r7, #16
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop

08007dc4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b084      	sub	sp, #16
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	889b      	ldrh	r3, [r3, #4]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d131      	bne.n	8007e3a <USBD_SetAddress+0x76>
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	88db      	ldrh	r3, [r3, #6]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d12d      	bne.n	8007e3a <USBD_SetAddress+0x76>
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	885b      	ldrh	r3, [r3, #2]
 8007de2:	2b7f      	cmp	r3, #127	@ 0x7f
 8007de4:	d829      	bhi.n	8007e3a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	885b      	ldrh	r3, [r3, #2]
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007df0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	2b03      	cmp	r3, #3
 8007dfc:	d104      	bne.n	8007e08 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007dfe:	6839      	ldr	r1, [r7, #0]
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f000 f9bc 	bl	800817e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e06:	e01d      	b.n	8007e44 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	7bfa      	ldrb	r2, [r7, #15]
 8007e0c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007e10:	7bfb      	ldrb	r3, [r7, #15]
 8007e12:	4619      	mov	r1, r3
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 ff1f 	bl	8008c58 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f000 fa86 	bl	800832c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007e20:	7bfb      	ldrb	r3, [r7, #15]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d004      	beq.n	8007e30 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2202      	movs	r2, #2
 8007e2a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e2e:	e009      	b.n	8007e44 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2201      	movs	r2, #1
 8007e34:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e38:	e004      	b.n	8007e44 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007e3a:	6839      	ldr	r1, [r7, #0]
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 f99e 	bl	800817e <USBD_CtlError>
  }
}
 8007e42:	bf00      	nop
 8007e44:	bf00      	nop
 8007e46:	3710      	adds	r7, #16
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e56:	2300      	movs	r3, #0
 8007e58:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	885b      	ldrh	r3, [r3, #2]
 8007e5e:	b2da      	uxtb	r2, r3
 8007e60:	4b4e      	ldr	r3, [pc, #312]	@ (8007f9c <USBD_SetConfig+0x150>)
 8007e62:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007e64:	4b4d      	ldr	r3, [pc, #308]	@ (8007f9c <USBD_SetConfig+0x150>)
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d905      	bls.n	8007e78 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007e6c:	6839      	ldr	r1, [r7, #0]
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 f985 	bl	800817e <USBD_CtlError>
    return USBD_FAIL;
 8007e74:	2303      	movs	r3, #3
 8007e76:	e08c      	b.n	8007f92 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	2b02      	cmp	r3, #2
 8007e82:	d002      	beq.n	8007e8a <USBD_SetConfig+0x3e>
 8007e84:	2b03      	cmp	r3, #3
 8007e86:	d029      	beq.n	8007edc <USBD_SetConfig+0x90>
 8007e88:	e075      	b.n	8007f76 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007e8a:	4b44      	ldr	r3, [pc, #272]	@ (8007f9c <USBD_SetConfig+0x150>)
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d020      	beq.n	8007ed4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007e92:	4b42      	ldr	r3, [pc, #264]	@ (8007f9c <USBD_SetConfig+0x150>)
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	461a      	mov	r2, r3
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007e9c:	4b3f      	ldr	r3, [pc, #252]	@ (8007f9c <USBD_SetConfig+0x150>)
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f7fe ffe3 	bl	8006e6e <USBD_SetClassConfig>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007eac:	7bfb      	ldrb	r3, [r7, #15]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d008      	beq.n	8007ec4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007eb2:	6839      	ldr	r1, [r7, #0]
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 f962 	bl	800817e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2202      	movs	r2, #2
 8007ebe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007ec2:	e065      	b.n	8007f90 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 fa31 	bl	800832c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2203      	movs	r2, #3
 8007ece:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007ed2:	e05d      	b.n	8007f90 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 fa29 	bl	800832c <USBD_CtlSendStatus>
      break;
 8007eda:	e059      	b.n	8007f90 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007edc:	4b2f      	ldr	r3, [pc, #188]	@ (8007f9c <USBD_SetConfig+0x150>)
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d112      	bne.n	8007f0a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2202      	movs	r2, #2
 8007ee8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007eec:	4b2b      	ldr	r3, [pc, #172]	@ (8007f9c <USBD_SetConfig+0x150>)
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007ef6:	4b29      	ldr	r3, [pc, #164]	@ (8007f9c <USBD_SetConfig+0x150>)
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	4619      	mov	r1, r3
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f7fe ffd2 	bl	8006ea6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 fa12 	bl	800832c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007f08:	e042      	b.n	8007f90 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007f0a:	4b24      	ldr	r3, [pc, #144]	@ (8007f9c <USBD_SetConfig+0x150>)
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	461a      	mov	r2, r3
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d02a      	beq.n	8007f6e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	4619      	mov	r1, r3
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f7fe ffc0 	bl	8006ea6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007f26:	4b1d      	ldr	r3, [pc, #116]	@ (8007f9c <USBD_SetConfig+0x150>)
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f30:	4b1a      	ldr	r3, [pc, #104]	@ (8007f9c <USBD_SetConfig+0x150>)
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	4619      	mov	r1, r3
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f7fe ff99 	bl	8006e6e <USBD_SetClassConfig>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007f40:	7bfb      	ldrb	r3, [r7, #15]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d00f      	beq.n	8007f66 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007f46:	6839      	ldr	r1, [r7, #0]
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 f918 	bl	800817e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	4619      	mov	r1, r3
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f7fe ffa5 	bl	8006ea6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2202      	movs	r2, #2
 8007f60:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007f64:	e014      	b.n	8007f90 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 f9e0 	bl	800832c <USBD_CtlSendStatus>
      break;
 8007f6c:	e010      	b.n	8007f90 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 f9dc 	bl	800832c <USBD_CtlSendStatus>
      break;
 8007f74:	e00c      	b.n	8007f90 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007f76:	6839      	ldr	r1, [r7, #0]
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 f900 	bl	800817e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007f7e:	4b07      	ldr	r3, [pc, #28]	@ (8007f9c <USBD_SetConfig+0x150>)
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	4619      	mov	r1, r3
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f7fe ff8e 	bl	8006ea6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007f8a:	2303      	movs	r3, #3
 8007f8c:	73fb      	strb	r3, [r7, #15]
      break;
 8007f8e:	bf00      	nop
  }

  return ret;
 8007f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3710      	adds	r7, #16
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	200002ec 	.word	0x200002ec

08007fa0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b082      	sub	sp, #8
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	88db      	ldrh	r3, [r3, #6]
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d004      	beq.n	8007fbc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007fb2:	6839      	ldr	r1, [r7, #0]
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 f8e2 	bl	800817e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007fba:	e023      	b.n	8008004 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fc2:	b2db      	uxtb	r3, r3
 8007fc4:	2b02      	cmp	r3, #2
 8007fc6:	dc02      	bgt.n	8007fce <USBD_GetConfig+0x2e>
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	dc03      	bgt.n	8007fd4 <USBD_GetConfig+0x34>
 8007fcc:	e015      	b.n	8007ffa <USBD_GetConfig+0x5a>
 8007fce:	2b03      	cmp	r3, #3
 8007fd0:	d00b      	beq.n	8007fea <USBD_GetConfig+0x4a>
 8007fd2:	e012      	b.n	8007ffa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	3308      	adds	r3, #8
 8007fde:	2201      	movs	r2, #1
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 f948 	bl	8008278 <USBD_CtlSendData>
        break;
 8007fe8:	e00c      	b.n	8008004 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	3304      	adds	r3, #4
 8007fee:	2201      	movs	r2, #1
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 f940 	bl	8008278 <USBD_CtlSendData>
        break;
 8007ff8:	e004      	b.n	8008004 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007ffa:	6839      	ldr	r1, [r7, #0]
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 f8be 	bl	800817e <USBD_CtlError>
        break;
 8008002:	bf00      	nop
}
 8008004:	bf00      	nop
 8008006:	3708      	adds	r7, #8
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b082      	sub	sp, #8
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800801c:	b2db      	uxtb	r3, r3
 800801e:	3b01      	subs	r3, #1
 8008020:	2b02      	cmp	r3, #2
 8008022:	d81e      	bhi.n	8008062 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	88db      	ldrh	r3, [r3, #6]
 8008028:	2b02      	cmp	r3, #2
 800802a:	d004      	beq.n	8008036 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800802c:	6839      	ldr	r1, [r7, #0]
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 f8a5 	bl	800817e <USBD_CtlError>
        break;
 8008034:	e01a      	b.n	800806c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2201      	movs	r2, #1
 800803a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008042:	2b00      	cmp	r3, #0
 8008044:	d005      	beq.n	8008052 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	68db      	ldr	r3, [r3, #12]
 800804a:	f043 0202 	orr.w	r2, r3, #2
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	330c      	adds	r3, #12
 8008056:	2202      	movs	r2, #2
 8008058:	4619      	mov	r1, r3
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 f90c 	bl	8008278 <USBD_CtlSendData>
      break;
 8008060:	e004      	b.n	800806c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008062:	6839      	ldr	r1, [r7, #0]
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 f88a 	bl	800817e <USBD_CtlError>
      break;
 800806a:	bf00      	nop
  }
}
 800806c:	bf00      	nop
 800806e:	3708      	adds	r7, #8
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b082      	sub	sp, #8
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	885b      	ldrh	r3, [r3, #2]
 8008082:	2b01      	cmp	r3, #1
 8008084:	d107      	bne.n	8008096 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2201      	movs	r2, #1
 800808a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 f94c 	bl	800832c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008094:	e013      	b.n	80080be <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	885b      	ldrh	r3, [r3, #2]
 800809a:	2b02      	cmp	r3, #2
 800809c:	d10b      	bne.n	80080b6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	889b      	ldrh	r3, [r3, #4]
 80080a2:	0a1b      	lsrs	r3, r3, #8
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	b2da      	uxtb	r2, r3
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 f93c 	bl	800832c <USBD_CtlSendStatus>
}
 80080b4:	e003      	b.n	80080be <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80080b6:	6839      	ldr	r1, [r7, #0]
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 f860 	bl	800817e <USBD_CtlError>
}
 80080be:	bf00      	nop
 80080c0:	3708      	adds	r7, #8
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}

080080c6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080c6:	b580      	push	{r7, lr}
 80080c8:	b082      	sub	sp, #8
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
 80080ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	3b01      	subs	r3, #1
 80080da:	2b02      	cmp	r3, #2
 80080dc:	d80b      	bhi.n	80080f6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	885b      	ldrh	r3, [r3, #2]
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d10c      	bne.n	8008100 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 f91c 	bl	800832c <USBD_CtlSendStatus>
      }
      break;
 80080f4:	e004      	b.n	8008100 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80080f6:	6839      	ldr	r1, [r7, #0]
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 f840 	bl	800817e <USBD_CtlError>
      break;
 80080fe:	e000      	b.n	8008102 <USBD_ClrFeature+0x3c>
      break;
 8008100:	bf00      	nop
  }
}
 8008102:	bf00      	nop
 8008104:	3708      	adds	r7, #8
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}

0800810a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800810a:	b580      	push	{r7, lr}
 800810c:	b084      	sub	sp, #16
 800810e:	af00      	add	r7, sp, #0
 8008110:	6078      	str	r0, [r7, #4]
 8008112:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	781a      	ldrb	r2, [r3, #0]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	3301      	adds	r3, #1
 8008124:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	781a      	ldrb	r2, [r3, #0]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	3301      	adds	r3, #1
 8008132:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008134:	68f8      	ldr	r0, [r7, #12]
 8008136:	f7ff fa40 	bl	80075ba <SWAPBYTE>
 800813a:	4603      	mov	r3, r0
 800813c:	461a      	mov	r2, r3
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	3301      	adds	r3, #1
 8008146:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	3301      	adds	r3, #1
 800814c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800814e:	68f8      	ldr	r0, [r7, #12]
 8008150:	f7ff fa33 	bl	80075ba <SWAPBYTE>
 8008154:	4603      	mov	r3, r0
 8008156:	461a      	mov	r2, r3
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	3301      	adds	r3, #1
 8008160:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	3301      	adds	r3, #1
 8008166:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008168:	68f8      	ldr	r0, [r7, #12]
 800816a:	f7ff fa26 	bl	80075ba <SWAPBYTE>
 800816e:	4603      	mov	r3, r0
 8008170:	461a      	mov	r2, r3
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	80da      	strh	r2, [r3, #6]
}
 8008176:	bf00      	nop
 8008178:	3710      	adds	r7, #16
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}

0800817e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800817e:	b580      	push	{r7, lr}
 8008180:	b082      	sub	sp, #8
 8008182:	af00      	add	r7, sp, #0
 8008184:	6078      	str	r0, [r7, #4]
 8008186:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008188:	2180      	movs	r1, #128	@ 0x80
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 fcfa 	bl	8008b84 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008190:	2100      	movs	r1, #0
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 fcf6 	bl	8008b84 <USBD_LL_StallEP>
}
 8008198:	bf00      	nop
 800819a:	3708      	adds	r7, #8
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}

080081a0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b086      	sub	sp, #24
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	60b9      	str	r1, [r7, #8]
 80081aa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80081ac:	2300      	movs	r3, #0
 80081ae:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d042      	beq.n	800823c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80081ba:	6938      	ldr	r0, [r7, #16]
 80081bc:	f000 f842 	bl	8008244 <USBD_GetLen>
 80081c0:	4603      	mov	r3, r0
 80081c2:	3301      	adds	r3, #1
 80081c4:	005b      	lsls	r3, r3, #1
 80081c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081ca:	d808      	bhi.n	80081de <USBD_GetString+0x3e>
 80081cc:	6938      	ldr	r0, [r7, #16]
 80081ce:	f000 f839 	bl	8008244 <USBD_GetLen>
 80081d2:	4603      	mov	r3, r0
 80081d4:	3301      	adds	r3, #1
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	005b      	lsls	r3, r3, #1
 80081da:	b29a      	uxth	r2, r3
 80081dc:	e001      	b.n	80081e2 <USBD_GetString+0x42>
 80081de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80081e6:	7dfb      	ldrb	r3, [r7, #23]
 80081e8:	68ba      	ldr	r2, [r7, #8]
 80081ea:	4413      	add	r3, r2
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	7812      	ldrb	r2, [r2, #0]
 80081f0:	701a      	strb	r2, [r3, #0]
  idx++;
 80081f2:	7dfb      	ldrb	r3, [r7, #23]
 80081f4:	3301      	adds	r3, #1
 80081f6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80081f8:	7dfb      	ldrb	r3, [r7, #23]
 80081fa:	68ba      	ldr	r2, [r7, #8]
 80081fc:	4413      	add	r3, r2
 80081fe:	2203      	movs	r2, #3
 8008200:	701a      	strb	r2, [r3, #0]
  idx++;
 8008202:	7dfb      	ldrb	r3, [r7, #23]
 8008204:	3301      	adds	r3, #1
 8008206:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008208:	e013      	b.n	8008232 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800820a:	7dfb      	ldrb	r3, [r7, #23]
 800820c:	68ba      	ldr	r2, [r7, #8]
 800820e:	4413      	add	r3, r2
 8008210:	693a      	ldr	r2, [r7, #16]
 8008212:	7812      	ldrb	r2, [r2, #0]
 8008214:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	3301      	adds	r3, #1
 800821a:	613b      	str	r3, [r7, #16]
    idx++;
 800821c:	7dfb      	ldrb	r3, [r7, #23]
 800821e:	3301      	adds	r3, #1
 8008220:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008222:	7dfb      	ldrb	r3, [r7, #23]
 8008224:	68ba      	ldr	r2, [r7, #8]
 8008226:	4413      	add	r3, r2
 8008228:	2200      	movs	r2, #0
 800822a:	701a      	strb	r2, [r3, #0]
    idx++;
 800822c:	7dfb      	ldrb	r3, [r7, #23]
 800822e:	3301      	adds	r3, #1
 8008230:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d1e7      	bne.n	800820a <USBD_GetString+0x6a>
 800823a:	e000      	b.n	800823e <USBD_GetString+0x9e>
    return;
 800823c:	bf00      	nop
  }
}
 800823e:	3718      	adds	r7, #24
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008244:	b480      	push	{r7}
 8008246:	b085      	sub	sp, #20
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800824c:	2300      	movs	r3, #0
 800824e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008254:	e005      	b.n	8008262 <USBD_GetLen+0x1e>
  {
    len++;
 8008256:	7bfb      	ldrb	r3, [r7, #15]
 8008258:	3301      	adds	r3, #1
 800825a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	3301      	adds	r3, #1
 8008260:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d1f5      	bne.n	8008256 <USBD_GetLen+0x12>
  }

  return len;
 800826a:	7bfb      	ldrb	r3, [r7, #15]
}
 800826c:	4618      	mov	r0, r3
 800826e:	3714      	adds	r7, #20
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr

08008278 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	60b9      	str	r1, [r7, #8]
 8008282:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2202      	movs	r2, #2
 8008288:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	68ba      	ldr	r2, [r7, #8]
 800829c:	2100      	movs	r1, #0
 800829e:	68f8      	ldr	r0, [r7, #12]
 80082a0:	f000 fcf9 	bl	8008c96 <USBD_LL_Transmit>

  return USBD_OK;
 80082a4:	2300      	movs	r3, #0
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3710      	adds	r7, #16
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}

080082ae <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80082ae:	b580      	push	{r7, lr}
 80082b0:	b084      	sub	sp, #16
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	60f8      	str	r0, [r7, #12]
 80082b6:	60b9      	str	r1, [r7, #8]
 80082b8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	68ba      	ldr	r2, [r7, #8]
 80082be:	2100      	movs	r1, #0
 80082c0:	68f8      	ldr	r0, [r7, #12]
 80082c2:	f000 fce8 	bl	8008c96 <USBD_LL_Transmit>

  return USBD_OK;
 80082c6:	2300      	movs	r3, #0
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3710      	adds	r7, #16
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	60b9      	str	r1, [r7, #8]
 80082da:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2203      	movs	r2, #3
 80082e0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	687a      	ldr	r2, [r7, #4]
 80082e8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	68ba      	ldr	r2, [r7, #8]
 80082f8:	2100      	movs	r1, #0
 80082fa:	68f8      	ldr	r0, [r7, #12]
 80082fc:	f000 fcec 	bl	8008cd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008300:	2300      	movs	r3, #0
}
 8008302:	4618      	mov	r0, r3
 8008304:	3710      	adds	r7, #16
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}

0800830a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800830a:	b580      	push	{r7, lr}
 800830c:	b084      	sub	sp, #16
 800830e:	af00      	add	r7, sp, #0
 8008310:	60f8      	str	r0, [r7, #12]
 8008312:	60b9      	str	r1, [r7, #8]
 8008314:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	68ba      	ldr	r2, [r7, #8]
 800831a:	2100      	movs	r1, #0
 800831c:	68f8      	ldr	r0, [r7, #12]
 800831e:	f000 fcdb 	bl	8008cd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008322:	2300      	movs	r3, #0
}
 8008324:	4618      	mov	r0, r3
 8008326:	3710      	adds	r7, #16
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b082      	sub	sp, #8
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2204      	movs	r2, #4
 8008338:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800833c:	2300      	movs	r3, #0
 800833e:	2200      	movs	r2, #0
 8008340:	2100      	movs	r1, #0
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 fca7 	bl	8008c96 <USBD_LL_Transmit>

  return USBD_OK;
 8008348:	2300      	movs	r3, #0
}
 800834a:	4618      	mov	r0, r3
 800834c:	3708      	adds	r7, #8
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}

08008352 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008352:	b580      	push	{r7, lr}
 8008354:	b082      	sub	sp, #8
 8008356:	af00      	add	r7, sp, #0
 8008358:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2205      	movs	r2, #5
 800835e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008362:	2300      	movs	r3, #0
 8008364:	2200      	movs	r2, #0
 8008366:	2100      	movs	r1, #0
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 fcb5 	bl	8008cd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800836e:	2300      	movs	r3, #0
}
 8008370:	4618      	mov	r0, r3
 8008372:	3708      	adds	r7, #8
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800837c:	2200      	movs	r2, #0
 800837e:	4912      	ldr	r1, [pc, #72]	@ (80083c8 <MX_USB_DEVICE_Init+0x50>)
 8008380:	4812      	ldr	r0, [pc, #72]	@ (80083cc <MX_USB_DEVICE_Init+0x54>)
 8008382:	f7fe fcf7 	bl	8006d74 <USBD_Init>
 8008386:	4603      	mov	r3, r0
 8008388:	2b00      	cmp	r3, #0
 800838a:	d001      	beq.n	8008390 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800838c:	f7f9 fa38 	bl	8001800 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008390:	490f      	ldr	r1, [pc, #60]	@ (80083d0 <MX_USB_DEVICE_Init+0x58>)
 8008392:	480e      	ldr	r0, [pc, #56]	@ (80083cc <MX_USB_DEVICE_Init+0x54>)
 8008394:	f7fe fd1e 	bl	8006dd4 <USBD_RegisterClass>
 8008398:	4603      	mov	r3, r0
 800839a:	2b00      	cmp	r3, #0
 800839c:	d001      	beq.n	80083a2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800839e:	f7f9 fa2f 	bl	8001800 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80083a2:	490c      	ldr	r1, [pc, #48]	@ (80083d4 <MX_USB_DEVICE_Init+0x5c>)
 80083a4:	4809      	ldr	r0, [pc, #36]	@ (80083cc <MX_USB_DEVICE_Init+0x54>)
 80083a6:	f7fe fc15 	bl	8006bd4 <USBD_CDC_RegisterInterface>
 80083aa:	4603      	mov	r3, r0
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d001      	beq.n	80083b4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80083b0:	f7f9 fa26 	bl	8001800 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80083b4:	4805      	ldr	r0, [pc, #20]	@ (80083cc <MX_USB_DEVICE_Init+0x54>)
 80083b6:	f7fe fd43 	bl	8006e40 <USBD_Start>
 80083ba:	4603      	mov	r3, r0
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d001      	beq.n	80083c4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80083c0:	f7f9 fa1e 	bl	8001800 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80083c4:	bf00      	nop
 80083c6:	bd80      	pop	{r7, pc}
 80083c8:	200000ac 	.word	0x200000ac
 80083cc:	200002f0 	.word	0x200002f0
 80083d0:	20000018 	.word	0x20000018
 80083d4:	20000098 	.word	0x20000098

080083d8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80083dc:	2200      	movs	r2, #0
 80083de:	4905      	ldr	r1, [pc, #20]	@ (80083f4 <CDC_Init_FS+0x1c>)
 80083e0:	4805      	ldr	r0, [pc, #20]	@ (80083f8 <CDC_Init_FS+0x20>)
 80083e2:	f7fe fc11 	bl	8006c08 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80083e6:	4905      	ldr	r1, [pc, #20]	@ (80083fc <CDC_Init_FS+0x24>)
 80083e8:	4803      	ldr	r0, [pc, #12]	@ (80083f8 <CDC_Init_FS+0x20>)
 80083ea:	f7fe fc2f 	bl	8006c4c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80083ee:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	bd80      	pop	{r7, pc}
 80083f4:	20000dcc 	.word	0x20000dcc
 80083f8:	200002f0 	.word	0x200002f0
 80083fc:	200005cc 	.word	0x200005cc

08008400 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008400:	b480      	push	{r7}
 8008402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008404:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008406:	4618      	mov	r0, r3
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr

08008410 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008410:	b480      	push	{r7}
 8008412:	b083      	sub	sp, #12
 8008414:	af00      	add	r7, sp, #0
 8008416:	4603      	mov	r3, r0
 8008418:	6039      	str	r1, [r7, #0]
 800841a:	71fb      	strb	r3, [r7, #7]
 800841c:	4613      	mov	r3, r2
 800841e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008420:	79fb      	ldrb	r3, [r7, #7]
 8008422:	2b23      	cmp	r3, #35	@ 0x23
 8008424:	d84a      	bhi.n	80084bc <CDC_Control_FS+0xac>
 8008426:	a201      	add	r2, pc, #4	@ (adr r2, 800842c <CDC_Control_FS+0x1c>)
 8008428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800842c:	080084bd 	.word	0x080084bd
 8008430:	080084bd 	.word	0x080084bd
 8008434:	080084bd 	.word	0x080084bd
 8008438:	080084bd 	.word	0x080084bd
 800843c:	080084bd 	.word	0x080084bd
 8008440:	080084bd 	.word	0x080084bd
 8008444:	080084bd 	.word	0x080084bd
 8008448:	080084bd 	.word	0x080084bd
 800844c:	080084bd 	.word	0x080084bd
 8008450:	080084bd 	.word	0x080084bd
 8008454:	080084bd 	.word	0x080084bd
 8008458:	080084bd 	.word	0x080084bd
 800845c:	080084bd 	.word	0x080084bd
 8008460:	080084bd 	.word	0x080084bd
 8008464:	080084bd 	.word	0x080084bd
 8008468:	080084bd 	.word	0x080084bd
 800846c:	080084bd 	.word	0x080084bd
 8008470:	080084bd 	.word	0x080084bd
 8008474:	080084bd 	.word	0x080084bd
 8008478:	080084bd 	.word	0x080084bd
 800847c:	080084bd 	.word	0x080084bd
 8008480:	080084bd 	.word	0x080084bd
 8008484:	080084bd 	.word	0x080084bd
 8008488:	080084bd 	.word	0x080084bd
 800848c:	080084bd 	.word	0x080084bd
 8008490:	080084bd 	.word	0x080084bd
 8008494:	080084bd 	.word	0x080084bd
 8008498:	080084bd 	.word	0x080084bd
 800849c:	080084bd 	.word	0x080084bd
 80084a0:	080084bd 	.word	0x080084bd
 80084a4:	080084bd 	.word	0x080084bd
 80084a8:	080084bd 	.word	0x080084bd
 80084ac:	080084bd 	.word	0x080084bd
 80084b0:	080084bd 	.word	0x080084bd
 80084b4:	080084bd 	.word	0x080084bd
 80084b8:	080084bd 	.word	0x080084bd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80084bc:	bf00      	nop
  }

  return (USBD_OK);
 80084be:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	370c      	adds	r7, #12
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr

080084cc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80084d6:	6879      	ldr	r1, [r7, #4]
 80084d8:	4805      	ldr	r0, [pc, #20]	@ (80084f0 <CDC_Receive_FS+0x24>)
 80084da:	f7fe fbb7 	bl	8006c4c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80084de:	4804      	ldr	r0, [pc, #16]	@ (80084f0 <CDC_Receive_FS+0x24>)
 80084e0:	f7fe fc12 	bl	8006d08 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80084e4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3708      	adds	r7, #8
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	bf00      	nop
 80084f0:	200002f0 	.word	0x200002f0

080084f4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	460b      	mov	r3, r1
 80084fe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008500:	2300      	movs	r3, #0
 8008502:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008504:	4b0d      	ldr	r3, [pc, #52]	@ (800853c <CDC_Transmit_FS+0x48>)
 8008506:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800850a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008512:	2b00      	cmp	r3, #0
 8008514:	d001      	beq.n	800851a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008516:	2301      	movs	r3, #1
 8008518:	e00b      	b.n	8008532 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800851a:	887b      	ldrh	r3, [r7, #2]
 800851c:	461a      	mov	r2, r3
 800851e:	6879      	ldr	r1, [r7, #4]
 8008520:	4806      	ldr	r0, [pc, #24]	@ (800853c <CDC_Transmit_FS+0x48>)
 8008522:	f7fe fb71 	bl	8006c08 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008526:	4805      	ldr	r0, [pc, #20]	@ (800853c <CDC_Transmit_FS+0x48>)
 8008528:	f7fe fbae 	bl	8006c88 <USBD_CDC_TransmitPacket>
 800852c:	4603      	mov	r3, r0
 800852e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008530:	7bfb      	ldrb	r3, [r7, #15]
}
 8008532:	4618      	mov	r0, r3
 8008534:	3710      	adds	r7, #16
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop
 800853c:	200002f0 	.word	0x200002f0

08008540 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008540:	b480      	push	{r7}
 8008542:	b087      	sub	sp, #28
 8008544:	af00      	add	r7, sp, #0
 8008546:	60f8      	str	r0, [r7, #12]
 8008548:	60b9      	str	r1, [r7, #8]
 800854a:	4613      	mov	r3, r2
 800854c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800854e:	2300      	movs	r3, #0
 8008550:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008552:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008556:	4618      	mov	r0, r3
 8008558:	371c      	adds	r7, #28
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr
	...

08008564 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008564:	b480      	push	{r7}
 8008566:	b083      	sub	sp, #12
 8008568:	af00      	add	r7, sp, #0
 800856a:	4603      	mov	r3, r0
 800856c:	6039      	str	r1, [r7, #0]
 800856e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	2212      	movs	r2, #18
 8008574:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008576:	4b03      	ldr	r3, [pc, #12]	@ (8008584 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008578:	4618      	mov	r0, r3
 800857a:	370c      	adds	r7, #12
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr
 8008584:	200000c8 	.word	0x200000c8

08008588 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008588:	b480      	push	{r7}
 800858a:	b083      	sub	sp, #12
 800858c:	af00      	add	r7, sp, #0
 800858e:	4603      	mov	r3, r0
 8008590:	6039      	str	r1, [r7, #0]
 8008592:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	2204      	movs	r2, #4
 8008598:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800859a:	4b03      	ldr	r3, [pc, #12]	@ (80085a8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800859c:	4618      	mov	r0, r3
 800859e:	370c      	adds	r7, #12
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr
 80085a8:	200000dc 	.word	0x200000dc

080085ac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b082      	sub	sp, #8
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	4603      	mov	r3, r0
 80085b4:	6039      	str	r1, [r7, #0]
 80085b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80085b8:	79fb      	ldrb	r3, [r7, #7]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d105      	bne.n	80085ca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80085be:	683a      	ldr	r2, [r7, #0]
 80085c0:	4907      	ldr	r1, [pc, #28]	@ (80085e0 <USBD_FS_ProductStrDescriptor+0x34>)
 80085c2:	4808      	ldr	r0, [pc, #32]	@ (80085e4 <USBD_FS_ProductStrDescriptor+0x38>)
 80085c4:	f7ff fdec 	bl	80081a0 <USBD_GetString>
 80085c8:	e004      	b.n	80085d4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80085ca:	683a      	ldr	r2, [r7, #0]
 80085cc:	4904      	ldr	r1, [pc, #16]	@ (80085e0 <USBD_FS_ProductStrDescriptor+0x34>)
 80085ce:	4805      	ldr	r0, [pc, #20]	@ (80085e4 <USBD_FS_ProductStrDescriptor+0x38>)
 80085d0:	f7ff fde6 	bl	80081a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80085d4:	4b02      	ldr	r3, [pc, #8]	@ (80085e0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3708      	adds	r7, #8
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}
 80085de:	bf00      	nop
 80085e0:	200015cc 	.word	0x200015cc
 80085e4:	080097c4 	.word	0x080097c4

080085e8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b082      	sub	sp, #8
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	4603      	mov	r3, r0
 80085f0:	6039      	str	r1, [r7, #0]
 80085f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80085f4:	683a      	ldr	r2, [r7, #0]
 80085f6:	4904      	ldr	r1, [pc, #16]	@ (8008608 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80085f8:	4804      	ldr	r0, [pc, #16]	@ (800860c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80085fa:	f7ff fdd1 	bl	80081a0 <USBD_GetString>
  return USBD_StrDesc;
 80085fe:	4b02      	ldr	r3, [pc, #8]	@ (8008608 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008600:	4618      	mov	r0, r3
 8008602:	3708      	adds	r7, #8
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}
 8008608:	200015cc 	.word	0x200015cc
 800860c:	080097dc 	.word	0x080097dc

08008610 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b082      	sub	sp, #8
 8008614:	af00      	add	r7, sp, #0
 8008616:	4603      	mov	r3, r0
 8008618:	6039      	str	r1, [r7, #0]
 800861a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	221a      	movs	r2, #26
 8008620:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008622:	f000 f843 	bl	80086ac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008626:	4b02      	ldr	r3, [pc, #8]	@ (8008630 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008628:	4618      	mov	r0, r3
 800862a:	3708      	adds	r7, #8
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}
 8008630:	200000e0 	.word	0x200000e0

08008634 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b082      	sub	sp, #8
 8008638:	af00      	add	r7, sp, #0
 800863a:	4603      	mov	r3, r0
 800863c:	6039      	str	r1, [r7, #0]
 800863e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008640:	79fb      	ldrb	r3, [r7, #7]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d105      	bne.n	8008652 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008646:	683a      	ldr	r2, [r7, #0]
 8008648:	4907      	ldr	r1, [pc, #28]	@ (8008668 <USBD_FS_ConfigStrDescriptor+0x34>)
 800864a:	4808      	ldr	r0, [pc, #32]	@ (800866c <USBD_FS_ConfigStrDescriptor+0x38>)
 800864c:	f7ff fda8 	bl	80081a0 <USBD_GetString>
 8008650:	e004      	b.n	800865c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008652:	683a      	ldr	r2, [r7, #0]
 8008654:	4904      	ldr	r1, [pc, #16]	@ (8008668 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008656:	4805      	ldr	r0, [pc, #20]	@ (800866c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008658:	f7ff fda2 	bl	80081a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800865c:	4b02      	ldr	r3, [pc, #8]	@ (8008668 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800865e:	4618      	mov	r0, r3
 8008660:	3708      	adds	r7, #8
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
 8008666:	bf00      	nop
 8008668:	200015cc 	.word	0x200015cc
 800866c:	080097f0 	.word	0x080097f0

08008670 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b082      	sub	sp, #8
 8008674:	af00      	add	r7, sp, #0
 8008676:	4603      	mov	r3, r0
 8008678:	6039      	str	r1, [r7, #0]
 800867a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800867c:	79fb      	ldrb	r3, [r7, #7]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d105      	bne.n	800868e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008682:	683a      	ldr	r2, [r7, #0]
 8008684:	4907      	ldr	r1, [pc, #28]	@ (80086a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008686:	4808      	ldr	r0, [pc, #32]	@ (80086a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008688:	f7ff fd8a 	bl	80081a0 <USBD_GetString>
 800868c:	e004      	b.n	8008698 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800868e:	683a      	ldr	r2, [r7, #0]
 8008690:	4904      	ldr	r1, [pc, #16]	@ (80086a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008692:	4805      	ldr	r0, [pc, #20]	@ (80086a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008694:	f7ff fd84 	bl	80081a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008698:	4b02      	ldr	r3, [pc, #8]	@ (80086a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800869a:	4618      	mov	r0, r3
 800869c:	3708      	adds	r7, #8
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
 80086a2:	bf00      	nop
 80086a4:	200015cc 	.word	0x200015cc
 80086a8:	080097fc 	.word	0x080097fc

080086ac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80086b2:	4b0f      	ldr	r3, [pc, #60]	@ (80086f0 <Get_SerialNum+0x44>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80086b8:	4b0e      	ldr	r3, [pc, #56]	@ (80086f4 <Get_SerialNum+0x48>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80086be:	4b0e      	ldr	r3, [pc, #56]	@ (80086f8 <Get_SerialNum+0x4c>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80086c4:	68fa      	ldr	r2, [r7, #12]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	4413      	add	r3, r2
 80086ca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d009      	beq.n	80086e6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80086d2:	2208      	movs	r2, #8
 80086d4:	4909      	ldr	r1, [pc, #36]	@ (80086fc <Get_SerialNum+0x50>)
 80086d6:	68f8      	ldr	r0, [r7, #12]
 80086d8:	f000 f814 	bl	8008704 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80086dc:	2204      	movs	r2, #4
 80086de:	4908      	ldr	r1, [pc, #32]	@ (8008700 <Get_SerialNum+0x54>)
 80086e0:	68b8      	ldr	r0, [r7, #8]
 80086e2:	f000 f80f 	bl	8008704 <IntToUnicode>
  }
}
 80086e6:	bf00      	nop
 80086e8:	3710      	adds	r7, #16
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	1fff7a10 	.word	0x1fff7a10
 80086f4:	1fff7a14 	.word	0x1fff7a14
 80086f8:	1fff7a18 	.word	0x1fff7a18
 80086fc:	200000e2 	.word	0x200000e2
 8008700:	200000f2 	.word	0x200000f2

08008704 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008704:	b480      	push	{r7}
 8008706:	b087      	sub	sp, #28
 8008708:	af00      	add	r7, sp, #0
 800870a:	60f8      	str	r0, [r7, #12]
 800870c:	60b9      	str	r1, [r7, #8]
 800870e:	4613      	mov	r3, r2
 8008710:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008712:	2300      	movs	r3, #0
 8008714:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008716:	2300      	movs	r3, #0
 8008718:	75fb      	strb	r3, [r7, #23]
 800871a:	e027      	b.n	800876c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	0f1b      	lsrs	r3, r3, #28
 8008720:	2b09      	cmp	r3, #9
 8008722:	d80b      	bhi.n	800873c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	0f1b      	lsrs	r3, r3, #28
 8008728:	b2da      	uxtb	r2, r3
 800872a:	7dfb      	ldrb	r3, [r7, #23]
 800872c:	005b      	lsls	r3, r3, #1
 800872e:	4619      	mov	r1, r3
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	440b      	add	r3, r1
 8008734:	3230      	adds	r2, #48	@ 0x30
 8008736:	b2d2      	uxtb	r2, r2
 8008738:	701a      	strb	r2, [r3, #0]
 800873a:	e00a      	b.n	8008752 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	0f1b      	lsrs	r3, r3, #28
 8008740:	b2da      	uxtb	r2, r3
 8008742:	7dfb      	ldrb	r3, [r7, #23]
 8008744:	005b      	lsls	r3, r3, #1
 8008746:	4619      	mov	r1, r3
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	440b      	add	r3, r1
 800874c:	3237      	adds	r2, #55	@ 0x37
 800874e:	b2d2      	uxtb	r2, r2
 8008750:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	011b      	lsls	r3, r3, #4
 8008756:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008758:	7dfb      	ldrb	r3, [r7, #23]
 800875a:	005b      	lsls	r3, r3, #1
 800875c:	3301      	adds	r3, #1
 800875e:	68ba      	ldr	r2, [r7, #8]
 8008760:	4413      	add	r3, r2
 8008762:	2200      	movs	r2, #0
 8008764:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008766:	7dfb      	ldrb	r3, [r7, #23]
 8008768:	3301      	adds	r3, #1
 800876a:	75fb      	strb	r3, [r7, #23]
 800876c:	7dfa      	ldrb	r2, [r7, #23]
 800876e:	79fb      	ldrb	r3, [r7, #7]
 8008770:	429a      	cmp	r2, r3
 8008772:	d3d3      	bcc.n	800871c <IntToUnicode+0x18>
  }
}
 8008774:	bf00      	nop
 8008776:	bf00      	nop
 8008778:	371c      	adds	r7, #28
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr
	...

08008784 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b08a      	sub	sp, #40	@ 0x28
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800878c:	f107 0314 	add.w	r3, r7, #20
 8008790:	2200      	movs	r2, #0
 8008792:	601a      	str	r2, [r3, #0]
 8008794:	605a      	str	r2, [r3, #4]
 8008796:	609a      	str	r2, [r3, #8]
 8008798:	60da      	str	r2, [r3, #12]
 800879a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80087a4:	d147      	bne.n	8008836 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80087a6:	2300      	movs	r3, #0
 80087a8:	613b      	str	r3, [r7, #16]
 80087aa:	4b25      	ldr	r3, [pc, #148]	@ (8008840 <HAL_PCD_MspInit+0xbc>)
 80087ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087ae:	4a24      	ldr	r2, [pc, #144]	@ (8008840 <HAL_PCD_MspInit+0xbc>)
 80087b0:	f043 0301 	orr.w	r3, r3, #1
 80087b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80087b6:	4b22      	ldr	r3, [pc, #136]	@ (8008840 <HAL_PCD_MspInit+0xbc>)
 80087b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087ba:	f003 0301 	and.w	r3, r3, #1
 80087be:	613b      	str	r3, [r7, #16]
 80087c0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80087c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80087c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80087c8:	2300      	movs	r3, #0
 80087ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087cc:	2300      	movs	r3, #0
 80087ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80087d0:	f107 0314 	add.w	r3, r7, #20
 80087d4:	4619      	mov	r1, r3
 80087d6:	481b      	ldr	r0, [pc, #108]	@ (8008844 <HAL_PCD_MspInit+0xc0>)
 80087d8:	f7fa fa24 	bl	8002c24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80087dc:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80087e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087e2:	2302      	movs	r3, #2
 80087e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087e6:	2300      	movs	r3, #0
 80087e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80087ea:	2300      	movs	r3, #0
 80087ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80087ee:	230a      	movs	r3, #10
 80087f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80087f2:	f107 0314 	add.w	r3, r7, #20
 80087f6:	4619      	mov	r1, r3
 80087f8:	4812      	ldr	r0, [pc, #72]	@ (8008844 <HAL_PCD_MspInit+0xc0>)
 80087fa:	f7fa fa13 	bl	8002c24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80087fe:	4b10      	ldr	r3, [pc, #64]	@ (8008840 <HAL_PCD_MspInit+0xbc>)
 8008800:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008802:	4a0f      	ldr	r2, [pc, #60]	@ (8008840 <HAL_PCD_MspInit+0xbc>)
 8008804:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008808:	6353      	str	r3, [r2, #52]	@ 0x34
 800880a:	2300      	movs	r3, #0
 800880c:	60fb      	str	r3, [r7, #12]
 800880e:	4b0c      	ldr	r3, [pc, #48]	@ (8008840 <HAL_PCD_MspInit+0xbc>)
 8008810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008812:	4a0b      	ldr	r2, [pc, #44]	@ (8008840 <HAL_PCD_MspInit+0xbc>)
 8008814:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008818:	6453      	str	r3, [r2, #68]	@ 0x44
 800881a:	4b09      	ldr	r3, [pc, #36]	@ (8008840 <HAL_PCD_MspInit+0xbc>)
 800881c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800881e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008822:	60fb      	str	r3, [r7, #12]
 8008824:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008826:	2200      	movs	r2, #0
 8008828:	2100      	movs	r1, #0
 800882a:	2043      	movs	r0, #67	@ 0x43
 800882c:	f7fa f8c7 	bl	80029be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008830:	2043      	movs	r0, #67	@ 0x43
 8008832:	f7fa f8e0 	bl	80029f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008836:	bf00      	nop
 8008838:	3728      	adds	r7, #40	@ 0x28
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
 800883e:	bf00      	nop
 8008840:	40023800 	.word	0x40023800
 8008844:	40020000 	.word	0x40020000

08008848 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800885c:	4619      	mov	r1, r3
 800885e:	4610      	mov	r0, r2
 8008860:	f7fe fb3b 	bl	8006eda <USBD_LL_SetupStage>
}
 8008864:	bf00      	nop
 8008866:	3708      	adds	r7, #8
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}

0800886c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b082      	sub	sp, #8
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	460b      	mov	r3, r1
 8008876:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800887e:	78fa      	ldrb	r2, [r7, #3]
 8008880:	6879      	ldr	r1, [r7, #4]
 8008882:	4613      	mov	r3, r2
 8008884:	00db      	lsls	r3, r3, #3
 8008886:	4413      	add	r3, r2
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	440b      	add	r3, r1
 800888c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008890:	681a      	ldr	r2, [r3, #0]
 8008892:	78fb      	ldrb	r3, [r7, #3]
 8008894:	4619      	mov	r1, r3
 8008896:	f7fe fb75 	bl	8006f84 <USBD_LL_DataOutStage>
}
 800889a:	bf00      	nop
 800889c:	3708      	adds	r7, #8
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}

080088a2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088a2:	b580      	push	{r7, lr}
 80088a4:	b082      	sub	sp, #8
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6078      	str	r0, [r7, #4]
 80088aa:	460b      	mov	r3, r1
 80088ac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80088b4:	78fa      	ldrb	r2, [r7, #3]
 80088b6:	6879      	ldr	r1, [r7, #4]
 80088b8:	4613      	mov	r3, r2
 80088ba:	00db      	lsls	r3, r3, #3
 80088bc:	4413      	add	r3, r2
 80088be:	009b      	lsls	r3, r3, #2
 80088c0:	440b      	add	r3, r1
 80088c2:	3320      	adds	r3, #32
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	78fb      	ldrb	r3, [r7, #3]
 80088c8:	4619      	mov	r1, r3
 80088ca:	f7fe fc0e 	bl	80070ea <USBD_LL_DataInStage>
}
 80088ce:	bf00      	nop
 80088d0:	3708      	adds	r7, #8
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}

080088d6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088d6:	b580      	push	{r7, lr}
 80088d8:	b082      	sub	sp, #8
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80088e4:	4618      	mov	r0, r3
 80088e6:	f7fe fd48 	bl	800737a <USBD_LL_SOF>
}
 80088ea:	bf00      	nop
 80088ec:	3708      	adds	r7, #8
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}

080088f2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088f2:	b580      	push	{r7, lr}
 80088f4:	b084      	sub	sp, #16
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80088fa:	2301      	movs	r3, #1
 80088fc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	79db      	ldrb	r3, [r3, #7]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d102      	bne.n	800890c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008906:	2300      	movs	r3, #0
 8008908:	73fb      	strb	r3, [r7, #15]
 800890a:	e008      	b.n	800891e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	79db      	ldrb	r3, [r3, #7]
 8008910:	2b02      	cmp	r3, #2
 8008912:	d102      	bne.n	800891a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008914:	2301      	movs	r3, #1
 8008916:	73fb      	strb	r3, [r7, #15]
 8008918:	e001      	b.n	800891e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800891a:	f7f8 ff71 	bl	8001800 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008924:	7bfa      	ldrb	r2, [r7, #15]
 8008926:	4611      	mov	r1, r2
 8008928:	4618      	mov	r0, r3
 800892a:	f7fe fce2 	bl	80072f2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008934:	4618      	mov	r0, r3
 8008936:	f7fe fc8a 	bl	800724e <USBD_LL_Reset>
}
 800893a:	bf00      	nop
 800893c:	3710      	adds	r7, #16
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}
	...

08008944 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b082      	sub	sp, #8
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008952:	4618      	mov	r0, r3
 8008954:	f7fe fcdd 	bl	8007312 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	6812      	ldr	r2, [r2, #0]
 8008966:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800896a:	f043 0301 	orr.w	r3, r3, #1
 800896e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	7adb      	ldrb	r3, [r3, #11]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d005      	beq.n	8008984 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008978:	4b04      	ldr	r3, [pc, #16]	@ (800898c <HAL_PCD_SuspendCallback+0x48>)
 800897a:	691b      	ldr	r3, [r3, #16]
 800897c:	4a03      	ldr	r2, [pc, #12]	@ (800898c <HAL_PCD_SuspendCallback+0x48>)
 800897e:	f043 0306 	orr.w	r3, r3, #6
 8008982:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008984:	bf00      	nop
 8008986:	3708      	adds	r7, #8
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}
 800898c:	e000ed00 	.word	0xe000ed00

08008990 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b082      	sub	sp, #8
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800899e:	4618      	mov	r0, r3
 80089a0:	f7fe fcd3 	bl	800734a <USBD_LL_Resume>
}
 80089a4:	bf00      	nop
 80089a6:	3708      	adds	r7, #8
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b082      	sub	sp, #8
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	460b      	mov	r3, r1
 80089b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80089be:	78fa      	ldrb	r2, [r7, #3]
 80089c0:	4611      	mov	r1, r2
 80089c2:	4618      	mov	r0, r3
 80089c4:	f7fe fd2b 	bl	800741e <USBD_LL_IsoOUTIncomplete>
}
 80089c8:	bf00      	nop
 80089ca:	3708      	adds	r7, #8
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b082      	sub	sp, #8
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	460b      	mov	r3, r1
 80089da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80089e2:	78fa      	ldrb	r2, [r7, #3]
 80089e4:	4611      	mov	r1, r2
 80089e6:	4618      	mov	r0, r3
 80089e8:	f7fe fce7 	bl	80073ba <USBD_LL_IsoINIncomplete>
}
 80089ec:	bf00      	nop
 80089ee:	3708      	adds	r7, #8
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}

080089f4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b082      	sub	sp, #8
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008a02:	4618      	mov	r0, r3
 8008a04:	f7fe fd3d 	bl	8007482 <USBD_LL_DevConnected>
}
 8008a08:	bf00      	nop
 8008a0a:	3708      	adds	r7, #8
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}

08008a10 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b082      	sub	sp, #8
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f7fe fd3a 	bl	8007498 <USBD_LL_DevDisconnected>
}
 8008a24:	bf00      	nop
 8008a26:	3708      	adds	r7, #8
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b082      	sub	sp, #8
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d13c      	bne.n	8008ab6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008a3c:	4a20      	ldr	r2, [pc, #128]	@ (8008ac0 <USBD_LL_Init+0x94>)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	4a1e      	ldr	r2, [pc, #120]	@ (8008ac0 <USBD_LL_Init+0x94>)
 8008a48:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008a4c:	4b1c      	ldr	r3, [pc, #112]	@ (8008ac0 <USBD_LL_Init+0x94>)
 8008a4e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008a52:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008a54:	4b1a      	ldr	r3, [pc, #104]	@ (8008ac0 <USBD_LL_Init+0x94>)
 8008a56:	2204      	movs	r2, #4
 8008a58:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008a5a:	4b19      	ldr	r3, [pc, #100]	@ (8008ac0 <USBD_LL_Init+0x94>)
 8008a5c:	2202      	movs	r2, #2
 8008a5e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008a60:	4b17      	ldr	r3, [pc, #92]	@ (8008ac0 <USBD_LL_Init+0x94>)
 8008a62:	2200      	movs	r2, #0
 8008a64:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008a66:	4b16      	ldr	r3, [pc, #88]	@ (8008ac0 <USBD_LL_Init+0x94>)
 8008a68:	2202      	movs	r2, #2
 8008a6a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008a6c:	4b14      	ldr	r3, [pc, #80]	@ (8008ac0 <USBD_LL_Init+0x94>)
 8008a6e:	2200      	movs	r2, #0
 8008a70:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008a72:	4b13      	ldr	r3, [pc, #76]	@ (8008ac0 <USBD_LL_Init+0x94>)
 8008a74:	2200      	movs	r2, #0
 8008a76:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008a78:	4b11      	ldr	r3, [pc, #68]	@ (8008ac0 <USBD_LL_Init+0x94>)
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8008a7e:	4b10      	ldr	r3, [pc, #64]	@ (8008ac0 <USBD_LL_Init+0x94>)
 8008a80:	2201      	movs	r2, #1
 8008a82:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008a84:	4b0e      	ldr	r3, [pc, #56]	@ (8008ac0 <USBD_LL_Init+0x94>)
 8008a86:	2200      	movs	r2, #0
 8008a88:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008a8a:	480d      	ldr	r0, [pc, #52]	@ (8008ac0 <USBD_LL_Init+0x94>)
 8008a8c:	f7fa fa97 	bl	8002fbe <HAL_PCD_Init>
 8008a90:	4603      	mov	r3, r0
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d001      	beq.n	8008a9a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008a96:	f7f8 feb3 	bl	8001800 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008a9a:	2180      	movs	r1, #128	@ 0x80
 8008a9c:	4808      	ldr	r0, [pc, #32]	@ (8008ac0 <USBD_LL_Init+0x94>)
 8008a9e:	f7fb fcc4 	bl	800442a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008aa2:	2240      	movs	r2, #64	@ 0x40
 8008aa4:	2100      	movs	r1, #0
 8008aa6:	4806      	ldr	r0, [pc, #24]	@ (8008ac0 <USBD_LL_Init+0x94>)
 8008aa8:	f7fb fc78 	bl	800439c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008aac:	2280      	movs	r2, #128	@ 0x80
 8008aae:	2101      	movs	r1, #1
 8008ab0:	4803      	ldr	r0, [pc, #12]	@ (8008ac0 <USBD_LL_Init+0x94>)
 8008ab2:	f7fb fc73 	bl	800439c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008ab6:	2300      	movs	r3, #0
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3708      	adds	r7, #8
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}
 8008ac0:	200017cc 	.word	0x200017cc

08008ac4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008acc:	2300      	movs	r3, #0
 8008ace:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008ada:	4618      	mov	r0, r3
 8008adc:	f7fa fb7e 	bl	80031dc <HAL_PCD_Start>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ae4:	7bfb      	ldrb	r3, [r7, #15]
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f000 f942 	bl	8008d70 <USBD_Get_USB_Status>
 8008aec:	4603      	mov	r3, r0
 8008aee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008af0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3710      	adds	r7, #16
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}

08008afa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008afa:	b580      	push	{r7, lr}
 8008afc:	b084      	sub	sp, #16
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	6078      	str	r0, [r7, #4]
 8008b02:	4608      	mov	r0, r1
 8008b04:	4611      	mov	r1, r2
 8008b06:	461a      	mov	r2, r3
 8008b08:	4603      	mov	r3, r0
 8008b0a:	70fb      	strb	r3, [r7, #3]
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	70bb      	strb	r3, [r7, #2]
 8008b10:	4613      	mov	r3, r2
 8008b12:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b14:	2300      	movs	r3, #0
 8008b16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008b22:	78bb      	ldrb	r3, [r7, #2]
 8008b24:	883a      	ldrh	r2, [r7, #0]
 8008b26:	78f9      	ldrb	r1, [r7, #3]
 8008b28:	f7fb f852 	bl	8003bd0 <HAL_PCD_EP_Open>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b30:	7bfb      	ldrb	r3, [r7, #15]
 8008b32:	4618      	mov	r0, r3
 8008b34:	f000 f91c 	bl	8008d70 <USBD_Get_USB_Status>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3710      	adds	r7, #16
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}

08008b46 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b46:	b580      	push	{r7, lr}
 8008b48:	b084      	sub	sp, #16
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]
 8008b4e:	460b      	mov	r3, r1
 8008b50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b52:	2300      	movs	r3, #0
 8008b54:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b56:	2300      	movs	r3, #0
 8008b58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008b60:	78fa      	ldrb	r2, [r7, #3]
 8008b62:	4611      	mov	r1, r2
 8008b64:	4618      	mov	r0, r3
 8008b66:	f7fb f89d 	bl	8003ca4 <HAL_PCD_EP_Close>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b6e:	7bfb      	ldrb	r3, [r7, #15]
 8008b70:	4618      	mov	r0, r3
 8008b72:	f000 f8fd 	bl	8008d70 <USBD_Get_USB_Status>
 8008b76:	4603      	mov	r3, r0
 8008b78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3710      	adds	r7, #16
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b084      	sub	sp, #16
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	460b      	mov	r3, r1
 8008b8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b90:	2300      	movs	r3, #0
 8008b92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b94:	2300      	movs	r3, #0
 8008b96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008b9e:	78fa      	ldrb	r2, [r7, #3]
 8008ba0:	4611      	mov	r1, r2
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f7fb f955 	bl	8003e52 <HAL_PCD_EP_SetStall>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bac:	7bfb      	ldrb	r3, [r7, #15]
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f000 f8de 	bl	8008d70 <USBD_Get_USB_Status>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bb8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3710      	adds	r7, #16
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}

08008bc2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bc2:	b580      	push	{r7, lr}
 8008bc4:	b084      	sub	sp, #16
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
 8008bca:	460b      	mov	r3, r1
 8008bcc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008bdc:	78fa      	ldrb	r2, [r7, #3]
 8008bde:	4611      	mov	r1, r2
 8008be0:	4618      	mov	r0, r3
 8008be2:	f7fb f999 	bl	8003f18 <HAL_PCD_EP_ClrStall>
 8008be6:	4603      	mov	r3, r0
 8008be8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bea:	7bfb      	ldrb	r3, [r7, #15]
 8008bec:	4618      	mov	r0, r3
 8008bee:	f000 f8bf 	bl	8008d70 <USBD_Get_USB_Status>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bf6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3710      	adds	r7, #16
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}

08008c00 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b085      	sub	sp, #20
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	460b      	mov	r3, r1
 8008c0a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008c12:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008c14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	da0b      	bge.n	8008c34 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008c1c:	78fb      	ldrb	r3, [r7, #3]
 8008c1e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008c22:	68f9      	ldr	r1, [r7, #12]
 8008c24:	4613      	mov	r3, r2
 8008c26:	00db      	lsls	r3, r3, #3
 8008c28:	4413      	add	r3, r2
 8008c2a:	009b      	lsls	r3, r3, #2
 8008c2c:	440b      	add	r3, r1
 8008c2e:	3316      	adds	r3, #22
 8008c30:	781b      	ldrb	r3, [r3, #0]
 8008c32:	e00b      	b.n	8008c4c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008c34:	78fb      	ldrb	r3, [r7, #3]
 8008c36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008c3a:	68f9      	ldr	r1, [r7, #12]
 8008c3c:	4613      	mov	r3, r2
 8008c3e:	00db      	lsls	r3, r3, #3
 8008c40:	4413      	add	r3, r2
 8008c42:	009b      	lsls	r3, r3, #2
 8008c44:	440b      	add	r3, r1
 8008c46:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8008c4a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3714      	adds	r7, #20
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr

08008c58 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b084      	sub	sp, #16
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	460b      	mov	r3, r1
 8008c62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c64:	2300      	movs	r3, #0
 8008c66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008c72:	78fa      	ldrb	r2, [r7, #3]
 8008c74:	4611      	mov	r1, r2
 8008c76:	4618      	mov	r0, r3
 8008c78:	f7fa ff86 	bl	8003b88 <HAL_PCD_SetAddress>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c80:	7bfb      	ldrb	r3, [r7, #15]
 8008c82:	4618      	mov	r0, r3
 8008c84:	f000 f874 	bl	8008d70 <USBD_Get_USB_Status>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3710      	adds	r7, #16
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}

08008c96 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008c96:	b580      	push	{r7, lr}
 8008c98:	b086      	sub	sp, #24
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	60f8      	str	r0, [r7, #12]
 8008c9e:	607a      	str	r2, [r7, #4]
 8008ca0:	603b      	str	r3, [r7, #0]
 8008ca2:	460b      	mov	r3, r1
 8008ca4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008caa:	2300      	movs	r3, #0
 8008cac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008cb4:	7af9      	ldrb	r1, [r7, #11]
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	687a      	ldr	r2, [r7, #4]
 8008cba:	f7fb f890 	bl	8003dde <HAL_PCD_EP_Transmit>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cc2:	7dfb      	ldrb	r3, [r7, #23]
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f000 f853 	bl	8008d70 <USBD_Get_USB_Status>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008cce:	7dbb      	ldrb	r3, [r7, #22]
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3718      	adds	r7, #24
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b086      	sub	sp, #24
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	60f8      	str	r0, [r7, #12]
 8008ce0:	607a      	str	r2, [r7, #4]
 8008ce2:	603b      	str	r3, [r7, #0]
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cec:	2300      	movs	r3, #0
 8008cee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008cf6:	7af9      	ldrb	r1, [r7, #11]
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	687a      	ldr	r2, [r7, #4]
 8008cfc:	f7fb f81c 	bl	8003d38 <HAL_PCD_EP_Receive>
 8008d00:	4603      	mov	r3, r0
 8008d02:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d04:	7dfb      	ldrb	r3, [r7, #23]
 8008d06:	4618      	mov	r0, r3
 8008d08:	f000 f832 	bl	8008d70 <USBD_Get_USB_Status>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d10:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3718      	adds	r7, #24
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}

08008d1a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d1a:	b580      	push	{r7, lr}
 8008d1c:	b082      	sub	sp, #8
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	6078      	str	r0, [r7, #4]
 8008d22:	460b      	mov	r3, r1
 8008d24:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008d2c:	78fa      	ldrb	r2, [r7, #3]
 8008d2e:	4611      	mov	r1, r2
 8008d30:	4618      	mov	r0, r3
 8008d32:	f7fb f83c 	bl	8003dae <HAL_PCD_EP_GetRxCount>
 8008d36:	4603      	mov	r3, r0
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3708      	adds	r7, #8
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b083      	sub	sp, #12
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008d48:	4b03      	ldr	r3, [pc, #12]	@ (8008d58 <USBD_static_malloc+0x18>)
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	370c      	adds	r7, #12
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr
 8008d56:	bf00      	nop
 8008d58:	20001cb0 	.word	0x20001cb0

08008d5c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b083      	sub	sp, #12
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]

}
 8008d64:	bf00      	nop
 8008d66:	370c      	adds	r7, #12
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr

08008d70 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b085      	sub	sp, #20
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	4603      	mov	r3, r0
 8008d78:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008d7e:	79fb      	ldrb	r3, [r7, #7]
 8008d80:	2b03      	cmp	r3, #3
 8008d82:	d817      	bhi.n	8008db4 <USBD_Get_USB_Status+0x44>
 8008d84:	a201      	add	r2, pc, #4	@ (adr r2, 8008d8c <USBD_Get_USB_Status+0x1c>)
 8008d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d8a:	bf00      	nop
 8008d8c:	08008d9d 	.word	0x08008d9d
 8008d90:	08008da3 	.word	0x08008da3
 8008d94:	08008da9 	.word	0x08008da9
 8008d98:	08008daf 	.word	0x08008daf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	73fb      	strb	r3, [r7, #15]
    break;
 8008da0:	e00b      	b.n	8008dba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008da2:	2303      	movs	r3, #3
 8008da4:	73fb      	strb	r3, [r7, #15]
    break;
 8008da6:	e008      	b.n	8008dba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008da8:	2301      	movs	r3, #1
 8008daa:	73fb      	strb	r3, [r7, #15]
    break;
 8008dac:	e005      	b.n	8008dba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008dae:	2303      	movs	r3, #3
 8008db0:	73fb      	strb	r3, [r7, #15]
    break;
 8008db2:	e002      	b.n	8008dba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008db4:	2303      	movs	r3, #3
 8008db6:	73fb      	strb	r3, [r7, #15]
    break;
 8008db8:	bf00      	nop
  }
  return usb_status;
 8008dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3714      	adds	r7, #20
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr

08008dc8 <siprintf>:
 8008dc8:	b40e      	push	{r1, r2, r3}
 8008dca:	b500      	push	{lr}
 8008dcc:	b09c      	sub	sp, #112	@ 0x70
 8008dce:	ab1d      	add	r3, sp, #116	@ 0x74
 8008dd0:	9002      	str	r0, [sp, #8]
 8008dd2:	9006      	str	r0, [sp, #24]
 8008dd4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008dd8:	4809      	ldr	r0, [pc, #36]	@ (8008e00 <siprintf+0x38>)
 8008dda:	9107      	str	r1, [sp, #28]
 8008ddc:	9104      	str	r1, [sp, #16]
 8008dde:	4909      	ldr	r1, [pc, #36]	@ (8008e04 <siprintf+0x3c>)
 8008de0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008de4:	9105      	str	r1, [sp, #20]
 8008de6:	6800      	ldr	r0, [r0, #0]
 8008de8:	9301      	str	r3, [sp, #4]
 8008dea:	a902      	add	r1, sp, #8
 8008dec:	f000 f994 	bl	8009118 <_svfiprintf_r>
 8008df0:	9b02      	ldr	r3, [sp, #8]
 8008df2:	2200      	movs	r2, #0
 8008df4:	701a      	strb	r2, [r3, #0]
 8008df6:	b01c      	add	sp, #112	@ 0x70
 8008df8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008dfc:	b003      	add	sp, #12
 8008dfe:	4770      	bx	lr
 8008e00:	200000fc 	.word	0x200000fc
 8008e04:	ffff0208 	.word	0xffff0208

08008e08 <memset>:
 8008e08:	4402      	add	r2, r0
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d100      	bne.n	8008e12 <memset+0xa>
 8008e10:	4770      	bx	lr
 8008e12:	f803 1b01 	strb.w	r1, [r3], #1
 8008e16:	e7f9      	b.n	8008e0c <memset+0x4>

08008e18 <__errno>:
 8008e18:	4b01      	ldr	r3, [pc, #4]	@ (8008e20 <__errno+0x8>)
 8008e1a:	6818      	ldr	r0, [r3, #0]
 8008e1c:	4770      	bx	lr
 8008e1e:	bf00      	nop
 8008e20:	200000fc 	.word	0x200000fc

08008e24 <__libc_init_array>:
 8008e24:	b570      	push	{r4, r5, r6, lr}
 8008e26:	4d0d      	ldr	r5, [pc, #52]	@ (8008e5c <__libc_init_array+0x38>)
 8008e28:	4c0d      	ldr	r4, [pc, #52]	@ (8008e60 <__libc_init_array+0x3c>)
 8008e2a:	1b64      	subs	r4, r4, r5
 8008e2c:	10a4      	asrs	r4, r4, #2
 8008e2e:	2600      	movs	r6, #0
 8008e30:	42a6      	cmp	r6, r4
 8008e32:	d109      	bne.n	8008e48 <__libc_init_array+0x24>
 8008e34:	4d0b      	ldr	r5, [pc, #44]	@ (8008e64 <__libc_init_array+0x40>)
 8008e36:	4c0c      	ldr	r4, [pc, #48]	@ (8008e68 <__libc_init_array+0x44>)
 8008e38:	f000 fc66 	bl	8009708 <_init>
 8008e3c:	1b64      	subs	r4, r4, r5
 8008e3e:	10a4      	asrs	r4, r4, #2
 8008e40:	2600      	movs	r6, #0
 8008e42:	42a6      	cmp	r6, r4
 8008e44:	d105      	bne.n	8008e52 <__libc_init_array+0x2e>
 8008e46:	bd70      	pop	{r4, r5, r6, pc}
 8008e48:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e4c:	4798      	blx	r3
 8008e4e:	3601      	adds	r6, #1
 8008e50:	e7ee      	b.n	8008e30 <__libc_init_array+0xc>
 8008e52:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e56:	4798      	blx	r3
 8008e58:	3601      	adds	r6, #1
 8008e5a:	e7f2      	b.n	8008e42 <__libc_init_array+0x1e>
 8008e5c:	08009858 	.word	0x08009858
 8008e60:	08009858 	.word	0x08009858
 8008e64:	08009858 	.word	0x08009858
 8008e68:	0800985c 	.word	0x0800985c

08008e6c <__retarget_lock_acquire_recursive>:
 8008e6c:	4770      	bx	lr

08008e6e <__retarget_lock_release_recursive>:
 8008e6e:	4770      	bx	lr

08008e70 <_free_r>:
 8008e70:	b538      	push	{r3, r4, r5, lr}
 8008e72:	4605      	mov	r5, r0
 8008e74:	2900      	cmp	r1, #0
 8008e76:	d041      	beq.n	8008efc <_free_r+0x8c>
 8008e78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e7c:	1f0c      	subs	r4, r1, #4
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	bfb8      	it	lt
 8008e82:	18e4      	addlt	r4, r4, r3
 8008e84:	f000 f8e0 	bl	8009048 <__malloc_lock>
 8008e88:	4a1d      	ldr	r2, [pc, #116]	@ (8008f00 <_free_r+0x90>)
 8008e8a:	6813      	ldr	r3, [r2, #0]
 8008e8c:	b933      	cbnz	r3, 8008e9c <_free_r+0x2c>
 8008e8e:	6063      	str	r3, [r4, #4]
 8008e90:	6014      	str	r4, [r2, #0]
 8008e92:	4628      	mov	r0, r5
 8008e94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e98:	f000 b8dc 	b.w	8009054 <__malloc_unlock>
 8008e9c:	42a3      	cmp	r3, r4
 8008e9e:	d908      	bls.n	8008eb2 <_free_r+0x42>
 8008ea0:	6820      	ldr	r0, [r4, #0]
 8008ea2:	1821      	adds	r1, r4, r0
 8008ea4:	428b      	cmp	r3, r1
 8008ea6:	bf01      	itttt	eq
 8008ea8:	6819      	ldreq	r1, [r3, #0]
 8008eaa:	685b      	ldreq	r3, [r3, #4]
 8008eac:	1809      	addeq	r1, r1, r0
 8008eae:	6021      	streq	r1, [r4, #0]
 8008eb0:	e7ed      	b.n	8008e8e <_free_r+0x1e>
 8008eb2:	461a      	mov	r2, r3
 8008eb4:	685b      	ldr	r3, [r3, #4]
 8008eb6:	b10b      	cbz	r3, 8008ebc <_free_r+0x4c>
 8008eb8:	42a3      	cmp	r3, r4
 8008eba:	d9fa      	bls.n	8008eb2 <_free_r+0x42>
 8008ebc:	6811      	ldr	r1, [r2, #0]
 8008ebe:	1850      	adds	r0, r2, r1
 8008ec0:	42a0      	cmp	r0, r4
 8008ec2:	d10b      	bne.n	8008edc <_free_r+0x6c>
 8008ec4:	6820      	ldr	r0, [r4, #0]
 8008ec6:	4401      	add	r1, r0
 8008ec8:	1850      	adds	r0, r2, r1
 8008eca:	4283      	cmp	r3, r0
 8008ecc:	6011      	str	r1, [r2, #0]
 8008ece:	d1e0      	bne.n	8008e92 <_free_r+0x22>
 8008ed0:	6818      	ldr	r0, [r3, #0]
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	6053      	str	r3, [r2, #4]
 8008ed6:	4408      	add	r0, r1
 8008ed8:	6010      	str	r0, [r2, #0]
 8008eda:	e7da      	b.n	8008e92 <_free_r+0x22>
 8008edc:	d902      	bls.n	8008ee4 <_free_r+0x74>
 8008ede:	230c      	movs	r3, #12
 8008ee0:	602b      	str	r3, [r5, #0]
 8008ee2:	e7d6      	b.n	8008e92 <_free_r+0x22>
 8008ee4:	6820      	ldr	r0, [r4, #0]
 8008ee6:	1821      	adds	r1, r4, r0
 8008ee8:	428b      	cmp	r3, r1
 8008eea:	bf04      	itt	eq
 8008eec:	6819      	ldreq	r1, [r3, #0]
 8008eee:	685b      	ldreq	r3, [r3, #4]
 8008ef0:	6063      	str	r3, [r4, #4]
 8008ef2:	bf04      	itt	eq
 8008ef4:	1809      	addeq	r1, r1, r0
 8008ef6:	6021      	streq	r1, [r4, #0]
 8008ef8:	6054      	str	r4, [r2, #4]
 8008efa:	e7ca      	b.n	8008e92 <_free_r+0x22>
 8008efc:	bd38      	pop	{r3, r4, r5, pc}
 8008efe:	bf00      	nop
 8008f00:	20002014 	.word	0x20002014

08008f04 <sbrk_aligned>:
 8008f04:	b570      	push	{r4, r5, r6, lr}
 8008f06:	4e0f      	ldr	r6, [pc, #60]	@ (8008f44 <sbrk_aligned+0x40>)
 8008f08:	460c      	mov	r4, r1
 8008f0a:	6831      	ldr	r1, [r6, #0]
 8008f0c:	4605      	mov	r5, r0
 8008f0e:	b911      	cbnz	r1, 8008f16 <sbrk_aligned+0x12>
 8008f10:	f000 fba6 	bl	8009660 <_sbrk_r>
 8008f14:	6030      	str	r0, [r6, #0]
 8008f16:	4621      	mov	r1, r4
 8008f18:	4628      	mov	r0, r5
 8008f1a:	f000 fba1 	bl	8009660 <_sbrk_r>
 8008f1e:	1c43      	adds	r3, r0, #1
 8008f20:	d103      	bne.n	8008f2a <sbrk_aligned+0x26>
 8008f22:	f04f 34ff 	mov.w	r4, #4294967295
 8008f26:	4620      	mov	r0, r4
 8008f28:	bd70      	pop	{r4, r5, r6, pc}
 8008f2a:	1cc4      	adds	r4, r0, #3
 8008f2c:	f024 0403 	bic.w	r4, r4, #3
 8008f30:	42a0      	cmp	r0, r4
 8008f32:	d0f8      	beq.n	8008f26 <sbrk_aligned+0x22>
 8008f34:	1a21      	subs	r1, r4, r0
 8008f36:	4628      	mov	r0, r5
 8008f38:	f000 fb92 	bl	8009660 <_sbrk_r>
 8008f3c:	3001      	adds	r0, #1
 8008f3e:	d1f2      	bne.n	8008f26 <sbrk_aligned+0x22>
 8008f40:	e7ef      	b.n	8008f22 <sbrk_aligned+0x1e>
 8008f42:	bf00      	nop
 8008f44:	20002010 	.word	0x20002010

08008f48 <_malloc_r>:
 8008f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f4c:	1ccd      	adds	r5, r1, #3
 8008f4e:	f025 0503 	bic.w	r5, r5, #3
 8008f52:	3508      	adds	r5, #8
 8008f54:	2d0c      	cmp	r5, #12
 8008f56:	bf38      	it	cc
 8008f58:	250c      	movcc	r5, #12
 8008f5a:	2d00      	cmp	r5, #0
 8008f5c:	4606      	mov	r6, r0
 8008f5e:	db01      	blt.n	8008f64 <_malloc_r+0x1c>
 8008f60:	42a9      	cmp	r1, r5
 8008f62:	d904      	bls.n	8008f6e <_malloc_r+0x26>
 8008f64:	230c      	movs	r3, #12
 8008f66:	6033      	str	r3, [r6, #0]
 8008f68:	2000      	movs	r0, #0
 8008f6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009044 <_malloc_r+0xfc>
 8008f72:	f000 f869 	bl	8009048 <__malloc_lock>
 8008f76:	f8d8 3000 	ldr.w	r3, [r8]
 8008f7a:	461c      	mov	r4, r3
 8008f7c:	bb44      	cbnz	r4, 8008fd0 <_malloc_r+0x88>
 8008f7e:	4629      	mov	r1, r5
 8008f80:	4630      	mov	r0, r6
 8008f82:	f7ff ffbf 	bl	8008f04 <sbrk_aligned>
 8008f86:	1c43      	adds	r3, r0, #1
 8008f88:	4604      	mov	r4, r0
 8008f8a:	d158      	bne.n	800903e <_malloc_r+0xf6>
 8008f8c:	f8d8 4000 	ldr.w	r4, [r8]
 8008f90:	4627      	mov	r7, r4
 8008f92:	2f00      	cmp	r7, #0
 8008f94:	d143      	bne.n	800901e <_malloc_r+0xd6>
 8008f96:	2c00      	cmp	r4, #0
 8008f98:	d04b      	beq.n	8009032 <_malloc_r+0xea>
 8008f9a:	6823      	ldr	r3, [r4, #0]
 8008f9c:	4639      	mov	r1, r7
 8008f9e:	4630      	mov	r0, r6
 8008fa0:	eb04 0903 	add.w	r9, r4, r3
 8008fa4:	f000 fb5c 	bl	8009660 <_sbrk_r>
 8008fa8:	4581      	cmp	r9, r0
 8008faa:	d142      	bne.n	8009032 <_malloc_r+0xea>
 8008fac:	6821      	ldr	r1, [r4, #0]
 8008fae:	1a6d      	subs	r5, r5, r1
 8008fb0:	4629      	mov	r1, r5
 8008fb2:	4630      	mov	r0, r6
 8008fb4:	f7ff ffa6 	bl	8008f04 <sbrk_aligned>
 8008fb8:	3001      	adds	r0, #1
 8008fba:	d03a      	beq.n	8009032 <_malloc_r+0xea>
 8008fbc:	6823      	ldr	r3, [r4, #0]
 8008fbe:	442b      	add	r3, r5
 8008fc0:	6023      	str	r3, [r4, #0]
 8008fc2:	f8d8 3000 	ldr.w	r3, [r8]
 8008fc6:	685a      	ldr	r2, [r3, #4]
 8008fc8:	bb62      	cbnz	r2, 8009024 <_malloc_r+0xdc>
 8008fca:	f8c8 7000 	str.w	r7, [r8]
 8008fce:	e00f      	b.n	8008ff0 <_malloc_r+0xa8>
 8008fd0:	6822      	ldr	r2, [r4, #0]
 8008fd2:	1b52      	subs	r2, r2, r5
 8008fd4:	d420      	bmi.n	8009018 <_malloc_r+0xd0>
 8008fd6:	2a0b      	cmp	r2, #11
 8008fd8:	d917      	bls.n	800900a <_malloc_r+0xc2>
 8008fda:	1961      	adds	r1, r4, r5
 8008fdc:	42a3      	cmp	r3, r4
 8008fde:	6025      	str	r5, [r4, #0]
 8008fe0:	bf18      	it	ne
 8008fe2:	6059      	strne	r1, [r3, #4]
 8008fe4:	6863      	ldr	r3, [r4, #4]
 8008fe6:	bf08      	it	eq
 8008fe8:	f8c8 1000 	streq.w	r1, [r8]
 8008fec:	5162      	str	r2, [r4, r5]
 8008fee:	604b      	str	r3, [r1, #4]
 8008ff0:	4630      	mov	r0, r6
 8008ff2:	f000 f82f 	bl	8009054 <__malloc_unlock>
 8008ff6:	f104 000b 	add.w	r0, r4, #11
 8008ffa:	1d23      	adds	r3, r4, #4
 8008ffc:	f020 0007 	bic.w	r0, r0, #7
 8009000:	1ac2      	subs	r2, r0, r3
 8009002:	bf1c      	itt	ne
 8009004:	1a1b      	subne	r3, r3, r0
 8009006:	50a3      	strne	r3, [r4, r2]
 8009008:	e7af      	b.n	8008f6a <_malloc_r+0x22>
 800900a:	6862      	ldr	r2, [r4, #4]
 800900c:	42a3      	cmp	r3, r4
 800900e:	bf0c      	ite	eq
 8009010:	f8c8 2000 	streq.w	r2, [r8]
 8009014:	605a      	strne	r2, [r3, #4]
 8009016:	e7eb      	b.n	8008ff0 <_malloc_r+0xa8>
 8009018:	4623      	mov	r3, r4
 800901a:	6864      	ldr	r4, [r4, #4]
 800901c:	e7ae      	b.n	8008f7c <_malloc_r+0x34>
 800901e:	463c      	mov	r4, r7
 8009020:	687f      	ldr	r7, [r7, #4]
 8009022:	e7b6      	b.n	8008f92 <_malloc_r+0x4a>
 8009024:	461a      	mov	r2, r3
 8009026:	685b      	ldr	r3, [r3, #4]
 8009028:	42a3      	cmp	r3, r4
 800902a:	d1fb      	bne.n	8009024 <_malloc_r+0xdc>
 800902c:	2300      	movs	r3, #0
 800902e:	6053      	str	r3, [r2, #4]
 8009030:	e7de      	b.n	8008ff0 <_malloc_r+0xa8>
 8009032:	230c      	movs	r3, #12
 8009034:	6033      	str	r3, [r6, #0]
 8009036:	4630      	mov	r0, r6
 8009038:	f000 f80c 	bl	8009054 <__malloc_unlock>
 800903c:	e794      	b.n	8008f68 <_malloc_r+0x20>
 800903e:	6005      	str	r5, [r0, #0]
 8009040:	e7d6      	b.n	8008ff0 <_malloc_r+0xa8>
 8009042:	bf00      	nop
 8009044:	20002014 	.word	0x20002014

08009048 <__malloc_lock>:
 8009048:	4801      	ldr	r0, [pc, #4]	@ (8009050 <__malloc_lock+0x8>)
 800904a:	f7ff bf0f 	b.w	8008e6c <__retarget_lock_acquire_recursive>
 800904e:	bf00      	nop
 8009050:	2000200c 	.word	0x2000200c

08009054 <__malloc_unlock>:
 8009054:	4801      	ldr	r0, [pc, #4]	@ (800905c <__malloc_unlock+0x8>)
 8009056:	f7ff bf0a 	b.w	8008e6e <__retarget_lock_release_recursive>
 800905a:	bf00      	nop
 800905c:	2000200c 	.word	0x2000200c

08009060 <__ssputs_r>:
 8009060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009064:	688e      	ldr	r6, [r1, #8]
 8009066:	461f      	mov	r7, r3
 8009068:	42be      	cmp	r6, r7
 800906a:	680b      	ldr	r3, [r1, #0]
 800906c:	4682      	mov	sl, r0
 800906e:	460c      	mov	r4, r1
 8009070:	4690      	mov	r8, r2
 8009072:	d82d      	bhi.n	80090d0 <__ssputs_r+0x70>
 8009074:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009078:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800907c:	d026      	beq.n	80090cc <__ssputs_r+0x6c>
 800907e:	6965      	ldr	r5, [r4, #20]
 8009080:	6909      	ldr	r1, [r1, #16]
 8009082:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009086:	eba3 0901 	sub.w	r9, r3, r1
 800908a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800908e:	1c7b      	adds	r3, r7, #1
 8009090:	444b      	add	r3, r9
 8009092:	106d      	asrs	r5, r5, #1
 8009094:	429d      	cmp	r5, r3
 8009096:	bf38      	it	cc
 8009098:	461d      	movcc	r5, r3
 800909a:	0553      	lsls	r3, r2, #21
 800909c:	d527      	bpl.n	80090ee <__ssputs_r+0x8e>
 800909e:	4629      	mov	r1, r5
 80090a0:	f7ff ff52 	bl	8008f48 <_malloc_r>
 80090a4:	4606      	mov	r6, r0
 80090a6:	b360      	cbz	r0, 8009102 <__ssputs_r+0xa2>
 80090a8:	6921      	ldr	r1, [r4, #16]
 80090aa:	464a      	mov	r2, r9
 80090ac:	f000 fae8 	bl	8009680 <memcpy>
 80090b0:	89a3      	ldrh	r3, [r4, #12]
 80090b2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80090b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090ba:	81a3      	strh	r3, [r4, #12]
 80090bc:	6126      	str	r6, [r4, #16]
 80090be:	6165      	str	r5, [r4, #20]
 80090c0:	444e      	add	r6, r9
 80090c2:	eba5 0509 	sub.w	r5, r5, r9
 80090c6:	6026      	str	r6, [r4, #0]
 80090c8:	60a5      	str	r5, [r4, #8]
 80090ca:	463e      	mov	r6, r7
 80090cc:	42be      	cmp	r6, r7
 80090ce:	d900      	bls.n	80090d2 <__ssputs_r+0x72>
 80090d0:	463e      	mov	r6, r7
 80090d2:	6820      	ldr	r0, [r4, #0]
 80090d4:	4632      	mov	r2, r6
 80090d6:	4641      	mov	r1, r8
 80090d8:	f000 faa8 	bl	800962c <memmove>
 80090dc:	68a3      	ldr	r3, [r4, #8]
 80090de:	1b9b      	subs	r3, r3, r6
 80090e0:	60a3      	str	r3, [r4, #8]
 80090e2:	6823      	ldr	r3, [r4, #0]
 80090e4:	4433      	add	r3, r6
 80090e6:	6023      	str	r3, [r4, #0]
 80090e8:	2000      	movs	r0, #0
 80090ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090ee:	462a      	mov	r2, r5
 80090f0:	f000 fad4 	bl	800969c <_realloc_r>
 80090f4:	4606      	mov	r6, r0
 80090f6:	2800      	cmp	r0, #0
 80090f8:	d1e0      	bne.n	80090bc <__ssputs_r+0x5c>
 80090fa:	6921      	ldr	r1, [r4, #16]
 80090fc:	4650      	mov	r0, sl
 80090fe:	f7ff feb7 	bl	8008e70 <_free_r>
 8009102:	230c      	movs	r3, #12
 8009104:	f8ca 3000 	str.w	r3, [sl]
 8009108:	89a3      	ldrh	r3, [r4, #12]
 800910a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800910e:	81a3      	strh	r3, [r4, #12]
 8009110:	f04f 30ff 	mov.w	r0, #4294967295
 8009114:	e7e9      	b.n	80090ea <__ssputs_r+0x8a>
	...

08009118 <_svfiprintf_r>:
 8009118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800911c:	4698      	mov	r8, r3
 800911e:	898b      	ldrh	r3, [r1, #12]
 8009120:	061b      	lsls	r3, r3, #24
 8009122:	b09d      	sub	sp, #116	@ 0x74
 8009124:	4607      	mov	r7, r0
 8009126:	460d      	mov	r5, r1
 8009128:	4614      	mov	r4, r2
 800912a:	d510      	bpl.n	800914e <_svfiprintf_r+0x36>
 800912c:	690b      	ldr	r3, [r1, #16]
 800912e:	b973      	cbnz	r3, 800914e <_svfiprintf_r+0x36>
 8009130:	2140      	movs	r1, #64	@ 0x40
 8009132:	f7ff ff09 	bl	8008f48 <_malloc_r>
 8009136:	6028      	str	r0, [r5, #0]
 8009138:	6128      	str	r0, [r5, #16]
 800913a:	b930      	cbnz	r0, 800914a <_svfiprintf_r+0x32>
 800913c:	230c      	movs	r3, #12
 800913e:	603b      	str	r3, [r7, #0]
 8009140:	f04f 30ff 	mov.w	r0, #4294967295
 8009144:	b01d      	add	sp, #116	@ 0x74
 8009146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800914a:	2340      	movs	r3, #64	@ 0x40
 800914c:	616b      	str	r3, [r5, #20]
 800914e:	2300      	movs	r3, #0
 8009150:	9309      	str	r3, [sp, #36]	@ 0x24
 8009152:	2320      	movs	r3, #32
 8009154:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009158:	f8cd 800c 	str.w	r8, [sp, #12]
 800915c:	2330      	movs	r3, #48	@ 0x30
 800915e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80092fc <_svfiprintf_r+0x1e4>
 8009162:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009166:	f04f 0901 	mov.w	r9, #1
 800916a:	4623      	mov	r3, r4
 800916c:	469a      	mov	sl, r3
 800916e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009172:	b10a      	cbz	r2, 8009178 <_svfiprintf_r+0x60>
 8009174:	2a25      	cmp	r2, #37	@ 0x25
 8009176:	d1f9      	bne.n	800916c <_svfiprintf_r+0x54>
 8009178:	ebba 0b04 	subs.w	fp, sl, r4
 800917c:	d00b      	beq.n	8009196 <_svfiprintf_r+0x7e>
 800917e:	465b      	mov	r3, fp
 8009180:	4622      	mov	r2, r4
 8009182:	4629      	mov	r1, r5
 8009184:	4638      	mov	r0, r7
 8009186:	f7ff ff6b 	bl	8009060 <__ssputs_r>
 800918a:	3001      	adds	r0, #1
 800918c:	f000 80a7 	beq.w	80092de <_svfiprintf_r+0x1c6>
 8009190:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009192:	445a      	add	r2, fp
 8009194:	9209      	str	r2, [sp, #36]	@ 0x24
 8009196:	f89a 3000 	ldrb.w	r3, [sl]
 800919a:	2b00      	cmp	r3, #0
 800919c:	f000 809f 	beq.w	80092de <_svfiprintf_r+0x1c6>
 80091a0:	2300      	movs	r3, #0
 80091a2:	f04f 32ff 	mov.w	r2, #4294967295
 80091a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091aa:	f10a 0a01 	add.w	sl, sl, #1
 80091ae:	9304      	str	r3, [sp, #16]
 80091b0:	9307      	str	r3, [sp, #28]
 80091b2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80091b6:	931a      	str	r3, [sp, #104]	@ 0x68
 80091b8:	4654      	mov	r4, sl
 80091ba:	2205      	movs	r2, #5
 80091bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091c0:	484e      	ldr	r0, [pc, #312]	@ (80092fc <_svfiprintf_r+0x1e4>)
 80091c2:	f7f7 f80d 	bl	80001e0 <memchr>
 80091c6:	9a04      	ldr	r2, [sp, #16]
 80091c8:	b9d8      	cbnz	r0, 8009202 <_svfiprintf_r+0xea>
 80091ca:	06d0      	lsls	r0, r2, #27
 80091cc:	bf44      	itt	mi
 80091ce:	2320      	movmi	r3, #32
 80091d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091d4:	0711      	lsls	r1, r2, #28
 80091d6:	bf44      	itt	mi
 80091d8:	232b      	movmi	r3, #43	@ 0x2b
 80091da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091de:	f89a 3000 	ldrb.w	r3, [sl]
 80091e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80091e4:	d015      	beq.n	8009212 <_svfiprintf_r+0xfa>
 80091e6:	9a07      	ldr	r2, [sp, #28]
 80091e8:	4654      	mov	r4, sl
 80091ea:	2000      	movs	r0, #0
 80091ec:	f04f 0c0a 	mov.w	ip, #10
 80091f0:	4621      	mov	r1, r4
 80091f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091f6:	3b30      	subs	r3, #48	@ 0x30
 80091f8:	2b09      	cmp	r3, #9
 80091fa:	d94b      	bls.n	8009294 <_svfiprintf_r+0x17c>
 80091fc:	b1b0      	cbz	r0, 800922c <_svfiprintf_r+0x114>
 80091fe:	9207      	str	r2, [sp, #28]
 8009200:	e014      	b.n	800922c <_svfiprintf_r+0x114>
 8009202:	eba0 0308 	sub.w	r3, r0, r8
 8009206:	fa09 f303 	lsl.w	r3, r9, r3
 800920a:	4313      	orrs	r3, r2
 800920c:	9304      	str	r3, [sp, #16]
 800920e:	46a2      	mov	sl, r4
 8009210:	e7d2      	b.n	80091b8 <_svfiprintf_r+0xa0>
 8009212:	9b03      	ldr	r3, [sp, #12]
 8009214:	1d19      	adds	r1, r3, #4
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	9103      	str	r1, [sp, #12]
 800921a:	2b00      	cmp	r3, #0
 800921c:	bfbb      	ittet	lt
 800921e:	425b      	neglt	r3, r3
 8009220:	f042 0202 	orrlt.w	r2, r2, #2
 8009224:	9307      	strge	r3, [sp, #28]
 8009226:	9307      	strlt	r3, [sp, #28]
 8009228:	bfb8      	it	lt
 800922a:	9204      	strlt	r2, [sp, #16]
 800922c:	7823      	ldrb	r3, [r4, #0]
 800922e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009230:	d10a      	bne.n	8009248 <_svfiprintf_r+0x130>
 8009232:	7863      	ldrb	r3, [r4, #1]
 8009234:	2b2a      	cmp	r3, #42	@ 0x2a
 8009236:	d132      	bne.n	800929e <_svfiprintf_r+0x186>
 8009238:	9b03      	ldr	r3, [sp, #12]
 800923a:	1d1a      	adds	r2, r3, #4
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	9203      	str	r2, [sp, #12]
 8009240:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009244:	3402      	adds	r4, #2
 8009246:	9305      	str	r3, [sp, #20]
 8009248:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800930c <_svfiprintf_r+0x1f4>
 800924c:	7821      	ldrb	r1, [r4, #0]
 800924e:	2203      	movs	r2, #3
 8009250:	4650      	mov	r0, sl
 8009252:	f7f6 ffc5 	bl	80001e0 <memchr>
 8009256:	b138      	cbz	r0, 8009268 <_svfiprintf_r+0x150>
 8009258:	9b04      	ldr	r3, [sp, #16]
 800925a:	eba0 000a 	sub.w	r0, r0, sl
 800925e:	2240      	movs	r2, #64	@ 0x40
 8009260:	4082      	lsls	r2, r0
 8009262:	4313      	orrs	r3, r2
 8009264:	3401      	adds	r4, #1
 8009266:	9304      	str	r3, [sp, #16]
 8009268:	f814 1b01 	ldrb.w	r1, [r4], #1
 800926c:	4824      	ldr	r0, [pc, #144]	@ (8009300 <_svfiprintf_r+0x1e8>)
 800926e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009272:	2206      	movs	r2, #6
 8009274:	f7f6 ffb4 	bl	80001e0 <memchr>
 8009278:	2800      	cmp	r0, #0
 800927a:	d036      	beq.n	80092ea <_svfiprintf_r+0x1d2>
 800927c:	4b21      	ldr	r3, [pc, #132]	@ (8009304 <_svfiprintf_r+0x1ec>)
 800927e:	bb1b      	cbnz	r3, 80092c8 <_svfiprintf_r+0x1b0>
 8009280:	9b03      	ldr	r3, [sp, #12]
 8009282:	3307      	adds	r3, #7
 8009284:	f023 0307 	bic.w	r3, r3, #7
 8009288:	3308      	adds	r3, #8
 800928a:	9303      	str	r3, [sp, #12]
 800928c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800928e:	4433      	add	r3, r6
 8009290:	9309      	str	r3, [sp, #36]	@ 0x24
 8009292:	e76a      	b.n	800916a <_svfiprintf_r+0x52>
 8009294:	fb0c 3202 	mla	r2, ip, r2, r3
 8009298:	460c      	mov	r4, r1
 800929a:	2001      	movs	r0, #1
 800929c:	e7a8      	b.n	80091f0 <_svfiprintf_r+0xd8>
 800929e:	2300      	movs	r3, #0
 80092a0:	3401      	adds	r4, #1
 80092a2:	9305      	str	r3, [sp, #20]
 80092a4:	4619      	mov	r1, r3
 80092a6:	f04f 0c0a 	mov.w	ip, #10
 80092aa:	4620      	mov	r0, r4
 80092ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092b0:	3a30      	subs	r2, #48	@ 0x30
 80092b2:	2a09      	cmp	r2, #9
 80092b4:	d903      	bls.n	80092be <_svfiprintf_r+0x1a6>
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d0c6      	beq.n	8009248 <_svfiprintf_r+0x130>
 80092ba:	9105      	str	r1, [sp, #20]
 80092bc:	e7c4      	b.n	8009248 <_svfiprintf_r+0x130>
 80092be:	fb0c 2101 	mla	r1, ip, r1, r2
 80092c2:	4604      	mov	r4, r0
 80092c4:	2301      	movs	r3, #1
 80092c6:	e7f0      	b.n	80092aa <_svfiprintf_r+0x192>
 80092c8:	ab03      	add	r3, sp, #12
 80092ca:	9300      	str	r3, [sp, #0]
 80092cc:	462a      	mov	r2, r5
 80092ce:	4b0e      	ldr	r3, [pc, #56]	@ (8009308 <_svfiprintf_r+0x1f0>)
 80092d0:	a904      	add	r1, sp, #16
 80092d2:	4638      	mov	r0, r7
 80092d4:	f3af 8000 	nop.w
 80092d8:	1c42      	adds	r2, r0, #1
 80092da:	4606      	mov	r6, r0
 80092dc:	d1d6      	bne.n	800928c <_svfiprintf_r+0x174>
 80092de:	89ab      	ldrh	r3, [r5, #12]
 80092e0:	065b      	lsls	r3, r3, #25
 80092e2:	f53f af2d 	bmi.w	8009140 <_svfiprintf_r+0x28>
 80092e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80092e8:	e72c      	b.n	8009144 <_svfiprintf_r+0x2c>
 80092ea:	ab03      	add	r3, sp, #12
 80092ec:	9300      	str	r3, [sp, #0]
 80092ee:	462a      	mov	r2, r5
 80092f0:	4b05      	ldr	r3, [pc, #20]	@ (8009308 <_svfiprintf_r+0x1f0>)
 80092f2:	a904      	add	r1, sp, #16
 80092f4:	4638      	mov	r0, r7
 80092f6:	f000 f879 	bl	80093ec <_printf_i>
 80092fa:	e7ed      	b.n	80092d8 <_svfiprintf_r+0x1c0>
 80092fc:	0800981c 	.word	0x0800981c
 8009300:	08009826 	.word	0x08009826
 8009304:	00000000 	.word	0x00000000
 8009308:	08009061 	.word	0x08009061
 800930c:	08009822 	.word	0x08009822

08009310 <_printf_common>:
 8009310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009314:	4616      	mov	r6, r2
 8009316:	4698      	mov	r8, r3
 8009318:	688a      	ldr	r2, [r1, #8]
 800931a:	690b      	ldr	r3, [r1, #16]
 800931c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009320:	4293      	cmp	r3, r2
 8009322:	bfb8      	it	lt
 8009324:	4613      	movlt	r3, r2
 8009326:	6033      	str	r3, [r6, #0]
 8009328:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800932c:	4607      	mov	r7, r0
 800932e:	460c      	mov	r4, r1
 8009330:	b10a      	cbz	r2, 8009336 <_printf_common+0x26>
 8009332:	3301      	adds	r3, #1
 8009334:	6033      	str	r3, [r6, #0]
 8009336:	6823      	ldr	r3, [r4, #0]
 8009338:	0699      	lsls	r1, r3, #26
 800933a:	bf42      	ittt	mi
 800933c:	6833      	ldrmi	r3, [r6, #0]
 800933e:	3302      	addmi	r3, #2
 8009340:	6033      	strmi	r3, [r6, #0]
 8009342:	6825      	ldr	r5, [r4, #0]
 8009344:	f015 0506 	ands.w	r5, r5, #6
 8009348:	d106      	bne.n	8009358 <_printf_common+0x48>
 800934a:	f104 0a19 	add.w	sl, r4, #25
 800934e:	68e3      	ldr	r3, [r4, #12]
 8009350:	6832      	ldr	r2, [r6, #0]
 8009352:	1a9b      	subs	r3, r3, r2
 8009354:	42ab      	cmp	r3, r5
 8009356:	dc26      	bgt.n	80093a6 <_printf_common+0x96>
 8009358:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800935c:	6822      	ldr	r2, [r4, #0]
 800935e:	3b00      	subs	r3, #0
 8009360:	bf18      	it	ne
 8009362:	2301      	movne	r3, #1
 8009364:	0692      	lsls	r2, r2, #26
 8009366:	d42b      	bmi.n	80093c0 <_printf_common+0xb0>
 8009368:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800936c:	4641      	mov	r1, r8
 800936e:	4638      	mov	r0, r7
 8009370:	47c8      	blx	r9
 8009372:	3001      	adds	r0, #1
 8009374:	d01e      	beq.n	80093b4 <_printf_common+0xa4>
 8009376:	6823      	ldr	r3, [r4, #0]
 8009378:	6922      	ldr	r2, [r4, #16]
 800937a:	f003 0306 	and.w	r3, r3, #6
 800937e:	2b04      	cmp	r3, #4
 8009380:	bf02      	ittt	eq
 8009382:	68e5      	ldreq	r5, [r4, #12]
 8009384:	6833      	ldreq	r3, [r6, #0]
 8009386:	1aed      	subeq	r5, r5, r3
 8009388:	68a3      	ldr	r3, [r4, #8]
 800938a:	bf0c      	ite	eq
 800938c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009390:	2500      	movne	r5, #0
 8009392:	4293      	cmp	r3, r2
 8009394:	bfc4      	itt	gt
 8009396:	1a9b      	subgt	r3, r3, r2
 8009398:	18ed      	addgt	r5, r5, r3
 800939a:	2600      	movs	r6, #0
 800939c:	341a      	adds	r4, #26
 800939e:	42b5      	cmp	r5, r6
 80093a0:	d11a      	bne.n	80093d8 <_printf_common+0xc8>
 80093a2:	2000      	movs	r0, #0
 80093a4:	e008      	b.n	80093b8 <_printf_common+0xa8>
 80093a6:	2301      	movs	r3, #1
 80093a8:	4652      	mov	r2, sl
 80093aa:	4641      	mov	r1, r8
 80093ac:	4638      	mov	r0, r7
 80093ae:	47c8      	blx	r9
 80093b0:	3001      	adds	r0, #1
 80093b2:	d103      	bne.n	80093bc <_printf_common+0xac>
 80093b4:	f04f 30ff 	mov.w	r0, #4294967295
 80093b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093bc:	3501      	adds	r5, #1
 80093be:	e7c6      	b.n	800934e <_printf_common+0x3e>
 80093c0:	18e1      	adds	r1, r4, r3
 80093c2:	1c5a      	adds	r2, r3, #1
 80093c4:	2030      	movs	r0, #48	@ 0x30
 80093c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80093ca:	4422      	add	r2, r4
 80093cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80093d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80093d4:	3302      	adds	r3, #2
 80093d6:	e7c7      	b.n	8009368 <_printf_common+0x58>
 80093d8:	2301      	movs	r3, #1
 80093da:	4622      	mov	r2, r4
 80093dc:	4641      	mov	r1, r8
 80093de:	4638      	mov	r0, r7
 80093e0:	47c8      	blx	r9
 80093e2:	3001      	adds	r0, #1
 80093e4:	d0e6      	beq.n	80093b4 <_printf_common+0xa4>
 80093e6:	3601      	adds	r6, #1
 80093e8:	e7d9      	b.n	800939e <_printf_common+0x8e>
	...

080093ec <_printf_i>:
 80093ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093f0:	7e0f      	ldrb	r7, [r1, #24]
 80093f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80093f4:	2f78      	cmp	r7, #120	@ 0x78
 80093f6:	4691      	mov	r9, r2
 80093f8:	4680      	mov	r8, r0
 80093fa:	460c      	mov	r4, r1
 80093fc:	469a      	mov	sl, r3
 80093fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009402:	d807      	bhi.n	8009414 <_printf_i+0x28>
 8009404:	2f62      	cmp	r7, #98	@ 0x62
 8009406:	d80a      	bhi.n	800941e <_printf_i+0x32>
 8009408:	2f00      	cmp	r7, #0
 800940a:	f000 80d2 	beq.w	80095b2 <_printf_i+0x1c6>
 800940e:	2f58      	cmp	r7, #88	@ 0x58
 8009410:	f000 80b9 	beq.w	8009586 <_printf_i+0x19a>
 8009414:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009418:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800941c:	e03a      	b.n	8009494 <_printf_i+0xa8>
 800941e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009422:	2b15      	cmp	r3, #21
 8009424:	d8f6      	bhi.n	8009414 <_printf_i+0x28>
 8009426:	a101      	add	r1, pc, #4	@ (adr r1, 800942c <_printf_i+0x40>)
 8009428:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800942c:	08009485 	.word	0x08009485
 8009430:	08009499 	.word	0x08009499
 8009434:	08009415 	.word	0x08009415
 8009438:	08009415 	.word	0x08009415
 800943c:	08009415 	.word	0x08009415
 8009440:	08009415 	.word	0x08009415
 8009444:	08009499 	.word	0x08009499
 8009448:	08009415 	.word	0x08009415
 800944c:	08009415 	.word	0x08009415
 8009450:	08009415 	.word	0x08009415
 8009454:	08009415 	.word	0x08009415
 8009458:	08009599 	.word	0x08009599
 800945c:	080094c3 	.word	0x080094c3
 8009460:	08009553 	.word	0x08009553
 8009464:	08009415 	.word	0x08009415
 8009468:	08009415 	.word	0x08009415
 800946c:	080095bb 	.word	0x080095bb
 8009470:	08009415 	.word	0x08009415
 8009474:	080094c3 	.word	0x080094c3
 8009478:	08009415 	.word	0x08009415
 800947c:	08009415 	.word	0x08009415
 8009480:	0800955b 	.word	0x0800955b
 8009484:	6833      	ldr	r3, [r6, #0]
 8009486:	1d1a      	adds	r2, r3, #4
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	6032      	str	r2, [r6, #0]
 800948c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009490:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009494:	2301      	movs	r3, #1
 8009496:	e09d      	b.n	80095d4 <_printf_i+0x1e8>
 8009498:	6833      	ldr	r3, [r6, #0]
 800949a:	6820      	ldr	r0, [r4, #0]
 800949c:	1d19      	adds	r1, r3, #4
 800949e:	6031      	str	r1, [r6, #0]
 80094a0:	0606      	lsls	r6, r0, #24
 80094a2:	d501      	bpl.n	80094a8 <_printf_i+0xbc>
 80094a4:	681d      	ldr	r5, [r3, #0]
 80094a6:	e003      	b.n	80094b0 <_printf_i+0xc4>
 80094a8:	0645      	lsls	r5, r0, #25
 80094aa:	d5fb      	bpl.n	80094a4 <_printf_i+0xb8>
 80094ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80094b0:	2d00      	cmp	r5, #0
 80094b2:	da03      	bge.n	80094bc <_printf_i+0xd0>
 80094b4:	232d      	movs	r3, #45	@ 0x2d
 80094b6:	426d      	negs	r5, r5
 80094b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80094bc:	4859      	ldr	r0, [pc, #356]	@ (8009624 <_printf_i+0x238>)
 80094be:	230a      	movs	r3, #10
 80094c0:	e011      	b.n	80094e6 <_printf_i+0xfa>
 80094c2:	6821      	ldr	r1, [r4, #0]
 80094c4:	6833      	ldr	r3, [r6, #0]
 80094c6:	0608      	lsls	r0, r1, #24
 80094c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80094cc:	d402      	bmi.n	80094d4 <_printf_i+0xe8>
 80094ce:	0649      	lsls	r1, r1, #25
 80094d0:	bf48      	it	mi
 80094d2:	b2ad      	uxthmi	r5, r5
 80094d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80094d6:	4853      	ldr	r0, [pc, #332]	@ (8009624 <_printf_i+0x238>)
 80094d8:	6033      	str	r3, [r6, #0]
 80094da:	bf14      	ite	ne
 80094dc:	230a      	movne	r3, #10
 80094de:	2308      	moveq	r3, #8
 80094e0:	2100      	movs	r1, #0
 80094e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80094e6:	6866      	ldr	r6, [r4, #4]
 80094e8:	60a6      	str	r6, [r4, #8]
 80094ea:	2e00      	cmp	r6, #0
 80094ec:	bfa2      	ittt	ge
 80094ee:	6821      	ldrge	r1, [r4, #0]
 80094f0:	f021 0104 	bicge.w	r1, r1, #4
 80094f4:	6021      	strge	r1, [r4, #0]
 80094f6:	b90d      	cbnz	r5, 80094fc <_printf_i+0x110>
 80094f8:	2e00      	cmp	r6, #0
 80094fa:	d04b      	beq.n	8009594 <_printf_i+0x1a8>
 80094fc:	4616      	mov	r6, r2
 80094fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8009502:	fb03 5711 	mls	r7, r3, r1, r5
 8009506:	5dc7      	ldrb	r7, [r0, r7]
 8009508:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800950c:	462f      	mov	r7, r5
 800950e:	42bb      	cmp	r3, r7
 8009510:	460d      	mov	r5, r1
 8009512:	d9f4      	bls.n	80094fe <_printf_i+0x112>
 8009514:	2b08      	cmp	r3, #8
 8009516:	d10b      	bne.n	8009530 <_printf_i+0x144>
 8009518:	6823      	ldr	r3, [r4, #0]
 800951a:	07df      	lsls	r7, r3, #31
 800951c:	d508      	bpl.n	8009530 <_printf_i+0x144>
 800951e:	6923      	ldr	r3, [r4, #16]
 8009520:	6861      	ldr	r1, [r4, #4]
 8009522:	4299      	cmp	r1, r3
 8009524:	bfde      	ittt	le
 8009526:	2330      	movle	r3, #48	@ 0x30
 8009528:	f806 3c01 	strble.w	r3, [r6, #-1]
 800952c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009530:	1b92      	subs	r2, r2, r6
 8009532:	6122      	str	r2, [r4, #16]
 8009534:	f8cd a000 	str.w	sl, [sp]
 8009538:	464b      	mov	r3, r9
 800953a:	aa03      	add	r2, sp, #12
 800953c:	4621      	mov	r1, r4
 800953e:	4640      	mov	r0, r8
 8009540:	f7ff fee6 	bl	8009310 <_printf_common>
 8009544:	3001      	adds	r0, #1
 8009546:	d14a      	bne.n	80095de <_printf_i+0x1f2>
 8009548:	f04f 30ff 	mov.w	r0, #4294967295
 800954c:	b004      	add	sp, #16
 800954e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009552:	6823      	ldr	r3, [r4, #0]
 8009554:	f043 0320 	orr.w	r3, r3, #32
 8009558:	6023      	str	r3, [r4, #0]
 800955a:	4833      	ldr	r0, [pc, #204]	@ (8009628 <_printf_i+0x23c>)
 800955c:	2778      	movs	r7, #120	@ 0x78
 800955e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009562:	6823      	ldr	r3, [r4, #0]
 8009564:	6831      	ldr	r1, [r6, #0]
 8009566:	061f      	lsls	r7, r3, #24
 8009568:	f851 5b04 	ldr.w	r5, [r1], #4
 800956c:	d402      	bmi.n	8009574 <_printf_i+0x188>
 800956e:	065f      	lsls	r7, r3, #25
 8009570:	bf48      	it	mi
 8009572:	b2ad      	uxthmi	r5, r5
 8009574:	6031      	str	r1, [r6, #0]
 8009576:	07d9      	lsls	r1, r3, #31
 8009578:	bf44      	itt	mi
 800957a:	f043 0320 	orrmi.w	r3, r3, #32
 800957e:	6023      	strmi	r3, [r4, #0]
 8009580:	b11d      	cbz	r5, 800958a <_printf_i+0x19e>
 8009582:	2310      	movs	r3, #16
 8009584:	e7ac      	b.n	80094e0 <_printf_i+0xf4>
 8009586:	4827      	ldr	r0, [pc, #156]	@ (8009624 <_printf_i+0x238>)
 8009588:	e7e9      	b.n	800955e <_printf_i+0x172>
 800958a:	6823      	ldr	r3, [r4, #0]
 800958c:	f023 0320 	bic.w	r3, r3, #32
 8009590:	6023      	str	r3, [r4, #0]
 8009592:	e7f6      	b.n	8009582 <_printf_i+0x196>
 8009594:	4616      	mov	r6, r2
 8009596:	e7bd      	b.n	8009514 <_printf_i+0x128>
 8009598:	6833      	ldr	r3, [r6, #0]
 800959a:	6825      	ldr	r5, [r4, #0]
 800959c:	6961      	ldr	r1, [r4, #20]
 800959e:	1d18      	adds	r0, r3, #4
 80095a0:	6030      	str	r0, [r6, #0]
 80095a2:	062e      	lsls	r6, r5, #24
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	d501      	bpl.n	80095ac <_printf_i+0x1c0>
 80095a8:	6019      	str	r1, [r3, #0]
 80095aa:	e002      	b.n	80095b2 <_printf_i+0x1c6>
 80095ac:	0668      	lsls	r0, r5, #25
 80095ae:	d5fb      	bpl.n	80095a8 <_printf_i+0x1bc>
 80095b0:	8019      	strh	r1, [r3, #0]
 80095b2:	2300      	movs	r3, #0
 80095b4:	6123      	str	r3, [r4, #16]
 80095b6:	4616      	mov	r6, r2
 80095b8:	e7bc      	b.n	8009534 <_printf_i+0x148>
 80095ba:	6833      	ldr	r3, [r6, #0]
 80095bc:	1d1a      	adds	r2, r3, #4
 80095be:	6032      	str	r2, [r6, #0]
 80095c0:	681e      	ldr	r6, [r3, #0]
 80095c2:	6862      	ldr	r2, [r4, #4]
 80095c4:	2100      	movs	r1, #0
 80095c6:	4630      	mov	r0, r6
 80095c8:	f7f6 fe0a 	bl	80001e0 <memchr>
 80095cc:	b108      	cbz	r0, 80095d2 <_printf_i+0x1e6>
 80095ce:	1b80      	subs	r0, r0, r6
 80095d0:	6060      	str	r0, [r4, #4]
 80095d2:	6863      	ldr	r3, [r4, #4]
 80095d4:	6123      	str	r3, [r4, #16]
 80095d6:	2300      	movs	r3, #0
 80095d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80095dc:	e7aa      	b.n	8009534 <_printf_i+0x148>
 80095de:	6923      	ldr	r3, [r4, #16]
 80095e0:	4632      	mov	r2, r6
 80095e2:	4649      	mov	r1, r9
 80095e4:	4640      	mov	r0, r8
 80095e6:	47d0      	blx	sl
 80095e8:	3001      	adds	r0, #1
 80095ea:	d0ad      	beq.n	8009548 <_printf_i+0x15c>
 80095ec:	6823      	ldr	r3, [r4, #0]
 80095ee:	079b      	lsls	r3, r3, #30
 80095f0:	d413      	bmi.n	800961a <_printf_i+0x22e>
 80095f2:	68e0      	ldr	r0, [r4, #12]
 80095f4:	9b03      	ldr	r3, [sp, #12]
 80095f6:	4298      	cmp	r0, r3
 80095f8:	bfb8      	it	lt
 80095fa:	4618      	movlt	r0, r3
 80095fc:	e7a6      	b.n	800954c <_printf_i+0x160>
 80095fe:	2301      	movs	r3, #1
 8009600:	4632      	mov	r2, r6
 8009602:	4649      	mov	r1, r9
 8009604:	4640      	mov	r0, r8
 8009606:	47d0      	blx	sl
 8009608:	3001      	adds	r0, #1
 800960a:	d09d      	beq.n	8009548 <_printf_i+0x15c>
 800960c:	3501      	adds	r5, #1
 800960e:	68e3      	ldr	r3, [r4, #12]
 8009610:	9903      	ldr	r1, [sp, #12]
 8009612:	1a5b      	subs	r3, r3, r1
 8009614:	42ab      	cmp	r3, r5
 8009616:	dcf2      	bgt.n	80095fe <_printf_i+0x212>
 8009618:	e7eb      	b.n	80095f2 <_printf_i+0x206>
 800961a:	2500      	movs	r5, #0
 800961c:	f104 0619 	add.w	r6, r4, #25
 8009620:	e7f5      	b.n	800960e <_printf_i+0x222>
 8009622:	bf00      	nop
 8009624:	0800982d 	.word	0x0800982d
 8009628:	0800983e 	.word	0x0800983e

0800962c <memmove>:
 800962c:	4288      	cmp	r0, r1
 800962e:	b510      	push	{r4, lr}
 8009630:	eb01 0402 	add.w	r4, r1, r2
 8009634:	d902      	bls.n	800963c <memmove+0x10>
 8009636:	4284      	cmp	r4, r0
 8009638:	4623      	mov	r3, r4
 800963a:	d807      	bhi.n	800964c <memmove+0x20>
 800963c:	1e43      	subs	r3, r0, #1
 800963e:	42a1      	cmp	r1, r4
 8009640:	d008      	beq.n	8009654 <memmove+0x28>
 8009642:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009646:	f803 2f01 	strb.w	r2, [r3, #1]!
 800964a:	e7f8      	b.n	800963e <memmove+0x12>
 800964c:	4402      	add	r2, r0
 800964e:	4601      	mov	r1, r0
 8009650:	428a      	cmp	r2, r1
 8009652:	d100      	bne.n	8009656 <memmove+0x2a>
 8009654:	bd10      	pop	{r4, pc}
 8009656:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800965a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800965e:	e7f7      	b.n	8009650 <memmove+0x24>

08009660 <_sbrk_r>:
 8009660:	b538      	push	{r3, r4, r5, lr}
 8009662:	4d06      	ldr	r5, [pc, #24]	@ (800967c <_sbrk_r+0x1c>)
 8009664:	2300      	movs	r3, #0
 8009666:	4604      	mov	r4, r0
 8009668:	4608      	mov	r0, r1
 800966a:	602b      	str	r3, [r5, #0]
 800966c:	f7f8 fa62 	bl	8001b34 <_sbrk>
 8009670:	1c43      	adds	r3, r0, #1
 8009672:	d102      	bne.n	800967a <_sbrk_r+0x1a>
 8009674:	682b      	ldr	r3, [r5, #0]
 8009676:	b103      	cbz	r3, 800967a <_sbrk_r+0x1a>
 8009678:	6023      	str	r3, [r4, #0]
 800967a:	bd38      	pop	{r3, r4, r5, pc}
 800967c:	20002008 	.word	0x20002008

08009680 <memcpy>:
 8009680:	440a      	add	r2, r1
 8009682:	4291      	cmp	r1, r2
 8009684:	f100 33ff 	add.w	r3, r0, #4294967295
 8009688:	d100      	bne.n	800968c <memcpy+0xc>
 800968a:	4770      	bx	lr
 800968c:	b510      	push	{r4, lr}
 800968e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009692:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009696:	4291      	cmp	r1, r2
 8009698:	d1f9      	bne.n	800968e <memcpy+0xe>
 800969a:	bd10      	pop	{r4, pc}

0800969c <_realloc_r>:
 800969c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096a0:	4680      	mov	r8, r0
 80096a2:	4615      	mov	r5, r2
 80096a4:	460c      	mov	r4, r1
 80096a6:	b921      	cbnz	r1, 80096b2 <_realloc_r+0x16>
 80096a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096ac:	4611      	mov	r1, r2
 80096ae:	f7ff bc4b 	b.w	8008f48 <_malloc_r>
 80096b2:	b92a      	cbnz	r2, 80096c0 <_realloc_r+0x24>
 80096b4:	f7ff fbdc 	bl	8008e70 <_free_r>
 80096b8:	2400      	movs	r4, #0
 80096ba:	4620      	mov	r0, r4
 80096bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096c0:	f000 f81a 	bl	80096f8 <_malloc_usable_size_r>
 80096c4:	4285      	cmp	r5, r0
 80096c6:	4606      	mov	r6, r0
 80096c8:	d802      	bhi.n	80096d0 <_realloc_r+0x34>
 80096ca:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80096ce:	d8f4      	bhi.n	80096ba <_realloc_r+0x1e>
 80096d0:	4629      	mov	r1, r5
 80096d2:	4640      	mov	r0, r8
 80096d4:	f7ff fc38 	bl	8008f48 <_malloc_r>
 80096d8:	4607      	mov	r7, r0
 80096da:	2800      	cmp	r0, #0
 80096dc:	d0ec      	beq.n	80096b8 <_realloc_r+0x1c>
 80096de:	42b5      	cmp	r5, r6
 80096e0:	462a      	mov	r2, r5
 80096e2:	4621      	mov	r1, r4
 80096e4:	bf28      	it	cs
 80096e6:	4632      	movcs	r2, r6
 80096e8:	f7ff ffca 	bl	8009680 <memcpy>
 80096ec:	4621      	mov	r1, r4
 80096ee:	4640      	mov	r0, r8
 80096f0:	f7ff fbbe 	bl	8008e70 <_free_r>
 80096f4:	463c      	mov	r4, r7
 80096f6:	e7e0      	b.n	80096ba <_realloc_r+0x1e>

080096f8 <_malloc_usable_size_r>:
 80096f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096fc:	1f18      	subs	r0, r3, #4
 80096fe:	2b00      	cmp	r3, #0
 8009700:	bfbc      	itt	lt
 8009702:	580b      	ldrlt	r3, [r1, r0]
 8009704:	18c0      	addlt	r0, r0, r3
 8009706:	4770      	bx	lr

08009708 <_init>:
 8009708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800970a:	bf00      	nop
 800970c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800970e:	bc08      	pop	{r3}
 8009710:	469e      	mov	lr, r3
 8009712:	4770      	bx	lr

08009714 <_fini>:
 8009714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009716:	bf00      	nop
 8009718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800971a:	bc08      	pop	{r3}
 800971c:	469e      	mov	lr, r3
 800971e:	4770      	bx	lr
